
lora_tester_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000187f8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003924  080189c8  080189c8  000199c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c2ec  0801c2ec  0001e214  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801c2ec  0801c2ec  0001d2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c2f4  0801c2f4  0001e214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c2f4  0801c2f4  0001d2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c2f8  0801c2f8  0001d2f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d4  20000000  0801c2fc  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000d4  0801c3d0  0001e0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000174  0801c470  0001e174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00012f90  20000220  0801c510  0001e220  2**5
                  ALLOC
 12 ._user_heap_stack 00000600  200131b0  0801c510  0001f1b0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001e214  2**0
                  CONTENTS, READONLY
 14 .debug_info   00042aff  00000000  00000000  0001e244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009165  00000000  00000000  00060d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000037f8  00000000  00000000  00069ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002ba6  00000000  00000000  0006d6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037efa  00000000  00000000  00070246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004bda6  00000000  00000000  000a8140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012e2d4  00000000  00000000  000f3ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  002221ba  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f760  00000000  00000000  00222200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000082  00000000  00000000  00231960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080189b0 	.word	0x080189b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	080189b0 	.word	0x080189b0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <CommandSender_Send>:
#include <stddef.h>
#include <string.h>
#include <stdio.h>

void CommandSender_Send(const char* command)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	@ 0x58
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    if (command != NULL) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d051      	beq.n	80006be <CommandSender_Send+0xb2>
        int len = strlen(command);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fe02 	bl	8000224 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	653b      	str	r3, [r7, #80]	@ 0x50
        
        // 전송할 명령어를 명확히 로깅 (특수 문자도 표시)
        LOG_INFO("📤 TX: '%s' (%d bytes)", command, len);
 8000624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	4929      	ldr	r1, [pc, #164]	@ (80006d0 <CommandSender_Send+0xc4>)
 800062a:	2001      	movs	r0, #1
 800062c:	f005 f882 	bl	8005734 <LOGGER_SendFormatted>
        
        // 헥스 덤프도 표시 (처음 20바이트까지)
        if (len > 0) {
 8000630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000632:	2b00      	cmp	r3, #0
 8000634:	dd2c      	ble.n	8000690 <CommandSender_Send+0x84>
            char hex_dump[64] = {0};
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	2240      	movs	r2, #64	@ 0x40
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f017 fa62 	bl	8017b08 <memset>
            int dump_len = (len > 20) ? 20 : len;
 8000644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000646:	2b14      	cmp	r3, #20
 8000648:	bfa8      	it	ge
 800064a:	2314      	movge	r3, #20
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (int i = 0; i < dump_len; i++) {
 800064e:	2300      	movs	r3, #0
 8000650:	657b      	str	r3, [r7, #84]	@ 0x54
 8000652:	e012      	b.n	800067a <CommandSender_Send+0x6e>
                snprintf(hex_dump + i*3, 4, "%02X ", (unsigned char)command[i]);
 8000654:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	461a      	mov	r2, r3
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	1898      	adds	r0, r3, r2
 8000664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4a19      	ldr	r2, [pc, #100]	@ (80006d4 <CommandSender_Send+0xc8>)
 800066e:	2104      	movs	r1, #4
 8000670:	f017 f972 	bl	8017958 <sniprintf>
            for (int i = 0; i < dump_len; i++) {
 8000674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000676:	3301      	adds	r3, #1
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
 800067a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800067c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800067e:	429a      	cmp	r2, r3
 8000680:	dbe8      	blt.n	8000654 <CommandSender_Send+0x48>
            }
            LOG_DEBUG("[CommandSender] Hex: %s", hex_dump);
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	461a      	mov	r2, r3
 8000688:	4913      	ldr	r1, [pc, #76]	@ (80006d8 <CommandSender_Send+0xcc>)
 800068a:	2000      	movs	r0, #0
 800068c:	f005 f852 	bl	8005734 <LOGGER_SendFormatted>
        }
        
        UartStatus status = UART_Send(command);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f005 f9b3 	bl	80059fc <UART_Send>
 8000696:	4603      	mov	r3, r0
 8000698:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        
        if (status == UART_STATUS_OK) {
 800069c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d104      	bne.n	80006ae <CommandSender_Send+0xa2>
            LOG_DEBUG("[CommandSender] ✓ Command sent successfully");
 80006a4:	490d      	ldr	r1, [pc, #52]	@ (80006dc <CommandSender_Send+0xd0>)
 80006a6:	2000      	movs	r0, #0
 80006a8:	f005 f844 	bl	8005734 <LOGGER_SendFormatted>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
        }
    } else {
        LOG_WARN("[CommandSender] Attempted to send NULL command");
    }
}
 80006ac:	e00b      	b.n	80006c6 <CommandSender_Send+0xba>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
 80006ae:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006b2:	461a      	mov	r2, r3
 80006b4:	490a      	ldr	r1, [pc, #40]	@ (80006e0 <CommandSender_Send+0xd4>)
 80006b6:	2003      	movs	r0, #3
 80006b8:	f005 f83c 	bl	8005734 <LOGGER_SendFormatted>
}
 80006bc:	e003      	b.n	80006c6 <CommandSender_Send+0xba>
        LOG_WARN("[CommandSender] Attempted to send NULL command");
 80006be:	4909      	ldr	r1, [pc, #36]	@ (80006e4 <CommandSender_Send+0xd8>)
 80006c0:	2002      	movs	r0, #2
 80006c2:	f005 f837 	bl	8005734 <LOGGER_SendFormatted>
}
 80006c6:	bf00      	nop
 80006c8:	3758      	adds	r7, #88	@ 0x58
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	080189c8 	.word	0x080189c8
 80006d4:	080189e4 	.word	0x080189e4
 80006d8:	080189ec 	.word	0x080189ec
 80006dc:	08018a04 	.word	0x08018a04
 80006e0:	08018a34 	.word	0x08018a34
 80006e4:	08018a6c 	.word	0x08018a6c

080006e8 <get_state_name>:
};

const int LORA_DEFAULT_INIT_COMMANDS_COUNT = sizeof(LORA_DEFAULT_INIT_COMMANDS) / sizeof(LORA_DEFAULT_INIT_COMMANDS[0]);

// 상태 이름을 문자열로 변환하는 헬퍼 함수
static const char* get_state_name(LoraState state) {
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b0e      	cmp	r3, #14
 80006f6:	d83f      	bhi.n	8000778 <get_state_name+0x90>
 80006f8:	a201      	add	r2, pc, #4	@ (adr r2, 8000700 <get_state_name+0x18>)
 80006fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fe:	bf00      	nop
 8000700:	0800073d 	.word	0x0800073d
 8000704:	08000741 	.word	0x08000741
 8000708:	08000745 	.word	0x08000745
 800070c:	08000749 	.word	0x08000749
 8000710:	0800074d 	.word	0x0800074d
 8000714:	08000751 	.word	0x08000751
 8000718:	08000755 	.word	0x08000755
 800071c:	08000759 	.word	0x08000759
 8000720:	0800075d 	.word	0x0800075d
 8000724:	08000761 	.word	0x08000761
 8000728:	08000765 	.word	0x08000765
 800072c:	08000769 	.word	0x08000769
 8000730:	0800076d 	.word	0x0800076d
 8000734:	08000771 	.word	0x08000771
 8000738:	08000775 	.word	0x08000775
        case LORA_STATE_INIT: return "INIT";
 800073c:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <get_state_name+0xa0>)
 800073e:	e01c      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_SEND_CMD: return "SEND_CMD";
 8000740:	4b12      	ldr	r3, [pc, #72]	@ (800078c <get_state_name+0xa4>)
 8000742:	e01a      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_WAIT_OK: return "WAIT_OK";
 8000744:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <get_state_name+0xa8>)
 8000746:	e018      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_SEND_JOIN: return "SEND_JOIN";
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <get_state_name+0xac>)
 800074a:	e016      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_WAIT_JOIN_OK: return "WAIT_JOIN_OK";
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <get_state_name+0xb0>)
 800074e:	e014      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_SEND_TIMEREQ: return "SEND_TIMEREQ";
 8000750:	4b12      	ldr	r3, [pc, #72]	@ (800079c <get_state_name+0xb4>)
 8000752:	e012      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_WAIT_TIMEREQ_OK: return "WAIT_TIMEREQ_OK";
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <get_state_name+0xb8>)
 8000756:	e010      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_SEND_LTIME: return "SEND_LTIME";
 8000758:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <get_state_name+0xbc>)
 800075a:	e00e      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_WAIT_LTIME_RESPONSE: return "WAIT_LTIME_RESPONSE";
 800075c:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <get_state_name+0xc0>)
 800075e:	e00c      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_SEND_PERIODIC: return "SEND_PERIODIC";
 8000760:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <get_state_name+0xc4>)
 8000762:	e00a      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_WAIT_SEND_RESPONSE: return "WAIT_SEND_RESPONSE";
 8000764:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <get_state_name+0xc8>)
 8000766:	e008      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_WAIT_SEND_INTERVAL: return "WAIT_SEND_INTERVAL";
 8000768:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <get_state_name+0xcc>)
 800076a:	e006      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_JOIN_RETRY: return "JOIN_RETRY";
 800076c:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <get_state_name+0xd0>)
 800076e:	e004      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_DONE: return "DONE";
 8000770:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <get_state_name+0xd4>)
 8000772:	e002      	b.n	800077a <get_state_name+0x92>
        case LORA_STATE_ERROR: return "ERROR";
 8000774:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <get_state_name+0xd8>)
 8000776:	e000      	b.n	800077a <get_state_name+0x92>
        default: return "UNKNOWN";
 8000778:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <get_state_name+0xdc>)
    }
}
 800077a:	4618      	mov	r0, r3
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	08018ad8 	.word	0x08018ad8
 800078c:	08018ae0 	.word	0x08018ae0
 8000790:	08018aec 	.word	0x08018aec
 8000794:	08018af4 	.word	0x08018af4
 8000798:	08018b00 	.word	0x08018b00
 800079c:	08018b10 	.word	0x08018b10
 80007a0:	08018b20 	.word	0x08018b20
 80007a4:	08018b30 	.word	0x08018b30
 80007a8:	08018b3c 	.word	0x08018b3c
 80007ac:	08018b50 	.word	0x08018b50
 80007b0:	08018b60 	.word	0x08018b60
 80007b4:	08018b74 	.word	0x08018b74
 80007b8:	08018b88 	.word	0x08018b88
 80007bc:	08018b94 	.word	0x08018b94
 80007c0:	08018b9c 	.word	0x08018b9c
 80007c4:	08018ba4 	.word	0x08018ba4

080007c8 <LoraStarter_InitWithDefaults>:
    UART_Connect(port);
    LOG_INFO("[LoRa] UART connected to %s", port);
}

void LoraStarter_InitWithDefaults(LoraStarterContext* ctx, const char* send_message)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d032      	beq.n	800083e <LoraStarter_InitWithDefaults+0x76>
    
    ctx->state = LORA_STATE_INIT;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
    ctx->cmd_index = 0;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2200      	movs	r2, #0
 80007e2:	605a      	str	r2, [r3, #4]
    ctx->commands = LORA_DEFAULT_INIT_COMMANDS;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a18      	ldr	r2, [pc, #96]	@ (8000848 <LoraStarter_InitWithDefaults+0x80>)
 80007e8:	609a      	str	r2, [r3, #8]
    ctx->num_commands = LORA_DEFAULT_INIT_COMMANDS_COUNT;
 80007ea:	2205      	movs	r2, #5
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	60da      	str	r2, [r3, #12]
    ctx->send_message = (send_message != NULL) ? send_message : "TEST";
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <LoraStarter_InitWithDefaults+0x32>
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	e000      	b.n	80007fc <LoraStarter_InitWithDefaults+0x34>
 80007fa:	4b14      	ldr	r3, [pc, #80]	@ (800084c <LoraStarter_InitWithDefaults+0x84>)
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	61d3      	str	r3, [r2, #28]
    ctx->max_retry_count = 3;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2203      	movs	r2, #3
 8000804:	625a      	str	r2, [r3, #36]	@ 0x24
    ctx->send_interval_ms = 300000;  // 5분 간격
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4a11      	ldr	r2, [pc, #68]	@ (8000850 <LoraStarter_InitWithDefaults+0x88>)
 800080a:	615a      	str	r2, [r3, #20]
    ctx->last_send_time = 0;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
    ctx->send_count = 0;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
    ctx->error_count = 0;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
    ctx->last_retry_time = 0;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	@ 0x28
    ctx->retry_delay_ms = 1000;  // 1초 초기 지연
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800082a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    LOG_INFO("[LoRa] Initialized with defaults - Commands: %d, Message: %s", 
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	68da      	ldr	r2, [r3, #12]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	69db      	ldr	r3, [r3, #28]
 8000834:	4907      	ldr	r1, [pc, #28]	@ (8000854 <LoraStarter_InitWithDefaults+0x8c>)
 8000836:	2001      	movs	r0, #1
 8000838:	f004 ff7c 	bl	8005734 <LOGGER_SendFormatted>
 800083c:	e000      	b.n	8000840 <LoraStarter_InitWithDefaults+0x78>
    if (ctx == NULL) return;
 800083e:	bf00      	nop
             ctx->num_commands, ctx->send_message);
}
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000000 	.word	0x20000000
 800084c:	08018bc8 	.word	0x08018bc8
 8000850:	000493e0 	.word	0x000493e0
 8000854:	08018bd0 	.word	0x08018bd0

08000858 <LoraStarter_Process>:

void LoraStarter_Process(LoraStarterContext* ctx, const char* uart_rx)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b0bf      	sub	sp, #252	@ 0xfc
 800085c:	af02      	add	r7, sp, #8
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b00      	cmp	r3, #0
 8000866:	f000 82ff 	beq.w	8000e68 <LoraStarter_Process+0x610>

    LoraState old_state = ctx->state;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb

    switch(ctx->state) {
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b0c      	cmp	r3, #12
 8000878:	f200 82d5 	bhi.w	8000e26 <LoraStarter_Process+0x5ce>
 800087c:	a201      	add	r2, pc, #4	@ (adr r2, 8000884 <LoraStarter_Process+0x2c>)
 800087e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000882:	bf00      	nop
 8000884:	080008b9 	.word	0x080008b9
 8000888:	08000907 	.word	0x08000907
 800088c:	0800095d 	.word	0x0800095d
 8000890:	08000a17 	.word	0x08000a17
 8000894:	08000a2d 	.word	0x08000a2d
 8000898:	08000a75 	.word	0x08000a75
 800089c:	08000a8b 	.word	0x08000a8b
 80008a0:	08000ab1 	.word	0x08000ab1
 80008a4:	08000ac7 	.word	0x08000ac7
 80008a8:	08000b3f 	.word	0x08000b3f
 80008ac:	08000c5d 	.word	0x08000c5d
 80008b0:	08000d4d 	.word	0x08000d4d
 80008b4:	08000db3 	.word	0x08000db3
        case LORA_STATE_INIT:
            ctx->cmd_index = 0;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2200      	movs	r2, #0
 80008bc:	605a      	str	r2, [r3, #4]
            ctx->error_count = 0;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
            ctx->state = LORA_STATE_SEND_CMD;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2201      	movs	r2, #1
 80008c8:	701a      	strb	r2, [r3, #0]
            // 기본값 설정
            if (ctx->max_retry_count == 0) ctx->max_retry_count = 0; // 0이면 무제한
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d102      	bne.n	80008d8 <LoraStarter_Process+0x80>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2200      	movs	r2, #0
 80008d6:	625a      	str	r2, [r3, #36]	@ 0x24
            if (ctx->send_message == NULL) ctx->send_message = "Hello";
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	69db      	ldr	r3, [r3, #28]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d102      	bne.n	80008e6 <LoraStarter_Process+0x8e>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4aa1      	ldr	r2, [pc, #644]	@ (8000b68 <LoraStarter_Process+0x310>)
 80008e4:	61da      	str	r2, [r3, #28]
            ctx->last_retry_time = 0;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2200      	movs	r2, #0
 80008ea:	629a      	str	r2, [r3, #40]	@ 0x28
            ctx->retry_delay_ms = 1000; // 초기 재시도 지연: 1초
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008f2:	62da      	str	r2, [r3, #44]	@ 0x2c
            LOG_INFO("[LoRa] Initialized with message: %s, max_retries: %d", 
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	69da      	ldr	r2, [r3, #28]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008fc:	499b      	ldr	r1, [pc, #620]	@ (8000b6c <LoraStarter_Process+0x314>)
 80008fe:	2001      	movs	r0, #1
 8000900:	f004 ff18 	bl	8005734 <LOGGER_SendFormatted>
                    ctx->send_message, ctx->max_retry_count);
            break;
 8000904:	e298      	b.n	8000e38 <LoraStarter_Process+0x5e0>
        case LORA_STATE_SEND_CMD:
            if (ctx->cmd_index < ctx->num_commands) {
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	685a      	ldr	r2, [r3, #4]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	68db      	ldr	r3, [r3, #12]
 800090e:	429a      	cmp	r2, r3
 8000910:	da20      	bge.n	8000954 <LoraStarter_Process+0xfc>
                LOG_DEBUG("[LoRa] Sending command %d/%d: %s", 
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	1c59      	adds	r1, r3, #1
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	68d8      	ldr	r0, [r3, #12]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	689a      	ldr	r2, [r3, #8]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	4413      	add	r3, r2
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	4603      	mov	r3, r0
 800092e:	460a      	mov	r2, r1
 8000930:	498f      	ldr	r1, [pc, #572]	@ (8000b70 <LoraStarter_Process+0x318>)
 8000932:	2000      	movs	r0, #0
 8000934:	f004 fefe 	bl	8005734 <LOGGER_SendFormatted>
                         ctx->cmd_index + 1, ctx->num_commands, ctx->commands[ctx->cmd_index]);
                CommandSender_Send(ctx->commands[ctx->cmd_index]);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	689a      	ldr	r2, [r3, #8]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	4413      	add	r3, r2
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff fe60 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_OK;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2202      	movs	r2, #2
 8000950:	701a      	strb	r2, [r3, #0]
            } else {
                ctx->state = LORA_STATE_SEND_JOIN;
            }
            break;
 8000952:	e271      	b.n	8000e38 <LoraStarter_Process+0x5e0>
                ctx->state = LORA_STATE_SEND_JOIN;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2203      	movs	r2, #3
 8000958:	701a      	strb	r2, [r3, #0]
            break;
 800095a:	e26d      	b.n	8000e38 <LoraStarter_Process+0x5e0>
        case LORA_STATE_WAIT_OK:
            if (uart_rx) {
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	f000 8263 	beq.w	8000e2a <LoraStarter_Process+0x5d2>
                if (is_response_ok(uart_rx)) {
 8000964:	6838      	ldr	r0, [r7, #0]
 8000966:	f000 faab 	bl	8000ec0 <is_response_ok>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d010      	beq.n	8000992 <LoraStarter_Process+0x13a>
                    LOG_DEBUG("[LoRa] Command %d OK received", ctx->cmd_index + 1);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	3301      	adds	r3, #1
 8000976:	461a      	mov	r2, r3
 8000978:	497e      	ldr	r1, [pc, #504]	@ (8000b74 <LoraStarter_Process+0x31c>)
 800097a:	2000      	movs	r0, #0
 800097c:	f004 feda 	bl	8005734 <LOGGER_SendFormatted>
                    ctx->cmd_index++;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	1c5a      	adds	r2, r3, #1
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	605a      	str	r2, [r3, #4]
                    ctx->state = LORA_STATE_SEND_CMD;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2201      	movs	r2, #1
 800098e:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 에러 카운터 리셋
                        ctx->state = LORA_STATE_SEND_CMD;
                    }
                }
            }
            break;
 8000990:	e24b      	b.n	8000e2a <LoraStarter_Process+0x5d2>
                } else if (strstr(uart_rx, "ERROR") || strstr(uart_rx, "AT_COMMAND_NOT_FOUND")) {
 8000992:	4979      	ldr	r1, [pc, #484]	@ (8000b78 <LoraStarter_Process+0x320>)
 8000994:	6838      	ldr	r0, [r7, #0]
 8000996:	f017 f8df 	bl	8017b58 <strstr>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d107      	bne.n	80009b0 <LoraStarter_Process+0x158>
 80009a0:	4976      	ldr	r1, [pc, #472]	@ (8000b7c <LoraStarter_Process+0x324>)
 80009a2:	6838      	ldr	r0, [r7, #0]
 80009a4:	f017 f8d8 	bl	8017b58 <strstr>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	f000 823d 	beq.w	8000e2a <LoraStarter_Process+0x5d2>
                    LOG_WARN("[LoRa] Command %d failed: %s", ctx->cmd_index + 1, uart_rx);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	1c5a      	adds	r2, r3, #1
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	4971      	ldr	r1, [pc, #452]	@ (8000b80 <LoraStarter_Process+0x328>)
 80009ba:	2002      	movs	r0, #2
 80009bc:	f004 feba 	bl	8005734 <LOGGER_SendFormatted>
                    ctx->error_count++;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6a1b      	ldr	r3, [r3, #32]
 80009c4:	1c5a      	adds	r2, r3, #1
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	621a      	str	r2, [r3, #32]
                    if (ctx->error_count < 3) {
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6a1b      	ldr	r3, [r3, #32]
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	dc0d      	bgt.n	80009ee <LoraStarter_Process+0x196>
                        LOG_INFO("[LoRa] Retrying command %d (attempt %d/3)", ctx->cmd_index + 1, ctx->error_count + 1);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	1c5a      	adds	r2, r3, #1
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6a1b      	ldr	r3, [r3, #32]
 80009dc:	3301      	adds	r3, #1
 80009de:	4969      	ldr	r1, [pc, #420]	@ (8000b84 <LoraStarter_Process+0x32c>)
 80009e0:	2001      	movs	r0, #1
 80009e2:	f004 fea7 	bl	8005734 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_CMD; // 같은 명령 재시도
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2201      	movs	r2, #1
 80009ea:	701a      	strb	r2, [r3, #0]
            break;
 80009ec:	e21d      	b.n	8000e2a <LoraStarter_Process+0x5d2>
                        LOG_WARN("[LoRa] Command %d failed after 3 attempts, skipping to next", ctx->cmd_index + 1);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	3301      	adds	r3, #1
 80009f4:	461a      	mov	r2, r3
 80009f6:	4964      	ldr	r1, [pc, #400]	@ (8000b88 <LoraStarter_Process+0x330>)
 80009f8:	2002      	movs	r0, #2
 80009fa:	f004 fe9b 	bl	8005734 <LOGGER_SendFormatted>
                        ctx->cmd_index++; // 다음 명령으로 건너뛰기
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	1c5a      	adds	r2, r3, #1
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	605a      	str	r2, [r3, #4]
                        ctx->error_count = 0; // 에러 카운터 리셋
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	621a      	str	r2, [r3, #32]
                        ctx->state = LORA_STATE_SEND_CMD;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2201      	movs	r2, #1
 8000a12:	701a      	strb	r2, [r3, #0]
            break;
 8000a14:	e209      	b.n	8000e2a <LoraStarter_Process+0x5d2>
        case LORA_STATE_SEND_JOIN:
            LORA_LOG_JOIN_ATTEMPT();
 8000a16:	495d      	ldr	r1, [pc, #372]	@ (8000b8c <LoraStarter_Process+0x334>)
 8000a18:	2002      	movs	r0, #2
 8000a1a:	f004 fe8b 	bl	8005734 <LOGGER_SendFormatted>
            CommandSender_Send("AT+JOIN\r\n");
 8000a1e:	485c      	ldr	r0, [pc, #368]	@ (8000b90 <LoraStarter_Process+0x338>)
 8000a20:	f7ff fdf4 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_JOIN_OK;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2204      	movs	r2, #4
 8000a28:	701a      	strb	r2, [r3, #0]
            break;
 8000a2a:	e205      	b.n	8000e38 <LoraStarter_Process+0x5e0>
        case LORA_STATE_WAIT_JOIN_OK:
            if (uart_rx && is_join_response_ok(uart_rx)) {
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f000 81fd 	beq.w	8000e2e <LoraStarter_Process+0x5d6>
 8000a34:	6838      	ldr	r0, [r7, #0]
 8000a36:	f000 faab 	bl	8000f90 <is_join_response_ok>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	f000 81f6 	beq.w	8000e2e <LoraStarter_Process+0x5d6>
                LORA_LOG_JOIN_SUCCESS();
 8000a42:	4954      	ldr	r1, [pc, #336]	@ (8000b94 <LoraStarter_Process+0x33c>)
 8000a44:	2002      	movs	r0, #2
 8000a46:	f004 fe75 	bl	8005734 <LOGGER_SendFormatted>
                ctx->state = LORA_STATE_SEND_TIMEREQ; // JOIN 후 시간 동기화 요청으로 전환
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2205      	movs	r2, #5
 8000a4e:	701a      	strb	r2, [r3, #0]
                ctx->send_count = 0;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]
                ctx->error_count = 0; // JOIN 성공 시 에러 카운터 리셋
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
                ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a62:	62da      	str	r2, [r3, #44]	@ 0x2c
                ctx->last_retry_time = 0; // 재시도 시간 리셋
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	629a      	str	r2, [r3, #40]	@ 0x28
                LOG_INFO("[LoRa] JOIN successful, requesting time synchronization...");
 8000a6a:	494b      	ldr	r1, [pc, #300]	@ (8000b98 <LoraStarter_Process+0x340>)
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f004 fe61 	bl	8005734 <LOGGER_SendFormatted>
            }
            break;
 8000a72:	e1dc      	b.n	8000e2e <LoraStarter_Process+0x5d6>
        case LORA_STATE_SEND_TIMEREQ:
            LOG_INFO("[LoRa] Sending time synchronization request...");
 8000a74:	4949      	ldr	r1, [pc, #292]	@ (8000b9c <LoraStarter_Process+0x344>)
 8000a76:	2001      	movs	r0, #1
 8000a78:	f004 fe5c 	bl	8005734 <LOGGER_SendFormatted>
            CommandSender_Send("AT+TIMEREQ=1\r\n");
 8000a7c:	4848      	ldr	r0, [pc, #288]	@ (8000ba0 <LoraStarter_Process+0x348>)
 8000a7e:	f7ff fdc5 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_TIMEREQ_OK;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2206      	movs	r2, #6
 8000a86:	701a      	strb	r2, [r3, #0]
            break;
 8000a88:	e1d6      	b.n	8000e38 <LoraStarter_Process+0x5e0>
        case LORA_STATE_WAIT_TIMEREQ_OK:
            if (uart_rx && is_response_ok(uart_rx)) {
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	f000 81d0 	beq.w	8000e32 <LoraStarter_Process+0x5da>
 8000a92:	6838      	ldr	r0, [r7, #0]
 8000a94:	f000 fa14 	bl	8000ec0 <is_response_ok>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	f000 81c9 	beq.w	8000e32 <LoraStarter_Process+0x5da>
                LOG_WARN("[LoRa] ✅ Time synchronization enabled");
 8000aa0:	4940      	ldr	r1, [pc, #256]	@ (8000ba4 <LoraStarter_Process+0x34c>)
 8000aa2:	2002      	movs	r0, #2
 8000aa4:	f004 fe46 	bl	8005734 <LOGGER_SendFormatted>
                ctx->state = LORA_STATE_SEND_LTIME;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2207      	movs	r2, #7
 8000aac:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000aae:	e1c0      	b.n	8000e32 <LoraStarter_Process+0x5da>
        case LORA_STATE_SEND_LTIME:
            LOG_INFO("[LoRa] Requesting network time...");
 8000ab0:	493d      	ldr	r1, [pc, #244]	@ (8000ba8 <LoraStarter_Process+0x350>)
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f004 fe3e 	bl	8005734 <LOGGER_SendFormatted>
            CommandSender_Send("AT+LTIME=?\r\n");
 8000ab8:	483c      	ldr	r0, [pc, #240]	@ (8000bac <LoraStarter_Process+0x354>)
 8000aba:	f7ff fda7 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_LTIME_RESPONSE;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2208      	movs	r2, #8
 8000ac2:	701a      	strb	r2, [r3, #0]
            break;
 8000ac4:	e1b8      	b.n	8000e38 <LoraStarter_Process+0x5e0>
        case LORA_STATE_WAIT_LTIME_RESPONSE:
            if (uart_rx) {
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d033      	beq.n	8000b34 <LoraStarter_Process+0x2dc>
                LOG_DEBUG("[LoRa] LTIME response received: '%s'", uart_rx);
 8000acc:	683a      	ldr	r2, [r7, #0]
 8000ace:	4938      	ldr	r1, [pc, #224]	@ (8000bb0 <LoraStarter_Process+0x358>)
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f004 fe2f 	bl	8005734 <LOGGER_SendFormatted>
                
                // ResponseHandler에서 시간 응답 파싱 처리
                if (ResponseHandler_IsTimeResponse(uart_rx)) {
 8000ad6:	6838      	ldr	r0, [r7, #0]
 8000ad8:	f000 fb40 	bl	800115c <ResponseHandler_IsTimeResponse>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d022      	beq.n	8000b28 <LoraStarter_Process+0x2d0>
                    ResponseHandler_ParseTimeResponse(uart_rx);
 8000ae2:	6838      	ldr	r0, [r7, #0]
 8000ae4:	f000 fb60 	bl	80011a8 <ResponseHandler_ParseTimeResponse>
                    
                    // 현재 상태에 따라 다른 동작
                    if (ctx->send_count == 0) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d10e      	bne.n	8000b0e <LoraStarter_Process+0x2b6>
                        // 첫 번째 시간 동기화 (JOIN 후) - 주기적 전송 시작
                        LOG_WARN("[LoRa] 🕐 Initial time synchronized, starting periodic transmission");
 8000af0:	4930      	ldr	r1, [pc, #192]	@ (8000bb4 <LoraStarter_Process+0x35c>)
 8000af2:	2002      	movs	r0, #2
 8000af4:	f004 fe1e 	bl	8005734 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_PERIODIC;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2209      	movs	r2, #9
 8000afc:	701a      	strb	r2, [r3, #0]
                        LOG_WARN("[LoRa] 🚀 PERIODIC SEND STARTED with message: %s", ctx->send_message);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	461a      	mov	r2, r3
 8000b04:	492c      	ldr	r1, [pc, #176]	@ (8000bb8 <LoraStarter_Process+0x360>)
 8000b06:	2002      	movs	r0, #2
 8000b08:	f004 fe14 	bl	8005734 <LOGGER_SendFormatted>
                    LOG_DEBUG("[LoRa] Waiting for LTIME response, got: '%s'", uart_rx);
                }
            } else {
                LOG_DEBUG("[LoRa] WAIT_LTIME_RESPONSE: No uart_rx data received");
            }
            break;
 8000b0c:	e194      	b.n	8000e38 <LoraStarter_Process+0x5e0>
                        LOG_WARN("[LoRa] 🕐 Time logged after SEND, waiting for next interval");
 8000b0e:	492b      	ldr	r1, [pc, #172]	@ (8000bbc <LoraStarter_Process+0x364>)
 8000b10:	2002      	movs	r0, #2
 8000b12:	f004 fe0f 	bl	8005734 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	220b      	movs	r2, #11
 8000b1a:	701a      	strb	r2, [r3, #0]
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000b1c:	f004 fd70 	bl	8005600 <TIME_GetCurrentMs>
 8000b20:	4602      	mov	r2, r0
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	611a      	str	r2, [r3, #16]
            break;
 8000b26:	e187      	b.n	8000e38 <LoraStarter_Process+0x5e0>
                    LOG_DEBUG("[LoRa] Waiting for LTIME response, got: '%s'", uart_rx);
 8000b28:	683a      	ldr	r2, [r7, #0]
 8000b2a:	4925      	ldr	r1, [pc, #148]	@ (8000bc0 <LoraStarter_Process+0x368>)
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f004 fe01 	bl	8005734 <LOGGER_SendFormatted>
            break;
 8000b32:	e181      	b.n	8000e38 <LoraStarter_Process+0x5e0>
                LOG_DEBUG("[LoRa] WAIT_LTIME_RESPONSE: No uart_rx data received");
 8000b34:	4923      	ldr	r1, [pc, #140]	@ (8000bc4 <LoraStarter_Process+0x36c>)
 8000b36:	2000      	movs	r0, #0
 8000b38:	f004 fdfc 	bl	8005734 <LOGGER_SendFormatted>
            break;
 8000b3c:	e17c      	b.n	8000e38 <LoraStarter_Process+0x5e0>
        case LORA_STATE_SEND_PERIODIC:
            {
                char send_cmd[128];
                char hex_data[64];
                const char* message = (ctx->send_message != NULL) ? ctx->send_message : "Hello";
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <LoraStarter_Process+0x2f4>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	e000      	b.n	8000b4e <LoraStarter_Process+0x2f6>
 8000b4c:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <LoraStarter_Process+0x310>)
 8000b4e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                
                // 문자열을 헥사 문자열로 변환
                int len = strlen(message);
 8000b52:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8000b56:	f7ff fb65 	bl	8000224 <strlen>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000b60:	2300      	movs	r3, #0
 8000b62:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000b66:	e044      	b.n	8000bf2 <LoraStarter_Process+0x39a>
 8000b68:	08018c10 	.word	0x08018c10
 8000b6c:	08018c18 	.word	0x08018c18
 8000b70:	08018c50 	.word	0x08018c50
 8000b74:	08018c74 	.word	0x08018c74
 8000b78:	08018b9c 	.word	0x08018b9c
 8000b7c:	08018c94 	.word	0x08018c94
 8000b80:	08018cac 	.word	0x08018cac
 8000b84:	08018ccc 	.word	0x08018ccc
 8000b88:	08018cf8 	.word	0x08018cf8
 8000b8c:	08018d34 	.word	0x08018d34
 8000b90:	08018d58 	.word	0x08018d58
 8000b94:	08018d64 	.word	0x08018d64
 8000b98:	08018d80 	.word	0x08018d80
 8000b9c:	08018dbc 	.word	0x08018dbc
 8000ba0:	08018dec 	.word	0x08018dec
 8000ba4:	08018dfc 	.word	0x08018dfc
 8000ba8:	08018e24 	.word	0x08018e24
 8000bac:	08018e48 	.word	0x08018e48
 8000bb0:	08018e58 	.word	0x08018e58
 8000bb4:	08018e80 	.word	0x08018e80
 8000bb8:	08018ec8 	.word	0x08018ec8
 8000bbc:	08018efc 	.word	0x08018efc
 8000bc0:	08018f3c 	.word	0x08018f3c
 8000bc4:	08018f6c 	.word	0x08018f6c
                    sprintf(&hex_data[i*2], "%02X", (unsigned char)message[i]);
 8000bc8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	f107 020c 	add.w	r2, r7, #12
 8000bd2:	18d0      	adds	r0, r2, r3
 8000bd4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000bd8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000bdc:	4413      	add	r3, r2
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	49a3      	ldr	r1, [pc, #652]	@ (8000e70 <LoraStarter_Process+0x618>)
 8000be4:	f016 feee 	bl	80179c4 <siprintf>
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000be8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000bec:	3301      	adds	r3, #1
 8000bee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000bf2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000bf6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	da03      	bge.n	8000c06 <LoraStarter_Process+0x3ae>
 8000bfe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000c02:	2b1e      	cmp	r3, #30
 8000c04:	dde0      	ble.n	8000bc8 <LoraStarter_Process+0x370>
                }
                hex_data[len*2] = '\0';
 8000c06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	33f0      	adds	r3, #240	@ 0xf0
 8000c0e:	443b      	add	r3, r7
 8000c10:	2200      	movs	r2, #0
 8000c12:	f803 2ce4 	strb.w	r2, [r3, #-228]
                
                snprintf(send_cmd, sizeof(send_cmd), "AT+SEND=1:%s\r\n", hex_data);
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8000c1e:	4a95      	ldr	r2, [pc, #596]	@ (8000e74 <LoraStarter_Process+0x61c>)
 8000c20:	2180      	movs	r1, #128	@ 0x80
 8000c22:	f016 fe99 	bl	8017958 <sniprintf>
                LORA_LOG_SEND_ATTEMPT(message);
 8000c26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000c2a:	4993      	ldr	r1, [pc, #588]	@ (8000e78 <LoraStarter_Process+0x620>)
 8000c2c:	2002      	movs	r0, #2
 8000c2e:	f004 fd81 	bl	8005734 <LOGGER_SendFormatted>
                CommandSender_Send(send_cmd);
 8000c32:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fce8 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_SEND_RESPONSE;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	220a      	movs	r2, #10
 8000c40:	701a      	strb	r2, [r3, #0]
                ctx->send_count++;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	699b      	ldr	r3, [r3, #24]
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	619a      	str	r2, [r3, #24]
                LOG_DEBUG("[LoRa] Send count: %d", ctx->send_count);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	461a      	mov	r2, r3
 8000c52:	498a      	ldr	r1, [pc, #552]	@ (8000e7c <LoraStarter_Process+0x624>)
 8000c54:	2000      	movs	r0, #0
 8000c56:	f004 fd6d 	bl	8005734 <LOGGER_SendFormatted>
            }
            break;
 8000c5a:	e0ed      	b.n	8000e38 <LoraStarter_Process+0x5e0>
        case LORA_STATE_WAIT_SEND_RESPONSE:
            if (uart_rx) {
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f000 80e9 	beq.w	8000e36 <LoraStarter_Process+0x5de>
                ResponseType response_type = ResponseHandler_ParseSendResponse(uart_rx);
 8000c64:	6838      	ldr	r0, [r7, #0]
 8000c66:	f000 fa23 	bl	80010b0 <ResponseHandler_ParseSendResponse>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
                switch(response_type) {
 8000c70:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d019      	beq.n	8000cac <LoraStarter_Process+0x454>
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	dc60      	bgt.n	8000d3e <LoraStarter_Process+0x4e6>
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d002      	beq.n	8000c86 <LoraStarter_Process+0x42e>
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d027      	beq.n	8000cd4 <LoraStarter_Process+0x47c>
 8000c84:	e05b      	b.n	8000d3e <LoraStarter_Process+0x4e6>
                    case RESPONSE_OK:
                        LORA_LOG_SEND_SUCCESS();
 8000c86:	497e      	ldr	r1, [pc, #504]	@ (8000e80 <LoraStarter_Process+0x628>)
 8000c88:	2002      	movs	r0, #2
 8000c8a:	f004 fd53 	bl	8005734 <LOGGER_SendFormatted>
                        // SEND 성공 후 시간 정보 조회를 위해 LTIME 상태로 전환
                        ctx->state = LORA_STATE_SEND_LTIME;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2207      	movs	r2, #7
 8000c92:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2200      	movs	r2, #0
 8000c98:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ca0:	62da      	str	r2, [r3, #44]	@ 0x2c
                        LOG_INFO("[LoRa] SEND successful, requesting current time for logging...");
 8000ca2:	4978      	ldr	r1, [pc, #480]	@ (8000e84 <LoraStarter_Process+0x62c>)
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f004 fd45 	bl	8005734 <LOGGER_SendFormatted>
                        break;
 8000caa:	e04e      	b.n	8000d4a <LoraStarter_Process+0x4f2>
                    case RESPONSE_TIMEOUT:
                        LOG_WARN("[LoRa] SEND timeout - skipping time query");
 8000cac:	4976      	ldr	r1, [pc, #472]	@ (8000e88 <LoraStarter_Process+0x630>)
 8000cae:	2002      	movs	r0, #2
 8000cb0:	f004 fd40 	bl	8005734 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 타임아웃 시 시간 조회 생략
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	220b      	movs	r2, #11
 8000cb8:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; 
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs();
 8000cc8:	f004 fc9a 	bl	8005600 <TIME_GetCurrentMs>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	611a      	str	r2, [r3, #16]
                        break;
 8000cd2:	e03a      	b.n	8000d4a <LoraStarter_Process+0x4f2>
                    case RESPONSE_ERROR:
                        LORA_LOG_SEND_FAILED("Network error");
 8000cd4:	4a6d      	ldr	r2, [pc, #436]	@ (8000e8c <LoraStarter_Process+0x634>)
 8000cd6:	496e      	ldr	r1, [pc, #440]	@ (8000e90 <LoraStarter_Process+0x638>)
 8000cd8:	2002      	movs	r0, #2
 8000cda:	f004 fd2b 	bl	8005734 <LOGGER_SendFormatted>
                        ctx->error_count++;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6a1b      	ldr	r3, [r3, #32]
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	621a      	str	r2, [r3, #32]
                        LORA_LOG_ERROR_COUNT(ctx->error_count);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6a1b      	ldr	r3, [r3, #32]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4969      	ldr	r1, [pc, #420]	@ (8000e94 <LoraStarter_Process+0x63c>)
 8000cf0:	2002      	movs	r0, #2
 8000cf2:	f004 fd1f 	bl	8005734 <LOGGER_SendFormatted>
                        // 무제한 재시도 (max_retry_count가 0이거나 아직 제한에 도달하지 않은 경우)
                        if (ctx->max_retry_count == 0 || ctx->error_count < ctx->max_retry_count) {
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d005      	beq.n	8000d0a <LoraStarter_Process+0x4b2>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6a1a      	ldr	r2, [r3, #32]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d06:	429a      	cmp	r2, r3
 8000d08:	da11      	bge.n	8000d2e <LoraStarter_Process+0x4d6>
                            LORA_LOG_RETRY_ATTEMPT(ctx->error_count, ctx->max_retry_count);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6a1a      	ldr	r2, [r3, #32]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d002      	beq.n	8000d1c <LoraStarter_Process+0x4c4>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d1a:	e000      	b.n	8000d1e <LoraStarter_Process+0x4c6>
 8000d1c:	4b5e      	ldr	r3, [pc, #376]	@ (8000e98 <LoraStarter_Process+0x640>)
 8000d1e:	495f      	ldr	r1, [pc, #380]	@ (8000e9c <LoraStarter_Process+0x644>)
 8000d20:	2002      	movs	r0, #2
 8000d22:	f004 fd07 	bl	8005734 <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_JOIN_RETRY; // JOIN 재시도
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	220c      	movs	r2, #12
 8000d2a:	701a      	strb	r2, [r3, #0]
                        } else {
                            LORA_LOG_MAX_RETRIES_REACHED();
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
                        }
                        break;
 8000d2c:	e00d      	b.n	8000d4a <LoraStarter_Process+0x4f2>
                            LORA_LOG_MAX_RETRIES_REACHED();
 8000d2e:	495c      	ldr	r1, [pc, #368]	@ (8000ea0 <LoraStarter_Process+0x648>)
 8000d30:	2003      	movs	r0, #3
 8000d32:	f004 fcff 	bl	8005734 <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	220e      	movs	r2, #14
 8000d3a:	701a      	strb	r2, [r3, #0]
                        break;
 8000d3c:	e005      	b.n	8000d4a <LoraStarter_Process+0x4f2>
                    default:
                        // 알 수 없는 응답은 무시하고 계속 대기
                        LOG_DEBUG("[LoRa] Unknown response: %s", uart_rx);
 8000d3e:	683a      	ldr	r2, [r7, #0]
 8000d40:	4958      	ldr	r1, [pc, #352]	@ (8000ea4 <LoraStarter_Process+0x64c>)
 8000d42:	2000      	movs	r0, #0
 8000d44:	f004 fcf6 	bl	8005734 <LOGGER_SendFormatted>
                        break;
 8000d48:	bf00      	nop
                }
            }
            break;
 8000d4a:	e074      	b.n	8000e36 <LoraStarter_Process+0x5de>
        case LORA_STATE_WAIT_SEND_INTERVAL:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000d4c:	f004 fc58 	bl	8005600 <TIME_GetCurrentMs>
 8000d50:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
                uint32_t interval_ms = (ctx->send_interval_ms > 0) ? ctx->send_interval_ms : 30000; // 기본값 30초
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	695b      	ldr	r3, [r3, #20]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d002      	beq.n	8000d62 <LoraStarter_Process+0x50a>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	e001      	b.n	8000d66 <LoraStarter_Process+0x50e>
 8000d62:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000d66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                
                if ((current_time - ctx->last_send_time) >= interval_ms) {
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	691b      	ldr	r3, [r3, #16]
 8000d6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d809      	bhi.n	8000d90 <LoraStarter_Process+0x538>
                    LOG_DEBUG("[LoRa] Send interval passed (%u ms), ready for next send", interval_ms);
 8000d7c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000d80:	4949      	ldr	r1, [pc, #292]	@ (8000ea8 <LoraStarter_Process+0x650>)
 8000d82:	2000      	movs	r0, #0
 8000d84:	f004 fcd6 	bl	8005734 <LOGGER_SendFormatted>
                    ctx->state = LORA_STATE_SEND_PERIODIC;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2209      	movs	r2, #9
 8000d8c:	701a      	strb	r2, [r3, #0]
                    // 아직 대기 시간이 남았으므로 상태 유지
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
                }
            }
            break;
 8000d8e:	e053      	b.n	8000e38 <LoraStarter_Process+0x5e0>
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	691a      	ldr	r2, [r3, #16]
 8000d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000d9e:	4413      	add	r3, r2
 8000da0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
 8000da4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000da8:	4940      	ldr	r1, [pc, #256]	@ (8000eac <LoraStarter_Process+0x654>)
 8000daa:	2000      	movs	r0, #0
 8000dac:	f004 fcc2 	bl	8005734 <LOGGER_SendFormatted>
            break;
 8000db0:	e042      	b.n	8000e38 <LoraStarter_Process+0x5e0>
        case LORA_STATE_JOIN_RETRY:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000db2:	f004 fc25 	bl	8005600 <TIME_GetCurrentMs>
 8000db6:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
                
                if (ctx->last_retry_time == 0) {
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d10b      	bne.n	8000dda <LoraStarter_Process+0x582>
                    // 첫 재시도: 바로 SEND_JOIN
                    LOG_DEBUG("[LoRa] First JOIN retry");
 8000dc2:	493b      	ldr	r1, [pc, #236]	@ (8000eb0 <LoraStarter_Process+0x658>)
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f004 fcb5 	bl	8005734 <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000dd0:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	701a      	strb	r2, [r3, #0]
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
                             ctx->retry_delay_ms - (current_time - ctx->last_retry_time));
                    // 아무것도 하지 않음
                }
            }
            break;
 8000dd8:	e02e      	b.n	8000e38 <LoraStarter_Process+0x5e0>
                } else if ((current_time - ctx->last_retry_time) >= ctx->retry_delay_ms) {
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000de2:	1ad2      	subs	r2, r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d30e      	bcc.n	8000e0a <LoraStarter_Process+0x5b2>
                    LOG_DEBUG("[LoRa] JOIN retry after %lu ms delay", ctx->retry_delay_ms);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000df0:	461a      	mov	r2, r3
 8000df2:	4930      	ldr	r1, [pc, #192]	@ (8000eb4 <LoraStarter_Process+0x65c>)
 8000df4:	2000      	movs	r0, #0
 8000df6:	f004 fc9d 	bl	8005734 <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000e00:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2203      	movs	r2, #3
 8000e06:	701a      	strb	r2, [r3, #0]
            break;
 8000e08:	e016      	b.n	8000e38 <LoraStarter_Process+0x5e0>
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000e16:	1acb      	subs	r3, r1, r3
 8000e18:	4413      	add	r3, r2
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4926      	ldr	r1, [pc, #152]	@ (8000eb8 <LoraStarter_Process+0x660>)
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f004 fc88 	bl	8005734 <LOGGER_SendFormatted>
            break;
 8000e24:	e008      	b.n	8000e38 <LoraStarter_Process+0x5e0>
        case LORA_STATE_DONE:
        case LORA_STATE_ERROR:
        default:
            // 이미 완료된 상태이므로 아무것도 하지 않음
            break;
 8000e26:	bf00      	nop
 8000e28:	e006      	b.n	8000e38 <LoraStarter_Process+0x5e0>
            break;
 8000e2a:	bf00      	nop
 8000e2c:	e004      	b.n	8000e38 <LoraStarter_Process+0x5e0>
            break;
 8000e2e:	bf00      	nop
 8000e30:	e002      	b.n	8000e38 <LoraStarter_Process+0x5e0>
            break;
 8000e32:	bf00      	nop
 8000e34:	e000      	b.n	8000e38 <LoraStarter_Process+0x5e0>
            break;
 8000e36:	bf00      	nop
    }

    // 상태 변경 로깅
    if (old_state != ctx->state) {
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d012      	beq.n	8000e6a <LoraStarter_Process+0x612>
        LORA_LOG_STATE_CHANGE(get_state_name(old_state), get_state_name(ctx->state));
 8000e44:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fc4d 	bl	80006e8 <get_state_name>
 8000e4e:	4604      	mov	r4, r0
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fc47 	bl	80006e8 <get_state_name>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	4622      	mov	r2, r4
 8000e5e:	4917      	ldr	r1, [pc, #92]	@ (8000ebc <LoraStarter_Process+0x664>)
 8000e60:	2000      	movs	r0, #0
 8000e62:	f004 fc67 	bl	8005734 <LOGGER_SendFormatted>
 8000e66:	e000      	b.n	8000e6a <LoraStarter_Process+0x612>
    if (ctx == NULL) return;
 8000e68:	bf00      	nop
    }
}
 8000e6a:	37f4      	adds	r7, #244	@ 0xf4
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd90      	pop	{r4, r7, pc}
 8000e70:	08018fa4 	.word	0x08018fa4
 8000e74:	08018fac 	.word	0x08018fac
 8000e78:	08018fbc 	.word	0x08018fbc
 8000e7c:	08018fdc 	.word	0x08018fdc
 8000e80:	08018ff4 	.word	0x08018ff4
 8000e84:	08019010 	.word	0x08019010
 8000e88:	08019050 	.word	0x08019050
 8000e8c:	0801907c 	.word	0x0801907c
 8000e90:	0801908c 	.word	0x0801908c
 8000e94:	080190a4 	.word	0x080190a4
 8000e98:	080190bc 	.word	0x080190bc
 8000e9c:	080190c0 	.word	0x080190c0
 8000ea0:	080190dc 	.word	0x080190dc
 8000ea4:	08019100 	.word	0x08019100
 8000ea8:	0801911c 	.word	0x0801911c
 8000eac:	08019158 	.word	0x08019158
 8000eb0:	0801918c 	.word	0x0801918c
 8000eb4:	080191a4 	.word	0x080191a4
 8000eb8:	080191cc 	.word	0x080191cc
 8000ebc:	08019200 	.word	0x08019200

08000ec0 <is_response_ok>:
// 전역 변수: 네트워크에서 수신한 시간 정보 저장
static char g_network_time[64] = {0};
static bool g_time_synchronized = false;

bool is_response_ok(const char* response)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d105      	bne.n	8000eda <is_response_ok+0x1a>
        LOG_DEBUG("[ResponseHandler] is_response_ok: NULL response");
 8000ece:	4925      	ldr	r1, [pc, #148]	@ (8000f64 <is_response_ok+0xa4>)
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f004 fc2f 	bl	8005734 <LOGGER_SendFormatted>
        return false;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e03f      	b.n	8000f5a <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking OK response: '%s'", response);
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	4922      	ldr	r1, [pc, #136]	@ (8000f68 <is_response_ok+0xa8>)
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f004 fc28 	bl	8005734 <LOGGER_SendFormatted>
    
    // OK 또는 OK\r\n, OK\n 등 허용
    if (strcmp(response, "OK") == 0) {
 8000ee4:	4921      	ldr	r1, [pc, #132]	@ (8000f6c <is_response_ok+0xac>)
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff f992 	bl	8000210 <strcmp>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d105      	bne.n	8000efe <is_response_ok+0x3e>
        LOG_DEBUG("[ResponseHandler] OK response confirmed");
 8000ef2:	491f      	ldr	r1, [pc, #124]	@ (8000f70 <is_response_ok+0xb0>)
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f004 fc1d 	bl	8005734 <LOGGER_SendFormatted>
        return true;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e02d      	b.n	8000f5a <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\r\n") == 0) {
 8000efe:	491d      	ldr	r1, [pc, #116]	@ (8000f74 <is_response_ok+0xb4>)
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff f985 	bl	8000210 <strcmp>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d105      	bne.n	8000f18 <is_response_ok+0x58>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with CRLF)");
 8000f0c:	491a      	ldr	r1, [pc, #104]	@ (8000f78 <is_response_ok+0xb8>)
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f004 fc10 	bl	8005734 <LOGGER_SendFormatted>
        return true;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e020      	b.n	8000f5a <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\n") == 0) {
 8000f18:	4918      	ldr	r1, [pc, #96]	@ (8000f7c <is_response_ok+0xbc>)
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff f978 	bl	8000210 <strcmp>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d105      	bne.n	8000f32 <is_response_ok+0x72>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with LF)");
 8000f26:	4916      	ldr	r1, [pc, #88]	@ (8000f80 <is_response_ok+0xc0>)
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f004 fc03 	bl	8005734 <LOGGER_SendFormatted>
        return true;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e013      	b.n	8000f5a <is_response_ok+0x9a>
    }
    
    // AT+VER 버전 응답도 성공으로 간주 (RUI_로 시작하는 응답)
    if (strstr(response, "RUI_") != NULL) {
 8000f32:	4914      	ldr	r1, [pc, #80]	@ (8000f84 <is_response_ok+0xc4>)
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f016 fe0f 	bl	8017b58 <strstr>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d006      	beq.n	8000f4e <is_response_ok+0x8e>
        LOG_DEBUG("[ResponseHandler] Version response confirmed: %s", response);
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	4911      	ldr	r1, [pc, #68]	@ (8000f88 <is_response_ok+0xc8>)
 8000f44:	2000      	movs	r0, #0
 8000f46:	f004 fbf5 	bl	8005734 <LOGGER_SendFormatted>
        return true;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e005      	b.n	8000f5a <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Not an OK response: '%s'", response);
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	490e      	ldr	r1, [pc, #56]	@ (8000f8c <is_response_ok+0xcc>)
 8000f52:	2000      	movs	r0, #0
 8000f54:	f004 fbee 	bl	8005734 <LOGGER_SendFormatted>
    return false;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	08019220 	.word	0x08019220
 8000f68:	08019250 	.word	0x08019250
 8000f6c:	08019280 	.word	0x08019280
 8000f70:	08019284 	.word	0x08019284
 8000f74:	080192ac 	.word	0x080192ac
 8000f78:	080192b4 	.word	0x080192b4
 8000f7c:	080192e8 	.word	0x080192e8
 8000f80:	080192ec 	.word	0x080192ec
 8000f84:	08019320 	.word	0x08019320
 8000f88:	08019328 	.word	0x08019328
 8000f8c:	0801935c 	.word	0x0801935c

08000f90 <is_join_response_ok>:

bool is_join_response_ok(const char* response)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f9c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000fa0:	6018      	str	r0, [r3, #0]
    if (response == NULL) {
 8000fa2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000fa6:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d105      	bne.n	8000fbc <is_join_response_ok+0x2c>
        LOG_DEBUG("[ResponseHandler] is_join_response_ok: NULL response");
 8000fb0:	4938      	ldr	r1, [pc, #224]	@ (8001094 <is_join_response_ok+0x104>)
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f004 fbbe 	bl	8005734 <LOGGER_SendFormatted>
        return false;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	e066      	b.n	800108a <is_join_response_ok+0xfa>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking JOIN response: '%s'", response);
 8000fbc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000fc0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	4934      	ldr	r1, [pc, #208]	@ (8001098 <is_join_response_ok+0x108>)
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f004 fbb3 	bl	8005734 <LOGGER_SendFormatted>
    
    // 개행 문자 제거하여 비교
    char clean_response[512];
    strncpy(clean_response, response, sizeof(clean_response) - 1);
 8000fce:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000fd2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000fd6:	f107 0008 	add.w	r0, r7, #8
 8000fda:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8000fde:	6819      	ldr	r1, [r3, #0]
 8000fe0:	f016 fda7 	bl	8017b32 <strncpy>
    clean_response[sizeof(clean_response) - 1] = '\0';
 8000fe4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000fe8:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
    
    // 개행 문자 제거
    char* pos = clean_response;
 8000ff2:	f107 0308 	add.w	r3, r7, #8
 8000ff6:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000ffa:	e013      	b.n	8001024 <is_join_response_ok+0x94>
        if (*pos == '\r' || *pos == '\n') {
 8000ffc:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b0d      	cmp	r3, #13
 8001004:	d004      	beq.n	8001010 <is_join_response_ok+0x80>
 8001006:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b0a      	cmp	r3, #10
 800100e:	d104      	bne.n	800101a <is_join_response_ok+0x8a>
            *pos = '\0';
 8001010:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
            break;
 8001018:	e009      	b.n	800102e <is_join_response_ok+0x9e>
        }
        pos++;
 800101a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800101e:	3301      	adds	r3, #1
 8001020:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8001024:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1e6      	bne.n	8000ffc <is_join_response_ok+0x6c>
    }
    
    bool result = (strcmp(clean_response, "+EVT:JOINED") == 0);
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	491a      	ldr	r1, [pc, #104]	@ (800109c <is_join_response_ok+0x10c>)
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff f8eb 	bl	8000210 <strcmp>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	bf0c      	ite	eq
 8001040:	2301      	moveq	r3, #1
 8001042:	2300      	movne	r3, #0
 8001044:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    
    if (result) {
 8001048:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 800104c:	2b00      	cmp	r3, #0
 800104e:	d011      	beq.n	8001074 <is_join_response_ok+0xe4>
        LOG_WARN("[ResponseHandler] ✅ JOIN SUCCESS: %s", response);
 8001050:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001054:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	4911      	ldr	r1, [pc, #68]	@ (80010a0 <is_join_response_ok+0x110>)
 800105c:	2002      	movs	r0, #2
 800105e:	f004 fb69 	bl	8005734 <LOGGER_SendFormatted>
        LOG_WARN("[LoRa] 🌐 Network joined successfully - SD logging active");
 8001062:	4910      	ldr	r1, [pc, #64]	@ (80010a4 <is_join_response_ok+0x114>)
 8001064:	2002      	movs	r0, #2
 8001066:	f004 fb65 	bl	8005734 <LOGGER_SendFormatted>
        
        // JOIN 성공 후 시간 조회 요청 (네트워크 동기화 대기 후)
        LOG_INFO("[ResponseHandler] Requesting network time after JOIN success...");
 800106a:	490f      	ldr	r1, [pc, #60]	@ (80010a8 <is_join_response_ok+0x118>)
 800106c:	2001      	movs	r0, #1
 800106e:	f004 fb61 	bl	8005734 <LOGGER_SendFormatted>
 8001072:	e008      	b.n	8001086 <is_join_response_ok+0xf6>
        // 짧은 대기 후 시간 조회 (메인 루프에서 처리될 예정)
    } else {
        LOG_DEBUG("[ResponseHandler] Not a JOIN response: '%s'", response);
 8001074:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001078:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	490b      	ldr	r1, [pc, #44]	@ (80010ac <is_join_response_ok+0x11c>)
 8001080:	2000      	movs	r0, #0
 8001082:	f004 fb57 	bl	8005734 <LOGGER_SendFormatted>
    }
    
    return result;
 8001086:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
}
 800108a:	4618      	mov	r0, r3
 800108c:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	08019388 	.word	0x08019388
 8001098:	080193c0 	.word	0x080193c0
 800109c:	080193f0 	.word	0x080193f0
 80010a0:	080193fc 	.word	0x080193fc
 80010a4:	08019424 	.word	0x08019424
 80010a8:	08019460 	.word	0x08019460
 80010ac:	080194a0 	.word	0x080194a0

080010b0 <ResponseHandler_ParseSendResponse>:

ResponseType ResponseHandler_ParseSendResponse(const char* response)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d105      	bne.n	80010ca <ResponseHandler_ParseSendResponse+0x1a>
        LOG_DEBUG("[ResponseHandler] ParseSendResponse: NULL response");
 80010be:	491e      	ldr	r1, [pc, #120]	@ (8001138 <ResponseHandler_ParseSendResponse+0x88>)
 80010c0:	2000      	movs	r0, #0
 80010c2:	f004 fb37 	bl	8005734 <LOGGER_SendFormatted>
        return RESPONSE_UNKNOWN;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e031      	b.n	800112e <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Parsing SEND response: '%s'", response);
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	491b      	ldr	r1, [pc, #108]	@ (800113c <ResponseHandler_ParseSendResponse+0x8c>)
 80010ce:	2000      	movs	r0, #0
 80010d0:	f004 fb30 	bl	8005734 <LOGGER_SendFormatted>
    
    if (strstr(response, "+EVT:SEND_CONFIRMED_OK") != NULL) {
 80010d4:	491a      	ldr	r1, [pc, #104]	@ (8001140 <ResponseHandler_ParseSendResponse+0x90>)
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f016 fd3e 	bl	8017b58 <strstr>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d005      	beq.n	80010ee <ResponseHandler_ParseSendResponse+0x3e>
        LOG_WARN("[ResponseHandler] ✅ SEND SUCCESS: CONFIRMED_OK");
 80010e2:	4918      	ldr	r1, [pc, #96]	@ (8001144 <ResponseHandler_ParseSendResponse+0x94>)
 80010e4:	2002      	movs	r0, #2
 80010e6:	f004 fb25 	bl	8005734 <LOGGER_SendFormatted>
        return RESPONSE_OK;
 80010ea:	2300      	movs	r3, #0
 80010ec:	e01f      	b.n	800112e <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strstr(response, "+EVT:SEND_CONFIRMED_FAILED") != NULL) {
 80010ee:	4916      	ldr	r1, [pc, #88]	@ (8001148 <ResponseHandler_ParseSendResponse+0x98>)
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f016 fd31 	bl	8017b58 <strstr>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d005      	beq.n	8001108 <ResponseHandler_ParseSendResponse+0x58>
        LOG_WARN("[ResponseHandler] SEND response: CONFIRMED_FAILED");
 80010fc:	4913      	ldr	r1, [pc, #76]	@ (800114c <ResponseHandler_ParseSendResponse+0x9c>)
 80010fe:	2002      	movs	r0, #2
 8001100:	f004 fb18 	bl	8005734 <LOGGER_SendFormatted>
        return RESPONSE_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e012      	b.n	800112e <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strcmp(response, "TIMEOUT") == 0) {
 8001108:	4911      	ldr	r1, [pc, #68]	@ (8001150 <ResponseHandler_ParseSendResponse+0xa0>)
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff f880 	bl	8000210 <strcmp>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d105      	bne.n	8001122 <ResponseHandler_ParseSendResponse+0x72>
        LOG_WARN("[ResponseHandler] SEND response: TIMEOUT");
 8001116:	490f      	ldr	r1, [pc, #60]	@ (8001154 <ResponseHandler_ParseSendResponse+0xa4>)
 8001118:	2002      	movs	r0, #2
 800111a:	f004 fb0b 	bl	8005734 <LOGGER_SendFormatted>
        return RESPONSE_TIMEOUT;
 800111e:	2302      	movs	r3, #2
 8001120:	e005      	b.n	800112e <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Unknown SEND response: '%s'", response);
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	490c      	ldr	r1, [pc, #48]	@ (8001158 <ResponseHandler_ParseSendResponse+0xa8>)
 8001126:	2000      	movs	r0, #0
 8001128:	f004 fb04 	bl	8005734 <LOGGER_SendFormatted>
    return RESPONSE_UNKNOWN;
 800112c:	2303      	movs	r3, #3
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	080194cc 	.word	0x080194cc
 800113c:	08019500 	.word	0x08019500
 8001140:	08019530 	.word	0x08019530
 8001144:	08019548 	.word	0x08019548
 8001148:	0801957c 	.word	0x0801957c
 800114c:	08019598 	.word	0x08019598
 8001150:	080195cc 	.word	0x080195cc
 8001154:	080195d4 	.word	0x080195d4
 8001158:	08019600 	.word	0x08019600

0800115c <ResponseHandler_IsTimeResponse>:

// 시간 응답 확인 함수
bool ResponseHandler_IsTimeResponse(const char* response)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <ResponseHandler_IsTimeResponse+0x12>
        return false;
 800116a:	2300      	movs	r3, #0
 800116c:	e013      	b.n	8001196 <ResponseHandler_IsTimeResponse+0x3a>
    }
    
    return (strstr(response, "LTIME:") != NULL || strstr(response, "LTIME=") != NULL);
 800116e:	490c      	ldr	r1, [pc, #48]	@ (80011a0 <ResponseHandler_IsTimeResponse+0x44>)
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f016 fcf1 	bl	8017b58 <strstr>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d106      	bne.n	800118a <ResponseHandler_IsTimeResponse+0x2e>
 800117c:	4909      	ldr	r1, [pc, #36]	@ (80011a4 <ResponseHandler_IsTimeResponse+0x48>)
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f016 fcea 	bl	8017b58 <strstr>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <ResponseHandler_IsTimeResponse+0x32>
 800118a:	2301      	movs	r3, #1
 800118c:	e000      	b.n	8001190 <ResponseHandler_IsTimeResponse+0x34>
 800118e:	2300      	movs	r3, #0
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	b2db      	uxtb	r3, r3
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	08019630 	.word	0x08019630
 80011a4:	08019638 	.word	0x08019638

080011a8 <ResponseHandler_ParseTimeResponse>:

// 시간 응답 파싱 및 저장 함수
void ResponseHandler_ParseTimeResponse(const char* response)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
    if (response == NULL || !ResponseHandler_IsTimeResponse(response)) {
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d05c      	beq.n	8001270 <ResponseHandler_ParseTimeResponse+0xc8>
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ffd0 	bl	800115c <ResponseHandler_IsTimeResponse>
 80011bc:	4603      	mov	r3, r0
 80011be:	f083 0301 	eor.w	r3, r3, #1
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d153      	bne.n	8001270 <ResponseHandler_ParseTimeResponse+0xc8>
        return;
    }
    
    LOG_DEBUG("[ResponseHandler] Parsing time response: '%s'", response);
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	492b      	ldr	r1, [pc, #172]	@ (8001278 <ResponseHandler_ParseTimeResponse+0xd0>)
 80011cc:	2000      	movs	r0, #0
 80011ce:	f004 fab1 	bl	8005734 <LOGGER_SendFormatted>
    
    // LTIME 응답에서 시간 정보 추출 (LTIME: 또는 LTIME= 형식 모두 지원)
    const char* time_start = strstr(response, "LTIME:");
 80011d2:	492a      	ldr	r1, [pc, #168]	@ (800127c <ResponseHandler_ParseTimeResponse+0xd4>)
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f016 fcbf 	bl	8017b58 <strstr>
 80011da:	60f8      	str	r0, [r7, #12]
    if (time_start != NULL) {
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <ResponseHandler_ParseTimeResponse+0x42>
        // "LTIME: 14h25m30s on 01/29/2025" 형태에서 시간 부분 추출
        time_start += 6; // "LTIME:" 부분 건너뛰기
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	3306      	adds	r3, #6
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	e00a      	b.n	8001200 <ResponseHandler_ParseTimeResponse+0x58>
    } else {
        time_start = strstr(response, "LTIME=");
 80011ea:	4925      	ldr	r1, [pc, #148]	@ (8001280 <ResponseHandler_ParseTimeResponse+0xd8>)
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f016 fcb3 	bl	8017b58 <strstr>
 80011f2:	60f8      	str	r0, [r7, #12]
        if (time_start != NULL) {
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d002      	beq.n	8001200 <ResponseHandler_ParseTimeResponse+0x58>
            // "AT+LTIME=00h00m28s on 01/01/19" 형태에서 시간 부분 추출
            time_start += 6; // "LTIME=" 부분 건너뛰기
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	3306      	adds	r3, #6
 80011fe:	60fb      	str	r3, [r7, #12]
        }
    }
    
    if (time_start != NULL) {
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d035      	beq.n	8001272 <ResponseHandler_ParseTimeResponse+0xca>
        
        // 앞쪽 공백 제거
        while (*time_start == ' ') {
 8001206:	e002      	b.n	800120e <ResponseHandler_ParseTimeResponse+0x66>
            time_start++;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	3301      	adds	r3, #1
 800120c:	60fb      	str	r3, [r7, #12]
        while (*time_start == ' ') {
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b20      	cmp	r3, #32
 8001214:	d0f8      	beq.n	8001208 <ResponseHandler_ParseTimeResponse+0x60>
        }
        
        // 전역 변수에 시간 정보 저장 (개행 문자 제거)
        strncpy(g_network_time, time_start, sizeof(g_network_time) - 1);
 8001216:	223f      	movs	r2, #63	@ 0x3f
 8001218:	68f9      	ldr	r1, [r7, #12]
 800121a:	481a      	ldr	r0, [pc, #104]	@ (8001284 <ResponseHandler_ParseTimeResponse+0xdc>)
 800121c:	f016 fc89 	bl	8017b32 <strncpy>
        g_network_time[sizeof(g_network_time) - 1] = '\0';
 8001220:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <ResponseHandler_ParseTimeResponse+0xdc>)
 8001222:	2200      	movs	r2, #0
 8001224:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        
        // 개행 문자 제거
        char* newline = strchr(g_network_time, '\r');
 8001228:	210d      	movs	r1, #13
 800122a:	4816      	ldr	r0, [pc, #88]	@ (8001284 <ResponseHandler_ParseTimeResponse+0xdc>)
 800122c:	f016 fc74 	bl	8017b18 <strchr>
 8001230:	60b8      	str	r0, [r7, #8]
        if (newline) *newline = '\0';
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d002      	beq.n	800123e <ResponseHandler_ParseTimeResponse+0x96>
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
        newline = strchr(g_network_time, '\n');
 800123e:	210a      	movs	r1, #10
 8001240:	4810      	ldr	r0, [pc, #64]	@ (8001284 <ResponseHandler_ParseTimeResponse+0xdc>)
 8001242:	f016 fc69 	bl	8017b18 <strchr>
 8001246:	60b8      	str	r0, [r7, #8]
        if (newline) *newline = '\0';
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d002      	beq.n	8001254 <ResponseHandler_ParseTimeResponse+0xac>
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
        
        g_time_synchronized = true;
 8001254:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <ResponseHandler_ParseTimeResponse+0xe0>)
 8001256:	2201      	movs	r2, #1
 8001258:	701a      	strb	r2, [r3, #0]
        
        LOG_WARN("[LoRa] 🕐 Network time synchronized: %s", g_network_time);
 800125a:	4a0a      	ldr	r2, [pc, #40]	@ (8001284 <ResponseHandler_ParseTimeResponse+0xdc>)
 800125c:	490b      	ldr	r1, [pc, #44]	@ (800128c <ResponseHandler_ParseTimeResponse+0xe4>)
 800125e:	2002      	movs	r0, #2
 8001260:	f004 fa68 	bl	8005734 <LOGGER_SendFormatted>
        LOG_WARN("[TIMESTAMP] Network time: %s", g_network_time);
 8001264:	4a07      	ldr	r2, [pc, #28]	@ (8001284 <ResponseHandler_ParseTimeResponse+0xdc>)
 8001266:	490a      	ldr	r1, [pc, #40]	@ (8001290 <ResponseHandler_ParseTimeResponse+0xe8>)
 8001268:	2002      	movs	r0, #2
 800126a:	f004 fa63 	bl	8005734 <LOGGER_SendFormatted>
 800126e:	e000      	b.n	8001272 <ResponseHandler_ParseTimeResponse+0xca>
        return;
 8001270:	bf00      	nop
    }
}
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	08019640 	.word	0x08019640
 800127c:	08019630 	.word	0x08019630
 8001280:	08019638 	.word	0x08019638
 8001284:	2000023c 	.word	0x2000023c
 8001288:	2000027c 	.word	0x2000027c
 800128c:	08019670 	.word	0x08019670
 8001290:	0801969c 	.word	0x0801969c

08001294 <ResponseHandler_GetNetworkTime>:

// 현재 저장된 네트워크 시간 반환
const char* ResponseHandler_GetNetworkTime(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
    if (g_time_synchronized) {
 8001298:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <ResponseHandler_GetNetworkTime+0x1c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <ResponseHandler_GetNetworkTime+0x10>
        return g_network_time;
 80012a0:	4b04      	ldr	r3, [pc, #16]	@ (80012b4 <ResponseHandler_GetNetworkTime+0x20>)
 80012a2:	e000      	b.n	80012a6 <ResponseHandler_GetNetworkTime+0x12>
    }
    return NULL;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	2000027c 	.word	0x2000027c
 80012b4:	2000023c 	.word	0x2000023c

080012b8 <ResponseHandler_IsTimeSynchronized>:

// 시간 동기화 상태 확인
bool ResponseHandler_IsTimeSynchronized(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
    return g_time_synchronized;
 80012bc:	4b03      	ldr	r3, [pc, #12]	@ (80012cc <ResponseHandler_IsTimeSynchronized+0x14>)
 80012be:	781b      	ldrb	r3, [r3, #0]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	2000027c 	.word	0x2000027c

080012d0 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80012d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <SCB_CleanInvalidateDCache+0x74>)
 80012d8:	2200      	movs	r2, #0
 80012da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012de:	f3bf 8f4f 	dsb	sy
}
 80012e2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80012e4:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <SCB_CleanInvalidateDCache+0x74>)
 80012e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012ea:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	0b5b      	lsrs	r3, r3, #13
 80012f0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80012f4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	08db      	lsrs	r3, r3, #3
 80012fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012fe:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	015a      	lsls	r2, r3, #5
 8001304:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001308:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800130e:	490d      	ldr	r1, [pc, #52]	@ (8001344 <SCB_CleanInvalidateDCache+0x74>)
 8001310:	4313      	orrs	r3, r2
 8001312:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	1e5a      	subs	r2, r3, #1
 800131a:	60ba      	str	r2, [r7, #8]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1ef      	bne.n	8001300 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	1e5a      	subs	r2, r3, #1
 8001324:	60fa      	str	r2, [r7, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1e5      	bne.n	80012f6 <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800132a:	f3bf 8f4f 	dsb	sy
}
 800132e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001330:	f3bf 8f6f 	isb	sy
}
 8001334:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001336:	bf00      	nop
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <_ensure_file_closed>:
static FILE* g_log_file = NULL;
#endif

// 파일 닫기 보장 함수들
#ifdef STM32F746xx
static void _ensure_file_closed(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
    if (g_current_file_handle != NULL) {
 800134c:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <_ensure_file_closed+0x38>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d012      	beq.n	800137a <_ensure_file_closed+0x32>
        LOG_DEBUG("[SDStorage] Force closing previously opened file: %s", g_current_open_file);
 8001354:	4a0b      	ldr	r2, [pc, #44]	@ (8001384 <_ensure_file_closed+0x3c>)
 8001356:	490c      	ldr	r1, [pc, #48]	@ (8001388 <_ensure_file_closed+0x40>)
 8001358:	2000      	movs	r0, #0
 800135a:	f004 f9eb 	bl	8005734 <LOGGER_SendFormatted>
        f_close(g_current_file_handle);
 800135e:	4b08      	ldr	r3, [pc, #32]	@ (8001380 <_ensure_file_closed+0x38>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f012 ff8c 	bl	8014280 <f_close>
        g_current_file_handle = NULL;
 8001368:	4b05      	ldr	r3, [pc, #20]	@ (8001380 <_ensure_file_closed+0x38>)
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
        memset(g_current_open_file, 0, sizeof(g_current_open_file));
 800136e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001372:	2100      	movs	r1, #0
 8001374:	4803      	ldr	r0, [pc, #12]	@ (8001384 <_ensure_file_closed+0x3c>)
 8001376:	f016 fbc7 	bl	8017b08 <memset>
    }
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000388 	.word	0x20000388
 8001384:	2000038c 	.word	0x2000038c
 8001388:	080196bc 	.word	0x080196bc

0800138c <_register_file_opened>:

static void _register_file_opened(FIL* file_handle, const char* filename) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
    g_current_file_handle = file_handle;
 8001396:	4a08      	ldr	r2, [pc, #32]	@ (80013b8 <_register_file_opened+0x2c>)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6013      	str	r3, [r2, #0]
    strncpy(g_current_open_file, filename, sizeof(g_current_open_file) - 1);
 800139c:	22ff      	movs	r2, #255	@ 0xff
 800139e:	6839      	ldr	r1, [r7, #0]
 80013a0:	4806      	ldr	r0, [pc, #24]	@ (80013bc <_register_file_opened+0x30>)
 80013a2:	f016 fbc6 	bl	8017b32 <strncpy>
    g_current_open_file[sizeof(g_current_open_file) - 1] = '\0';
 80013a6:	4b05      	ldr	r3, [pc, #20]	@ (80013bc <_register_file_opened+0x30>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000388 	.word	0x20000388
 80013bc:	2000038c 	.word	0x2000038c

080013c0 <_register_file_closed>:

static void _register_file_closed(void) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
    g_current_file_handle = NULL;
 80013c4:	4b05      	ldr	r3, [pc, #20]	@ (80013dc <_register_file_closed+0x1c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
    memset(g_current_open_file, 0, sizeof(g_current_open_file));
 80013ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013ce:	2100      	movs	r1, #0
 80013d0:	4803      	ldr	r0, [pc, #12]	@ (80013e0 <_register_file_closed+0x20>)
 80013d2:	f016 fb99 	bl	8017b08 <memset>
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000388 	.word	0x20000388
 80013e0:	2000038c 	.word	0x2000038c

080013e4 <SDStorage_Init>:
static int _create_log_directory(void);
static int _generate_log_filename(char* filename, size_t max_len);
// static uint32_t _get_current_timestamp(void); - unused function removed

int SDStorage_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af02      	add	r7, sp, #8
#ifdef STM32F746xx
    // STM32 환경: FatFs 초기화 및 진단
    LOG_INFO("[SDStorage] Starting SD card initialization...");
 80013ea:	49b0      	ldr	r1, [pc, #704]	@ (80016ac <SDStorage_Init+0x2c8>)
 80013ec:	2001      	movs	r0, #1
 80013ee:	f004 f9a1 	bl	8005734 <LOGGER_SendFormatted>
    
    // 초기화 시 파일 닫기 보장
    _ensure_file_closed();
 80013f2:	f7ff ffa9 	bl	8001348 <_ensure_file_closed>
    
    // 1. 하드웨어 상태 진단 및 TRANSFER 상태까지 대기
    extern SD_HandleTypeDef hsd1;
    HAL_SD_CardStateTypeDef card_state = HAL_SD_GetCardState(&hsd1);
 80013f6:	48ae      	ldr	r0, [pc, #696]	@ (80016b0 <SDStorage_Init+0x2cc>)
 80013f8:	f00c f952 	bl	800d6a0 <HAL_SD_GetCardState>
 80013fc:	6178      	str	r0, [r7, #20]
    LOG_INFO("[SDStorage] Initial SD card state: %d", card_state);
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	49ac      	ldr	r1, [pc, #688]	@ (80016b4 <SDStorage_Init+0x2d0>)
 8001402:	2001      	movs	r0, #1
 8001404:	f004 f996 	bl	8005734 <LOGGER_SendFormatted>
    
    // SD 카드가 TRANSFER 상태가 될 때까지 대기 (성공 프로젝트 패턴)
    int wait_count = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]
    while (card_state != HAL_SD_CARD_TRANSFER && wait_count < 50) {  // 최대 5초 대기
 800140c:	e010      	b.n	8001430 <SDStorage_Init+0x4c>
        LOG_INFO("[SDStorage] Waiting for SD card TRANSFER state... (attempt %d)", wait_count + 1);
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	3301      	adds	r3, #1
 8001412:	461a      	mov	r2, r3
 8001414:	49a8      	ldr	r1, [pc, #672]	@ (80016b8 <SDStorage_Init+0x2d4>)
 8001416:	2001      	movs	r0, #1
 8001418:	f004 f98c 	bl	8005734 <LOGGER_SendFormatted>
        HAL_Delay(100);
 800141c:	2064      	movs	r0, #100	@ 0x64
 800141e:	f004 ffa9 	bl	8006374 <HAL_Delay>
        card_state = HAL_SD_GetCardState(&hsd1);
 8001422:	48a3      	ldr	r0, [pc, #652]	@ (80016b0 <SDStorage_Init+0x2cc>)
 8001424:	f00c f93c 	bl	800d6a0 <HAL_SD_GetCardState>
 8001428:	6178      	str	r0, [r7, #20]
        wait_count++;
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	3301      	adds	r3, #1
 800142e:	613b      	str	r3, [r7, #16]
    while (card_state != HAL_SD_CARD_TRANSFER && wait_count < 50) {  // 최대 5초 대기
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	2b04      	cmp	r3, #4
 8001434:	d002      	beq.n	800143c <SDStorage_Init+0x58>
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	2b31      	cmp	r3, #49	@ 0x31
 800143a:	dde8      	ble.n	800140e <SDStorage_Init+0x2a>
    }
    
    if (card_state == HAL_SD_CARD_TRANSFER) {
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	2b04      	cmp	r3, #4
 8001440:	d128      	bne.n	8001494 <SDStorage_Init+0xb0>
        LOG_INFO("[SDStorage] ✅ SD card reached TRANSFER state successfully");
 8001442:	499e      	ldr	r1, [pc, #632]	@ (80016bc <SDStorage_Init+0x2d8>)
 8001444:	2001      	movs	r0, #1
 8001446:	f004 f975 	bl	8005734 <LOGGER_SendFormatted>
        
        // SDMMC 에러 코드 상세 체크 (성공 프로젝트 패턴)
        if (hsd1.ErrorCode != HAL_SD_ERROR_NONE) {
 800144a:	4b99      	ldr	r3, [pc, #612]	@ (80016b0 <SDStorage_Init+0x2cc>)
 800144c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800144e:	2b00      	cmp	r3, #0
 8001450:	d02f      	beq.n	80014b2 <SDStorage_Init+0xce>
            LOG_WARN("[SDStorage] SDMMC ErrorCode detected: 0x%08X", hsd1.ErrorCode);
 8001452:	4b97      	ldr	r3, [pc, #604]	@ (80016b0 <SDStorage_Init+0x2cc>)
 8001454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001456:	461a      	mov	r2, r3
 8001458:	4999      	ldr	r1, [pc, #612]	@ (80016c0 <SDStorage_Init+0x2dc>)
 800145a:	2002      	movs	r0, #2
 800145c:	f004 f96a 	bl	8005734 <LOGGER_SendFormatted>
            
            if (hsd1.ErrorCode & SDMMC_ERROR_TX_UNDERRUN) {
 8001460:	4b93      	ldr	r3, [pc, #588]	@ (80016b0 <SDStorage_Init+0x2cc>)
 8001462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001464:	f003 0310 	and.w	r3, r3, #16
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <SDStorage_Init+0x90>
                LOG_WARN("[SDStorage] TX_UNDERRUN detected - clock may be too fast");
 800146c:	4995      	ldr	r1, [pc, #596]	@ (80016c4 <SDStorage_Init+0x2e0>)
 800146e:	2002      	movs	r0, #2
 8001470:	f004 f960 	bl	8005734 <LOGGER_SendFormatted>
            }
            if (hsd1.ErrorCode & SDMMC_ERROR_DATA_CRC_FAIL) {
 8001474:	4b8e      	ldr	r3, [pc, #568]	@ (80016b0 <SDStorage_Init+0x2cc>)
 8001476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d005      	beq.n	800148c <SDStorage_Init+0xa8>
                LOG_WARN("[SDStorage] CRC_FAIL detected - cache issue possible");
 8001480:	4991      	ldr	r1, [pc, #580]	@ (80016c8 <SDStorage_Init+0x2e4>)
 8001482:	2002      	movs	r0, #2
 8001484:	f004 f956 	bl	8005734 <LOGGER_SendFormatted>
                SCB_CleanInvalidateDCache();
 8001488:	f7ff ff22 	bl	80012d0 <SCB_CleanInvalidateDCache>
            }
            
            // 에러 코드 클리어
            hsd1.ErrorCode = HAL_SD_ERROR_NONE;
 800148c:	4b88      	ldr	r3, [pc, #544]	@ (80016b0 <SDStorage_Init+0x2cc>)
 800148e:	2200      	movs	r2, #0
 8001490:	639a      	str	r2, [r3, #56]	@ 0x38
 8001492:	e00e      	b.n	80014b2 <SDStorage_Init+0xce>
        }
    } else {
        LOG_ERROR("[SDStorage] ❌ SD card failed to reach TRANSFER state (state: %d)", card_state);
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	498d      	ldr	r1, [pc, #564]	@ (80016cc <SDStorage_Init+0x2e8>)
 8001498:	2003      	movs	r0, #3
 800149a:	f004 f94b 	bl	8005734 <LOGGER_SendFormatted>
        LOG_ERROR("[SDStorage] SDMMC ErrorCode: 0x%08X", hsd1.ErrorCode);
 800149e:	4b84      	ldr	r3, [pc, #528]	@ (80016b0 <SDStorage_Init+0x2cc>)
 80014a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014a2:	461a      	mov	r2, r3
 80014a4:	498a      	ldr	r1, [pc, #552]	@ (80016d0 <SDStorage_Init+0x2ec>)
 80014a6:	2003      	movs	r0, #3
 80014a8:	f004 f944 	bl	8005734 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 80014ac:	f04f 33ff 	mov.w	r3, #4294967295
 80014b0:	e199      	b.n	80017e6 <SDStorage_Init+0x402>
    }
    
    DSTATUS disk_status = disk_initialize(0);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f010 ff72 	bl	801239c <disk_initialize>
 80014b8:	4603      	mov	r3, r0
 80014ba:	71fb      	strb	r3, [r7, #7]
    LOG_INFO("[SDStorage] disk_initialize result: 0x%02X", disk_status);
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	461a      	mov	r2, r3
 80014c0:	4984      	ldr	r1, [pc, #528]	@ (80016d4 <SDStorage_Init+0x2f0>)
 80014c2:	2001      	movs	r0, #1
 80014c4:	f004 f936 	bl	8005734 <LOGGER_SendFormatted>
    
    // disk_initialize 실패 시 조기 종료 (블로킹 방지)
    if (disk_status != 0) {
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00a      	beq.n	80014e4 <SDStorage_Init+0x100>
        LOG_ERROR("[SDStorage] disk_initialize failed - SD card not ready");
 80014ce:	4982      	ldr	r1, [pc, #520]	@ (80016d8 <SDStorage_Init+0x2f4>)
 80014d0:	2003      	movs	r0, #3
 80014d2:	f004 f92f 	bl	8005734 <LOGGER_SendFormatted>
        LOG_ERROR("[SDStorage] Possible causes: write-protected, bad card, or BSP/HAL conflict");
 80014d6:	4981      	ldr	r1, [pc, #516]	@ (80016dc <SDStorage_Init+0x2f8>)
 80014d8:	2003      	movs	r0, #3
 80014da:	f004 f92b 	bl	8005734 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
 80014e2:	e180      	b.n	80017e6 <SDStorage_Init+0x402>
    }
    
    // 2. 파일시스템 마운트 시도 (지연 마운트로 변경 - 블로킹 방지)
    LOG_INFO("[SDStorage] Using deferred mount (flag=0) to avoid blocking...");
 80014e4:	497e      	ldr	r1, [pc, #504]	@ (80016e0 <SDStorage_Init+0x2fc>)
 80014e6:	2001      	movs	r0, #1
 80014e8:	f004 f924 	bl	8005734 <LOGGER_SendFormatted>
    
    // f_mount 호출 전에 충분한 지연 (SD 카드 안정화)
    #ifdef STM32F746xx
    LOG_INFO("[SDStorage] Waiting for SD card stabilization (500ms)...");
 80014ec:	497d      	ldr	r1, [pc, #500]	@ (80016e4 <SDStorage_Init+0x300>)
 80014ee:	2001      	movs	r0, #1
 80014f0:	f004 f920 	bl	8005734 <LOGGER_SendFormatted>
    HAL_Delay(500);
 80014f4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014f8:	f004 ff3c 	bl	8006374 <HAL_Delay>
    #endif
    
    // f_mount 블로킹 문제 - 완전 우회 시도
    LOG_WARN("[SDStorage] f_mount consistently blocks despite all fixes");
 80014fc:	497a      	ldr	r1, [pc, #488]	@ (80016e8 <SDStorage_Init+0x304>)
 80014fe:	2002      	movs	r0, #2
 8001500:	f004 f918 	bl	8005734 <LOGGER_SendFormatted>
    LOG_INFO("[SDStorage] Attempting direct file operations without f_mount...");
 8001504:	4979      	ldr	r1, [pc, #484]	@ (80016ec <SDStorage_Init+0x308>)
 8001506:	2001      	movs	r0, #1
 8001508:	f004 f914 	bl	8005734 <LOGGER_SendFormatted>
    LOG_INFO("[SDStorage] Some FatFs implementations support auto-mount on first file access");
 800150c:	4978      	ldr	r1, [pc, #480]	@ (80016f0 <SDStorage_Init+0x30c>)
 800150e:	2001      	movs	r0, #1
 8001510:	f004 f910 	bl	8005734 <LOGGER_SendFormatted>
    
    // f_mount 여러 번 재시도 (성공 프로젝트 패턴)
    LOG_INFO("[SDStorage] Attempting f_mount with retry logic...");
 8001514:	4977      	ldr	r1, [pc, #476]	@ (80016f4 <SDStorage_Init+0x310>)
 8001516:	2001      	movs	r0, #1
 8001518:	f004 f90c 	bl	8005734 <LOGGER_SendFormatted>
    FRESULT mount_result = FR_DISK_ERR;  // 초기값
 800151c:	2301      	movs	r3, #1
 800151e:	73fb      	strb	r3, [r7, #15]
    
    for (int retry = 0; retry < 3; retry++) {
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	e035      	b.n	8001592 <SDStorage_Init+0x1ae>
        LOG_INFO("[SDStorage] f_mount attempt %d/3...", retry + 1);
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	3301      	adds	r3, #1
 800152a:	461a      	mov	r2, r3
 800152c:	4972      	ldr	r1, [pc, #456]	@ (80016f8 <SDStorage_Init+0x314>)
 800152e:	2001      	movs	r0, #1
 8001530:	f004 f900 	bl	8005734 <LOGGER_SendFormatted>
        mount_result = f_mount(&SDFatFS, SDPath, 1);  // 즉시 마운트
 8001534:	2201      	movs	r2, #1
 8001536:	4971      	ldr	r1, [pc, #452]	@ (80016fc <SDStorage_Init+0x318>)
 8001538:	4871      	ldr	r0, [pc, #452]	@ (8001700 <SDStorage_Init+0x31c>)
 800153a:	f012 fadf 	bl	8013afc <f_mount>
 800153e:	4603      	mov	r3, r0
 8001540:	73fb      	strb	r3, [r7, #15]
        LOG_INFO("[SDStorage] f_mount result: %d", mount_result);
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	461a      	mov	r2, r3
 8001546:	496f      	ldr	r1, [pc, #444]	@ (8001704 <SDStorage_Init+0x320>)
 8001548:	2001      	movs	r0, #1
 800154a:	f004 f8f3 	bl	8005734 <LOGGER_SendFormatted>
        
        if (mount_result == FR_OK) {
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d107      	bne.n	8001564 <SDStorage_Init+0x180>
            LOG_INFO("[SDStorage] ✅ f_mount successful on attempt %d", retry + 1);
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	3301      	adds	r3, #1
 8001558:	461a      	mov	r2, r3
 800155a:	496b      	ldr	r1, [pc, #428]	@ (8001708 <SDStorage_Init+0x324>)
 800155c:	2001      	movs	r0, #1
 800155e:	f004 f8e9 	bl	8005734 <LOGGER_SendFormatted>
            break;
 8001562:	e019      	b.n	8001598 <SDStorage_Init+0x1b4>
        } else {
            LOG_WARN("[SDStorage] f_mount failed on attempt %d, retrying in 1000ms...", retry + 1);
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	3301      	adds	r3, #1
 8001568:	461a      	mov	r2, r3
 800156a:	4968      	ldr	r1, [pc, #416]	@ (800170c <SDStorage_Init+0x328>)
 800156c:	2002      	movs	r0, #2
 800156e:	f004 f8e1 	bl	8005734 <LOGGER_SendFormatted>
            if (retry < 2) {  // 마지막 시도가 아니면 대기
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	2b01      	cmp	r3, #1
 8001576:	dc09      	bgt.n	800158c <SDStorage_Init+0x1a8>
                // STM32F7 D-Cache 클리어 (성공 프로젝트 패턴)
                LOG_INFO("[SDStorage] Clearing D-Cache for STM32F7 compatibility...");
 8001578:	4965      	ldr	r1, [pc, #404]	@ (8001710 <SDStorage_Init+0x32c>)
 800157a:	2001      	movs	r0, #1
 800157c:	f004 f8da 	bl	8005734 <LOGGER_SendFormatted>
                SCB_CleanInvalidateDCache();
 8001580:	f7ff fea6 	bl	80012d0 <SCB_CleanInvalidateDCache>
                HAL_Delay(1000);
 8001584:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001588:	f004 fef4 	bl	8006374 <HAL_Delay>
    for (int retry = 0; retry < 3; retry++) {
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	3301      	adds	r3, #1
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	2b02      	cmp	r3, #2
 8001596:	ddc6      	ble.n	8001526 <SDStorage_Init+0x142>
            }
        }
    }
    
    // 즉시 마운트 성공 시 쓰기 준비 완료
    if (mount_result == FR_OK) {
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d103      	bne.n	80015a6 <SDStorage_Init+0x1c2>
        LOG_INFO("[SDStorage] Immediate mount successful - SD ready for write operations");
 800159e:	495d      	ldr	r1, [pc, #372]	@ (8001714 <SDStorage_Init+0x330>)
 80015a0:	2001      	movs	r0, #1
 80015a2:	f004 f8c7 	bl	8005734 <LOGGER_SendFormatted>
    }
    
    if (mount_result != FR_OK) {
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f000 80f8 	beq.w	800179e <SDStorage_Init+0x3ba>
        LOG_WARN("[SDStorage] f_mount failed with result: %d", mount_result);
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4959      	ldr	r1, [pc, #356]	@ (8001718 <SDStorage_Init+0x334>)
 80015b4:	2002      	movs	r0, #2
 80015b6:	f004 f8bd 	bl	8005734 <LOGGER_SendFormatted>
        
        // SD 카드가 이미 포맷되어 있다면 f_mkfs 시도하지 않고 다른 접근법 사용
        if (mount_result == FR_DISK_ERR) {
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d12f      	bne.n	8001620 <SDStorage_Init+0x23c>
            LOG_WARN("[SDStorage] FR_DISK_ERR detected - SD card may be formatted but incompatible");
 80015c0:	4956      	ldr	r1, [pc, #344]	@ (800171c <SDStorage_Init+0x338>)
 80015c2:	2002      	movs	r0, #2
 80015c4:	f004 f8b6 	bl	8005734 <LOGGER_SendFormatted>
            LOG_INFO("[SDStorage] Skipping f_mkfs since SD card is already FAT32 formatted");
 80015c8:	4955      	ldr	r1, [pc, #340]	@ (8001720 <SDStorage_Init+0x33c>)
 80015ca:	2001      	movs	r0, #1
 80015cc:	f004 f8b2 	bl	8005734 <LOGGER_SendFormatted>
            LOG_INFO("[SDStorage] Trying alternative mount approach...");
 80015d0:	4954      	ldr	r1, [pc, #336]	@ (8001724 <SDStorage_Init+0x340>)
 80015d2:	2001      	movs	r0, #1
 80015d4:	f004 f8ae 	bl	8005734 <LOGGER_SendFormatted>
            
            // 다른 마운트 방식 시도 (지연 마운트)
            LOG_INFO("[SDStorage] Attempting deferred mount (flag=0)...");
 80015d8:	4953      	ldr	r1, [pc, #332]	@ (8001728 <SDStorage_Init+0x344>)
 80015da:	2001      	movs	r0, #1
 80015dc:	f004 f8aa 	bl	8005734 <LOGGER_SendFormatted>
            mount_result = f_mount(&SDFatFS, SDPath, 0);
 80015e0:	2200      	movs	r2, #0
 80015e2:	4946      	ldr	r1, [pc, #280]	@ (80016fc <SDStorage_Init+0x318>)
 80015e4:	4846      	ldr	r0, [pc, #280]	@ (8001700 <SDStorage_Init+0x31c>)
 80015e6:	f012 fa89 	bl	8013afc <f_mount>
 80015ea:	4603      	mov	r3, r0
 80015ec:	73fb      	strb	r3, [r7, #15]
            LOG_INFO("[SDStorage] Deferred mount result: %d", mount_result);
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	461a      	mov	r2, r3
 80015f2:	494e      	ldr	r1, [pc, #312]	@ (800172c <SDStorage_Init+0x348>)
 80015f4:	2001      	movs	r0, #1
 80015f6:	f004 f89d 	bl	8005734 <LOGGER_SendFormatted>
            
            if (mount_result == FR_OK) {
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d104      	bne.n	800160a <SDStorage_Init+0x226>
                LOG_INFO("[SDStorage] Deferred mount successful!");
 8001600:	494b      	ldr	r1, [pc, #300]	@ (8001730 <SDStorage_Init+0x34c>)
 8001602:	2001      	movs	r0, #1
 8001604:	f004 f896 	bl	8005734 <LOGGER_SendFormatted>
 8001608:	e0c9      	b.n	800179e <SDStorage_Init+0x3ba>
            } else {
                LOG_ERROR("[SDStorage] Both immediate and deferred mount failed");
 800160a:	494a      	ldr	r1, [pc, #296]	@ (8001734 <SDStorage_Init+0x350>)
 800160c:	2003      	movs	r0, #3
 800160e:	f004 f891 	bl	8005734 <LOGGER_SendFormatted>
                LOG_ERROR("[SDStorage] SD card may have hardware compatibility issues");
 8001612:	4949      	ldr	r1, [pc, #292]	@ (8001738 <SDStorage_Init+0x354>)
 8001614:	2003      	movs	r0, #3
 8001616:	f004 f88d 	bl	8005734 <LOGGER_SendFormatted>
                return SDSTORAGE_ERROR;
 800161a:	f04f 33ff 	mov.w	r3, #4294967295
 800161e:	e0e2      	b.n	80017e6 <SDStorage_Init+0x402>
            }
        }
        else if (mount_result == FR_NOT_READY || mount_result == FR_NO_FILESYSTEM) {
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	2b03      	cmp	r3, #3
 8001624:	d003      	beq.n	800162e <SDStorage_Init+0x24a>
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	2b0d      	cmp	r3, #13
 800162a:	f040 80ae 	bne.w	800178a <SDStorage_Init+0x3a6>
            // 작업 버퍼 할당 (전역 또는 스택)
            static BYTE work[_MAX_SS];
            
            // 실제 f_mkfs 시도
            LOG_INFO("[SDStorage] Attempting to create filesystem with f_mkfs...");
 800162e:	4943      	ldr	r1, [pc, #268]	@ (800173c <SDStorage_Init+0x358>)
 8001630:	2001      	movs	r0, #1
 8001632:	f004 f87f 	bl	8005734 <LOGGER_SendFormatted>
            FRESULT mkfs_result = f_mkfs(SDPath, FM_ANY, 0, work, sizeof(work));
 8001636:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	4b40      	ldr	r3, [pc, #256]	@ (8001740 <SDStorage_Init+0x35c>)
 800163e:	2200      	movs	r2, #0
 8001640:	2107      	movs	r1, #7
 8001642:	482e      	ldr	r0, [pc, #184]	@ (80016fc <SDStorage_Init+0x318>)
 8001644:	f012 ff44 	bl	80144d0 <f_mkfs>
 8001648:	4603      	mov	r3, r0
 800164a:	71bb      	strb	r3, [r7, #6]
            LOG_INFO("[SDStorage] f_mkfs(FM_ANY) result: %d", mkfs_result);
 800164c:	79bb      	ldrb	r3, [r7, #6]
 800164e:	461a      	mov	r2, r3
 8001650:	493c      	ldr	r1, [pc, #240]	@ (8001744 <SDStorage_Init+0x360>)
 8001652:	2001      	movs	r0, #1
 8001654:	f004 f86e 	bl	8005734 <LOGGER_SendFormatted>
            
            if (mkfs_result != FR_OK) {
 8001658:	79bb      	ldrb	r3, [r7, #6]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d07c      	beq.n	8001758 <SDStorage_Init+0x374>
                // FAT32로 다시 시도
                LOG_INFO("[SDStorage] Retrying with explicit FAT32 format...");
 800165e:	493a      	ldr	r1, [pc, #232]	@ (8001748 <SDStorage_Init+0x364>)
 8001660:	2001      	movs	r0, #1
 8001662:	f004 f867 	bl	8005734 <LOGGER_SendFormatted>
                mkfs_result = f_mkfs(SDPath, FM_FAT32, 4096, work, sizeof(work));
 8001666:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	4b34      	ldr	r3, [pc, #208]	@ (8001740 <SDStorage_Init+0x35c>)
 800166e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001672:	2102      	movs	r1, #2
 8001674:	4821      	ldr	r0, [pc, #132]	@ (80016fc <SDStorage_Init+0x318>)
 8001676:	f012 ff2b 	bl	80144d0 <f_mkfs>
 800167a:	4603      	mov	r3, r0
 800167c:	71bb      	strb	r3, [r7, #6]
                LOG_INFO("[SDStorage] f_mkfs(FM_FAT32) result: %d", mkfs_result);
 800167e:	79bb      	ldrb	r3, [r7, #6]
 8001680:	461a      	mov	r2, r3
 8001682:	4932      	ldr	r1, [pc, #200]	@ (800174c <SDStorage_Init+0x368>)
 8001684:	2001      	movs	r0, #1
 8001686:	f004 f855 	bl	8005734 <LOGGER_SendFormatted>
                
                if (mkfs_result != FR_OK) {
 800168a:	79bb      	ldrb	r3, [r7, #6]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d063      	beq.n	8001758 <SDStorage_Init+0x374>
                    LOG_ERROR("[SDStorage] File system creation failed: %d", mkfs_result);
 8001690:	79bb      	ldrb	r3, [r7, #6]
 8001692:	461a      	mov	r2, r3
 8001694:	492e      	ldr	r1, [pc, #184]	@ (8001750 <SDStorage_Init+0x36c>)
 8001696:	2003      	movs	r0, #3
 8001698:	f004 f84c 	bl	8005734 <LOGGER_SendFormatted>
                    LOG_ERROR("[SDStorage] Possible SD card hardware issue - try different card");
 800169c:	492d      	ldr	r1, [pc, #180]	@ (8001754 <SDStorage_Init+0x370>)
 800169e:	2003      	movs	r0, #3
 80016a0:	f004 f848 	bl	8005734 <LOGGER_SendFormatted>
                    return SDSTORAGE_ERROR;
 80016a4:	f04f 33ff 	mov.w	r3, #4294967295
 80016a8:	e09d      	b.n	80017e6 <SDStorage_Init+0x402>
 80016aa:	bf00      	nop
 80016ac:	080196f4 	.word	0x080196f4
 80016b0:	20001d90 	.word	0x20001d90
 80016b4:	08019724 	.word	0x08019724
 80016b8:	0801974c 	.word	0x0801974c
 80016bc:	0801978c 	.word	0x0801978c
 80016c0:	080197c8 	.word	0x080197c8
 80016c4:	080197f8 	.word	0x080197f8
 80016c8:	08019834 	.word	0x08019834
 80016cc:	0801986c 	.word	0x0801986c
 80016d0:	080198b0 	.word	0x080198b0
 80016d4:	080198d4 	.word	0x080198d4
 80016d8:	08019900 	.word	0x08019900
 80016dc:	08019938 	.word	0x08019938
 80016e0:	08019984 	.word	0x08019984
 80016e4:	080199c4 	.word	0x080199c4
 80016e8:	08019a00 	.word	0x08019a00
 80016ec:	08019a3c 	.word	0x08019a3c
 80016f0:	08019a80 	.word	0x08019a80
 80016f4:	08019ad0 	.word	0x08019ad0
 80016f8:	08019b04 	.word	0x08019b04
 80016fc:	200026d4 	.word	0x200026d4
 8001700:	200026d8 	.word	0x200026d8
 8001704:	08019b28 	.word	0x08019b28
 8001708:	08019b48 	.word	0x08019b48
 800170c:	08019b7c 	.word	0x08019b7c
 8001710:	08019bbc 	.word	0x08019bbc
 8001714:	08019bf8 	.word	0x08019bf8
 8001718:	08019c40 	.word	0x08019c40
 800171c:	08019c6c 	.word	0x08019c6c
 8001720:	08019cbc 	.word	0x08019cbc
 8001724:	08019d04 	.word	0x08019d04
 8001728:	08019d38 	.word	0x08019d38
 800172c:	08019d6c 	.word	0x08019d6c
 8001730:	08019d94 	.word	0x08019d94
 8001734:	08019dbc 	.word	0x08019dbc
 8001738:	08019df4 	.word	0x08019df4
 800173c:	08019e30 	.word	0x08019e30
 8001740:	2000048c 	.word	0x2000048c
 8001744:	08019e6c 	.word	0x08019e6c
 8001748:	08019e94 	.word	0x08019e94
 800174c:	08019ec8 	.word	0x08019ec8
 8001750:	08019ef0 	.word	0x08019ef0
 8001754:	08019f1c 	.word	0x08019f1c
                }
            }
            
            // 파일시스템 생성 후 재마운트 시도
            mount_result = f_mount(&SDFatFS, SDPath, 1);
 8001758:	2201      	movs	r2, #1
 800175a:	4925      	ldr	r1, [pc, #148]	@ (80017f0 <SDStorage_Init+0x40c>)
 800175c:	4825      	ldr	r0, [pc, #148]	@ (80017f4 <SDStorage_Init+0x410>)
 800175e:	f012 f9cd 	bl	8013afc <f_mount>
 8001762:	4603      	mov	r3, r0
 8001764:	73fb      	strb	r3, [r7, #15]
            LOG_INFO("[SDStorage] Re-mount after mkfs result: %d", mount_result);
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	461a      	mov	r2, r3
 800176a:	4923      	ldr	r1, [pc, #140]	@ (80017f8 <SDStorage_Init+0x414>)
 800176c:	2001      	movs	r0, #1
 800176e:	f003 ffe1 	bl	8005734 <LOGGER_SendFormatted>
            
            if (mount_result != FR_OK) {
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d011      	beq.n	800179c <SDStorage_Init+0x3b8>
                LOG_ERROR("[SDStorage] Re-mount failed after mkfs: %d", mount_result);
 8001778:	7bfb      	ldrb	r3, [r7, #15]
 800177a:	461a      	mov	r2, r3
 800177c:	491f      	ldr	r1, [pc, #124]	@ (80017fc <SDStorage_Init+0x418>)
 800177e:	2003      	movs	r0, #3
 8001780:	f003 ffd8 	bl	8005734 <LOGGER_SendFormatted>
                return SDSTORAGE_ERROR;
 8001784:	f04f 33ff 	mov.w	r3, #4294967295
 8001788:	e02d      	b.n	80017e6 <SDStorage_Init+0x402>
            }
        } else {
            LOG_ERROR("[SDStorage] Mount failed with unrecoverable error: %d", mount_result);
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	461a      	mov	r2, r3
 800178e:	491c      	ldr	r1, [pc, #112]	@ (8001800 <SDStorage_Init+0x41c>)
 8001790:	2003      	movs	r0, #3
 8001792:	f003 ffcf 	bl	8005734 <LOGGER_SendFormatted>
            return SDSTORAGE_ERROR;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
 800179a:	e024      	b.n	80017e6 <SDStorage_Init+0x402>
        else if (mount_result == FR_NOT_READY || mount_result == FR_NO_FILESYSTEM) {
 800179c:	bf00      	nop
        }
    }
    
    LOG_INFO("[SDStorage] File system mount successful");
 800179e:	4919      	ldr	r1, [pc, #100]	@ (8001804 <SDStorage_Init+0x420>)
 80017a0:	2001      	movs	r0, #1
 80017a2:	f003 ffc7 	bl	8005734 <LOGGER_SendFormatted>
#endif

    // FatFs 마운트 성공 확인됨
    
    // 디렉토리 생성 시도
    LOG_INFO("[SDStorage] Creating log directory...");
 80017a6:	4918      	ldr	r1, [pc, #96]	@ (8001808 <SDStorage_Init+0x424>)
 80017a8:	2001      	movs	r0, #1
 80017aa:	f003 ffc3 	bl	8005734 <LOGGER_SendFormatted>
    int dir_result = _create_log_directory();
 80017ae:	f000 fb51 	bl	8001e54 <_create_log_directory>
 80017b2:	6038      	str	r0, [r7, #0]
    g_directory_available = (dir_result == SDSTORAGE_OK);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	bf0c      	ite	eq
 80017ba:	2301      	moveq	r3, #1
 80017bc:	2300      	movne	r3, #0
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	4b12      	ldr	r3, [pc, #72]	@ (800180c <SDStorage_Init+0x428>)
 80017c2:	701a      	strb	r2, [r3, #0]
    
    g_sd_ready = true;
 80017c4:	4b12      	ldr	r3, [pc, #72]	@ (8001810 <SDStorage_Init+0x42c>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	701a      	strb	r2, [r3, #0]
    g_current_log_size = 0;
 80017ca:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <SDStorage_Init+0x430>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
    memset(g_current_log_file, 0, sizeof(g_current_log_file));
 80017d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017d4:	2100      	movs	r1, #0
 80017d6:	4810      	ldr	r0, [pc, #64]	@ (8001818 <SDStorage_Init+0x434>)
 80017d8:	f016 f996 	bl	8017b08 <memset>
    
    LOG_INFO("[SDStorage] Initialization completed successfully");
 80017dc:	490f      	ldr	r1, [pc, #60]	@ (800181c <SDStorage_Init+0x438>)
 80017de:	2001      	movs	r0, #1
 80017e0:	f003 ffa8 	bl	8005734 <LOGGER_SendFormatted>
    return SDSTORAGE_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200026d4 	.word	0x200026d4
 80017f4:	200026d8 	.word	0x200026d8
 80017f8:	08019f60 	.word	0x08019f60
 80017fc:	08019f8c 	.word	0x08019f8c
 8001800:	08019fb8 	.word	0x08019fb8
 8001804:	08019ff0 	.word	0x08019ff0
 8001808:	0801a01c 	.word	0x0801a01c
 800180c:	20000384 	.word	0x20000384
 8001810:	2000027d 	.word	0x2000027d
 8001814:	20000380 	.word	0x20000380
 8001818:	20000280 	.word	0x20000280
 800181c:	0801a044 	.word	0x0801a044

08001820 <SDStorage_WriteLog>:

int SDStorage_WriteLog(const void* data, size_t size)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	f5ad 6d8b 	sub.w	sp, sp, #1112	@ 0x458
 8001826:	af02      	add	r7, sp, #8
 8001828:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800182c:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8001830:	6018      	str	r0, [r3, #0]
 8001832:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001836:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 800183a:	6019      	str	r1, [r3, #0]
    if (!g_sd_ready) {
 800183c:	4b90      	ldr	r3, [pc, #576]	@ (8001a80 <SDStorage_WriteLog+0x260>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	f083 0301 	eor.w	r3, r3, #1
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d002      	beq.n	8001850 <SDStorage_WriteLog+0x30>
        return SDSTORAGE_NOT_READY;
 800184a:	f06f 0301 	mvn.w	r3, #1
 800184e:	e23c      	b.n	8001cca <SDStorage_WriteLog+0x4aa>
    }
    
    if (data == NULL || size == 0) {
 8001850:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001854:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d006      	beq.n	800186c <SDStorage_WriteLog+0x4c>
 800185e:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001862:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <SDStorage_WriteLog+0x52>
        return SDSTORAGE_INVALID_PARAM;
 800186c:	f06f 0304 	mvn.w	r3, #4
 8001870:	e22b      	b.n	8001cca <SDStorage_WriteLog+0x4aa>
    }
    
    // 새 로그 파일이 필요한 경우 생성
    if (strlen(g_current_log_file) == 0 || 
 8001872:	4b84      	ldr	r3, [pc, #528]	@ (8001a84 <SDStorage_WriteLog+0x264>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00a      	beq.n	8001890 <SDStorage_WriteLog+0x70>
        g_current_log_size + size > SDSTORAGE_MAX_LOG_SIZE) {
 800187a:	4b83      	ldr	r3, [pc, #524]	@ (8001a88 <SDStorage_WriteLog+0x268>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001882:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4413      	add	r3, r2
    if (strlen(g_current_log_file) == 0 || 
 800188a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800188e:	d907      	bls.n	80018a0 <SDStorage_WriteLog+0x80>
        if (SDStorage_CreateNewLogFile() != SDSTORAGE_OK) {
 8001890:	f000 fa3a 	bl	8001d08 <SDStorage_CreateNewLogFile>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d002      	beq.n	80018a0 <SDStorage_WriteLog+0x80>
            return SDSTORAGE_FILE_ERROR;
 800189a:	f06f 0302 	mvn.w	r3, #2
 800189e:	e214      	b.n	8001cca <SDStorage_WriteLog+0x4aa>

#ifdef STM32F746xx
    // STM32 환경: 안정적인 열기-쓰기-닫기 방식
    
    // 로그 파일명이 없으면 생성
    if (strlen(g_current_log_file) == 0) {
 80018a0:	4b78      	ldr	r3, [pc, #480]	@ (8001a84 <SDStorage_WriteLog+0x264>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d10e      	bne.n	80018c6 <SDStorage_WriteLog+0xa6>
        if (_generate_log_filename(g_current_log_file, sizeof(g_current_log_file)) != SDSTORAGE_OK) {
 80018a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018ac:	4875      	ldr	r0, [pc, #468]	@ (8001a84 <SDStorage_WriteLog+0x264>)
 80018ae:	f000 fb33 	bl	8001f18 <_generate_log_filename>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d006      	beq.n	80018c6 <SDStorage_WriteLog+0xa6>
            LOG_ERROR("[SDStorage] Failed to generate log filename");
 80018b8:	4974      	ldr	r1, [pc, #464]	@ (8001a8c <SDStorage_WriteLog+0x26c>)
 80018ba:	2003      	movs	r0, #3
 80018bc:	f003 ff3a 	bl	8005734 <LOGGER_SendFormatted>
            return SDSTORAGE_ERROR;
 80018c0:	f04f 33ff 	mov.w	r3, #4294967295
 80018c4:	e201      	b.n	8001cca <SDStorage_WriteLog+0x4aa>
        }
    }
    
    // SD 카드 상태 변화에 robust한 방식: 매번 열고 닫기
    FIL temp_file;
    memset(&temp_file, 0, sizeof(temp_file));
 80018c6:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 80018ca:	f44f 720b 	mov.w	r2, #556	@ 0x22c
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f016 f919 	bl	8017b08 <memset>
    
    // 파일 닫기 보장: 이전에 열린 파일이 있으면 강제로 닫기
    _ensure_file_closed();
 80018d6:	f7ff fd37 	bl	8001348 <_ensure_file_closed>
    
    // 성공 프로젝트 방식: 디스크 상태 먼저 확인
    DSTATUS current_disk_stat = disk_status(0);
 80018da:	2000      	movs	r0, #0
 80018dc:	f010 fd44 	bl	8012368 <disk_status>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f887 344e 	strb.w	r3, [r7, #1102]	@ 0x44e
    if (current_disk_stat != 0) {
 80018e6:	f897 344e 	ldrb.w	r3, [r7, #1102]	@ 0x44e
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d01a      	beq.n	8001924 <SDStorage_WriteLog+0x104>
        LOG_WARN("[SDStorage] Disk not ready (%d), reinitializing...", current_disk_stat);
 80018ee:	f897 344e 	ldrb.w	r3, [r7, #1102]	@ 0x44e
 80018f2:	461a      	mov	r2, r3
 80018f4:	4966      	ldr	r1, [pc, #408]	@ (8001a90 <SDStorage_WriteLog+0x270>)
 80018f6:	2002      	movs	r0, #2
 80018f8:	f003 ff1c 	bl	8005734 <LOGGER_SendFormatted>
        DSTATUS init_result = disk_initialize(0);
 80018fc:	2000      	movs	r0, #0
 80018fe:	f010 fd4d 	bl	801239c <disk_initialize>
 8001902:	4603      	mov	r3, r0
 8001904:	f887 344d 	strb.w	r3, [r7, #1101]	@ 0x44d
        if (init_result != 0) {
 8001908:	f897 344d 	ldrb.w	r3, [r7, #1101]	@ 0x44d
 800190c:	2b00      	cmp	r3, #0
 800190e:	d009      	beq.n	8001924 <SDStorage_WriteLog+0x104>
            LOG_ERROR("[SDStorage] Disk reinitialization failed: %d", init_result);
 8001910:	f897 344d 	ldrb.w	r3, [r7, #1101]	@ 0x44d
 8001914:	461a      	mov	r2, r3
 8001916:	495f      	ldr	r1, [pc, #380]	@ (8001a94 <SDStorage_WriteLog+0x274>)
 8001918:	2003      	movs	r0, #3
 800191a:	f003 ff0b 	bl	8005734 <LOGGER_SendFormatted>
            return SDSTORAGE_NOT_READY;
 800191e:	f06f 0301 	mvn.w	r3, #1
 8001922:	e1d2      	b.n	8001cca <SDStorage_WriteLog+0x4aa>
        }
    }
    
    // 파일 열기 (성공 프로젝트 방식: 단계적 시도)
    FRESULT open_result = f_open(&temp_file, g_current_log_file, FA_OPEN_APPEND | FA_WRITE);
 8001924:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001928:	2232      	movs	r2, #50	@ 0x32
 800192a:	4956      	ldr	r1, [pc, #344]	@ (8001a84 <SDStorage_WriteLog+0x264>)
 800192c:	4618      	mov	r0, r3
 800192e:	f012 f929 	bl	8013b84 <f_open>
 8001932:	4603      	mov	r3, r0
 8001934:	f887 344f 	strb.w	r3, [r7, #1103]	@ 0x44f
    
    // 파일 열기 성공 시 추적 등록
    if (open_result == FR_OK) {
 8001938:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 800193c:	2b00      	cmp	r3, #0
 800193e:	d10a      	bne.n	8001956 <SDStorage_WriteLog+0x136>
        _register_file_opened(&temp_file, g_current_log_file);
 8001940:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001944:	494f      	ldr	r1, [pc, #316]	@ (8001a84 <SDStorage_WriteLog+0x264>)
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fd20 	bl	800138c <_register_file_opened>
        LOG_DEBUG("[SDStorage] File opened and registered: %s", g_current_log_file);
 800194c:	4a4d      	ldr	r2, [pc, #308]	@ (8001a84 <SDStorage_WriteLog+0x264>)
 800194e:	4952      	ldr	r1, [pc, #328]	@ (8001a98 <SDStorage_WriteLog+0x278>)
 8001950:	2000      	movs	r0, #0
 8001952:	f003 feef 	bl	8005734 <LOGGER_SendFormatted>
    }
    
    // f_open 실패 시 성공 프로젝트 방식의 복구 로직
    if (open_result != FR_OK) {
 8001956:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 80b0 	beq.w	8001ac0 <SDStorage_WriteLog+0x2a0>
        LOG_WARN("[SDStorage] f_open failed (%d), trying recovery...", open_result);
 8001960:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8001964:	461a      	mov	r2, r3
 8001966:	494d      	ldr	r1, [pc, #308]	@ (8001a9c <SDStorage_WriteLog+0x27c>)
 8001968:	2002      	movs	r0, #2
 800196a:	f003 fee3 	bl	8005734 <LOGGER_SendFormatted>
        
        // 1단계: 마운트 재시도
        f_mount(NULL, SDPath, 0);  // 언마운트
 800196e:	2200      	movs	r2, #0
 8001970:	494b      	ldr	r1, [pc, #300]	@ (8001aa0 <SDStorage_WriteLog+0x280>)
 8001972:	2000      	movs	r0, #0
 8001974:	f012 f8c2 	bl	8013afc <f_mount>
        HAL_Delay(200);
 8001978:	20c8      	movs	r0, #200	@ 0xc8
 800197a:	f004 fcfb 	bl	8006374 <HAL_Delay>
        FRESULT remount_result = f_mount(&SDFatFS, SDPath, 1);  // 강제 재마운트
 800197e:	2201      	movs	r2, #1
 8001980:	4947      	ldr	r1, [pc, #284]	@ (8001aa0 <SDStorage_WriteLog+0x280>)
 8001982:	4848      	ldr	r0, [pc, #288]	@ (8001aa4 <SDStorage_WriteLog+0x284>)
 8001984:	f012 f8ba 	bl	8013afc <f_mount>
 8001988:	4603      	mov	r3, r0
 800198a:	f887 344c 	strb.w	r3, [r7, #1100]	@ 0x44c
        
        if (remount_result == FR_OK) {
 800198e:	f897 344c 	ldrb.w	r3, [r7, #1100]	@ 0x44c
 8001992:	2b00      	cmp	r3, #0
 8001994:	d117      	bne.n	80019c6 <SDStorage_WriteLog+0x1a6>
            // 재마운트 성공 후 다시 파일 열기 시도
            open_result = f_open(&temp_file, g_current_log_file, FA_OPEN_APPEND | FA_WRITE);
 8001996:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 800199a:	2232      	movs	r2, #50	@ 0x32
 800199c:	4939      	ldr	r1, [pc, #228]	@ (8001a84 <SDStorage_WriteLog+0x264>)
 800199e:	4618      	mov	r0, r3
 80019a0:	f012 f8f0 	bl	8013b84 <f_open>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f887 344f 	strb.w	r3, [r7, #1103]	@ 0x44f
            if (open_result == FR_OK) {
 80019aa:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d109      	bne.n	80019c6 <SDStorage_WriteLog+0x1a6>
                _register_file_opened(&temp_file, g_current_log_file);
 80019b2:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 80019b6:	4933      	ldr	r1, [pc, #204]	@ (8001a84 <SDStorage_WriteLog+0x264>)
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fce7 	bl	800138c <_register_file_opened>
                LOG_INFO("[SDStorage] File opened after remount recovery");
 80019be:	493a      	ldr	r1, [pc, #232]	@ (8001aa8 <SDStorage_WriteLog+0x288>)
 80019c0:	2001      	movs	r0, #1
 80019c2:	f003 feb7 	bl	8005734 <LOGGER_SendFormatted>
            }
        }
        
        // 2단계: 여전히 실패하면 f_mkfs 시도
        if (open_result != FR_OK) {
 80019c6:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d049      	beq.n	8001a62 <SDStorage_WriteLog+0x242>
            LOG_WARN("[SDStorage] File still failed, trying f_mkfs recovery...");
 80019ce:	4937      	ldr	r1, [pc, #220]	@ (8001aac <SDStorage_WriteLog+0x28c>)
 80019d0:	2002      	movs	r0, #2
 80019d2:	f003 feaf 	bl	8005734 <LOGGER_SendFormatted>
            static BYTE work[4096];
            FRESULT mkfs_result = f_mkfs(SDPath, FM_ANY, 0, work, sizeof(work));
 80019d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	4b34      	ldr	r3, [pc, #208]	@ (8001ab0 <SDStorage_WriteLog+0x290>)
 80019de:	2200      	movs	r2, #0
 80019e0:	2107      	movs	r1, #7
 80019e2:	482f      	ldr	r0, [pc, #188]	@ (8001aa0 <SDStorage_WriteLog+0x280>)
 80019e4:	f012 fd74 	bl	80144d0 <f_mkfs>
 80019e8:	4603      	mov	r3, r0
 80019ea:	f887 344b 	strb.w	r3, [r7, #1099]	@ 0x44b
            
            if (mkfs_result == FR_OK) {
 80019ee:	f897 344b 	ldrb.w	r3, [r7, #1099]	@ 0x44b
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d135      	bne.n	8001a62 <SDStorage_WriteLog+0x242>
                LOG_INFO("[SDStorage] f_mkfs successful, remounting...");
 80019f6:	492f      	ldr	r1, [pc, #188]	@ (8001ab4 <SDStorage_WriteLog+0x294>)
 80019f8:	2001      	movs	r0, #1
 80019fa:	f003 fe9b 	bl	8005734 <LOGGER_SendFormatted>
                f_mount(NULL, SDPath, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	4927      	ldr	r1, [pc, #156]	@ (8001aa0 <SDStorage_WriteLog+0x280>)
 8001a02:	2000      	movs	r0, #0
 8001a04:	f012 f87a 	bl	8013afc <f_mount>
                HAL_Delay(500);
 8001a08:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a0c:	f004 fcb2 	bl	8006374 <HAL_Delay>
                remount_result = f_mount(&SDFatFS, SDPath, 1);
 8001a10:	2201      	movs	r2, #1
 8001a12:	4923      	ldr	r1, [pc, #140]	@ (8001aa0 <SDStorage_WriteLog+0x280>)
 8001a14:	4823      	ldr	r0, [pc, #140]	@ (8001aa4 <SDStorage_WriteLog+0x284>)
 8001a16:	f012 f871 	bl	8013afc <f_mount>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	f887 344c 	strb.w	r3, [r7, #1100]	@ 0x44c
                
                if (remount_result == FR_OK) {
 8001a20:	f897 344c 	ldrb.w	r3, [r7, #1100]	@ 0x44c
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d11c      	bne.n	8001a62 <SDStorage_WriteLog+0x242>
                    // 파일명 재생성 (mkfs 후 파일이 사라졌으므로)
                    _generate_log_filename(g_current_log_file, sizeof(g_current_log_file));
 8001a28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a2c:	4815      	ldr	r0, [pc, #84]	@ (8001a84 <SDStorage_WriteLog+0x264>)
 8001a2e:	f000 fa73 	bl	8001f18 <_generate_log_filename>
                    open_result = f_open(&temp_file, g_current_log_file, FA_CREATE_ALWAYS | FA_WRITE);
 8001a32:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001a36:	220a      	movs	r2, #10
 8001a38:	4912      	ldr	r1, [pc, #72]	@ (8001a84 <SDStorage_WriteLog+0x264>)
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f012 f8a2 	bl	8013b84 <f_open>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f887 344f 	strb.w	r3, [r7, #1103]	@ 0x44f
                    if (open_result == FR_OK) {
 8001a46:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d109      	bne.n	8001a62 <SDStorage_WriteLog+0x242>
                        _register_file_opened(&temp_file, g_current_log_file);
 8001a4e:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001a52:	490c      	ldr	r1, [pc, #48]	@ (8001a84 <SDStorage_WriteLog+0x264>)
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fc99 	bl	800138c <_register_file_opened>
                        LOG_INFO("[SDStorage] File created after f_mkfs recovery");
 8001a5a:	4917      	ldr	r1, [pc, #92]	@ (8001ab8 <SDStorage_WriteLog+0x298>)
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	f003 fe69 	bl	8005734 <LOGGER_SendFormatted>
                }
            }
        }
        
        // 모든 복구 시도 실패
        if (open_result != FR_OK) {
 8001a62:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d02a      	beq.n	8001ac0 <SDStorage_WriteLog+0x2a0>
            LOG_ERROR("[SDStorage] All recovery attempts failed: %d", open_result);
 8001a6a:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8001a6e:	461a      	mov	r2, r3
 8001a70:	4912      	ldr	r1, [pc, #72]	@ (8001abc <SDStorage_WriteLog+0x29c>)
 8001a72:	2003      	movs	r0, #3
 8001a74:	f003 fe5e 	bl	8005734 <LOGGER_SendFormatted>
            return SDSTORAGE_FILE_ERROR;
 8001a78:	f06f 0302 	mvn.w	r3, #2
 8001a7c:	e125      	b.n	8001cca <SDStorage_WriteLog+0x4aa>
 8001a7e:	bf00      	nop
 8001a80:	2000027d 	.word	0x2000027d
 8001a84:	20000280 	.word	0x20000280
 8001a88:	20000380 	.word	0x20000380
 8001a8c:	0801a078 	.word	0x0801a078
 8001a90:	0801a0a4 	.word	0x0801a0a4
 8001a94:	0801a0d8 	.word	0x0801a0d8
 8001a98:	0801a108 	.word	0x0801a108
 8001a9c:	0801a134 	.word	0x0801a134
 8001aa0:	200026d4 	.word	0x200026d4
 8001aa4:	200026d8 	.word	0x200026d8
 8001aa8:	0801a168 	.word	0x0801a168
 8001aac:	0801a198 	.word	0x0801a198
 8001ab0:	2000068c 	.word	0x2000068c
 8001ab4:	0801a1d4 	.word	0x0801a1d4
 8001ab8:	0801a204 	.word	0x0801a204
 8001abc:	0801a234 	.word	0x0801a234
        }
    }
    
    if (open_result == FR_OK) {
 8001ac0:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f040 80df 	bne.w	8001c88 <SDStorage_WriteLog+0x468>
        // FA_OPEN_APPEND 사용 시 자동으로 파일 끝에 위치
        
        // 원본 데이터 + 줄바꿈을 함께 쓰기 (FR_INVALID_OBJECT 방지)
        char write_buffer[512];  // 충분한 버퍼 크기
        UINT total_bytes_to_write = size + 2;  // 원본 데이터 + \r\n
 8001aca:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001ace:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
        
        if (size + 2 < sizeof(write_buffer)) {
 8001ada:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001ade:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	3302      	adds	r3, #2
 8001ae6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001aea:	d273      	bcs.n	8001bd4 <SDStorage_WriteLog+0x3b4>
            // 원본 데이터 복사
            memcpy(write_buffer, data, size);
 8001aec:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001af0:	f5a3 628a 	sub.w	r2, r3, #1104	@ 0x450
 8001af4:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001af8:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8001afc:	f107 000c 	add.w	r0, r7, #12
 8001b00:	6812      	ldr	r2, [r2, #0]
 8001b02:	6819      	ldr	r1, [r3, #0]
 8001b04:	f016 f8c1 	bl	8017c8a <memcpy>
            // 줄바꿈 추가
            write_buffer[size] = '\r';
 8001b08:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001b0c:	f2a3 4244 	subw	r2, r3, #1092	@ 0x444
 8001b10:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001b14:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	220d      	movs	r2, #13
 8001b1e:	701a      	strb	r2, [r3, #0]
            write_buffer[size + 1] = '\n';
 8001b20:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001b24:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 8001b30:	f2a2 4244 	subw	r2, r2, #1092	@ 0x444
 8001b34:	210a      	movs	r1, #10
 8001b36:	54d1      	strb	r1, [r2, r3]
            
            // 한 번에 쓰기
            UINT bytes_written;
            FRESULT write_result = f_write(&temp_file, write_buffer, total_bytes_to_write, &bytes_written);
 8001b38:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001b3c:	f107 010c 	add.w	r1, r7, #12
 8001b40:	f507 7005 	add.w	r0, r7, #532	@ 0x214
 8001b44:	f8d7 2444 	ldr.w	r2, [r7, #1092]	@ 0x444
 8001b48:	f012 f9a7 	bl	8013e9a <f_write>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f887 3442 	strb.w	r3, [r7, #1090]	@ 0x442
            
            // 즉시 동기화 및 닫기
            f_sync(&temp_file);
 8001b52:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001b56:	4618      	mov	r0, r3
 8001b58:	f012 fb14 	bl	8014184 <f_sync>
            f_close(&temp_file);
 8001b5c:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001b60:	4618      	mov	r0, r3
 8001b62:	f012 fb8d 	bl	8014280 <f_close>
            _register_file_closed();  // 추적 해제
 8001b66:	f7ff fc2b 	bl	80013c0 <_register_file_closed>
            
            if (write_result == FR_OK && bytes_written == total_bytes_to_write) {
 8001b6a:	f897 3442 	ldrb.w	r3, [r7, #1090]	@ 0x442
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d11e      	bne.n	8001bb0 <SDStorage_WriteLog+0x390>
 8001b72:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001b76:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f8d7 2444 	ldr.w	r2, [r7, #1092]	@ 0x444
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d115      	bne.n	8001bb0 <SDStorage_WriteLog+0x390>
                g_current_log_size += bytes_written;
 8001b84:	4b53      	ldr	r3, [pc, #332]	@ (8001cd4 <SDStorage_WriteLog+0x4b4>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001b8c:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	4a4f      	ldr	r2, [pc, #316]	@ (8001cd4 <SDStorage_WriteLog+0x4b4>)
 8001b96:	6013      	str	r3, [r2, #0]
                LOG_DEBUG("[SDStorage] Log written successfully: %d bytes (including CRLF)", bytes_written);
 8001b98:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001b9c:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	494c      	ldr	r1, [pc, #304]	@ (8001cd8 <SDStorage_WriteLog+0x4b8>)
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f003 fdc4 	bl	8005734 <LOGGER_SendFormatted>
                return SDSTORAGE_OK;
 8001bac:	2300      	movs	r3, #0
 8001bae:	e08c      	b.n	8001cca <SDStorage_WriteLog+0x4aa>
            } else {
                LOG_ERROR("[SDStorage] f_write failed: %d, written: %d/%d", write_result, bytes_written, total_bytes_to_write);
 8001bb0:	f897 2442 	ldrb.w	r2, [r7, #1090]	@ 0x442
 8001bb4:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001bb8:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001bbc:	6819      	ldr	r1, [r3, #0]
 8001bbe:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4945      	ldr	r1, [pc, #276]	@ (8001cdc <SDStorage_WriteLog+0x4bc>)
 8001bc8:	2003      	movs	r0, #3
 8001bca:	f003 fdb3 	bl	8005734 <LOGGER_SendFormatted>
                return SDSTORAGE_FILE_ERROR;
 8001bce:	f06f 0302 	mvn.w	r3, #2
 8001bd2:	e07a      	b.n	8001cca <SDStorage_WriteLog+0x4aa>
            }
        } else {
            // 버퍼 크기 초과 - 원본 데이터만 쓰기
            UINT bytes_written;
            FRESULT write_result = f_write(&temp_file, data, size, &bytes_written);
 8001bd4:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8001bd8:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 8001bdc:	f5a2 628a 	sub.w	r2, r2, #1104	@ 0x450
 8001be0:	f507 618a 	add.w	r1, r7, #1104	@ 0x450
 8001be4:	f2a1 414c 	subw	r1, r1, #1100	@ 0x44c
 8001be8:	f507 7005 	add.w	r0, r7, #532	@ 0x214
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	6809      	ldr	r1, [r1, #0]
 8001bf0:	f012 f953 	bl	8013e9a <f_write>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f887 3443 	strb.w	r3, [r7, #1091]	@ 0x443
            
            // 즉시 동기화 및 닫기
            f_sync(&temp_file);
 8001bfa:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f012 fac0 	bl	8014184 <f_sync>
            f_close(&temp_file);
 8001c04:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f012 fb39 	bl	8014280 <f_close>
            _register_file_closed();  // 추적 해제
 8001c0e:	f7ff fbd7 	bl	80013c0 <_register_file_closed>
            
            if (write_result == FR_OK && bytes_written == size) {
 8001c12:	f897 3443 	ldrb.w	r3, [r7, #1091]	@ 0x443
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d121      	bne.n	8001c5e <SDStorage_WriteLog+0x43e>
 8001c1a:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001c1e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 8001c28:	f5a2 628a 	sub.w	r2, r2, #1104	@ 0x450
 8001c2c:	6812      	ldr	r2, [r2, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d115      	bne.n	8001c5e <SDStorage_WriteLog+0x43e>
                g_current_log_size += bytes_written;
 8001c32:	4b28      	ldr	r3, [pc, #160]	@ (8001cd4 <SDStorage_WriteLog+0x4b4>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001c3a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4413      	add	r3, r2
 8001c42:	4a24      	ldr	r2, [pc, #144]	@ (8001cd4 <SDStorage_WriteLog+0x4b4>)
 8001c44:	6013      	str	r3, [r2, #0]
                LOG_DEBUG("[SDStorage] Log written successfully: %d bytes (no CRLF due to size)", bytes_written);
 8001c46:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001c4a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4923      	ldr	r1, [pc, #140]	@ (8001ce0 <SDStorage_WriteLog+0x4c0>)
 8001c54:	2000      	movs	r0, #0
 8001c56:	f003 fd6d 	bl	8005734 <LOGGER_SendFormatted>
                return SDSTORAGE_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e035      	b.n	8001cca <SDStorage_WriteLog+0x4aa>
            } else {
                LOG_ERROR("[SDStorage] f_write failed: %d, written: %d/%d", write_result, bytes_written, size);
 8001c5e:	f897 2443 	ldrb.w	r2, [r7, #1091]	@ 0x443
 8001c62:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001c66:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001c6a:	6819      	ldr	r1, [r3, #0]
 8001c6c:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001c70:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4918      	ldr	r1, [pc, #96]	@ (8001cdc <SDStorage_WriteLog+0x4bc>)
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	f003 fd59 	bl	8005734 <LOGGER_SendFormatted>
                return SDSTORAGE_FILE_ERROR;
 8001c82:	f06f 0302 	mvn.w	r3, #2
 8001c86:	e020      	b.n	8001cca <SDStorage_WriteLog+0x4aa>
            }
        }
    } else {
        LOG_ERROR("[SDStorage] f_open failed: %d - SD card state may have changed", open_result);
 8001c88:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4915      	ldr	r1, [pc, #84]	@ (8001ce4 <SDStorage_WriteLog+0x4c4>)
 8001c90:	2003      	movs	r0, #3
 8001c92:	f003 fd4f 	bl	8005734 <LOGGER_SendFormatted>
        
        // SD 카드 상태 재확인
        DSTATUS current_status = disk_status(0);
 8001c96:	2000      	movs	r0, #0
 8001c98:	f010 fb66 	bl	8012368 <disk_status>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f887 344a 	strb.w	r3, [r7, #1098]	@ 0x44a
        LOG_WARN("[SDStorage] Current disk status: 0x%02X", current_status);
 8001ca2:	f897 344a 	ldrb.w	r3, [r7, #1098]	@ 0x44a
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	490f      	ldr	r1, [pc, #60]	@ (8001ce8 <SDStorage_WriteLog+0x4c8>)
 8001caa:	2002      	movs	r0, #2
 8001cac:	f003 fd42 	bl	8005734 <LOGGER_SendFormatted>
        
        if (current_status != 0) {
 8001cb0:	f897 344a 	ldrb.w	r3, [r7, #1098]	@ 0x44a
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d006      	beq.n	8001cc6 <SDStorage_WriteLog+0x4a6>
            LOG_WARN("[SDStorage] SD card not ready - temporarily disabling SD logging");
 8001cb8:	490c      	ldr	r1, [pc, #48]	@ (8001cec <SDStorage_WriteLog+0x4cc>)
 8001cba:	2002      	movs	r0, #2
 8001cbc:	f003 fd3a 	bl	8005734 <LOGGER_SendFormatted>
            return SDSTORAGE_NOT_READY;
 8001cc0:	f06f 0301 	mvn.w	r3, #1
 8001cc4:	e001      	b.n	8001cca <SDStorage_WriteLog+0x4aa>
        }
        
        return SDSTORAGE_FILE_ERROR;
 8001cc6:	f06f 0302 	mvn.w	r3, #2
    // 실제 파일 쓰기 없이 성공으로 처리
#endif

    g_current_log_size += size;
    return SDSTORAGE_OK;
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f507 678a 	add.w	r7, r7, #1104	@ 0x450
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20000380 	.word	0x20000380
 8001cd8:	0801a264 	.word	0x0801a264
 8001cdc:	0801a2a4 	.word	0x0801a2a4
 8001ce0:	0801a2d4 	.word	0x0801a2d4
 8001ce4:	0801a31c 	.word	0x0801a31c
 8001ce8:	0801a35c 	.word	0x0801a35c
 8001cec:	0801a384 	.word	0x0801a384

08001cf0 <SDStorage_IsReady>:

bool SDStorage_IsReady(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
    return g_sd_ready;
 8001cf4:	4b03      	ldr	r3, [pc, #12]	@ (8001d04 <SDStorage_IsReady+0x14>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	2000027d 	.word	0x2000027d

08001d08 <SDStorage_CreateNewLogFile>:
        memset(g_current_log_file, 0, sizeof(g_current_log_file));
    }
}

int SDStorage_CreateNewLogFile(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 8001d0e:	af00      	add	r7, sp, #0
    if (!g_sd_ready) {
 8001d10:	4b43      	ldr	r3, [pc, #268]	@ (8001e20 <SDStorage_CreateNewLogFile+0x118>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	f083 0301 	eor.w	r3, r3, #1
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d002      	beq.n	8001d24 <SDStorage_CreateNewLogFile+0x1c>
        return SDSTORAGE_NOT_READY;
 8001d1e:	f06f 0301 	mvn.w	r3, #1
 8001d22:	e077      	b.n	8001e14 <SDStorage_CreateNewLogFile+0x10c>
    }
    
    // 전역 파일 객체 제거됨 - 별도 처리 불필요
    
    // 새 파일명 생성
    if (_generate_log_filename(g_current_log_file, sizeof(g_current_log_file)) != SDSTORAGE_OK) {
 8001d24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d28:	483e      	ldr	r0, [pc, #248]	@ (8001e24 <SDStorage_CreateNewLogFile+0x11c>)
 8001d2a:	f000 f8f5 	bl	8001f18 <_generate_log_filename>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <SDStorage_CreateNewLogFile+0x32>
        return SDSTORAGE_ERROR;
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295
 8001d38:	e06c      	b.n	8001e14 <SDStorage_CreateNewLogFile+0x10c>
    }
    
    // 파일 생성 테스트 (간단한 방식)
#ifdef STM32F746xx
    LOG_INFO("[SDStorage] Testing file creation: %s", g_current_log_file);
 8001d3a:	4a3a      	ldr	r2, [pc, #232]	@ (8001e24 <SDStorage_CreateNewLogFile+0x11c>)
 8001d3c:	493a      	ldr	r1, [pc, #232]	@ (8001e28 <SDStorage_CreateNewLogFile+0x120>)
 8001d3e:	2001      	movs	r0, #1
 8001d40:	f003 fcf8 	bl	8005734 <LOGGER_SendFormatted>
    
    // 지역 변수로 파일 객체 생성
    FIL test_file;
    memset(&test_file, 0, sizeof(test_file));
 8001d44:	463b      	mov	r3, r7
 8001d46:	f44f 720b 	mov.w	r2, #556	@ 0x22c
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f015 fedb 	bl	8017b08 <memset>
    
    // SD 카드 상태 재확인
    DSTATUS current_disk_status = disk_status(0);
 8001d52:	2000      	movs	r0, #0
 8001d54:	f010 fb08 	bl	8012368 <disk_status>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
    LOG_INFO("[SDStorage] Current disk status: 0x%02X", current_disk_status);
 8001d5e:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8001d62:	461a      	mov	r2, r3
 8001d64:	4931      	ldr	r1, [pc, #196]	@ (8001e2c <SDStorage_CreateNewLogFile+0x124>)
 8001d66:	2001      	movs	r0, #1
 8001d68:	f003 fce4 	bl	8005734 <LOGGER_SendFormatted>
    
    // 파일 생성 테스트
    FRESULT open_result = f_open(&test_file, g_current_log_file, FA_CREATE_ALWAYS | FA_WRITE);
 8001d6c:	463b      	mov	r3, r7
 8001d6e:	220a      	movs	r2, #10
 8001d70:	492c      	ldr	r1, [pc, #176]	@ (8001e24 <SDStorage_CreateNewLogFile+0x11c>)
 8001d72:	4618      	mov	r0, r3
 8001d74:	f011 ff06 	bl	8013b84 <f_open>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f887 322e 	strb.w	r3, [r7, #558]	@ 0x22e
    LOG_INFO("[SDStorage] f_open result: %d", open_result);
 8001d7e:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001d82:	461a      	mov	r2, r3
 8001d84:	492a      	ldr	r1, [pc, #168]	@ (8001e30 <SDStorage_CreateNewLogFile+0x128>)
 8001d86:	2001      	movs	r0, #1
 8001d88:	f003 fcd4 	bl	8005734 <LOGGER_SendFormatted>
    
    if (open_result != FR_OK) {
 8001d8c:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d032      	beq.n	8001dfa <SDStorage_CreateNewLogFile+0xf2>
        LOG_ERROR("[SDStorage] f_open failed: %d", open_result);
 8001d94:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4926      	ldr	r1, [pc, #152]	@ (8001e34 <SDStorage_CreateNewLogFile+0x12c>)
 8001d9c:	2003      	movs	r0, #3
 8001d9e:	f003 fcc9 	bl	8005734 <LOGGER_SendFormatted>
        
        // 상세 에러 분석
        switch (open_result) {
 8001da2:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001da6:	2b10      	cmp	r3, #16
 8001da8:	d006      	beq.n	8001db8 <SDStorage_CreateNewLogFile+0xb0>
 8001daa:	2b10      	cmp	r3, #16
 8001dac:	dc13      	bgt.n	8001dd6 <SDStorage_CreateNewLogFile+0xce>
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d00c      	beq.n	8001dcc <SDStorage_CreateNewLogFile+0xc4>
 8001db2:	2b09      	cmp	r3, #9
 8001db4:	d005      	beq.n	8001dc2 <SDStorage_CreateNewLogFile+0xba>
 8001db6:	e00e      	b.n	8001dd6 <SDStorage_CreateNewLogFile+0xce>
            case 16: // FR_INVALID_OBJECT
                LOG_ERROR("[SDStorage] FR_INVALID_OBJECT - File object initialization issue");
 8001db8:	491f      	ldr	r1, [pc, #124]	@ (8001e38 <SDStorage_CreateNewLogFile+0x130>)
 8001dba:	2003      	movs	r0, #3
 8001dbc:	f003 fcba 	bl	8005734 <LOGGER_SendFormatted>
                break;
 8001dc0:	e011      	b.n	8001de6 <SDStorage_CreateNewLogFile+0xde>
            case 9: // FR_WRITE_PROTECTED  
                LOG_ERROR("[SDStorage] FR_WRITE_PROTECTED - SD card is write protected");
 8001dc2:	491e      	ldr	r1, [pc, #120]	@ (8001e3c <SDStorage_CreateNewLogFile+0x134>)
 8001dc4:	2003      	movs	r0, #3
 8001dc6:	f003 fcb5 	bl	8005734 <LOGGER_SendFormatted>
                break;
 8001dca:	e00c      	b.n	8001de6 <SDStorage_CreateNewLogFile+0xde>
            case 3: // FR_NOT_READY
                LOG_ERROR("[SDStorage] FR_NOT_READY - Disk not ready");
 8001dcc:	491c      	ldr	r1, [pc, #112]	@ (8001e40 <SDStorage_CreateNewLogFile+0x138>)
 8001dce:	2003      	movs	r0, #3
 8001dd0:	f003 fcb0 	bl	8005734 <LOGGER_SendFormatted>
                break;
 8001dd4:	e007      	b.n	8001de6 <SDStorage_CreateNewLogFile+0xde>
            default:
                LOG_ERROR("[SDStorage] Unknown f_open error: %d", open_result);
 8001dd6:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4919      	ldr	r1, [pc, #100]	@ (8001e44 <SDStorage_CreateNewLogFile+0x13c>)
 8001dde:	2003      	movs	r0, #3
 8001de0:	f003 fca8 	bl	8005734 <LOGGER_SendFormatted>
                break;
 8001de4:	bf00      	nop
        }
        
        LOG_WARN("[SDStorage] Disabling SD logging due to file creation failure");
 8001de6:	4918      	ldr	r1, [pc, #96]	@ (8001e48 <SDStorage_CreateNewLogFile+0x140>)
 8001de8:	2002      	movs	r0, #2
 8001dea:	f003 fca3 	bl	8005734 <LOGGER_SendFormatted>
        g_sd_ready = false;  // SD 로깅 비활성화
 8001dee:	4b0c      	ldr	r3, [pc, #48]	@ (8001e20 <SDStorage_CreateNewLogFile+0x118>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
        return SDSTORAGE_FILE_ERROR;
 8001df4:	f06f 0302 	mvn.w	r3, #2
 8001df8:	e00c      	b.n	8001e14 <SDStorage_CreateNewLogFile+0x10c>
    }
    
    // 파일 생성 확인 후 즉시 닫기 (추적 등록 없이)
    f_close(&test_file);
 8001dfa:	463b      	mov	r3, r7
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f012 fa3f 	bl	8014280 <f_close>
    LOG_INFO("[SDStorage] File created and ready for logging: %s", g_current_log_file);
 8001e02:	4a08      	ldr	r2, [pc, #32]	@ (8001e24 <SDStorage_CreateNewLogFile+0x11c>)
 8001e04:	4911      	ldr	r1, [pc, #68]	@ (8001e4c <SDStorage_CreateNewLogFile+0x144>)
 8001e06:	2001      	movs	r0, #1
 8001e08:	f003 fc94 	bl	8005734 <LOGGER_SendFormatted>
#else
    // PC/테스트 환경: 파일 생성 시뮬레이션 (항상 성공)
    LOG_INFO("[SDStorage] Test environment - file creation simulated");
#endif
    
    g_current_log_size = 0;
 8001e0c:	4b10      	ldr	r3, [pc, #64]	@ (8001e50 <SDStorage_CreateNewLogFile+0x148>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
    return SDSTORAGE_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	f507 770c 	add.w	r7, r7, #560	@ 0x230
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	2000027d 	.word	0x2000027d
 8001e24:	20000280 	.word	0x20000280
 8001e28:	0801a3c8 	.word	0x0801a3c8
 8001e2c:	0801a35c 	.word	0x0801a35c
 8001e30:	0801a3f0 	.word	0x0801a3f0
 8001e34:	0801a410 	.word	0x0801a410
 8001e38:	0801a430 	.word	0x0801a430
 8001e3c:	0801a474 	.word	0x0801a474
 8001e40:	0801a4b0 	.word	0x0801a4b0
 8001e44:	0801a4dc 	.word	0x0801a4dc
 8001e48:	0801a504 	.word	0x0801a504
 8001e4c:	0801a544 	.word	0x0801a544
 8001e50:	20000380 	.word	0x20000380

08001e54 <_create_log_directory>:
    return g_current_log_size;
}

// 내부 함수 구현
static int _create_log_directory(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    // FatFs가 이미 정상 동작하므로 HAL 테스트 불필요
    
    // f_mkdir 전에 볼륨 상태 재확인 (에러 6 방지)
    LOG_INFO("[SDStorage] Verifying volume state before f_mkdir...");
 8001e5a:	4924      	ldr	r1, [pc, #144]	@ (8001eec <_create_log_directory+0x98>)
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	f003 fc69 	bl	8005734 <LOGGER_SendFormatted>
    
    // 볼륨 재마운트 시도 (상태 안정화)
    FRESULT remount_result = f_mount(&SDFatFS, SDPath, 1);
 8001e62:	2201      	movs	r2, #1
 8001e64:	4922      	ldr	r1, [pc, #136]	@ (8001ef0 <_create_log_directory+0x9c>)
 8001e66:	4823      	ldr	r0, [pc, #140]	@ (8001ef4 <_create_log_directory+0xa0>)
 8001e68:	f011 fe48 	bl	8013afc <f_mount>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	71bb      	strb	r3, [r7, #6]
    LOG_INFO("[SDStorage] Volume re-mount result: %d", remount_result);
 8001e70:	79bb      	ldrb	r3, [r7, #6]
 8001e72:	461a      	mov	r2, r3
 8001e74:	4920      	ldr	r1, [pc, #128]	@ (8001ef8 <_create_log_directory+0xa4>)
 8001e76:	2001      	movs	r0, #1
 8001e78:	f003 fc5c 	bl	8005734 <LOGGER_SendFormatted>
    
    FRESULT mkdir_result = FR_NOT_ENABLED;  // 초기값 설정
 8001e7c:	230c      	movs	r3, #12
 8001e7e:	71fb      	strb	r3, [r7, #7]
    
    if (remount_result == FR_OK) {
 8001e80:	79bb      	ldrb	r3, [r7, #6]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10f      	bne.n	8001ea6 <_create_log_directory+0x52>
        LOG_INFO("[SDStorage] Volume ready - attempting f_mkdir...");
 8001e86:	491d      	ldr	r1, [pc, #116]	@ (8001efc <_create_log_directory+0xa8>)
 8001e88:	2001      	movs	r0, #1
 8001e8a:	f003 fc53 	bl	8005734 <LOGGER_SendFormatted>
        mkdir_result = f_mkdir("lora_logs");
 8001e8e:	481c      	ldr	r0, [pc, #112]	@ (8001f00 <_create_log_directory+0xac>)
 8001e90:	f012 fa16 	bl	80142c0 <f_mkdir>
 8001e94:	4603      	mov	r3, r0
 8001e96:	71fb      	strb	r3, [r7, #7]
        LOG_INFO("[SDStorage] f_mkdir result: %d", mkdir_result);
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4919      	ldr	r1, [pc, #100]	@ (8001f04 <_create_log_directory+0xb0>)
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	f003 fc48 	bl	8005734 <LOGGER_SendFormatted>
 8001ea4:	e005      	b.n	8001eb2 <_create_log_directory+0x5e>
    } else {
        LOG_ERROR("[SDStorage] Volume re-mount failed: %d", remount_result);
 8001ea6:	79bb      	ldrb	r3, [r7, #6]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4917      	ldr	r1, [pc, #92]	@ (8001f08 <_create_log_directory+0xb4>)
 8001eac:	2003      	movs	r0, #3
 8001eae:	f003 fc41 	bl	8005734 <LOGGER_SendFormatted>
    }
    
    // FR_EXIST(9)는 이미 존재함을 의미하므로 성공으로 처리
    if (mkdir_result == FR_OK || mkdir_result == FR_EXIST) {
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <_create_log_directory+0x6a>
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d105      	bne.n	8001eca <_create_log_directory+0x76>
        LOG_INFO("[SDStorage] Directory ready (created or already exists)");
 8001ebe:	4913      	ldr	r1, [pc, #76]	@ (8001f0c <_create_log_directory+0xb8>)
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	f003 fc37 	bl	8005734 <LOGGER_SendFormatted>
        return SDSTORAGE_OK;  // 디렉토리 성공
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e00b      	b.n	8001ee2 <_create_log_directory+0x8e>
    } else {
        LOG_ERROR("[SDStorage] f_mkdir failed: %d - FatFs level problem", mkdir_result);
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4910      	ldr	r1, [pc, #64]	@ (8001f10 <_create_log_directory+0xbc>)
 8001ed0:	2003      	movs	r0, #3
 8001ed2:	f003 fc2f 	bl	8005734 <LOGGER_SendFormatted>
        LOG_INFO("[SDStorage] Will try direct file creation without directory");
 8001ed6:	490f      	ldr	r1, [pc, #60]	@ (8001f14 <_create_log_directory+0xc0>)
 8001ed8:	2001      	movs	r0, #1
 8001eda:	f003 fc2b 	bl	8005734 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;  // 디렉토리 실패
 8001ede:	f04f 33ff 	mov.w	r3, #4294967295
#else
    // PC: mkdir 시뮬레이션 (테스트에서는 성공으로 가정)
    LOG_INFO("[SDStorage] Test environment - directory creation simulated");
    return SDSTORAGE_OK;
#endif
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	0801a578 	.word	0x0801a578
 8001ef0:	200026d4 	.word	0x200026d4
 8001ef4:	200026d8 	.word	0x200026d8
 8001ef8:	0801a5b0 	.word	0x0801a5b0
 8001efc:	0801a5d8 	.word	0x0801a5d8
 8001f00:	0801a60c 	.word	0x0801a60c
 8001f04:	0801a618 	.word	0x0801a618
 8001f08:	0801a638 	.word	0x0801a638
 8001f0c:	0801a660 	.word	0x0801a660
 8001f10:	0801a698 	.word	0x0801a698
 8001f14:	0801a6d0 	.word	0x0801a6d0

08001f18 <_generate_log_filename>:

static int _generate_log_filename(char* filename, size_t max_len)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	f5ad 7d50 	sub.w	sp, sp, #832	@ 0x340
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001f24:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001f28:	6018      	str	r0, [r3, #0]
 8001f2a:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001f2e:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8001f32:	6019      	str	r1, [r3, #0]
    // 8.3 형식 파일명 생성 - 기존 파일 확인하여 중복 방지
    static int file_counter = 0;  // 0부터 시작하여 첫 번째 호출에서 1로 설정
    
    // 첫 번째 호출에서만 기존 파일 확인
    if (file_counter == 0) {
 8001f34:	4b48      	ldr	r3, [pc, #288]	@ (8002058 <_generate_log_filename+0x140>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d14a      	bne.n	8001fd2 <_generate_log_filename+0xba>
        file_counter = 1;
 8001f3c:	4b46      	ldr	r3, [pc, #280]	@ (8002058 <_generate_log_filename+0x140>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	601a      	str	r2, [r3, #0]
        
        // 기존 파일들 확인하여 다음 번호 찾기
        for (int i = 1; i <= 9999; i++) {
 8001f42:	2301      	movs	r3, #1
 8001f44:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001f48:	e034      	b.n	8001fb4 <_generate_log_filename+0x9c>
            char test_filename[256];
            FIL test_file;
            
            if (g_directory_available) {
 8001f4a:	4b44      	ldr	r3, [pc, #272]	@ (800205c <_generate_log_filename+0x144>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d009      	beq.n	8001f66 <_generate_log_filename+0x4e>
                snprintf(test_filename, sizeof(test_filename), "lora_logs/LORA%04d.TXT", i);
 8001f52:	f107 0008 	add.w	r0, r7, #8
 8001f56:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001f5a:	4a41      	ldr	r2, [pc, #260]	@ (8002060 <_generate_log_filename+0x148>)
 8001f5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f60:	f015 fcfa 	bl	8017958 <sniprintf>
 8001f64:	e008      	b.n	8001f78 <_generate_log_filename+0x60>
            } else {
                snprintf(test_filename, sizeof(test_filename), "LORA%04d.TXT", i);
 8001f66:	f107 0008 	add.w	r0, r7, #8
 8001f6a:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001f6e:	4a3d      	ldr	r2, [pc, #244]	@ (8002064 <_generate_log_filename+0x14c>)
 8001f70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f74:	f015 fcf0 	bl	8017958 <sniprintf>
            }
            
            // 파일이 존재하는지 확인
            FRESULT test_result = f_open(&test_file, test_filename, FA_READ);
 8001f78:	f107 0108 	add.w	r1, r7, #8
 8001f7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001f80:	2201      	movs	r2, #1
 8001f82:	4618      	mov	r0, r3
 8001f84:	f011 fdfe 	bl	8013b84 <f_open>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f887 3337 	strb.w	r3, [r7, #823]	@ 0x337
            if (test_result == FR_OK) {
 8001f8e:	f897 3337 	ldrb.w	r3, [r7, #823]	@ 0x337
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d115      	bne.n	8001fc2 <_generate_log_filename+0xaa>
                f_close(&test_file);
 8001f96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f012 f970 	bl	8014280 <f_close>
                file_counter = i + 1;  // 다음 번호로 설정
 8001fa0:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	4a2c      	ldr	r2, [pc, #176]	@ (8002058 <_generate_log_filename+0x140>)
 8001fa8:	6013      	str	r3, [r2, #0]
        for (int i = 1; i <= 9999; i++) {
 8001faa:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001fae:	3301      	adds	r3, #1
 8001fb0:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001fb4:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001fb8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	ddc4      	ble.n	8001f4a <_generate_log_filename+0x32>
 8001fc0:	e000      	b.n	8001fc4 <_generate_log_filename+0xac>
            } else {
                break;  // 파일이 없으면 현재 번호 사용
 8001fc2:	bf00      	nop
            }
        }
        
        LOG_DEBUG("[SDStorage] Auto-detected next log file number: %d", file_counter);
 8001fc4:	4b24      	ldr	r3, [pc, #144]	@ (8002058 <_generate_log_filename+0x140>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4927      	ldr	r1, [pc, #156]	@ (8002068 <_generate_log_filename+0x150>)
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f003 fbb1 	bl	8005734 <LOGGER_SendFormatted>
    }
    
    // 디렉토리 사용 가능 여부에 따라 경로 결정
    int result;
    if (g_directory_available) {
 8001fd2:	4b22      	ldr	r3, [pc, #136]	@ (800205c <_generate_log_filename+0x144>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d011      	beq.n	8001ffe <_generate_log_filename+0xe6>
        // lora_logs 디렉토리에 파일 생성 (TXT 형식)
        result = snprintf(filename, max_len, "lora_logs/LORA%04d.TXT", file_counter);
 8001fda:	4b1f      	ldr	r3, [pc, #124]	@ (8002058 <_generate_log_filename+0x140>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 8001fe2:	f5a2 7150 	sub.w	r1, r2, #832	@ 0x340
 8001fe6:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 8001fea:	f5a2 704f 	sub.w	r0, r2, #828	@ 0x33c
 8001fee:	4a1c      	ldr	r2, [pc, #112]	@ (8002060 <_generate_log_filename+0x148>)
 8001ff0:	6809      	ldr	r1, [r1, #0]
 8001ff2:	6800      	ldr	r0, [r0, #0]
 8001ff4:	f015 fcb0 	bl	8017958 <sniprintf>
 8001ff8:	f8c7 0338 	str.w	r0, [r7, #824]	@ 0x338
 8001ffc:	e010      	b.n	8002020 <_generate_log_filename+0x108>
    } else {
        // 루트 디렉토리에 파일 생성 (TXT 형식)
        result = snprintf(filename, max_len, "LORA%04d.TXT", file_counter);
 8001ffe:	4b16      	ldr	r3, [pc, #88]	@ (8002058 <_generate_log_filename+0x140>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 8002006:	f5a2 7150 	sub.w	r1, r2, #832	@ 0x340
 800200a:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 800200e:	f5a2 704f 	sub.w	r0, r2, #828	@ 0x33c
 8002012:	4a14      	ldr	r2, [pc, #80]	@ (8002064 <_generate_log_filename+0x14c>)
 8002014:	6809      	ldr	r1, [r1, #0]
 8002016:	6800      	ldr	r0, [r0, #0]
 8002018:	f015 fc9e 	bl	8017958 <sniprintf>
 800201c:	f8c7 0338 	str.w	r0, [r7, #824]	@ 0x338
    }
    
    file_counter++;
 8002020:	4b0d      	ldr	r3, [pc, #52]	@ (8002058 <_generate_log_filename+0x140>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	3301      	adds	r3, #1
 8002026:	4a0c      	ldr	r2, [pc, #48]	@ (8002058 <_generate_log_filename+0x140>)
 8002028:	6013      	str	r3, [r2, #0]
    
    if (result < 0 || (size_t)result >= max_len) {
 800202a:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 800202e:	2b00      	cmp	r3, #0
 8002030:	db08      	blt.n	8002044 <_generate_log_filename+0x12c>
 8002032:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8002036:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 800203a:	f5a2 7250 	sub.w	r2, r2, #832	@ 0x340
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d802      	bhi.n	800204a <_generate_log_filename+0x132>
        return SDSTORAGE_ERROR;
 8002044:	f04f 33ff 	mov.w	r3, #4294967295
 8002048:	e000      	b.n	800204c <_generate_log_filename+0x134>
    }
    
    return SDSTORAGE_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	f507 7750 	add.w	r7, r7, #832	@ 0x340
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	2000168c 	.word	0x2000168c
 800205c:	20000384 	.word	0x20000384
 8002060:	0801a70c 	.word	0x0801a70c
 8002064:	0801a724 	.word	0x0801a724
 8002068:	0801a734 	.word	0x0801a734

0800206c <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4a07      	ldr	r2, [pc, #28]	@ (80020cc <vApplicationGetIdleTaskMemory+0x2c>)
 80020b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	4a06      	ldr	r2, [pc, #24]	@ (80020d0 <vApplicationGetIdleTaskMemory+0x30>)
 80020b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2280      	movs	r2, #128	@ 0x80
 80020bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80020be:	bf00      	nop
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20001690 	.word	0x20001690
 80020d0:	200016e8 	.word	0x200016e8

080020d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020d4:	b5b0      	push	{r4, r5, r7, lr}
 80020d6:	b09a      	sub	sp, #104	@ 0x68
 80020d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // 리셋 카운터 추가
  static uint32_t reset_count = 0;
  reset_count++;
 80020da:	4b96      	ldr	r3, [pc, #600]	@ (8002334 <main+0x260>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	3301      	adds	r3, #1
 80020e0:	4a94      	ldr	r2, [pc, #592]	@ (8002334 <main+0x260>)
 80020e2:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020e4:	f004 f919 	bl	800631a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020e8:	f000 f966 	bl	80023b8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80020ec:	f000 f9d6 	bl	800249c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020f0:	f001 f9a0 	bl	8003434 <MX_GPIO_Init>
  MX_DMA_Init();  // DMA는 UART보다 먼저 초기화
 80020f4:	f001 ffe6 	bl	80040c4 <MX_DMA_Init>
  MX_USART6_DMA_Init();  // USART6 DMA 초기화 (UART보다 먼저)
 80020f8:	f002 f80a 	bl	8004110 <MX_USART6_DMA_Init>
  MX_ADC3_Init();
 80020fc:	f000 fa00 	bl	8002500 <MX_ADC3_Init>
  MX_CRC_Init();
 8002100:	f000 fa50 	bl	80025a4 <MX_CRC_Init>
  MX_DCMI_Init();
 8002104:	f000 fa70 	bl	80025e8 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8002108:	f000 faa2 	bl	8002650 <MX_DMA2D_Init>
  MX_ETH_Init();
 800210c:	f000 fad2 	bl	80026b4 <MX_ETH_Init>
  MX_FMC_Init();
 8002110:	f001 f940 	bl	8003394 <MX_FMC_Init>
  MX_I2C1_Init();
 8002114:	f000 fb1c 	bl	8002750 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002118:	f000 fb5a 	bl	80027d0 <MX_I2C3_Init>
  MX_LTDC_Init();
 800211c:	f000 fb98 	bl	8002850 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8002120:	f000 fc18 	bl	8002954 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8002124:	f000 fc42 	bl	80029ac <MX_RTC_Init>
  MX_SAI2_Init();
 8002128:	f000 fce4 	bl	8002af4 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 800212c:	f000 fd8a 	bl	8002c44 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8002130:	f000 fdb6 	bl	8002ca0 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8002134:	f000 fde4 	bl	8002d00 <MX_SPI2_Init>
  MX_TIM1_Init();
 8002138:	f000 fe20 	bl	8002d7c <MX_TIM1_Init>
  MX_TIM2_Init();
 800213c:	f000 feca 	bl	8002ed4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002140:	f000 ff3e 	bl	8002fc0 <MX_TIM3_Init>
  MX_TIM5_Init();
 8002144:	f000 ffb4 	bl	80030b0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002148:	f001 f82a 	bl	80031a0 <MX_TIM8_Init>
  MX_TIM12_Init();
 800214c:	f001 f87c 	bl	8003248 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8002150:	f001 f8c0 	bl	80032d4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002154:	f001 f8ee 	bl	8003334 <MX_USART6_UART_Init>
  
  // UART 초기화 후 DMA 핸들 다시 연결 (HAL_UART_Init에서 리셋될 수 있음)
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8002158:	4b77      	ldr	r3, [pc, #476]	@ (8002338 <main+0x264>)
 800215a:	4a78      	ldr	r2, [pc, #480]	@ (800233c <main+0x268>)
 800215c:	675a      	str	r2, [r3, #116]	@ 0x74
 800215e:	4b77      	ldr	r3, [pc, #476]	@ (800233c <main+0x268>)
 8002160:	4a75      	ldr	r2, [pc, #468]	@ (8002338 <main+0x264>)
 8002162:	639a      	str	r2, [r3, #56]	@ 0x38
  
  // UART IDLE 인터럽트 활성화 (DMA 기반 수신을 위해)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8002164:	4b74      	ldr	r3, [pc, #464]	@ (8002338 <main+0x264>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	4b73      	ldr	r3, [pc, #460]	@ (8002338 <main+0x264>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0210 	orr.w	r2, r2, #16
 8002172:	601a      	str	r2, [r3, #0]
  MX_FATFS_Init();
 8002174:	f00f fd00 	bl	8011b78 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  
  // Logger 초기화 (터미널 출력만 사용)
  LOGGER_Connect("STM32", 0);
 8002178:	2100      	movs	r1, #0
 800217a:	4871      	ldr	r0, [pc, #452]	@ (8002340 <main+0x26c>)
 800217c:	f003 fa4e 	bl	800561c <LOGGER_Connect>
  
  // 리셋 원인 확인
  LOG_INFO("=== SYSTEM START (Reset #%lu) ===", reset_count);
 8002180:	4b6c      	ldr	r3, [pc, #432]	@ (8002334 <main+0x260>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	496f      	ldr	r1, [pc, #444]	@ (8002344 <main+0x270>)
 8002188:	2001      	movs	r0, #1
 800218a:	f003 fad3 	bl	8005734 <LOGGER_SendFormatted>
  
  // RCC 리셋 플래그 확인
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST)) LOG_WARN("Reset: BOR (Brown-out)");
 800218e:	4b6e      	ldr	r3, [pc, #440]	@ (8002348 <main+0x274>)
 8002190:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <main+0xce>
 800219a:	496c      	ldr	r1, [pc, #432]	@ (800234c <main+0x278>)
 800219c:	2002      	movs	r0, #2
 800219e:	f003 fac9 	bl	8005734 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) LOG_WARN("Reset: PIN (External)");
 80021a2:	4b69      	ldr	r3, [pc, #420]	@ (8002348 <main+0x274>)
 80021a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <main+0xe2>
 80021ae:	4968      	ldr	r1, [pc, #416]	@ (8002350 <main+0x27c>)
 80021b0:	2002      	movs	r0, #2
 80021b2:	f003 fabf 	bl	8005734 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)) LOG_WARN("Reset: POR (Power-on)");
 80021b6:	4b64      	ldr	r3, [pc, #400]	@ (8002348 <main+0x274>)
 80021b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <main+0xf6>
 80021c2:	4964      	ldr	r1, [pc, #400]	@ (8002354 <main+0x280>)
 80021c4:	2002      	movs	r0, #2
 80021c6:	f003 fab5 	bl	8005734 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) LOG_WARN("Reset: SOFTWARE");
 80021ca:	4b5f      	ldr	r3, [pc, #380]	@ (8002348 <main+0x274>)
 80021cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <main+0x10a>
 80021d6:	4960      	ldr	r1, [pc, #384]	@ (8002358 <main+0x284>)
 80021d8:	2002      	movs	r0, #2
 80021da:	f003 faab 	bl	8005734 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) LOG_WARN("Reset: IWDG (Watchdog)");
 80021de:	4b5a      	ldr	r3, [pc, #360]	@ (8002348 <main+0x274>)
 80021e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <main+0x11e>
 80021ea:	495c      	ldr	r1, [pc, #368]	@ (800235c <main+0x288>)
 80021ec:	2002      	movs	r0, #2
 80021ee:	f003 faa1 	bl	8005734 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) LOG_WARN("Reset: WWDG (Window Watchdog)");
 80021f2:	4b55      	ldr	r3, [pc, #340]	@ (8002348 <main+0x274>)
 80021f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021f6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <main+0x132>
 80021fe:	4958      	ldr	r1, [pc, #352]	@ (8002360 <main+0x28c>)
 8002200:	2002      	movs	r0, #2
 8002202:	f003 fa97 	bl	8005734 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST)) LOG_WARN("Reset: LPWR (Low Power)");
 8002206:	4b50      	ldr	r3, [pc, #320]	@ (8002348 <main+0x274>)
 8002208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800220a:	2b00      	cmp	r3, #0
 800220c:	da03      	bge.n	8002216 <main+0x142>
 800220e:	4955      	ldr	r1, [pc, #340]	@ (8002364 <main+0x290>)
 8002210:	2002      	movs	r0, #2
 8002212:	f003 fa8f 	bl	8005734 <LOGGER_SendFormatted>
  
  // 플래그 클리어
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8002216:	4b4c      	ldr	r3, [pc, #304]	@ (8002348 <main+0x274>)
 8002218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800221a:	4a4b      	ldr	r2, [pc, #300]	@ (8002348 <main+0x274>)
 800221c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002220:	6753      	str	r3, [r2, #116]	@ 0x74
  
  // ===== 하드웨어 초기화만 main()에서 수행 =====
  
  // SD카드 초기화는 FreeRTOS 태스크에서 수행 (커널 시작 후)
  LOG_INFO("🔄 SD card initialization will be performed in FreeRTOS task");
 8002222:	4951      	ldr	r1, [pc, #324]	@ (8002368 <main+0x294>)
 8002224:	2001      	movs	r0, #1
 8002226:	f003 fa85 	bl	8005734 <LOGGER_SendFormatted>
  g_sd_initialization_result = -1;  // 초기화 안됨 상태
 800222a:	4b50      	ldr	r3, [pc, #320]	@ (800236c <main+0x298>)
 800222c:	f04f 32ff 	mov.w	r2, #4294967295
 8002230:	601a      	str	r2, [r3, #0]
  
  // UART6 DMA 초기화 건너뛰기 (이미 main 초기화에서 완료됨)
  LOG_INFO("📤 UART DMA already initialized in main() - skipping");
 8002232:	494f      	ldr	r1, [pc, #316]	@ (8002370 <main+0x29c>)
 8002234:	2001      	movs	r0, #1
 8002236:	f003 fa7d 	bl	8005734 <LOGGER_SendFormatted>
  
  // IDLE 인터럽트만 활성화 (메시지 끝 감지용)
  LOG_INFO("📤 Enabling UART IDLE interrupt...");
 800223a:	494e      	ldr	r1, [pc, #312]	@ (8002374 <main+0x2a0>)
 800223c:	2001      	movs	r0, #1
 800223e:	f003 fa79 	bl	8005734 <LOGGER_SendFormatted>
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8002242:	4b3d      	ldr	r3, [pc, #244]	@ (8002338 <main+0x264>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4b3b      	ldr	r3, [pc, #236]	@ (8002338 <main+0x264>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0210 	orr.w	r2, r2, #16
 8002250:	601a      	str	r2, [r3, #0]
  LOG_INFO("✅ UART setup completed");
 8002252:	4949      	ldr	r1, [pc, #292]	@ (8002378 <main+0x2a4>)
 8002254:	2001      	movs	r0, #1
 8002256:	f003 fa6d 	bl	8005734 <LOGGER_SendFormatted>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  // SD 로깅 큐 생성 (안전성 체크 포함)
  LOG_INFO("📤 Creating SD logging queue (size: %d, item: %d bytes)", 
 800225a:	2388      	movs	r3, #136	@ 0x88
 800225c:	220a      	movs	r2, #10
 800225e:	4947      	ldr	r1, [pc, #284]	@ (800237c <main+0x2a8>)
 8002260:	2001      	movs	r0, #1
 8002262:	f003 fa67 	bl	8005734 <LOGGER_SendFormatted>
           SD_LOG_QUEUE_SIZE, sizeof(SDLogEntry_t));
  
  osMessageQDef(sdLogQueue, SD_LOG_QUEUE_SIZE, SDLogEntry_t);
 8002266:	4b46      	ldr	r3, [pc, #280]	@ (8002380 <main+0x2ac>)
 8002268:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800226c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800226e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  sdLogQueueHandle = osMessageCreate(osMessageQ(sdLogQueue), NULL);
 8002272:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002276:	2100      	movs	r1, #0
 8002278:	4618      	mov	r0, r3
 800227a:	f012 fe5d 	bl	8014f38 <osMessageCreate>
 800227e:	4603      	mov	r3, r0
 8002280:	4a40      	ldr	r2, [pc, #256]	@ (8002384 <main+0x2b0>)
 8002282:	6013      	str	r3, [r2, #0]
  
  if (sdLogQueueHandle == NULL) {
 8002284:	4b3f      	ldr	r3, [pc, #252]	@ (8002384 <main+0x2b0>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d104      	bne.n	8002296 <main+0x1c2>
    LOG_ERROR("❌ SD logging queue creation FAILED - insufficient memory");
 800228c:	493e      	ldr	r1, [pc, #248]	@ (8002388 <main+0x2b4>)
 800228e:	2003      	movs	r0, #3
 8002290:	f003 fa50 	bl	8005734 <LOGGER_SendFormatted>
 8002294:	e003      	b.n	800229e <main+0x1ca>
  } else {
    LOG_INFO("✅ SD logging queue created successfully");
 8002296:	493d      	ldr	r1, [pc, #244]	@ (800238c <main+0x2b8>)
 8002298:	2001      	movs	r0, #1
 800229a:	f003 fa4b 	bl	8005734 <LOGGER_SendFormatted>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 8192);
 800229e:	4b3c      	ldr	r3, [pc, #240]	@ (8002390 <main+0x2bc>)
 80022a0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80022a4:	461d      	mov	r5, r3
 80022a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80022b2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f012 fddd 	bl	8014e78 <osThreadCreate>
 80022be:	4603      	mov	r3, r0
 80022c0:	4a34      	ldr	r2, [pc, #208]	@ (8002394 <main+0x2c0>)
 80022c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* 수신 태스크 활성화 - LoRa 통신을 위해 필수 */
  osThreadDef(receiveTask, StartReceiveTask, osPriorityNormal, 0, 4096);
 80022c4:	4b34      	ldr	r3, [pc, #208]	@ (8002398 <main+0x2c4>)
 80022c6:	f107 0420 	add.w	r4, r7, #32
 80022ca:	461d      	mov	r5, r3
 80022cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 80022d8:	f107 0320 	add.w	r3, r7, #32
 80022dc:	2100      	movs	r1, #0
 80022de:	4618      	mov	r0, r3
 80022e0:	f012 fdca 	bl	8014e78 <osThreadCreate>
 80022e4:	4603      	mov	r3, r0
 80022e6:	4a2d      	ldr	r2, [pc, #180]	@ (800239c <main+0x2c8>)
 80022e8:	6013      	str	r3, [r2, #0]
  LOG_INFO("📤 Receive Task enabled for LoRa communication");
 80022ea:	492d      	ldr	r1, [pc, #180]	@ (80023a0 <main+0x2cc>)
 80022ec:	2001      	movs	r0, #1
 80022ee:	f003 fa21 	bl	8005734 <LOGGER_SendFormatted>
  
  /* SD 로깅 태스크 활성화 - SD 카드 로깅을 위해 */
  osThreadDef(sdLoggingTask, StartSDLoggingTask, osPriorityLow, 0, 4096);
 80022f2:	4b2c      	ldr	r3, [pc, #176]	@ (80023a4 <main+0x2d0>)
 80022f4:	1d3c      	adds	r4, r7, #4
 80022f6:	461d      	mov	r5, r3
 80022f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002300:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sdLoggingTaskHandle = osThreadCreate(osThread(sdLoggingTask), NULL);
 8002304:	1d3b      	adds	r3, r7, #4
 8002306:	2100      	movs	r1, #0
 8002308:	4618      	mov	r0, r3
 800230a:	f012 fdb5 	bl	8014e78 <osThreadCreate>
 800230e:	4603      	mov	r3, r0
 8002310:	4a25      	ldr	r2, [pc, #148]	@ (80023a8 <main+0x2d4>)
 8002312:	6013      	str	r3, [r2, #0]
  LOG_INFO("📤 SD Logging Task enabled");
 8002314:	4925      	ldr	r1, [pc, #148]	@ (80023ac <main+0x2d8>)
 8002316:	2001      	movs	r0, #1
 8002318:	f003 fa0c 	bl	8005734 <LOGGER_SendFormatted>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  LOG_INFO("🚀 Starting FreeRTOS scheduler...");
 800231c:	4924      	ldr	r1, [pc, #144]	@ (80023b0 <main+0x2dc>)
 800231e:	2001      	movs	r0, #1
 8002320:	f003 fa08 	bl	8005734 <LOGGER_SendFormatted>
  osKernelStart();
 8002324:	f012 fd85 	bl	8014e32 <osKernelStart>
  
  // 이 부분은 절대 실행되면 안됨 (스케줄러가 제어를 가져가야 함)
  LOG_ERROR("❌ FATAL: Scheduler failed to start - system halted");
 8002328:	4922      	ldr	r1, [pc, #136]	@ (80023b4 <main+0x2e0>)
 800232a:	2003      	movs	r0, #3
 800232c:	f003 fa02 	bl	8005734 <LOGGER_SendFormatted>

  /* We should never get here as control is now taken by the scheduler */
  
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002330:	bf00      	nop
 8002332:	e7fd      	b.n	8002330 <main+0x25c>
 8002334:	20002450 	.word	0x20002450
 8002338:	20002114 	.word	0x20002114
 800233c:	200023ec 	.word	0x200023ec
 8002340:	0801a768 	.word	0x0801a768
 8002344:	0801a770 	.word	0x0801a770
 8002348:	40023800 	.word	0x40023800
 800234c:	0801a794 	.word	0x0801a794
 8002350:	0801a7ac 	.word	0x0801a7ac
 8002354:	0801a7c4 	.word	0x0801a7c4
 8002358:	0801a7dc 	.word	0x0801a7dc
 800235c:	0801a7ec 	.word	0x0801a7ec
 8002360:	0801a804 	.word	0x0801a804
 8002364:	0801a824 	.word	0x0801a824
 8002368:	0801a83c 	.word	0x0801a83c
 800236c:	20000014 	.word	0x20000014
 8002370:	0801a87c 	.word	0x0801a87c
 8002374:	0801a8b4 	.word	0x0801a8b4
 8002378:	0801a8dc 	.word	0x0801a8dc
 800237c:	0801a8f8 	.word	0x0801a8f8
 8002380:	0801aa4c 	.word	0x0801aa4c
 8002384:	200021dc 	.word	0x200021dc
 8002388:	0801a934 	.word	0x0801a934
 800238c:	0801a970 	.word	0x0801a970
 8002390:	0801aa68 	.word	0x0801aa68
 8002394:	200021d0 	.word	0x200021d0
 8002398:	0801aa90 	.word	0x0801aa90
 800239c:	200021d4 	.word	0x200021d4
 80023a0:	0801a99c 	.word	0x0801a99c
 80023a4:	0801aabc 	.word	0x0801aabc
 80023a8:	200021d8 	.word	0x200021d8
 80023ac:	0801a9d0 	.word	0x0801a9d0
 80023b0:	0801a9f0 	.word	0x0801a9f0
 80023b4:	0801aa14 	.word	0x0801aa14

080023b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b094      	sub	sp, #80	@ 0x50
 80023bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023be:	f107 0320 	add.w	r3, r7, #32
 80023c2:	2230      	movs	r2, #48	@ 0x30
 80023c4:	2100      	movs	r1, #0
 80023c6:	4618      	mov	r0, r3
 80023c8:	f015 fb9e 	bl	8017b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023cc:	f107 030c 	add.w	r3, r7, #12
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80023dc:	f008 fa4c 	bl	800a878 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002494 <SystemClock_Config+0xdc>)
 80023e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002494 <SystemClock_Config+0xdc>)
 80023e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ec:	4b29      	ldr	r3, [pc, #164]	@ (8002494 <SystemClock_Config+0xdc>)
 80023ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023f8:	4b27      	ldr	r3, [pc, #156]	@ (8002498 <SystemClock_Config+0xe0>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a26      	ldr	r2, [pc, #152]	@ (8002498 <SystemClock_Config+0xe0>)
 80023fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	4b24      	ldr	r3, [pc, #144]	@ (8002498 <SystemClock_Config+0xe0>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800240c:	607b      	str	r3, [r7, #4]
 800240e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002410:	2309      	movs	r3, #9
 8002412:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002414:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002418:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800241a:	2301      	movs	r3, #1
 800241c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800241e:	2302      	movs	r3, #2
 8002420:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002422:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002426:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002428:	2319      	movs	r3, #25
 800242a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 800242c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002430:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002432:	2302      	movs	r3, #2
 8002434:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002436:	2309      	movs	r3, #9
 8002438:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800243a:	f107 0320 	add.w	r3, r7, #32
 800243e:	4618      	mov	r0, r3
 8002440:	f008 fb3c 	bl	800aabc <HAL_RCC_OscConfig>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800244a:	f001 fe35 	bl	80040b8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800244e:	f008 fa23 	bl	800a898 <HAL_PWREx_EnableOverDrive>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002458:	f001 fe2e 	bl	80040b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800245c:	230f      	movs	r3, #15
 800245e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002460:	2302      	movs	r3, #2
 8002462:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002468:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800246c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800246e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002472:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002474:	f107 030c 	add.w	r3, r7, #12
 8002478:	2106      	movs	r1, #6
 800247a:	4618      	mov	r0, r3
 800247c:	f008 fdc2 	bl	800b004 <HAL_RCC_ClockConfig>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002486:	f001 fe17 	bl	80040b8 <Error_Handler>
  }
}
 800248a:	bf00      	nop
 800248c:	3750      	adds	r7, #80	@ 0x50
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40023800 	.word	0x40023800
 8002498:	40007000 	.word	0x40007000

0800249c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b0a2      	sub	sp, #136	@ 0x88
 80024a0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	2284      	movs	r2, #132	@ 0x84
 80024a6:	2100      	movs	r1, #0
 80024a8:	4618      	mov	r0, r3
 80024aa:	f015 fb2d 	bl	8017b08 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 80024ae:	4b13      	ldr	r3, [pc, #76]	@ (80024fc <PeriphCommonClock_Config+0x60>)
 80024b0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80024b2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80024b6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80024b8:	2305      	movs	r3, #5
 80024ba:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80024bc:	2302      	movs	r3, #2
 80024be:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80024c0:	2303      	movs	r3, #3
 80024c2:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80024c4:	2301      	movs	r3, #1
 80024c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80024c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024cc:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80024ce:	2300      	movs	r3, #0
 80024d0:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80024d2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80024d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80024da:	2300      	movs	r3, #0
 80024dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024e0:	1d3b      	adds	r3, r7, #4
 80024e2:	4618      	mov	r0, r3
 80024e4:	f008 ffa6 	bl	800b434 <HAL_RCCEx_PeriphCLKConfig>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80024ee:	f001 fde3 	bl	80040b8 <Error_Handler>
  }
}
 80024f2:	bf00      	nop
 80024f4:	3788      	adds	r7, #136	@ 0x88
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	00b00008 	.word	0x00b00008

08002500 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002506:	463b      	mov	r3, r7
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002512:	4b21      	ldr	r3, [pc, #132]	@ (8002598 <MX_ADC3_Init+0x98>)
 8002514:	4a21      	ldr	r2, [pc, #132]	@ (800259c <MX_ADC3_Init+0x9c>)
 8002516:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002518:	4b1f      	ldr	r3, [pc, #124]	@ (8002598 <MX_ADC3_Init+0x98>)
 800251a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800251e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002520:	4b1d      	ldr	r3, [pc, #116]	@ (8002598 <MX_ADC3_Init+0x98>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002526:	4b1c      	ldr	r3, [pc, #112]	@ (8002598 <MX_ADC3_Init+0x98>)
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800252c:	4b1a      	ldr	r3, [pc, #104]	@ (8002598 <MX_ADC3_Init+0x98>)
 800252e:	2200      	movs	r2, #0
 8002530:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002532:	4b19      	ldr	r3, [pc, #100]	@ (8002598 <MX_ADC3_Init+0x98>)
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800253a:	4b17      	ldr	r3, [pc, #92]	@ (8002598 <MX_ADC3_Init+0x98>)
 800253c:	2200      	movs	r2, #0
 800253e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002540:	4b15      	ldr	r3, [pc, #84]	@ (8002598 <MX_ADC3_Init+0x98>)
 8002542:	4a17      	ldr	r2, [pc, #92]	@ (80025a0 <MX_ADC3_Init+0xa0>)
 8002544:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002546:	4b14      	ldr	r3, [pc, #80]	@ (8002598 <MX_ADC3_Init+0x98>)
 8002548:	2200      	movs	r2, #0
 800254a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800254c:	4b12      	ldr	r3, [pc, #72]	@ (8002598 <MX_ADC3_Init+0x98>)
 800254e:	2201      	movs	r2, #1
 8002550:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002552:	4b11      	ldr	r3, [pc, #68]	@ (8002598 <MX_ADC3_Init+0x98>)
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800255a:	4b0f      	ldr	r3, [pc, #60]	@ (8002598 <MX_ADC3_Init+0x98>)
 800255c:	2201      	movs	r2, #1
 800255e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002560:	480d      	ldr	r0, [pc, #52]	@ (8002598 <MX_ADC3_Init+0x98>)
 8002562:	f003 ff2b 	bl	80063bc <HAL_ADC_Init>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800256c:	f001 fda4 	bl	80040b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002570:	2304      	movs	r3, #4
 8002572:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002574:	2301      	movs	r3, #1
 8002576:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002578:	2300      	movs	r3, #0
 800257a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800257c:	463b      	mov	r3, r7
 800257e:	4619      	mov	r1, r3
 8002580:	4805      	ldr	r0, [pc, #20]	@ (8002598 <MX_ADC3_Init+0x98>)
 8002582:	f003 ff5f 	bl	8006444 <HAL_ADC_ConfigChannel>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800258c:	f001 fd94 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002590:	bf00      	nop
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20001920 	.word	0x20001920
 800259c:	40012200 	.word	0x40012200
 80025a0:	0f000001 	.word	0x0f000001

080025a4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80025a8:	4b0d      	ldr	r3, [pc, #52]	@ (80025e0 <MX_CRC_Init+0x3c>)
 80025aa:	4a0e      	ldr	r2, [pc, #56]	@ (80025e4 <MX_CRC_Init+0x40>)
 80025ac:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80025ae:	4b0c      	ldr	r3, [pc, #48]	@ (80025e0 <MX_CRC_Init+0x3c>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80025b4:	4b0a      	ldr	r3, [pc, #40]	@ (80025e0 <MX_CRC_Init+0x3c>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80025ba:	4b09      	ldr	r3, [pc, #36]	@ (80025e0 <MX_CRC_Init+0x3c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80025c0:	4b07      	ldr	r3, [pc, #28]	@ (80025e0 <MX_CRC_Init+0x3c>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80025c6:	4b06      	ldr	r3, [pc, #24]	@ (80025e0 <MX_CRC_Init+0x3c>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80025cc:	4804      	ldr	r0, [pc, #16]	@ (80025e0 <MX_CRC_Init+0x3c>)
 80025ce:	f004 fa6f 	bl	8006ab0 <HAL_CRC_Init>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80025d8:	f001 fd6e 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80025dc:	bf00      	nop
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20001968 	.word	0x20001968
 80025e4:	40023000 	.word	0x40023000

080025e8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80025ec:	4b16      	ldr	r3, [pc, #88]	@ (8002648 <MX_DCMI_Init+0x60>)
 80025ee:	4a17      	ldr	r2, [pc, #92]	@ (800264c <MX_DCMI_Init+0x64>)
 80025f0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80025f2:	4b15      	ldr	r3, [pc, #84]	@ (8002648 <MX_DCMI_Init+0x60>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80025f8:	4b13      	ldr	r3, [pc, #76]	@ (8002648 <MX_DCMI_Init+0x60>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80025fe:	4b12      	ldr	r3, [pc, #72]	@ (8002648 <MX_DCMI_Init+0x60>)
 8002600:	2200      	movs	r2, #0
 8002602:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8002604:	4b10      	ldr	r3, [pc, #64]	@ (8002648 <MX_DCMI_Init+0x60>)
 8002606:	2200      	movs	r2, #0
 8002608:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800260a:	4b0f      	ldr	r3, [pc, #60]	@ (8002648 <MX_DCMI_Init+0x60>)
 800260c:	2200      	movs	r2, #0
 800260e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8002610:	4b0d      	ldr	r3, [pc, #52]	@ (8002648 <MX_DCMI_Init+0x60>)
 8002612:	2200      	movs	r2, #0
 8002614:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8002616:	4b0c      	ldr	r3, [pc, #48]	@ (8002648 <MX_DCMI_Init+0x60>)
 8002618:	2200      	movs	r2, #0
 800261a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800261c:	4b0a      	ldr	r3, [pc, #40]	@ (8002648 <MX_DCMI_Init+0x60>)
 800261e:	2200      	movs	r2, #0
 8002620:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8002622:	4b09      	ldr	r3, [pc, #36]	@ (8002648 <MX_DCMI_Init+0x60>)
 8002624:	2200      	movs	r2, #0
 8002626:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8002628:	4b07      	ldr	r3, [pc, #28]	@ (8002648 <MX_DCMI_Init+0x60>)
 800262a:	2200      	movs	r2, #0
 800262c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800262e:	4b06      	ldr	r3, [pc, #24]	@ (8002648 <MX_DCMI_Init+0x60>)
 8002630:	2200      	movs	r2, #0
 8002632:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8002634:	4804      	ldr	r0, [pc, #16]	@ (8002648 <MX_DCMI_Init+0x60>)
 8002636:	f004 fb2d 	bl	8006c94 <HAL_DCMI_Init>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8002640:	f001 fd3a 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8002644:	bf00      	nop
 8002646:	bd80      	pop	{r7, pc}
 8002648:	2000198c 	.word	0x2000198c
 800264c:	50050000 	.word	0x50050000

08002650 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8002654:	4b15      	ldr	r3, [pc, #84]	@ (80026ac <MX_DMA2D_Init+0x5c>)
 8002656:	4a16      	ldr	r2, [pc, #88]	@ (80026b0 <MX_DMA2D_Init+0x60>)
 8002658:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800265a:	4b14      	ldr	r3, [pc, #80]	@ (80026ac <MX_DMA2D_Init+0x5c>)
 800265c:	2200      	movs	r2, #0
 800265e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8002660:	4b12      	ldr	r3, [pc, #72]	@ (80026ac <MX_DMA2D_Init+0x5c>)
 8002662:	2200      	movs	r2, #0
 8002664:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8002666:	4b11      	ldr	r3, [pc, #68]	@ (80026ac <MX_DMA2D_Init+0x5c>)
 8002668:	2200      	movs	r2, #0
 800266a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800266c:	4b0f      	ldr	r3, [pc, #60]	@ (80026ac <MX_DMA2D_Init+0x5c>)
 800266e:	2200      	movs	r2, #0
 8002670:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8002672:	4b0e      	ldr	r3, [pc, #56]	@ (80026ac <MX_DMA2D_Init+0x5c>)
 8002674:	2200      	movs	r2, #0
 8002676:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002678:	4b0c      	ldr	r3, [pc, #48]	@ (80026ac <MX_DMA2D_Init+0x5c>)
 800267a:	2200      	movs	r2, #0
 800267c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800267e:	4b0b      	ldr	r3, [pc, #44]	@ (80026ac <MX_DMA2D_Init+0x5c>)
 8002680:	2200      	movs	r2, #0
 8002682:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002684:	4809      	ldr	r0, [pc, #36]	@ (80026ac <MX_DMA2D_Init+0x5c>)
 8002686:	f004 fff3 	bl	8007670 <HAL_DMA2D_Init>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8002690:	f001 fd12 	bl	80040b8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8002694:	2101      	movs	r1, #1
 8002696:	4805      	ldr	r0, [pc, #20]	@ (80026ac <MX_DMA2D_Init+0x5c>)
 8002698:	f005 f944 	bl	8007924 <HAL_DMA2D_ConfigLayer>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80026a2:	f001 fd09 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	200019dc 	.word	0x200019dc
 80026b0:	4002b000 	.word	0x4002b000

080026b4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80026b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002738 <MX_ETH_Init+0x84>)
 80026ba:	4a20      	ldr	r2, [pc, #128]	@ (800273c <MX_ETH_Init+0x88>)
 80026bc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80026be:	4b20      	ldr	r3, [pc, #128]	@ (8002740 <MX_ETH_Init+0x8c>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80026c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002740 <MX_ETH_Init+0x8c>)
 80026c6:	2280      	movs	r2, #128	@ 0x80
 80026c8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80026ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002740 <MX_ETH_Init+0x8c>)
 80026cc:	22e1      	movs	r2, #225	@ 0xe1
 80026ce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80026d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002740 <MX_ETH_Init+0x8c>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80026d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002740 <MX_ETH_Init+0x8c>)
 80026d8:	2200      	movs	r2, #0
 80026da:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80026dc:	4b18      	ldr	r3, [pc, #96]	@ (8002740 <MX_ETH_Init+0x8c>)
 80026de:	2200      	movs	r2, #0
 80026e0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80026e2:	4b15      	ldr	r3, [pc, #84]	@ (8002738 <MX_ETH_Init+0x84>)
 80026e4:	4a16      	ldr	r2, [pc, #88]	@ (8002740 <MX_ETH_Init+0x8c>)
 80026e6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80026e8:	4b13      	ldr	r3, [pc, #76]	@ (8002738 <MX_ETH_Init+0x84>)
 80026ea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80026ee:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80026f0:	4b11      	ldr	r3, [pc, #68]	@ (8002738 <MX_ETH_Init+0x84>)
 80026f2:	4a14      	ldr	r2, [pc, #80]	@ (8002744 <MX_ETH_Init+0x90>)
 80026f4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80026f6:	4b10      	ldr	r3, [pc, #64]	@ (8002738 <MX_ETH_Init+0x84>)
 80026f8:	4a13      	ldr	r2, [pc, #76]	@ (8002748 <MX_ETH_Init+0x94>)
 80026fa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80026fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002738 <MX_ETH_Init+0x84>)
 80026fe:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8002702:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002704:	480c      	ldr	r0, [pc, #48]	@ (8002738 <MX_ETH_Init+0x84>)
 8002706:	f005 f99f 	bl	8007a48 <HAL_ETH_Init>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8002710:	f001 fcd2 	bl	80040b8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002714:	2238      	movs	r2, #56	@ 0x38
 8002716:	2100      	movs	r1, #0
 8002718:	480c      	ldr	r0, [pc, #48]	@ (800274c <MX_ETH_Init+0x98>)
 800271a:	f015 f9f5 	bl	8017b08 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800271e:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <MX_ETH_Init+0x98>)
 8002720:	2221      	movs	r2, #33	@ 0x21
 8002722:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002724:	4b09      	ldr	r3, [pc, #36]	@ (800274c <MX_ETH_Init+0x98>)
 8002726:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800272a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800272c:	4b07      	ldr	r3, [pc, #28]	@ (800274c <MX_ETH_Init+0x98>)
 800272e:	2200      	movs	r2, #0
 8002730:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20001a1c 	.word	0x20001a1c
 800273c:	40028000 	.word	0x40028000
 8002740:	20002454 	.word	0x20002454
 8002744:	20000174 	.word	0x20000174
 8002748:	200000d4 	.word	0x200000d4
 800274c:	200018e8 	.word	0x200018e8

08002750 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002754:	4b1b      	ldr	r3, [pc, #108]	@ (80027c4 <MX_I2C1_Init+0x74>)
 8002756:	4a1c      	ldr	r2, [pc, #112]	@ (80027c8 <MX_I2C1_Init+0x78>)
 8002758:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800275a:	4b1a      	ldr	r3, [pc, #104]	@ (80027c4 <MX_I2C1_Init+0x74>)
 800275c:	4a1b      	ldr	r2, [pc, #108]	@ (80027cc <MX_I2C1_Init+0x7c>)
 800275e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002760:	4b18      	ldr	r3, [pc, #96]	@ (80027c4 <MX_I2C1_Init+0x74>)
 8002762:	2200      	movs	r2, #0
 8002764:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002766:	4b17      	ldr	r3, [pc, #92]	@ (80027c4 <MX_I2C1_Init+0x74>)
 8002768:	2201      	movs	r2, #1
 800276a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800276c:	4b15      	ldr	r3, [pc, #84]	@ (80027c4 <MX_I2C1_Init+0x74>)
 800276e:	2200      	movs	r2, #0
 8002770:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002772:	4b14      	ldr	r3, [pc, #80]	@ (80027c4 <MX_I2C1_Init+0x74>)
 8002774:	2200      	movs	r2, #0
 8002776:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002778:	4b12      	ldr	r3, [pc, #72]	@ (80027c4 <MX_I2C1_Init+0x74>)
 800277a:	2200      	movs	r2, #0
 800277c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800277e:	4b11      	ldr	r3, [pc, #68]	@ (80027c4 <MX_I2C1_Init+0x74>)
 8002780:	2200      	movs	r2, #0
 8002782:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002784:	4b0f      	ldr	r3, [pc, #60]	@ (80027c4 <MX_I2C1_Init+0x74>)
 8002786:	2200      	movs	r2, #0
 8002788:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800278a:	480e      	ldr	r0, [pc, #56]	@ (80027c4 <MX_I2C1_Init+0x74>)
 800278c:	f007 fc2e 	bl	8009fec <HAL_I2C_Init>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002796:	f001 fc8f 	bl	80040b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800279a:	2100      	movs	r1, #0
 800279c:	4809      	ldr	r0, [pc, #36]	@ (80027c4 <MX_I2C1_Init+0x74>)
 800279e:	f007 fcc1 	bl	800a124 <HAL_I2CEx_ConfigAnalogFilter>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80027a8:	f001 fc86 	bl	80040b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80027ac:	2100      	movs	r1, #0
 80027ae:	4805      	ldr	r0, [pc, #20]	@ (80027c4 <MX_I2C1_Init+0x74>)
 80027b0:	f007 fd03 	bl	800a1ba <HAL_I2CEx_ConfigDigitalFilter>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80027ba:	f001 fc7d 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20001acc 	.word	0x20001acc
 80027c8:	40005400 	.word	0x40005400
 80027cc:	00c0eaff 	.word	0x00c0eaff

080027d0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80027d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002844 <MX_I2C3_Init+0x74>)
 80027d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002848 <MX_I2C3_Init+0x78>)
 80027d8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80027da:	4b1a      	ldr	r3, [pc, #104]	@ (8002844 <MX_I2C3_Init+0x74>)
 80027dc:	4a1b      	ldr	r2, [pc, #108]	@ (800284c <MX_I2C3_Init+0x7c>)
 80027de:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80027e0:	4b18      	ldr	r3, [pc, #96]	@ (8002844 <MX_I2C3_Init+0x74>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027e6:	4b17      	ldr	r3, [pc, #92]	@ (8002844 <MX_I2C3_Init+0x74>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027ec:	4b15      	ldr	r3, [pc, #84]	@ (8002844 <MX_I2C3_Init+0x74>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80027f2:	4b14      	ldr	r3, [pc, #80]	@ (8002844 <MX_I2C3_Init+0x74>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80027f8:	4b12      	ldr	r3, [pc, #72]	@ (8002844 <MX_I2C3_Init+0x74>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027fe:	4b11      	ldr	r3, [pc, #68]	@ (8002844 <MX_I2C3_Init+0x74>)
 8002800:	2200      	movs	r2, #0
 8002802:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002804:	4b0f      	ldr	r3, [pc, #60]	@ (8002844 <MX_I2C3_Init+0x74>)
 8002806:	2200      	movs	r2, #0
 8002808:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800280a:	480e      	ldr	r0, [pc, #56]	@ (8002844 <MX_I2C3_Init+0x74>)
 800280c:	f007 fbee 	bl	8009fec <HAL_I2C_Init>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002816:	f001 fc4f 	bl	80040b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800281a:	2100      	movs	r1, #0
 800281c:	4809      	ldr	r0, [pc, #36]	@ (8002844 <MX_I2C3_Init+0x74>)
 800281e:	f007 fc81 	bl	800a124 <HAL_I2CEx_ConfigAnalogFilter>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002828:	f001 fc46 	bl	80040b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800282c:	2100      	movs	r1, #0
 800282e:	4805      	ldr	r0, [pc, #20]	@ (8002844 <MX_I2C3_Init+0x74>)
 8002830:	f007 fcc3 	bl	800a1ba <HAL_I2CEx_ConfigDigitalFilter>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800283a:	f001 fc3d 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20001b20 	.word	0x20001b20
 8002848:	40005c00 	.word	0x40005c00
 800284c:	00c0eaff 	.word	0x00c0eaff

08002850 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08e      	sub	sp, #56	@ 0x38
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002856:	1d3b      	adds	r3, r7, #4
 8002858:	2234      	movs	r2, #52	@ 0x34
 800285a:	2100      	movs	r1, #0
 800285c:	4618      	mov	r0, r3
 800285e:	f015 f953 	bl	8017b08 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002862:	4b3a      	ldr	r3, [pc, #232]	@ (800294c <MX_LTDC_Init+0xfc>)
 8002864:	4a3a      	ldr	r2, [pc, #232]	@ (8002950 <MX_LTDC_Init+0x100>)
 8002866:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002868:	4b38      	ldr	r3, [pc, #224]	@ (800294c <MX_LTDC_Init+0xfc>)
 800286a:	2200      	movs	r2, #0
 800286c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800286e:	4b37      	ldr	r3, [pc, #220]	@ (800294c <MX_LTDC_Init+0xfc>)
 8002870:	2200      	movs	r2, #0
 8002872:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002874:	4b35      	ldr	r3, [pc, #212]	@ (800294c <MX_LTDC_Init+0xfc>)
 8002876:	2200      	movs	r2, #0
 8002878:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800287a:	4b34      	ldr	r3, [pc, #208]	@ (800294c <MX_LTDC_Init+0xfc>)
 800287c:	2200      	movs	r2, #0
 800287e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8002880:	4b32      	ldr	r3, [pc, #200]	@ (800294c <MX_LTDC_Init+0xfc>)
 8002882:	2228      	movs	r2, #40	@ 0x28
 8002884:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8002886:	4b31      	ldr	r3, [pc, #196]	@ (800294c <MX_LTDC_Init+0xfc>)
 8002888:	2209      	movs	r2, #9
 800288a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800288c:	4b2f      	ldr	r3, [pc, #188]	@ (800294c <MX_LTDC_Init+0xfc>)
 800288e:	2235      	movs	r2, #53	@ 0x35
 8002890:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8002892:	4b2e      	ldr	r3, [pc, #184]	@ (800294c <MX_LTDC_Init+0xfc>)
 8002894:	220b      	movs	r2, #11
 8002896:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8002898:	4b2c      	ldr	r3, [pc, #176]	@ (800294c <MX_LTDC_Init+0xfc>)
 800289a:	f240 2215 	movw	r2, #533	@ 0x215
 800289e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80028a0:	4b2a      	ldr	r3, [pc, #168]	@ (800294c <MX_LTDC_Init+0xfc>)
 80028a2:	f240 121b 	movw	r2, #283	@ 0x11b
 80028a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 80028a8:	4b28      	ldr	r3, [pc, #160]	@ (800294c <MX_LTDC_Init+0xfc>)
 80028aa:	f240 2235 	movw	r2, #565	@ 0x235
 80028ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 80028b0:	4b26      	ldr	r3, [pc, #152]	@ (800294c <MX_LTDC_Init+0xfc>)
 80028b2:	f240 121d 	movw	r2, #285	@ 0x11d
 80028b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80028b8:	4b24      	ldr	r3, [pc, #144]	@ (800294c <MX_LTDC_Init+0xfc>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80028c0:	4b22      	ldr	r3, [pc, #136]	@ (800294c <MX_LTDC_Init+0xfc>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80028c8:	4b20      	ldr	r3, [pc, #128]	@ (800294c <MX_LTDC_Init+0xfc>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80028d0:	481e      	ldr	r0, [pc, #120]	@ (800294c <MX_LTDC_Init+0xfc>)
 80028d2:	f007 fcbe 	bl	800a252 <HAL_LTDC_Init>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80028dc:	f001 fbec 	bl	80040b8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80028e4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80028e8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80028ee:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80028f2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80028f4:	2302      	movs	r3, #2
 80028f6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80028f8:	23ff      	movs	r3, #255	@ 0xff
 80028fa:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002900:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002904:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002906:	2307      	movs	r3, #7
 8002908:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800290a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800290e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8002910:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002914:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8002916:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800291a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800291c:	2300      	movs	r3, #0
 800291e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002922:	2300      	movs	r3, #0
 8002924:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800292e:	1d3b      	adds	r3, r7, #4
 8002930:	2200      	movs	r2, #0
 8002932:	4619      	mov	r1, r3
 8002934:	4805      	ldr	r0, [pc, #20]	@ (800294c <MX_LTDC_Init+0xfc>)
 8002936:	f007 fdeb 	bl	800a510 <HAL_LTDC_ConfigLayer>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8002940:	f001 fbba 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002944:	bf00      	nop
 8002946:	3738      	adds	r7, #56	@ 0x38
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20001b74 	.word	0x20001b74
 8002950:	40016800 	.word	0x40016800

08002954 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002958:	4b12      	ldr	r3, [pc, #72]	@ (80029a4 <MX_QUADSPI_Init+0x50>)
 800295a:	4a13      	ldr	r2, [pc, #76]	@ (80029a8 <MX_QUADSPI_Init+0x54>)
 800295c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800295e:	4b11      	ldr	r3, [pc, #68]	@ (80029a4 <MX_QUADSPI_Init+0x50>)
 8002960:	2201      	movs	r2, #1
 8002962:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8002964:	4b0f      	ldr	r3, [pc, #60]	@ (80029a4 <MX_QUADSPI_Init+0x50>)
 8002966:	2204      	movs	r2, #4
 8002968:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800296a:	4b0e      	ldr	r3, [pc, #56]	@ (80029a4 <MX_QUADSPI_Init+0x50>)
 800296c:	2210      	movs	r2, #16
 800296e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8002970:	4b0c      	ldr	r3, [pc, #48]	@ (80029a4 <MX_QUADSPI_Init+0x50>)
 8002972:	2218      	movs	r2, #24
 8002974:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8002976:	4b0b      	ldr	r3, [pc, #44]	@ (80029a4 <MX_QUADSPI_Init+0x50>)
 8002978:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 800297c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800297e:	4b09      	ldr	r3, [pc, #36]	@ (80029a4 <MX_QUADSPI_Init+0x50>)
 8002980:	2200      	movs	r2, #0
 8002982:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8002984:	4b07      	ldr	r3, [pc, #28]	@ (80029a4 <MX_QUADSPI_Init+0x50>)
 8002986:	2200      	movs	r2, #0
 8002988:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800298a:	4b06      	ldr	r3, [pc, #24]	@ (80029a4 <MX_QUADSPI_Init+0x50>)
 800298c:	2200      	movs	r2, #0
 800298e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002990:	4804      	ldr	r0, [pc, #16]	@ (80029a4 <MX_QUADSPI_Init+0x50>)
 8002992:	f007 ffd1 	bl	800a938 <HAL_QSPI_Init>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 800299c:	f001 fb8c 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80029a0:	bf00      	nop
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	20001c1c 	.word	0x20001c1c
 80029a8:	a0001000 	.word	0xa0001000

080029ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b090      	sub	sp, #64	@ 0x40
 80029b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80029b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	605a      	str	r2, [r3, #4]
 80029bc:	609a      	str	r2, [r3, #8]
 80029be:	60da      	str	r2, [r3, #12]
 80029c0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80029c2:	2300      	movs	r3, #0
 80029c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80029c6:	463b      	mov	r3, r7
 80029c8:	2228      	movs	r2, #40	@ 0x28
 80029ca:	2100      	movs	r1, #0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f015 f89b 	bl	8017b08 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80029d2:	4b46      	ldr	r3, [pc, #280]	@ (8002aec <MX_RTC_Init+0x140>)
 80029d4:	4a46      	ldr	r2, [pc, #280]	@ (8002af0 <MX_RTC_Init+0x144>)
 80029d6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80029d8:	4b44      	ldr	r3, [pc, #272]	@ (8002aec <MX_RTC_Init+0x140>)
 80029da:	2200      	movs	r2, #0
 80029dc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80029de:	4b43      	ldr	r3, [pc, #268]	@ (8002aec <MX_RTC_Init+0x140>)
 80029e0:	227f      	movs	r2, #127	@ 0x7f
 80029e2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80029e4:	4b41      	ldr	r3, [pc, #260]	@ (8002aec <MX_RTC_Init+0x140>)
 80029e6:	22ff      	movs	r2, #255	@ 0xff
 80029e8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80029ea:	4b40      	ldr	r3, [pc, #256]	@ (8002aec <MX_RTC_Init+0x140>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80029f0:	4b3e      	ldr	r3, [pc, #248]	@ (8002aec <MX_RTC_Init+0x140>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80029f6:	4b3d      	ldr	r3, [pc, #244]	@ (8002aec <MX_RTC_Init+0x140>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80029fc:	483b      	ldr	r0, [pc, #236]	@ (8002aec <MX_RTC_Init+0x140>)
 80029fe:	f009 fa49 	bl	800be94 <HAL_RTC_Init>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002a08:	f001 fb56 	bl	80040b8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002a22:	2300      	movs	r3, #0
 8002a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002a26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	482f      	ldr	r0, [pc, #188]	@ (8002aec <MX_RTC_Init+0x140>)
 8002a30:	f009 fab2 	bl	800bf98 <HAL_RTC_SetTime>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002a3a:	f001 fb3d 	bl	80040b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002a44:	2301      	movs	r3, #1
 8002a46:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002a56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4823      	ldr	r0, [pc, #140]	@ (8002aec <MX_RTC_Init+0x140>)
 8002a60:	f009 fb34 	bl	800c0cc <HAL_RTC_SetDate>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8002a6a:	f001 fb25 	bl	80040b8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002a72:	2300      	movs	r3, #0
 8002a74:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002a76:	2300      	movs	r3, #0
 8002a78:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002a92:	2301      	movs	r3, #1
 8002a94:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002a98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002a9e:	463b      	mov	r3, r7
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4811      	ldr	r0, [pc, #68]	@ (8002aec <MX_RTC_Init+0x140>)
 8002aa6:	f009 fb95 	bl	800c1d4 <HAL_RTC_SetAlarm>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002ab0:	f001 fb02 	bl	80040b8 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8002ab4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002aba:	463b      	mov	r3, r7
 8002abc:	2201      	movs	r2, #1
 8002abe:	4619      	mov	r1, r3
 8002ac0:	480a      	ldr	r0, [pc, #40]	@ (8002aec <MX_RTC_Init+0x140>)
 8002ac2:	f009 fb87 	bl	800c1d4 <HAL_RTC_SetAlarm>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8002acc:	f001 faf4 	bl	80040b8 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4805      	ldr	r0, [pc, #20]	@ (8002aec <MX_RTC_Init+0x140>)
 8002ad6:	f009 fd47 	bl	800c568 <HAL_RTCEx_SetTimeStamp>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8002ae0:	f001 faea 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002ae4:	bf00      	nop
 8002ae6:	3740      	adds	r7, #64	@ 0x40
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20001c68 	.word	0x20001c68
 8002af0:	40002800 	.word	0x40002800

08002af4 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8002af8:	4b4d      	ldr	r3, [pc, #308]	@ (8002c30 <MX_SAI2_Init+0x13c>)
 8002afa:	4a4e      	ldr	r2, [pc, #312]	@ (8002c34 <MX_SAI2_Init+0x140>)
 8002afc:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8002afe:	4b4c      	ldr	r3, [pc, #304]	@ (8002c30 <MX_SAI2_Init+0x13c>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8002b04:	4b4a      	ldr	r3, [pc, #296]	@ (8002c30 <MX_SAI2_Init+0x13c>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8002b0a:	4b49      	ldr	r3, [pc, #292]	@ (8002c30 <MX_SAI2_Init+0x13c>)
 8002b0c:	2240      	movs	r2, #64	@ 0x40
 8002b0e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002b10:	4b47      	ldr	r3, [pc, #284]	@ (8002c30 <MX_SAI2_Init+0x13c>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002b16:	4b46      	ldr	r3, [pc, #280]	@ (8002c30 <MX_SAI2_Init+0x13c>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8002b1c:	4b44      	ldr	r3, [pc, #272]	@ (8002c30 <MX_SAI2_Init+0x13c>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002b22:	4b43      	ldr	r3, [pc, #268]	@ (8002c30 <MX_SAI2_Init+0x13c>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002b28:	4b41      	ldr	r3, [pc, #260]	@ (8002c30 <MX_SAI2_Init+0x13c>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002b2e:	4b40      	ldr	r3, [pc, #256]	@ (8002c30 <MX_SAI2_Init+0x13c>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002b34:	4b3e      	ldr	r3, [pc, #248]	@ (8002c30 <MX_SAI2_Init+0x13c>)
 8002b36:	4a40      	ldr	r2, [pc, #256]	@ (8002c38 <MX_SAI2_Init+0x144>)
 8002b38:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002b3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c30 <MX_SAI2_Init+0x13c>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002b40:	4b3b      	ldr	r3, [pc, #236]	@ (8002c30 <MX_SAI2_Init+0x13c>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002b46:	4b3a      	ldr	r3, [pc, #232]	@ (8002c30 <MX_SAI2_Init+0x13c>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002b4c:	4b38      	ldr	r3, [pc, #224]	@ (8002c30 <MX_SAI2_Init+0x13c>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8002b52:	4b37      	ldr	r3, [pc, #220]	@ (8002c30 <MX_SAI2_Init+0x13c>)
 8002b54:	2208      	movs	r2, #8
 8002b56:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8002b58:	4b35      	ldr	r3, [pc, #212]	@ (8002c30 <MX_SAI2_Init+0x13c>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002b5e:	4b34      	ldr	r3, [pc, #208]	@ (8002c30 <MX_SAI2_Init+0x13c>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002b64:	4b32      	ldr	r3, [pc, #200]	@ (8002c30 <MX_SAI2_Init+0x13c>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002b6a:	4b31      	ldr	r3, [pc, #196]	@ (8002c30 <MX_SAI2_Init+0x13c>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8002b70:	4b2f      	ldr	r3, [pc, #188]	@ (8002c30 <MX_SAI2_Init+0x13c>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002b76:	4b2e      	ldr	r3, [pc, #184]	@ (8002c30 <MX_SAI2_Init+0x13c>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8002b7c:	4b2c      	ldr	r3, [pc, #176]	@ (8002c30 <MX_SAI2_Init+0x13c>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8002b82:	4b2b      	ldr	r3, [pc, #172]	@ (8002c30 <MX_SAI2_Init+0x13c>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8002b88:	4829      	ldr	r0, [pc, #164]	@ (8002c30 <MX_SAI2_Init+0x13c>)
 8002b8a:	f009 fd55 	bl	800c638 <HAL_SAI_Init>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8002b94:	f001 fa90 	bl	80040b8 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8002b98:	4b28      	ldr	r3, [pc, #160]	@ (8002c3c <MX_SAI2_Init+0x148>)
 8002b9a:	4a29      	ldr	r2, [pc, #164]	@ (8002c40 <MX_SAI2_Init+0x14c>)
 8002b9c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8002b9e:	4b27      	ldr	r3, [pc, #156]	@ (8002c3c <MX_SAI2_Init+0x148>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8002ba4:	4b25      	ldr	r3, [pc, #148]	@ (8002c3c <MX_SAI2_Init+0x148>)
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8002baa:	4b24      	ldr	r3, [pc, #144]	@ (8002c3c <MX_SAI2_Init+0x148>)
 8002bac:	2240      	movs	r2, #64	@ 0x40
 8002bae:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002bb0:	4b22      	ldr	r3, [pc, #136]	@ (8002c3c <MX_SAI2_Init+0x148>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002bb6:	4b21      	ldr	r3, [pc, #132]	@ (8002c3c <MX_SAI2_Init+0x148>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8002bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8002c3c <MX_SAI2_Init+0x148>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c3c <MX_SAI2_Init+0x148>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8002c3c <MX_SAI2_Init+0x148>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002bce:	4b1b      	ldr	r3, [pc, #108]	@ (8002c3c <MX_SAI2_Init+0x148>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002bd4:	4b19      	ldr	r3, [pc, #100]	@ (8002c3c <MX_SAI2_Init+0x148>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002bda:	4b18      	ldr	r3, [pc, #96]	@ (8002c3c <MX_SAI2_Init+0x148>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002be0:	4b16      	ldr	r3, [pc, #88]	@ (8002c3c <MX_SAI2_Init+0x148>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8002be6:	4b15      	ldr	r3, [pc, #84]	@ (8002c3c <MX_SAI2_Init+0x148>)
 8002be8:	2208      	movs	r2, #8
 8002bea:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8002bec:	4b13      	ldr	r3, [pc, #76]	@ (8002c3c <MX_SAI2_Init+0x148>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002bf2:	4b12      	ldr	r3, [pc, #72]	@ (8002c3c <MX_SAI2_Init+0x148>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002bf8:	4b10      	ldr	r3, [pc, #64]	@ (8002c3c <MX_SAI2_Init+0x148>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8002c3c <MX_SAI2_Init+0x148>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8002c04:	4b0d      	ldr	r3, [pc, #52]	@ (8002c3c <MX_SAI2_Init+0x148>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c3c <MX_SAI2_Init+0x148>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8002c10:	4b0a      	ldr	r3, [pc, #40]	@ (8002c3c <MX_SAI2_Init+0x148>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8002c16:	4b09      	ldr	r3, [pc, #36]	@ (8002c3c <MX_SAI2_Init+0x148>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8002c1c:	4807      	ldr	r0, [pc, #28]	@ (8002c3c <MX_SAI2_Init+0x148>)
 8002c1e:	f009 fd0b 	bl	800c638 <HAL_SAI_Init>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8002c28:	f001 fa46 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8002c2c:	bf00      	nop
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	20001c88 	.word	0x20001c88
 8002c34:	40015c04 	.word	0x40015c04
 8002c38:	0002ee00 	.word	0x0002ee00
 8002c3c:	20001d0c 	.word	0x20001d0c
 8002c40:	40015c24 	.word	0x40015c24

08002c44 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002c4a:	4b13      	ldr	r3, [pc, #76]	@ (8002c98 <MX_SDMMC1_SD_Init+0x54>)
 8002c4c:	4a13      	ldr	r2, [pc, #76]	@ (8002c9c <MX_SDMMC1_SD_Init+0x58>)
 8002c4e:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002c50:	4b11      	ldr	r3, [pc, #68]	@ (8002c98 <MX_SDMMC1_SD_Init+0x54>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002c56:	4b10      	ldr	r3, [pc, #64]	@ (8002c98 <MX_SDMMC1_SD_Init+0x54>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c98 <MX_SDMMC1_SD_Init+0x54>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;  // ST 커뮤니티 가이드: 1-bit 모드로 변경
 8002c62:	4b0d      	ldr	r3, [pc, #52]	@ (8002c98 <MX_SDMMC1_SD_Init+0x54>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;  // 하드웨어 플로우 컨트롤 활성화 (안정성 향상)
 8002c68:	4b0b      	ldr	r3, [pc, #44]	@ (8002c98 <MX_SDMMC1_SD_Init+0x54>)
 8002c6a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c6e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 8;  // 클럭 분주비 증가 (2→8, STM32F7 안정화 권장값)
 8002c70:	4b09      	ldr	r3, [pc, #36]	@ (8002c98 <MX_SDMMC1_SD_Init+0x54>)
 8002c72:	2208      	movs	r2, #8
 8002c74:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  
  // Initialize SD card with HAL
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8002c76:	4808      	ldr	r0, [pc, #32]	@ (8002c98 <MX_SDMMC1_SD_Init+0x54>)
 8002c78:	f009 fe94 	bl	800c9a4 <HAL_SD_Init>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <MX_SDMMC1_SD_Init+0x42>
  {
    Error_Handler();
 8002c82:	f001 fa19 	bl	80040b8 <Error_Handler>
  }
  
  // BSP 초기화도 호출 (FatFs 호환성을 위해)
  uint8_t bsp_result = BSP_SD_Init();
 8002c86:	f00e ff91 	bl	8011bac <BSP_SD_Init>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	71fb      	strb	r3, [r7, #7]
    // Error_Handler() 호출하지 않음
  }

  /* USER CODE END SDMMC1_Init 2 */

}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20001d90 	.word	0x20001d90
 8002c9c:	40012c00 	.word	0x40012c00

08002ca0 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8002ca4:	4b15      	ldr	r3, [pc, #84]	@ (8002cfc <MX_SPDIFRX_Init+0x5c>)
 8002ca6:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002caa:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8002cac:	4b13      	ldr	r3, [pc, #76]	@ (8002cfc <MX_SPDIFRX_Init+0x5c>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8002cb2:	4b12      	ldr	r3, [pc, #72]	@ (8002cfc <MX_SPDIFRX_Init+0x5c>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8002cb8:	4b10      	ldr	r3, [pc, #64]	@ (8002cfc <MX_SPDIFRX_Init+0x5c>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8002cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8002cfc <MX_SPDIFRX_Init+0x5c>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8002cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8002cfc <MX_SPDIFRX_Init+0x5c>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8002cca:	4b0c      	ldr	r3, [pc, #48]	@ (8002cfc <MX_SPDIFRX_Init+0x5c>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8002cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8002cfc <MX_SPDIFRX_Init+0x5c>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8002cd6:	4b09      	ldr	r3, [pc, #36]	@ (8002cfc <MX_SPDIFRX_Init+0x5c>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8002cdc:	4b07      	ldr	r3, [pc, #28]	@ (8002cfc <MX_SPDIFRX_Init+0x5c>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8002ce2:	4b06      	ldr	r3, [pc, #24]	@ (8002cfc <MX_SPDIFRX_Init+0x5c>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8002ce8:	4804      	ldr	r0, [pc, #16]	@ (8002cfc <MX_SPDIFRX_Init+0x5c>)
 8002cea:	f00b f81b 	bl	800dd24 <HAL_SPDIFRX_Init>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8002cf4:	f001 f9e0 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8002cf8:	bf00      	nop
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	20001e14 	.word	0x20001e14

08002d00 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002d04:	4b1b      	ldr	r3, [pc, #108]	@ (8002d74 <MX_SPI2_Init+0x74>)
 8002d06:	4a1c      	ldr	r2, [pc, #112]	@ (8002d78 <MX_SPI2_Init+0x78>)
 8002d08:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002d74 <MX_SPI2_Init+0x74>)
 8002d0c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002d10:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002d12:	4b18      	ldr	r3, [pc, #96]	@ (8002d74 <MX_SPI2_Init+0x74>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002d18:	4b16      	ldr	r3, [pc, #88]	@ (8002d74 <MX_SPI2_Init+0x74>)
 8002d1a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002d1e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d20:	4b14      	ldr	r3, [pc, #80]	@ (8002d74 <MX_SPI2_Init+0x74>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d26:	4b13      	ldr	r3, [pc, #76]	@ (8002d74 <MX_SPI2_Init+0x74>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002d2c:	4b11      	ldr	r3, [pc, #68]	@ (8002d74 <MX_SPI2_Init+0x74>)
 8002d2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d32:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d34:	4b0f      	ldr	r3, [pc, #60]	@ (8002d74 <MX_SPI2_Init+0x74>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d74 <MX_SPI2_Init+0x74>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d40:	4b0c      	ldr	r3, [pc, #48]	@ (8002d74 <MX_SPI2_Init+0x74>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d46:	4b0b      	ldr	r3, [pc, #44]	@ (8002d74 <MX_SPI2_Init+0x74>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002d4c:	4b09      	ldr	r3, [pc, #36]	@ (8002d74 <MX_SPI2_Init+0x74>)
 8002d4e:	2207      	movs	r2, #7
 8002d50:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d52:	4b08      	ldr	r3, [pc, #32]	@ (8002d74 <MX_SPI2_Init+0x74>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002d58:	4b06      	ldr	r3, [pc, #24]	@ (8002d74 <MX_SPI2_Init+0x74>)
 8002d5a:	2208      	movs	r2, #8
 8002d5c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002d5e:	4805      	ldr	r0, [pc, #20]	@ (8002d74 <MX_SPI2_Init+0x74>)
 8002d60:	f00b f83c 	bl	800dddc <HAL_SPI_Init>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002d6a:	f001 f9a5 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002d6e:	bf00      	nop
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20001e60 	.word	0x20001e60
 8002d78:	40003800 	.word	0x40003800

08002d7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b09a      	sub	sp, #104	@ 0x68
 8002d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d82:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	605a      	str	r2, [r3, #4]
 8002d8c:	609a      	str	r2, [r3, #8]
 8002d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d90:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d9c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	611a      	str	r2, [r3, #16]
 8002dac:	615a      	str	r2, [r3, #20]
 8002dae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002db0:	1d3b      	adds	r3, r7, #4
 8002db2:	222c      	movs	r2, #44	@ 0x2c
 8002db4:	2100      	movs	r1, #0
 8002db6:	4618      	mov	r0, r3
 8002db8:	f014 fea6 	bl	8017b08 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002dbc:	4b43      	ldr	r3, [pc, #268]	@ (8002ecc <MX_TIM1_Init+0x150>)
 8002dbe:	4a44      	ldr	r2, [pc, #272]	@ (8002ed0 <MX_TIM1_Init+0x154>)
 8002dc0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002dc2:	4b42      	ldr	r3, [pc, #264]	@ (8002ecc <MX_TIM1_Init+0x150>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dc8:	4b40      	ldr	r3, [pc, #256]	@ (8002ecc <MX_TIM1_Init+0x150>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002dce:	4b3f      	ldr	r3, [pc, #252]	@ (8002ecc <MX_TIM1_Init+0x150>)
 8002dd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002dd4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dd6:	4b3d      	ldr	r3, [pc, #244]	@ (8002ecc <MX_TIM1_Init+0x150>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ddc:	4b3b      	ldr	r3, [pc, #236]	@ (8002ecc <MX_TIM1_Init+0x150>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002de2:	4b3a      	ldr	r3, [pc, #232]	@ (8002ecc <MX_TIM1_Init+0x150>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002de8:	4838      	ldr	r0, [pc, #224]	@ (8002ecc <MX_TIM1_Init+0x150>)
 8002dea:	f00b f8a2 	bl	800df32 <HAL_TIM_Base_Init>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002df4:	f001 f960 	bl	80040b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002df8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dfc:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002dfe:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002e02:	4619      	mov	r1, r3
 8002e04:	4831      	ldr	r0, [pc, #196]	@ (8002ecc <MX_TIM1_Init+0x150>)
 8002e06:	f00b fbd5 	bl	800e5b4 <HAL_TIM_ConfigClockSource>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002e10:	f001 f952 	bl	80040b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002e14:	482d      	ldr	r0, [pc, #180]	@ (8002ecc <MX_TIM1_Init+0x150>)
 8002e16:	f00b f95b 	bl	800e0d0 <HAL_TIM_PWM_Init>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002e20:	f001 f94a 	bl	80040b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e24:	2300      	movs	r3, #0
 8002e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e30:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002e34:	4619      	mov	r1, r3
 8002e36:	4825      	ldr	r0, [pc, #148]	@ (8002ecc <MX_TIM1_Init+0x150>)
 8002e38:	f00c f84c 	bl	800eed4 <HAL_TIMEx_MasterConfigSynchronization>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002e42:	f001 f939 	bl	80040b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e46:	2360      	movs	r3, #96	@ 0x60
 8002e48:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e52:	2300      	movs	r3, #0
 8002e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e56:	2300      	movs	r3, #0
 8002e58:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e62:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002e66:	2200      	movs	r2, #0
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4818      	ldr	r0, [pc, #96]	@ (8002ecc <MX_TIM1_Init+0x150>)
 8002e6c:	f00b fa8e 	bl	800e38c <HAL_TIM_PWM_ConfigChannel>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002e76:	f001 f91f 	bl	80040b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e92:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002e9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002eaa:	1d3b      	adds	r3, r7, #4
 8002eac:	4619      	mov	r1, r3
 8002eae:	4807      	ldr	r0, [pc, #28]	@ (8002ecc <MX_TIM1_Init+0x150>)
 8002eb0:	f00c f89e 	bl	800eff0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002eba:	f001 f8fd 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002ebe:	4803      	ldr	r0, [pc, #12]	@ (8002ecc <MX_TIM1_Init+0x150>)
 8002ec0:	f001 ff6e 	bl	8004da0 <HAL_TIM_MspPostInit>

}
 8002ec4:	bf00      	nop
 8002ec6:	3768      	adds	r7, #104	@ 0x68
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20001ec4 	.word	0x20001ec4
 8002ed0:	40010000 	.word	0x40010000

08002ed4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08e      	sub	sp, #56	@ 0x38
 8002ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	605a      	str	r2, [r3, #4]
 8002ee4:	609a      	str	r2, [r3, #8]
 8002ee6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ee8:	f107 031c 	add.w	r3, r7, #28
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ef4:	463b      	mov	r3, r7
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	605a      	str	r2, [r3, #4]
 8002efc:	609a      	str	r2, [r3, #8]
 8002efe:	60da      	str	r2, [r3, #12]
 8002f00:	611a      	str	r2, [r3, #16]
 8002f02:	615a      	str	r2, [r3, #20]
 8002f04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f06:	4b2d      	ldr	r3, [pc, #180]	@ (8002fbc <MX_TIM2_Init+0xe8>)
 8002f08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002f0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002f0e:	4b2b      	ldr	r3, [pc, #172]	@ (8002fbc <MX_TIM2_Init+0xe8>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f14:	4b29      	ldr	r3, [pc, #164]	@ (8002fbc <MX_TIM2_Init+0xe8>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002f1a:	4b28      	ldr	r3, [pc, #160]	@ (8002fbc <MX_TIM2_Init+0xe8>)
 8002f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f22:	4b26      	ldr	r3, [pc, #152]	@ (8002fbc <MX_TIM2_Init+0xe8>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f28:	4b24      	ldr	r3, [pc, #144]	@ (8002fbc <MX_TIM2_Init+0xe8>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f2e:	4823      	ldr	r0, [pc, #140]	@ (8002fbc <MX_TIM2_Init+0xe8>)
 8002f30:	f00a ffff 	bl	800df32 <HAL_TIM_Base_Init>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002f3a:	f001 f8bd 	bl	80040b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f42:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f44:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f48:	4619      	mov	r1, r3
 8002f4a:	481c      	ldr	r0, [pc, #112]	@ (8002fbc <MX_TIM2_Init+0xe8>)
 8002f4c:	f00b fb32 	bl	800e5b4 <HAL_TIM_ConfigClockSource>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002f56:	f001 f8af 	bl	80040b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002f5a:	4818      	ldr	r0, [pc, #96]	@ (8002fbc <MX_TIM2_Init+0xe8>)
 8002f5c:	f00b f8b8 	bl	800e0d0 <HAL_TIM_PWM_Init>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002f66:	f001 f8a7 	bl	80040b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f72:	f107 031c 	add.w	r3, r7, #28
 8002f76:	4619      	mov	r1, r3
 8002f78:	4810      	ldr	r0, [pc, #64]	@ (8002fbc <MX_TIM2_Init+0xe8>)
 8002f7a:	f00b ffab 	bl	800eed4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002f84:	f001 f898 	bl	80040b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f88:	2360      	movs	r3, #96	@ 0x60
 8002f8a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f94:	2300      	movs	r3, #0
 8002f96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f98:	463b      	mov	r3, r7
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4807      	ldr	r0, [pc, #28]	@ (8002fbc <MX_TIM2_Init+0xe8>)
 8002fa0:	f00b f9f4 	bl	800e38c <HAL_TIM_PWM_ConfigChannel>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002faa:	f001 f885 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002fae:	4803      	ldr	r0, [pc, #12]	@ (8002fbc <MX_TIM2_Init+0xe8>)
 8002fb0:	f001 fef6 	bl	8004da0 <HAL_TIM_MspPostInit>

}
 8002fb4:	bf00      	nop
 8002fb6:	3738      	adds	r7, #56	@ 0x38
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	20001f10 	.word	0x20001f10

08002fc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08e      	sub	sp, #56	@ 0x38
 8002fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	605a      	str	r2, [r3, #4]
 8002fd0:	609a      	str	r2, [r3, #8]
 8002fd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fd4:	f107 031c 	add.w	r3, r7, #28
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fe0:	463b      	mov	r3, r7
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	605a      	str	r2, [r3, #4]
 8002fe8:	609a      	str	r2, [r3, #8]
 8002fea:	60da      	str	r2, [r3, #12]
 8002fec:	611a      	str	r2, [r3, #16]
 8002fee:	615a      	str	r2, [r3, #20]
 8002ff0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ff2:	4b2d      	ldr	r3, [pc, #180]	@ (80030a8 <MX_TIM3_Init+0xe8>)
 8002ff4:	4a2d      	ldr	r2, [pc, #180]	@ (80030ac <MX_TIM3_Init+0xec>)
 8002ff6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80030a8 <MX_TIM3_Init+0xe8>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ffe:	4b2a      	ldr	r3, [pc, #168]	@ (80030a8 <MX_TIM3_Init+0xe8>)
 8003000:	2200      	movs	r2, #0
 8003002:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003004:	4b28      	ldr	r3, [pc, #160]	@ (80030a8 <MX_TIM3_Init+0xe8>)
 8003006:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800300a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800300c:	4b26      	ldr	r3, [pc, #152]	@ (80030a8 <MX_TIM3_Init+0xe8>)
 800300e:	2200      	movs	r2, #0
 8003010:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003012:	4b25      	ldr	r3, [pc, #148]	@ (80030a8 <MX_TIM3_Init+0xe8>)
 8003014:	2200      	movs	r2, #0
 8003016:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003018:	4823      	ldr	r0, [pc, #140]	@ (80030a8 <MX_TIM3_Init+0xe8>)
 800301a:	f00a ff8a 	bl	800df32 <HAL_TIM_Base_Init>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003024:	f001 f848 	bl	80040b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003028:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800302c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800302e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003032:	4619      	mov	r1, r3
 8003034:	481c      	ldr	r0, [pc, #112]	@ (80030a8 <MX_TIM3_Init+0xe8>)
 8003036:	f00b fabd 	bl	800e5b4 <HAL_TIM_ConfigClockSource>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003040:	f001 f83a 	bl	80040b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003044:	4818      	ldr	r0, [pc, #96]	@ (80030a8 <MX_TIM3_Init+0xe8>)
 8003046:	f00b f843 	bl	800e0d0 <HAL_TIM_PWM_Init>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003050:	f001 f832 	bl	80040b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003054:	2300      	movs	r3, #0
 8003056:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003058:	2300      	movs	r3, #0
 800305a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800305c:	f107 031c 	add.w	r3, r7, #28
 8003060:	4619      	mov	r1, r3
 8003062:	4811      	ldr	r0, [pc, #68]	@ (80030a8 <MX_TIM3_Init+0xe8>)
 8003064:	f00b ff36 	bl	800eed4 <HAL_TIMEx_MasterConfigSynchronization>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800306e:	f001 f823 	bl	80040b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003072:	2360      	movs	r3, #96	@ 0x60
 8003074:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003076:	2300      	movs	r3, #0
 8003078:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800307a:	2300      	movs	r3, #0
 800307c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800307e:	2300      	movs	r3, #0
 8003080:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003082:	463b      	mov	r3, r7
 8003084:	2200      	movs	r2, #0
 8003086:	4619      	mov	r1, r3
 8003088:	4807      	ldr	r0, [pc, #28]	@ (80030a8 <MX_TIM3_Init+0xe8>)
 800308a:	f00b f97f 	bl	800e38c <HAL_TIM_PWM_ConfigChannel>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003094:	f001 f810 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003098:	4803      	ldr	r0, [pc, #12]	@ (80030a8 <MX_TIM3_Init+0xe8>)
 800309a:	f001 fe81 	bl	8004da0 <HAL_TIM_MspPostInit>

}
 800309e:	bf00      	nop
 80030a0:	3738      	adds	r7, #56	@ 0x38
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20001f5c 	.word	0x20001f5c
 80030ac:	40000400 	.word	0x40000400

080030b0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08e      	sub	sp, #56	@ 0x38
 80030b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	605a      	str	r2, [r3, #4]
 80030c0:	609a      	str	r2, [r3, #8]
 80030c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030c4:	f107 031c 	add.w	r3, r7, #28
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030d0:	463b      	mov	r3, r7
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	605a      	str	r2, [r3, #4]
 80030d8:	609a      	str	r2, [r3, #8]
 80030da:	60da      	str	r2, [r3, #12]
 80030dc:	611a      	str	r2, [r3, #16]
 80030de:	615a      	str	r2, [r3, #20]
 80030e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80030e2:	4b2d      	ldr	r3, [pc, #180]	@ (8003198 <MX_TIM5_Init+0xe8>)
 80030e4:	4a2d      	ldr	r2, [pc, #180]	@ (800319c <MX_TIM5_Init+0xec>)
 80030e6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80030e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003198 <MX_TIM5_Init+0xe8>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030ee:	4b2a      	ldr	r3, [pc, #168]	@ (8003198 <MX_TIM5_Init+0xe8>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80030f4:	4b28      	ldr	r3, [pc, #160]	@ (8003198 <MX_TIM5_Init+0xe8>)
 80030f6:	f04f 32ff 	mov.w	r2, #4294967295
 80030fa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030fc:	4b26      	ldr	r3, [pc, #152]	@ (8003198 <MX_TIM5_Init+0xe8>)
 80030fe:	2200      	movs	r2, #0
 8003100:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003102:	4b25      	ldr	r3, [pc, #148]	@ (8003198 <MX_TIM5_Init+0xe8>)
 8003104:	2200      	movs	r2, #0
 8003106:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003108:	4823      	ldr	r0, [pc, #140]	@ (8003198 <MX_TIM5_Init+0xe8>)
 800310a:	f00a ff12 	bl	800df32 <HAL_TIM_Base_Init>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8003114:	f000 ffd0 	bl	80040b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003118:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800311c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800311e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003122:	4619      	mov	r1, r3
 8003124:	481c      	ldr	r0, [pc, #112]	@ (8003198 <MX_TIM5_Init+0xe8>)
 8003126:	f00b fa45 	bl	800e5b4 <HAL_TIM_ConfigClockSource>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8003130:	f000 ffc2 	bl	80040b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003134:	4818      	ldr	r0, [pc, #96]	@ (8003198 <MX_TIM5_Init+0xe8>)
 8003136:	f00a ffcb 	bl	800e0d0 <HAL_TIM_PWM_Init>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8003140:	f000 ffba 	bl	80040b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003144:	2300      	movs	r3, #0
 8003146:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003148:	2300      	movs	r3, #0
 800314a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800314c:	f107 031c 	add.w	r3, r7, #28
 8003150:	4619      	mov	r1, r3
 8003152:	4811      	ldr	r0, [pc, #68]	@ (8003198 <MX_TIM5_Init+0xe8>)
 8003154:	f00b febe 	bl	800eed4 <HAL_TIMEx_MasterConfigSynchronization>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800315e:	f000 ffab 	bl	80040b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003162:	2360      	movs	r3, #96	@ 0x60
 8003164:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003166:	2300      	movs	r3, #0
 8003168:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800316a:	2300      	movs	r3, #0
 800316c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800316e:	2300      	movs	r3, #0
 8003170:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003172:	463b      	mov	r3, r7
 8003174:	220c      	movs	r2, #12
 8003176:	4619      	mov	r1, r3
 8003178:	4807      	ldr	r0, [pc, #28]	@ (8003198 <MX_TIM5_Init+0xe8>)
 800317a:	f00b f907 	bl	800e38c <HAL_TIM_PWM_ConfigChannel>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8003184:	f000 ff98 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003188:	4803      	ldr	r0, [pc, #12]	@ (8003198 <MX_TIM5_Init+0xe8>)
 800318a:	f001 fe09 	bl	8004da0 <HAL_TIM_MspPostInit>

}
 800318e:	bf00      	nop
 8003190:	3738      	adds	r7, #56	@ 0x38
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20001fa8 	.word	0x20001fa8
 800319c:	40000c00 	.word	0x40000c00

080031a0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031a6:	f107 0310 	add.w	r3, r7, #16
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	605a      	str	r2, [r3, #4]
 80031b0:	609a      	str	r2, [r3, #8]
 80031b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031b4:	1d3b      	adds	r3, r7, #4
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	605a      	str	r2, [r3, #4]
 80031bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80031be:	4b20      	ldr	r3, [pc, #128]	@ (8003240 <MX_TIM8_Init+0xa0>)
 80031c0:	4a20      	ldr	r2, [pc, #128]	@ (8003244 <MX_TIM8_Init+0xa4>)
 80031c2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80031c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003240 <MX_TIM8_Init+0xa0>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003240 <MX_TIM8_Init+0xa0>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80031d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003240 <MX_TIM8_Init+0xa0>)
 80031d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80031d6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031d8:	4b19      	ldr	r3, [pc, #100]	@ (8003240 <MX_TIM8_Init+0xa0>)
 80031da:	2200      	movs	r2, #0
 80031dc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80031de:	4b18      	ldr	r3, [pc, #96]	@ (8003240 <MX_TIM8_Init+0xa0>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031e4:	4b16      	ldr	r3, [pc, #88]	@ (8003240 <MX_TIM8_Init+0xa0>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80031ea:	4815      	ldr	r0, [pc, #84]	@ (8003240 <MX_TIM8_Init+0xa0>)
 80031ec:	f00a fea1 	bl	800df32 <HAL_TIM_Base_Init>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80031f6:	f000 ff5f 	bl	80040b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003200:	f107 0310 	add.w	r3, r7, #16
 8003204:	4619      	mov	r1, r3
 8003206:	480e      	ldr	r0, [pc, #56]	@ (8003240 <MX_TIM8_Init+0xa0>)
 8003208:	f00b f9d4 	bl	800e5b4 <HAL_TIM_ConfigClockSource>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8003212:	f000 ff51 	bl	80040b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003216:	2300      	movs	r3, #0
 8003218:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800321e:	2300      	movs	r3, #0
 8003220:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003222:	1d3b      	adds	r3, r7, #4
 8003224:	4619      	mov	r1, r3
 8003226:	4806      	ldr	r0, [pc, #24]	@ (8003240 <MX_TIM8_Init+0xa0>)
 8003228:	f00b fe54 	bl	800eed4 <HAL_TIMEx_MasterConfigSynchronization>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8003232:	f000 ff41 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003236:	bf00      	nop
 8003238:	3720      	adds	r7, #32
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20001ff4 	.word	0x20001ff4
 8003244:	40010400 	.word	0x40010400

08003248 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800324e:	1d3b      	adds	r3, r7, #4
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	605a      	str	r2, [r3, #4]
 8003256:	609a      	str	r2, [r3, #8]
 8003258:	60da      	str	r2, [r3, #12]
 800325a:	611a      	str	r2, [r3, #16]
 800325c:	615a      	str	r2, [r3, #20]
 800325e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003260:	4b1a      	ldr	r3, [pc, #104]	@ (80032cc <MX_TIM12_Init+0x84>)
 8003262:	4a1b      	ldr	r2, [pc, #108]	@ (80032d0 <MX_TIM12_Init+0x88>)
 8003264:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8003266:	4b19      	ldr	r3, [pc, #100]	@ (80032cc <MX_TIM12_Init+0x84>)
 8003268:	2200      	movs	r2, #0
 800326a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800326c:	4b17      	ldr	r3, [pc, #92]	@ (80032cc <MX_TIM12_Init+0x84>)
 800326e:	2200      	movs	r2, #0
 8003270:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8003272:	4b16      	ldr	r3, [pc, #88]	@ (80032cc <MX_TIM12_Init+0x84>)
 8003274:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003278:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800327a:	4b14      	ldr	r3, [pc, #80]	@ (80032cc <MX_TIM12_Init+0x84>)
 800327c:	2200      	movs	r2, #0
 800327e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003280:	4b12      	ldr	r3, [pc, #72]	@ (80032cc <MX_TIM12_Init+0x84>)
 8003282:	2200      	movs	r2, #0
 8003284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8003286:	4811      	ldr	r0, [pc, #68]	@ (80032cc <MX_TIM12_Init+0x84>)
 8003288:	f00a ff22 	bl	800e0d0 <HAL_TIM_PWM_Init>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8003292:	f000 ff11 	bl	80040b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003296:	2360      	movs	r3, #96	@ 0x60
 8003298:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800329a:	2300      	movs	r3, #0
 800329c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032a6:	1d3b      	adds	r3, r7, #4
 80032a8:	2200      	movs	r2, #0
 80032aa:	4619      	mov	r1, r3
 80032ac:	4807      	ldr	r0, [pc, #28]	@ (80032cc <MX_TIM12_Init+0x84>)
 80032ae:	f00b f86d 	bl	800e38c <HAL_TIM_PWM_ConfigChannel>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80032b8:	f000 fefe 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80032bc:	4803      	ldr	r0, [pc, #12]	@ (80032cc <MX_TIM12_Init+0x84>)
 80032be:	f001 fd6f 	bl	8004da0 <HAL_TIM_MspPostInit>

}
 80032c2:	bf00      	nop
 80032c4:	3720      	adds	r7, #32
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	20002040 	.word	0x20002040
 80032d0:	40001800 	.word	0x40001800

080032d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80032d8:	4b14      	ldr	r3, [pc, #80]	@ (800332c <MX_USART1_UART_Init+0x58>)
 80032da:	4a15      	ldr	r2, [pc, #84]	@ (8003330 <MX_USART1_UART_Init+0x5c>)
 80032dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80032de:	4b13      	ldr	r3, [pc, #76]	@ (800332c <MX_USART1_UART_Init+0x58>)
 80032e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80032e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80032e6:	4b11      	ldr	r3, [pc, #68]	@ (800332c <MX_USART1_UART_Init+0x58>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80032ec:	4b0f      	ldr	r3, [pc, #60]	@ (800332c <MX_USART1_UART_Init+0x58>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80032f2:	4b0e      	ldr	r3, [pc, #56]	@ (800332c <MX_USART1_UART_Init+0x58>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80032f8:	4b0c      	ldr	r3, [pc, #48]	@ (800332c <MX_USART1_UART_Init+0x58>)
 80032fa:	220c      	movs	r2, #12
 80032fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032fe:	4b0b      	ldr	r3, [pc, #44]	@ (800332c <MX_USART1_UART_Init+0x58>)
 8003300:	2200      	movs	r2, #0
 8003302:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003304:	4b09      	ldr	r3, [pc, #36]	@ (800332c <MX_USART1_UART_Init+0x58>)
 8003306:	2200      	movs	r2, #0
 8003308:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800330a:	4b08      	ldr	r3, [pc, #32]	@ (800332c <MX_USART1_UART_Init+0x58>)
 800330c:	2200      	movs	r2, #0
 800330e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003310:	4b06      	ldr	r3, [pc, #24]	@ (800332c <MX_USART1_UART_Init+0x58>)
 8003312:	2200      	movs	r2, #0
 8003314:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003316:	4805      	ldr	r0, [pc, #20]	@ (800332c <MX_USART1_UART_Init+0x58>)
 8003318:	f00b ff06 	bl	800f128 <HAL_UART_Init>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003322:	f000 fec9 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003326:	bf00      	nop
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	2000208c 	.word	0x2000208c
 8003330:	40011000 	.word	0x40011000

08003334 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003338:	4b14      	ldr	r3, [pc, #80]	@ (800338c <MX_USART6_UART_Init+0x58>)
 800333a:	4a15      	ldr	r2, [pc, #84]	@ (8003390 <MX_USART6_UART_Init+0x5c>)
 800333c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800333e:	4b13      	ldr	r3, [pc, #76]	@ (800338c <MX_USART6_UART_Init+0x58>)
 8003340:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003344:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003346:	4b11      	ldr	r3, [pc, #68]	@ (800338c <MX_USART6_UART_Init+0x58>)
 8003348:	2200      	movs	r2, #0
 800334a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800334c:	4b0f      	ldr	r3, [pc, #60]	@ (800338c <MX_USART6_UART_Init+0x58>)
 800334e:	2200      	movs	r2, #0
 8003350:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003352:	4b0e      	ldr	r3, [pc, #56]	@ (800338c <MX_USART6_UART_Init+0x58>)
 8003354:	2200      	movs	r2, #0
 8003356:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003358:	4b0c      	ldr	r3, [pc, #48]	@ (800338c <MX_USART6_UART_Init+0x58>)
 800335a:	220c      	movs	r2, #12
 800335c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800335e:	4b0b      	ldr	r3, [pc, #44]	@ (800338c <MX_USART6_UART_Init+0x58>)
 8003360:	2200      	movs	r2, #0
 8003362:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003364:	4b09      	ldr	r3, [pc, #36]	@ (800338c <MX_USART6_UART_Init+0x58>)
 8003366:	2200      	movs	r2, #0
 8003368:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800336a:	4b08      	ldr	r3, [pc, #32]	@ (800338c <MX_USART6_UART_Init+0x58>)
 800336c:	2200      	movs	r2, #0
 800336e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003370:	4b06      	ldr	r3, [pc, #24]	@ (800338c <MX_USART6_UART_Init+0x58>)
 8003372:	2200      	movs	r2, #0
 8003374:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003376:	4805      	ldr	r0, [pc, #20]	@ (800338c <MX_USART6_UART_Init+0x58>)
 8003378:	f00b fed6 	bl	800f128 <HAL_UART_Init>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8003382:	f000 fe99 	bl	80040b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003386:	bf00      	nop
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20002114 	.word	0x20002114
 8003390:	40011400 	.word	0x40011400

08003394 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800339a:	1d3b      	adds	r3, r7, #4
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	609a      	str	r2, [r3, #8]
 80033a4:	60da      	str	r2, [r3, #12]
 80033a6:	611a      	str	r2, [r3, #16]
 80033a8:	615a      	str	r2, [r3, #20]
 80033aa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80033ac:	4b1f      	ldr	r3, [pc, #124]	@ (800342c <MX_FMC_Init+0x98>)
 80033ae:	4a20      	ldr	r2, [pc, #128]	@ (8003430 <MX_FMC_Init+0x9c>)
 80033b0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80033b2:	4b1e      	ldr	r3, [pc, #120]	@ (800342c <MX_FMC_Init+0x98>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80033b8:	4b1c      	ldr	r3, [pc, #112]	@ (800342c <MX_FMC_Init+0x98>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80033be:	4b1b      	ldr	r3, [pc, #108]	@ (800342c <MX_FMC_Init+0x98>)
 80033c0:	2204      	movs	r2, #4
 80033c2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80033c4:	4b19      	ldr	r3, [pc, #100]	@ (800342c <MX_FMC_Init+0x98>)
 80033c6:	2210      	movs	r2, #16
 80033c8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80033ca:	4b18      	ldr	r3, [pc, #96]	@ (800342c <MX_FMC_Init+0x98>)
 80033cc:	2240      	movs	r2, #64	@ 0x40
 80033ce:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80033d0:	4b16      	ldr	r3, [pc, #88]	@ (800342c <MX_FMC_Init+0x98>)
 80033d2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80033d6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80033d8:	4b14      	ldr	r3, [pc, #80]	@ (800342c <MX_FMC_Init+0x98>)
 80033da:	2200      	movs	r2, #0
 80033dc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80033de:	4b13      	ldr	r3, [pc, #76]	@ (800342c <MX_FMC_Init+0x98>)
 80033e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033e4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80033e6:	4b11      	ldr	r3, [pc, #68]	@ (800342c <MX_FMC_Init+0x98>)
 80033e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80033ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80033ee:	4b0f      	ldr	r3, [pc, #60]	@ (800342c <MX_FMC_Init+0x98>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80033f4:	2302      	movs	r3, #2
 80033f6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80033f8:	2307      	movs	r3, #7
 80033fa:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80033fc:	2304      	movs	r3, #4
 80033fe:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8003400:	2307      	movs	r3, #7
 8003402:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8003404:	2303      	movs	r3, #3
 8003406:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8003408:	2302      	movs	r3, #2
 800340a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800340c:	2302      	movs	r3, #2
 800340e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003410:	1d3b      	adds	r3, r7, #4
 8003412:	4619      	mov	r1, r3
 8003414:	4805      	ldr	r0, [pc, #20]	@ (800342c <MX_FMC_Init+0x98>)
 8003416:	f00a fc50 	bl	800dcba <HAL_SDRAM_Init>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8003420:	f000 fe4a 	bl	80040b8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8003424:	bf00      	nop
 8003426:	3720      	adds	r7, #32
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	2000219c 	.word	0x2000219c
 8003430:	a0000140 	.word	0xa0000140

08003434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b090      	sub	sp, #64	@ 0x40
 8003438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800343a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	605a      	str	r2, [r3, #4]
 8003444:	609a      	str	r2, [r3, #8]
 8003446:	60da      	str	r2, [r3, #12]
 8003448:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800344a:	4bb0      	ldr	r3, [pc, #704]	@ (800370c <MX_GPIO_Init+0x2d8>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344e:	4aaf      	ldr	r2, [pc, #700]	@ (800370c <MX_GPIO_Init+0x2d8>)
 8003450:	f043 0310 	orr.w	r3, r3, #16
 8003454:	6313      	str	r3, [r2, #48]	@ 0x30
 8003456:	4bad      	ldr	r3, [pc, #692]	@ (800370c <MX_GPIO_Init+0x2d8>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345a:	f003 0310 	and.w	r3, r3, #16
 800345e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003462:	4baa      	ldr	r3, [pc, #680]	@ (800370c <MX_GPIO_Init+0x2d8>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003466:	4aa9      	ldr	r2, [pc, #676]	@ (800370c <MX_GPIO_Init+0x2d8>)
 8003468:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800346c:	6313      	str	r3, [r2, #48]	@ 0x30
 800346e:	4ba7      	ldr	r3, [pc, #668]	@ (800370c <MX_GPIO_Init+0x2d8>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003476:	627b      	str	r3, [r7, #36]	@ 0x24
 8003478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800347a:	4ba4      	ldr	r3, [pc, #656]	@ (800370c <MX_GPIO_Init+0x2d8>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347e:	4aa3      	ldr	r2, [pc, #652]	@ (800370c <MX_GPIO_Init+0x2d8>)
 8003480:	f043 0302 	orr.w	r3, r3, #2
 8003484:	6313      	str	r3, [r2, #48]	@ 0x30
 8003486:	4ba1      	ldr	r3, [pc, #644]	@ (800370c <MX_GPIO_Init+0x2d8>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	623b      	str	r3, [r7, #32]
 8003490:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003492:	4b9e      	ldr	r3, [pc, #632]	@ (800370c <MX_GPIO_Init+0x2d8>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003496:	4a9d      	ldr	r2, [pc, #628]	@ (800370c <MX_GPIO_Init+0x2d8>)
 8003498:	f043 0308 	orr.w	r3, r3, #8
 800349c:	6313      	str	r3, [r2, #48]	@ 0x30
 800349e:	4b9b      	ldr	r3, [pc, #620]	@ (800370c <MX_GPIO_Init+0x2d8>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	61fb      	str	r3, [r7, #28]
 80034a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034aa:	4b98      	ldr	r3, [pc, #608]	@ (800370c <MX_GPIO_Init+0x2d8>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ae:	4a97      	ldr	r2, [pc, #604]	@ (800370c <MX_GPIO_Init+0x2d8>)
 80034b0:	f043 0304 	orr.w	r3, r3, #4
 80034b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034b6:	4b95      	ldr	r3, [pc, #596]	@ (800370c <MX_GPIO_Init+0x2d8>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	61bb      	str	r3, [r7, #24]
 80034c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c2:	4b92      	ldr	r3, [pc, #584]	@ (800370c <MX_GPIO_Init+0x2d8>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c6:	4a91      	ldr	r2, [pc, #580]	@ (800370c <MX_GPIO_Init+0x2d8>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ce:	4b8f      	ldr	r3, [pc, #572]	@ (800370c <MX_GPIO_Init+0x2d8>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80034da:	4b8c      	ldr	r3, [pc, #560]	@ (800370c <MX_GPIO_Init+0x2d8>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034de:	4a8b      	ldr	r2, [pc, #556]	@ (800370c <MX_GPIO_Init+0x2d8>)
 80034e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034e6:	4b89      	ldr	r3, [pc, #548]	@ (800370c <MX_GPIO_Init+0x2d8>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034ee:	613b      	str	r3, [r7, #16]
 80034f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80034f2:	4b86      	ldr	r3, [pc, #536]	@ (800370c <MX_GPIO_Init+0x2d8>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f6:	4a85      	ldr	r2, [pc, #532]	@ (800370c <MX_GPIO_Init+0x2d8>)
 80034f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80034fe:	4b83      	ldr	r3, [pc, #524]	@ (800370c <MX_GPIO_Init+0x2d8>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800350a:	4b80      	ldr	r3, [pc, #512]	@ (800370c <MX_GPIO_Init+0x2d8>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350e:	4a7f      	ldr	r2, [pc, #508]	@ (800370c <MX_GPIO_Init+0x2d8>)
 8003510:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003514:	6313      	str	r3, [r2, #48]	@ 0x30
 8003516:	4b7d      	ldr	r3, [pc, #500]	@ (800370c <MX_GPIO_Init+0x2d8>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003522:	4b7a      	ldr	r3, [pc, #488]	@ (800370c <MX_GPIO_Init+0x2d8>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003526:	4a79      	ldr	r2, [pc, #484]	@ (800370c <MX_GPIO_Init+0x2d8>)
 8003528:	f043 0320 	orr.w	r3, r3, #32
 800352c:	6313      	str	r3, [r2, #48]	@ 0x30
 800352e:	4b77      	ldr	r3, [pc, #476]	@ (800370c <MX_GPIO_Init+0x2d8>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	607b      	str	r3, [r7, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800353a:	4b74      	ldr	r3, [pc, #464]	@ (800370c <MX_GPIO_Init+0x2d8>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353e:	4a73      	ldr	r2, [pc, #460]	@ (800370c <MX_GPIO_Init+0x2d8>)
 8003540:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003544:	6313      	str	r3, [r2, #48]	@ 0x30
 8003546:	4b71      	ldr	r3, [pc, #452]	@ (800370c <MX_GPIO_Init+0x2d8>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003552:	2201      	movs	r2, #1
 8003554:	2120      	movs	r1, #32
 8003556:	486e      	ldr	r0, [pc, #440]	@ (8003710 <MX_GPIO_Init+0x2dc>)
 8003558:	f004 ff88 	bl	800846c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800355c:	2200      	movs	r2, #0
 800355e:	210c      	movs	r1, #12
 8003560:	486c      	ldr	r0, [pc, #432]	@ (8003714 <MX_GPIO_Init+0x2e0>)
 8003562:	f004 ff83 	bl	800846c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8003566:	2201      	movs	r2, #1
 8003568:	2108      	movs	r1, #8
 800356a:	486b      	ldr	r0, [pc, #428]	@ (8003718 <MX_GPIO_Init+0x2e4>)
 800356c:	f004 ff7e 	bl	800846c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8003570:	2201      	movs	r2, #1
 8003572:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003576:	4867      	ldr	r0, [pc, #412]	@ (8003714 <MX_GPIO_Init+0x2e0>)
 8003578:	f004 ff78 	bl	800846c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800357c:	2200      	movs	r2, #0
 800357e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003582:	4866      	ldr	r0, [pc, #408]	@ (800371c <MX_GPIO_Init+0x2e8>)
 8003584:	f004 ff72 	bl	800846c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8003588:	2200      	movs	r2, #0
 800358a:	21c8      	movs	r1, #200	@ 0xc8
 800358c:	4864      	ldr	r0, [pc, #400]	@ (8003720 <MX_GPIO_Init+0x2ec>)
 800358e:	f004 ff6d 	bl	800846c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8003592:	2308      	movs	r3, #8
 8003594:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003596:	2300      	movs	r3, #0
 8003598:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359a:	2300      	movs	r3, #0
 800359c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800359e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035a2:	4619      	mov	r1, r3
 80035a4:	485f      	ldr	r0, [pc, #380]	@ (8003724 <MX_GPIO_Init+0x2f0>)
 80035a6:	f004 fd9d 	bl	80080e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80035aa:	f643 4323 	movw	r3, #15395	@ 0x3c23
 80035ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b0:	2302      	movs	r3, #2
 80035b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b8:	2303      	movs	r3, #3
 80035ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80035bc:	230a      	movs	r3, #10
 80035be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035c4:	4619      	mov	r1, r3
 80035c6:	4858      	ldr	r0, [pc, #352]	@ (8003728 <MX_GPIO_Init+0x2f4>)
 80035c8:	f004 fd8c 	bl	80080e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80035cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035d2:	2300      	movs	r3, #0
 80035d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d6:	2300      	movs	r3, #0
 80035d8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80035da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035de:	4619      	mov	r1, r3
 80035e0:	4852      	ldr	r0, [pc, #328]	@ (800372c <MX_GPIO_Init+0x2f8>)
 80035e2:	f004 fd7f 	bl	80080e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80035e6:	2340      	movs	r3, #64	@ 0x40
 80035e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80035ea:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80035ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80035f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035f8:	4619      	mov	r1, r3
 80035fa:	4845      	ldr	r0, [pc, #276]	@ (8003710 <MX_GPIO_Init+0x2dc>)
 80035fc:	f004 fd72 	bl	80080e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003600:	2320      	movs	r3, #32
 8003602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003604:	2301      	movs	r3, #1
 8003606:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003608:	2300      	movs	r3, #0
 800360a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800360c:	2300      	movs	r3, #0
 800360e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003610:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003614:	4619      	mov	r1, r3
 8003616:	483e      	ldr	r0, [pc, #248]	@ (8003710 <MX_GPIO_Init+0x2dc>)
 8003618:	f004 fd64 	bl	80080e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800361c:	f241 030c 	movw	r3, #4108	@ 0x100c
 8003620:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003622:	2301      	movs	r3, #1
 8003624:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003626:	2300      	movs	r3, #0
 8003628:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800362a:	2300      	movs	r3, #0
 800362c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800362e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003632:	4619      	mov	r1, r3
 8003634:	4837      	ldr	r0, [pc, #220]	@ (8003714 <MX_GPIO_Init+0x2e0>)
 8003636:	f004 fd55 	bl	80080e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800363a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800363e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003640:	2300      	movs	r3, #0
 8003642:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003644:	2300      	movs	r3, #0
 8003646:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8003648:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800364c:	4619      	mov	r1, r3
 800364e:	4838      	ldr	r0, [pc, #224]	@ (8003730 <MX_GPIO_Init+0x2fc>)
 8003650:	f004 fd48 	bl	80080e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8003654:	2308      	movs	r3, #8
 8003656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003658:	2301      	movs	r3, #1
 800365a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365c:	2300      	movs	r3, #0
 800365e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003660:	2300      	movs	r3, #0
 8003662:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8003664:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003668:	4619      	mov	r1, r3
 800366a:	482b      	ldr	r0, [pc, #172]	@ (8003718 <MX_GPIO_Init+0x2e4>)
 800366c:	f004 fd3a 	bl	80080e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003670:	2310      	movs	r3, #16
 8003672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003674:	2300      	movs	r3, #0
 8003676:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003678:	2300      	movs	r3, #0
 800367a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800367c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003680:	4619      	mov	r1, r3
 8003682:	4823      	ldr	r0, [pc, #140]	@ (8003710 <MX_GPIO_Init+0x2dc>)
 8003684:	f004 fd2e 	bl	80080e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8003688:	f248 0304 	movw	r3, #32772	@ 0x8004
 800368c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800368e:	2300      	movs	r3, #0
 8003690:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003692:	2300      	movs	r3, #0
 8003694:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003696:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800369a:	4619      	mov	r1, r3
 800369c:	481f      	ldr	r0, [pc, #124]	@ (800371c <MX_GPIO_Init+0x2e8>)
 800369e:	f004 fd21 	bl	80080e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80036a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80036a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036a8:	2301      	movs	r3, #1
 80036aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b0:	2300      	movs	r3, #0
 80036b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80036b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036b8:	4619      	mov	r1, r3
 80036ba:	4818      	ldr	r0, [pc, #96]	@ (800371c <MX_GPIO_Init+0x2e8>)
 80036bc:	f004 fd12 	bl	80080e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80036c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80036c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80036c6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80036ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80036d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036d4:	4619      	mov	r1, r3
 80036d6:	480f      	ldr	r0, [pc, #60]	@ (8003714 <MX_GPIO_Init+0x2e0>)
 80036d8:	f004 fd04 	bl	80080e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80036dc:	2310      	movs	r3, #16
 80036de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e0:	2302      	movs	r3, #2
 80036e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e8:	2303      	movs	r3, #3
 80036ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80036ec:	230a      	movs	r3, #10
 80036ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80036f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036f4:	4619      	mov	r1, r3
 80036f6:	4809      	ldr	r0, [pc, #36]	@ (800371c <MX_GPIO_Init+0x2e8>)
 80036f8:	f004 fcf4 	bl	80080e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80036fc:	23c8      	movs	r3, #200	@ 0xc8
 80036fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003700:	2301      	movs	r3, #1
 8003702:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003704:	2300      	movs	r3, #0
 8003706:	637b      	str	r3, [r7, #52]	@ 0x34
 8003708:	e014      	b.n	8003734 <MX_GPIO_Init+0x300>
 800370a:	bf00      	nop
 800370c:	40023800 	.word	0x40023800
 8003710:	40020c00 	.word	0x40020c00
 8003714:	40022000 	.word	0x40022000
 8003718:	40022800 	.word	0x40022800
 800371c:	40021c00 	.word	0x40021c00
 8003720:	40021800 	.word	0x40021800
 8003724:	40021000 	.word	0x40021000
 8003728:	40020400 	.word	0x40020400
 800372c:	40022400 	.word	0x40022400
 8003730:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003734:	2300      	movs	r3, #0
 8003736:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003738:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800373c:	4619      	mov	r1, r3
 800373e:	4819      	ldr	r0, [pc, #100]	@ (80037a4 <MX_GPIO_Init+0x370>)
 8003740:	f004 fcd0 	bl	80080e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8003744:	2305      	movs	r3, #5
 8003746:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003748:	2302      	movs	r3, #2
 800374a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374c:	2300      	movs	r3, #0
 800374e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003750:	2303      	movs	r3, #3
 8003752:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003754:	230a      	movs	r3, #10
 8003756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003758:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800375c:	4619      	mov	r1, r3
 800375e:	4812      	ldr	r0, [pc, #72]	@ (80037a8 <MX_GPIO_Init+0x374>)
 8003760:	f004 fcc0 	bl	80080e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8003764:	2304      	movs	r3, #4
 8003766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003768:	2300      	movs	r3, #0
 800376a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376c:	2300      	movs	r3, #0
 800376e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8003770:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003774:	4619      	mov	r1, r3
 8003776:	480b      	ldr	r0, [pc, #44]	@ (80037a4 <MX_GPIO_Init+0x370>)
 8003778:	f004 fcb4 	bl	80080e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800377c:	2328      	movs	r3, #40	@ 0x28
 800377e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003780:	2302      	movs	r3, #2
 8003782:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003784:	2300      	movs	r3, #0
 8003786:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003788:	2303      	movs	r3, #3
 800378a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800378c:	230a      	movs	r3, #10
 800378e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003790:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003794:	4619      	mov	r1, r3
 8003796:	4805      	ldr	r0, [pc, #20]	@ (80037ac <MX_GPIO_Init+0x378>)
 8003798:	f004 fca4 	bl	80080e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800379c:	bf00      	nop
 800379e:	3740      	adds	r7, #64	@ 0x40
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40021800 	.word	0x40021800
 80037a8:	40020800 	.word	0x40020800
 80037ac:	40020000 	.word	0x40020000

080037b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b096      	sub	sp, #88	@ 0x58
 80037b4:	af02      	add	r7, sp, #8
 80037b6:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST - 임시 비활성화 (SD 카드 테스트용) */
  LOG_WARN("USB Host initialization temporarily disabled to avoid RTOS task conflicts");
 80037b8:	49ba      	ldr	r1, [pc, #744]	@ (8003aa4 <StartDefaultTask+0x2f4>)
 80037ba:	2002      	movs	r0, #2
 80037bc:	f001 ffba 	bl	8005734 <LOGGER_SendFormatted>
  LOG_INFO("This eliminates USBH_Thread vs defaultTask priority conflicts");
 80037c0:	49b9      	ldr	r1, [pc, #740]	@ (8003aa8 <StartDefaultTask+0x2f8>)
 80037c2:	2001      	movs	r0, #1
 80037c4:	f001 ffb6 	bl	8005734 <LOGGER_SendFormatted>
  // MX_USB_HOST_Init();  // SD 카드 테스트 완료 후 재활성화 예정
  /* USER CODE BEGIN 5 */
  
  // SD Card 초기화는 이미 main()에서 우선 완료됨
  LOG_INFO("📋 SD card initialization completed in main() - checking status...");
 80037c8:	49b8      	ldr	r1, [pc, #736]	@ (8003aac <StartDefaultTask+0x2fc>)
 80037ca:	2001      	movs	r0, #1
 80037cc:	f001 ffb2 	bl	8005734 <LOGGER_SendFormatted>
  
  LOG_INFO("=== STM32F746G-DISCO UART6 Test Started ===");
 80037d0:	49b7      	ldr	r1, [pc, #732]	@ (8003ab0 <StartDefaultTask+0x300>)
 80037d2:	2001      	movs	r0, #1
 80037d4:	f001 ffae 	bl	8005734 <LOGGER_SendFormatted>
  LOG_INFO("System Clock: %lu MHz", SystemCoreClock / 1000000);
 80037d8:	4bb6      	ldr	r3, [pc, #728]	@ (8003ab4 <StartDefaultTask+0x304>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4ab6      	ldr	r2, [pc, #728]	@ (8003ab8 <StartDefaultTask+0x308>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	0c9b      	lsrs	r3, r3, #18
 80037e4:	461a      	mov	r2, r3
 80037e6:	49b5      	ldr	r1, [pc, #724]	@ (8003abc <StartDefaultTask+0x30c>)
 80037e8:	2001      	movs	r0, #1
 80037ea:	f001 ffa3 	bl	8005734 <LOGGER_SendFormatted>
  LOG_INFO("UART6 Configuration: 115200 baud, 8N1");
 80037ee:	49b4      	ldr	r1, [pc, #720]	@ (8003ac0 <StartDefaultTask+0x310>)
 80037f0:	2001      	movs	r0, #1
 80037f2:	f001 ff9f 	bl	8005734 <LOGGER_SendFormatted>
  LOG_INFO("📌 CRITICAL: For loopback test, connect PC6(TX) to PC7(RX) with a wire!");
 80037f6:	49b3      	ldr	r1, [pc, #716]	@ (8003ac4 <StartDefaultTask+0x314>)
 80037f8:	2001      	movs	r0, #1
 80037fa:	f001 ff9b 	bl	8005734 <LOGGER_SendFormatted>
  LOG_INFO("📌 UART6 Pins: PC6(TX) = Arduino D1, PC7(RX) = Arduino D0");
 80037fe:	49b2      	ldr	r1, [pc, #712]	@ (8003ac8 <StartDefaultTask+0x318>)
 8003800:	2001      	movs	r0, #1
 8003802:	f001 ff97 	bl	8005734 <LOGGER_SendFormatted>
  
  // SD 카드 기본 기능 테스트 (Default Task에서 수행)
  LOG_INFO("📤 [TX_TASK] Starting SD card basic functionality test...");
 8003806:	49b1      	ldr	r1, [pc, #708]	@ (8003acc <StartDefaultTask+0x31c>)
 8003808:	2001      	movs	r0, #1
 800380a:	f001 ff93 	bl	8005734 <LOGGER_SendFormatted>
  
  // SD 초기화 시도
  LOG_INFO("📤 [TX_TASK] Attempting SD card initialization...");
 800380e:	49b0      	ldr	r1, [pc, #704]	@ (8003ad0 <StartDefaultTask+0x320>)
 8003810:	2001      	movs	r0, #1
 8003812:	f001 ff8f 	bl	8005734 <LOGGER_SendFormatted>
  g_sd_initialization_result = SDStorage_Init();
 8003816:	f7fd fde5 	bl	80013e4 <SDStorage_Init>
 800381a:	4603      	mov	r3, r0
 800381c:	4aad      	ldr	r2, [pc, #692]	@ (8003ad4 <StartDefaultTask+0x324>)
 800381e:	6013      	str	r3, [r2, #0]
  
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 8003820:	4bac      	ldr	r3, [pc, #688]	@ (8003ad4 <StartDefaultTask+0x324>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d124      	bne.n	8003872 <StartDefaultTask+0xc2>
    LOG_INFO("✅ [TX_TASK] SD card initialization SUCCESS");
 8003828:	49ab      	ldr	r1, [pc, #684]	@ (8003ad8 <StartDefaultTask+0x328>)
 800382a:	2001      	movs	r0, #1
 800382c:	f001 ff82 	bl	8005734 <LOGGER_SendFormatted>
    
    // 기본 쓰기 테스트
    LOG_INFO("📤 [TX_TASK] Testing SD card write operation...");
 8003830:	49aa      	ldr	r1, [pc, #680]	@ (8003adc <StartDefaultTask+0x32c>)
 8003832:	2001      	movs	r0, #1
 8003834:	f001 ff7e 	bl	8005734 <LOGGER_SendFormatted>
    const char* test_message = "SD Card Test - Hello World from FreeRTOS!\n";
 8003838:	4ba9      	ldr	r3, [pc, #676]	@ (8003ae0 <StartDefaultTask+0x330>)
 800383a:	647b      	str	r3, [r7, #68]	@ 0x44
    int write_result = SDStorage_WriteLog(test_message, strlen(test_message));
 800383c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800383e:	f7fc fcf1 	bl	8000224 <strlen>
 8003842:	4603      	mov	r3, r0
 8003844:	4619      	mov	r1, r3
 8003846:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003848:	f7fd ffea 	bl	8001820 <SDStorage_WriteLog>
 800384c:	6438      	str	r0, [r7, #64]	@ 0x40
    
    if (write_result == SDSTORAGE_OK) {
 800384e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003850:	2b00      	cmp	r3, #0
 8003852:	d108      	bne.n	8003866 <StartDefaultTask+0xb6>
      LOG_INFO("✅ [TX_TASK] SD card write operation SUCCESS");
 8003854:	49a3      	ldr	r1, [pc, #652]	@ (8003ae4 <StartDefaultTask+0x334>)
 8003856:	2001      	movs	r0, #1
 8003858:	f001 ff6c 	bl	8005734 <LOGGER_SendFormatted>
      LOG_INFO("🎉 [TX_TASK] SD card functionality confirmed - ready for long-term logging");
 800385c:	49a2      	ldr	r1, [pc, #648]	@ (8003ae8 <StartDefaultTask+0x338>)
 800385e:	2001      	movs	r0, #1
 8003860:	f001 ff68 	bl	8005734 <LOGGER_SendFormatted>
 8003864:	e010      	b.n	8003888 <StartDefaultTask+0xd8>
    } else {
      LOG_ERROR("❌ [TX_TASK] SD card write operation FAILED (code: %d)", write_result);
 8003866:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003868:	49a0      	ldr	r1, [pc, #640]	@ (8003aec <StartDefaultTask+0x33c>)
 800386a:	2003      	movs	r0, #3
 800386c:	f001 ff62 	bl	8005734 <LOGGER_SendFormatted>
 8003870:	e00a      	b.n	8003888 <StartDefaultTask+0xd8>
    }
  } else {
    LOG_ERROR("❌ [TX_TASK] SD card initialization FAILED (code: %d)", g_sd_initialization_result);
 8003872:	4b98      	ldr	r3, [pc, #608]	@ (8003ad4 <StartDefaultTask+0x324>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	499d      	ldr	r1, [pc, #628]	@ (8003af0 <StartDefaultTask+0x340>)
 800387a:	2003      	movs	r0, #3
 800387c:	f001 ff5a 	bl	8005734 <LOGGER_SendFormatted>
    LOG_INFO("📺 [TX_TASK] Continuing with terminal-only logging");
 8003880:	499c      	ldr	r1, [pc, #624]	@ (8003af4 <StartDefaultTask+0x344>)
 8003882:	2001      	movs	r0, #1
 8003884:	f001 ff56 	bl	8005734 <LOGGER_SendFormatted>
  }

  // SD 테스트 건너뛰고 바로 LoRa 시작
  
  LOG_INFO("📤 [TX_TASK] Starting LoRa initialization and JOIN...");
 8003888:	499b      	ldr	r1, [pc, #620]	@ (8003af8 <StartDefaultTask+0x348>)
 800388a:	2001      	movs	r0, #1
 800388c:	f001 ff52 	bl	8005734 <LOGGER_SendFormatted>
  
  // UART 연결 (LoRa 통신을 위해 필수)
  LOG_INFO("📤 [TX_TASK] Connecting to UART for LoRa communication...");
 8003890:	499a      	ldr	r1, [pc, #616]	@ (8003afc <StartDefaultTask+0x34c>)
 8003892:	2001      	movs	r0, #1
 8003894:	f001 ff4e 	bl	8005734 <LOGGER_SendFormatted>
  UartStatus uart_status = UART_Connect("UART6");
 8003898:	4899      	ldr	r0, [pc, #612]	@ (8003b00 <StartDefaultTask+0x350>)
 800389a:	f002 f877 	bl	800598c <UART_Connect>
 800389e:	4603      	mov	r3, r0
 80038a0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (uart_status == UART_STATUS_OK) {
 80038a4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d104      	bne.n	80038b6 <StartDefaultTask+0x106>
    LOG_INFO("✅ [TX_TASK] UART connection successful");
 80038ac:	4995      	ldr	r1, [pc, #596]	@ (8003b04 <StartDefaultTask+0x354>)
 80038ae:	2001      	movs	r0, #1
 80038b0:	f001 ff40 	bl	8005734 <LOGGER_SendFormatted>
 80038b4:	e006      	b.n	80038c4 <StartDefaultTask+0x114>
  } else {
    LOG_ERROR("❌ [TX_TASK] UART connection failed (status: %d)", uart_status);
 80038b6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80038ba:	461a      	mov	r2, r3
 80038bc:	4992      	ldr	r1, [pc, #584]	@ (8003b08 <StartDefaultTask+0x358>)
 80038be:	2003      	movs	r0, #3
 80038c0:	f001 ff38 	bl	8005734 <LOGGER_SendFormatted>
  }
  
  LOG_INFO("📤 [TX_TASK] Waiting for LoRa module boot-up (5 seconds - optimized for long-term test)...");
 80038c4:	4991      	ldr	r1, [pc, #580]	@ (8003b0c <StartDefaultTask+0x35c>)
 80038c6:	2001      	movs	r0, #1
 80038c8:	f001 ff34 	bl	8005734 <LOGGER_SendFormatted>
  osDelay(5000); // 5초 대기 (장기 테스트를 위해 단축)
 80038cc:	f241 3088 	movw	r0, #5000	@ 0x1388
 80038d0:	f011 fb1e 	bl	8014f10 <osDelay>
  
  // LoraStarter 컨텍스트 초기화 (TDD 검증된 기본 설정 사용)
  LoraStarterContext lora_ctx;
  LoraStarter_InitWithDefaults(&lora_ctx, "TEST");
 80038d4:	f107 030c 	add.w	r3, r7, #12
 80038d8:	498d      	ldr	r1, [pc, #564]	@ (8003b10 <StartDefaultTask+0x360>)
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fc ff74 	bl	80007c8 <LoraStarter_InitWithDefaults>
  
  LOG_INFO("=== LoRa Initialization ===");
 80038e0:	498c      	ldr	r1, [pc, #560]	@ (8003b14 <StartDefaultTask+0x364>)
 80038e2:	2001      	movs	r0, #1
 80038e4:	f001 ff26 	bl	8005734 <LOGGER_SendFormatted>
  LOG_INFO("📤 Commands: %d, Message: %s, Max retries: %d", 
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	460b      	mov	r3, r1
 80038f2:	4989      	ldr	r1, [pc, #548]	@ (8003b18 <StartDefaultTask+0x368>)
 80038f4:	2001      	movs	r0, #1
 80038f6:	f001 ff1d 	bl	8005734 <LOGGER_SendFormatted>
           lora_ctx.num_commands, lora_ctx.send_message, lora_ctx.max_retry_count);
           
  // SD 카드 로깅 설정 (간단한 방식)
  extern int g_sd_initialization_result; // main()에서 설정된 SD 결과
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 80038fa:	4b76      	ldr	r3, [pc, #472]	@ (8003ad4 <StartDefaultTask+0x324>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d104      	bne.n	800390c <StartDefaultTask+0x15c>
    LOG_INFO("🗂️ LoRa logs will be saved to SD card: lora_logs/");
 8003902:	4986      	ldr	r1, [pc, #536]	@ (8003b1c <StartDefaultTask+0x36c>)
 8003904:	2001      	movs	r0, #1
 8003906:	f001 ff15 	bl	8005734 <LOGGER_SendFormatted>
 800390a:	e003      	b.n	8003914 <StartDefaultTask+0x164>
  } else {
    LOG_INFO("📺 LoRa logs will be displayed on terminal only (SD not available)");
 800390c:	4984      	ldr	r1, [pc, #528]	@ (8003b20 <StartDefaultTask+0x370>)
 800390e:	2001      	movs	r0, #1
 8003910:	f001 ff10 	bl	8005734 <LOGGER_SendFormatted>
  }
  
  // LoRa 로깅 모드 설정 - 초기화 단계에서는 터미널만 사용
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 8003914:	4b6f      	ldr	r3, [pc, #444]	@ (8003ad4 <StartDefaultTask+0x324>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d110      	bne.n	800393e <StartDefaultTask+0x18e>
    LOGGER_SetMode(LOGGER_MODE_DUAL);  // 터미널 + SD 동시 출력
 800391c:	2002      	movs	r0, #2
 800391e:	f001 fee5 	bl	80056ec <LOGGER_SetMode>
    LOGGER_SetFilterLevel(LOG_LEVEL_INFO);  // 터미널에서 모든 로그 확인 가능
 8003922:	2001      	movs	r0, #1
 8003924:	f001 fea6 	bl	8005674 <LOGGER_SetFilterLevel>
    LOGGER_SetSDFilterLevel(LOG_LEVEL_WARN);  // SD 카드에는 WARN 이상만 저장
 8003928:	2002      	movs	r0, #2
 800392a:	f001 feb3 	bl	8005694 <LOGGER_SetSDFilterLevel>
    LOGGER_EnableSDLogging(false);  // 초기화 완료 전까지 SD 로깅 비활성화
 800392e:	2000      	movs	r0, #0
 8003930:	f001 fec0 	bl	80056b4 <LOGGER_EnableSDLogging>
    LOG_WARN("✅ LoRa logging mode: DUAL (Terminal + SD), SD logging will start from JOIN attempts");
 8003934:	497b      	ldr	r1, [pc, #492]	@ (8003b24 <StartDefaultTask+0x374>)
 8003936:	2002      	movs	r0, #2
 8003938:	f001 fefc 	bl	8005734 <LOGGER_SendFormatted>
 800393c:	e009      	b.n	8003952 <StartDefaultTask+0x1a2>
  } else {
    LOGGER_SetMode(LOGGER_MODE_TERMINAL_ONLY);
 800393e:	2000      	movs	r0, #0
 8003940:	f001 fed4 	bl	80056ec <LOGGER_SetMode>
    LOGGER_SetFilterLevel(LOG_LEVEL_INFO);
 8003944:	2001      	movs	r0, #1
 8003946:	f001 fe95 	bl	8005674 <LOGGER_SetFilterLevel>
    LOG_INFO("📺 LoRa logging mode: Terminal only");
 800394a:	4977      	ldr	r1, [pc, #476]	@ (8003b28 <StartDefaultTask+0x378>)
 800394c:	2001      	movs	r0, #1
 800394e:	f001 fef1 	bl	8005734 <LOGGER_SendFormatted>
  }
  
  // LoRa 프로세스 루프 (초기화 → JOIN → 주기적 전송)
  LOG_INFO("📤 [TX_TASK] Starting LoRa process loop...");
 8003952:	4976      	ldr	r1, [pc, #472]	@ (8003b2c <StartDefaultTask+0x37c>)
 8003954:	2001      	movs	r0, #1
 8003956:	f001 feed 	bl	8005734 <LOGGER_SendFormatted>
  
  for(;;)
  {
    // 수신된 응답이 있으면 LoraStarter에 전달
    const char* rx_data = NULL;
 800395a:	2300      	movs	r3, #0
 800395c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (lora_new_response) {
 800395e:	4b74      	ldr	r3, [pc, #464]	@ (8003b30 <StartDefaultTask+0x380>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d004      	beq.n	8003972 <StartDefaultTask+0x1c2>
      rx_data = lora_rx_response;
 8003968:	4b72      	ldr	r3, [pc, #456]	@ (8003b34 <StartDefaultTask+0x384>)
 800396a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      lora_new_response = false; // 플래그 클리어
 800396c:	4b70      	ldr	r3, [pc, #448]	@ (8003b30 <StartDefaultTask+0x380>)
 800396e:	2200      	movs	r2, #0
 8003970:	701a      	strb	r2, [r3, #0]
      // 응답 처리 - 로그는 ResponseHandler에서 이미 출력됨
    }
    
    // LoraStarter 프로세스 실행
    LoraStarter_Process(&lora_ctx, rx_data);
 8003972:	f107 030c 	add.w	r3, r7, #12
 8003976:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003978:	4618      	mov	r0, r3
 800397a:	f7fc ff6d 	bl	8000858 <LoraStarter_Process>
    
    // JOIN 성공 후 시간 조회는 LoRa 상태 머신에서 자동 처리됨 (TIMEREQ → LTIME)
    
    // 상태별 처리 간격 및 디버깅 (중요한 상태만)
    static int last_state = -1;
    if (lora_ctx.state != last_state) {
 800397e:	7b3b      	ldrb	r3, [r7, #12]
 8003980:	461a      	mov	r2, r3
 8003982:	4b6d      	ldr	r3, [pc, #436]	@ (8003b38 <StartDefaultTask+0x388>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d01a      	beq.n	80039c0 <StartDefaultTask+0x210>
      // JOIN, SEND, ERROR 등 중요한 상태 변경만 로그 출력
      if (lora_ctx.state == LORA_STATE_SEND_JOIN || 
 800398a:	7b3b      	ldrb	r3, [r7, #12]
 800398c:	2b03      	cmp	r3, #3
 800398e:	d008      	beq.n	80039a2 <StartDefaultTask+0x1f2>
          lora_ctx.state == LORA_STATE_SEND_PERIODIC ||
 8003990:	7b3b      	ldrb	r3, [r7, #12]
      if (lora_ctx.state == LORA_STATE_SEND_JOIN || 
 8003992:	2b09      	cmp	r3, #9
 8003994:	d005      	beq.n	80039a2 <StartDefaultTask+0x1f2>
          lora_ctx.state == LORA_STATE_DONE ||
 8003996:	7b3b      	ldrb	r3, [r7, #12]
          lora_ctx.state == LORA_STATE_SEND_PERIODIC ||
 8003998:	2b0d      	cmp	r3, #13
 800399a:	d002      	beq.n	80039a2 <StartDefaultTask+0x1f2>
          lora_ctx.state == LORA_STATE_ERROR) {
 800399c:	7b3b      	ldrb	r3, [r7, #12]
          lora_ctx.state == LORA_STATE_DONE ||
 800399e:	2b0e      	cmp	r3, #14
 80039a0:	d10a      	bne.n	80039b8 <StartDefaultTask+0x208>
        LOG_INFO("[TX_TASK] ⚙️ LoRa State: %d, cmd_index: %d/%d", 
 80039a2:	7b3b      	ldrb	r3, [r7, #12]
 80039a4:	4619      	mov	r1, r3
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	4613      	mov	r3, r2
 80039ae:	460a      	mov	r2, r1
 80039b0:	4962      	ldr	r1, [pc, #392]	@ (8003b3c <StartDefaultTask+0x38c>)
 80039b2:	2001      	movs	r0, #1
 80039b4:	f001 febe 	bl	8005734 <LOGGER_SendFormatted>
                  lora_ctx.state, lora_ctx.cmd_index, lora_ctx.num_commands);
      }
      last_state = lora_ctx.state;
 80039b8:	7b3b      	ldrb	r3, [r7, #12]
 80039ba:	461a      	mov	r2, r3
 80039bc:	4b5e      	ldr	r3, [pc, #376]	@ (8003b38 <StartDefaultTask+0x388>)
 80039be:	601a      	str	r2, [r3, #0]
    }
    
    switch(lora_ctx.state) {
 80039c0:	7b3b      	ldrb	r3, [r7, #12]
 80039c2:	2b0e      	cmp	r3, #14
 80039c4:	f200 80d3 	bhi.w	8003b6e <StartDefaultTask+0x3be>
 80039c8:	a201      	add	r2, pc, #4	@ (adr r2, 80039d0 <StartDefaultTask+0x220>)
 80039ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ce:	bf00      	nop
 80039d0:	08003a0d 	.word	0x08003a0d
 80039d4:	08003a17 	.word	0x08003a17
 80039d8:	08003a2f 	.word	0x08003a2f
 80039dc:	08003a39 	.word	0x08003a39
 80039e0:	08003a87 	.word	0x08003a87
 80039e4:	08003a69 	.word	0x08003a69
 80039e8:	08003a87 	.word	0x08003a87
 80039ec:	08003a73 	.word	0x08003a73
 80039f0:	08003a87 	.word	0x08003a87
 80039f4:	08003a7d 	.word	0x08003a7d
 80039f8:	08003a87 	.word	0x08003a87
 80039fc:	08003a91 	.word	0x08003a91
 8003a00:	08003a9b 	.word	0x08003a9b
 8003a04:	08003b49 	.word	0x08003b49
 8003a08:	08003b49 	.word	0x08003b49
      case LORA_STATE_INIT:
        osDelay(500); // 초기화 상태는 빠르게
 8003a0c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003a10:	f011 fa7e 	bl	8014f10 <osDelay>
        break;
 8003a14:	e0b0      	b.n	8003b78 <StartDefaultTask+0x3c8>
      case LORA_STATE_SEND_CMD:
        LOG_INFO("[TX_TASK] 📤 Sending command %d/%d", 
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	4948      	ldr	r1, [pc, #288]	@ (8003b40 <StartDefaultTask+0x390>)
 8003a1e:	2001      	movs	r0, #1
 8003a20:	f001 fe88 	bl	8005734 <LOGGER_SendFormatted>
                lora_ctx.cmd_index + 1, lora_ctx.num_commands);
        osDelay(1000); // 명령어 전송 후 1초 대기
 8003a24:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003a28:	f011 fa72 	bl	8014f10 <osDelay>
        break;
 8003a2c:	e0a4      	b.n	8003b78 <StartDefaultTask+0x3c8>
      case LORA_STATE_WAIT_OK:
        // OK 응답 대기 중 - 조용히 대기
        osDelay(2000); // OK 응답 대기 중 2초 간격
 8003a2e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003a32:	f011 fa6d 	bl	8014f10 <osDelay>
        break;
 8003a36:	e09f      	b.n	8003b78 <StartDefaultTask+0x3c8>
      case LORA_STATE_SEND_JOIN:
        // JOIN 시도 시작 - SD 로깅 활성화
        if (g_sd_initialization_result == SDSTORAGE_OK && !LOGGER_IsSDLoggingEnabled()) {
 8003a38:	4b26      	ldr	r3, [pc, #152]	@ (8003ad4 <StartDefaultTask+0x324>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10e      	bne.n	8003a5e <StartDefaultTask+0x2ae>
 8003a40:	f001 fe48 	bl	80056d4 <LOGGER_IsSDLoggingEnabled>
 8003a44:	4603      	mov	r3, r0
 8003a46:	f083 0301 	eor.w	r3, r3, #1
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d006      	beq.n	8003a5e <StartDefaultTask+0x2ae>
          LOGGER_EnableSDLogging(true);
 8003a50:	2001      	movs	r0, #1
 8003a52:	f001 fe2f 	bl	80056b4 <LOGGER_EnableSDLogging>
          LOG_WARN("🗂️ SD logging enabled from JOIN attempts (WARN+ levels only)");
 8003a56:	493b      	ldr	r1, [pc, #236]	@ (8003b44 <StartDefaultTask+0x394>)
 8003a58:	2002      	movs	r0, #2
 8003a5a:	f001 fe6b 	bl	8005734 <LOGGER_SendFormatted>
        }
        osDelay(2000); // JOIN 명령어 전송 후 2초 대기
 8003a5e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003a62:	f011 fa55 	bl	8014f10 <osDelay>
        break;
 8003a66:	e087      	b.n	8003b78 <StartDefaultTask+0x3c8>
      case LORA_STATE_SEND_TIMEREQ:
        osDelay(1000); // TIMEREQ 명령어 전송 후 1초 대기
 8003a68:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003a6c:	f011 fa50 	bl	8014f10 <osDelay>
        break;
 8003a70:	e082      	b.n	8003b78 <StartDefaultTask+0x3c8>
      case LORA_STATE_SEND_LTIME:
        osDelay(1000); // LTIME 명령어 전송 후 1초 대기
 8003a72:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003a76:	f011 fa4b 	bl	8014f10 <osDelay>
        break;
 8003a7a:	e07d      	b.n	8003b78 <StartDefaultTask+0x3c8>
      case LORA_STATE_SEND_PERIODIC:
        osDelay(2000); // SEND 명령어 전송 후 2초 대기
 8003a7c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003a80:	f011 fa46 	bl	8014f10 <osDelay>
        break;
 8003a84:	e078      	b.n	8003b78 <StartDefaultTask+0x3c8>
      case LORA_STATE_WAIT_JOIN_OK:
      case LORA_STATE_WAIT_TIMEREQ_OK:
      case LORA_STATE_WAIT_LTIME_RESPONSE:
      case LORA_STATE_WAIT_SEND_RESPONSE:
        osDelay(3000); // 응답 대기 중 3초 간격
 8003a86:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003a8a:	f011 fa41 	bl	8014f10 <osDelay>
        break;
 8003a8e:	e073      	b.n	8003b78 <StartDefaultTask+0x3c8>
      case LORA_STATE_WAIT_SEND_INTERVAL:
        // 주기적 전송 대기 중 - 로그 출력 없이 조용히 대기
        osDelay(5000); // 주기적 전송 대기 중 5초 간격으로 체크
 8003a90:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003a94:	f011 fa3c 	bl	8014f10 <osDelay>
        break;
 8003a98:	e06e      	b.n	8003b78 <StartDefaultTask+0x3c8>
      case LORA_STATE_JOIN_RETRY:
        osDelay(5000); // 재시도 대기 5초
 8003a9a:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003a9e:	f011 fa37 	bl	8014f10 <osDelay>
        break;
 8003aa2:	e069      	b.n	8003b78 <StartDefaultTask+0x3c8>
 8003aa4:	0801aad8 	.word	0x0801aad8
 8003aa8:	0801ab24 	.word	0x0801ab24
 8003aac:	0801ab64 	.word	0x0801ab64
 8003ab0:	0801abac 	.word	0x0801abac
 8003ab4:	2000001c 	.word	0x2000001c
 8003ab8:	431bde83 	.word	0x431bde83
 8003abc:	0801abd8 	.word	0x0801abd8
 8003ac0:	0801abf0 	.word	0x0801abf0
 8003ac4:	0801ac18 	.word	0x0801ac18
 8003ac8:	0801ac64 	.word	0x0801ac64
 8003acc:	0801aca0 	.word	0x0801aca0
 8003ad0:	0801acdc 	.word	0x0801acdc
 8003ad4:	20000014 	.word	0x20000014
 8003ad8:	0801ad10 	.word	0x0801ad10
 8003adc:	0801ad40 	.word	0x0801ad40
 8003ae0:	0801ad74 	.word	0x0801ad74
 8003ae4:	0801ada0 	.word	0x0801ada0
 8003ae8:	0801add0 	.word	0x0801add0
 8003aec:	0801ae20 	.word	0x0801ae20
 8003af0:	0801ae58 	.word	0x0801ae58
 8003af4:	0801ae90 	.word	0x0801ae90
 8003af8:	0801aec8 	.word	0x0801aec8
 8003afc:	0801af00 	.word	0x0801af00
 8003b00:	0801af3c 	.word	0x0801af3c
 8003b04:	0801af44 	.word	0x0801af44
 8003b08:	0801af70 	.word	0x0801af70
 8003b0c:	0801afa4 	.word	0x0801afa4
 8003b10:	0801b004 	.word	0x0801b004
 8003b14:	0801b00c 	.word	0x0801b00c
 8003b18:	0801b028 	.word	0x0801b028
 8003b1c:	0801b058 	.word	0x0801b058
 8003b20:	0801b090 	.word	0x0801b090
 8003b24:	0801b0d8 	.word	0x0801b0d8
 8003b28:	0801b130 	.word	0x0801b130
 8003b2c:	0801b158 	.word	0x0801b158
 8003b30:	200023e8 	.word	0x200023e8
 8003b34:	200021e8 	.word	0x200021e8
 8003b38:	20000018 	.word	0x20000018
 8003b3c:	0801b188 	.word	0x0801b188
 8003b40:	0801b1bc 	.word	0x0801b1bc
 8003b44:	0801b1e4 	.word	0x0801b1e4
      case LORA_STATE_DONE:
      case LORA_STATE_ERROR:
        LOG_INFO("📤 [TX_TASK] LoRa process completed with state: %s", 
 8003b48:	7b3b      	ldrb	r3, [r7, #12]
 8003b4a:	2b0d      	cmp	r3, #13
 8003b4c:	d101      	bne.n	8003b52 <StartDefaultTask+0x3a2>
 8003b4e:	4b13      	ldr	r3, [pc, #76]	@ (8003b9c <StartDefaultTask+0x3ec>)
 8003b50:	e000      	b.n	8003b54 <StartDefaultTask+0x3a4>
 8003b52:	4b13      	ldr	r3, [pc, #76]	@ (8003ba0 <StartDefaultTask+0x3f0>)
 8003b54:	461a      	mov	r2, r3
 8003b56:	4913      	ldr	r1, [pc, #76]	@ (8003ba4 <StartDefaultTask+0x3f4>)
 8003b58:	2001      	movs	r0, #1
 8003b5a:	f001 fdeb 	bl	8005734 <LOGGER_SendFormatted>
                lora_ctx.state == LORA_STATE_DONE ? "DONE" : "ERROR");
        goto idle_loop;
 8003b5e:	bf00      	nop
    }
  }

idle_loop:
  /* Infinite idle loop */
  LOG_INFO("📤 [TX_TASK] Entering idle mode...");
 8003b60:	4911      	ldr	r1, [pc, #68]	@ (8003ba8 <StartDefaultTask+0x3f8>)
 8003b62:	2001      	movs	r0, #1
 8003b64:	f001 fde6 	bl	8005734 <LOGGER_SendFormatted>
  uint32_t idle_counter = 0;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b6c:	e005      	b.n	8003b7a <StartDefaultTask+0x3ca>
        osDelay(1000);
 8003b6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003b72:	f011 f9cd 	bl	8014f10 <osDelay>
        break;
 8003b76:	bf00      	nop
  {
 8003b78:	e6ef      	b.n	800395a <StartDefaultTask+0x1aa>
  
  for(;;)
  {
    // 30초마다 idle 상태 표시
    osDelay(30000);
 8003b7a:	f247 5030 	movw	r0, #30000	@ 0x7530
 8003b7e:	f011 f9c7 	bl	8014f10 <osDelay>
    idle_counter++;
 8003b82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b84:	3301      	adds	r3, #1
 8003b86:	64bb      	str	r3, [r7, #72]	@ 0x48
    LOG_INFO("📤 [TX_TASK] Idle mode: %lu minutes elapsed", idle_counter / 2);
 8003b88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b8a:	085b      	lsrs	r3, r3, #1
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	4907      	ldr	r1, [pc, #28]	@ (8003bac <StartDefaultTask+0x3fc>)
 8003b90:	2001      	movs	r0, #1
 8003b92:	f001 fdcf 	bl	8005734 <LOGGER_SendFormatted>
    osDelay(30000);
 8003b96:	bf00      	nop
 8003b98:	e7ef      	b.n	8003b7a <StartDefaultTask+0x3ca>
 8003b9a:	bf00      	nop
 8003b9c:	0801b228 	.word	0x0801b228
 8003ba0:	0801b230 	.word	0x0801b230
 8003ba4:	0801b238 	.word	0x0801b238
 8003ba8:	0801b270 	.word	0x0801b270
 8003bac:	0801b298 	.word	0x0801b298

08003bb0 <StartSDLoggingTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSDLoggingTask */
void StartSDLoggingTask(void const * argument)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b0b2      	sub	sp, #200	@ 0xc8
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSDLoggingTask */
  LOG_INFO("=== SD Logging Task Started ===");
 8003bb8:	4971      	ldr	r1, [pc, #452]	@ (8003d80 <StartSDLoggingTask+0x1d0>)
 8003bba:	2001      	movs	r0, #1
 8003bbc:	f001 fdba 	bl	8005734 <LOGGER_SendFormatted>
  
  // 시스템 안정화 대기 (다른 태스크들 먼저 시작)
  osDelay(3000);
 8003bc0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003bc4:	f011 f9a4 	bl	8014f10 <osDelay>
  
  // SD 초기화 시도 (타임아웃 있는 안전한 방식)
  LOG_INFO("[SD_TASK] 🔄 Attempting SD card initialization...");
 8003bc8:	496e      	ldr	r1, [pc, #440]	@ (8003d84 <StartSDLoggingTask+0x1d4>)
 8003bca:	2001      	movs	r0, #1
 8003bcc:	f001 fdb2 	bl	8005734 <LOGGER_SendFormatted>
  
  // 단계별 안전한 SD 초기화
  int init_attempts = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  const int MAX_INIT_ATTEMPTS = 3;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  
  for (init_attempts = 0; init_attempts < MAX_INIT_ATTEMPTS; init_attempts++) {
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003be2:	e054      	b.n	8003c8e <StartSDLoggingTask+0xde>
    LOG_INFO("[SD_TASK] Initialization attempt %d/%d", init_attempts + 1, MAX_INIT_ATTEMPTS);
 8003be4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003bee:	4966      	ldr	r1, [pc, #408]	@ (8003d88 <StartSDLoggingTask+0x1d8>)
 8003bf0:	2001      	movs	r0, #1
 8003bf2:	f001 fd9f 	bl	8005734 <LOGGER_SendFormatted>
    
    // SDStorage_Init을 타임아웃과 함께 호출
    uint32_t init_start_time = HAL_GetTick();
 8003bf6:	f002 fbb1 	bl	800635c <HAL_GetTick>
 8003bfa:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
    const uint32_t INIT_TIMEOUT_MS = 10000;  // 10초 타임아웃
 8003bfe:	f242 7310 	movw	r3, #10000	@ 0x2710
 8003c02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    
    // TODO: 실제로는 별도 태스크에서 SDStorage_Init 호출하고 여기서는 폴링
    // 현재는 간단히 직접 호출하되 타임아웃 체크
    int init_result = SDStorage_Init();
 8003c06:	f7fd fbed 	bl	80013e4 <SDStorage_Init>
 8003c0a:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    uint32_t init_duration = HAL_GetTick() - init_start_time;
 8003c0e:	f002 fba5 	bl	800635c <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    
    LOG_INFO("[SD_TASK] Init attempt %d took %lu ms, result: %d", 
 8003c1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c2e:	4957      	ldr	r1, [pc, #348]	@ (8003d8c <StartSDLoggingTask+0x1dc>)
 8003c30:	2001      	movs	r0, #1
 8003c32:	f001 fd7f 	bl	8005734 <LOGGER_SendFormatted>
             init_attempts + 1, init_duration, init_result);
    
    if (init_result == SDSTORAGE_OK) {
 8003c36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10a      	bne.n	8003c54 <StartSDLoggingTask+0xa4>
      LOG_INFO("[SD_TASK] ✅ SD initialization successful!");
 8003c3e:	4954      	ldr	r1, [pc, #336]	@ (8003d90 <StartSDLoggingTask+0x1e0>)
 8003c40:	2001      	movs	r0, #1
 8003c42:	f001 fd77 	bl	8005734 <LOGGER_SendFormatted>
      g_sd_initialization_result = SDSTORAGE_OK;
 8003c46:	4b53      	ldr	r3, [pc, #332]	@ (8003d94 <StartSDLoggingTask+0x1e4>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]
      g_sd_logging_active = true;
 8003c4c:	4b52      	ldr	r3, [pc, #328]	@ (8003d98 <StartSDLoggingTask+0x1e8>)
 8003c4e:	2201      	movs	r2, #1
 8003c50:	701a      	strb	r2, [r3, #0]
      break;
 8003c52:	e022      	b.n	8003c9a <StartSDLoggingTask+0xea>
    } else {
      LOG_WARN("[SD_TASK] ⚠️ SD init attempt %d failed (code: %d)", 
 8003c54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c5e:	494f      	ldr	r1, [pc, #316]	@ (8003d9c <StartSDLoggingTask+0x1ec>)
 8003c60:	2002      	movs	r0, #2
 8003c62:	f001 fd67 	bl	8005734 <LOGGER_SendFormatted>
               init_attempts + 1, init_result);
      
      if (init_attempts < MAX_INIT_ATTEMPTS - 1) {
 8003c66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003c70:	429a      	cmp	r2, r3
 8003c72:	da07      	bge.n	8003c84 <StartSDLoggingTask+0xd4>
        LOG_INFO("[SD_TASK] Waiting 5 seconds before retry...");
 8003c74:	494a      	ldr	r1, [pc, #296]	@ (8003da0 <StartSDLoggingTask+0x1f0>)
 8003c76:	2001      	movs	r0, #1
 8003c78:	f001 fd5c 	bl	8005734 <LOGGER_SendFormatted>
        osDelay(5000);
 8003c7c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003c80:	f011 f946 	bl	8014f10 <osDelay>
  for (init_attempts = 0; init_attempts < MAX_INIT_ATTEMPTS; init_attempts++) {
 8003c84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003c88:	3301      	adds	r3, #1
 8003c8a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003c8e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003c92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003c96:	429a      	cmp	r2, r3
 8003c98:	dba4      	blt.n	8003be4 <StartSDLoggingTask+0x34>
      }
    }
  }
  
  if (!g_sd_logging_active) {
 8003c9a:	4b3f      	ldr	r3, [pc, #252]	@ (8003d98 <StartSDLoggingTask+0x1e8>)
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	f083 0301 	eor.w	r3, r3, #1
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00c      	beq.n	8003cc2 <StartSDLoggingTask+0x112>
    LOG_ERROR("[SD_TASK] ❌ All SD initialization attempts failed");
 8003ca8:	493e      	ldr	r1, [pc, #248]	@ (8003da4 <StartSDLoggingTask+0x1f4>)
 8003caa:	2003      	movs	r0, #3
 8003cac:	f001 fd42 	bl	8005734 <LOGGER_SendFormatted>
    LOG_INFO("[SD_TASK] Continuing with terminal-only logging");
 8003cb0:	493d      	ldr	r1, [pc, #244]	@ (8003da8 <StartSDLoggingTask+0x1f8>)
 8003cb2:	2001      	movs	r0, #1
 8003cb4:	f001 fd3e 	bl	8005734 <LOGGER_SendFormatted>
    
    // SD 실패해도 태스크는 계속 실행 (나중에 재시도 가능)
    for(;;) {
      osDelay(60000);  // 1분마다 재시도 체크 (향후 확장)
 8003cb8:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8003cbc:	f011 f928 	bl	8014f10 <osDelay>
 8003cc0:	e7fa      	b.n	8003cb8 <StartSDLoggingTask+0x108>
    }
  }
  
  LOG_INFO("[SD_TASK] 🗂️ SD logging queue processing started");
 8003cc2:	493a      	ldr	r1, [pc, #232]	@ (8003dac <StartSDLoggingTask+0x1fc>)
 8003cc4:	2001      	movs	r0, #1
 8003cc6:	f001 fd35 	bl	8005734 <LOGGER_SendFormatted>
  
  // SD 로그 큐 처리 메인 루프
  for(;;)
  {
    SDLogEntry_t log_entry;
    osEvent event = osMessageGet(sdLogQueueHandle, 1000);  // 1초 타임아웃
 8003cca:	4b39      	ldr	r3, [pc, #228]	@ (8003db0 <StartSDLoggingTask+0x200>)
 8003ccc:	6819      	ldr	r1, [r3, #0]
 8003cce:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8003cd2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f011 f996 	bl	8015008 <osMessageGet>
    
    if (event.status == osEventMessage) {
 8003cdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ce0:	2b10      	cmp	r3, #16
 8003ce2:	d12d      	bne.n	8003d40 <StartSDLoggingTask+0x190>
      // 큐에서 로그 엔트리 수신
      log_entry = *((SDLogEntry_t*)event.value.p);
 8003ce4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ce8:	f107 0308 	add.w	r3, r7, #8
 8003cec:	4611      	mov	r1, r2
 8003cee:	2288      	movs	r2, #136	@ 0x88
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f013 ffca 	bl	8017c8a <memcpy>
      
      // SD에 안전하게 쓰기 (타임아웃 포함)
      uint32_t write_start = HAL_GetTick();
 8003cf6:	f002 fb31 	bl	800635c <HAL_GetTick>
 8003cfa:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
      int write_result = SDStorage_WriteLog(log_entry.message, log_entry.length);
 8003cfe:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003d02:	f107 0308 	add.w	r3, r7, #8
 8003d06:	4611      	mov	r1, r2
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fd fd89 	bl	8001820 <SDStorage_WriteLog>
 8003d0e:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
      uint32_t write_duration = HAL_GetTick() - write_start;
 8003d12:	f002 fb23 	bl	800635c <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
      
      if (write_result != SDSTORAGE_OK) {
 8003d22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <StartSDLoggingTask+0x190>
        // SD 쓰기 실패 - 터미널에만 에러 출력 (무한루프 방지)
        printf("[SD_TASK] Write failed (duration: %lu ms, result: %d)\n", 
 8003d2a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003d2e:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003d32:	4820      	ldr	r0, [pc, #128]	@ (8003db4 <StartSDLoggingTask+0x204>)
 8003d34:	f013 fdfe 	bl	8017934 <iprintf>
               write_duration, write_result);
        
        // SD 쓰기 실패 시 잠시 대기 후 재시도 여부 결정
        osDelay(1000);
 8003d38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003d3c:	f011 f8e8 	bl	8014f10 <osDelay>
      }
    }
    
    // 주기적으로 SD 상태 체크 (1분마다)
    static uint32_t status_check_counter = 0;
    status_check_counter++;
 8003d40:	4b1d      	ldr	r3, [pc, #116]	@ (8003db8 <StartSDLoggingTask+0x208>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3301      	adds	r3, #1
 8003d46:	4a1c      	ldr	r2, [pc, #112]	@ (8003db8 <StartSDLoggingTask+0x208>)
 8003d48:	6013      	str	r3, [r2, #0]
    if (status_check_counter % 60 == 0) {  // 60초마다
 8003d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8003db8 <StartSDLoggingTask+0x208>)
 8003d4c:	6819      	ldr	r1, [r3, #0]
 8003d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8003dbc <StartSDLoggingTask+0x20c>)
 8003d50:	fba3 2301 	umull	r2, r3, r3, r1
 8003d54:	095a      	lsrs	r2, r3, #5
 8003d56:	4613      	mov	r3, r2
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	1aca      	subs	r2, r1, r3
 8003d60:	2a00      	cmp	r2, #0
 8003d62:	d108      	bne.n	8003d76 <StartSDLoggingTask+0x1c6>
      if (SDStorage_IsReady()) {
 8003d64:	f7fd ffc4 	bl	8001cf0 <SDStorage_IsReady>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d103      	bne.n	8003d76 <StartSDLoggingTask+0x1c6>
        // SD 상태 정상
      } else {
        // SD 상태 이상 - 재초기화 시도 (향후 확장)
        LOG_WARN("[SD_TASK] SD card appears disconnected - monitoring");
 8003d6e:	4914      	ldr	r1, [pc, #80]	@ (8003dc0 <StartSDLoggingTask+0x210>)
 8003d70:	2002      	movs	r0, #2
 8003d72:	f001 fcdf 	bl	8005734 <LOGGER_SendFormatted>
      }
    }
    
    osDelay(50);  // CPU 부하 방지
 8003d76:	2032      	movs	r0, #50	@ 0x32
 8003d78:	f011 f8ca 	bl	8014f10 <osDelay>
  {
 8003d7c:	e7a5      	b.n	8003cca <StartSDLoggingTask+0x11a>
 8003d7e:	bf00      	nop
 8003d80:	0801b2c8 	.word	0x0801b2c8
 8003d84:	0801b2e8 	.word	0x0801b2e8
 8003d88:	0801b31c 	.word	0x0801b31c
 8003d8c:	0801b344 	.word	0x0801b344
 8003d90:	0801b378 	.word	0x0801b378
 8003d94:	20000014 	.word	0x20000014
 8003d98:	200021e0 	.word	0x200021e0
 8003d9c:	0801b3a4 	.word	0x0801b3a4
 8003da0:	0801b3dc 	.word	0x0801b3dc
 8003da4:	0801b408 	.word	0x0801b408
 8003da8:	0801b43c 	.word	0x0801b43c
 8003dac:	0801b46c 	.word	0x0801b46c
 8003db0:	200021dc 	.word	0x200021dc
 8003db4:	0801b4a4 	.word	0x0801b4a4
 8003db8:	2000245c 	.word	0x2000245c
 8003dbc:	88888889 	.word	0x88888889
 8003dc0:	0801b4dc 	.word	0x0801b4dc

08003dc4 <StartReceiveTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void const * argument)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8003dca:	af02      	add	r7, sp, #8
 8003dcc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003dd0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003dd4:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartReceiveTask */
  LOG_INFO("=== DMA-based Receive Task Started ===");
 8003dd6:	499b      	ldr	r1, [pc, #620]	@ (8004044 <StartReceiveTask+0x280>)
 8003dd8:	2001      	movs	r0, #1
 8003dda:	f001 fcab 	bl	8005734 <LOGGER_SendFormatted>
  
  // UART 초기화 대기
  osDelay(2000);
 8003dde:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003de2:	f011 f895 	bl	8014f10 <osDelay>
  
  // TDD 모듈들을 사용한 DMA 기반 수신 태스크
  char local_buffer[512];
  int local_bytes_received = 0;
 8003de6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003dea:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
  
  for(;;)
  {
    // TDD UART 모듈을 통한 DMA 기반 수신 체크
    UartStatus status = UART_Receive(local_buffer, sizeof(local_buffer), &local_bytes_received);
 8003df2:	f107 0208 	add.w	r2, r7, #8
 8003df6:	f107 030c 	add.w	r3, r7, #12
 8003dfa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f001 fe40 	bl	8005a84 <UART_Receive>
 8003e04:	4603      	mov	r3, r0
 8003e06:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    
    // 디버깅용: 수신 상태 체크 (에러 상태일 때만)
    static uint32_t debug_counter = 0;
    debug_counter++;
 8003e0a:	4b8f      	ldr	r3, [pc, #572]	@ (8004048 <StartReceiveTask+0x284>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	4a8d      	ldr	r2, [pc, #564]	@ (8004048 <StartReceiveTask+0x284>)
 8003e12:	6013      	str	r3, [r2, #0]
    if (debug_counter % 1200 == 0 && status != UART_STATUS_TIMEOUT) {  // 1분마다, 타임아웃 제외
 8003e14:	4b8c      	ldr	r3, [pc, #560]	@ (8004048 <StartReceiveTask+0x284>)
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	4b8c      	ldr	r3, [pc, #560]	@ (800404c <StartReceiveTask+0x288>)
 8003e1a:	fba3 1302 	umull	r1, r3, r3, r2
 8003e1e:	09db      	lsrs	r3, r3, #7
 8003e20:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8003e24:	fb01 f303 	mul.w	r3, r1, r3
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d116      	bne.n	8003e5c <StartReceiveTask+0x98>
 8003e2e:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d012      	beq.n	8003e5c <StartReceiveTask+0x98>
      LOG_DEBUG("[RX_TASK] Status check #%lu: status=%d, bytes=%d", 
 8003e36:	4b84      	ldr	r3, [pc, #528]	@ (8004048 <StartReceiveTask+0x284>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a84      	ldr	r2, [pc, #528]	@ (800404c <StartReceiveTask+0x288>)
 8003e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e40:	09da      	lsrs	r2, r3, #7
 8003e42:	f897 120e 	ldrb.w	r1, [r7, #526]	@ 0x20e
 8003e46:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003e4a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	460b      	mov	r3, r1
 8003e54:	497e      	ldr	r1, [pc, #504]	@ (8004050 <StartReceiveTask+0x28c>)
 8003e56:	2000      	movs	r0, #0
 8003e58:	f001 fc6c 	bl	8005734 <LOGGER_SendFormatted>
               debug_counter / 1200, status, local_bytes_received);
    }
    
    if (status == UART_STATUS_OK && local_bytes_received > 0) {
 8003e5c:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f040 80eb 	bne.w	800403c <StartReceiveTask+0x278>
 8003e66:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003e6a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f340 80e3 	ble.w	800403c <StartReceiveTask+0x278>
      // 수신 완료 - 간단한 수신 로그 + ResponseHandler 분석
      LOG_INFO("📥 RECV: '%.30s%s' (%d bytes)", 
 8003e76:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003e7a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b1e      	cmp	r3, #30
 8003e82:	dd01      	ble.n	8003e88 <StartReceiveTask+0xc4>
 8003e84:	4973      	ldr	r1, [pc, #460]	@ (8004054 <StartReceiveTask+0x290>)
 8003e86:	e000      	b.n	8003e8a <StartReceiveTask+0xc6>
 8003e88:	4973      	ldr	r1, [pc, #460]	@ (8004058 <StartReceiveTask+0x294>)
 8003e8a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003e8e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f107 020c 	add.w	r2, r7, #12
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	496f      	ldr	r1, [pc, #444]	@ (800405c <StartReceiveTask+0x298>)
 8003e9e:	2001      	movs	r0, #1
 8003ea0:	f001 fc48 	bl	8005734 <LOGGER_SendFormatted>
               local_buffer, 
               (local_bytes_received > 30) ? "..." : "", 
               local_bytes_received);
      
      // 기본적인 응답 타입 체크 (ResponseHandler에서 상세 로그 출력)
      if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 8003ea4:	f107 030c 	add.w	r3, r7, #12
 8003ea8:	496d      	ldr	r1, [pc, #436]	@ (8004060 <StartReceiveTask+0x29c>)
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f013 fe54 	bl	8017b58 <strstr>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d009      	beq.n	8003eca <StartReceiveTask+0x106>
        LOG_WARN("✅ JOIN CONFIRMED - Network joined successfully");
 8003eb6:	496b      	ldr	r1, [pc, #428]	@ (8004064 <StartReceiveTask+0x2a0>)
 8003eb8:	2002      	movs	r0, #2
 8003eba:	f001 fc3b 	bl	8005734 <LOGGER_SendFormatted>
        g_join_success_time = HAL_GetTick();  // JOIN 성공 시간 기록
 8003ebe:	f002 fa4d 	bl	800635c <HAL_GetTick>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	4a68      	ldr	r2, [pc, #416]	@ (8004068 <StartReceiveTask+0x2a4>)
 8003ec6:	6013      	str	r3, [r2, #0]
 8003ec8:	e01a      	b.n	8003f00 <StartReceiveTask+0x13c>
      } else if (strstr(local_buffer, "RAKwireless") != NULL) {
 8003eca:	f107 030c 	add.w	r3, r7, #12
 8003ece:	4967      	ldr	r1, [pc, #412]	@ (800406c <StartReceiveTask+0x2a8>)
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f013 fe41 	bl	8017b58 <strstr>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d004      	beq.n	8003ee6 <StartReceiveTask+0x122>
        LOG_DEBUG("📡 LoRa module boot message (ignored)");
 8003edc:	4964      	ldr	r1, [pc, #400]	@ (8004070 <StartReceiveTask+0x2ac>)
 8003ede:	2000      	movs	r0, #0
 8003ee0:	f001 fc28 	bl	8005734 <LOGGER_SendFormatted>
 8003ee4:	e00c      	b.n	8003f00 <StartReceiveTask+0x13c>
      } else if (ResponseHandler_IsTimeResponse(local_buffer)) {
 8003ee6:	f107 030c 	add.w	r3, r7, #12
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fd f936 	bl	800115c <ResponseHandler_IsTimeResponse>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d004      	beq.n	8003f00 <StartReceiveTask+0x13c>
        // 시간 응답 처리
        ResponseHandler_ParseTimeResponse(local_buffer);
 8003ef6:	f107 030c 	add.w	r3, r7, #12
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fd f954 	bl	80011a8 <ResponseHandler_ParseTimeResponse>
      }
      // 나머지 응답 분석은 아래 필터링 로직에서 한 번만 처리
      
      // 전역 변수에 복사 (다른 태스크에서 사용 가능)
      memcpy(rx_buffer, local_buffer, local_bytes_received);
 8003f00:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003f04:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f107 030c 	add.w	r3, r7, #12
 8003f10:	4619      	mov	r1, r3
 8003f12:	4858      	ldr	r0, [pc, #352]	@ (8004074 <StartReceiveTask+0x2b0>)
 8003f14:	f013 feb9 	bl	8017c8a <memcpy>
      rx_bytes_received = local_bytes_received;
 8003f18:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003f1c:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a55      	ldr	r2, [pc, #340]	@ (8004078 <StartReceiveTask+0x2b4>)
 8003f24:	6013      	str	r3, [r2, #0]
      
      // LoRa 상태 머신에 전달할 응답만 필터링
      bool is_lora_command_response = false;
 8003f26:	2300      	movs	r3, #0
 8003f28:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
      
      if (is_response_ok(local_buffer)) {
 8003f2c:	f107 030c 	add.w	r3, r7, #12
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fc ffc5 	bl	8000ec0 <is_response_ok>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <StartReceiveTask+0x180>
        // OK 응답 - LoRa 명령에 대한 응답
        is_lora_command_response = true;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8003f42:	e04b      	b.n	8003fdc <StartReceiveTask+0x218>
      } else if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 8003f44:	f107 030c 	add.w	r3, r7, #12
 8003f48:	4945      	ldr	r1, [pc, #276]	@ (8004060 <StartReceiveTask+0x29c>)
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f013 fe04 	bl	8017b58 <strstr>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <StartReceiveTask+0x19a>
        // JOIN 성공 응답
        is_lora_command_response = true;
 8003f56:	2301      	movs	r3, #1
 8003f58:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8003f5c:	e03e      	b.n	8003fdc <StartReceiveTask+0x218>
      } else if (ResponseHandler_IsTimeResponse(local_buffer)) {
 8003f5e:	f107 030c 	add.w	r3, r7, #12
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fd f8fa 	bl	800115c <ResponseHandler_IsTimeResponse>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <StartReceiveTask+0x1b2>
        // 시간 응답 - LoRa 상태 머신에도 전달해야 함 (상태 전환을 위해)
        is_lora_command_response = true;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8003f74:	e032      	b.n	8003fdc <StartReceiveTask+0x218>
      } else if (strstr(local_buffer, "+EVT:") != NULL) {
 8003f76:	f107 030c 	add.w	r3, r7, #12
 8003f7a:	4940      	ldr	r1, [pc, #256]	@ (800407c <StartReceiveTask+0x2b8>)
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f013 fdeb 	bl	8017b58 <strstr>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <StartReceiveTask+0x1cc>
        // 기타 LoRa 이벤트 응답들
        is_lora_command_response = true;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8003f8e:	e025      	b.n	8003fdc <StartReceiveTask+0x218>
      } else if (strstr(local_buffer, "RAKwireless") != NULL || strstr(local_buffer, "ORAKwireless") != NULL) {
 8003f90:	f107 030c 	add.w	r3, r7, #12
 8003f94:	4935      	ldr	r1, [pc, #212]	@ (800406c <StartReceiveTask+0x2a8>)
 8003f96:	4618      	mov	r0, r3
 8003f98:	f013 fdde 	bl	8017b58 <strstr>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d108      	bne.n	8003fb4 <StartReceiveTask+0x1f0>
 8003fa2:	f107 030c 	add.w	r3, r7, #12
 8003fa6:	4936      	ldr	r1, [pc, #216]	@ (8004080 <StartReceiveTask+0x2bc>)
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f013 fdd5 	bl	8017b58 <strstr>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d004      	beq.n	8003fbe <StartReceiveTask+0x1fa>
        // 부트 메시지 - LoRa 상태 머신에 전달하지 않음
        LOG_DEBUG("[RX_TASK] Boot message filtered out from LoRa state machine");
 8003fb4:	4933      	ldr	r1, [pc, #204]	@ (8004084 <StartReceiveTask+0x2c0>)
 8003fb6:	2000      	movs	r0, #0
 8003fb8:	f001 fbbc 	bl	8005734 <LOGGER_SendFormatted>
 8003fbc:	e00e      	b.n	8003fdc <StartReceiveTask+0x218>
      } else {
        // 기타 응답들 (ERROR, TIMEOUT 등)
        ResponseType response_type = ResponseHandler_ParseSendResponse(local_buffer);
 8003fbe:	f107 030c 	add.w	r3, r7, #12
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fd f874 	bl	80010b0 <ResponseHandler_ParseSendResponse>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
        if (response_type != RESPONSE_UNKNOWN) {
 8003fce:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 8003fd2:	2b03      	cmp	r3, #3
 8003fd4:	d002      	beq.n	8003fdc <StartReceiveTask+0x218>
          is_lora_command_response = true;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
        }
      }
      
      // LoRa 명령 응답만 전역 변수에 복사
      if (is_lora_command_response) {
 8003fdc:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01d      	beq.n	8004020 <StartReceiveTask+0x25c>
        memcpy(lora_rx_response, local_buffer, local_bytes_received);
 8003fe4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003fe8:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f107 030c 	add.w	r3, r7, #12
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4824      	ldr	r0, [pc, #144]	@ (8004088 <StartReceiveTask+0x2c4>)
 8003ff8:	f013 fe47 	bl	8017c8a <memcpy>
        lora_rx_response[local_bytes_received] = '\0';
 8003ffc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004000:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a20      	ldr	r2, [pc, #128]	@ (8004088 <StartReceiveTask+0x2c4>)
 8004008:	2100      	movs	r1, #0
 800400a:	54d1      	strb	r1, [r2, r3]
        lora_new_response = true;
 800400c:	4b1f      	ldr	r3, [pc, #124]	@ (800408c <StartReceiveTask+0x2c8>)
 800400e:	2201      	movs	r2, #1
 8004010:	701a      	strb	r2, [r3, #0]
        LOG_DEBUG("[RX_TASK] LoRa response forwarded to state machine: %.20s...", local_buffer);
 8004012:	f107 030c 	add.w	r3, r7, #12
 8004016:	461a      	mov	r2, r3
 8004018:	491d      	ldr	r1, [pc, #116]	@ (8004090 <StartReceiveTask+0x2cc>)
 800401a:	2000      	movs	r0, #0
 800401c:	f001 fb8a 	bl	8005734 <LOGGER_SendFormatted>
      }
      
      // 버퍼 클리어
      memset(local_buffer, 0, sizeof(local_buffer));
 8004020:	f107 030c 	add.w	r3, r7, #12
 8004024:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004028:	2100      	movs	r1, #0
 800402a:	4618      	mov	r0, r3
 800402c:	f013 fd6c 	bl	8017b08 <memset>
      local_bytes_received = 0;
 8004030:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004034:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]
    }
    
    // DMA 기반이므로 긴 지연으로 CPU 사용률 감소
    osDelay(50);  // 50ms 지연 (DMA가 백그라운드에서 처리하므로 빠른 폴링 불필요)
 800403c:	2032      	movs	r0, #50	@ 0x32
 800403e:	f010 ff67 	bl	8014f10 <osDelay>
  {
 8004042:	e6d6      	b.n	8003df2 <StartReceiveTask+0x2e>
 8004044:	0801b510 	.word	0x0801b510
 8004048:	20002460 	.word	0x20002460
 800404c:	1b4e81b5 	.word	0x1b4e81b5
 8004050:	0801b538 	.word	0x0801b538
 8004054:	0801b56c 	.word	0x0801b56c
 8004058:	0801b570 	.word	0x0801b570
 800405c:	0801b574 	.word	0x0801b574
 8004060:	0801b594 	.word	0x0801b594
 8004064:	0801b5a0 	.word	0x0801b5a0
 8004068:	2000244c 	.word	0x2000244c
 800406c:	0801b5d4 	.word	0x0801b5d4
 8004070:	0801b5e0 	.word	0x0801b5e0
 8004074:	200024c8 	.word	0x200024c8
 8004078:	200021e4 	.word	0x200021e4
 800407c:	0801b608 	.word	0x0801b608
 8004080:	0801b610 	.word	0x0801b610
 8004084:	0801b620 	.word	0x0801b620
 8004088:	200021e8 	.word	0x200021e8
 800408c:	200023e8 	.word	0x200023e8
 8004090:	0801b65c 	.word	0x0801b65c

08004094 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a04      	ldr	r2, [pc, #16]	@ (80040b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d101      	bne.n	80040aa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80040a6:	f002 f945 	bl	8006334 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80040aa:	bf00      	nop
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40001000 	.word	0x40001000

080040b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80040bc:	b672      	cpsid	i
}
 80040be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80040c0:	bf00      	nop
 80040c2:	e7fd      	b.n	80040c0 <Error_Handler+0x8>

080040c4 <MX_DMA_Init>:
  * @brief DMA Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA_Init(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80040ca:	4b10      	ldr	r3, [pc, #64]	@ (800410c <MX_DMA_Init+0x48>)
 80040cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ce:	4a0f      	ldr	r2, [pc, #60]	@ (800410c <MX_DMA_Init+0x48>)
 80040d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80040d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80040d6:	4b0d      	ldr	r3, [pc, #52]	@ (800410c <MX_DMA_Init+0x48>)
 80040d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040de:	607b      	str	r3, [r7, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration - USART6_RX */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80040e2:	2200      	movs	r2, #0
 80040e4:	2105      	movs	r1, #5
 80040e6:	2039      	movs	r0, #57	@ 0x39
 80040e8:	f002 fcb8 	bl	8006a5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80040ec:	2039      	movs	r0, #57	@ 0x39
 80040ee:	f002 fcd1 	bl	8006a94 <HAL_NVIC_EnableIRQ>
  
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80040f2:	2200      	movs	r2, #0
 80040f4:	2105      	movs	r1, #5
 80040f6:	2047      	movs	r0, #71	@ 0x47
 80040f8:	f002 fcb0 	bl	8006a5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 80040fc:	2047      	movs	r0, #71	@ 0x47
 80040fe:	f002 fcc9 	bl	8006a94 <HAL_NVIC_EnableIRQ>
}
 8004102:	bf00      	nop
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40023800 	.word	0x40023800

08004110 <MX_USART6_DMA_Init>:
  * @brief DMA2 Stream1 DMA configuration for USART6 RX
  * @param None
  * @retval None
  */
void MX_USART6_DMA_Init(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
  // DMA 이미 초기화되었는지 체크
  if (hdma_usart6_rx.Instance != NULL) {
 8004116:	4b1e      	ldr	r3, [pc, #120]	@ (8004190 <MX_USART6_DMA_Init+0x80>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d133      	bne.n	8004186 <MX_USART6_DMA_Init+0x76>
    return; // 이미 초기화됨
  }
  
  /* Configure DMA for USART6 RX */
  hdma_usart6_rx.Instance = DMA2_Stream1;
 800411e:	4b1c      	ldr	r3, [pc, #112]	@ (8004190 <MX_USART6_DMA_Init+0x80>)
 8004120:	4a1c      	ldr	r2, [pc, #112]	@ (8004194 <MX_USART6_DMA_Init+0x84>)
 8004122:	601a      	str	r2, [r3, #0]
  hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004124:	4b1a      	ldr	r3, [pc, #104]	@ (8004190 <MX_USART6_DMA_Init+0x80>)
 8004126:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800412a:	605a      	str	r2, [r3, #4]
  hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800412c:	4b18      	ldr	r3, [pc, #96]	@ (8004190 <MX_USART6_DMA_Init+0x80>)
 800412e:	2200      	movs	r2, #0
 8004130:	609a      	str	r2, [r3, #8]
  hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004132:	4b17      	ldr	r3, [pc, #92]	@ (8004190 <MX_USART6_DMA_Init+0x80>)
 8004134:	2200      	movs	r2, #0
 8004136:	60da      	str	r2, [r3, #12]
  hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004138:	4b15      	ldr	r3, [pc, #84]	@ (8004190 <MX_USART6_DMA_Init+0x80>)
 800413a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800413e:	611a      	str	r2, [r3, #16]
  hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004140:	4b13      	ldr	r3, [pc, #76]	@ (8004190 <MX_USART6_DMA_Init+0x80>)
 8004142:	2200      	movs	r2, #0
 8004144:	615a      	str	r2, [r3, #20]
  hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004146:	4b12      	ldr	r3, [pc, #72]	@ (8004190 <MX_USART6_DMA_Init+0x80>)
 8004148:	2200      	movs	r2, #0
 800414a:	619a      	str	r2, [r3, #24]
  hdma_usart6_rx.Init.Mode = DMA_NORMAL;    // 일반 모드로 변경
 800414c:	4b10      	ldr	r3, [pc, #64]	@ (8004190 <MX_USART6_DMA_Init+0x80>)
 800414e:	2200      	movs	r2, #0
 8004150:	61da      	str	r2, [r3, #28]
  hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004152:	4b0f      	ldr	r3, [pc, #60]	@ (8004190 <MX_USART6_DMA_Init+0x80>)
 8004154:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004158:	621a      	str	r2, [r3, #32]
  hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800415a:	4b0d      	ldr	r3, [pc, #52]	@ (8004190 <MX_USART6_DMA_Init+0x80>)
 800415c:	2200      	movs	r2, #0
 800415e:	625a      	str	r2, [r3, #36]	@ 0x24
  
  HAL_StatusTypeDef dma_result = HAL_DMA_Init(&hdma_usart6_rx);
 8004160:	480b      	ldr	r0, [pc, #44]	@ (8004190 <MX_USART6_DMA_Init+0x80>)
 8004162:	f002 fe11 	bl	8006d88 <HAL_DMA_Init>
 8004166:	4603      	mov	r3, r0
 8004168:	71fb      	strb	r3, [r7, #7]
  if (dma_result != HAL_OK)
 800416a:	79fb      	ldrb	r3, [r7, #7]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <MX_USART6_DMA_Init+0x68>
  {
    // 에러 처리하되 Error_Handler() 호출하지 않음 (시스템 중단 방지)
    hdma_usart6_rx.Instance = NULL; // 실패 표시
 8004170:	4b07      	ldr	r3, [pc, #28]	@ (8004190 <MX_USART6_DMA_Init+0x80>)
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
    return;
 8004176:	e007      	b.n	8004188 <MX_USART6_DMA_Init+0x78>
  }

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8004178:	4b07      	ldr	r3, [pc, #28]	@ (8004198 <MX_USART6_DMA_Init+0x88>)
 800417a:	4a05      	ldr	r2, [pc, #20]	@ (8004190 <MX_USART6_DMA_Init+0x80>)
 800417c:	675a      	str	r2, [r3, #116]	@ 0x74
 800417e:	4b04      	ldr	r3, [pc, #16]	@ (8004190 <MX_USART6_DMA_Init+0x80>)
 8004180:	4a05      	ldr	r2, [pc, #20]	@ (8004198 <MX_USART6_DMA_Init+0x88>)
 8004182:	639a      	str	r2, [r3, #56]	@ 0x38
 8004184:	e000      	b.n	8004188 <MX_USART6_DMA_Init+0x78>
    return; // 이미 초기화됨
 8004186:	bf00      	nop
}
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	200023ec 	.word	0x200023ec
 8004194:	40026428 	.word	0x40026428
 8004198:	20002114 	.word	0x20002114

0800419c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80041a2:	4b11      	ldr	r3, [pc, #68]	@ (80041e8 <HAL_MspInit+0x4c>)
 80041a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a6:	4a10      	ldr	r2, [pc, #64]	@ (80041e8 <HAL_MspInit+0x4c>)
 80041a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80041ae:	4b0e      	ldr	r3, [pc, #56]	@ (80041e8 <HAL_MspInit+0x4c>)
 80041b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041b6:	607b      	str	r3, [r7, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ba:	4b0b      	ldr	r3, [pc, #44]	@ (80041e8 <HAL_MspInit+0x4c>)
 80041bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041be:	4a0a      	ldr	r2, [pc, #40]	@ (80041e8 <HAL_MspInit+0x4c>)
 80041c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80041c6:	4b08      	ldr	r3, [pc, #32]	@ (80041e8 <HAL_MspInit+0x4c>)
 80041c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041ce:	603b      	str	r3, [r7, #0]
 80041d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80041d2:	2200      	movs	r2, #0
 80041d4:	210f      	movs	r1, #15
 80041d6:	f06f 0001 	mvn.w	r0, #1
 80041da:	f002 fc3f 	bl	8006a5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041de:	bf00      	nop
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	40023800 	.word	0x40023800

080041ec <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08a      	sub	sp, #40	@ 0x28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041f4:	f107 0314 	add.w	r3, r7, #20
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	605a      	str	r2, [r3, #4]
 80041fe:	609a      	str	r2, [r3, #8]
 8004200:	60da      	str	r2, [r3, #12]
 8004202:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a21      	ldr	r2, [pc, #132]	@ (8004290 <HAL_ADC_MspInit+0xa4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d13c      	bne.n	8004288 <HAL_ADC_MspInit+0x9c>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800420e:	4b21      	ldr	r3, [pc, #132]	@ (8004294 <HAL_ADC_MspInit+0xa8>)
 8004210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004212:	4a20      	ldr	r2, [pc, #128]	@ (8004294 <HAL_ADC_MspInit+0xa8>)
 8004214:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004218:	6453      	str	r3, [r2, #68]	@ 0x44
 800421a:	4b1e      	ldr	r3, [pc, #120]	@ (8004294 <HAL_ADC_MspInit+0xa8>)
 800421c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004226:	4b1b      	ldr	r3, [pc, #108]	@ (8004294 <HAL_ADC_MspInit+0xa8>)
 8004228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422a:	4a1a      	ldr	r2, [pc, #104]	@ (8004294 <HAL_ADC_MspInit+0xa8>)
 800422c:	f043 0320 	orr.w	r3, r3, #32
 8004230:	6313      	str	r3, [r2, #48]	@ 0x30
 8004232:	4b18      	ldr	r3, [pc, #96]	@ (8004294 <HAL_ADC_MspInit+0xa8>)
 8004234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004236:	f003 0320 	and.w	r3, r3, #32
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800423e:	4b15      	ldr	r3, [pc, #84]	@ (8004294 <HAL_ADC_MspInit+0xa8>)
 8004240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004242:	4a14      	ldr	r2, [pc, #80]	@ (8004294 <HAL_ADC_MspInit+0xa8>)
 8004244:	f043 0301 	orr.w	r3, r3, #1
 8004248:	6313      	str	r3, [r2, #48]	@ 0x30
 800424a:	4b12      	ldr	r3, [pc, #72]	@ (8004294 <HAL_ADC_MspInit+0xa8>)
 800424c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	60bb      	str	r3, [r7, #8]
 8004254:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8004256:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 800425a:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800425c:	2303      	movs	r3, #3
 800425e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004260:	2300      	movs	r3, #0
 8004262:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004264:	f107 0314 	add.w	r3, r7, #20
 8004268:	4619      	mov	r1, r3
 800426a:	480b      	ldr	r0, [pc, #44]	@ (8004298 <HAL_ADC_MspInit+0xac>)
 800426c:	f003 ff3a 	bl	80080e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8004270:	2301      	movs	r3, #1
 8004272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004274:	2303      	movs	r3, #3
 8004276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004278:	2300      	movs	r3, #0
 800427a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800427c:	f107 0314 	add.w	r3, r7, #20
 8004280:	4619      	mov	r1, r3
 8004282:	4806      	ldr	r0, [pc, #24]	@ (800429c <HAL_ADC_MspInit+0xb0>)
 8004284:	f003 ff2e 	bl	80080e4 <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 8004288:	bf00      	nop
 800428a:	3728      	adds	r7, #40	@ 0x28
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40012200 	.word	0x40012200
 8004294:	40023800 	.word	0x40023800
 8004298:	40021400 	.word	0x40021400
 800429c:	40020000 	.word	0x40020000

080042a0 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a0a      	ldr	r2, [pc, #40]	@ (80042d8 <HAL_CRC_MspInit+0x38>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d10b      	bne.n	80042ca <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80042b2:	4b0a      	ldr	r3, [pc, #40]	@ (80042dc <HAL_CRC_MspInit+0x3c>)
 80042b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b6:	4a09      	ldr	r2, [pc, #36]	@ (80042dc <HAL_CRC_MspInit+0x3c>)
 80042b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80042bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80042be:	4b07      	ldr	r3, [pc, #28]	@ (80042dc <HAL_CRC_MspInit+0x3c>)
 80042c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80042ca:	bf00      	nop
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	40023000 	.word	0x40023000
 80042dc:	40023800 	.word	0x40023800

080042e0 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08e      	sub	sp, #56	@ 0x38
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	605a      	str	r2, [r3, #4]
 80042f2:	609a      	str	r2, [r3, #8]
 80042f4:	60da      	str	r2, [r3, #12]
 80042f6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a50      	ldr	r2, [pc, #320]	@ (8004440 <HAL_DCMI_MspInit+0x160>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	f040 809a 	bne.w	8004438 <HAL_DCMI_MspInit+0x158>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8004304:	4b4f      	ldr	r3, [pc, #316]	@ (8004444 <HAL_DCMI_MspInit+0x164>)
 8004306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004308:	4a4e      	ldr	r2, [pc, #312]	@ (8004444 <HAL_DCMI_MspInit+0x164>)
 800430a:	f043 0301 	orr.w	r3, r3, #1
 800430e:	6353      	str	r3, [r2, #52]	@ 0x34
 8004310:	4b4c      	ldr	r3, [pc, #304]	@ (8004444 <HAL_DCMI_MspInit+0x164>)
 8004312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	623b      	str	r3, [r7, #32]
 800431a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800431c:	4b49      	ldr	r3, [pc, #292]	@ (8004444 <HAL_DCMI_MspInit+0x164>)
 800431e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004320:	4a48      	ldr	r2, [pc, #288]	@ (8004444 <HAL_DCMI_MspInit+0x164>)
 8004322:	f043 0310 	orr.w	r3, r3, #16
 8004326:	6313      	str	r3, [r2, #48]	@ 0x30
 8004328:	4b46      	ldr	r3, [pc, #280]	@ (8004444 <HAL_DCMI_MspInit+0x164>)
 800432a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432c:	f003 0310 	and.w	r3, r3, #16
 8004330:	61fb      	str	r3, [r7, #28]
 8004332:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004334:	4b43      	ldr	r3, [pc, #268]	@ (8004444 <HAL_DCMI_MspInit+0x164>)
 8004336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004338:	4a42      	ldr	r2, [pc, #264]	@ (8004444 <HAL_DCMI_MspInit+0x164>)
 800433a:	f043 0308 	orr.w	r3, r3, #8
 800433e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004340:	4b40      	ldr	r3, [pc, #256]	@ (8004444 <HAL_DCMI_MspInit+0x164>)
 8004342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	61bb      	str	r3, [r7, #24]
 800434a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800434c:	4b3d      	ldr	r3, [pc, #244]	@ (8004444 <HAL_DCMI_MspInit+0x164>)
 800434e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004350:	4a3c      	ldr	r2, [pc, #240]	@ (8004444 <HAL_DCMI_MspInit+0x164>)
 8004352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004356:	6313      	str	r3, [r2, #48]	@ 0x30
 8004358:	4b3a      	ldr	r3, [pc, #232]	@ (8004444 <HAL_DCMI_MspInit+0x164>)
 800435a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004360:	617b      	str	r3, [r7, #20]
 8004362:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004364:	4b37      	ldr	r3, [pc, #220]	@ (8004444 <HAL_DCMI_MspInit+0x164>)
 8004366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004368:	4a36      	ldr	r2, [pc, #216]	@ (8004444 <HAL_DCMI_MspInit+0x164>)
 800436a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800436e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004370:	4b34      	ldr	r3, [pc, #208]	@ (8004444 <HAL_DCMI_MspInit+0x164>)
 8004372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800437c:	4b31      	ldr	r3, [pc, #196]	@ (8004444 <HAL_DCMI_MspInit+0x164>)
 800437e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004380:	4a30      	ldr	r2, [pc, #192]	@ (8004444 <HAL_DCMI_MspInit+0x164>)
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	6313      	str	r3, [r2, #48]	@ 0x30
 8004388:	4b2e      	ldr	r3, [pc, #184]	@ (8004444 <HAL_DCMI_MspInit+0x164>)
 800438a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8004394:	2360      	movs	r3, #96	@ 0x60
 8004396:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004398:	2302      	movs	r3, #2
 800439a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439c:	2300      	movs	r3, #0
 800439e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043a0:	2300      	movs	r3, #0
 80043a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80043a4:	230d      	movs	r3, #13
 80043a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80043a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043ac:	4619      	mov	r1, r3
 80043ae:	4826      	ldr	r0, [pc, #152]	@ (8004448 <HAL_DCMI_MspInit+0x168>)
 80043b0:	f003 fe98 	bl	80080e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80043b4:	2308      	movs	r3, #8
 80043b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b8:	2302      	movs	r3, #2
 80043ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043bc:	2300      	movs	r3, #0
 80043be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043c0:	2300      	movs	r3, #0
 80043c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80043c4:	230d      	movs	r3, #13
 80043c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80043c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043cc:	4619      	mov	r1, r3
 80043ce:	481f      	ldr	r0, [pc, #124]	@ (800444c <HAL_DCMI_MspInit+0x16c>)
 80043d0:	f003 fe88 	bl	80080e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80043d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80043d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043da:	2302      	movs	r3, #2
 80043dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043de:	2300      	movs	r3, #0
 80043e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043e2:	2300      	movs	r3, #0
 80043e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80043e6:	230d      	movs	r3, #13
 80043e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80043ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043ee:	4619      	mov	r1, r3
 80043f0:	4817      	ldr	r0, [pc, #92]	@ (8004450 <HAL_DCMI_MspInit+0x170>)
 80043f2:	f003 fe77 	bl	80080e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80043f6:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 80043fa:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043fc:	2302      	movs	r3, #2
 80043fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004400:	2300      	movs	r3, #0
 8004402:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004404:	2300      	movs	r3, #0
 8004406:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004408:	230d      	movs	r3, #13
 800440a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800440c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004410:	4619      	mov	r1, r3
 8004412:	4810      	ldr	r0, [pc, #64]	@ (8004454 <HAL_DCMI_MspInit+0x174>)
 8004414:	f003 fe66 	bl	80080e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8004418:	2350      	movs	r3, #80	@ 0x50
 800441a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800441c:	2302      	movs	r3, #2
 800441e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004420:	2300      	movs	r3, #0
 8004422:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004424:	2300      	movs	r3, #0
 8004426:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004428:	230d      	movs	r3, #13
 800442a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800442c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004430:	4619      	mov	r1, r3
 8004432:	4809      	ldr	r0, [pc, #36]	@ (8004458 <HAL_DCMI_MspInit+0x178>)
 8004434:	f003 fe56 	bl	80080e4 <HAL_GPIO_Init>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8004438:	bf00      	nop
 800443a:	3738      	adds	r7, #56	@ 0x38
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	50050000 	.word	0x50050000
 8004444:	40023800 	.word	0x40023800
 8004448:	40021000 	.word	0x40021000
 800444c:	40020c00 	.word	0x40020c00
 8004450:	40021800 	.word	0x40021800
 8004454:	40021c00 	.word	0x40021c00
 8004458:	40020000 	.word	0x40020000

0800445c <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a0d      	ldr	r2, [pc, #52]	@ (80044a0 <HAL_DMA2D_MspInit+0x44>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d113      	bne.n	8004496 <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800446e:	4b0d      	ldr	r3, [pc, #52]	@ (80044a4 <HAL_DMA2D_MspInit+0x48>)
 8004470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004472:	4a0c      	ldr	r2, [pc, #48]	@ (80044a4 <HAL_DMA2D_MspInit+0x48>)
 8004474:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004478:	6313      	str	r3, [r2, #48]	@ 0x30
 800447a:	4b0a      	ldr	r3, [pc, #40]	@ (80044a4 <HAL_DMA2D_MspInit+0x48>)
 800447c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8004486:	2200      	movs	r2, #0
 8004488:	2105      	movs	r1, #5
 800448a:	205a      	movs	r0, #90	@ 0x5a
 800448c:	f002 fae6 	bl	8006a5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8004490:	205a      	movs	r0, #90	@ 0x5a
 8004492:	f002 faff 	bl	8006a94 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8004496:	bf00      	nop
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	4002b000 	.word	0x4002b000
 80044a4:	40023800 	.word	0x40023800

080044a8 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b08e      	sub	sp, #56	@ 0x38
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	605a      	str	r2, [r3, #4]
 80044ba:	609a      	str	r2, [r3, #8]
 80044bc:	60da      	str	r2, [r3, #12]
 80044be:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a3f      	ldr	r2, [pc, #252]	@ (80045c4 <HAL_ETH_MspInit+0x11c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d178      	bne.n	80045bc <HAL_ETH_MspInit+0x114>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80044ca:	4b3f      	ldr	r3, [pc, #252]	@ (80045c8 <HAL_ETH_MspInit+0x120>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ce:	4a3e      	ldr	r2, [pc, #248]	@ (80045c8 <HAL_ETH_MspInit+0x120>)
 80044d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80044d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80044d6:	4b3c      	ldr	r3, [pc, #240]	@ (80045c8 <HAL_ETH_MspInit+0x120>)
 80044d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044de:	623b      	str	r3, [r7, #32]
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	4b39      	ldr	r3, [pc, #228]	@ (80045c8 <HAL_ETH_MspInit+0x120>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e6:	4a38      	ldr	r2, [pc, #224]	@ (80045c8 <HAL_ETH_MspInit+0x120>)
 80044e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80044ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80044ee:	4b36      	ldr	r3, [pc, #216]	@ (80045c8 <HAL_ETH_MspInit+0x120>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80044f6:	61fb      	str	r3, [r7, #28]
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	4b33      	ldr	r3, [pc, #204]	@ (80045c8 <HAL_ETH_MspInit+0x120>)
 80044fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fe:	4a32      	ldr	r2, [pc, #200]	@ (80045c8 <HAL_ETH_MspInit+0x120>)
 8004500:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004504:	6313      	str	r3, [r2, #48]	@ 0x30
 8004506:	4b30      	ldr	r3, [pc, #192]	@ (80045c8 <HAL_ETH_MspInit+0x120>)
 8004508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800450e:	61bb      	str	r3, [r7, #24]
 8004510:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004512:	4b2d      	ldr	r3, [pc, #180]	@ (80045c8 <HAL_ETH_MspInit+0x120>)
 8004514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004516:	4a2c      	ldr	r2, [pc, #176]	@ (80045c8 <HAL_ETH_MspInit+0x120>)
 8004518:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800451c:	6313      	str	r3, [r2, #48]	@ 0x30
 800451e:	4b2a      	ldr	r3, [pc, #168]	@ (80045c8 <HAL_ETH_MspInit+0x120>)
 8004520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800452a:	4b27      	ldr	r3, [pc, #156]	@ (80045c8 <HAL_ETH_MspInit+0x120>)
 800452c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800452e:	4a26      	ldr	r2, [pc, #152]	@ (80045c8 <HAL_ETH_MspInit+0x120>)
 8004530:	f043 0304 	orr.w	r3, r3, #4
 8004534:	6313      	str	r3, [r2, #48]	@ 0x30
 8004536:	4b24      	ldr	r3, [pc, #144]	@ (80045c8 <HAL_ETH_MspInit+0x120>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004542:	4b21      	ldr	r3, [pc, #132]	@ (80045c8 <HAL_ETH_MspInit+0x120>)
 8004544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004546:	4a20      	ldr	r2, [pc, #128]	@ (80045c8 <HAL_ETH_MspInit+0x120>)
 8004548:	f043 0301 	orr.w	r3, r3, #1
 800454c:	6313      	str	r3, [r2, #48]	@ 0x30
 800454e:	4b1e      	ldr	r3, [pc, #120]	@ (80045c8 <HAL_ETH_MspInit+0x120>)
 8004550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800455a:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 800455e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004560:	2302      	movs	r3, #2
 8004562:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004564:	2300      	movs	r3, #0
 8004566:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004568:	2303      	movs	r3, #3
 800456a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800456c:	230b      	movs	r3, #11
 800456e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004570:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004574:	4619      	mov	r1, r3
 8004576:	4815      	ldr	r0, [pc, #84]	@ (80045cc <HAL_ETH_MspInit+0x124>)
 8004578:	f003 fdb4 	bl	80080e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800457c:	2332      	movs	r3, #50	@ 0x32
 800457e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004580:	2302      	movs	r3, #2
 8004582:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004584:	2300      	movs	r3, #0
 8004586:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004588:	2303      	movs	r3, #3
 800458a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800458c:	230b      	movs	r3, #11
 800458e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004590:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004594:	4619      	mov	r1, r3
 8004596:	480e      	ldr	r0, [pc, #56]	@ (80045d0 <HAL_ETH_MspInit+0x128>)
 8004598:	f003 fda4 	bl	80080e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800459c:	2386      	movs	r3, #134	@ 0x86
 800459e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a0:	2302      	movs	r3, #2
 80045a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045a8:	2303      	movs	r3, #3
 80045aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80045ac:	230b      	movs	r3, #11
 80045ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045b4:	4619      	mov	r1, r3
 80045b6:	4807      	ldr	r0, [pc, #28]	@ (80045d4 <HAL_ETH_MspInit+0x12c>)
 80045b8:	f003 fd94 	bl	80080e4 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 80045bc:	bf00      	nop
 80045be:	3738      	adds	r7, #56	@ 0x38
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40028000 	.word	0x40028000
 80045c8:	40023800 	.word	0x40023800
 80045cc:	40021800 	.word	0x40021800
 80045d0:	40020800 	.word	0x40020800
 80045d4:	40020000 	.word	0x40020000

080045d8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b0ac      	sub	sp, #176	@ 0xb0
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	605a      	str	r2, [r3, #4]
 80045ea:	609a      	str	r2, [r3, #8]
 80045ec:	60da      	str	r2, [r3, #12]
 80045ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80045f0:	f107 0318 	add.w	r3, r7, #24
 80045f4:	2284      	movs	r2, #132	@ 0x84
 80045f6:	2100      	movs	r1, #0
 80045f8:	4618      	mov	r0, r3
 80045fa:	f013 fa85 	bl	8017b08 <memset>
  if(hi2c->Instance==I2C1)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a44      	ldr	r2, [pc, #272]	@ (8004714 <HAL_I2C_MspInit+0x13c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d13d      	bne.n	8004684 <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004608:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800460c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800460e:	2300      	movs	r3, #0
 8004610:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004612:	f107 0318 	add.w	r3, r7, #24
 8004616:	4618      	mov	r0, r3
 8004618:	f006 ff0c 	bl	800b434 <HAL_RCCEx_PeriphCLKConfig>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004622:	f7ff fd49 	bl	80040b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004626:	4b3c      	ldr	r3, [pc, #240]	@ (8004718 <HAL_I2C_MspInit+0x140>)
 8004628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462a:	4a3b      	ldr	r2, [pc, #236]	@ (8004718 <HAL_I2C_MspInit+0x140>)
 800462c:	f043 0302 	orr.w	r3, r3, #2
 8004630:	6313      	str	r3, [r2, #48]	@ 0x30
 8004632:	4b39      	ldr	r3, [pc, #228]	@ (8004718 <HAL_I2C_MspInit+0x140>)
 8004634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800463e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004642:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004646:	2312      	movs	r3, #18
 8004648:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800464c:	2301      	movs	r3, #1
 800464e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004652:	2300      	movs	r3, #0
 8004654:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004658:	2304      	movs	r3, #4
 800465a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800465e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004662:	4619      	mov	r1, r3
 8004664:	482d      	ldr	r0, [pc, #180]	@ (800471c <HAL_I2C_MspInit+0x144>)
 8004666:	f003 fd3d 	bl	80080e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800466a:	4b2b      	ldr	r3, [pc, #172]	@ (8004718 <HAL_I2C_MspInit+0x140>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466e:	4a2a      	ldr	r2, [pc, #168]	@ (8004718 <HAL_I2C_MspInit+0x140>)
 8004670:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004674:	6413      	str	r3, [r2, #64]	@ 0x40
 8004676:	4b28      	ldr	r3, [pc, #160]	@ (8004718 <HAL_I2C_MspInit+0x140>)
 8004678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800467e:	613b      	str	r3, [r7, #16]
 8004680:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004682:	e042      	b.n	800470a <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a25      	ldr	r2, [pc, #148]	@ (8004720 <HAL_I2C_MspInit+0x148>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d13d      	bne.n	800470a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800468e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004692:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8004694:	2300      	movs	r3, #0
 8004696:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800469a:	f107 0318 	add.w	r3, r7, #24
 800469e:	4618      	mov	r0, r3
 80046a0:	f006 fec8 	bl	800b434 <HAL_RCCEx_PeriphCLKConfig>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80046aa:	f7ff fd05 	bl	80040b8 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80046ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004718 <HAL_I2C_MspInit+0x140>)
 80046b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b2:	4a19      	ldr	r2, [pc, #100]	@ (8004718 <HAL_I2C_MspInit+0x140>)
 80046b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80046ba:	4b17      	ldr	r3, [pc, #92]	@ (8004718 <HAL_I2C_MspInit+0x140>)
 80046bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80046c6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80046ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046ce:	2312      	movs	r3, #18
 80046d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046d4:	2301      	movs	r3, #1
 80046d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046da:	2303      	movs	r3, #3
 80046dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80046e0:	2304      	movs	r3, #4
 80046e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80046e6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80046ea:	4619      	mov	r1, r3
 80046ec:	480d      	ldr	r0, [pc, #52]	@ (8004724 <HAL_I2C_MspInit+0x14c>)
 80046ee:	f003 fcf9 	bl	80080e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80046f2:	4b09      	ldr	r3, [pc, #36]	@ (8004718 <HAL_I2C_MspInit+0x140>)
 80046f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f6:	4a08      	ldr	r2, [pc, #32]	@ (8004718 <HAL_I2C_MspInit+0x140>)
 80046f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80046fe:	4b06      	ldr	r3, [pc, #24]	@ (8004718 <HAL_I2C_MspInit+0x140>)
 8004700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004702:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004706:	60bb      	str	r3, [r7, #8]
 8004708:	68bb      	ldr	r3, [r7, #8]
}
 800470a:	bf00      	nop
 800470c:	37b0      	adds	r7, #176	@ 0xb0
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	40005400 	.word	0x40005400
 8004718:	40023800 	.word	0x40023800
 800471c:	40020400 	.word	0x40020400
 8004720:	40005c00 	.word	0x40005c00
 8004724:	40021c00 	.word	0x40021c00

08004728 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b08e      	sub	sp, #56	@ 0x38
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004730:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	605a      	str	r2, [r3, #4]
 800473a:	609a      	str	r2, [r3, #8]
 800473c:	60da      	str	r2, [r3, #12]
 800473e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a55      	ldr	r2, [pc, #340]	@ (800489c <HAL_LTDC_MspInit+0x174>)
 8004746:	4293      	cmp	r3, r2
 8004748:	f040 80a3 	bne.w	8004892 <HAL_LTDC_MspInit+0x16a>
  {
    /* USER CODE BEGIN LTDC_MspInit 0 */

    /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800474c:	4b54      	ldr	r3, [pc, #336]	@ (80048a0 <HAL_LTDC_MspInit+0x178>)
 800474e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004750:	4a53      	ldr	r2, [pc, #332]	@ (80048a0 <HAL_LTDC_MspInit+0x178>)
 8004752:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004756:	6453      	str	r3, [r2, #68]	@ 0x44
 8004758:	4b51      	ldr	r3, [pc, #324]	@ (80048a0 <HAL_LTDC_MspInit+0x178>)
 800475a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004760:	623b      	str	r3, [r7, #32]
 8004762:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004764:	4b4e      	ldr	r3, [pc, #312]	@ (80048a0 <HAL_LTDC_MspInit+0x178>)
 8004766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004768:	4a4d      	ldr	r2, [pc, #308]	@ (80048a0 <HAL_LTDC_MspInit+0x178>)
 800476a:	f043 0310 	orr.w	r3, r3, #16
 800476e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004770:	4b4b      	ldr	r3, [pc, #300]	@ (80048a0 <HAL_LTDC_MspInit+0x178>)
 8004772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004774:	f003 0310 	and.w	r3, r3, #16
 8004778:	61fb      	str	r3, [r7, #28]
 800477a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800477c:	4b48      	ldr	r3, [pc, #288]	@ (80048a0 <HAL_LTDC_MspInit+0x178>)
 800477e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004780:	4a47      	ldr	r2, [pc, #284]	@ (80048a0 <HAL_LTDC_MspInit+0x178>)
 8004782:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004786:	6313      	str	r3, [r2, #48]	@ 0x30
 8004788:	4b45      	ldr	r3, [pc, #276]	@ (80048a0 <HAL_LTDC_MspInit+0x178>)
 800478a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004790:	61bb      	str	r3, [r7, #24]
 8004792:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8004794:	4b42      	ldr	r3, [pc, #264]	@ (80048a0 <HAL_LTDC_MspInit+0x178>)
 8004796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004798:	4a41      	ldr	r2, [pc, #260]	@ (80048a0 <HAL_LTDC_MspInit+0x178>)
 800479a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800479e:	6313      	str	r3, [r2, #48]	@ 0x30
 80047a0:	4b3f      	ldr	r3, [pc, #252]	@ (80048a0 <HAL_LTDC_MspInit+0x178>)
 80047a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80047ac:	4b3c      	ldr	r3, [pc, #240]	@ (80048a0 <HAL_LTDC_MspInit+0x178>)
 80047ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b0:	4a3b      	ldr	r2, [pc, #236]	@ (80048a0 <HAL_LTDC_MspInit+0x178>)
 80047b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80047b8:	4b39      	ldr	r3, [pc, #228]	@ (80048a0 <HAL_LTDC_MspInit+0x178>)
 80047ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80047c4:	4b36      	ldr	r3, [pc, #216]	@ (80048a0 <HAL_LTDC_MspInit+0x178>)
 80047c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c8:	4a35      	ldr	r2, [pc, #212]	@ (80048a0 <HAL_LTDC_MspInit+0x178>)
 80047ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80047d0:	4b33      	ldr	r3, [pc, #204]	@ (80048a0 <HAL_LTDC_MspInit+0x178>)
 80047d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80047dc:	2310      	movs	r3, #16
 80047de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047e0:	2302      	movs	r3, #2
 80047e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e4:	2300      	movs	r3, #0
 80047e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047e8:	2300      	movs	r3, #0
 80047ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80047ec:	230e      	movs	r3, #14
 80047ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80047f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047f4:	4619      	mov	r1, r3
 80047f6:	482b      	ldr	r0, [pc, #172]	@ (80048a4 <HAL_LTDC_MspInit+0x17c>)
 80047f8:	f003 fc74 	bl	80080e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80047fc:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8004800:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004802:	2302      	movs	r3, #2
 8004804:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004806:	2300      	movs	r3, #0
 8004808:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800480a:	2300      	movs	r3, #0
 800480c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800480e:	230e      	movs	r3, #14
 8004810:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004816:	4619      	mov	r1, r3
 8004818:	4823      	ldr	r0, [pc, #140]	@ (80048a8 <HAL_LTDC_MspInit+0x180>)
 800481a:	f003 fc63 	bl	80080e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800481e:	23f7      	movs	r3, #247	@ 0xf7
 8004820:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004822:	2302      	movs	r3, #2
 8004824:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004826:	2300      	movs	r3, #0
 8004828:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800482a:	2300      	movs	r3, #0
 800482c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800482e:	230e      	movs	r3, #14
 8004830:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8004832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004836:	4619      	mov	r1, r3
 8004838:	481c      	ldr	r0, [pc, #112]	@ (80048ac <HAL_LTDC_MspInit+0x184>)
 800483a:	f003 fc53 	bl	80080e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800483e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004842:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004844:	2302      	movs	r3, #2
 8004846:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004848:	2300      	movs	r3, #0
 800484a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800484c:	2300      	movs	r3, #0
 800484e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004850:	2309      	movs	r3, #9
 8004852:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8004854:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004858:	4619      	mov	r1, r3
 800485a:	4815      	ldr	r0, [pc, #84]	@ (80048b0 <HAL_LTDC_MspInit+0x188>)
 800485c:	f003 fc42 	bl	80080e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8004860:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8004864:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004866:	2302      	movs	r3, #2
 8004868:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486a:	2300      	movs	r3, #0
 800486c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800486e:	2300      	movs	r3, #0
 8004870:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004872:	230e      	movs	r3, #14
 8004874:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004876:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800487a:	4619      	mov	r1, r3
 800487c:	480d      	ldr	r0, [pc, #52]	@ (80048b4 <HAL_LTDC_MspInit+0x18c>)
 800487e:	f003 fc31 	bl	80080e4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8004882:	2200      	movs	r2, #0
 8004884:	2105      	movs	r1, #5
 8004886:	2058      	movs	r0, #88	@ 0x58
 8004888:	f002 f8e8 	bl	8006a5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800488c:	2058      	movs	r0, #88	@ 0x58
 800488e:	f002 f901 	bl	8006a94 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 8004892:	bf00      	nop
 8004894:	3738      	adds	r7, #56	@ 0x38
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	40016800 	.word	0x40016800
 80048a0:	40023800 	.word	0x40023800
 80048a4:	40021000 	.word	0x40021000
 80048a8:	40022400 	.word	0x40022400
 80048ac:	40022800 	.word	0x40022800
 80048b0:	40021800 	.word	0x40021800
 80048b4:	40022000 	.word	0x40022000

080048b8 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b08c      	sub	sp, #48	@ 0x30
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048c0:	f107 031c 	add.w	r3, r7, #28
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	605a      	str	r2, [r3, #4]
 80048ca:	609a      	str	r2, [r3, #8]
 80048cc:	60da      	str	r2, [r3, #12]
 80048ce:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a3b      	ldr	r2, [pc, #236]	@ (80049c4 <HAL_QSPI_MspInit+0x10c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d170      	bne.n	80049bc <HAL_QSPI_MspInit+0x104>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80048da:	4b3b      	ldr	r3, [pc, #236]	@ (80049c8 <HAL_QSPI_MspInit+0x110>)
 80048dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048de:	4a3a      	ldr	r2, [pc, #232]	@ (80049c8 <HAL_QSPI_MspInit+0x110>)
 80048e0:	f043 0302 	orr.w	r3, r3, #2
 80048e4:	6393      	str	r3, [r2, #56]	@ 0x38
 80048e6:	4b38      	ldr	r3, [pc, #224]	@ (80049c8 <HAL_QSPI_MspInit+0x110>)
 80048e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	61bb      	str	r3, [r7, #24]
 80048f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80048f2:	4b35      	ldr	r3, [pc, #212]	@ (80049c8 <HAL_QSPI_MspInit+0x110>)
 80048f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f6:	4a34      	ldr	r2, [pc, #208]	@ (80049c8 <HAL_QSPI_MspInit+0x110>)
 80048f8:	f043 0310 	orr.w	r3, r3, #16
 80048fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80048fe:	4b32      	ldr	r3, [pc, #200]	@ (80049c8 <HAL_QSPI_MspInit+0x110>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004902:	f003 0310 	and.w	r3, r3, #16
 8004906:	617b      	str	r3, [r7, #20]
 8004908:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800490a:	4b2f      	ldr	r3, [pc, #188]	@ (80049c8 <HAL_QSPI_MspInit+0x110>)
 800490c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490e:	4a2e      	ldr	r2, [pc, #184]	@ (80049c8 <HAL_QSPI_MspInit+0x110>)
 8004910:	f043 0302 	orr.w	r3, r3, #2
 8004914:	6313      	str	r3, [r2, #48]	@ 0x30
 8004916:	4b2c      	ldr	r3, [pc, #176]	@ (80049c8 <HAL_QSPI_MspInit+0x110>)
 8004918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	613b      	str	r3, [r7, #16]
 8004920:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004922:	4b29      	ldr	r3, [pc, #164]	@ (80049c8 <HAL_QSPI_MspInit+0x110>)
 8004924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004926:	4a28      	ldr	r2, [pc, #160]	@ (80049c8 <HAL_QSPI_MspInit+0x110>)
 8004928:	f043 0308 	orr.w	r3, r3, #8
 800492c:	6313      	str	r3, [r2, #48]	@ 0x30
 800492e:	4b26      	ldr	r3, [pc, #152]	@ (80049c8 <HAL_QSPI_MspInit+0x110>)
 8004930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800493a:	2304      	movs	r3, #4
 800493c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800493e:	2302      	movs	r3, #2
 8004940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004942:	2300      	movs	r3, #0
 8004944:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004946:	2303      	movs	r3, #3
 8004948:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800494a:	2309      	movs	r3, #9
 800494c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800494e:	f107 031c 	add.w	r3, r7, #28
 8004952:	4619      	mov	r1, r3
 8004954:	481d      	ldr	r0, [pc, #116]	@ (80049cc <HAL_QSPI_MspInit+0x114>)
 8004956:	f003 fbc5 	bl	80080e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800495a:	2340      	movs	r3, #64	@ 0x40
 800495c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800495e:	2302      	movs	r3, #2
 8004960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004962:	2300      	movs	r3, #0
 8004964:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004966:	2303      	movs	r3, #3
 8004968:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800496a:	230a      	movs	r3, #10
 800496c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800496e:	f107 031c 	add.w	r3, r7, #28
 8004972:	4619      	mov	r1, r3
 8004974:	4816      	ldr	r0, [pc, #88]	@ (80049d0 <HAL_QSPI_MspInit+0x118>)
 8004976:	f003 fbb5 	bl	80080e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800497a:	2304      	movs	r3, #4
 800497c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800497e:	2302      	movs	r3, #2
 8004980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004982:	2300      	movs	r3, #0
 8004984:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004986:	2303      	movs	r3, #3
 8004988:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800498a:	2309      	movs	r3, #9
 800498c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800498e:	f107 031c 	add.w	r3, r7, #28
 8004992:	4619      	mov	r1, r3
 8004994:	480e      	ldr	r0, [pc, #56]	@ (80049d0 <HAL_QSPI_MspInit+0x118>)
 8004996:	f003 fba5 	bl	80080e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800499a:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800499e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049a0:	2302      	movs	r3, #2
 80049a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a4:	2300      	movs	r3, #0
 80049a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049a8:	2303      	movs	r3, #3
 80049aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80049ac:	2309      	movs	r3, #9
 80049ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049b0:	f107 031c 	add.w	r3, r7, #28
 80049b4:	4619      	mov	r1, r3
 80049b6:	4807      	ldr	r0, [pc, #28]	@ (80049d4 <HAL_QSPI_MspInit+0x11c>)
 80049b8:	f003 fb94 	bl	80080e4 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80049bc:	bf00      	nop
 80049be:	3730      	adds	r7, #48	@ 0x30
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	a0001000 	.word	0xa0001000
 80049c8:	40023800 	.word	0x40023800
 80049cc:	40021000 	.word	0x40021000
 80049d0:	40020400 	.word	0x40020400
 80049d4:	40020c00 	.word	0x40020c00

080049d8 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b0a4      	sub	sp, #144	@ 0x90
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80049e0:	f107 030c 	add.w	r3, r7, #12
 80049e4:	2284      	movs	r2, #132	@ 0x84
 80049e6:	2100      	movs	r1, #0
 80049e8:	4618      	mov	r0, r3
 80049ea:	f013 f88d 	bl	8017b08 <memset>
  if(hrtc->Instance==RTC)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a0e      	ldr	r2, [pc, #56]	@ (8004a2c <HAL_RTC_MspInit+0x54>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d114      	bne.n	8004a22 <HAL_RTC_MspInit+0x4a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80049f8:	2320      	movs	r3, #32
 80049fa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80049fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a02:	f107 030c 	add.w	r3, r7, #12
 8004a06:	4618      	mov	r0, r3
 8004a08:	f006 fd14 	bl	800b434 <HAL_RCCEx_PeriphCLKConfig>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004a12:	f7ff fb51 	bl	80040b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004a16:	4b06      	ldr	r3, [pc, #24]	@ (8004a30 <HAL_RTC_MspInit+0x58>)
 8004a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1a:	4a05      	ldr	r2, [pc, #20]	@ (8004a30 <HAL_RTC_MspInit+0x58>)
 8004a1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a20:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8004a22:	bf00      	nop
 8004a24:	3790      	adds	r7, #144	@ 0x90
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40002800 	.word	0x40002800
 8004a30:	40023800 	.word	0x40023800

08004a34 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08a      	sub	sp, #40	@ 0x28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a3c:	f107 0314 	add.w	r3, r7, #20
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	605a      	str	r2, [r3, #4]
 8004a46:	609a      	str	r2, [r3, #8]
 8004a48:	60da      	str	r2, [r3, #12]
 8004a4a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a25      	ldr	r2, [pc, #148]	@ (8004ae8 <HAL_SD_MspInit+0xb4>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d144      	bne.n	8004ae0 <HAL_SD_MspInit+0xac>
  {
    /* USER CODE BEGIN SDMMC1_MspInit 0 */

    /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004a56:	4b25      	ldr	r3, [pc, #148]	@ (8004aec <HAL_SD_MspInit+0xb8>)
 8004a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a5a:	4a24      	ldr	r2, [pc, #144]	@ (8004aec <HAL_SD_MspInit+0xb8>)
 8004a5c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004a60:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a62:	4b22      	ldr	r3, [pc, #136]	@ (8004aec <HAL_SD_MspInit+0xb8>)
 8004a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a6a:	613b      	str	r3, [r7, #16]
 8004a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8004aec <HAL_SD_MspInit+0xb8>)
 8004a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a72:	4a1e      	ldr	r2, [pc, #120]	@ (8004aec <HAL_SD_MspInit+0xb8>)
 8004a74:	f043 0304 	orr.w	r3, r3, #4
 8004a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8004aec <HAL_SD_MspInit+0xb8>)
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7e:	f003 0304 	and.w	r3, r3, #4
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a86:	4b19      	ldr	r3, [pc, #100]	@ (8004aec <HAL_SD_MspInit+0xb8>)
 8004a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a8a:	4a18      	ldr	r2, [pc, #96]	@ (8004aec <HAL_SD_MspInit+0xb8>)
 8004a8c:	f043 0308 	orr.w	r3, r3, #8
 8004a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a92:	4b16      	ldr	r3, [pc, #88]	@ (8004aec <HAL_SD_MspInit+0xb8>)
 8004a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a96:	f003 0308 	and.w	r3, r3, #8
 8004a9a:	60bb      	str	r3, [r7, #8]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8004a9e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8004aa2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aac:	2303      	movs	r3, #3
 8004aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004ab0:	230c      	movs	r3, #12
 8004ab2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ab4:	f107 0314 	add.w	r3, r7, #20
 8004ab8:	4619      	mov	r1, r3
 8004aba:	480d      	ldr	r0, [pc, #52]	@ (8004af0 <HAL_SD_MspInit+0xbc>)
 8004abc:	f003 fb12 	bl	80080e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8004ac0:	2304      	movs	r3, #4
 8004ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004acc:	2303      	movs	r3, #3
 8004ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004ad0:	230c      	movs	r3, #12
 8004ad2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8004ad4:	f107 0314 	add.w	r3, r7, #20
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4806      	ldr	r0, [pc, #24]	@ (8004af4 <HAL_SD_MspInit+0xc0>)
 8004adc:	f003 fb02 	bl	80080e4 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8004ae0:	bf00      	nop
 8004ae2:	3728      	adds	r7, #40	@ 0x28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40012c00 	.word	0x40012c00
 8004aec:	40023800 	.word	0x40023800
 8004af0:	40020800 	.word	0x40020800
 8004af4:	40020c00 	.word	0x40020c00

08004af8 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b0aa      	sub	sp, #168	@ 0xa8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b00:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	605a      	str	r2, [r3, #4]
 8004b0a:	609a      	str	r2, [r3, #8]
 8004b0c:	60da      	str	r2, [r3, #12]
 8004b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004b10:	f107 0310 	add.w	r3, r7, #16
 8004b14:	2284      	movs	r2, #132	@ 0x84
 8004b16:	2100      	movs	r1, #0
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f012 fff5 	bl	8017b08 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8004b26:	d143      	bne.n	8004bb0 <HAL_SPDIFRX_MspInit+0xb8>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8004b28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b2c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8004b2e:	2364      	movs	r3, #100	@ 0x64
 8004b30:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8004b32:	2302      	movs	r3, #2
 8004b34:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8004b36:	2302      	movs	r3, #2
 8004b38:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b42:	f107 0310 	add.w	r3, r7, #16
 8004b46:	4618      	mov	r0, r3
 8004b48:	f006 fc74 	bl	800b434 <HAL_RCCEx_PeriphCLKConfig>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8004b52:	f7ff fab1 	bl	80040b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8004b56:	4b18      	ldr	r3, [pc, #96]	@ (8004bb8 <HAL_SPDIFRX_MspInit+0xc0>)
 8004b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5a:	4a17      	ldr	r2, [pc, #92]	@ (8004bb8 <HAL_SPDIFRX_MspInit+0xc0>)
 8004b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b62:	4b15      	ldr	r3, [pc, #84]	@ (8004bb8 <HAL_SPDIFRX_MspInit+0xc0>)
 8004b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b6e:	4b12      	ldr	r3, [pc, #72]	@ (8004bb8 <HAL_SPDIFRX_MspInit+0xc0>)
 8004b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b72:	4a11      	ldr	r2, [pc, #68]	@ (8004bb8 <HAL_SPDIFRX_MspInit+0xc0>)
 8004b74:	f043 0308 	orr.w	r3, r3, #8
 8004b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8004bb8 <HAL_SPDIFRX_MspInit+0xc0>)
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	60bb      	str	r3, [r7, #8]
 8004b84:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8004b86:	2380      	movs	r3, #128	@ 0x80
 8004b88:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b92:	2300      	movs	r3, #0
 8004b94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8004b9e:	2308      	movs	r3, #8
 8004ba0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8004ba4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4804      	ldr	r0, [pc, #16]	@ (8004bbc <HAL_SPDIFRX_MspInit+0xc4>)
 8004bac:	f003 fa9a 	bl	80080e4 <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 8004bb0:	bf00      	nop
 8004bb2:	37a8      	adds	r7, #168	@ 0xa8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	40020c00 	.word	0x40020c00

08004bc0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b08a      	sub	sp, #40	@ 0x28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bc8:	f107 0314 	add.w	r3, r7, #20
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	605a      	str	r2, [r3, #4]
 8004bd2:	609a      	str	r2, [r3, #8]
 8004bd4:	60da      	str	r2, [r3, #12]
 8004bd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a25      	ldr	r2, [pc, #148]	@ (8004c74 <HAL_SPI_MspInit+0xb4>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d144      	bne.n	8004c6c <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004be2:	4b25      	ldr	r3, [pc, #148]	@ (8004c78 <HAL_SPI_MspInit+0xb8>)
 8004be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be6:	4a24      	ldr	r2, [pc, #144]	@ (8004c78 <HAL_SPI_MspInit+0xb8>)
 8004be8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004bec:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bee:	4b22      	ldr	r3, [pc, #136]	@ (8004c78 <HAL_SPI_MspInit+0xb8>)
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bf6:	613b      	str	r3, [r7, #16]
 8004bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8004c78 <HAL_SPI_MspInit+0xb8>)
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8004c78 <HAL_SPI_MspInit+0xb8>)
 8004c00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c06:	4b1c      	ldr	r3, [pc, #112]	@ (8004c78 <HAL_SPI_MspInit+0xb8>)
 8004c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c12:	4b19      	ldr	r3, [pc, #100]	@ (8004c78 <HAL_SPI_MspInit+0xb8>)
 8004c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c16:	4a18      	ldr	r2, [pc, #96]	@ (8004c78 <HAL_SPI_MspInit+0xb8>)
 8004c18:	f043 0302 	orr.w	r3, r3, #2
 8004c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c1e:	4b16      	ldr	r3, [pc, #88]	@ (8004c78 <HAL_SPI_MspInit+0xb8>)
 8004c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	60bb      	str	r3, [r7, #8]
 8004c28:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c2e:	2302      	movs	r3, #2
 8004c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c32:	2300      	movs	r3, #0
 8004c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c36:	2300      	movs	r3, #0
 8004c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c3a:	2305      	movs	r3, #5
 8004c3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8004c3e:	f107 0314 	add.w	r3, r7, #20
 8004c42:	4619      	mov	r1, r3
 8004c44:	480d      	ldr	r0, [pc, #52]	@ (8004c7c <HAL_SPI_MspInit+0xbc>)
 8004c46:	f003 fa4d 	bl	80080e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8004c4a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8004c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c50:	2302      	movs	r3, #2
 8004c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c54:	2300      	movs	r3, #0
 8004c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c5c:	2305      	movs	r3, #5
 8004c5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c60:	f107 0314 	add.w	r3, r7, #20
 8004c64:	4619      	mov	r1, r3
 8004c66:	4806      	ldr	r0, [pc, #24]	@ (8004c80 <HAL_SPI_MspInit+0xc0>)
 8004c68:	f003 fa3c 	bl	80080e4 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004c6c:	bf00      	nop
 8004c6e:	3728      	adds	r7, #40	@ 0x28
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40003800 	.word	0x40003800
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	40022000 	.word	0x40022000
 8004c80:	40020400 	.word	0x40020400

08004c84 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b089      	sub	sp, #36	@ 0x24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a2e      	ldr	r2, [pc, #184]	@ (8004d4c <HAL_TIM_Base_MspInit+0xc8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d10c      	bne.n	8004cb0 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c96:	4b2e      	ldr	r3, [pc, #184]	@ (8004d50 <HAL_TIM_Base_MspInit+0xcc>)
 8004c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c9a:	4a2d      	ldr	r2, [pc, #180]	@ (8004d50 <HAL_TIM_Base_MspInit+0xcc>)
 8004c9c:	f043 0301 	orr.w	r3, r3, #1
 8004ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ca2:	4b2b      	ldr	r3, [pc, #172]	@ (8004d50 <HAL_TIM_Base_MspInit+0xcc>)
 8004ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	61fb      	str	r3, [r7, #28]
 8004cac:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004cae:	e046      	b.n	8004d3e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cb8:	d10c      	bne.n	8004cd4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004cba:	4b25      	ldr	r3, [pc, #148]	@ (8004d50 <HAL_TIM_Base_MspInit+0xcc>)
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cbe:	4a24      	ldr	r2, [pc, #144]	@ (8004d50 <HAL_TIM_Base_MspInit+0xcc>)
 8004cc0:	f043 0301 	orr.w	r3, r3, #1
 8004cc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cc6:	4b22      	ldr	r3, [pc, #136]	@ (8004d50 <HAL_TIM_Base_MspInit+0xcc>)
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	61bb      	str	r3, [r7, #24]
 8004cd0:	69bb      	ldr	r3, [r7, #24]
}
 8004cd2:	e034      	b.n	8004d3e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a1e      	ldr	r2, [pc, #120]	@ (8004d54 <HAL_TIM_Base_MspInit+0xd0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004cde:	4b1c      	ldr	r3, [pc, #112]	@ (8004d50 <HAL_TIM_Base_MspInit+0xcc>)
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce2:	4a1b      	ldr	r2, [pc, #108]	@ (8004d50 <HAL_TIM_Base_MspInit+0xcc>)
 8004ce4:	f043 0302 	orr.w	r3, r3, #2
 8004ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cea:	4b19      	ldr	r3, [pc, #100]	@ (8004d50 <HAL_TIM_Base_MspInit+0xcc>)
 8004cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	697b      	ldr	r3, [r7, #20]
}
 8004cf6:	e022      	b.n	8004d3e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a16      	ldr	r2, [pc, #88]	@ (8004d58 <HAL_TIM_Base_MspInit+0xd4>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d10c      	bne.n	8004d1c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004d02:	4b13      	ldr	r3, [pc, #76]	@ (8004d50 <HAL_TIM_Base_MspInit+0xcc>)
 8004d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d06:	4a12      	ldr	r2, [pc, #72]	@ (8004d50 <HAL_TIM_Base_MspInit+0xcc>)
 8004d08:	f043 0308 	orr.w	r3, r3, #8
 8004d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d0e:	4b10      	ldr	r3, [pc, #64]	@ (8004d50 <HAL_TIM_Base_MspInit+0xcc>)
 8004d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	613b      	str	r3, [r7, #16]
 8004d18:	693b      	ldr	r3, [r7, #16]
}
 8004d1a:	e010      	b.n	8004d3e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a0e      	ldr	r2, [pc, #56]	@ (8004d5c <HAL_TIM_Base_MspInit+0xd8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d10b      	bne.n	8004d3e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004d26:	4b0a      	ldr	r3, [pc, #40]	@ (8004d50 <HAL_TIM_Base_MspInit+0xcc>)
 8004d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2a:	4a09      	ldr	r2, [pc, #36]	@ (8004d50 <HAL_TIM_Base_MspInit+0xcc>)
 8004d2c:	f043 0302 	orr.w	r3, r3, #2
 8004d30:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d32:	4b07      	ldr	r3, [pc, #28]	@ (8004d50 <HAL_TIM_Base_MspInit+0xcc>)
 8004d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
}
 8004d3e:	bf00      	nop
 8004d40:	3724      	adds	r7, #36	@ 0x24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	40010000 	.word	0x40010000
 8004d50:	40023800 	.word	0x40023800
 8004d54:	40000400 	.word	0x40000400
 8004d58:	40000c00 	.word	0x40000c00
 8004d5c:	40010400 	.word	0x40010400

08004d60 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8004d98 <HAL_TIM_PWM_MspInit+0x38>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d10b      	bne.n	8004d8a <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM12_MspInit 0 */

    /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004d72:	4b0a      	ldr	r3, [pc, #40]	@ (8004d9c <HAL_TIM_PWM_MspInit+0x3c>)
 8004d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d76:	4a09      	ldr	r2, [pc, #36]	@ (8004d9c <HAL_TIM_PWM_MspInit+0x3c>)
 8004d78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d7e:	4b07      	ldr	r3, [pc, #28]	@ (8004d9c <HAL_TIM_PWM_MspInit+0x3c>)
 8004d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d86:	60fb      	str	r3, [r7, #12]
 8004d88:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM12_MspInit 1 */

  }

}
 8004d8a:	bf00      	nop
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	40001800 	.word	0x40001800
 8004d9c:	40023800 	.word	0x40023800

08004da0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b08c      	sub	sp, #48	@ 0x30
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004da8:	f107 031c 	add.w	r3, r7, #28
 8004dac:	2200      	movs	r2, #0
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	605a      	str	r2, [r3, #4]
 8004db2:	609a      	str	r2, [r3, #8]
 8004db4:	60da      	str	r2, [r3, #12]
 8004db6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a56      	ldr	r2, [pc, #344]	@ (8004f18 <HAL_TIM_MspPostInit+0x178>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d11d      	bne.n	8004dfe <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dc2:	4b56      	ldr	r3, [pc, #344]	@ (8004f1c <HAL_TIM_MspPostInit+0x17c>)
 8004dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc6:	4a55      	ldr	r2, [pc, #340]	@ (8004f1c <HAL_TIM_MspPostInit+0x17c>)
 8004dc8:	f043 0301 	orr.w	r3, r3, #1
 8004dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004dce:	4b53      	ldr	r3, [pc, #332]	@ (8004f1c <HAL_TIM_MspPostInit+0x17c>)
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	61bb      	str	r3, [r7, #24]
 8004dd8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8004dda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004de0:	2302      	movs	r3, #2
 8004de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de4:	2300      	movs	r3, #0
 8004de6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004de8:	2300      	movs	r3, #0
 8004dea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004dec:	2301      	movs	r3, #1
 8004dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8004df0:	f107 031c 	add.w	r3, r7, #28
 8004df4:	4619      	mov	r1, r3
 8004df6:	484a      	ldr	r0, [pc, #296]	@ (8004f20 <HAL_TIM_MspPostInit+0x180>)
 8004df8:	f003 f974 	bl	80080e4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004dfc:	e087      	b.n	8004f0e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e06:	d11d      	bne.n	8004e44 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e08:	4b44      	ldr	r3, [pc, #272]	@ (8004f1c <HAL_TIM_MspPostInit+0x17c>)
 8004e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e0c:	4a43      	ldr	r2, [pc, #268]	@ (8004f1c <HAL_TIM_MspPostInit+0x17c>)
 8004e0e:	f043 0301 	orr.w	r3, r3, #1
 8004e12:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e14:	4b41      	ldr	r3, [pc, #260]	@ (8004f1c <HAL_TIM_MspPostInit+0x17c>)
 8004e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	617b      	str	r3, [r7, #20]
 8004e1e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8004e20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e26:	2302      	movs	r3, #2
 8004e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004e32:	2301      	movs	r3, #1
 8004e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8004e36:	f107 031c 	add.w	r3, r7, #28
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	4838      	ldr	r0, [pc, #224]	@ (8004f20 <HAL_TIM_MspPostInit+0x180>)
 8004e3e:	f003 f951 	bl	80080e4 <HAL_GPIO_Init>
}
 8004e42:	e064      	b.n	8004f0e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a36      	ldr	r2, [pc, #216]	@ (8004f24 <HAL_TIM_MspPostInit+0x184>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d11c      	bne.n	8004e88 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e4e:	4b33      	ldr	r3, [pc, #204]	@ (8004f1c <HAL_TIM_MspPostInit+0x17c>)
 8004e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e52:	4a32      	ldr	r2, [pc, #200]	@ (8004f1c <HAL_TIM_MspPostInit+0x17c>)
 8004e54:	f043 0302 	orr.w	r3, r3, #2
 8004e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e5a:	4b30      	ldr	r3, [pc, #192]	@ (8004f1c <HAL_TIM_MspPostInit+0x17c>)
 8004e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	613b      	str	r3, [r7, #16]
 8004e64:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8004e66:	2310      	movs	r3, #16
 8004e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e72:	2300      	movs	r3, #0
 8004e74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004e76:	2302      	movs	r3, #2
 8004e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8004e7a:	f107 031c 	add.w	r3, r7, #28
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4829      	ldr	r0, [pc, #164]	@ (8004f28 <HAL_TIM_MspPostInit+0x188>)
 8004e82:	f003 f92f 	bl	80080e4 <HAL_GPIO_Init>
}
 8004e86:	e042      	b.n	8004f0e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a27      	ldr	r2, [pc, #156]	@ (8004f2c <HAL_TIM_MspPostInit+0x18c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d11c      	bne.n	8004ecc <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004e92:	4b22      	ldr	r3, [pc, #136]	@ (8004f1c <HAL_TIM_MspPostInit+0x17c>)
 8004e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e96:	4a21      	ldr	r2, [pc, #132]	@ (8004f1c <HAL_TIM_MspPostInit+0x17c>)
 8004e98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8004f1c <HAL_TIM_MspPostInit+0x17c>)
 8004ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eae:	2302      	movs	r3, #2
 8004eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004eba:	2302      	movs	r3, #2
 8004ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8004ebe:	f107 031c 	add.w	r3, r7, #28
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	481a      	ldr	r0, [pc, #104]	@ (8004f30 <HAL_TIM_MspPostInit+0x190>)
 8004ec6:	f003 f90d 	bl	80080e4 <HAL_GPIO_Init>
}
 8004eca:	e020      	b.n	8004f0e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a18      	ldr	r2, [pc, #96]	@ (8004f34 <HAL_TIM_MspPostInit+0x194>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d11b      	bne.n	8004f0e <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004ed6:	4b11      	ldr	r3, [pc, #68]	@ (8004f1c <HAL_TIM_MspPostInit+0x17c>)
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eda:	4a10      	ldr	r2, [pc, #64]	@ (8004f1c <HAL_TIM_MspPostInit+0x17c>)
 8004edc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8004f1c <HAL_TIM_MspPostInit+0x17c>)
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eea:	60bb      	str	r3, [r7, #8]
 8004eec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8004eee:	2340      	movs	r3, #64	@ 0x40
 8004ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004efa:	2300      	movs	r3, #0
 8004efc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004efe:	2309      	movs	r3, #9
 8004f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8004f02:	f107 031c 	add.w	r3, r7, #28
 8004f06:	4619      	mov	r1, r3
 8004f08:	480b      	ldr	r0, [pc, #44]	@ (8004f38 <HAL_TIM_MspPostInit+0x198>)
 8004f0a:	f003 f8eb 	bl	80080e4 <HAL_GPIO_Init>
}
 8004f0e:	bf00      	nop
 8004f10:	3730      	adds	r7, #48	@ 0x30
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	40010000 	.word	0x40010000
 8004f1c:	40023800 	.word	0x40023800
 8004f20:	40020000 	.word	0x40020000
 8004f24:	40000400 	.word	0x40000400
 8004f28:	40020400 	.word	0x40020400
 8004f2c:	40000c00 	.word	0x40000c00
 8004f30:	40022000 	.word	0x40022000
 8004f34:	40001800 	.word	0x40001800
 8004f38:	40021c00 	.word	0x40021c00

08004f3c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b0ae      	sub	sp, #184	@ 0xb8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f44:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	605a      	str	r2, [r3, #4]
 8004f4e:	609a      	str	r2, [r3, #8]
 8004f50:	60da      	str	r2, [r3, #12]
 8004f52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004f54:	f107 0320 	add.w	r3, r7, #32
 8004f58:	2284      	movs	r2, #132	@ 0x84
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f012 fdd3 	bl	8017b08 <memset>
  if(huart->Instance==USART1)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a53      	ldr	r2, [pc, #332]	@ (80050b4 <HAL_UART_MspInit+0x178>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d15d      	bne.n	8005028 <HAL_UART_MspInit+0xec>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004f6c:	2340      	movs	r3, #64	@ 0x40
 8004f6e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004f70:	2300      	movs	r3, #0
 8004f72:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f74:	f107 0320 	add.w	r3, r7, #32
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f006 fa5b 	bl	800b434 <HAL_RCCEx_PeriphCLKConfig>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004f84:	f7ff f898 	bl	80040b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004f88:	4b4b      	ldr	r3, [pc, #300]	@ (80050b8 <HAL_UART_MspInit+0x17c>)
 8004f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f8c:	4a4a      	ldr	r2, [pc, #296]	@ (80050b8 <HAL_UART_MspInit+0x17c>)
 8004f8e:	f043 0310 	orr.w	r3, r3, #16
 8004f92:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f94:	4b48      	ldr	r3, [pc, #288]	@ (80050b8 <HAL_UART_MspInit+0x17c>)
 8004f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f98:	f003 0310 	and.w	r3, r3, #16
 8004f9c:	61fb      	str	r3, [r7, #28]
 8004f9e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fa0:	4b45      	ldr	r3, [pc, #276]	@ (80050b8 <HAL_UART_MspInit+0x17c>)
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa4:	4a44      	ldr	r2, [pc, #272]	@ (80050b8 <HAL_UART_MspInit+0x17c>)
 8004fa6:	f043 0302 	orr.w	r3, r3, #2
 8004faa:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fac:	4b42      	ldr	r3, [pc, #264]	@ (80050b8 <HAL_UART_MspInit+0x17c>)
 8004fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	61bb      	str	r3, [r7, #24]
 8004fb6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fb8:	4b3f      	ldr	r3, [pc, #252]	@ (80050b8 <HAL_UART_MspInit+0x17c>)
 8004fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fbc:	4a3e      	ldr	r2, [pc, #248]	@ (80050b8 <HAL_UART_MspInit+0x17c>)
 8004fbe:	f043 0301 	orr.w	r3, r3, #1
 8004fc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fc4:	4b3c      	ldr	r3, [pc, #240]	@ (80050b8 <HAL_UART_MspInit+0x17c>)
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004fd0:	2380      	movs	r3, #128	@ 0x80
 8004fd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004fe8:	2307      	movs	r3, #7
 8004fea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004fee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	4831      	ldr	r0, [pc, #196]	@ (80050bc <HAL_UART_MspInit+0x180>)
 8004ff6:	f003 f875 	bl	80080e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004ffa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ffe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005002:	2302      	movs	r3, #2
 8005004:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005008:	2300      	movs	r3, #0
 800500a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800500e:	2300      	movs	r3, #0
 8005010:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005014:	2307      	movs	r3, #7
 8005016:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800501a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800501e:	4619      	mov	r1, r3
 8005020:	4827      	ldr	r0, [pc, #156]	@ (80050c0 <HAL_UART_MspInit+0x184>)
 8005022:	f003 f85f 	bl	80080e4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8005026:	e040      	b.n	80050aa <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a25      	ldr	r2, [pc, #148]	@ (80050c4 <HAL_UART_MspInit+0x188>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d13b      	bne.n	80050aa <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8005032:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005036:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8005038:	2300      	movs	r3, #0
 800503a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800503c:	f107 0320 	add.w	r3, r7, #32
 8005040:	4618      	mov	r0, r3
 8005042:	f006 f9f7 	bl	800b434 <HAL_RCCEx_PeriphCLKConfig>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <HAL_UART_MspInit+0x114>
      Error_Handler();
 800504c:	f7ff f834 	bl	80040b8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005050:	4b19      	ldr	r3, [pc, #100]	@ (80050b8 <HAL_UART_MspInit+0x17c>)
 8005052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005054:	4a18      	ldr	r2, [pc, #96]	@ (80050b8 <HAL_UART_MspInit+0x17c>)
 8005056:	f043 0320 	orr.w	r3, r3, #32
 800505a:	6453      	str	r3, [r2, #68]	@ 0x44
 800505c:	4b16      	ldr	r3, [pc, #88]	@ (80050b8 <HAL_UART_MspInit+0x17c>)
 800505e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005060:	f003 0320 	and.w	r3, r3, #32
 8005064:	613b      	str	r3, [r7, #16]
 8005066:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005068:	4b13      	ldr	r3, [pc, #76]	@ (80050b8 <HAL_UART_MspInit+0x17c>)
 800506a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800506c:	4a12      	ldr	r2, [pc, #72]	@ (80050b8 <HAL_UART_MspInit+0x17c>)
 800506e:	f043 0304 	orr.w	r3, r3, #4
 8005072:	6313      	str	r3, [r2, #48]	@ 0x30
 8005074:	4b10      	ldr	r3, [pc, #64]	@ (80050b8 <HAL_UART_MspInit+0x17c>)
 8005076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	60fb      	str	r3, [r7, #12]
 800507e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8005080:	23c0      	movs	r3, #192	@ 0xc0
 8005082:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005086:	2302      	movs	r3, #2
 8005088:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508c:	2300      	movs	r3, #0
 800508e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005092:	2303      	movs	r3, #3
 8005094:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005098:	2308      	movs	r3, #8
 800509a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800509e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80050a2:	4619      	mov	r1, r3
 80050a4:	4808      	ldr	r0, [pc, #32]	@ (80050c8 <HAL_UART_MspInit+0x18c>)
 80050a6:	f003 f81d 	bl	80080e4 <HAL_GPIO_Init>
}
 80050aa:	bf00      	nop
 80050ac:	37b8      	adds	r7, #184	@ 0xb8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	40011000 	.word	0x40011000
 80050b8:	40023800 	.word	0x40023800
 80050bc:	40020400 	.word	0x40020400
 80050c0:	40020000 	.word	0x40020000
 80050c4:	40011400 	.word	0x40011400
 80050c8:	40020800 	.word	0x40020800

080050cc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80050d2:	1d3b      	adds	r3, r7, #4
 80050d4:	2200      	movs	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	605a      	str	r2, [r3, #4]
 80050da:	609a      	str	r2, [r3, #8]
 80050dc:	60da      	str	r2, [r3, #12]
 80050de:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80050e0:	4b3a      	ldr	r3, [pc, #232]	@ (80051cc <HAL_FMC_MspInit+0x100>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d16d      	bne.n	80051c4 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80050e8:	4b38      	ldr	r3, [pc, #224]	@ (80051cc <HAL_FMC_MspInit+0x100>)
 80050ea:	2201      	movs	r2, #1
 80050ec:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80050ee:	4b38      	ldr	r3, [pc, #224]	@ (80051d0 <HAL_FMC_MspInit+0x104>)
 80050f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f2:	4a37      	ldr	r2, [pc, #220]	@ (80051d0 <HAL_FMC_MspInit+0x104>)
 80050f4:	f043 0301 	orr.w	r3, r3, #1
 80050f8:	6393      	str	r3, [r2, #56]	@ 0x38
 80050fa:	4b35      	ldr	r3, [pc, #212]	@ (80051d0 <HAL_FMC_MspInit+0x104>)
 80050fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	603b      	str	r3, [r7, #0]
 8005104:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8005106:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800510a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800510c:	2302      	movs	r3, #2
 800510e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005110:	2300      	movs	r3, #0
 8005112:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005114:	2303      	movs	r3, #3
 8005116:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005118:	230c      	movs	r3, #12
 800511a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800511c:	1d3b      	adds	r3, r7, #4
 800511e:	4619      	mov	r1, r3
 8005120:	482c      	ldr	r0, [pc, #176]	@ (80051d4 <HAL_FMC_MspInit+0x108>)
 8005122:	f002 ffdf 	bl	80080e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8005126:	f248 1333 	movw	r3, #33075	@ 0x8133
 800512a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800512c:	2302      	movs	r3, #2
 800512e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005130:	2300      	movs	r3, #0
 8005132:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005134:	2303      	movs	r3, #3
 8005136:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005138:	230c      	movs	r3, #12
 800513a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800513c:	1d3b      	adds	r3, r7, #4
 800513e:	4619      	mov	r1, r3
 8005140:	4825      	ldr	r0, [pc, #148]	@ (80051d8 <HAL_FMC_MspInit+0x10c>)
 8005142:	f002 ffcf 	bl	80080e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8005146:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800514a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800514c:	2302      	movs	r3, #2
 800514e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005150:	2300      	movs	r3, #0
 8005152:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005154:	2303      	movs	r3, #3
 8005156:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005158:	230c      	movs	r3, #12
 800515a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800515c:	1d3b      	adds	r3, r7, #4
 800515e:	4619      	mov	r1, r3
 8005160:	481e      	ldr	r0, [pc, #120]	@ (80051dc <HAL_FMC_MspInit+0x110>)
 8005162:	f002 ffbf 	bl	80080e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8005166:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800516a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800516c:	2302      	movs	r3, #2
 800516e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005170:	2300      	movs	r3, #0
 8005172:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005174:	2303      	movs	r3, #3
 8005176:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005178:	230c      	movs	r3, #12
 800517a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800517c:	1d3b      	adds	r3, r7, #4
 800517e:	4619      	mov	r1, r3
 8005180:	4817      	ldr	r0, [pc, #92]	@ (80051e0 <HAL_FMC_MspInit+0x114>)
 8005182:	f002 ffaf 	bl	80080e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8005186:	2328      	movs	r3, #40	@ 0x28
 8005188:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800518a:	2302      	movs	r3, #2
 800518c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800518e:	2300      	movs	r3, #0
 8005190:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005192:	2303      	movs	r3, #3
 8005194:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005196:	230c      	movs	r3, #12
 8005198:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800519a:	1d3b      	adds	r3, r7, #4
 800519c:	4619      	mov	r1, r3
 800519e:	4811      	ldr	r0, [pc, #68]	@ (80051e4 <HAL_FMC_MspInit+0x118>)
 80051a0:	f002 ffa0 	bl	80080e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80051a4:	2308      	movs	r3, #8
 80051a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a8:	2302      	movs	r3, #2
 80051aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ac:	2300      	movs	r3, #0
 80051ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051b0:	2303      	movs	r3, #3
 80051b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80051b4:	230c      	movs	r3, #12
 80051b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80051b8:	1d3b      	adds	r3, r7, #4
 80051ba:	4619      	mov	r1, r3
 80051bc:	480a      	ldr	r0, [pc, #40]	@ (80051e8 <HAL_FMC_MspInit+0x11c>)
 80051be:	f002 ff91 	bl	80080e4 <HAL_GPIO_Init>
 80051c2:	e000      	b.n	80051c6 <HAL_FMC_MspInit+0xfa>
    return;
 80051c4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80051c6:	3718      	adds	r7, #24
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	20002464 	.word	0x20002464
 80051d0:	40023800 	.word	0x40023800
 80051d4:	40021000 	.word	0x40021000
 80051d8:	40021800 	.word	0x40021800
 80051dc:	40020c00 	.word	0x40020c00
 80051e0:	40021400 	.word	0x40021400
 80051e4:	40021c00 	.word	0x40021c00
 80051e8:	40020800 	.word	0x40020800

080051ec <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80051f4:	f7ff ff6a 	bl	80050cc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80051f8:	bf00      	nop
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b08a      	sub	sp, #40	@ 0x28
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a2b      	ldr	r2, [pc, #172]	@ (80052bc <HAL_SAI_MspInit+0xbc>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d124      	bne.n	800525c <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8005212:	4b2b      	ldr	r3, [pc, #172]	@ (80052c0 <HAL_SAI_MspInit+0xc0>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10b      	bne.n	8005232 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800521a:	4b2a      	ldr	r3, [pc, #168]	@ (80052c4 <HAL_SAI_MspInit+0xc4>)
 800521c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800521e:	4a29      	ldr	r2, [pc, #164]	@ (80052c4 <HAL_SAI_MspInit+0xc4>)
 8005220:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005224:	6453      	str	r3, [r2, #68]	@ 0x44
 8005226:	4b27      	ldr	r3, [pc, #156]	@ (80052c4 <HAL_SAI_MspInit+0xc4>)
 8005228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800522a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800522e:	613b      	str	r3, [r7, #16]
 8005230:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8005232:	4b23      	ldr	r3, [pc, #140]	@ (80052c0 <HAL_SAI_MspInit+0xc0>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	3301      	adds	r3, #1
 8005238:	4a21      	ldr	r2, [pc, #132]	@ (80052c0 <HAL_SAI_MspInit+0xc0>)
 800523a:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800523c:	23f0      	movs	r3, #240	@ 0xf0
 800523e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005240:	2302      	movs	r3, #2
 8005242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005244:	2300      	movs	r3, #0
 8005246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005248:	2300      	movs	r3, #0
 800524a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800524c:	230a      	movs	r3, #10
 800524e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005250:	f107 0314 	add.w	r3, r7, #20
 8005254:	4619      	mov	r1, r3
 8005256:	481c      	ldr	r0, [pc, #112]	@ (80052c8 <HAL_SAI_MspInit+0xc8>)
 8005258:	f002 ff44 	bl	80080e4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a1a      	ldr	r2, [pc, #104]	@ (80052cc <HAL_SAI_MspInit+0xcc>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d125      	bne.n	80052b2 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8005266:	4b16      	ldr	r3, [pc, #88]	@ (80052c0 <HAL_SAI_MspInit+0xc0>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10b      	bne.n	8005286 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800526e:	4b15      	ldr	r3, [pc, #84]	@ (80052c4 <HAL_SAI_MspInit+0xc4>)
 8005270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005272:	4a14      	ldr	r2, [pc, #80]	@ (80052c4 <HAL_SAI_MspInit+0xc4>)
 8005274:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005278:	6453      	str	r3, [r2, #68]	@ 0x44
 800527a:	4b12      	ldr	r3, [pc, #72]	@ (80052c4 <HAL_SAI_MspInit+0xc4>)
 800527c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800527e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8005286:	4b0e      	ldr	r3, [pc, #56]	@ (80052c0 <HAL_SAI_MspInit+0xc0>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3301      	adds	r3, #1
 800528c:	4a0c      	ldr	r2, [pc, #48]	@ (80052c0 <HAL_SAI_MspInit+0xc0>)
 800528e:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8005290:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005296:	2302      	movs	r3, #2
 8005298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800529a:	2300      	movs	r3, #0
 800529c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800529e:	2300      	movs	r3, #0
 80052a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80052a2:	230a      	movs	r3, #10
 80052a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80052a6:	f107 0314 	add.w	r3, r7, #20
 80052aa:	4619      	mov	r1, r3
 80052ac:	4808      	ldr	r0, [pc, #32]	@ (80052d0 <HAL_SAI_MspInit+0xd0>)
 80052ae:	f002 ff19 	bl	80080e4 <HAL_GPIO_Init>

    }
}
 80052b2:	bf00      	nop
 80052b4:	3728      	adds	r7, #40	@ 0x28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	40015c04 	.word	0x40015c04
 80052c0:	20002468 	.word	0x20002468
 80052c4:	40023800 	.word	0x40023800
 80052c8:	40022000 	.word	0x40022000
 80052cc:	40015c24 	.word	0x40015c24
 80052d0:	40021800 	.word	0x40021800

080052d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b08e      	sub	sp, #56	@ 0x38
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80052e4:	4b33      	ldr	r3, [pc, #204]	@ (80053b4 <HAL_InitTick+0xe0>)
 80052e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e8:	4a32      	ldr	r2, [pc, #200]	@ (80053b4 <HAL_InitTick+0xe0>)
 80052ea:	f043 0310 	orr.w	r3, r3, #16
 80052ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80052f0:	4b30      	ldr	r3, [pc, #192]	@ (80053b4 <HAL_InitTick+0xe0>)
 80052f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f4:	f003 0310 	and.w	r3, r3, #16
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80052fc:	f107 0210 	add.w	r2, r7, #16
 8005300:	f107 0314 	add.w	r3, r7, #20
 8005304:	4611      	mov	r1, r2
 8005306:	4618      	mov	r0, r3
 8005308:	f006 f862 	bl	800b3d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005312:	2b00      	cmp	r3, #0
 8005314:	d103      	bne.n	800531e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005316:	f006 f833 	bl	800b380 <HAL_RCC_GetPCLK1Freq>
 800531a:	6378      	str	r0, [r7, #52]	@ 0x34
 800531c:	e004      	b.n	8005328 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800531e:	f006 f82f 	bl	800b380 <HAL_RCC_GetPCLK1Freq>
 8005322:	4603      	mov	r3, r0
 8005324:	005b      	lsls	r3, r3, #1
 8005326:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800532a:	4a23      	ldr	r2, [pc, #140]	@ (80053b8 <HAL_InitTick+0xe4>)
 800532c:	fba2 2303 	umull	r2, r3, r2, r3
 8005330:	0c9b      	lsrs	r3, r3, #18
 8005332:	3b01      	subs	r3, #1
 8005334:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005336:	4b21      	ldr	r3, [pc, #132]	@ (80053bc <HAL_InitTick+0xe8>)
 8005338:	4a21      	ldr	r2, [pc, #132]	@ (80053c0 <HAL_InitTick+0xec>)
 800533a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800533c:	4b1f      	ldr	r3, [pc, #124]	@ (80053bc <HAL_InitTick+0xe8>)
 800533e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005342:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005344:	4a1d      	ldr	r2, [pc, #116]	@ (80053bc <HAL_InitTick+0xe8>)
 8005346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005348:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800534a:	4b1c      	ldr	r3, [pc, #112]	@ (80053bc <HAL_InitTick+0xe8>)
 800534c:	2200      	movs	r2, #0
 800534e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005350:	4b1a      	ldr	r3, [pc, #104]	@ (80053bc <HAL_InitTick+0xe8>)
 8005352:	2200      	movs	r2, #0
 8005354:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005356:	4b19      	ldr	r3, [pc, #100]	@ (80053bc <HAL_InitTick+0xe8>)
 8005358:	2200      	movs	r2, #0
 800535a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800535c:	4817      	ldr	r0, [pc, #92]	@ (80053bc <HAL_InitTick+0xe8>)
 800535e:	f008 fde8 	bl	800df32 <HAL_TIM_Base_Init>
 8005362:	4603      	mov	r3, r0
 8005364:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8005368:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800536c:	2b00      	cmp	r3, #0
 800536e:	d11b      	bne.n	80053a8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005370:	4812      	ldr	r0, [pc, #72]	@ (80053bc <HAL_InitTick+0xe8>)
 8005372:	f008 fe35 	bl	800dfe0 <HAL_TIM_Base_Start_IT>
 8005376:	4603      	mov	r3, r0
 8005378:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800537c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005380:	2b00      	cmp	r3, #0
 8005382:	d111      	bne.n	80053a8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005384:	2036      	movs	r0, #54	@ 0x36
 8005386:	f001 fb85 	bl	8006a94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b0f      	cmp	r3, #15
 800538e:	d808      	bhi.n	80053a2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8005390:	2200      	movs	r2, #0
 8005392:	6879      	ldr	r1, [r7, #4]
 8005394:	2036      	movs	r0, #54	@ 0x36
 8005396:	f001 fb61 	bl	8006a5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800539a:	4a0a      	ldr	r2, [pc, #40]	@ (80053c4 <HAL_InitTick+0xf0>)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6013      	str	r3, [r2, #0]
 80053a0:	e002      	b.n	80053a8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80053a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3738      	adds	r7, #56	@ 0x38
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40023800 	.word	0x40023800
 80053b8:	431bde83 	.word	0x431bde83
 80053bc:	2000246c 	.word	0x2000246c
 80053c0:	40001000 	.word	0x40001000
 80053c4:	2000006c 	.word	0x2000006c

080053c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80053cc:	bf00      	nop
 80053ce:	e7fd      	b.n	80053cc <NMI_Handler+0x4>

080053d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80053d0:	b480      	push	{r7}
 80053d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053d4:	bf00      	nop
 80053d6:	e7fd      	b.n	80053d4 <HardFault_Handler+0x4>

080053d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80053dc:	bf00      	nop
 80053de:	e7fd      	b.n	80053dc <MemManage_Handler+0x4>

080053e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80053e4:	bf00      	nop
 80053e6:	e7fd      	b.n	80053e4 <BusFault_Handler+0x4>

080053e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80053ec:	bf00      	nop
 80053ee:	e7fd      	b.n	80053ec <UsageFault_Handler+0x4>

080053f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80053f0:	b480      	push	{r7}
 80053f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053f4:	bf00      	nop
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
	...

08005400 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005404:	4802      	ldr	r0, [pc, #8]	@ (8005410 <TIM6_DAC_IRQHandler+0x10>)
 8005406:	f008 feba 	bl	800e17e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800540a:	bf00      	nop
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	2000246c 	.word	0x2000246c

08005414 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8005418:	4802      	ldr	r0, [pc, #8]	@ (8005424 <OTG_FS_IRQHandler+0x10>)
 800541a:	f003 f840 	bl	800849e <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800541e:	bf00      	nop
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	20012c84 	.word	0x20012c84

08005428 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800542c:	4802      	ldr	r0, [pc, #8]	@ (8005438 <LTDC_IRQHandler+0x10>)
 800542e:	f004 ffad 	bl	800a38c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8005432:	bf00      	nop
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	20001b74 	.word	0x20001b74

0800543c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8005440:	4802      	ldr	r0, [pc, #8]	@ (800544c <DMA2D_IRQHandler+0x10>)
 8005442:	f002 f95f 	bl	8007704 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8005446:	bf00      	nop
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	200019dc 	.word	0x200019dc

08005450 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt (USART6_RX).
  */
void DMA2_Stream1_IRQHandler(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8005454:	4802      	ldr	r0, [pc, #8]	@ (8005460 <DMA2_Stream1_IRQHandler+0x10>)
 8005456:	f001 fe95 	bl	8007184 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800545a:	bf00      	nop
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	200023ec 	.word	0x200023ec

08005464 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  
  // IDLE 인터럽트 체크 (메시지 끝 감지)
  if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
 8005468:	4b09      	ldr	r3, [pc, #36]	@ (8005490 <USART6_IRQHandler+0x2c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	69db      	ldr	r3, [r3, #28]
 800546e:	f003 0310 	and.w	r3, r3, #16
 8005472:	2b10      	cmp	r3, #16
 8005474:	d106      	bne.n	8005484 <USART6_IRQHandler+0x20>
    __HAL_UART_CLEAR_IDLEFLAG(&huart6);  // IDLE 플래그 클리어
 8005476:	4b06      	ldr	r3, [pc, #24]	@ (8005490 <USART6_IRQHandler+0x2c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2210      	movs	r2, #16
 800547c:	621a      	str	r2, [r3, #32]
    
    // 외부 함수 호출
    extern void USER_UART_IDLECallback(UART_HandleTypeDef *huart);
    USER_UART_IDLECallback(&huart6);
 800547e:	4804      	ldr	r0, [pc, #16]	@ (8005490 <USART6_IRQHandler+0x2c>)
 8005480:	f000 fe8e 	bl	80061a0 <USER_UART_IDLECallback>
  }

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005484:	4802      	ldr	r0, [pc, #8]	@ (8005490 <USART6_IRQHandler+0x2c>)
 8005486:	f00a f8c5 	bl	800f614 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800548a:	bf00      	nop
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	20002114 	.word	0x20002114

08005494 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054a0:	2300      	movs	r3, #0
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	e00a      	b.n	80054bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80054a6:	f3af 8000 	nop.w
 80054aa:	4601      	mov	r1, r0
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	60ba      	str	r2, [r7, #8]
 80054b2:	b2ca      	uxtb	r2, r1
 80054b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	3301      	adds	r3, #1
 80054ba:	617b      	str	r3, [r7, #20]
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	dbf0      	blt.n	80054a6 <_read+0x12>
  }

  return len;
 80054c4:	687b      	ldr	r3, [r7, #4]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b086      	sub	sp, #24
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	60f8      	str	r0, [r7, #12]
 80054d6:	60b9      	str	r1, [r7, #8]
 80054d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054da:	2300      	movs	r3, #0
 80054dc:	617b      	str	r3, [r7, #20]
 80054de:	e009      	b.n	80054f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	1c5a      	adds	r2, r3, #1
 80054e4:	60ba      	str	r2, [r7, #8]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	3301      	adds	r3, #1
 80054f2:	617b      	str	r3, [r7, #20]
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	dbf1      	blt.n	80054e0 <_write+0x12>
  }
  return len;
 80054fc:	687b      	ldr	r3, [r7, #4]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <_close>:

int _close(int file)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800550e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005512:	4618      	mov	r0, r3
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800551e:	b480      	push	{r7}
 8005520:	b083      	sub	sp, #12
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800552e:	605a      	str	r2, [r3, #4]
  return 0;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <_isatty>:

int _isatty(int file)
{
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005546:	2301      	movs	r3, #1
}
 8005548:	4618      	mov	r0, r3
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
	...

08005570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005578:	4a14      	ldr	r2, [pc, #80]	@ (80055cc <_sbrk+0x5c>)
 800557a:	4b15      	ldr	r3, [pc, #84]	@ (80055d0 <_sbrk+0x60>)
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005584:	4b13      	ldr	r3, [pc, #76]	@ (80055d4 <_sbrk+0x64>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d102      	bne.n	8005592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800558c:	4b11      	ldr	r3, [pc, #68]	@ (80055d4 <_sbrk+0x64>)
 800558e:	4a12      	ldr	r2, [pc, #72]	@ (80055d8 <_sbrk+0x68>)
 8005590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005592:	4b10      	ldr	r3, [pc, #64]	@ (80055d4 <_sbrk+0x64>)
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4413      	add	r3, r2
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	429a      	cmp	r2, r3
 800559e:	d207      	bcs.n	80055b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80055a0:	f012 fb46 	bl	8017c30 <__errno>
 80055a4:	4603      	mov	r3, r0
 80055a6:	220c      	movs	r2, #12
 80055a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80055aa:	f04f 33ff 	mov.w	r3, #4294967295
 80055ae:	e009      	b.n	80055c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80055b0:	4b08      	ldr	r3, [pc, #32]	@ (80055d4 <_sbrk+0x64>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80055b6:	4b07      	ldr	r3, [pc, #28]	@ (80055d4 <_sbrk+0x64>)
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4413      	add	r3, r2
 80055be:	4a05      	ldr	r2, [pc, #20]	@ (80055d4 <_sbrk+0x64>)
 80055c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80055c2:	68fb      	ldr	r3, [r7, #12]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3718      	adds	r7, #24
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	20050000 	.word	0x20050000
 80055d0:	00000400 	.word	0x00000400
 80055d4:	200024b8 	.word	0x200024b8
 80055d8:	200131b0 	.word	0x200131b0

080055dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80055dc:	b480      	push	{r7}
 80055de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80055e0:	4b06      	ldr	r3, [pc, #24]	@ (80055fc <SystemInit+0x20>)
 80055e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055e6:	4a05      	ldr	r2, [pc, #20]	@ (80055fc <SystemInit+0x20>)
 80055e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80055ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80055f0:	bf00      	nop
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	e000ed00 	.word	0xe000ed00

08005600 <TIME_GetCurrentMs>:
// ============================================================================
// 기본 시간 함수
// ============================================================================

uint32_t TIME_GetCurrentMs(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
    return TIME_Platform_GetCurrentMs();
 8005604:	f000 f803 	bl	800560e <TIME_Platform_GetCurrentMs>
 8005608:	4603      	mov	r3, r0
}
 800560a:	4618      	mov	r0, r3
 800560c:	bd80      	pop	{r7, pc}

0800560e <TIME_Platform_GetCurrentMs>:
#include "time.h"
#include "stm32f7xx_hal.h"

// STM32용 플랫폼 함수들
uint32_t TIME_Platform_GetCurrentMs(void)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // HAL_GetTick()은 1ms 단위로 시간을 반환
 8005612:	f000 fea3 	bl	800635c <HAL_GetTick>
 8005616:	4603      	mov	r3, r0
}
 8005618:	4618      	mov	r0, r3
 800561a:	bd80      	pop	{r7, pc}

0800561c <LOGGER_Connect>:
    .enable_network = true,
    .server_ip = "",
    .server_port = 0
};

LoggerStatus LOGGER_Connect(const char* server_ip, int port) {
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
    if (server_ip == NULL) return LOGGER_STATUS_ERROR;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d102      	bne.n	8005632 <LOGGER_Connect+0x16>
 800562c:	f04f 33ff 	mov.w	r3, #4294967295
 8005630:	e016      	b.n	8005660 <LOGGER_Connect+0x44>
    strncpy(current_config.server_ip, server_ip, sizeof(current_config.server_ip) - 1);
 8005632:	223f      	movs	r2, #63	@ 0x3f
 8005634:	6879      	ldr	r1, [r7, #4]
 8005636:	480c      	ldr	r0, [pc, #48]	@ (8005668 <LOGGER_Connect+0x4c>)
 8005638:	f012 fa7b 	bl	8017b32 <strncpy>
    current_config.server_port = port;
 800563c:	4a0b      	ldr	r2, [pc, #44]	@ (800566c <LOGGER_Connect+0x50>)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	6453      	str	r3, [r2, #68]	@ 0x44
    LoggerStatus status = LOGGER_Platform_Connect(server_ip, port);
 8005642:	6839      	ldr	r1, [r7, #0]
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f965 	bl	8005914 <LOGGER_Platform_Connect>
 800564a:	4603      	mov	r3, r0
 800564c:	73fb      	strb	r3, [r7, #15]
    if (status == LOGGER_STATUS_OK) {
 800564e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d102      	bne.n	800565c <LOGGER_Connect+0x40>
        logger_connected = true;
 8005656:	4b06      	ldr	r3, [pc, #24]	@ (8005670 <LOGGER_Connect+0x54>)
 8005658:	2201      	movs	r2, #1
 800565a:	701a      	strb	r2, [r3, #0]
    }
    return status;
 800565c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	20000027 	.word	0x20000027
 800566c:	20000024 	.word	0x20000024
 8005670:	200024bc 	.word	0x200024bc

08005674 <LOGGER_SetFilterLevel>:
bool LOGGER_IsConnected(void) {
    return logger_connected;
}

// Logger 제어 함수들
void LOGGER_SetFilterLevel(LogLevel min_level) {
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	4603      	mov	r3, r0
 800567c:	71fb      	strb	r3, [r7, #7]
    filter_level = min_level;
 800567e:	4a04      	ldr	r2, [pc, #16]	@ (8005690 <LOGGER_SetFilterLevel+0x1c>)
 8005680:	79fb      	ldrb	r3, [r7, #7]
 8005682:	7013      	strb	r3, [r2, #0]
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	200024be 	.word	0x200024be

08005694 <LOGGER_SetSDFilterLevel>:

void LOGGER_SetSDFilterLevel(LogLevel min_level) {
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	4603      	mov	r3, r0
 800569c:	71fb      	strb	r3, [r7, #7]
    sd_filter_level = min_level;
 800569e:	4a04      	ldr	r2, [pc, #16]	@ (80056b0 <LOGGER_SetSDFilterLevel+0x1c>)
 80056a0:	79fb      	ldrb	r3, [r7, #7]
 80056a2:	7013      	strb	r3, [r2, #0]
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	20000020 	.word	0x20000020

080056b4 <LOGGER_EnableSDLogging>:

void LOGGER_EnableSDLogging(bool enable) {
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	4603      	mov	r3, r0
 80056bc:	71fb      	strb	r3, [r7, #7]
    sd_logging_enabled = enable;
 80056be:	4a04      	ldr	r2, [pc, #16]	@ (80056d0 <LOGGER_EnableSDLogging+0x1c>)
 80056c0:	79fb      	ldrb	r3, [r7, #7]
 80056c2:	7013      	strb	r3, [r2, #0]
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	200024bf 	.word	0x200024bf

080056d4 <LOGGER_IsSDLoggingEnabled>:

bool LOGGER_IsSDLoggingEnabled(void) {
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
    return sd_logging_enabled;
 80056d8:	4b03      	ldr	r3, [pc, #12]	@ (80056e8 <LOGGER_IsSDLoggingEnabled+0x14>)
 80056da:	781b      	ldrb	r3, [r3, #0]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	200024bf 	.word	0x200024bf

080056ec <LOGGER_SetMode>:

void LOGGER_SetMode(LoggerMode_t mode) {
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	4603      	mov	r3, r0
 80056f4:	71fb      	strb	r3, [r7, #7]
    current_mode = mode;
 80056f6:	4a0d      	ldr	r2, [pc, #52]	@ (800572c <LOGGER_SetMode+0x40>)
 80056f8:	79fb      	ldrb	r3, [r7, #7]
 80056fa:	7013      	strb	r3, [r2, #0]
    
    // 모드에 따른 연결 상태 설정
    if (mode == LOGGER_MODE_TERMINAL_ONLY) {
 80056fc:	79fb      	ldrb	r3, [r7, #7]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d103      	bne.n	800570a <LOGGER_SetMode+0x1e>
        logger_connected = true;  // 터미널은 항상 연결됨
 8005702:	4b0b      	ldr	r3, [pc, #44]	@ (8005730 <LOGGER_SetMode+0x44>)
 8005704:	2201      	movs	r2, #1
 8005706:	701a      	strb	r2, [r3, #0]
    } else if (mode == LOGGER_MODE_SD_ONLY || mode == LOGGER_MODE_DUAL) {
        // SD 백엔드 사용 시 SDStorage 연결 상태에 따라 결정
        logger_connected = SDStorage_IsReady();
    }
}
 8005708:	e00b      	b.n	8005722 <LOGGER_SetMode+0x36>
    } else if (mode == LOGGER_MODE_SD_ONLY || mode == LOGGER_MODE_DUAL) {
 800570a:	79fb      	ldrb	r3, [r7, #7]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d002      	beq.n	8005716 <LOGGER_SetMode+0x2a>
 8005710:	79fb      	ldrb	r3, [r7, #7]
 8005712:	2b02      	cmp	r3, #2
 8005714:	d105      	bne.n	8005722 <LOGGER_SetMode+0x36>
        logger_connected = SDStorage_IsReady();
 8005716:	f7fc faeb 	bl	8001cf0 <SDStorage_IsReady>
 800571a:	4603      	mov	r3, r0
 800571c:	461a      	mov	r2, r3
 800571e:	4b04      	ldr	r3, [pc, #16]	@ (8005730 <LOGGER_SetMode+0x44>)
 8005720:	701a      	strb	r2, [r3, #0]
}
 8005722:	bf00      	nop
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	200024bd 	.word	0x200024bd
 8005730:	200024bc 	.word	0x200024bc

08005734 <LOGGER_SendFormatted>:

LoggerMode_t LOGGER_GetMode(void) {
    return current_mode;
}

void LOGGER_SendFormatted(LogLevel level, const char* format, ...) {
 8005734:	b40e      	push	{r1, r2, r3}
 8005736:	b590      	push	{r4, r7, lr}
 8005738:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 800573c:	af02      	add	r7, sp, #8
 800573e:	4602      	mov	r2, r0
 8005740:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8005744:	f2a3 2321 	subw	r3, r3, #545	@ 0x221
 8005748:	701a      	strb	r2, [r3, #0]
    // 필터 레벨 체크
    if (level < filter_level) return;
 800574a:	4b6a      	ldr	r3, [pc, #424]	@ (80058f4 <LOGGER_SendFormatted+0x1c0>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8005752:	f2a2 2221 	subw	r2, r2, #545	@ 0x221
 8005756:	7812      	ldrb	r2, [r2, #0]
 8005758:	429a      	cmp	r2, r3
 800575a:	f0c0 80bd 	bcc.w	80058d8 <LOGGER_SendFormatted+0x1a4>
    if (level < current_config.level) return;
 800575e:	4b66      	ldr	r3, [pc, #408]	@ (80058f8 <LOGGER_SendFormatted+0x1c4>)
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8005766:	f2a2 2221 	subw	r2, r2, #545	@ 0x221
 800576a:	7812      	ldrb	r2, [r2, #0]
 800576c:	429a      	cmp	r2, r3
 800576e:	f0c0 80b5 	bcc.w	80058dc <LOGGER_SendFormatted+0x1a8>
    
    char buffer[512];
    const char* level_str[] = {"[DEBUG]", "[INFO]", "[WARN]", "[ERROR]"};
 8005772:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8005776:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800577a:	4a60      	ldr	r2, [pc, #384]	@ (80058fc <LOGGER_SendFormatted+0x1c8>)
 800577c:	461c      	mov	r4, r3
 800577e:	4613      	mov	r3, r2
 8005780:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005782:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    // 타임스탬프 + 레벨 문자열 추가
    int offset = 0;
 8005786:	2300      	movs	r3, #0
 8005788:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
    const char* network_time = ResponseHandler_GetNetworkTime();
 800578c:	f7fb fd82 	bl	8001294 <ResponseHandler_GetNetworkTime>
 8005790:	f8c7 0220 	str.w	r0, [r7, #544]	@ 0x220
    if (network_time != NULL && ResponseHandler_IsTimeSynchronized()) {
 8005794:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8005798:	2b00      	cmp	r3, #0
 800579a:	d01c      	beq.n	80057d6 <LOGGER_SendFormatted+0xa2>
 800579c:	f7fb fd8c 	bl	80012b8 <ResponseHandler_IsTimeSynchronized>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d017      	beq.n	80057d6 <LOGGER_SendFormatted+0xa2>
        // 네트워크 시간이 있으면 타임스탬프 추가
        offset = snprintf(buffer, sizeof(buffer), "[%s] %s ", network_time, level_str[level]);
 80057a6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80057aa:	f2a3 2321 	subw	r3, r3, #545	@ 0x221
 80057ae:	781a      	ldrb	r2, [r3, #0]
 80057b0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80057b4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80057b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057bc:	f107 0020 	add.w	r0, r7, #32
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 80057c6:	4a4e      	ldr	r2, [pc, #312]	@ (8005900 <LOGGER_SendFormatted+0x1cc>)
 80057c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80057cc:	f012 f8c4 	bl	8017958 <sniprintf>
 80057d0:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224
 80057d4:	e013      	b.n	80057fe <LOGGER_SendFormatted+0xca>
    } else {
        // 네트워크 시간이 없으면 기본 형식
        offset = snprintf(buffer, sizeof(buffer), "%s ", level_str[level]);
 80057d6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80057da:	f2a3 2321 	subw	r3, r3, #545	@ 0x221
 80057de:	781a      	ldrb	r2, [r3, #0]
 80057e0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80057e4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80057e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ec:	f107 0020 	add.w	r0, r7, #32
 80057f0:	4a44      	ldr	r2, [pc, #272]	@ (8005904 <LOGGER_SendFormatted+0x1d0>)
 80057f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80057f6:	f012 f8af 	bl	8017958 <sniprintf>
 80057fa:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224
    }
    
    // 가변 인수 처리
    va_list args;
    va_start(args, format);
 80057fe:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 8005802:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8005806:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800580a:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer + offset, sizeof(buffer) - offset, format, args);
 800580c:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8005810:	f107 0220 	add.w	r2, r7, #32
 8005814:	18d0      	adds	r0, r2, r3
 8005816:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 800581a:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 800581e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8005822:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 800582c:	f012 f95e 	bl	8017aec <vsniprintf>
    va_end(args);
    
    // 모드에 따른 출력 처리
    switch (current_mode) {
 8005830:	4b35      	ldr	r3, [pc, #212]	@ (8005908 <LOGGER_SendFormatted+0x1d4>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b02      	cmp	r3, #2
 8005836:	d02b      	beq.n	8005890 <LOGGER_SendFormatted+0x15c>
 8005838:	2b02      	cmp	r3, #2
 800583a:	dc54      	bgt.n	80058e6 <LOGGER_SendFormatted+0x1b2>
 800583c:	2b00      	cmp	r3, #0
 800583e:	d002      	beq.n	8005846 <LOGGER_SendFormatted+0x112>
 8005840:	2b01      	cmp	r3, #1
 8005842:	d006      	beq.n	8005852 <LOGGER_SendFormatted+0x11e>
 8005844:	e04f      	b.n	80058e6 <LOGGER_SendFormatted+0x1b2>
        case LOGGER_MODE_TERMINAL_ONLY:
            LOGGER_Platform_Send(buffer);
 8005846:	f107 0320 	add.w	r3, r7, #32
 800584a:	4618      	mov	r0, r3
 800584c:	f000 f86e 	bl	800592c <LOGGER_Platform_Send>
            break;
 8005850:	e049      	b.n	80058e6 <LOGGER_SendFormatted+0x1b2>
            
        case LOGGER_MODE_SD_ONLY:
            // SD 로깅 활성화 + SD 필터 레벨 체크
            if (sd_logging_enabled && level >= sd_filter_level && SDStorage_IsReady()) {
 8005852:	4b2e      	ldr	r3, [pc, #184]	@ (800590c <LOGGER_SendFormatted+0x1d8>)
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d042      	beq.n	80058e0 <LOGGER_SendFormatted+0x1ac>
 800585a:	4b2d      	ldr	r3, [pc, #180]	@ (8005910 <LOGGER_SendFormatted+0x1dc>)
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8005862:	f2a2 2221 	subw	r2, r2, #545	@ 0x221
 8005866:	7812      	ldrb	r2, [r2, #0]
 8005868:	429a      	cmp	r2, r3
 800586a:	d339      	bcc.n	80058e0 <LOGGER_SendFormatted+0x1ac>
 800586c:	f7fc fa40 	bl	8001cf0 <SDStorage_IsReady>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d034      	beq.n	80058e0 <LOGGER_SendFormatted+0x1ac>
                SDStorage_WriteLog(buffer, strlen(buffer));
 8005876:	f107 0320 	add.w	r3, r7, #32
 800587a:	4618      	mov	r0, r3
 800587c:	f7fa fcd2 	bl	8000224 <strlen>
 8005880:	4602      	mov	r2, r0
 8005882:	f107 0320 	add.w	r3, r7, #32
 8005886:	4611      	mov	r1, r2
 8005888:	4618      	mov	r0, r3
 800588a:	f7fb ffc9 	bl	8001820 <SDStorage_WriteLog>
            }
            break;
 800588e:	e027      	b.n	80058e0 <LOGGER_SendFormatted+0x1ac>
            
        case LOGGER_MODE_DUAL:
            // 터미널 출력 (실시간)
            LOGGER_Platform_Send(buffer);
 8005890:	f107 0320 	add.w	r3, r7, #32
 8005894:	4618      	mov	r0, r3
 8005896:	f000 f849 	bl	800592c <LOGGER_Platform_Send>
            // SD 출력 (SD 로깅 활성화 + SD 필터 레벨 체크 + 에러 무시)
            if (sd_logging_enabled && level >= sd_filter_level && SDStorage_IsReady()) {
 800589a:	4b1c      	ldr	r3, [pc, #112]	@ (800590c <LOGGER_SendFormatted+0x1d8>)
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d020      	beq.n	80058e4 <LOGGER_SendFormatted+0x1b0>
 80058a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005910 <LOGGER_SendFormatted+0x1dc>)
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 80058aa:	f2a2 2221 	subw	r2, r2, #545	@ 0x221
 80058ae:	7812      	ldrb	r2, [r2, #0]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d317      	bcc.n	80058e4 <LOGGER_SendFormatted+0x1b0>
 80058b4:	f7fc fa1c 	bl	8001cf0 <SDStorage_IsReady>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d012      	beq.n	80058e4 <LOGGER_SendFormatted+0x1b0>
                SDStorage_WriteLog(buffer, strlen(buffer));
 80058be:	f107 0320 	add.w	r3, r7, #32
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fa fcae 	bl	8000224 <strlen>
 80058c8:	4602      	mov	r2, r0
 80058ca:	f107 0320 	add.w	r3, r7, #32
 80058ce:	4611      	mov	r1, r2
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7fb ffa5 	bl	8001820 <SDStorage_WriteLog>
            }
            break;
 80058d6:	e005      	b.n	80058e4 <LOGGER_SendFormatted+0x1b0>
    if (level < filter_level) return;
 80058d8:	bf00      	nop
 80058da:	e004      	b.n	80058e6 <LOGGER_SendFormatted+0x1b2>
    if (level < current_config.level) return;
 80058dc:	bf00      	nop
 80058de:	e002      	b.n	80058e6 <LOGGER_SendFormatted+0x1b2>
            break;
 80058e0:	bf00      	nop
 80058e2:	e000      	b.n	80058e6 <LOGGER_SendFormatted+0x1b2>
            break;
 80058e4:	bf00      	nop
    }
}
 80058e6:	f507 770a 	add.w	r7, r7, #552	@ 0x228
 80058ea:	46bd      	mov	sp, r7
 80058ec:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80058f0:	b003      	add	sp, #12
 80058f2:	4770      	bx	lr
 80058f4:	200024be 	.word	0x200024be
 80058f8:	20000024 	.word	0x20000024
 80058fc:	0801b6c8 	.word	0x0801b6c8
 8005900:	0801b6d8 	.word	0x0801b6d8
 8005904:	0801b6e4 	.word	0x0801b6e4
 8005908:	200024bd 	.word	0x200024bd
 800590c:	200024bf 	.word	0x200024bf
 8005910:	20000020 	.word	0x20000020

08005914 <LOGGER_Platform_Connect>:
#include "stm32f7xx_hal.h"
#include <string.h>

extern UART_HandleTypeDef huart1; // CubeMX가 생성한 UART1 (Virtual COM Port)

LoggerStatus LOGGER_Platform_Connect(const char* server_ip, int port) {
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
    (void)server_ip; (void)port;
    // STM32에서는 UART1이 이미 초기화되어 있으므로 추가 설정 불필요
    return LOGGER_STATUS_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <LOGGER_Platform_Send>:

LoggerStatus LOGGER_Platform_Disconnect(void) {
    return LOGGER_STATUS_OK;
}

LoggerStatus LOGGER_Platform_Send(const char* message) {
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
    if (message == NULL) return LOGGER_STATUS_ERROR;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d102      	bne.n	8005940 <LOGGER_Platform_Send+0x14>
 800593a:	f04f 33ff 	mov.w	r3, #4294967295
 800593e:	e01c      	b.n	800597a <LOGGER_Platform_Send+0x4e>
    
    // UART1을 통해 메시지 전송 (Virtual COM Port)
    int len = strlen(message);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7fa fc6f 	bl	8000224 <strlen>
 8005946:	4603      	mov	r3, r0
 8005948:	60fb      	str	r3, [r7, #12]
    if (len > 0) {
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2b00      	cmp	r3, #0
 800594e:	dd12      	ble.n	8005976 <LOGGER_Platform_Send+0x4a>
        if (HAL_UART_Transmit(&huart1, (uint8_t*)message, len, 1000) == HAL_OK) {
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	b29a      	uxth	r2, r3
 8005954:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005958:	6879      	ldr	r1, [r7, #4]
 800595a:	480a      	ldr	r0, [pc, #40]	@ (8005984 <LOGGER_Platform_Send+0x58>)
 800595c:	f009 fc32 	bl	800f1c4 <HAL_UART_Transmit>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d107      	bne.n	8005976 <LOGGER_Platform_Send+0x4a>
            // 줄바꿈 추가
            HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 8005966:	2364      	movs	r3, #100	@ 0x64
 8005968:	2202      	movs	r2, #2
 800596a:	4907      	ldr	r1, [pc, #28]	@ (8005988 <LOGGER_Platform_Send+0x5c>)
 800596c:	4805      	ldr	r0, [pc, #20]	@ (8005984 <LOGGER_Platform_Send+0x58>)
 800596e:	f009 fc29 	bl	800f1c4 <HAL_UART_Transmit>
            return LOGGER_STATUS_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	e001      	b.n	800597a <LOGGER_Platform_Send+0x4e>
        }
    }
    return LOGGER_STATUS_ERROR;
 8005976:	f04f 33ff 	mov.w	r3, #4294967295
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	2000208c 	.word	0x2000208c
 8005988:	0801b6e8 	.word	0x0801b6e8

0800598c <UART_Connect>:
    .timeout_ms = UART_DEFAULT_TIMEOUT_MS
};

// 공통 함수들 (테스트와 실제 빌드 모두에서 사용)
UartStatus UART_Connect(const char* port)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
    if (port == NULL) {
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d105      	bne.n	80059a6 <UART_Connect+0x1a>
        LOG_ERROR("[UART] Connect failed: NULL port");
 800599a:	4913      	ldr	r1, [pc, #76]	@ (80059e8 <UART_Connect+0x5c>)
 800599c:	2003      	movs	r0, #3
 800599e:	f7ff fec9 	bl	8005734 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e01c      	b.n	80059e0 <UART_Connect+0x54>
    }

    LOG_INFO("[UART] Connecting to %s", port);
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	4910      	ldr	r1, [pc, #64]	@ (80059ec <UART_Connect+0x60>)
 80059aa:	2001      	movs	r0, #1
 80059ac:	f7ff fec2 	bl	8005734 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Connect(port);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f8ef 	bl	8005b94 <UART_Platform_Connect>
 80059b6:	4603      	mov	r3, r0
 80059b8:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d108      	bne.n	80059d2 <UART_Connect+0x46>
        uart_connected = true;
 80059c0:	4b0b      	ldr	r3, [pc, #44]	@ (80059f0 <UART_Connect+0x64>)
 80059c2:	2201      	movs	r2, #1
 80059c4:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART] Successfully connected to %s", port);
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	490a      	ldr	r1, [pc, #40]	@ (80059f4 <UART_Connect+0x68>)
 80059ca:	2001      	movs	r0, #1
 80059cc:	f7ff feb2 	bl	8005734 <LOGGER_SendFormatted>
 80059d0:	e005      	b.n	80059de <UART_Connect+0x52>
    } else {
        LOG_ERROR("[UART] Failed to connect to %s (status: %d)", port, status);
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	4908      	ldr	r1, [pc, #32]	@ (80059f8 <UART_Connect+0x6c>)
 80059d8:	2003      	movs	r0, #3
 80059da:	f7ff feab 	bl	8005734 <LOGGER_SendFormatted>
    }

    return status;
 80059de:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	0801b6ec 	.word	0x0801b6ec
 80059ec:	0801b710 	.word	0x0801b710
 80059f0:	200024c0 	.word	0x200024c0
 80059f4:	0801b728 	.word	0x0801b728
 80059f8:	0801b74c 	.word	0x0801b74c

080059fc <UART_Send>:

    return status;
}

UartStatus UART_Send(const char* data)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
    if (!uart_connected) {
 8005a04:	4b19      	ldr	r3, [pc, #100]	@ (8005a6c <UART_Send+0x70>)
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	f083 0301 	eor.w	r3, r3, #1
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d005      	beq.n	8005a1e <UART_Send+0x22>
        LOG_ERROR("[UART] Send failed: not connected");
 8005a12:	4917      	ldr	r1, [pc, #92]	@ (8005a70 <UART_Send+0x74>)
 8005a14:	2003      	movs	r0, #3
 8005a16:	f7ff fe8d 	bl	8005734 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e022      	b.n	8005a64 <UART_Send+0x68>
    }

    if (data == NULL) {
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d105      	bne.n	8005a30 <UART_Send+0x34>
        LOG_ERROR("[UART] Send failed: NULL data");
 8005a24:	4913      	ldr	r1, [pc, #76]	@ (8005a74 <UART_Send+0x78>)
 8005a26:	2003      	movs	r0, #3
 8005a28:	f7ff fe84 	bl	8005734 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e019      	b.n	8005a64 <UART_Send+0x68>
    }

    LOG_DEBUG("[UART] Sending data: %s", data);
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	4911      	ldr	r1, [pc, #68]	@ (8005a78 <UART_Send+0x7c>)
 8005a34:	2000      	movs	r0, #0
 8005a36:	f7ff fe7d 	bl	8005734 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Send(data);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f992 	bl	8005d64 <UART_Platform_Send>
 8005a40:	4603      	mov	r3, r0
 8005a42:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 8005a44:	7bfb      	ldrb	r3, [r7, #15]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d105      	bne.n	8005a56 <UART_Send+0x5a>
        LOG_DEBUG("[UART] Send successful: %s", data);
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	490b      	ldr	r1, [pc, #44]	@ (8005a7c <UART_Send+0x80>)
 8005a4e:	2000      	movs	r0, #0
 8005a50:	f7ff fe70 	bl	8005734 <LOGGER_SendFormatted>
 8005a54:	e005      	b.n	8005a62 <UART_Send+0x66>
    } else {
        LOG_ERROR("[UART] Send failed: %s (status: %d)", data, status);
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	4909      	ldr	r1, [pc, #36]	@ (8005a80 <UART_Send+0x84>)
 8005a5c:	2003      	movs	r0, #3
 8005a5e:	f7ff fe69 	bl	8005734 <LOGGER_SendFormatted>
    }

    return status;
 8005a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	200024c0 	.word	0x200024c0
 8005a70:	0801b778 	.word	0x0801b778
 8005a74:	0801b79c 	.word	0x0801b79c
 8005a78:	0801b7bc 	.word	0x0801b7bc
 8005a7c:	0801b7d4 	.word	0x0801b7d4
 8005a80:	0801b7f0 	.word	0x0801b7f0

08005a84 <UART_Receive>:

UartStatus UART_Receive(char* buffer, int buffer_size, int* bytes_received)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
    if (!uart_connected) {
 8005a90:	4b22      	ldr	r3, [pc, #136]	@ (8005b1c <UART_Receive+0x98>)
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	f083 0301 	eor.w	r3, r3, #1
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d005      	beq.n	8005aaa <UART_Receive+0x26>
        LOG_ERROR("[UART] Receive failed: not connected");
 8005a9e:	4920      	ldr	r1, [pc, #128]	@ (8005b20 <UART_Receive+0x9c>)
 8005aa0:	2003      	movs	r0, #3
 8005aa2:	f7ff fe47 	bl	8005734 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e034      	b.n	8005b14 <UART_Receive+0x90>
    }

    if (buffer == NULL || buffer_size <= 0 || bytes_received == NULL) {
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d005      	beq.n	8005abc <UART_Receive+0x38>
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	dd02      	ble.n	8005abc <UART_Receive+0x38>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d105      	bne.n	8005ac8 <UART_Receive+0x44>
        LOG_ERROR("[UART] Receive failed: invalid parameters");
 8005abc:	4919      	ldr	r1, [pc, #100]	@ (8005b24 <UART_Receive+0xa0>)
 8005abe:	2003      	movs	r0, #3
 8005ac0:	f7ff fe38 	bl	8005734 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e025      	b.n	8005b14 <UART_Receive+0x90>
    }

    LOG_DEBUG("[UART] Receiving data (buffer_size: %d)", buffer_size);
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	4917      	ldr	r1, [pc, #92]	@ (8005b28 <UART_Receive+0xa4>)
 8005acc:	2000      	movs	r0, #0
 8005ace:	f7ff fe31 	bl	8005734 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Receive(buffer, buffer_size, bytes_received);
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	68b9      	ldr	r1, [r7, #8]
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 f980 	bl	8005ddc <UART_Platform_Receive>
 8005adc:	4603      	mov	r3, r0
 8005ade:	75fb      	strb	r3, [r7, #23]

    if (status == UART_STATUS_OK) {
 8005ae0:	7dfb      	ldrb	r3, [r7, #23]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d107      	bne.n	8005af6 <UART_Receive+0x72>
        LOG_DEBUG("[UART] Received %d bytes: %s", *bytes_received, buffer);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	490f      	ldr	r1, [pc, #60]	@ (8005b2c <UART_Receive+0xa8>)
 8005aee:	2000      	movs	r0, #0
 8005af0:	f7ff fe20 	bl	8005734 <LOGGER_SendFormatted>
 8005af4:	e00d      	b.n	8005b12 <UART_Receive+0x8e>
    } else if (status == UART_STATUS_TIMEOUT) {
 8005af6:	7dfb      	ldrb	r3, [r7, #23]
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d104      	bne.n	8005b06 <UART_Receive+0x82>
        LOG_DEBUG("[UART] Receive timeout");
 8005afc:	490c      	ldr	r1, [pc, #48]	@ (8005b30 <UART_Receive+0xac>)
 8005afe:	2000      	movs	r0, #0
 8005b00:	f7ff fe18 	bl	8005734 <LOGGER_SendFormatted>
 8005b04:	e005      	b.n	8005b12 <UART_Receive+0x8e>
    } else {
        LOG_ERROR("[UART] Receive failed (status: %d)", status);
 8005b06:	7dfb      	ldrb	r3, [r7, #23]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	490a      	ldr	r1, [pc, #40]	@ (8005b34 <UART_Receive+0xb0>)
 8005b0c:	2003      	movs	r0, #3
 8005b0e:	f7ff fe11 	bl	8005734 <LOGGER_SendFormatted>
    }

    return status;
 8005b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3718      	adds	r7, #24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	200024c0 	.word	0x200024c0
 8005b20:	0801b814 	.word	0x0801b814
 8005b24:	0801b83c 	.word	0x0801b83c
 8005b28:	0801b868 	.word	0x0801b868
 8005b2c:	0801b890 	.word	0x0801b890
 8005b30:	0801b8b0 	.word	0x0801b8b0
 8005b34:	0801b8c8 	.word	0x0801b8c8

08005b38 <flush_rx_buffer>:
// 내부 상태 변수들
static bool uart_initialized = false;
static bool dma_receiving = false;

// 수신 버퍼 플러시 함수
static void flush_rx_buffer(void) {
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
    uint8_t dummy;
    int flush_count = 0;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	607b      	str	r3, [r7, #4]
    
    // 방법 1: 직접 레지스터 체크로 기존 데이터 클리어
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8005b42:	e007      	b.n	8005b54 <flush_rx_buffer+0x1c>
        dummy = (uint8_t)(huart6.Instance->RDR & 0xFF);
 8005b44:	4b12      	ldr	r3, [pc, #72]	@ (8005b90 <flush_rx_buffer+0x58>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	70fb      	strb	r3, [r7, #3]
        flush_count++;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	3301      	adds	r3, #1
 8005b52:	607b      	str	r3, [r7, #4]
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8005b54:	4b0e      	ldr	r3, [pc, #56]	@ (8005b90 <flush_rx_buffer+0x58>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	f003 0320 	and.w	r3, r3, #32
 8005b5e:	2b20      	cmp	r3, #32
 8005b60:	d106      	bne.n	8005b70 <flush_rx_buffer+0x38>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b63      	cmp	r3, #99	@ 0x63
 8005b66:	dded      	ble.n	8005b44 <flush_rx_buffer+0xc>
    }
    
    // 방법 2: HAL로 남은 데이터 클리어 (타임아웃 1ms)
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 8005b68:	e002      	b.n	8005b70 <flush_rx_buffer+0x38>
        flush_count++;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	607b      	str	r3, [r7, #4]
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 8005b70:	1cf9      	adds	r1, r7, #3
 8005b72:	2301      	movs	r3, #1
 8005b74:	2201      	movs	r2, #1
 8005b76:	4806      	ldr	r0, [pc, #24]	@ (8005b90 <flush_rx_buffer+0x58>)
 8005b78:	f009 fbad 	bl	800f2d6 <HAL_UART_Receive>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d102      	bne.n	8005b88 <flush_rx_buffer+0x50>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2b63      	cmp	r3, #99	@ 0x63
 8005b86:	ddf0      	ble.n	8005b6a <flush_rx_buffer+0x32>
    }
}
 8005b88:	bf00      	nop
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	20002114 	.word	0x20002114

08005b94 <UART_Platform_Connect>:

UartStatus UART_Platform_Connect(const char* port) {
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
    // STM32에서는 이미 HAL_UART_Init()이 실행됨
    uart_initialized = true;
 8005b9c:	4b5b      	ldr	r3, [pc, #364]	@ (8005d0c <UART_Platform_Connect+0x178>)
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	701a      	strb	r2, [r3, #0]
    
    // UART 상태 체크 및 리셋
    LOG_INFO("[UART_STM32] UART gState: %d, RxState: %d", 
 8005ba2:	4b5b      	ldr	r3, [pc, #364]	@ (8005d10 <UART_Platform_Connect+0x17c>)
 8005ba4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005ba6:	4b5a      	ldr	r3, [pc, #360]	@ (8005d10 <UART_Platform_Connect+0x17c>)
 8005ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bac:	4959      	ldr	r1, [pc, #356]	@ (8005d14 <UART_Platform_Connect+0x180>)
 8005bae:	2001      	movs	r0, #1
 8005bb0:	f7ff fdc0 	bl	8005734 <LOGGER_SendFormatted>
             huart6.gState, huart6.RxState);
    
    // DMA 핸들 연결 상태 확인
    if (huart6.hdmarx != NULL) {
 8005bb4:	4b56      	ldr	r3, [pc, #344]	@ (8005d10 <UART_Platform_Connect+0x17c>)
 8005bb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00e      	beq.n	8005bda <UART_Platform_Connect+0x46>
        LOG_INFO("[UART_STM32] DMA RX handle is connected");
 8005bbc:	4956      	ldr	r1, [pc, #344]	@ (8005d18 <UART_Platform_Connect+0x184>)
 8005bbe:	2001      	movs	r0, #1
 8005bc0:	f7ff fdb8 	bl	8005734 <LOGGER_SendFormatted>
        LOG_INFO("[UART_STM32] DMA State: %d", huart6.hdmarx->State);
 8005bc4:	4b52      	ldr	r3, [pc, #328]	@ (8005d10 <UART_Platform_Connect+0x17c>)
 8005bc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	461a      	mov	r2, r3
 8005bd0:	4952      	ldr	r1, [pc, #328]	@ (8005d1c <UART_Platform_Connect+0x188>)
 8005bd2:	2001      	movs	r0, #1
 8005bd4:	f7ff fdae 	bl	8005734 <LOGGER_SendFormatted>
 8005bd8:	e018      	b.n	8005c0c <UART_Platform_Connect+0x78>
    } else {
        LOG_ERROR("[UART_STM32] DMA RX handle is NULL - DMA not initialized!");
 8005bda:	4951      	ldr	r1, [pc, #324]	@ (8005d20 <UART_Platform_Connect+0x18c>)
 8005bdc:	2003      	movs	r0, #3
 8005bde:	f7ff fda9 	bl	8005734 <LOGGER_SendFormatted>
        
        // DMA 핸들 강제 연결 시도
        extern DMA_HandleTypeDef hdma_usart6_rx;
        __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8005be2:	4b4b      	ldr	r3, [pc, #300]	@ (8005d10 <UART_Platform_Connect+0x17c>)
 8005be4:	4a4f      	ldr	r2, [pc, #316]	@ (8005d24 <UART_Platform_Connect+0x190>)
 8005be6:	675a      	str	r2, [r3, #116]	@ 0x74
 8005be8:	4b4e      	ldr	r3, [pc, #312]	@ (8005d24 <UART_Platform_Connect+0x190>)
 8005bea:	4a49      	ldr	r2, [pc, #292]	@ (8005d10 <UART_Platform_Connect+0x17c>)
 8005bec:	639a      	str	r2, [r3, #56]	@ 0x38
        
        if (huart6.hdmarx != NULL) {
 8005bee:	4b48      	ldr	r3, [pc, #288]	@ (8005d10 <UART_Platform_Connect+0x17c>)
 8005bf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d004      	beq.n	8005c00 <UART_Platform_Connect+0x6c>
            LOG_INFO("[UART_STM32] DMA RX handle manually linked");
 8005bf6:	494c      	ldr	r1, [pc, #304]	@ (8005d28 <UART_Platform_Connect+0x194>)
 8005bf8:	2001      	movs	r0, #1
 8005bfa:	f7ff fd9b 	bl	8005734 <LOGGER_SendFormatted>
 8005bfe:	e005      	b.n	8005c0c <UART_Platform_Connect+0x78>
        } else {
            LOG_ERROR("[UART_STM32] Failed to link DMA RX handle");
 8005c00:	494a      	ldr	r1, [pc, #296]	@ (8005d2c <UART_Platform_Connect+0x198>)
 8005c02:	2003      	movs	r0, #3
 8005c04:	f7ff fd96 	bl	8005734 <LOGGER_SendFormatted>
            return UART_STATUS_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e07a      	b.n	8005d02 <UART_Platform_Connect+0x16e>
        }
    }
    
    // 이전에 시작된 DMA 작업이 있으면 중지
    if (dma_receiving) {
 8005c0c:	4b48      	ldr	r3, [pc, #288]	@ (8005d30 <UART_Platform_Connect+0x19c>)
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d009      	beq.n	8005c28 <UART_Platform_Connect+0x94>
        HAL_UART_DMAStop(&huart6);
 8005c14:	483e      	ldr	r0, [pc, #248]	@ (8005d10 <UART_Platform_Connect+0x17c>)
 8005c16:	f009 fc6a 	bl	800f4ee <HAL_UART_DMAStop>
        dma_receiving = false;
 8005c1a:	4b45      	ldr	r3, [pc, #276]	@ (8005d30 <UART_Platform_Connect+0x19c>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] Previous DMA reception stopped");
 8005c20:	4944      	ldr	r1, [pc, #272]	@ (8005d34 <UART_Platform_Connect+0x1a0>)
 8005c22:	2001      	movs	r0, #1
 8005c24:	f7ff fd86 	bl	8005734 <LOGGER_SendFormatted>
    }
    
    // UART 상태를 READY로 강제 설정
    huart6.gState = HAL_UART_STATE_READY;
 8005c28:	4b39      	ldr	r3, [pc, #228]	@ (8005d10 <UART_Platform_Connect+0x17c>)
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart6.RxState = HAL_UART_STATE_READY;
 8005c2e:	4b38      	ldr	r3, [pc, #224]	@ (8005d10 <UART_Platform_Connect+0x17c>)
 8005c30:	2220      	movs	r2, #32
 8005c32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    
    // DMA 상태도 READY로 설정
    if (huart6.hdmarx != NULL) {
 8005c36:	4b36      	ldr	r3, [pc, #216]	@ (8005d10 <UART_Platform_Connect+0x17c>)
 8005c38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d026      	beq.n	8005c8c <UART_Platform_Connect+0xf8>
        // DMA 재초기화 (기존 상태 문제 해결)
        if (huart6.hdmarx->State != HAL_DMA_STATE_READY) {
 8005c3e:	4b34      	ldr	r3, [pc, #208]	@ (8005d10 <UART_Platform_Connect+0x17c>)
 8005c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c42:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d01a      	beq.n	8005c82 <UART_Platform_Connect+0xee>
            LOG_INFO("[UART_STM32] DMA not ready, reinitializing...");
 8005c4c:	493a      	ldr	r1, [pc, #232]	@ (8005d38 <UART_Platform_Connect+0x1a4>)
 8005c4e:	2001      	movs	r0, #1
 8005c50:	f7ff fd70 	bl	8005734 <LOGGER_SendFormatted>
            HAL_DMA_DeInit(huart6.hdmarx);
 8005c54:	4b2e      	ldr	r3, [pc, #184]	@ (8005d10 <UART_Platform_Connect+0x17c>)
 8005c56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f001 f943 	bl	8006ee4 <HAL_DMA_DeInit>
            if (HAL_DMA_Init(huart6.hdmarx) != HAL_OK) {
 8005c5e:	4b2c      	ldr	r3, [pc, #176]	@ (8005d10 <UART_Platform_Connect+0x17c>)
 8005c60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c62:	4618      	mov	r0, r3
 8005c64:	f001 f890 	bl	8006d88 <HAL_DMA_Init>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d005      	beq.n	8005c7a <UART_Platform_Connect+0xe6>
                LOG_ERROR("[UART_STM32] DMA reinitialization failed");
 8005c6e:	4933      	ldr	r1, [pc, #204]	@ (8005d3c <UART_Platform_Connect+0x1a8>)
 8005c70:	2003      	movs	r0, #3
 8005c72:	f7ff fd5f 	bl	8005734 <LOGGER_SendFormatted>
                return UART_STATUS_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e043      	b.n	8005d02 <UART_Platform_Connect+0x16e>
            }
            LOG_INFO("[UART_STM32] DMA reinitialized successfully");
 8005c7a:	4931      	ldr	r1, [pc, #196]	@ (8005d40 <UART_Platform_Connect+0x1ac>)
 8005c7c:	2001      	movs	r0, #1
 8005c7e:	f7ff fd59 	bl	8005734 <LOGGER_SendFormatted>
        }
        huart6.hdmarx->State = HAL_DMA_STATE_READY;
 8005c82:	4b23      	ldr	r3, [pc, #140]	@ (8005d10 <UART_Platform_Connect+0x17c>)
 8005c84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 초기 버퍼 플러시
    flush_rx_buffer();
 8005c8c:	f7ff ff54 	bl	8005b38 <flush_rx_buffer>
    
    // DMA 기반 연속 수신 시작
    uart_rx_complete_flag = 0;
 8005c90:	4b2c      	ldr	r3, [pc, #176]	@ (8005d44 <UART_Platform_Connect+0x1b0>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	701a      	strb	r2, [r3, #0]
    uart_rx_error_flag = 0;
 8005c96:	4b2c      	ldr	r3, [pc, #176]	@ (8005d48 <UART_Platform_Connect+0x1b4>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	701a      	strb	r2, [r3, #0]
    uart_rx_length = 0;
 8005c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8005d4c <UART_Platform_Connect+0x1b8>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	801a      	strh	r2, [r3, #0]
    
    // DMA 수신 버퍼 클리어
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8005ca2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	4829      	ldr	r0, [pc, #164]	@ (8005d50 <UART_Platform_Connect+0x1bc>)
 8005caa:	f011 ff2d 	bl	8017b08 <memset>
    
    LOG_INFO("[UART_STM32] Starting DMA reception...");
 8005cae:	4929      	ldr	r1, [pc, #164]	@ (8005d54 <UART_Platform_Connect+0x1c0>)
 8005cb0:	2001      	movs	r0, #1
 8005cb2:	f7ff fd3f 	bl	8005734 <LOGGER_SendFormatted>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8005cb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cba:	4925      	ldr	r1, [pc, #148]	@ (8005d50 <UART_Platform_Connect+0x1bc>)
 8005cbc:	4814      	ldr	r0, [pc, #80]	@ (8005d10 <UART_Platform_Connect+0x17c>)
 8005cbe:	f009 fbd2 	bl	800f466 <HAL_UART_Receive_DMA>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10a      	bne.n	8005ce2 <UART_Platform_Connect+0x14e>
        dma_receiving = true;
 8005ccc:	4b18      	ldr	r3, [pc, #96]	@ (8005d30 <UART_Platform_Connect+0x19c>)
 8005cce:	2201      	movs	r2, #1
 8005cd0:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] ✓ DMA continuous reception started (buffer size: %d)", sizeof(rx_buffer));
 8005cd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cd6:	4920      	ldr	r1, [pc, #128]	@ (8005d58 <UART_Platform_Connect+0x1c4>)
 8005cd8:	2001      	movs	r0, #1
 8005cda:	f7ff fd2b 	bl	8005734 <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
                  huart6.gState, huart6.RxState);
        return UART_STATUS_ERROR;
    }
    
    return UART_STATUS_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	e00f      	b.n	8005d02 <UART_Platform_Connect+0x16e>
        LOG_ERROR("[UART_STM32] ✗ Failed to start DMA reception (status: %d)", status);
 8005ce2:	7bfb      	ldrb	r3, [r7, #15]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	491d      	ldr	r1, [pc, #116]	@ (8005d5c <UART_Platform_Connect+0x1c8>)
 8005ce8:	2003      	movs	r0, #3
 8005cea:	f7ff fd23 	bl	8005734 <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
 8005cee:	4b08      	ldr	r3, [pc, #32]	@ (8005d10 <UART_Platform_Connect+0x17c>)
 8005cf0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005cf2:	4b07      	ldr	r3, [pc, #28]	@ (8005d10 <UART_Platform_Connect+0x17c>)
 8005cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cf8:	4919      	ldr	r1, [pc, #100]	@ (8005d60 <UART_Platform_Connect+0x1cc>)
 8005cfa:	2003      	movs	r0, #3
 8005cfc:	f7ff fd1a 	bl	8005734 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005d00:	2301      	movs	r3, #1
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	200026c8 	.word	0x200026c8
 8005d10:	20002114 	.word	0x20002114
 8005d14:	0801bac4 	.word	0x0801bac4
 8005d18:	0801baf0 	.word	0x0801baf0
 8005d1c:	0801bb18 	.word	0x0801bb18
 8005d20:	0801bb34 	.word	0x0801bb34
 8005d24:	200023ec 	.word	0x200023ec
 8005d28:	0801bb70 	.word	0x0801bb70
 8005d2c:	0801bb9c 	.word	0x0801bb9c
 8005d30:	200026c9 	.word	0x200026c9
 8005d34:	0801bbc8 	.word	0x0801bbc8
 8005d38:	0801bbf4 	.word	0x0801bbf4
 8005d3c:	0801bc24 	.word	0x0801bc24
 8005d40:	0801bc50 	.word	0x0801bc50
 8005d44:	200024c1 	.word	0x200024c1
 8005d48:	200024c2 	.word	0x200024c2
 8005d4c:	200024c4 	.word	0x200024c4
 8005d50:	200024c8 	.word	0x200024c8
 8005d54:	0801bc7c 	.word	0x0801bc7c
 8005d58:	0801bca4 	.word	0x0801bca4
 8005d5c:	0801bce8 	.word	0x0801bce8
 8005d60:	0801bd24 	.word	0x0801bd24

08005d64 <UART_Platform_Send>:
    uart_initialized = false;
    
    return UART_STATUS_OK;
}

UartStatus UART_Platform_Send(const char* data) {
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
    if (data == NULL || !uart_initialized) return UART_STATUS_ERROR;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d006      	beq.n	8005d80 <UART_Platform_Send+0x1c>
 8005d72:	4b17      	ldr	r3, [pc, #92]	@ (8005dd0 <UART_Platform_Send+0x6c>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	f083 0301 	eor.w	r3, r3, #1
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <UART_Platform_Send+0x20>
 8005d80:	2301      	movs	r3, #1
 8005d82:	e021      	b.n	8005dc8 <UART_Platform_Send+0x64>
    
    int len = strlen(data);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7fa fa4d 	bl	8000224 <strlen>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	60fb      	str	r3, [r7, #12]
    if (len == 0) return UART_STATUS_OK;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <UART_Platform_Send+0x34>
 8005d94:	2300      	movs	r3, #0
 8005d96:	e017      	b.n	8005dc8 <UART_Platform_Send+0x64>
    
    // 송신 전 수신 버퍼 플러시 (깨끗한 상태에서 시작)
    flush_rx_buffer();
 8005d98:	f7ff fece 	bl	8005b38 <flush_rx_buffer>
    
    // 단순한 송신
    HAL_StatusTypeDef tx_status = HAL_UART_Transmit(&huart6, (uint8_t*)data, len, 1000);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005da4:	6879      	ldr	r1, [r7, #4]
 8005da6:	480b      	ldr	r0, [pc, #44]	@ (8005dd4 <UART_Platform_Send+0x70>)
 8005da8:	f009 fa0c 	bl	800f1c4 <HAL_UART_Transmit>
 8005dac:	4603      	mov	r3, r0
 8005dae:	72fb      	strb	r3, [r7, #11]
    
    if (tx_status == HAL_OK) {
 8005db0:	7afb      	ldrb	r3, [r7, #11]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <UART_Platform_Send+0x56>
        return UART_STATUS_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	e006      	b.n	8005dc8 <UART_Platform_Send+0x64>
    } else {
        LOG_ERROR("[UART_STM32] ✗ Transmission failed (HAL status: %d)", tx_status);
 8005dba:	7afb      	ldrb	r3, [r7, #11]
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	4906      	ldr	r1, [pc, #24]	@ (8005dd8 <UART_Platform_Send+0x74>)
 8005dc0:	2003      	movs	r0, #3
 8005dc2:	f7ff fcb7 	bl	8005734 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005dc6:	2301      	movs	r3, #1
    }
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	200026c8 	.word	0x200026c8
 8005dd4:	20002114 	.word	0x20002114
 8005dd8:	0801bd84 	.word	0x0801bd84

08005ddc <UART_Platform_Receive>:

UartStatus UART_Platform_Receive(char* buffer, int buffer_size, int* bytes_received) {
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b08a      	sub	sp, #40	@ 0x28
 8005de0:	af02      	add	r7, sp, #8
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
    if (buffer == NULL || bytes_received == NULL || !uart_initialized) {
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d009      	beq.n	8005e02 <UART_Platform_Receive+0x26>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d006      	beq.n	8005e02 <UART_Platform_Receive+0x26>
 8005df4:	4b74      	ldr	r3, [pc, #464]	@ (8005fc8 <UART_Platform_Receive+0x1ec>)
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	f083 0301 	eor.w	r3, r3, #1
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <UART_Platform_Receive+0x2a>
        return UART_STATUS_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e0dc      	b.n	8005fc0 <UART_Platform_Receive+0x1e4>
    }
    
    if (buffer_size <= 0) {
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	dc04      	bgt.n	8005e16 <UART_Platform_Receive+0x3a>
        *bytes_received = 0;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	601a      	str	r2, [r3, #0]
        return UART_STATUS_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e0d4      	b.n	8005fc0 <UART_Platform_Receive+0x1e4>
    }
    
    *bytes_received = 0;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	601a      	str	r2, [r3, #0]
    
    // DMA 수신이 시작되지 않았으면 에러
    if (!dma_receiving) {
 8005e1c:	4b6b      	ldr	r3, [pc, #428]	@ (8005fcc <UART_Platform_Receive+0x1f0>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	f083 0301 	eor.w	r3, r3, #1
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d001      	beq.n	8005e2e <UART_Platform_Receive+0x52>
        return UART_STATUS_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e0c8      	b.n	8005fc0 <UART_Platform_Receive+0x1e4>
    }
    
    // 에러 체크
    if (uart_rx_error_flag) {
 8005e2e:	4b68      	ldr	r3, [pc, #416]	@ (8005fd0 <UART_Platform_Receive+0x1f4>)
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d008      	beq.n	8005e4a <UART_Platform_Receive+0x6e>
        uart_rx_error_flag = 0;  // 플래그 클리어
 8005e38:	4b65      	ldr	r3, [pc, #404]	@ (8005fd0 <UART_Platform_Receive+0x1f4>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	701a      	strb	r2, [r3, #0]
        LOG_WARN("[UART_STM32] ⚠ DMA reception error occurred");
 8005e3e:	4965      	ldr	r1, [pc, #404]	@ (8005fd4 <UART_Platform_Receive+0x1f8>)
 8005e40:	2002      	movs	r0, #2
 8005e42:	f7ff fc77 	bl	8005734 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e0ba      	b.n	8005fc0 <UART_Platform_Receive+0x1e4>
    }
    
    // DMA 수신 완료 체크
    if (uart_rx_complete_flag) {
 8005e4a:	4b63      	ldr	r3, [pc, #396]	@ (8005fd8 <UART_Platform_Receive+0x1fc>)
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f000 80b4 	beq.w	8005fbe <UART_Platform_Receive+0x1e2>
        uart_rx_complete_flag = 0;  // 플래그 클리어
 8005e56:	4b60      	ldr	r3, [pc, #384]	@ (8005fd8 <UART_Platform_Receive+0x1fc>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	701a      	strb	r2, [r3, #0]
        
        // 실제 수신된 바이트 수 확인
        uint16_t received_length = uart_rx_length;
 8005e5c:	4b5f      	ldr	r3, [pc, #380]	@ (8005fdc <UART_Platform_Receive+0x200>)
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	837b      	strh	r3, [r7, #26]
        LOG_DEBUG("[UART_STM32] DMA received %d bytes", received_length);
 8005e62:	8b7b      	ldrh	r3, [r7, #26]
 8005e64:	461a      	mov	r2, r3
 8005e66:	495e      	ldr	r1, [pc, #376]	@ (8005fe0 <UART_Platform_Receive+0x204>)
 8005e68:	2000      	movs	r0, #0
 8005e6a:	f7ff fc63 	bl	8005734 <LOGGER_SendFormatted>
        
        if (received_length > 0 && received_length <= buffer_size - 1) {
 8005e6e:	8b7b      	ldrh	r3, [r7, #26]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 809e 	beq.w	8005fb2 <UART_Platform_Receive+0x1d6>
 8005e76:	8b7b      	ldrh	r3, [r7, #26]
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	f340 8099 	ble.w	8005fb2 <UART_Platform_Receive+0x1d6>
            // 데이터 복사
            memcpy(buffer, rx_buffer, received_length);
 8005e80:	8b7b      	ldrh	r3, [r7, #26]
 8005e82:	461a      	mov	r2, r3
 8005e84:	4957      	ldr	r1, [pc, #348]	@ (8005fe4 <UART_Platform_Receive+0x208>)
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f011 feff 	bl	8017c8a <memcpy>
            buffer[received_length] = '\0';  // null terminate
 8005e8c:	8b7b      	ldrh	r3, [r7, #26]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	4413      	add	r3, r2
 8005e92:	2200      	movs	r2, #0
 8005e94:	701a      	strb	r2, [r3, #0]
            *bytes_received = received_length;
 8005e96:	8b7a      	ldrh	r2, [r7, #26]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	601a      	str	r2, [r3, #0]
            
            // 수신된 데이터 로그 (간단하게)
            LOG_DEBUG("[UART_STM32] Received data (%d bytes): '%s'", received_length, buffer);
 8005e9c:	8b7a      	ldrh	r2, [r7, #26]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	4951      	ldr	r1, [pc, #324]	@ (8005fe8 <UART_Platform_Receive+0x20c>)
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	f7ff fc46 	bl	8005734 <LOGGER_SendFormatted>
            
            // 새로운 수신을 위해 DMA 완전 리셋 후 재시작
            memset(rx_buffer, 0, sizeof(rx_buffer));
 8005ea8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005eac:	2100      	movs	r1, #0
 8005eae:	484d      	ldr	r0, [pc, #308]	@ (8005fe4 <UART_Platform_Receive+0x208>)
 8005eb0:	f011 fe2a 	bl	8017b08 <memset>
            
            // 1. DMA 완전 정지
            HAL_UART_DMAStop(&huart6);
 8005eb4:	484d      	ldr	r0, [pc, #308]	@ (8005fec <UART_Platform_Receive+0x210>)
 8005eb6:	f009 fb1a 	bl	800f4ee <HAL_UART_DMAStop>
            
            // 2. 모든 UART 에러 플래그 클리어
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_PEF);
 8005eba:	4b4c      	ldr	r3, [pc, #304]	@ (8005fec <UART_Platform_Receive+0x210>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_FEF);
 8005ec2:	4b4a      	ldr	r3, [pc, #296]	@ (8005fec <UART_Platform_Receive+0x210>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_NEF);
 8005eca:	4b48      	ldr	r3, [pc, #288]	@ (8005fec <UART_Platform_Receive+0x210>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2204      	movs	r2, #4
 8005ed0:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_OREF);
 8005ed2:	4b46      	ldr	r3, [pc, #280]	@ (8005fec <UART_Platform_Receive+0x210>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2208      	movs	r2, #8
 8005ed8:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_IDLEF);
 8005eda:	4b44      	ldr	r3, [pc, #272]	@ (8005fec <UART_Platform_Receive+0x210>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2210      	movs	r2, #16
 8005ee0:	621a      	str	r2, [r3, #32]
            
            // 3. DMA 스트림이 완전히 정지될 때까지 대기
            if (huart6.hdmarx != NULL) {
 8005ee2:	4b42      	ldr	r3, [pc, #264]	@ (8005fec <UART_Platform_Receive+0x210>)
 8005ee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d025      	beq.n	8005f36 <UART_Platform_Receive+0x15a>
                int timeout = 1000;
 8005eea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005eee:	61fb      	str	r3, [r7, #28]
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 8005ef0:	e00b      	b.n	8005f0a <UART_Platform_Receive+0x12e>
                    timeout--;
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	61fb      	str	r3, [r7, #28]
                    for(volatile int i = 0; i < 100; i++); // 짧은 지연
 8005ef8:	2300      	movs	r3, #0
 8005efa:	617b      	str	r3, [r7, #20]
 8005efc:	e002      	b.n	8005f04 <UART_Platform_Receive+0x128>
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	3301      	adds	r3, #1
 8005f02:	617b      	str	r3, [r7, #20]
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	2b63      	cmp	r3, #99	@ 0x63
 8005f08:	ddf9      	ble.n	8005efe <UART_Platform_Receive+0x122>
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 8005f0a:	4b38      	ldr	r3, [pc, #224]	@ (8005fec <UART_Platform_Receive+0x210>)
 8005f0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d002      	beq.n	8005f1e <UART_Platform_Receive+0x142>
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	dce9      	bgt.n	8005ef2 <UART_Platform_Receive+0x116>
                }
                
                if (timeout == 0) {
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d108      	bne.n	8005f36 <UART_Platform_Receive+0x15a>
                    LOG_WARN("[UART_STM32] DMA did not reach READY state, forcing reset");
 8005f24:	4932      	ldr	r1, [pc, #200]	@ (8005ff0 <UART_Platform_Receive+0x214>)
 8005f26:	2002      	movs	r0, #2
 8005f28:	f7ff fc04 	bl	8005734 <LOGGER_SendFormatted>
                    huart6.hdmarx->State = HAL_DMA_STATE_READY;
 8005f2c:	4b2f      	ldr	r3, [pc, #188]	@ (8005fec <UART_Platform_Receive+0x210>)
 8005f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                }
            }
            
            // 4. UART 상태 리셋 (DMA 완전 정지 후)
            huart6.RxState = HAL_UART_STATE_READY;
 8005f36:	4b2d      	ldr	r3, [pc, #180]	@ (8005fec <UART_Platform_Receive+0x210>)
 8005f38:	2220      	movs	r2, #32
 8005f3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            huart6.gState = HAL_UART_STATE_READY;
 8005f3e:	4b2b      	ldr	r3, [pc, #172]	@ (8005fec <UART_Platform_Receive+0x210>)
 8005f40:	2220      	movs	r2, #32
 8005f42:	67da      	str	r2, [r3, #124]	@ 0x7c
            
            // 5. 충분한 지연 후 재시작
            for(volatile int i = 0; i < 10000; i++); // 더 긴 지연
 8005f44:	2300      	movs	r3, #0
 8005f46:	613b      	str	r3, [r7, #16]
 8005f48:	e002      	b.n	8005f50 <UART_Platform_Receive+0x174>
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	613b      	str	r3, [r7, #16]
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	f242 720f 	movw	r2, #9999	@ 0x270f
 8005f56:	4293      	cmp	r3, r2
 8005f58:	ddf7      	ble.n	8005f4a <UART_Platform_Receive+0x16e>
            
            // 6. DMA 재시작
            HAL_StatusTypeDef restart_status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8005f5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f5e:	4921      	ldr	r1, [pc, #132]	@ (8005fe4 <UART_Platform_Receive+0x208>)
 8005f60:	4822      	ldr	r0, [pc, #136]	@ (8005fec <UART_Platform_Receive+0x210>)
 8005f62:	f009 fa80 	bl	800f466 <HAL_UART_Receive_DMA>
 8005f66:	4603      	mov	r3, r0
 8005f68:	767b      	strb	r3, [r7, #25]
            if (restart_status == HAL_OK) {
 8005f6a:	7e7b      	ldrb	r3, [r7, #25]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d104      	bne.n	8005f7a <UART_Platform_Receive+0x19e>
                LOG_DEBUG("[UART_STM32] DMA restarted for next reception");
 8005f70:	4920      	ldr	r1, [pc, #128]	@ (8005ff4 <UART_Platform_Receive+0x218>)
 8005f72:	2000      	movs	r0, #0
 8005f74:	f7ff fbde 	bl	8005734 <LOGGER_SendFormatted>
 8005f78:	e019      	b.n	8005fae <UART_Platform_Receive+0x1d2>
            } else {
                LOG_WARN("[UART_STM32] DMA restart failed (status: %d), UART state: g=%d rx=%d", 
 8005f7a:	7e7a      	ldrb	r2, [r7, #25]
 8005f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8005fec <UART_Platform_Receive+0x210>)
 8005f7e:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8005f80:	4b1a      	ldr	r3, [pc, #104]	@ (8005fec <UART_Platform_Receive+0x210>)
 8005f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	491b      	ldr	r1, [pc, #108]	@ (8005ff8 <UART_Platform_Receive+0x21c>)
 8005f8c:	2002      	movs	r0, #2
 8005f8e:	f7ff fbd1 	bl	8005734 <LOGGER_SendFormatted>
                        restart_status, huart6.gState, huart6.RxState);
                if (huart6.hdmarx != NULL) {
 8005f92:	4b16      	ldr	r3, [pc, #88]	@ (8005fec <UART_Platform_Receive+0x210>)
 8005f94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d009      	beq.n	8005fae <UART_Platform_Receive+0x1d2>
                    LOG_WARN("[UART_STM32] DMA state: %d", huart6.hdmarx->State);
 8005f9a:	4b14      	ldr	r3, [pc, #80]	@ (8005fec <UART_Platform_Receive+0x210>)
 8005f9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f9e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	4915      	ldr	r1, [pc, #84]	@ (8005ffc <UART_Platform_Receive+0x220>)
 8005fa8:	2002      	movs	r0, #2
 8005faa:	f7ff fbc3 	bl	8005734 <LOGGER_SendFormatted>
                }
            }
            
            return UART_STATUS_OK;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	e006      	b.n	8005fc0 <UART_Platform_Receive+0x1e4>
        } else {
            LOG_WARN("[UART_STM32] Invalid received length: %d (buffer size: %d)", received_length, buffer_size);
 8005fb2:	8b7a      	ldrh	r2, [r7, #26]
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	4912      	ldr	r1, [pc, #72]	@ (8006000 <UART_Platform_Receive+0x224>)
 8005fb8:	2002      	movs	r0, #2
 8005fba:	f7ff fbbb 	bl	8005734 <LOGGER_SendFormatted>
        }
    }
    
    // 수신된 데이터 없음
    return UART_STATUS_TIMEOUT;
 8005fbe:	2302      	movs	r3, #2
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3720      	adds	r7, #32
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	200026c8 	.word	0x200026c8
 8005fcc:	200026c9 	.word	0x200026c9
 8005fd0:	200024c2 	.word	0x200024c2
 8005fd4:	0801bdbc 	.word	0x0801bdbc
 8005fd8:	200024c1 	.word	0x200024c1
 8005fdc:	200024c4 	.word	0x200024c4
 8005fe0:	0801bdec 	.word	0x0801bdec
 8005fe4:	200024c8 	.word	0x200024c8
 8005fe8:	0801be10 	.word	0x0801be10
 8005fec:	20002114 	.word	0x20002114
 8005ff0:	0801be3c 	.word	0x0801be3c
 8005ff4:	0801be78 	.word	0x0801be78
 8005ff8:	0801bea8 	.word	0x0801bea8
 8005ffc:	0801bef0 	.word	0x0801bef0
 8006000:	0801bf0c 	.word	0x0801bf0c

08006004 <HAL_UART_RxCpltCallback>:
// ============================================================================
// HAL UART 콜백 함수들 - main.c에서 이동됨
// ============================================================================

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a0a      	ldr	r2, [pc, #40]	@ (800603c <HAL_UART_RxCpltCallback+0x38>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d10e      	bne.n	8006034 <HAL_UART_RxCpltCallback+0x30>
  {
    // DMA 수신 완료 (전체 버퍼) - 거의 발생하지 않음
    uart_rx_complete_flag = 1;
 8006016:	4b0a      	ldr	r3, [pc, #40]	@ (8006040 <HAL_UART_RxCpltCallback+0x3c>)
 8006018:	2201      	movs	r2, #1
 800601a:	701a      	strb	r2, [r3, #0]
    uart_rx_length = sizeof(rx_buffer);
 800601c:	4b09      	ldr	r3, [pc, #36]	@ (8006044 <HAL_UART_RxCpltCallback+0x40>)
 800601e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006022:	801a      	strh	r2, [r3, #0]
    LOG_DEBUG("[DMA] RxCpltCallback: Full buffer received (%d bytes)", uart_rx_length);
 8006024:	4b07      	ldr	r3, [pc, #28]	@ (8006044 <HAL_UART_RxCpltCallback+0x40>)
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	b29b      	uxth	r3, r3
 800602a:	461a      	mov	r2, r3
 800602c:	4906      	ldr	r1, [pc, #24]	@ (8006048 <HAL_UART_RxCpltCallback+0x44>)
 800602e:	2000      	movs	r0, #0
 8006030:	f7ff fb80 	bl	8005734 <LOGGER_SendFormatted>
  }
}
 8006034:	bf00      	nop
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	40011400 	.word	0x40011400
 8006040:	200024c1 	.word	0x200024c1
 8006044:	200024c4 	.word	0x200024c4
 8006048:	0801bf48 	.word	0x0801bf48

0800604c <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a05      	ldr	r2, [pc, #20]	@ (8006070 <HAL_UART_RxHalfCpltCallback+0x24>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d103      	bne.n	8006066 <HAL_UART_RxHalfCpltCallback+0x1a>
  {
    // DMA 수신 절반 완료 - NORMAL 모드에서는 처리하지 않음 (IDLE 인터럽트가 처리)
    LOG_WARN("[DMA] RxHalfCpltCallback: Half buffer reached but ignoring in NORMAL mode");
 800605e:	4905      	ldr	r1, [pc, #20]	@ (8006074 <HAL_UART_RxHalfCpltCallback+0x28>)
 8006060:	2002      	movs	r0, #2
 8006062:	f7ff fb67 	bl	8005734 <LOGGER_SendFormatted>
    // uart_rx_complete_flag는 설정하지 않음 - IDLE 인터럽트에서만 설정
  }
}
 8006066:	bf00      	nop
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	40011400 	.word	0x40011400
 8006074:	0801bf80 	.word	0x0801bf80

08006078 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a3c      	ldr	r2, [pc, #240]	@ (8006178 <HAL_UART_ErrorCallback+0x100>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d171      	bne.n	800616e <HAL_UART_ErrorCallback+0xf6>
  {
    // UART 에러 발생
    uart_rx_error_flag = 1;
 800608a:	4b3c      	ldr	r3, [pc, #240]	@ (800617c <HAL_UART_ErrorCallback+0x104>)
 800608c:	2201      	movs	r2, #1
 800608e:	701a      	strb	r2, [r3, #0]
    LOG_WARN("[DMA] ErrorCallback: UART error occurred");
 8006090:	493b      	ldr	r1, [pc, #236]	@ (8006180 <HAL_UART_ErrorCallback+0x108>)
 8006092:	2002      	movs	r0, #2
 8006094:	f7ff fb4e 	bl	8005734 <LOGGER_SendFormatted>
    
    // 모든 에러 플래그 클리어
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) {
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	f003 0308 	and.w	r3, r3, #8
 80060a2:	2b08      	cmp	r3, #8
 80060a4:	d107      	bne.n	80060b6 <HAL_UART_ErrorCallback+0x3e>
      __HAL_UART_CLEAR_OREFLAG(huart);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2208      	movs	r2, #8
 80060ac:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Overrun error cleared");
 80060ae:	4935      	ldr	r1, [pc, #212]	@ (8006184 <HAL_UART_ErrorCallback+0x10c>)
 80060b0:	2002      	movs	r0, #2
 80060b2:	f7ff fb3f 	bl	8005734 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) {
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	69db      	ldr	r3, [r3, #28]
 80060bc:	f003 0304 	and.w	r3, r3, #4
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d107      	bne.n	80060d4 <HAL_UART_ErrorCallback+0x5c>
      __HAL_UART_CLEAR_NEFLAG(huart);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2204      	movs	r2, #4
 80060ca:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Noise error cleared");
 80060cc:	492e      	ldr	r1, [pc, #184]	@ (8006188 <HAL_UART_ErrorCallback+0x110>)
 80060ce:	2002      	movs	r0, #2
 80060d0:	f7ff fb30 	bl	8005734 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) {
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d107      	bne.n	80060f2 <HAL_UART_ErrorCallback+0x7a>
      __HAL_UART_CLEAR_FEFLAG(huart);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2202      	movs	r2, #2
 80060e8:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Frame error cleared");
 80060ea:	4928      	ldr	r1, [pc, #160]	@ (800618c <HAL_UART_ErrorCallback+0x114>)
 80060ec:	2002      	movs	r0, #2
 80060ee:	f7ff fb21 	bl	8005734 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) {
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d107      	bne.n	8006110 <HAL_UART_ErrorCallback+0x98>
      __HAL_UART_CLEAR_PEFLAG(huart);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2201      	movs	r2, #1
 8006106:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Parity error cleared");
 8006108:	4921      	ldr	r1, [pc, #132]	@ (8006190 <HAL_UART_ErrorCallback+0x118>)
 800610a:	2002      	movs	r0, #2
 800610c:	f7ff fb12 	bl	8005734 <LOGGER_SendFormatted>
    }
    
    // UART와 DMA 상태 강제 리셋
    HAL_UART_DMAStop(huart);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f009 f9ec 	bl	800f4ee <HAL_UART_DMAStop>
    huart->gState = HAL_UART_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2220      	movs	r2, #32
 800611a:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2220      	movs	r2, #32
 8006120:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (huart->hdmarx != NULL) {
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006128:	2b00      	cmp	r3, #0
 800612a:	d004      	beq.n	8006136 <HAL_UART_ErrorCallback+0xbe>
      huart->hdmarx->State = HAL_DMA_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 버퍼 클리어 후 DMA 재시작 (일반 모드)
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8006136:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800613a:	2100      	movs	r1, #0
 800613c:	4815      	ldr	r0, [pc, #84]	@ (8006194 <HAL_UART_ErrorCallback+0x11c>)
 800613e:	f011 fce3 	bl	8017b08 <memset>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(huart, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8006142:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006146:	4913      	ldr	r1, [pc, #76]	@ (8006194 <HAL_UART_ErrorCallback+0x11c>)
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f009 f98c 	bl	800f466 <HAL_UART_Receive_DMA>
 800614e:	4603      	mov	r3, r0
 8006150:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8006152:	7bfb      	ldrb	r3, [r7, #15]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d104      	bne.n	8006162 <HAL_UART_ErrorCallback+0xea>
      LOG_INFO("[DMA] Error recovery: DMA restarted successfully");
 8006158:	490f      	ldr	r1, [pc, #60]	@ (8006198 <HAL_UART_ErrorCallback+0x120>)
 800615a:	2001      	movs	r0, #1
 800615c:	f7ff faea 	bl	8005734 <LOGGER_SendFormatted>
    } else {
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
    }
  }
}
 8006160:	e005      	b.n	800616e <HAL_UART_ErrorCallback+0xf6>
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
 8006162:	7bfb      	ldrb	r3, [r7, #15]
 8006164:	461a      	mov	r2, r3
 8006166:	490d      	ldr	r1, [pc, #52]	@ (800619c <HAL_UART_ErrorCallback+0x124>)
 8006168:	2003      	movs	r0, #3
 800616a:	f7ff fae3 	bl	8005734 <LOGGER_SendFormatted>
}
 800616e:	bf00      	nop
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	40011400 	.word	0x40011400
 800617c:	200024c2 	.word	0x200024c2
 8006180:	0801bfcc 	.word	0x0801bfcc
 8006184:	0801bff8 	.word	0x0801bff8
 8006188:	0801c014 	.word	0x0801c014
 800618c:	0801c030 	.word	0x0801c030
 8006190:	0801c04c 	.word	0x0801c04c
 8006194:	200024c8 	.word	0x200024c8
 8006198:	0801c068 	.word	0x0801c068
 800619c:	0801c09c 	.word	0x0801c09c

080061a0 <USER_UART_IDLECallback>:

// UART IDLE 인터럽트 콜백 (메시지 끝 감지)
void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af02      	add	r7, sp, #8
 80061a6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a3e      	ldr	r2, [pc, #248]	@ (80062a8 <USER_UART_IDLECallback+0x108>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d175      	bne.n	800629e <USER_UART_IDLECallback+0xfe>
  {
    // UART 에러 상태 체크
    uint32_t error_flags = 0;
 80061b2:	2300      	movs	r3, #0
 80061b4:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) error_flags |= 0x01;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	69db      	ldr	r3, [r3, #28]
 80061bc:	f003 0308 	and.w	r3, r3, #8
 80061c0:	2b08      	cmp	r3, #8
 80061c2:	d103      	bne.n	80061cc <USER_UART_IDLECallback+0x2c>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f043 0301 	orr.w	r3, r3, #1
 80061ca:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) error_flags |= 0x02;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	69db      	ldr	r3, [r3, #28]
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d103      	bne.n	80061e2 <USER_UART_IDLECallback+0x42>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f043 0302 	orr.w	r3, r3, #2
 80061e0:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) error_flags |= 0x04;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	f003 0304 	and.w	r3, r3, #4
 80061ec:	2b04      	cmp	r3, #4
 80061ee:	d103      	bne.n	80061f8 <USER_UART_IDLECallback+0x58>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f043 0304 	orr.w	r3, r3, #4
 80061f6:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) error_flags |= 0x08;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b01      	cmp	r3, #1
 8006204:	d103      	bne.n	800620e <USER_UART_IDLECallback+0x6e>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f043 0308 	orr.w	r3, r3, #8
 800620c:	60fb      	str	r3, [r7, #12]
    
    // IDLE 감지 - 메시지 끝
    uint16_t remaining = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	817b      	strh	r3, [r7, #10]
    uart_rx_length = sizeof(rx_buffer) - remaining;
 8006218:	897b      	ldrh	r3, [r7, #10]
 800621a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800621e:	b29a      	uxth	r2, r3
 8006220:	4b22      	ldr	r3, [pc, #136]	@ (80062ac <USER_UART_IDLECallback+0x10c>)
 8006222:	801a      	strh	r2, [r3, #0]
    
    if (uart_rx_length > 0) {
 8006224:	4b21      	ldr	r3, [pc, #132]	@ (80062ac <USER_UART_IDLECallback+0x10c>)
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	b29b      	uxth	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d033      	beq.n	8006296 <USER_UART_IDLECallback+0xf6>
      uart_rx_complete_flag = 1;
 800622e:	4b20      	ldr	r3, [pc, #128]	@ (80062b0 <USER_UART_IDLECallback+0x110>)
 8006230:	2201      	movs	r2, #1
 8006232:	701a      	strb	r2, [r3, #0]
      if (error_flags != 0) {
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d009      	beq.n	800624e <USER_UART_IDLECallback+0xae>
        LOG_WARN("[DMA] IDLE detected: %d bytes received (UART errors: 0x%02lX)", uart_rx_length, error_flags);
 800623a:	4b1c      	ldr	r3, [pc, #112]	@ (80062ac <USER_UART_IDLECallback+0x10c>)
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	b29b      	uxth	r3, r3
 8006240:	461a      	mov	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	491b      	ldr	r1, [pc, #108]	@ (80062b4 <USER_UART_IDLECallback+0x114>)
 8006246:	2002      	movs	r0, #2
 8006248:	f7ff fa74 	bl	8005734 <LOGGER_SendFormatted>
 800624c:	e007      	b.n	800625e <USER_UART_IDLECallback+0xbe>
      } else {
        LOG_DEBUG("[DMA] IDLE detected: %d bytes received", uart_rx_length);
 800624e:	4b17      	ldr	r3, [pc, #92]	@ (80062ac <USER_UART_IDLECallback+0x10c>)
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	b29b      	uxth	r3, r3
 8006254:	461a      	mov	r2, r3
 8006256:	4918      	ldr	r1, [pc, #96]	@ (80062b8 <USER_UART_IDLECallback+0x118>)
 8006258:	2000      	movs	r0, #0
 800625a:	f7ff fa6b 	bl	8005734 <LOGGER_SendFormatted>
      }
      
      // 첫 몇 바이트 확인 (디버깅용)
      if (uart_rx_length >= 4) {
 800625e:	4b13      	ldr	r3, [pc, #76]	@ (80062ac <USER_UART_IDLECallback+0x10c>)
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	b29b      	uxth	r3, r3
 8006264:	2b03      	cmp	r3, #3
 8006266:	d912      	bls.n	800628e <USER_UART_IDLECallback+0xee>
        LOG_DEBUG("[DMA] First 4 bytes: %02X %02X %02X %02X", 
 8006268:	4b14      	ldr	r3, [pc, #80]	@ (80062bc <USER_UART_IDLECallback+0x11c>)
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	4619      	mov	r1, r3
 800626e:	4b13      	ldr	r3, [pc, #76]	@ (80062bc <USER_UART_IDLECallback+0x11c>)
 8006270:	785b      	ldrb	r3, [r3, #1]
 8006272:	4618      	mov	r0, r3
 8006274:	4b11      	ldr	r3, [pc, #68]	@ (80062bc <USER_UART_IDLECallback+0x11c>)
 8006276:	789b      	ldrb	r3, [r3, #2]
 8006278:	461a      	mov	r2, r3
 800627a:	4b10      	ldr	r3, [pc, #64]	@ (80062bc <USER_UART_IDLECallback+0x11c>)
 800627c:	78db      	ldrb	r3, [r3, #3]
 800627e:	9301      	str	r3, [sp, #4]
 8006280:	9200      	str	r2, [sp, #0]
 8006282:	4603      	mov	r3, r0
 8006284:	460a      	mov	r2, r1
 8006286:	490e      	ldr	r1, [pc, #56]	@ (80062c0 <USER_UART_IDLECallback+0x120>)
 8006288:	2000      	movs	r0, #0
 800628a:	f7ff fa53 	bl	8005734 <LOGGER_SendFormatted>
                  rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3]);
      }
      
      // DMA 중지 (일반 모드에서는 자동으로 완료됨)
      HAL_UART_DMAStop(huart);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f009 f92d 	bl	800f4ee <HAL_UART_DMAStop>
      // 다음 수신을 위해 즉시 재시작하지 않음 - uart_stm32.c에서 처리
    } else {
      LOG_DEBUG("[DMA] IDLE detected but no data");
    }
  }
}
 8006294:	e003      	b.n	800629e <USER_UART_IDLECallback+0xfe>
      LOG_DEBUG("[DMA] IDLE detected but no data");
 8006296:	490b      	ldr	r1, [pc, #44]	@ (80062c4 <USER_UART_IDLECallback+0x124>)
 8006298:	2000      	movs	r0, #0
 800629a:	f7ff fa4b 	bl	8005734 <LOGGER_SendFormatted>
}
 800629e:	bf00      	nop
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	40011400 	.word	0x40011400
 80062ac:	200024c4 	.word	0x200024c4
 80062b0:	200024c1 	.word	0x200024c1
 80062b4:	0801c0d4 	.word	0x0801c0d4
 80062b8:	0801c114 	.word	0x0801c114
 80062bc:	200024c8 	.word	0x200024c8
 80062c0:	0801c13c 	.word	0x0801c13c
 80062c4:	0801c168 	.word	0x0801c168

080062c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80062c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006300 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80062cc:	f7ff f986 	bl	80055dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80062d0:	480c      	ldr	r0, [pc, #48]	@ (8006304 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80062d2:	490d      	ldr	r1, [pc, #52]	@ (8006308 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80062d4:	4a0d      	ldr	r2, [pc, #52]	@ (800630c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80062d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80062d8:	e002      	b.n	80062e0 <LoopCopyDataInit>

080062da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80062da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80062dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80062de:	3304      	adds	r3, #4

080062e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80062e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80062e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80062e4:	d3f9      	bcc.n	80062da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80062e6:	4a0a      	ldr	r2, [pc, #40]	@ (8006310 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80062e8:	4c0a      	ldr	r4, [pc, #40]	@ (8006314 <LoopFillZerobss+0x22>)
  movs r3, #0
 80062ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80062ec:	e001      	b.n	80062f2 <LoopFillZerobss>

080062ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80062ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80062f0:	3204      	adds	r2, #4

080062f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80062f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80062f4:	d3fb      	bcc.n	80062ee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80062f6:	f011 fca1 	bl	8017c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80062fa:	f7fb feeb 	bl	80020d4 <main>
  bx  lr    
 80062fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006300:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8006304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006308:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 800630c:	0801c2fc 	.word	0x0801c2fc
  ldr r2, =_sbss
 8006310:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8006314:	200131b0 	.word	0x200131b0

08006318 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006318:	e7fe      	b.n	8006318 <ADC_IRQHandler>

0800631a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800631e:	2003      	movs	r0, #3
 8006320:	f000 fb91 	bl	8006a46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006324:	2000      	movs	r0, #0
 8006326:	f7fe ffd5 	bl	80052d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800632a:	f7fd ff37 	bl	800419c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	bd80      	pop	{r7, pc}

08006334 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006334:	b480      	push	{r7}
 8006336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006338:	4b06      	ldr	r3, [pc, #24]	@ (8006354 <HAL_IncTick+0x20>)
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	461a      	mov	r2, r3
 800633e:	4b06      	ldr	r3, [pc, #24]	@ (8006358 <HAL_IncTick+0x24>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4413      	add	r3, r2
 8006344:	4a04      	ldr	r2, [pc, #16]	@ (8006358 <HAL_IncTick+0x24>)
 8006346:	6013      	str	r3, [r2, #0]
}
 8006348:	bf00      	nop
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	20000070 	.word	0x20000070
 8006358:	200026cc 	.word	0x200026cc

0800635c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800635c:	b480      	push	{r7}
 800635e:	af00      	add	r7, sp, #0
  return uwTick;
 8006360:	4b03      	ldr	r3, [pc, #12]	@ (8006370 <HAL_GetTick+0x14>)
 8006362:	681b      	ldr	r3, [r3, #0]
}
 8006364:	4618      	mov	r0, r3
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	200026cc 	.word	0x200026cc

08006374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800637c:	f7ff ffee 	bl	800635c <HAL_GetTick>
 8006380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638c:	d005      	beq.n	800639a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800638e:	4b0a      	ldr	r3, [pc, #40]	@ (80063b8 <HAL_Delay+0x44>)
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	461a      	mov	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	4413      	add	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800639a:	bf00      	nop
 800639c:	f7ff ffde 	bl	800635c <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d8f7      	bhi.n	800639c <HAL_Delay+0x28>
  {
  }
}
 80063ac:	bf00      	nop
 80063ae:	bf00      	nop
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	20000070 	.word	0x20000070

080063bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e031      	b.n	8006436 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d109      	bne.n	80063ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f7fd ff06 	bl	80041ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f2:	f003 0310 	and.w	r3, r3, #16
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d116      	bne.n	8006428 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063fe:	4b10      	ldr	r3, [pc, #64]	@ (8006440 <HAL_ADC_Init+0x84>)
 8006400:	4013      	ands	r3, r2
 8006402:	f043 0202 	orr.w	r2, r3, #2
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f974 	bl	80066f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800641a:	f023 0303 	bic.w	r3, r3, #3
 800641e:	f043 0201 	orr.w	r2, r3, #1
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	641a      	str	r2, [r3, #64]	@ 0x40
 8006426:	e001      	b.n	800642c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006434:	7bfb      	ldrb	r3, [r7, #15]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	ffffeefd 	.word	0xffffeefd

08006444 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800644e:	2300      	movs	r3, #0
 8006450:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006458:	2b01      	cmp	r3, #1
 800645a:	d101      	bne.n	8006460 <HAL_ADC_ConfigChannel+0x1c>
 800645c:	2302      	movs	r3, #2
 800645e:	e13a      	b.n	80066d6 <HAL_ADC_ConfigChannel+0x292>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b09      	cmp	r3, #9
 800646e:	d93a      	bls.n	80064e6 <HAL_ADC_ConfigChannel+0xa2>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006478:	d035      	beq.n	80064e6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68d9      	ldr	r1, [r3, #12]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	b29b      	uxth	r3, r3
 8006486:	461a      	mov	r2, r3
 8006488:	4613      	mov	r3, r2
 800648a:	005b      	lsls	r3, r3, #1
 800648c:	4413      	add	r3, r2
 800648e:	3b1e      	subs	r3, #30
 8006490:	2207      	movs	r2, #7
 8006492:	fa02 f303 	lsl.w	r3, r2, r3
 8006496:	43da      	mvns	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	400a      	ands	r2, r1
 800649e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a8f      	ldr	r2, [pc, #572]	@ (80066e4 <HAL_ADC_ConfigChannel+0x2a0>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d10a      	bne.n	80064c0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68d9      	ldr	r1, [r3, #12]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	061a      	lsls	r2, r3, #24
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80064be:	e039      	b.n	8006534 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68d9      	ldr	r1, [r3, #12]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	689a      	ldr	r2, [r3, #8]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	4618      	mov	r0, r3
 80064d2:	4603      	mov	r3, r0
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	4403      	add	r3, r0
 80064d8:	3b1e      	subs	r3, #30
 80064da:	409a      	lsls	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80064e4:	e026      	b.n	8006534 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6919      	ldr	r1, [r3, #16]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	461a      	mov	r2, r3
 80064f4:	4613      	mov	r3, r2
 80064f6:	005b      	lsls	r3, r3, #1
 80064f8:	4413      	add	r3, r2
 80064fa:	f003 031f 	and.w	r3, r3, #31
 80064fe:	2207      	movs	r2, #7
 8006500:	fa02 f303 	lsl.w	r3, r2, r3
 8006504:	43da      	mvns	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	400a      	ands	r2, r1
 800650c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6919      	ldr	r1, [r3, #16]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	689a      	ldr	r2, [r3, #8]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	b29b      	uxth	r3, r3
 800651e:	4618      	mov	r0, r3
 8006520:	4603      	mov	r3, r0
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	4403      	add	r3, r0
 8006526:	f003 031f 	and.w	r3, r3, #31
 800652a:	409a      	lsls	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	430a      	orrs	r2, r1
 8006532:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	2b06      	cmp	r3, #6
 800653a:	d824      	bhi.n	8006586 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	4613      	mov	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	3b05      	subs	r3, #5
 800654e:	221f      	movs	r2, #31
 8006550:	fa02 f303 	lsl.w	r3, r2, r3
 8006554:	43da      	mvns	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	400a      	ands	r2, r1
 800655c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	b29b      	uxth	r3, r3
 800656a:	4618      	mov	r0, r3
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	685a      	ldr	r2, [r3, #4]
 8006570:	4613      	mov	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	3b05      	subs	r3, #5
 8006578:	fa00 f203 	lsl.w	r2, r0, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	430a      	orrs	r2, r1
 8006582:	635a      	str	r2, [r3, #52]	@ 0x34
 8006584:	e04c      	b.n	8006620 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	2b0c      	cmp	r3, #12
 800658c:	d824      	bhi.n	80065d8 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	685a      	ldr	r2, [r3, #4]
 8006598:	4613      	mov	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	3b23      	subs	r3, #35	@ 0x23
 80065a0:	221f      	movs	r2, #31
 80065a2:	fa02 f303 	lsl.w	r3, r2, r3
 80065a6:	43da      	mvns	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	400a      	ands	r2, r1
 80065ae:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	4618      	mov	r0, r3
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	4613      	mov	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	4413      	add	r3, r2
 80065c8:	3b23      	subs	r3, #35	@ 0x23
 80065ca:	fa00 f203 	lsl.w	r2, r0, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80065d6:	e023      	b.n	8006620 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	4613      	mov	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	3b41      	subs	r3, #65	@ 0x41
 80065ea:	221f      	movs	r2, #31
 80065ec:	fa02 f303 	lsl.w	r3, r2, r3
 80065f0:	43da      	mvns	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	400a      	ands	r2, r1
 80065f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	b29b      	uxth	r3, r3
 8006606:	4618      	mov	r0, r3
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685a      	ldr	r2, [r3, #4]
 800660c:	4613      	mov	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	3b41      	subs	r3, #65	@ 0x41
 8006614:	fa00 f203 	lsl.w	r2, r0, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a30      	ldr	r2, [pc, #192]	@ (80066e8 <HAL_ADC_ConfigChannel+0x2a4>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d10a      	bne.n	8006640 <HAL_ADC_ConfigChannel+0x1fc>
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006632:	d105      	bne.n	8006640 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006634:	4b2d      	ldr	r3, [pc, #180]	@ (80066ec <HAL_ADC_ConfigChannel+0x2a8>)
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	4a2c      	ldr	r2, [pc, #176]	@ (80066ec <HAL_ADC_ConfigChannel+0x2a8>)
 800663a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800663e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a28      	ldr	r2, [pc, #160]	@ (80066e8 <HAL_ADC_ConfigChannel+0x2a4>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d10f      	bne.n	800666a <HAL_ADC_ConfigChannel+0x226>
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b12      	cmp	r3, #18
 8006650:	d10b      	bne.n	800666a <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8006652:	4b26      	ldr	r3, [pc, #152]	@ (80066ec <HAL_ADC_ConfigChannel+0x2a8>)
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	4a25      	ldr	r2, [pc, #148]	@ (80066ec <HAL_ADC_ConfigChannel+0x2a8>)
 8006658:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800665c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800665e:	4b23      	ldr	r3, [pc, #140]	@ (80066ec <HAL_ADC_ConfigChannel+0x2a8>)
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	4a22      	ldr	r2, [pc, #136]	@ (80066ec <HAL_ADC_ConfigChannel+0x2a8>)
 8006664:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006668:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a1e      	ldr	r2, [pc, #120]	@ (80066e8 <HAL_ADC_ConfigChannel+0x2a4>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d12b      	bne.n	80066cc <HAL_ADC_ConfigChannel+0x288>
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a1a      	ldr	r2, [pc, #104]	@ (80066e4 <HAL_ADC_ConfigChannel+0x2a0>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d003      	beq.n	8006686 <HAL_ADC_ConfigChannel+0x242>
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2b11      	cmp	r3, #17
 8006684:	d122      	bne.n	80066cc <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8006686:	4b19      	ldr	r3, [pc, #100]	@ (80066ec <HAL_ADC_ConfigChannel+0x2a8>)
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	4a18      	ldr	r2, [pc, #96]	@ (80066ec <HAL_ADC_ConfigChannel+0x2a8>)
 800668c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8006690:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006692:	4b16      	ldr	r3, [pc, #88]	@ (80066ec <HAL_ADC_ConfigChannel+0x2a8>)
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	4a15      	ldr	r2, [pc, #84]	@ (80066ec <HAL_ADC_ConfigChannel+0x2a8>)
 8006698:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800669c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a10      	ldr	r2, [pc, #64]	@ (80066e4 <HAL_ADC_ConfigChannel+0x2a0>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d111      	bne.n	80066cc <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80066a8:	4b11      	ldr	r3, [pc, #68]	@ (80066f0 <HAL_ADC_ConfigChannel+0x2ac>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a11      	ldr	r2, [pc, #68]	@ (80066f4 <HAL_ADC_ConfigChannel+0x2b0>)
 80066ae:	fba2 2303 	umull	r2, r3, r2, r3
 80066b2:	0c9a      	lsrs	r2, r3, #18
 80066b4:	4613      	mov	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	005b      	lsls	r3, r3, #1
 80066bc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80066be:	e002      	b.n	80066c6 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1f9      	bne.n	80066c0 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	10000012 	.word	0x10000012
 80066e8:	40012000 	.word	0x40012000
 80066ec:	40012300 	.word	0x40012300
 80066f0:	2000001c 	.word	0x2000001c
 80066f4:	431bde83 	.word	0x431bde83

080066f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006700:	4b78      	ldr	r3, [pc, #480]	@ (80068e4 <ADC_Init+0x1ec>)
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	4a77      	ldr	r2, [pc, #476]	@ (80068e4 <ADC_Init+0x1ec>)
 8006706:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800670a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800670c:	4b75      	ldr	r3, [pc, #468]	@ (80068e4 <ADC_Init+0x1ec>)
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	4973      	ldr	r1, [pc, #460]	@ (80068e4 <ADC_Init+0x1ec>)
 8006716:	4313      	orrs	r3, r2
 8006718:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006728:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6859      	ldr	r1, [r3, #4]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	021a      	lsls	r2, r3, #8
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	430a      	orrs	r2, r1
 800673c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	685a      	ldr	r2, [r3, #4]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800674c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6859      	ldr	r1, [r3, #4]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689a      	ldr	r2, [r3, #8]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689a      	ldr	r2, [r3, #8]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800676e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6899      	ldr	r1, [r3, #8]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68da      	ldr	r2, [r3, #12]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006786:	4a58      	ldr	r2, [pc, #352]	@ (80068e8 <ADC_Init+0x1f0>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d022      	beq.n	80067d2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689a      	ldr	r2, [r3, #8]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800679a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6899      	ldr	r1, [r3, #8]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	689a      	ldr	r2, [r3, #8]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80067bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6899      	ldr	r1, [r3, #8]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	430a      	orrs	r2, r1
 80067ce:	609a      	str	r2, [r3, #8]
 80067d0:	e00f      	b.n	80067f2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80067e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	689a      	ldr	r2, [r3, #8]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80067f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	689a      	ldr	r2, [r3, #8]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f022 0202 	bic.w	r2, r2, #2
 8006800:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6899      	ldr	r1, [r3, #8]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	005a      	lsls	r2, r3, #1
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	430a      	orrs	r2, r1
 8006814:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 3020 	ldrb.w	r3, [r3, #32]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d01b      	beq.n	8006858 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800682e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800683e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6859      	ldr	r1, [r3, #4]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684a:	3b01      	subs	r3, #1
 800684c:	035a      	lsls	r2, r3, #13
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	430a      	orrs	r2, r1
 8006854:	605a      	str	r2, [r3, #4]
 8006856:	e007      	b.n	8006868 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006866:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006876:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	3b01      	subs	r3, #1
 8006884:	051a      	lsls	r2, r3, #20
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	430a      	orrs	r2, r1
 800688c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689a      	ldr	r2, [r3, #8]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800689c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6899      	ldr	r1, [r3, #8]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80068aa:	025a      	lsls	r2, r3, #9
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689a      	ldr	r2, [r3, #8]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6899      	ldr	r1, [r3, #8]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	029a      	lsls	r2, r3, #10
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	430a      	orrs	r2, r1
 80068d6:	609a      	str	r2, [r3, #8]
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr
 80068e4:	40012300 	.word	0x40012300
 80068e8:	0f000001 	.word	0x0f000001

080068ec <__NVIC_SetPriorityGrouping>:
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f003 0307 	and.w	r3, r3, #7
 80068fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80068fc:	4b0b      	ldr	r3, [pc, #44]	@ (800692c <__NVIC_SetPriorityGrouping+0x40>)
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006908:	4013      	ands	r3, r2
 800690a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006914:	4b06      	ldr	r3, [pc, #24]	@ (8006930 <__NVIC_SetPriorityGrouping+0x44>)
 8006916:	4313      	orrs	r3, r2
 8006918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800691a:	4a04      	ldr	r2, [pc, #16]	@ (800692c <__NVIC_SetPriorityGrouping+0x40>)
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	60d3      	str	r3, [r2, #12]
}
 8006920:	bf00      	nop
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	e000ed00 	.word	0xe000ed00
 8006930:	05fa0000 	.word	0x05fa0000

08006934 <__NVIC_GetPriorityGrouping>:
{
 8006934:	b480      	push	{r7}
 8006936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006938:	4b04      	ldr	r3, [pc, #16]	@ (800694c <__NVIC_GetPriorityGrouping+0x18>)
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	0a1b      	lsrs	r3, r3, #8
 800693e:	f003 0307 	and.w	r3, r3, #7
}
 8006942:	4618      	mov	r0, r3
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	e000ed00 	.word	0xe000ed00

08006950 <__NVIC_EnableIRQ>:
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	4603      	mov	r3, r0
 8006958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800695a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800695e:	2b00      	cmp	r3, #0
 8006960:	db0b      	blt.n	800697a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006962:	79fb      	ldrb	r3, [r7, #7]
 8006964:	f003 021f 	and.w	r2, r3, #31
 8006968:	4907      	ldr	r1, [pc, #28]	@ (8006988 <__NVIC_EnableIRQ+0x38>)
 800696a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800696e:	095b      	lsrs	r3, r3, #5
 8006970:	2001      	movs	r0, #1
 8006972:	fa00 f202 	lsl.w	r2, r0, r2
 8006976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800697a:	bf00      	nop
 800697c:	370c      	adds	r7, #12
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	e000e100 	.word	0xe000e100

0800698c <__NVIC_SetPriority>:
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	4603      	mov	r3, r0
 8006994:	6039      	str	r1, [r7, #0]
 8006996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800699c:	2b00      	cmp	r3, #0
 800699e:	db0a      	blt.n	80069b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	490c      	ldr	r1, [pc, #48]	@ (80069d8 <__NVIC_SetPriority+0x4c>)
 80069a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069aa:	0112      	lsls	r2, r2, #4
 80069ac:	b2d2      	uxtb	r2, r2
 80069ae:	440b      	add	r3, r1
 80069b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80069b4:	e00a      	b.n	80069cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	4908      	ldr	r1, [pc, #32]	@ (80069dc <__NVIC_SetPriority+0x50>)
 80069bc:	79fb      	ldrb	r3, [r7, #7]
 80069be:	f003 030f 	and.w	r3, r3, #15
 80069c2:	3b04      	subs	r3, #4
 80069c4:	0112      	lsls	r2, r2, #4
 80069c6:	b2d2      	uxtb	r2, r2
 80069c8:	440b      	add	r3, r1
 80069ca:	761a      	strb	r2, [r3, #24]
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr
 80069d8:	e000e100 	.word	0xe000e100
 80069dc:	e000ed00 	.word	0xe000ed00

080069e0 <NVIC_EncodePriority>:
{
 80069e0:	b480      	push	{r7}
 80069e2:	b089      	sub	sp, #36	@ 0x24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f003 0307 	and.w	r3, r3, #7
 80069f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	f1c3 0307 	rsb	r3, r3, #7
 80069fa:	2b04      	cmp	r3, #4
 80069fc:	bf28      	it	cs
 80069fe:	2304      	movcs	r3, #4
 8006a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	3304      	adds	r3, #4
 8006a06:	2b06      	cmp	r3, #6
 8006a08:	d902      	bls.n	8006a10 <NVIC_EncodePriority+0x30>
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	3b03      	subs	r3, #3
 8006a0e:	e000      	b.n	8006a12 <NVIC_EncodePriority+0x32>
 8006a10:	2300      	movs	r3, #0
 8006a12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a14:	f04f 32ff 	mov.w	r2, #4294967295
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1e:	43da      	mvns	r2, r3
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	401a      	ands	r2, r3
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a28:	f04f 31ff 	mov.w	r1, #4294967295
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a32:	43d9      	mvns	r1, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a38:	4313      	orrs	r3, r2
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3724      	adds	r7, #36	@ 0x24
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b082      	sub	sp, #8
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7ff ff4c 	bl	80068ec <__NVIC_SetPriorityGrouping>
}
 8006a54:	bf00      	nop
 8006a56:	3708      	adds	r7, #8
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	4603      	mov	r3, r0
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
 8006a68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006a6e:	f7ff ff61 	bl	8006934 <__NVIC_GetPriorityGrouping>
 8006a72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	68b9      	ldr	r1, [r7, #8]
 8006a78:	6978      	ldr	r0, [r7, #20]
 8006a7a:	f7ff ffb1 	bl	80069e0 <NVIC_EncodePriority>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a84:	4611      	mov	r1, r2
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7ff ff80 	bl	800698c <__NVIC_SetPriority>
}
 8006a8c:	bf00      	nop
 8006a8e:	3718      	adds	r7, #24
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7ff ff54 	bl	8006950 <__NVIC_EnableIRQ>
}
 8006aa8:	bf00      	nop
 8006aaa:	3708      	adds	r7, #8
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e054      	b.n	8006b6c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	7f5b      	ldrb	r3, [r3, #29]
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d105      	bne.n	8006ad8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7fd fbe4 	bl	80042a0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2202      	movs	r2, #2
 8006adc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	791b      	ldrb	r3, [r3, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10c      	bne.n	8006b00 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a22      	ldr	r2, [pc, #136]	@ (8006b74 <HAL_CRC_Init+0xc4>)
 8006aec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689a      	ldr	r2, [r3, #8]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f022 0218 	bic.w	r2, r2, #24
 8006afc:	609a      	str	r2, [r3, #8]
 8006afe:	e00c      	b.n	8006b1a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6899      	ldr	r1, [r3, #8]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	461a      	mov	r2, r3
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f834 	bl	8006b78 <HAL_CRCEx_Polynomial_Set>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e028      	b.n	8006b6c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	795b      	ldrb	r3, [r3, #5]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d105      	bne.n	8006b2e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f04f 32ff 	mov.w	r2, #4294967295
 8006b2a:	611a      	str	r2, [r3, #16]
 8006b2c:	e004      	b.n	8006b38 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	6912      	ldr	r2, [r2, #16]
 8006b36:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	695a      	ldr	r2, [r3, #20]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	699a      	ldr	r2, [r3, #24]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	430a      	orrs	r2, r1
 8006b62:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3708      	adds	r7, #8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	04c11db7 	.word	0x04c11db7

08006b78 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b087      	sub	sp, #28
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b84:	2300      	movs	r3, #0
 8006b86:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006b88:	231f      	movs	r3, #31
 8006b8a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d102      	bne.n	8006b9c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	75fb      	strb	r3, [r7, #23]
 8006b9a:	e063      	b.n	8006c64 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006b9c:	bf00      	nop
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	1e5a      	subs	r2, r3, #1
 8006ba2:	613a      	str	r2, [r7, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d009      	beq.n	8006bbc <HAL_CRCEx_Polynomial_Set+0x44>
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	f003 031f 	and.w	r3, r3, #31
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d0f0      	beq.n	8006b9e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b18      	cmp	r3, #24
 8006bc0:	d846      	bhi.n	8006c50 <HAL_CRCEx_Polynomial_Set+0xd8>
 8006bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8006bc8 <HAL_CRCEx_Polynomial_Set+0x50>)
 8006bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc8:	08006c57 	.word	0x08006c57
 8006bcc:	08006c51 	.word	0x08006c51
 8006bd0:	08006c51 	.word	0x08006c51
 8006bd4:	08006c51 	.word	0x08006c51
 8006bd8:	08006c51 	.word	0x08006c51
 8006bdc:	08006c51 	.word	0x08006c51
 8006be0:	08006c51 	.word	0x08006c51
 8006be4:	08006c51 	.word	0x08006c51
 8006be8:	08006c45 	.word	0x08006c45
 8006bec:	08006c51 	.word	0x08006c51
 8006bf0:	08006c51 	.word	0x08006c51
 8006bf4:	08006c51 	.word	0x08006c51
 8006bf8:	08006c51 	.word	0x08006c51
 8006bfc:	08006c51 	.word	0x08006c51
 8006c00:	08006c51 	.word	0x08006c51
 8006c04:	08006c51 	.word	0x08006c51
 8006c08:	08006c39 	.word	0x08006c39
 8006c0c:	08006c51 	.word	0x08006c51
 8006c10:	08006c51 	.word	0x08006c51
 8006c14:	08006c51 	.word	0x08006c51
 8006c18:	08006c51 	.word	0x08006c51
 8006c1c:	08006c51 	.word	0x08006c51
 8006c20:	08006c51 	.word	0x08006c51
 8006c24:	08006c51 	.word	0x08006c51
 8006c28:	08006c2d 	.word	0x08006c2d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	2b06      	cmp	r3, #6
 8006c30:	d913      	bls.n	8006c5a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006c36:	e010      	b.n	8006c5a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	2b07      	cmp	r3, #7
 8006c3c:	d90f      	bls.n	8006c5e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006c42:	e00c      	b.n	8006c5e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	2b0f      	cmp	r3, #15
 8006c48:	d90b      	bls.n	8006c62 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006c4e:	e008      	b.n	8006c62 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	75fb      	strb	r3, [r7, #23]
        break;
 8006c54:	e006      	b.n	8006c64 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006c56:	bf00      	nop
 8006c58:	e004      	b.n	8006c64 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006c5a:	bf00      	nop
 8006c5c:	e002      	b.n	8006c64 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006c5e:	bf00      	nop
 8006c60:	e000      	b.n	8006c64 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006c62:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8006c64:	7dfb      	ldrb	r3, [r7, #23]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10d      	bne.n	8006c86 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f023 0118 	bic.w	r1, r3, #24
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	371c      	adds	r7, #28
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e069      	b.n	8006d7a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d102      	bne.n	8006cb8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f7fd fb14 	bl	80042e0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2202      	movs	r2, #2
 8006cbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	699b      	ldr	r3, [r3, #24]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6819      	ldr	r1, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	4b2a      	ldr	r3, [pc, #168]	@ (8006d84 <HAL_DCMI_Init+0xf0>)
 8006cda:	400b      	ands	r3, r1
 8006cdc:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6819      	ldr	r1, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685a      	ldr	r2, [r3, #4]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006cf2:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006cfe:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006d0a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d10:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006d16:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d1c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006d22:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	2b10      	cmp	r3, #16
 8006d32:	d112      	bne.n	8006d5a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	7f1b      	ldrb	r3, [r3, #28]
 8006d38:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	7f5b      	ldrb	r3, [r3, #29]
 8006d3e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006d40:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	7f9b      	ldrb	r3, [r3, #30]
 8006d46:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006d48:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	7fdb      	ldrb	r3, [r3, #31]
 8006d50:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006d56:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006d58:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68da      	ldr	r2, [r3, #12]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f042 021e 	orr.w	r2, r2, #30
 8006d68:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	ffe0f007 	.word	0xffe0f007

08006d88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006d90:	2300      	movs	r3, #0
 8006d92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006d94:	f7ff fae2 	bl	800635c <HAL_GetTick>
 8006d98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d101      	bne.n	8006da4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e099      	b.n	8006ed8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f022 0201 	bic.w	r2, r2, #1
 8006dc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006dc4:	e00f      	b.n	8006de6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006dc6:	f7ff fac9 	bl	800635c <HAL_GetTick>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	2b05      	cmp	r3, #5
 8006dd2:	d908      	bls.n	8006de6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2203      	movs	r2, #3
 8006dde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e078      	b.n	8006ed8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0301 	and.w	r3, r3, #1
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1e8      	bne.n	8006dc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	4b38      	ldr	r3, [pc, #224]	@ (8006ee0 <HAL_DMA_Init+0x158>)
 8006e00:	4013      	ands	r3, r2
 8006e02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a1b      	ldr	r3, [r3, #32]
 8006e30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e3c:	2b04      	cmp	r3, #4
 8006e3e:	d107      	bne.n	8006e50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f023 0307 	bic.w	r3, r3, #7
 8006e66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e76:	2b04      	cmp	r3, #4
 8006e78:	d117      	bne.n	8006eaa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00e      	beq.n	8006eaa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fb73 	bl	8007578 <DMA_CheckFifoParam>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d008      	beq.n	8006eaa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2240      	movs	r2, #64	@ 0x40
 8006e9c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e016      	b.n	8006ed8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fb2a 	bl	800750c <DMA_CalcBaseAndBitshift>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ec0:	223f      	movs	r2, #63	@ 0x3f
 8006ec2:	409a      	lsls	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3718      	adds	r7, #24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	f010803f 	.word	0xf010803f

08006ee4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e050      	b.n	8006f98 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d101      	bne.n	8006f06 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006f02:	2302      	movs	r3, #2
 8006f04:	e048      	b.n	8006f98 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f022 0201 	bic.w	r2, r2, #1
 8006f14:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2200      	movs	r2, #0
 8006f24:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2200      	movs	r2, #0
 8006f34:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2221      	movs	r2, #33	@ 0x21
 8006f44:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fae0 	bl	800750c <DMA_CalcBaseAndBitshift>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f54:	223f      	movs	r2, #63	@ 0x3f
 8006f56:	409a      	lsls	r2, r3
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
 8006fac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fb6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d101      	bne.n	8006fc6 <HAL_DMA_Start_IT+0x26>
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	e048      	b.n	8007058 <HAL_DMA_Start_IT+0xb8>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d137      	bne.n	800704a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2202      	movs	r2, #2
 8006fde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	68b9      	ldr	r1, [r7, #8]
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f000 fa5e 	bl	80074b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ff8:	223f      	movs	r2, #63	@ 0x3f
 8006ffa:	409a      	lsls	r2, r3
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f042 0216 	orr.w	r2, r2, #22
 800700e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	695a      	ldr	r2, [r3, #20]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800701e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007024:	2b00      	cmp	r3, #0
 8007026:	d007      	beq.n	8007038 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f042 0208 	orr.w	r2, r2, #8
 8007036:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f042 0201 	orr.w	r2, r2, #1
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	e005      	b.n	8007056 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007052:	2302      	movs	r3, #2
 8007054:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007056:	7dfb      	ldrb	r3, [r7, #23]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3718      	adds	r7, #24
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800706c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800706e:	f7ff f975 	bl	800635c <HAL_GetTick>
 8007072:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b02      	cmp	r3, #2
 800707e:	d008      	beq.n	8007092 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2280      	movs	r2, #128	@ 0x80
 8007084:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e052      	b.n	8007138 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f022 0216 	bic.w	r2, r2, #22
 80070a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	695a      	ldr	r2, [r3, #20]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80070b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d103      	bne.n	80070c2 <HAL_DMA_Abort+0x62>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d007      	beq.n	80070d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f022 0208 	bic.w	r2, r2, #8
 80070d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f022 0201 	bic.w	r2, r2, #1
 80070e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80070e2:	e013      	b.n	800710c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80070e4:	f7ff f93a 	bl	800635c <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	2b05      	cmp	r3, #5
 80070f0:	d90c      	bls.n	800710c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2220      	movs	r2, #32
 80070f6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2203      	movs	r2, #3
 80070fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	e015      	b.n	8007138 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1e4      	bne.n	80070e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800711e:	223f      	movs	r2, #63	@ 0x3f
 8007120:	409a      	lsls	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b02      	cmp	r3, #2
 8007152:	d004      	beq.n	800715e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2280      	movs	r2, #128	@ 0x80
 8007158:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e00c      	b.n	8007178 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2205      	movs	r2, #5
 8007162:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f022 0201 	bic.w	r2, r2, #1
 8007174:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b086      	sub	sp, #24
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800718c:	2300      	movs	r3, #0
 800718e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8007190:	4b8e      	ldr	r3, [pc, #568]	@ (80073cc <HAL_DMA_IRQHandler+0x248>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a8e      	ldr	r2, [pc, #568]	@ (80073d0 <HAL_DMA_IRQHandler+0x24c>)
 8007196:	fba2 2303 	umull	r2, r3, r2, r3
 800719a:	0a9b      	lsrs	r3, r3, #10
 800719c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071ae:	2208      	movs	r2, #8
 80071b0:	409a      	lsls	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	4013      	ands	r3, r2
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d01a      	beq.n	80071f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d013      	beq.n	80071f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f022 0204 	bic.w	r2, r2, #4
 80071d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071dc:	2208      	movs	r2, #8
 80071de:	409a      	lsls	r2, r3
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071e8:	f043 0201 	orr.w	r2, r3, #1
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071f4:	2201      	movs	r2, #1
 80071f6:	409a      	lsls	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	4013      	ands	r3, r2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d012      	beq.n	8007226 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00b      	beq.n	8007226 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007212:	2201      	movs	r2, #1
 8007214:	409a      	lsls	r2, r3
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800721e:	f043 0202 	orr.w	r2, r3, #2
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800722a:	2204      	movs	r2, #4
 800722c:	409a      	lsls	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	4013      	ands	r3, r2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d012      	beq.n	800725c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0302 	and.w	r3, r3, #2
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00b      	beq.n	800725c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007248:	2204      	movs	r2, #4
 800724a:	409a      	lsls	r2, r3
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007254:	f043 0204 	orr.w	r2, r3, #4
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007260:	2210      	movs	r2, #16
 8007262:	409a      	lsls	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	4013      	ands	r3, r2
 8007268:	2b00      	cmp	r3, #0
 800726a:	d043      	beq.n	80072f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0308 	and.w	r3, r3, #8
 8007276:	2b00      	cmp	r3, #0
 8007278:	d03c      	beq.n	80072f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800727e:	2210      	movs	r2, #16
 8007280:	409a      	lsls	r2, r3
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d018      	beq.n	80072c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d108      	bne.n	80072b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d024      	beq.n	80072f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	4798      	blx	r3
 80072b2:	e01f      	b.n	80072f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d01b      	beq.n	80072f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	4798      	blx	r3
 80072c4:	e016      	b.n	80072f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d107      	bne.n	80072e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f022 0208 	bic.w	r2, r2, #8
 80072e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d003      	beq.n	80072f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072f8:	2220      	movs	r2, #32
 80072fa:	409a      	lsls	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4013      	ands	r3, r2
 8007300:	2b00      	cmp	r3, #0
 8007302:	f000 808f 	beq.w	8007424 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0310 	and.w	r3, r3, #16
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 8087 	beq.w	8007424 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800731a:	2220      	movs	r2, #32
 800731c:	409a      	lsls	r2, r3
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b05      	cmp	r3, #5
 800732c:	d136      	bne.n	800739c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f022 0216 	bic.w	r2, r2, #22
 800733c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	695a      	ldr	r2, [r3, #20]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800734c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007352:	2b00      	cmp	r3, #0
 8007354:	d103      	bne.n	800735e <HAL_DMA_IRQHandler+0x1da>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800735a:	2b00      	cmp	r3, #0
 800735c:	d007      	beq.n	800736e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f022 0208 	bic.w	r2, r2, #8
 800736c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007372:	223f      	movs	r2, #63	@ 0x3f
 8007374:	409a      	lsls	r2, r3
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800738e:	2b00      	cmp	r3, #0
 8007390:	d07e      	beq.n	8007490 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	4798      	blx	r3
        }
        return;
 800739a:	e079      	b.n	8007490 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d01d      	beq.n	80073e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10d      	bne.n	80073d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d031      	beq.n	8007424 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	4798      	blx	r3
 80073c8:	e02c      	b.n	8007424 <HAL_DMA_IRQHandler+0x2a0>
 80073ca:	bf00      	nop
 80073cc:	2000001c 	.word	0x2000001c
 80073d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d023      	beq.n	8007424 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	4798      	blx	r3
 80073e4:	e01e      	b.n	8007424 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10f      	bne.n	8007414 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 0210 	bic.w	r2, r2, #16
 8007402:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007418:	2b00      	cmp	r3, #0
 800741a:	d003      	beq.n	8007424 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007428:	2b00      	cmp	r3, #0
 800742a:	d032      	beq.n	8007492 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	2b00      	cmp	r3, #0
 8007436:	d022      	beq.n	800747e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2205      	movs	r2, #5
 800743c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f022 0201 	bic.w	r2, r2, #1
 800744e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	3301      	adds	r3, #1
 8007454:	60bb      	str	r3, [r7, #8]
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	429a      	cmp	r2, r3
 800745a:	d307      	bcc.n	800746c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0301 	and.w	r3, r3, #1
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1f2      	bne.n	8007450 <HAL_DMA_IRQHandler+0x2cc>
 800746a:	e000      	b.n	800746e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800746c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007482:	2b00      	cmp	r3, #0
 8007484:	d005      	beq.n	8007492 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	4798      	blx	r3
 800748e:	e000      	b.n	8007492 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007490:	bf00      	nop
    }
  }
}
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
 80074bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80074cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	2b40      	cmp	r3, #64	@ 0x40
 80074dc:	d108      	bne.n	80074f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80074ee:	e007      	b.n	8007500 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	60da      	str	r2, [r3, #12]
}
 8007500:	bf00      	nop
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	b2db      	uxtb	r3, r3
 800751a:	3b10      	subs	r3, #16
 800751c:	4a13      	ldr	r2, [pc, #76]	@ (800756c <DMA_CalcBaseAndBitshift+0x60>)
 800751e:	fba2 2303 	umull	r2, r3, r2, r3
 8007522:	091b      	lsrs	r3, r3, #4
 8007524:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007526:	4a12      	ldr	r2, [pc, #72]	@ (8007570 <DMA_CalcBaseAndBitshift+0x64>)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	4413      	add	r3, r2
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	461a      	mov	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2b03      	cmp	r3, #3
 8007538:	d908      	bls.n	800754c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	461a      	mov	r2, r3
 8007540:	4b0c      	ldr	r3, [pc, #48]	@ (8007574 <DMA_CalcBaseAndBitshift+0x68>)
 8007542:	4013      	ands	r3, r2
 8007544:	1d1a      	adds	r2, r3, #4
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	659a      	str	r2, [r3, #88]	@ 0x58
 800754a:	e006      	b.n	800755a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	461a      	mov	r2, r3
 8007552:	4b08      	ldr	r3, [pc, #32]	@ (8007574 <DMA_CalcBaseAndBitshift+0x68>)
 8007554:	4013      	ands	r3, r2
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800755e:	4618      	mov	r0, r3
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	aaaaaaab 	.word	0xaaaaaaab
 8007570:	0801c1fc 	.word	0x0801c1fc
 8007574:	fffffc00 	.word	0xfffffc00

08007578 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007580:	2300      	movs	r3, #0
 8007582:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007588:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d11f      	bne.n	80075d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	2b03      	cmp	r3, #3
 8007596:	d856      	bhi.n	8007646 <DMA_CheckFifoParam+0xce>
 8007598:	a201      	add	r2, pc, #4	@ (adr r2, 80075a0 <DMA_CheckFifoParam+0x28>)
 800759a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800759e:	bf00      	nop
 80075a0:	080075b1 	.word	0x080075b1
 80075a4:	080075c3 	.word	0x080075c3
 80075a8:	080075b1 	.word	0x080075b1
 80075ac:	08007647 	.word	0x08007647
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d046      	beq.n	800764a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075c0:	e043      	b.n	800764a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80075ca:	d140      	bne.n	800764e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075d0:	e03d      	b.n	800764e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075da:	d121      	bne.n	8007620 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	2b03      	cmp	r3, #3
 80075e0:	d837      	bhi.n	8007652 <DMA_CheckFifoParam+0xda>
 80075e2:	a201      	add	r2, pc, #4	@ (adr r2, 80075e8 <DMA_CheckFifoParam+0x70>)
 80075e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e8:	080075f9 	.word	0x080075f9
 80075ec:	080075ff 	.word	0x080075ff
 80075f0:	080075f9 	.word	0x080075f9
 80075f4:	08007611 	.word	0x08007611
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	73fb      	strb	r3, [r7, #15]
      break;
 80075fc:	e030      	b.n	8007660 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007602:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d025      	beq.n	8007656 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800760e:	e022      	b.n	8007656 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007614:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007618:	d11f      	bne.n	800765a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800761e:	e01c      	b.n	800765a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	2b02      	cmp	r3, #2
 8007624:	d903      	bls.n	800762e <DMA_CheckFifoParam+0xb6>
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	2b03      	cmp	r3, #3
 800762a:	d003      	beq.n	8007634 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800762c:	e018      	b.n	8007660 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	73fb      	strb	r3, [r7, #15]
      break;
 8007632:	e015      	b.n	8007660 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007638:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00e      	beq.n	800765e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	73fb      	strb	r3, [r7, #15]
      break;
 8007644:	e00b      	b.n	800765e <DMA_CheckFifoParam+0xe6>
      break;
 8007646:	bf00      	nop
 8007648:	e00a      	b.n	8007660 <DMA_CheckFifoParam+0xe8>
      break;
 800764a:	bf00      	nop
 800764c:	e008      	b.n	8007660 <DMA_CheckFifoParam+0xe8>
      break;
 800764e:	bf00      	nop
 8007650:	e006      	b.n	8007660 <DMA_CheckFifoParam+0xe8>
      break;
 8007652:	bf00      	nop
 8007654:	e004      	b.n	8007660 <DMA_CheckFifoParam+0xe8>
      break;
 8007656:	bf00      	nop
 8007658:	e002      	b.n	8007660 <DMA_CheckFifoParam+0xe8>
      break;   
 800765a:	bf00      	nop
 800765c:	e000      	b.n	8007660 <DMA_CheckFifoParam+0xe8>
      break;
 800765e:	bf00      	nop
    }
  } 
  
  return status; 
 8007660:	7bfb      	ldrb	r3, [r7, #15]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop

08007670 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e039      	b.n	80076f6 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d106      	bne.n	800769c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f7fc fee0 	bl	800445c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2202      	movs	r2, #2
 80076a0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076c0:	f023 0107 	bic.w	r1, r3, #7
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	430a      	orrs	r2, r1
 80076ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80076d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007700 <HAL_DMA2D_Init+0x90>)
 80076d8:	4013      	ands	r3, r2
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	68d1      	ldr	r1, [r2, #12]
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	6812      	ldr	r2, [r2, #0]
 80076e2:	430b      	orrs	r3, r1
 80076e4:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3708      	adds	r7, #8
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	ffffc000 	.word	0xffffc000

08007704 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	2b00      	cmp	r3, #0
 8007724:	d026      	beq.n	8007774 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800772c:	2b00      	cmp	r3, #0
 800772e:	d021      	beq.n	8007774 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800773e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007744:	f043 0201 	orr.w	r2, r3, #1
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2201      	movs	r2, #1
 8007752:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2204      	movs	r2, #4
 8007758:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d003      	beq.n	8007774 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	695b      	ldr	r3, [r3, #20]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f003 0320 	and.w	r3, r3, #32
 800777a:	2b00      	cmp	r3, #0
 800777c:	d026      	beq.n	80077cc <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d021      	beq.n	80077cc <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007796:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2220      	movs	r2, #32
 800779e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077a4:	f043 0202 	orr.w	r2, r3, #2
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2204      	movs	r2, #4
 80077b0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	695b      	ldr	r3, [r3, #20]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d003      	beq.n	80077cc <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	695b      	ldr	r3, [r3, #20]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f003 0308 	and.w	r3, r3, #8
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d026      	beq.n	8007824 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d021      	beq.n	8007824 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80077ee:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2208      	movs	r2, #8
 80077f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077fc:	f043 0204 	orr.w	r2, r3, #4
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2204      	movs	r2, #4
 8007808:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	695b      	ldr	r3, [r3, #20]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d003      	beq.n	8007824 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	695b      	ldr	r3, [r3, #20]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f003 0304 	and.w	r3, r3, #4
 800782a:	2b00      	cmp	r3, #0
 800782c:	d013      	beq.n	8007856 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00e      	beq.n	8007856 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007846:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2204      	movs	r2, #4
 800784e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f853 	bl	80078fc <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f003 0302 	and.w	r3, r3, #2
 800785c:	2b00      	cmp	r3, #0
 800785e:	d024      	beq.n	80078aa <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007866:	2b00      	cmp	r3, #0
 8007868:	d01f      	beq.n	80078aa <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007878:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2202      	movs	r2, #2
 8007880:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2201      	movs	r2, #1
 800788e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f003 0310 	and.w	r3, r3, #16
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d01f      	beq.n	80078f4 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d01a      	beq.n	80078f4 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80078cc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2210      	movs	r2, #16
 80078d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f80e 	bl	8007910 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80078f4:	bf00      	nop
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007918:	bf00      	nop
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007924:	b480      	push	{r7}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800793c:	2b01      	cmp	r3, #1
 800793e:	d101      	bne.n	8007944 <HAL_DMA2D_ConfigLayer+0x20>
 8007940:	2302      	movs	r3, #2
 8007942:	e079      	b.n	8007a38 <HAL_DMA2D_ConfigLayer+0x114>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2202      	movs	r2, #2
 8007950:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	011b      	lsls	r3, r3, #4
 8007958:	3318      	adds	r3, #24
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	4413      	add	r3, r2
 800795e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	041b      	lsls	r3, r3, #16
 800796a:	4313      	orrs	r3, r2
 800796c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800796e:	4b35      	ldr	r3, [pc, #212]	@ (8007a44 <HAL_DMA2D_ConfigLayer+0x120>)
 8007970:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	2b0a      	cmp	r3, #10
 8007978:	d003      	beq.n	8007982 <HAL_DMA2D_ConfigLayer+0x5e>
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	2b09      	cmp	r3, #9
 8007980:	d107      	bne.n	8007992 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	4313      	orrs	r3, r2
 800798e:	617b      	str	r3, [r7, #20]
 8007990:	e005      	b.n	800799e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	061b      	lsls	r3, r3, #24
 8007998:	697a      	ldr	r2, [r7, #20]
 800799a:	4313      	orrs	r3, r2
 800799c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d120      	bne.n	80079e6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	43db      	mvns	r3, r3
 80079ae:	ea02 0103 	and.w	r1, r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	430a      	orrs	r2, r1
 80079ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	6812      	ldr	r2, [r2, #0]
 80079c4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	2b0a      	cmp	r3, #10
 80079cc:	d003      	beq.n	80079d6 <HAL_DMA2D_ConfigLayer+0xb2>
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	2b09      	cmp	r3, #9
 80079d4:	d127      	bne.n	8007a26 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	68da      	ldr	r2, [r3, #12]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80079e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80079e4:	e01f      	b.n	8007a26 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	69da      	ldr	r2, [r3, #28]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	43db      	mvns	r3, r3
 80079f0:	ea02 0103 	and.w	r1, r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	430a      	orrs	r2, r1
 80079fc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	6812      	ldr	r2, [r2, #0]
 8007a06:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	2b0a      	cmp	r3, #10
 8007a0e:	d003      	beq.n	8007a18 <HAL_DMA2D_ConfigLayer+0xf4>
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	2b09      	cmp	r3, #9
 8007a16:	d106      	bne.n	8007a26 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	68da      	ldr	r2, [r3, #12]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8007a24:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	371c      	adds	r7, #28
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr
 8007a44:	ff03000f 	.word	0xff03000f

08007a48 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d101      	bne.n	8007a5a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e086      	b.n	8007b68 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d106      	bne.n	8007a72 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2220      	movs	r2, #32
 8007a68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f7fc fd1b 	bl	80044a8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a72:	4b3f      	ldr	r3, [pc, #252]	@ (8007b70 <HAL_ETH_Init+0x128>)
 8007a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a76:	4a3e      	ldr	r2, [pc, #248]	@ (8007b70 <HAL_ETH_Init+0x128>)
 8007a78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007a7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8007a7e:	4b3c      	ldr	r3, [pc, #240]	@ (8007b70 <HAL_ETH_Init+0x128>)
 8007a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a86:	60bb      	str	r3, [r7, #8]
 8007a88:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8007a8a:	4b3a      	ldr	r3, [pc, #232]	@ (8007b74 <HAL_ETH_Init+0x12c>)
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	4a39      	ldr	r2, [pc, #228]	@ (8007b74 <HAL_ETH_Init+0x12c>)
 8007a90:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007a94:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8007a96:	4b37      	ldr	r3, [pc, #220]	@ (8007b74 <HAL_ETH_Init+0x12c>)
 8007a98:	685a      	ldr	r2, [r3, #4]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	4935      	ldr	r1, [pc, #212]	@ (8007b74 <HAL_ETH_Init+0x12c>)
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8007aa4:	4b33      	ldr	r3, [pc, #204]	@ (8007b74 <HAL_ETH_Init+0x12c>)
 8007aa6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	6812      	ldr	r2, [r2, #0]
 8007ab6:	f043 0301 	orr.w	r3, r3, #1
 8007aba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007abe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ac0:	f7fe fc4c 	bl	800635c <HAL_GetTick>
 8007ac4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8007ac6:	e011      	b.n	8007aec <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8007ac8:	f7fe fc48 	bl	800635c <HAL_GetTick>
 8007acc:	4602      	mov	r2, r0
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007ad6:	d909      	bls.n	8007aec <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2204      	movs	r2, #4
 8007adc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	22e0      	movs	r2, #224	@ 0xe0
 8007ae4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e03d      	b.n	8007b68 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1e4      	bne.n	8007ac8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f97a 	bl	8007df8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fa25 	bl	8007f54 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fa7b 	bl	8008006 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	461a      	mov	r2, r3
 8007b16:	2100      	movs	r1, #0
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f9e3 	bl	8007ee4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8007b2c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8007b78 <HAL_ETH_Init+0x130>)
 8007b3c:	430b      	orrs	r3, r1
 8007b3e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8007b52:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2210      	movs	r2, #16
 8007b62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	40023800 	.word	0x40023800
 8007b74:	40013800 	.word	0x40013800
 8007b78:	00020060 	.word	0x00020060

08007b7c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	4b53      	ldr	r3, [pc, #332]	@ (8007ce0 <ETH_SetMACConfig+0x164>)
 8007b92:	4013      	ands	r3, r2
 8007b94:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	7b9b      	ldrb	r3, [r3, #14]
 8007b9a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007b9c:	683a      	ldr	r2, [r7, #0]
 8007b9e:	7c12      	ldrb	r2, [r2, #16]
 8007ba0:	2a00      	cmp	r2, #0
 8007ba2:	d102      	bne.n	8007baa <ETH_SetMACConfig+0x2e>
 8007ba4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007ba8:	e000      	b.n	8007bac <ETH_SetMACConfig+0x30>
 8007baa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8007bac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	7c52      	ldrb	r2, [r2, #17]
 8007bb2:	2a00      	cmp	r2, #0
 8007bb4:	d102      	bne.n	8007bbc <ETH_SetMACConfig+0x40>
 8007bb6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007bba:	e000      	b.n	8007bbe <ETH_SetMACConfig+0x42>
 8007bbc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007bbe:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8007bc4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	7fdb      	ldrb	r3, [r3, #31]
 8007bca:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8007bcc:	431a      	orrs	r2, r3
                        macconf->Speed |
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8007bd2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007bd4:	683a      	ldr	r2, [r7, #0]
 8007bd6:	7f92      	ldrb	r2, [r2, #30]
 8007bd8:	2a00      	cmp	r2, #0
 8007bda:	d102      	bne.n	8007be2 <ETH_SetMACConfig+0x66>
 8007bdc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007be0:	e000      	b.n	8007be4 <ETH_SetMACConfig+0x68>
 8007be2:	2200      	movs	r2, #0
                        macconf->Speed |
 8007be4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	7f1b      	ldrb	r3, [r3, #28]
 8007bea:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007bec:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8007bf2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	791b      	ldrb	r3, [r3, #4]
 8007bf8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8007bfa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007c02:	2a00      	cmp	r2, #0
 8007c04:	d102      	bne.n	8007c0c <ETH_SetMACConfig+0x90>
 8007c06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c0a:	e000      	b.n	8007c0e <ETH_SetMACConfig+0x92>
 8007c0c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8007c0e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	7bdb      	ldrb	r3, [r3, #15]
 8007c14:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007c16:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007c1c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c24:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8007c26:	4313      	orrs	r3, r2
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007c3e:	2001      	movs	r0, #1
 8007c40:	f7fe fb98 	bl	8006374 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c62:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8007c64:	683a      	ldr	r2, [r7, #0]
 8007c66:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8007c6a:	2a00      	cmp	r2, #0
 8007c6c:	d101      	bne.n	8007c72 <ETH_SetMACConfig+0xf6>
 8007c6e:	2280      	movs	r2, #128	@ 0x80
 8007c70:	e000      	b.n	8007c74 <ETH_SetMACConfig+0xf8>
 8007c72:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007c74:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8007c7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8007c82:	2a01      	cmp	r2, #1
 8007c84:	d101      	bne.n	8007c8a <ETH_SetMACConfig+0x10e>
 8007c86:	2208      	movs	r2, #8
 8007c88:	e000      	b.n	8007c8c <ETH_SetMACConfig+0x110>
 8007c8a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8007c8c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8007c94:	2a01      	cmp	r2, #1
 8007c96:	d101      	bne.n	8007c9c <ETH_SetMACConfig+0x120>
 8007c98:	2204      	movs	r2, #4
 8007c9a:	e000      	b.n	8007c9e <ETH_SetMACConfig+0x122>
 8007c9c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8007c9e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8007ca6:	2a01      	cmp	r2, #1
 8007ca8:	d101      	bne.n	8007cae <ETH_SetMACConfig+0x132>
 8007caa:	2202      	movs	r2, #2
 8007cac:	e000      	b.n	8007cb0 <ETH_SetMACConfig+0x134>
 8007cae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007cc8:	2001      	movs	r0, #1
 8007cca:	f7fe fb53 	bl	8006374 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	619a      	str	r2, [r3, #24]
}
 8007cd6:	bf00      	nop
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	fd20810f 	.word	0xfd20810f

08007ce4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cf6:	699b      	ldr	r3, [r3, #24]
 8007cf8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	4b3d      	ldr	r3, [pc, #244]	@ (8007df4 <ETH_SetDMAConfig+0x110>)
 8007cfe:	4013      	ands	r3, r2
 8007d00:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	7b1b      	ldrb	r3, [r3, #12]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d102      	bne.n	8007d10 <ETH_SetDMAConfig+0x2c>
 8007d0a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007d0e:	e000      	b.n	8007d12 <ETH_SetDMAConfig+0x2e>
 8007d10:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	7b5b      	ldrb	r3, [r3, #13]
 8007d16:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007d18:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	7f52      	ldrb	r2, [r2, #29]
 8007d1e:	2a00      	cmp	r2, #0
 8007d20:	d102      	bne.n	8007d28 <ETH_SetDMAConfig+0x44>
 8007d22:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007d26:	e000      	b.n	8007d2a <ETH_SetDMAConfig+0x46>
 8007d28:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8007d2a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	7b9b      	ldrb	r3, [r3, #14]
 8007d30:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8007d32:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8007d38:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	7f1b      	ldrb	r3, [r3, #28]
 8007d3e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8007d40:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	7f9b      	ldrb	r3, [r3, #30]
 8007d46:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8007d48:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8007d4e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007d56:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d68:	461a      	mov	r2, r3
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007d7a:	2001      	movs	r0, #1
 8007d7c:	f7fe fafa 	bl	8006374 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d88:	461a      	mov	r2, r3
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	791b      	ldrb	r3, [r3, #4]
 8007d92:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007d98:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8007d9e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8007da4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007dac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8007dae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007db4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8007db6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8007dbc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	6812      	ldr	r2, [r2, #0]
 8007dc2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007dc6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007dca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007dd8:	2001      	movs	r0, #1
 8007dda:	f7fe facb 	bl	8006374 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007de6:	461a      	mov	r2, r3
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6013      	str	r3, [r2, #0]
}
 8007dec:	bf00      	nop
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	f8de3f23 	.word	0xf8de3f23

08007df8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b0a6      	sub	sp, #152	@ 0x98
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8007e00:	2301      	movs	r3, #1
 8007e02:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8007e06:	2301      	movs	r3, #1
 8007e08:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8007e10:	2300      	movs	r3, #0
 8007e12:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8007e16:	2301      	movs	r3, #1
 8007e18:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8007e22:	2301      	movs	r3, #1
 8007e24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8007e34:	2300      	movs	r3, #0
 8007e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8007e44:	2300      	movs	r3, #0
 8007e46:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007e54:	2300      	movs	r3, #0
 8007e56:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8007e60:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007e64:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007e66:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8007e72:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007e76:	4619      	mov	r1, r3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f7ff fe7f 	bl	8007b7c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8007e82:	2301      	movs	r3, #1
 8007e84:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8007e86:	2301      	movs	r3, #1
 8007e88:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8007e90:	2300      	movs	r3, #0
 8007e92:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8007e94:	2300      	movs	r3, #0
 8007e96:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8007eae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007eb2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007eb4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007eb8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007eba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007ebe:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8007ece:	f107 0308 	add.w	r3, r7, #8
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f7ff ff05 	bl	8007ce4 <ETH_SetDMAConfig>
}
 8007eda:	bf00      	nop
 8007edc:	3798      	adds	r7, #152	@ 0x98
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
	...

08007ee4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b087      	sub	sp, #28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	3305      	adds	r3, #5
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	021b      	lsls	r3, r3, #8
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	3204      	adds	r2, #4
 8007efc:	7812      	ldrb	r2, [r2, #0]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	4b11      	ldr	r3, [pc, #68]	@ (8007f4c <ETH_MACAddressConfig+0x68>)
 8007f06:	4413      	add	r3, r2
 8007f08:	461a      	mov	r2, r3
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	3303      	adds	r3, #3
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	061a      	lsls	r2, r3, #24
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	3302      	adds	r3, #2
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	041b      	lsls	r3, r3, #16
 8007f1e:	431a      	orrs	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	3301      	adds	r3, #1
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	021b      	lsls	r3, r3, #8
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	7812      	ldrb	r2, [r2, #0]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	4b06      	ldr	r3, [pc, #24]	@ (8007f50 <ETH_MACAddressConfig+0x6c>)
 8007f36:	4413      	add	r3, r2
 8007f38:	461a      	mov	r2, r3
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	6013      	str	r3, [r2, #0]
}
 8007f3e:	bf00      	nop
 8007f40:	371c      	adds	r7, #28
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	40028040 	.word	0x40028040
 8007f50:	40028044 	.word	0x40028044

08007f54 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b085      	sub	sp, #20
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	60fb      	str	r3, [r7, #12]
 8007f60:	e03e      	b.n	8007fe0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	68d9      	ldr	r1, [r3, #12]
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4413      	add	r3, r2
 8007f6e:	00db      	lsls	r3, r3, #3
 8007f70:	440b      	add	r3, r1
 8007f72:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2200      	movs	r2, #0
 8007f78:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	2200      	movs	r2, #0
 8007f84:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8007f8c:	68b9      	ldr	r1, [r7, #8]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	3206      	adds	r2, #6
 8007f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d80c      	bhi.n	8007fc4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	68d9      	ldr	r1, [r3, #12]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	1c5a      	adds	r2, r3, #1
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4413      	add	r3, r2
 8007fb8:	00db      	lsls	r3, r3, #3
 8007fba:	440b      	add	r3, r1
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	60da      	str	r2, [r3, #12]
 8007fc2:	e004      	b.n	8007fce <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	461a      	mov	r2, r3
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d9bd      	bls.n	8007f62 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	68da      	ldr	r2, [r3, #12]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ff8:	611a      	str	r2, [r3, #16]
}
 8007ffa:	bf00      	nop
 8007ffc:	3714      	adds	r7, #20
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr

08008006 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8008006:	b480      	push	{r7}
 8008008:	b085      	sub	sp, #20
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800800e:	2300      	movs	r3, #0
 8008010:	60fb      	str	r3, [r7, #12]
 8008012:	e048      	b.n	80080a6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6919      	ldr	r1, [r3, #16]
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	4613      	mov	r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4413      	add	r3, r2
 8008020:	00db      	lsls	r3, r3, #3
 8008022:	440b      	add	r3, r1
 8008024:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	2200      	movs	r2, #0
 800802a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	2200      	movs	r2, #0
 8008030:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	2200      	movs	r2, #0
 8008036:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	2200      	movs	r2, #0
 800803c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	2200      	movs	r2, #0
 8008042:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	2200      	movs	r2, #0
 8008048:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008050:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	695b      	ldr	r3, [r3, #20]
 8008056:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800806a:	68b9      	ldr	r1, [r7, #8]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	3212      	adds	r2, #18
 8008072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2b02      	cmp	r3, #2
 800807a:	d80c      	bhi.n	8008096 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6919      	ldr	r1, [r3, #16]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	1c5a      	adds	r2, r3, #1
 8008084:	4613      	mov	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	00db      	lsls	r3, r3, #3
 800808c:	440b      	add	r3, r1
 800808e:	461a      	mov	r2, r3
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	60da      	str	r2, [r3, #12]
 8008094:	e004      	b.n	80080a0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	461a      	mov	r2, r3
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	3301      	adds	r3, #1
 80080a4:	60fb      	str	r3, [r7, #12]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2b03      	cmp	r3, #3
 80080aa:	d9b3      	bls.n	8008014 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	691a      	ldr	r2, [r3, #16]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080d6:	60da      	str	r2, [r3, #12]
}
 80080d8:	bf00      	nop
 80080da:	3714      	adds	r7, #20
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b089      	sub	sp, #36	@ 0x24
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80080ee:	2300      	movs	r3, #0
 80080f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80080f2:	2300      	movs	r3, #0
 80080f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80080f6:	2300      	movs	r3, #0
 80080f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80080fa:	2300      	movs	r3, #0
 80080fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80080fe:	2300      	movs	r3, #0
 8008100:	61fb      	str	r3, [r7, #28]
 8008102:	e175      	b.n	80083f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008104:	2201      	movs	r2, #1
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	fa02 f303 	lsl.w	r3, r2, r3
 800810c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	4013      	ands	r3, r2
 8008116:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8008118:	693a      	ldr	r2, [r7, #16]
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	429a      	cmp	r2, r3
 800811e:	f040 8164 	bne.w	80083ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	f003 0303 	and.w	r3, r3, #3
 800812a:	2b01      	cmp	r3, #1
 800812c:	d005      	beq.n	800813a <HAL_GPIO_Init+0x56>
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f003 0303 	and.w	r3, r3, #3
 8008136:	2b02      	cmp	r3, #2
 8008138:	d130      	bne.n	800819c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	005b      	lsls	r3, r3, #1
 8008144:	2203      	movs	r2, #3
 8008146:	fa02 f303 	lsl.w	r3, r2, r3
 800814a:	43db      	mvns	r3, r3
 800814c:	69ba      	ldr	r2, [r7, #24]
 800814e:	4013      	ands	r3, r2
 8008150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	68da      	ldr	r2, [r3, #12]
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	005b      	lsls	r3, r3, #1
 800815a:	fa02 f303 	lsl.w	r3, r2, r3
 800815e:	69ba      	ldr	r2, [r7, #24]
 8008160:	4313      	orrs	r3, r2
 8008162:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	69ba      	ldr	r2, [r7, #24]
 8008168:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008170:	2201      	movs	r2, #1
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	fa02 f303 	lsl.w	r3, r2, r3
 8008178:	43db      	mvns	r3, r3
 800817a:	69ba      	ldr	r2, [r7, #24]
 800817c:	4013      	ands	r3, r2
 800817e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	091b      	lsrs	r3, r3, #4
 8008186:	f003 0201 	and.w	r2, r3, #1
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	fa02 f303 	lsl.w	r3, r2, r3
 8008190:	69ba      	ldr	r2, [r7, #24]
 8008192:	4313      	orrs	r3, r2
 8008194:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	69ba      	ldr	r2, [r7, #24]
 800819a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	f003 0303 	and.w	r3, r3, #3
 80081a4:	2b03      	cmp	r3, #3
 80081a6:	d017      	beq.n	80081d8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	005b      	lsls	r3, r3, #1
 80081b2:	2203      	movs	r2, #3
 80081b4:	fa02 f303 	lsl.w	r3, r2, r3
 80081b8:	43db      	mvns	r3, r3
 80081ba:	69ba      	ldr	r2, [r7, #24]
 80081bc:	4013      	ands	r3, r2
 80081be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	689a      	ldr	r2, [r3, #8]
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	005b      	lsls	r3, r3, #1
 80081c8:	fa02 f303 	lsl.w	r3, r2, r3
 80081cc:	69ba      	ldr	r2, [r7, #24]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	69ba      	ldr	r2, [r7, #24]
 80081d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	f003 0303 	and.w	r3, r3, #3
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d123      	bne.n	800822c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	08da      	lsrs	r2, r3, #3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	3208      	adds	r2, #8
 80081ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	f003 0307 	and.w	r3, r3, #7
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	220f      	movs	r2, #15
 80081fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008200:	43db      	mvns	r3, r3
 8008202:	69ba      	ldr	r2, [r7, #24]
 8008204:	4013      	ands	r3, r2
 8008206:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	691a      	ldr	r2, [r3, #16]
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	f003 0307 	and.w	r3, r3, #7
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	fa02 f303 	lsl.w	r3, r2, r3
 8008218:	69ba      	ldr	r2, [r7, #24]
 800821a:	4313      	orrs	r3, r2
 800821c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	08da      	lsrs	r2, r3, #3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	3208      	adds	r2, #8
 8008226:	69b9      	ldr	r1, [r7, #24]
 8008228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	005b      	lsls	r3, r3, #1
 8008236:	2203      	movs	r2, #3
 8008238:	fa02 f303 	lsl.w	r3, r2, r3
 800823c:	43db      	mvns	r3, r3
 800823e:	69ba      	ldr	r2, [r7, #24]
 8008240:	4013      	ands	r3, r2
 8008242:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	f003 0203 	and.w	r2, r3, #3
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	005b      	lsls	r3, r3, #1
 8008250:	fa02 f303 	lsl.w	r3, r2, r3
 8008254:	69ba      	ldr	r2, [r7, #24]
 8008256:	4313      	orrs	r3, r2
 8008258:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	69ba      	ldr	r2, [r7, #24]
 800825e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008268:	2b00      	cmp	r3, #0
 800826a:	f000 80be 	beq.w	80083ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800826e:	4b66      	ldr	r3, [pc, #408]	@ (8008408 <HAL_GPIO_Init+0x324>)
 8008270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008272:	4a65      	ldr	r2, [pc, #404]	@ (8008408 <HAL_GPIO_Init+0x324>)
 8008274:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008278:	6453      	str	r3, [r2, #68]	@ 0x44
 800827a:	4b63      	ldr	r3, [pc, #396]	@ (8008408 <HAL_GPIO_Init+0x324>)
 800827c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800827e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008282:	60fb      	str	r3, [r7, #12]
 8008284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8008286:	4a61      	ldr	r2, [pc, #388]	@ (800840c <HAL_GPIO_Init+0x328>)
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	089b      	lsrs	r3, r3, #2
 800828c:	3302      	adds	r3, #2
 800828e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008292:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	f003 0303 	and.w	r3, r3, #3
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	220f      	movs	r2, #15
 800829e:	fa02 f303 	lsl.w	r3, r2, r3
 80082a2:	43db      	mvns	r3, r3
 80082a4:	69ba      	ldr	r2, [r7, #24]
 80082a6:	4013      	ands	r3, r2
 80082a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a58      	ldr	r2, [pc, #352]	@ (8008410 <HAL_GPIO_Init+0x32c>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d037      	beq.n	8008322 <HAL_GPIO_Init+0x23e>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a57      	ldr	r2, [pc, #348]	@ (8008414 <HAL_GPIO_Init+0x330>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d031      	beq.n	800831e <HAL_GPIO_Init+0x23a>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a56      	ldr	r2, [pc, #344]	@ (8008418 <HAL_GPIO_Init+0x334>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d02b      	beq.n	800831a <HAL_GPIO_Init+0x236>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a55      	ldr	r2, [pc, #340]	@ (800841c <HAL_GPIO_Init+0x338>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d025      	beq.n	8008316 <HAL_GPIO_Init+0x232>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a54      	ldr	r2, [pc, #336]	@ (8008420 <HAL_GPIO_Init+0x33c>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d01f      	beq.n	8008312 <HAL_GPIO_Init+0x22e>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a53      	ldr	r2, [pc, #332]	@ (8008424 <HAL_GPIO_Init+0x340>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d019      	beq.n	800830e <HAL_GPIO_Init+0x22a>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a52      	ldr	r2, [pc, #328]	@ (8008428 <HAL_GPIO_Init+0x344>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d013      	beq.n	800830a <HAL_GPIO_Init+0x226>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4a51      	ldr	r2, [pc, #324]	@ (800842c <HAL_GPIO_Init+0x348>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d00d      	beq.n	8008306 <HAL_GPIO_Init+0x222>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a50      	ldr	r2, [pc, #320]	@ (8008430 <HAL_GPIO_Init+0x34c>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d007      	beq.n	8008302 <HAL_GPIO_Init+0x21e>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a4f      	ldr	r2, [pc, #316]	@ (8008434 <HAL_GPIO_Init+0x350>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d101      	bne.n	80082fe <HAL_GPIO_Init+0x21a>
 80082fa:	2309      	movs	r3, #9
 80082fc:	e012      	b.n	8008324 <HAL_GPIO_Init+0x240>
 80082fe:	230a      	movs	r3, #10
 8008300:	e010      	b.n	8008324 <HAL_GPIO_Init+0x240>
 8008302:	2308      	movs	r3, #8
 8008304:	e00e      	b.n	8008324 <HAL_GPIO_Init+0x240>
 8008306:	2307      	movs	r3, #7
 8008308:	e00c      	b.n	8008324 <HAL_GPIO_Init+0x240>
 800830a:	2306      	movs	r3, #6
 800830c:	e00a      	b.n	8008324 <HAL_GPIO_Init+0x240>
 800830e:	2305      	movs	r3, #5
 8008310:	e008      	b.n	8008324 <HAL_GPIO_Init+0x240>
 8008312:	2304      	movs	r3, #4
 8008314:	e006      	b.n	8008324 <HAL_GPIO_Init+0x240>
 8008316:	2303      	movs	r3, #3
 8008318:	e004      	b.n	8008324 <HAL_GPIO_Init+0x240>
 800831a:	2302      	movs	r3, #2
 800831c:	e002      	b.n	8008324 <HAL_GPIO_Init+0x240>
 800831e:	2301      	movs	r3, #1
 8008320:	e000      	b.n	8008324 <HAL_GPIO_Init+0x240>
 8008322:	2300      	movs	r3, #0
 8008324:	69fa      	ldr	r2, [r7, #28]
 8008326:	f002 0203 	and.w	r2, r2, #3
 800832a:	0092      	lsls	r2, r2, #2
 800832c:	4093      	lsls	r3, r2
 800832e:	69ba      	ldr	r2, [r7, #24]
 8008330:	4313      	orrs	r3, r2
 8008332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008334:	4935      	ldr	r1, [pc, #212]	@ (800840c <HAL_GPIO_Init+0x328>)
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	089b      	lsrs	r3, r3, #2
 800833a:	3302      	adds	r3, #2
 800833c:	69ba      	ldr	r2, [r7, #24]
 800833e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008342:	4b3d      	ldr	r3, [pc, #244]	@ (8008438 <HAL_GPIO_Init+0x354>)
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	43db      	mvns	r3, r3
 800834c:	69ba      	ldr	r2, [r7, #24]
 800834e:	4013      	ands	r3, r2
 8008350:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800835a:	2b00      	cmp	r3, #0
 800835c:	d003      	beq.n	8008366 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800835e:	69ba      	ldr	r2, [r7, #24]
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	4313      	orrs	r3, r2
 8008364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008366:	4a34      	ldr	r2, [pc, #208]	@ (8008438 <HAL_GPIO_Init+0x354>)
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800836c:	4b32      	ldr	r3, [pc, #200]	@ (8008438 <HAL_GPIO_Init+0x354>)
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	43db      	mvns	r3, r3
 8008376:	69ba      	ldr	r2, [r7, #24]
 8008378:	4013      	ands	r3, r2
 800837a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008384:	2b00      	cmp	r3, #0
 8008386:	d003      	beq.n	8008390 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008388:	69ba      	ldr	r2, [r7, #24]
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	4313      	orrs	r3, r2
 800838e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008390:	4a29      	ldr	r2, [pc, #164]	@ (8008438 <HAL_GPIO_Init+0x354>)
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008396:	4b28      	ldr	r3, [pc, #160]	@ (8008438 <HAL_GPIO_Init+0x354>)
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	43db      	mvns	r3, r3
 80083a0:	69ba      	ldr	r2, [r7, #24]
 80083a2:	4013      	ands	r3, r2
 80083a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80083b2:	69ba      	ldr	r2, [r7, #24]
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80083ba:	4a1f      	ldr	r2, [pc, #124]	@ (8008438 <HAL_GPIO_Init+0x354>)
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80083c0:	4b1d      	ldr	r3, [pc, #116]	@ (8008438 <HAL_GPIO_Init+0x354>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	43db      	mvns	r3, r3
 80083ca:	69ba      	ldr	r2, [r7, #24]
 80083cc:	4013      	ands	r3, r2
 80083ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d003      	beq.n	80083e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80083dc:	69ba      	ldr	r2, [r7, #24]
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80083e4:	4a14      	ldr	r2, [pc, #80]	@ (8008438 <HAL_GPIO_Init+0x354>)
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	3301      	adds	r3, #1
 80083ee:	61fb      	str	r3, [r7, #28]
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	2b0f      	cmp	r3, #15
 80083f4:	f67f ae86 	bls.w	8008104 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80083f8:	bf00      	nop
 80083fa:	bf00      	nop
 80083fc:	3724      	adds	r7, #36	@ 0x24
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	40023800 	.word	0x40023800
 800840c:	40013800 	.word	0x40013800
 8008410:	40020000 	.word	0x40020000
 8008414:	40020400 	.word	0x40020400
 8008418:	40020800 	.word	0x40020800
 800841c:	40020c00 	.word	0x40020c00
 8008420:	40021000 	.word	0x40021000
 8008424:	40021400 	.word	0x40021400
 8008428:	40021800 	.word	0x40021800
 800842c:	40021c00 	.word	0x40021c00
 8008430:	40022000 	.word	0x40022000
 8008434:	40022400 	.word	0x40022400
 8008438:	40013c00 	.word	0x40013c00

0800843c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	460b      	mov	r3, r1
 8008446:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	691a      	ldr	r2, [r3, #16]
 800844c:	887b      	ldrh	r3, [r7, #2]
 800844e:	4013      	ands	r3, r2
 8008450:	2b00      	cmp	r3, #0
 8008452:	d002      	beq.n	800845a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008454:	2301      	movs	r3, #1
 8008456:	73fb      	strb	r3, [r7, #15]
 8008458:	e001      	b.n	800845e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800845a:	2300      	movs	r3, #0
 800845c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800845e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	460b      	mov	r3, r1
 8008476:	807b      	strh	r3, [r7, #2]
 8008478:	4613      	mov	r3, r2
 800847a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800847c:	787b      	ldrb	r3, [r7, #1]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d003      	beq.n	800848a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008482:	887a      	ldrh	r2, [r7, #2]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008488:	e003      	b.n	8008492 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800848a:	887b      	ldrh	r3, [r7, #2]
 800848c:	041a      	lsls	r2, r3, #16
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	619a      	str	r2, [r3, #24]
}
 8008492:	bf00      	nop
 8008494:	370c      	adds	r7, #12
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr

0800849e <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b086      	sub	sp, #24
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4618      	mov	r0, r3
 80084b6:	f009 f951 	bl	801175c <USB_GetMode>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b01      	cmp	r3, #1
 80084be:	f040 80fb 	bne.w	80086b8 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4618      	mov	r0, r3
 80084c8:	f009 f914 	bl	80116f4 <USB_ReadInterrupts>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f000 80f1 	beq.w	80086b6 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4618      	mov	r0, r3
 80084da:	f009 f90b 	bl	80116f4 <USB_ReadInterrupts>
 80084de:	4603      	mov	r3, r0
 80084e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80084e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084e8:	d104      	bne.n	80084f4 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80084f2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4618      	mov	r0, r3
 80084fa:	f009 f8fb 	bl	80116f4 <USB_ReadInterrupts>
 80084fe:	4603      	mov	r3, r0
 8008500:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008504:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008508:	d104      	bne.n	8008514 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008512:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4618      	mov	r0, r3
 800851a:	f009 f8eb 	bl	80116f4 <USB_ReadInterrupts>
 800851e:	4603      	mov	r3, r0
 8008520:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008524:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008528:	d104      	bne.n	8008534 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8008532:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4618      	mov	r0, r3
 800853a:	f009 f8db 	bl	80116f4 <USB_ReadInterrupts>
 800853e:	4603      	mov	r3, r0
 8008540:	f003 0302 	and.w	r3, r3, #2
 8008544:	2b02      	cmp	r3, #2
 8008546:	d103      	bne.n	8008550 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2202      	movs	r2, #2
 800854e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4618      	mov	r0, r3
 8008556:	f009 f8cd 	bl	80116f4 <USB_ReadInterrupts>
 800855a:	4603      	mov	r3, r0
 800855c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008560:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008564:	d120      	bne.n	80085a8 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800856e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 0301 	and.w	r3, r3, #1
 800857c:	2b00      	cmp	r3, #0
 800857e:	d113      	bne.n	80085a8 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8008580:	2110      	movs	r1, #16
 8008582:	6938      	ldr	r0, [r7, #16]
 8008584:	f008 fffe 	bl	8011584 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8008588:	6938      	ldr	r0, [r7, #16]
 800858a:	f009 f82d 	bl	80115e8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	7a5b      	ldrb	r3, [r3, #9]
 8008592:	2b02      	cmp	r3, #2
 8008594:	d105      	bne.n	80085a2 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2101      	movs	r1, #1
 800859c:	4618      	mov	r0, r3
 800859e:	f009 f8eb 	bl	8011778 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f00e ffd2 	bl	801754c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4618      	mov	r0, r3
 80085ae:	f009 f8a1 	bl	80116f4 <USB_ReadInterrupts>
 80085b2:	4603      	mov	r3, r0
 80085b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80085b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80085bc:	d102      	bne.n	80085c4 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f001 fca1 	bl	8009f06 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4618      	mov	r0, r3
 80085ca:	f009 f893 	bl	80116f4 <USB_ReadInterrupts>
 80085ce:	4603      	mov	r3, r0
 80085d0:	f003 0308 	and.w	r3, r3, #8
 80085d4:	2b08      	cmp	r3, #8
 80085d6:	d106      	bne.n	80085e6 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f00e ff9b 	bl	8017514 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2208      	movs	r2, #8
 80085e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4618      	mov	r0, r3
 80085ec:	f009 f882 	bl	80116f4 <USB_ReadInterrupts>
 80085f0:	4603      	mov	r3, r0
 80085f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085fa:	d139      	bne.n	8008670 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4618      	mov	r0, r3
 8008602:	f009 f8f6 	bl	80117f2 <USB_HC_ReadInterrupt>
 8008606:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008608:	2300      	movs	r3, #0
 800860a:	617b      	str	r3, [r7, #20]
 800860c:	e025      	b.n	800865a <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	f003 030f 	and.w	r3, r3, #15
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	fa22 f303 	lsr.w	r3, r2, r3
 800861a:	f003 0301 	and.w	r3, r3, #1
 800861e:	2b00      	cmp	r3, #0
 8008620:	d018      	beq.n	8008654 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	015a      	lsls	r2, r3, #5
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	4413      	add	r3, r2
 800862a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008634:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008638:	d106      	bne.n	8008648 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	b2db      	uxtb	r3, r3
 800863e:	4619      	mov	r1, r3
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 f859 	bl	80086f8 <HCD_HC_IN_IRQHandler>
 8008646:	e005      	b.n	8008654 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	b2db      	uxtb	r3, r3
 800864c:	4619      	mov	r1, r3
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 febb 	bl	80093ca <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	3301      	adds	r3, #1
 8008658:	617b      	str	r3, [r7, #20]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	795b      	ldrb	r3, [r3, #5]
 800865e:	461a      	mov	r2, r3
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	4293      	cmp	r3, r2
 8008664:	d3d3      	bcc.n	800860e <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800866e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4618      	mov	r0, r3
 8008676:	f009 f83d 	bl	80116f4 <USB_ReadInterrupts>
 800867a:	4603      	mov	r3, r0
 800867c:	f003 0310 	and.w	r3, r3, #16
 8008680:	2b10      	cmp	r3, #16
 8008682:	d101      	bne.n	8008688 <HAL_HCD_IRQHandler+0x1ea>
 8008684:	2301      	movs	r3, #1
 8008686:	e000      	b.n	800868a <HAL_HCD_IRQHandler+0x1ec>
 8008688:	2300      	movs	r3, #0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d014      	beq.n	80086b8 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	699a      	ldr	r2, [r3, #24]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f022 0210 	bic.w	r2, r2, #16
 800869c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f001 fb52 	bl	8009d48 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	699a      	ldr	r2, [r3, #24]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f042 0210 	orr.w	r2, r2, #16
 80086b2:	619a      	str	r2, [r3, #24]
 80086b4:	e000      	b.n	80086b8 <HAL_HCD_IRQHandler+0x21a>
      return;
 80086b6:	bf00      	nop
    }
  }
}
 80086b8:	3718      	adds	r7, #24
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b082      	sub	sp, #8
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d101      	bne.n	80086d4 <HAL_HCD_Stop+0x16>
 80086d0:	2302      	movs	r3, #2
 80086d2:	e00d      	b.n	80086f0 <HAL_HCD_Stop+0x32>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4618      	mov	r0, r3
 80086e2:	f009 f9b7 	bl	8011a54 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	460b      	mov	r3, r1
 8008702:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	78fa      	ldrb	r2, [r7, #3]
 8008714:	4611      	mov	r1, r2
 8008716:	4618      	mov	r0, r3
 8008718:	f008 ffff 	bl	801171a <USB_ReadChInterrupts>
 800871c:	4603      	mov	r3, r0
 800871e:	f003 0304 	and.w	r3, r3, #4
 8008722:	2b04      	cmp	r3, #4
 8008724:	d11a      	bne.n	800875c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8008726:	78fb      	ldrb	r3, [r7, #3]
 8008728:	015a      	lsls	r2, r3, #5
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	4413      	add	r3, r2
 800872e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008732:	461a      	mov	r2, r3
 8008734:	2304      	movs	r3, #4
 8008736:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8008738:	78fa      	ldrb	r2, [r7, #3]
 800873a:	6879      	ldr	r1, [r7, #4]
 800873c:	4613      	mov	r3, r2
 800873e:	011b      	lsls	r3, r3, #4
 8008740:	1a9b      	subs	r3, r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	440b      	add	r3, r1
 8008746:	334d      	adds	r3, #77	@ 0x4d
 8008748:	2207      	movs	r2, #7
 800874a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	78fa      	ldrb	r2, [r7, #3]
 8008752:	4611      	mov	r1, r2
 8008754:	4618      	mov	r0, r3
 8008756:	f009 f85d 	bl	8011814 <USB_HC_Halt>
 800875a:	e09e      	b.n	800889a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	78fa      	ldrb	r2, [r7, #3]
 8008762:	4611      	mov	r1, r2
 8008764:	4618      	mov	r0, r3
 8008766:	f008 ffd8 	bl	801171a <USB_ReadChInterrupts>
 800876a:	4603      	mov	r3, r0
 800876c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008770:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008774:	d11b      	bne.n	80087ae <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8008776:	78fb      	ldrb	r3, [r7, #3]
 8008778:	015a      	lsls	r2, r3, #5
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	4413      	add	r3, r2
 800877e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008782:	461a      	mov	r2, r3
 8008784:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008788:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800878a:	78fa      	ldrb	r2, [r7, #3]
 800878c:	6879      	ldr	r1, [r7, #4]
 800878e:	4613      	mov	r3, r2
 8008790:	011b      	lsls	r3, r3, #4
 8008792:	1a9b      	subs	r3, r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	440b      	add	r3, r1
 8008798:	334d      	adds	r3, #77	@ 0x4d
 800879a:	2208      	movs	r2, #8
 800879c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	78fa      	ldrb	r2, [r7, #3]
 80087a4:	4611      	mov	r1, r2
 80087a6:	4618      	mov	r0, r3
 80087a8:	f009 f834 	bl	8011814 <USB_HC_Halt>
 80087ac:	e075      	b.n	800889a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	78fa      	ldrb	r2, [r7, #3]
 80087b4:	4611      	mov	r1, r2
 80087b6:	4618      	mov	r0, r3
 80087b8:	f008 ffaf 	bl	801171a <USB_ReadChInterrupts>
 80087bc:	4603      	mov	r3, r0
 80087be:	f003 0308 	and.w	r3, r3, #8
 80087c2:	2b08      	cmp	r3, #8
 80087c4:	d11a      	bne.n	80087fc <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80087c6:	78fb      	ldrb	r3, [r7, #3]
 80087c8:	015a      	lsls	r2, r3, #5
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	4413      	add	r3, r2
 80087ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087d2:	461a      	mov	r2, r3
 80087d4:	2308      	movs	r3, #8
 80087d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80087d8:	78fa      	ldrb	r2, [r7, #3]
 80087da:	6879      	ldr	r1, [r7, #4]
 80087dc:	4613      	mov	r3, r2
 80087de:	011b      	lsls	r3, r3, #4
 80087e0:	1a9b      	subs	r3, r3, r2
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	440b      	add	r3, r1
 80087e6:	334d      	adds	r3, #77	@ 0x4d
 80087e8:	2206      	movs	r2, #6
 80087ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	78fa      	ldrb	r2, [r7, #3]
 80087f2:	4611      	mov	r1, r2
 80087f4:	4618      	mov	r0, r3
 80087f6:	f009 f80d 	bl	8011814 <USB_HC_Halt>
 80087fa:	e04e      	b.n	800889a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	78fa      	ldrb	r2, [r7, #3]
 8008802:	4611      	mov	r1, r2
 8008804:	4618      	mov	r0, r3
 8008806:	f008 ff88 	bl	801171a <USB_ReadChInterrupts>
 800880a:	4603      	mov	r3, r0
 800880c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008810:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008814:	d11b      	bne.n	800884e <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8008816:	78fb      	ldrb	r3, [r7, #3]
 8008818:	015a      	lsls	r2, r3, #5
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	4413      	add	r3, r2
 800881e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008822:	461a      	mov	r2, r3
 8008824:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008828:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800882a:	78fa      	ldrb	r2, [r7, #3]
 800882c:	6879      	ldr	r1, [r7, #4]
 800882e:	4613      	mov	r3, r2
 8008830:	011b      	lsls	r3, r3, #4
 8008832:	1a9b      	subs	r3, r3, r2
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	440b      	add	r3, r1
 8008838:	334d      	adds	r3, #77	@ 0x4d
 800883a:	2209      	movs	r2, #9
 800883c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	78fa      	ldrb	r2, [r7, #3]
 8008844:	4611      	mov	r1, r2
 8008846:	4618      	mov	r0, r3
 8008848:	f008 ffe4 	bl	8011814 <USB_HC_Halt>
 800884c:	e025      	b.n	800889a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	78fa      	ldrb	r2, [r7, #3]
 8008854:	4611      	mov	r1, r2
 8008856:	4618      	mov	r0, r3
 8008858:	f008 ff5f 	bl	801171a <USB_ReadChInterrupts>
 800885c:	4603      	mov	r3, r0
 800885e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008862:	2b80      	cmp	r3, #128	@ 0x80
 8008864:	d119      	bne.n	800889a <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8008866:	78fb      	ldrb	r3, [r7, #3]
 8008868:	015a      	lsls	r2, r3, #5
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	4413      	add	r3, r2
 800886e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008872:	461a      	mov	r2, r3
 8008874:	2380      	movs	r3, #128	@ 0x80
 8008876:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8008878:	78fa      	ldrb	r2, [r7, #3]
 800887a:	6879      	ldr	r1, [r7, #4]
 800887c:	4613      	mov	r3, r2
 800887e:	011b      	lsls	r3, r3, #4
 8008880:	1a9b      	subs	r3, r3, r2
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	440b      	add	r3, r1
 8008886:	334d      	adds	r3, #77	@ 0x4d
 8008888:	2207      	movs	r2, #7
 800888a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	78fa      	ldrb	r2, [r7, #3]
 8008892:	4611      	mov	r1, r2
 8008894:	4618      	mov	r0, r3
 8008896:	f008 ffbd 	bl	8011814 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	78fa      	ldrb	r2, [r7, #3]
 80088a0:	4611      	mov	r1, r2
 80088a2:	4618      	mov	r0, r3
 80088a4:	f008 ff39 	bl	801171a <USB_ReadChInterrupts>
 80088a8:	4603      	mov	r3, r0
 80088aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088b2:	d112      	bne.n	80088da <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	78fa      	ldrb	r2, [r7, #3]
 80088ba:	4611      	mov	r1, r2
 80088bc:	4618      	mov	r0, r3
 80088be:	f008 ffa9 	bl	8011814 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80088c2:	78fb      	ldrb	r3, [r7, #3]
 80088c4:	015a      	lsls	r2, r3, #5
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	4413      	add	r3, r2
 80088ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088ce:	461a      	mov	r2, r3
 80088d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80088d4:	6093      	str	r3, [r2, #8]
 80088d6:	f000 bd75 	b.w	80093c4 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	78fa      	ldrb	r2, [r7, #3]
 80088e0:	4611      	mov	r1, r2
 80088e2:	4618      	mov	r0, r3
 80088e4:	f008 ff19 	bl	801171a <USB_ReadChInterrupts>
 80088e8:	4603      	mov	r3, r0
 80088ea:	f003 0301 	and.w	r3, r3, #1
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	f040 8128 	bne.w	8008b44 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80088f4:	78fb      	ldrb	r3, [r7, #3]
 80088f6:	015a      	lsls	r2, r3, #5
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	4413      	add	r3, r2
 80088fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008900:	461a      	mov	r2, r3
 8008902:	2320      	movs	r3, #32
 8008904:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8008906:	78fa      	ldrb	r2, [r7, #3]
 8008908:	6879      	ldr	r1, [r7, #4]
 800890a:	4613      	mov	r3, r2
 800890c:	011b      	lsls	r3, r3, #4
 800890e:	1a9b      	subs	r3, r3, r2
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	440b      	add	r3, r1
 8008914:	331b      	adds	r3, #27
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	2b01      	cmp	r3, #1
 800891a:	d119      	bne.n	8008950 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800891c:	78fa      	ldrb	r2, [r7, #3]
 800891e:	6879      	ldr	r1, [r7, #4]
 8008920:	4613      	mov	r3, r2
 8008922:	011b      	lsls	r3, r3, #4
 8008924:	1a9b      	subs	r3, r3, r2
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	440b      	add	r3, r1
 800892a:	331b      	adds	r3, #27
 800892c:	2200      	movs	r2, #0
 800892e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008930:	78fb      	ldrb	r3, [r7, #3]
 8008932:	015a      	lsls	r2, r3, #5
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	4413      	add	r3, r2
 8008938:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	78fa      	ldrb	r2, [r7, #3]
 8008940:	0151      	lsls	r1, r2, #5
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	440a      	add	r2, r1
 8008946:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800894a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800894e:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	799b      	ldrb	r3, [r3, #6]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d01b      	beq.n	8008990 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8008958:	78fa      	ldrb	r2, [r7, #3]
 800895a:	6879      	ldr	r1, [r7, #4]
 800895c:	4613      	mov	r3, r2
 800895e:	011b      	lsls	r3, r3, #4
 8008960:	1a9b      	subs	r3, r3, r2
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	440b      	add	r3, r1
 8008966:	3330      	adds	r3, #48	@ 0x30
 8008968:	6819      	ldr	r1, [r3, #0]
 800896a:	78fb      	ldrb	r3, [r7, #3]
 800896c:	015a      	lsls	r2, r3, #5
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	4413      	add	r3, r2
 8008972:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800897c:	78fa      	ldrb	r2, [r7, #3]
 800897e:	1ac9      	subs	r1, r1, r3
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	4613      	mov	r3, r2
 8008984:	011b      	lsls	r3, r3, #4
 8008986:	1a9b      	subs	r3, r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4403      	add	r3, r0
 800898c:	3338      	adds	r3, #56	@ 0x38
 800898e:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8008990:	78fa      	ldrb	r2, [r7, #3]
 8008992:	6879      	ldr	r1, [r7, #4]
 8008994:	4613      	mov	r3, r2
 8008996:	011b      	lsls	r3, r3, #4
 8008998:	1a9b      	subs	r3, r3, r2
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	440b      	add	r3, r1
 800899e:	334d      	adds	r3, #77	@ 0x4d
 80089a0:	2201      	movs	r2, #1
 80089a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80089a4:	78fa      	ldrb	r2, [r7, #3]
 80089a6:	6879      	ldr	r1, [r7, #4]
 80089a8:	4613      	mov	r3, r2
 80089aa:	011b      	lsls	r3, r3, #4
 80089ac:	1a9b      	subs	r3, r3, r2
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	440b      	add	r3, r1
 80089b2:	3344      	adds	r3, #68	@ 0x44
 80089b4:	2200      	movs	r2, #0
 80089b6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80089b8:	78fb      	ldrb	r3, [r7, #3]
 80089ba:	015a      	lsls	r2, r3, #5
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	4413      	add	r3, r2
 80089c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089c4:	461a      	mov	r2, r3
 80089c6:	2301      	movs	r3, #1
 80089c8:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80089ca:	78fa      	ldrb	r2, [r7, #3]
 80089cc:	6879      	ldr	r1, [r7, #4]
 80089ce:	4613      	mov	r3, r2
 80089d0:	011b      	lsls	r3, r3, #4
 80089d2:	1a9b      	subs	r3, r3, r2
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	440b      	add	r3, r1
 80089d8:	3326      	adds	r3, #38	@ 0x26
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00a      	beq.n	80089f6 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80089e0:	78fa      	ldrb	r2, [r7, #3]
 80089e2:	6879      	ldr	r1, [r7, #4]
 80089e4:	4613      	mov	r3, r2
 80089e6:	011b      	lsls	r3, r3, #4
 80089e8:	1a9b      	subs	r3, r3, r2
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	440b      	add	r3, r1
 80089ee:	3326      	adds	r3, #38	@ 0x26
 80089f0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	d110      	bne.n	8008a18 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	78fa      	ldrb	r2, [r7, #3]
 80089fc:	4611      	mov	r1, r2
 80089fe:	4618      	mov	r0, r3
 8008a00:	f008 ff08 	bl	8011814 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008a04:	78fb      	ldrb	r3, [r7, #3]
 8008a06:	015a      	lsls	r2, r3, #5
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a10:	461a      	mov	r2, r3
 8008a12:	2310      	movs	r3, #16
 8008a14:	6093      	str	r3, [r2, #8]
 8008a16:	e03d      	b.n	8008a94 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8008a18:	78fa      	ldrb	r2, [r7, #3]
 8008a1a:	6879      	ldr	r1, [r7, #4]
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	011b      	lsls	r3, r3, #4
 8008a20:	1a9b      	subs	r3, r3, r2
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	440b      	add	r3, r1
 8008a26:	3326      	adds	r3, #38	@ 0x26
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	2b03      	cmp	r3, #3
 8008a2c:	d00a      	beq.n	8008a44 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8008a2e:	78fa      	ldrb	r2, [r7, #3]
 8008a30:	6879      	ldr	r1, [r7, #4]
 8008a32:	4613      	mov	r3, r2
 8008a34:	011b      	lsls	r3, r3, #4
 8008a36:	1a9b      	subs	r3, r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	440b      	add	r3, r1
 8008a3c:	3326      	adds	r3, #38	@ 0x26
 8008a3e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d127      	bne.n	8008a94 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008a44:	78fb      	ldrb	r3, [r7, #3]
 8008a46:	015a      	lsls	r2, r3, #5
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	78fa      	ldrb	r2, [r7, #3]
 8008a54:	0151      	lsls	r1, r2, #5
 8008a56:	693a      	ldr	r2, [r7, #16]
 8008a58:	440a      	add	r2, r1
 8008a5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a5e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008a62:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008a64:	78fa      	ldrb	r2, [r7, #3]
 8008a66:	6879      	ldr	r1, [r7, #4]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	011b      	lsls	r3, r3, #4
 8008a6c:	1a9b      	subs	r3, r3, r2
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	440b      	add	r3, r1
 8008a72:	334c      	adds	r3, #76	@ 0x4c
 8008a74:	2201      	movs	r2, #1
 8008a76:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008a78:	78fa      	ldrb	r2, [r7, #3]
 8008a7a:	6879      	ldr	r1, [r7, #4]
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	011b      	lsls	r3, r3, #4
 8008a80:	1a9b      	subs	r3, r3, r2
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	440b      	add	r3, r1
 8008a86:	334c      	adds	r3, #76	@ 0x4c
 8008a88:	781a      	ldrb	r2, [r3, #0]
 8008a8a:	78fb      	ldrb	r3, [r7, #3]
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f00e fd6a 	bl	8017568 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	799b      	ldrb	r3, [r3, #6]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d13b      	bne.n	8008b14 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8008a9c:	78fa      	ldrb	r2, [r7, #3]
 8008a9e:	6879      	ldr	r1, [r7, #4]
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	011b      	lsls	r3, r3, #4
 8008aa4:	1a9b      	subs	r3, r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	440b      	add	r3, r1
 8008aaa:	3338      	adds	r3, #56	@ 0x38
 8008aac:	6819      	ldr	r1, [r3, #0]
 8008aae:	78fa      	ldrb	r2, [r7, #3]
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	011b      	lsls	r3, r3, #4
 8008ab6:	1a9b      	subs	r3, r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4403      	add	r3, r0
 8008abc:	3328      	adds	r3, #40	@ 0x28
 8008abe:	881b      	ldrh	r3, [r3, #0]
 8008ac0:	440b      	add	r3, r1
 8008ac2:	1e59      	subs	r1, r3, #1
 8008ac4:	78fa      	ldrb	r2, [r7, #3]
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	011b      	lsls	r3, r3, #4
 8008acc:	1a9b      	subs	r3, r3, r2
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	4403      	add	r3, r0
 8008ad2:	3328      	adds	r3, #40	@ 0x28
 8008ad4:	881b      	ldrh	r3, [r3, #0]
 8008ad6:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ada:	f003 0301 	and.w	r3, r3, #1
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	f000 8470 	beq.w	80093c4 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8008ae4:	78fa      	ldrb	r2, [r7, #3]
 8008ae6:	6879      	ldr	r1, [r7, #4]
 8008ae8:	4613      	mov	r3, r2
 8008aea:	011b      	lsls	r3, r3, #4
 8008aec:	1a9b      	subs	r3, r3, r2
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	440b      	add	r3, r1
 8008af2:	333c      	adds	r3, #60	@ 0x3c
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	78fa      	ldrb	r2, [r7, #3]
 8008af8:	f083 0301 	eor.w	r3, r3, #1
 8008afc:	b2d8      	uxtb	r0, r3
 8008afe:	6879      	ldr	r1, [r7, #4]
 8008b00:	4613      	mov	r3, r2
 8008b02:	011b      	lsls	r3, r3, #4
 8008b04:	1a9b      	subs	r3, r3, r2
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	440b      	add	r3, r1
 8008b0a:	333c      	adds	r3, #60	@ 0x3c
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	701a      	strb	r2, [r3, #0]
 8008b10:	f000 bc58 	b.w	80093c4 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8008b14:	78fa      	ldrb	r2, [r7, #3]
 8008b16:	6879      	ldr	r1, [r7, #4]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	011b      	lsls	r3, r3, #4
 8008b1c:	1a9b      	subs	r3, r3, r2
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	440b      	add	r3, r1
 8008b22:	333c      	adds	r3, #60	@ 0x3c
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	78fa      	ldrb	r2, [r7, #3]
 8008b28:	f083 0301 	eor.w	r3, r3, #1
 8008b2c:	b2d8      	uxtb	r0, r3
 8008b2e:	6879      	ldr	r1, [r7, #4]
 8008b30:	4613      	mov	r3, r2
 8008b32:	011b      	lsls	r3, r3, #4
 8008b34:	1a9b      	subs	r3, r3, r2
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	440b      	add	r3, r1
 8008b3a:	333c      	adds	r3, #60	@ 0x3c
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	701a      	strb	r2, [r3, #0]
 8008b40:	f000 bc40 	b.w	80093c4 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	78fa      	ldrb	r2, [r7, #3]
 8008b4a:	4611      	mov	r1, r2
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f008 fde4 	bl	801171a <USB_ReadChInterrupts>
 8008b52:	4603      	mov	r3, r0
 8008b54:	f003 0320 	and.w	r3, r3, #32
 8008b58:	2b20      	cmp	r3, #32
 8008b5a:	d131      	bne.n	8008bc0 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008b5c:	78fb      	ldrb	r3, [r7, #3]
 8008b5e:	015a      	lsls	r2, r3, #5
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	4413      	add	r3, r2
 8008b64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b68:	461a      	mov	r2, r3
 8008b6a:	2320      	movs	r3, #32
 8008b6c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8008b6e:	78fa      	ldrb	r2, [r7, #3]
 8008b70:	6879      	ldr	r1, [r7, #4]
 8008b72:	4613      	mov	r3, r2
 8008b74:	011b      	lsls	r3, r3, #4
 8008b76:	1a9b      	subs	r3, r3, r2
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	440b      	add	r3, r1
 8008b7c:	331a      	adds	r3, #26
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	f040 841f 	bne.w	80093c4 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8008b86:	78fa      	ldrb	r2, [r7, #3]
 8008b88:	6879      	ldr	r1, [r7, #4]
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	011b      	lsls	r3, r3, #4
 8008b8e:	1a9b      	subs	r3, r3, r2
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	440b      	add	r3, r1
 8008b94:	331b      	adds	r3, #27
 8008b96:	2201      	movs	r2, #1
 8008b98:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8008b9a:	78fa      	ldrb	r2, [r7, #3]
 8008b9c:	6879      	ldr	r1, [r7, #4]
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	011b      	lsls	r3, r3, #4
 8008ba2:	1a9b      	subs	r3, r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	440b      	add	r3, r1
 8008ba8:	334d      	adds	r3, #77	@ 0x4d
 8008baa:	2203      	movs	r2, #3
 8008bac:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	78fa      	ldrb	r2, [r7, #3]
 8008bb4:	4611      	mov	r1, r2
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f008 fe2c 	bl	8011814 <USB_HC_Halt>
 8008bbc:	f000 bc02 	b.w	80093c4 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	78fa      	ldrb	r2, [r7, #3]
 8008bc6:	4611      	mov	r1, r2
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f008 fda6 	bl	801171a <USB_ReadChInterrupts>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	f003 0302 	and.w	r3, r3, #2
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	f040 8305 	bne.w	80091e4 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8008bda:	78fb      	ldrb	r3, [r7, #3]
 8008bdc:	015a      	lsls	r2, r3, #5
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	4413      	add	r3, r2
 8008be2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008be6:	461a      	mov	r2, r3
 8008be8:	2302      	movs	r3, #2
 8008bea:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8008bec:	78fa      	ldrb	r2, [r7, #3]
 8008bee:	6879      	ldr	r1, [r7, #4]
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	011b      	lsls	r3, r3, #4
 8008bf4:	1a9b      	subs	r3, r3, r2
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	440b      	add	r3, r1
 8008bfa:	334d      	adds	r3, #77	@ 0x4d
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d114      	bne.n	8008c2c <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008c02:	78fa      	ldrb	r2, [r7, #3]
 8008c04:	6879      	ldr	r1, [r7, #4]
 8008c06:	4613      	mov	r3, r2
 8008c08:	011b      	lsls	r3, r3, #4
 8008c0a:	1a9b      	subs	r3, r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	440b      	add	r3, r1
 8008c10:	334d      	adds	r3, #77	@ 0x4d
 8008c12:	2202      	movs	r2, #2
 8008c14:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008c16:	78fa      	ldrb	r2, [r7, #3]
 8008c18:	6879      	ldr	r1, [r7, #4]
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	011b      	lsls	r3, r3, #4
 8008c1e:	1a9b      	subs	r3, r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	440b      	add	r3, r1
 8008c24:	334c      	adds	r3, #76	@ 0x4c
 8008c26:	2201      	movs	r2, #1
 8008c28:	701a      	strb	r2, [r3, #0]
 8008c2a:	e2cc      	b.n	80091c6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8008c2c:	78fa      	ldrb	r2, [r7, #3]
 8008c2e:	6879      	ldr	r1, [r7, #4]
 8008c30:	4613      	mov	r3, r2
 8008c32:	011b      	lsls	r3, r3, #4
 8008c34:	1a9b      	subs	r3, r3, r2
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	440b      	add	r3, r1
 8008c3a:	334d      	adds	r3, #77	@ 0x4d
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	2b06      	cmp	r3, #6
 8008c40:	d114      	bne.n	8008c6c <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008c42:	78fa      	ldrb	r2, [r7, #3]
 8008c44:	6879      	ldr	r1, [r7, #4]
 8008c46:	4613      	mov	r3, r2
 8008c48:	011b      	lsls	r3, r3, #4
 8008c4a:	1a9b      	subs	r3, r3, r2
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	440b      	add	r3, r1
 8008c50:	334d      	adds	r3, #77	@ 0x4d
 8008c52:	2202      	movs	r2, #2
 8008c54:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8008c56:	78fa      	ldrb	r2, [r7, #3]
 8008c58:	6879      	ldr	r1, [r7, #4]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	011b      	lsls	r3, r3, #4
 8008c5e:	1a9b      	subs	r3, r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	440b      	add	r3, r1
 8008c64:	334c      	adds	r3, #76	@ 0x4c
 8008c66:	2205      	movs	r2, #5
 8008c68:	701a      	strb	r2, [r3, #0]
 8008c6a:	e2ac      	b.n	80091c6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008c6c:	78fa      	ldrb	r2, [r7, #3]
 8008c6e:	6879      	ldr	r1, [r7, #4]
 8008c70:	4613      	mov	r3, r2
 8008c72:	011b      	lsls	r3, r3, #4
 8008c74:	1a9b      	subs	r3, r3, r2
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	440b      	add	r3, r1
 8008c7a:	334d      	adds	r3, #77	@ 0x4d
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	2b07      	cmp	r3, #7
 8008c80:	d00b      	beq.n	8008c9a <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8008c82:	78fa      	ldrb	r2, [r7, #3]
 8008c84:	6879      	ldr	r1, [r7, #4]
 8008c86:	4613      	mov	r3, r2
 8008c88:	011b      	lsls	r3, r3, #4
 8008c8a:	1a9b      	subs	r3, r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	440b      	add	r3, r1
 8008c90:	334d      	adds	r3, #77	@ 0x4d
 8008c92:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008c94:	2b09      	cmp	r3, #9
 8008c96:	f040 80a6 	bne.w	8008de6 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008c9a:	78fa      	ldrb	r2, [r7, #3]
 8008c9c:	6879      	ldr	r1, [r7, #4]
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	011b      	lsls	r3, r3, #4
 8008ca2:	1a9b      	subs	r3, r3, r2
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	440b      	add	r3, r1
 8008ca8:	334d      	adds	r3, #77	@ 0x4d
 8008caa:	2202      	movs	r2, #2
 8008cac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8008cae:	78fa      	ldrb	r2, [r7, #3]
 8008cb0:	6879      	ldr	r1, [r7, #4]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	011b      	lsls	r3, r3, #4
 8008cb6:	1a9b      	subs	r3, r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	440b      	add	r3, r1
 8008cbc:	3344      	adds	r3, #68	@ 0x44
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	1c59      	adds	r1, r3, #1
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	011b      	lsls	r3, r3, #4
 8008cc8:	1a9b      	subs	r3, r3, r2
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	4403      	add	r3, r0
 8008cce:	3344      	adds	r3, #68	@ 0x44
 8008cd0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008cd2:	78fa      	ldrb	r2, [r7, #3]
 8008cd4:	6879      	ldr	r1, [r7, #4]
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	011b      	lsls	r3, r3, #4
 8008cda:	1a9b      	subs	r3, r3, r2
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	440b      	add	r3, r1
 8008ce0:	3344      	adds	r3, #68	@ 0x44
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d943      	bls.n	8008d70 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8008ce8:	78fa      	ldrb	r2, [r7, #3]
 8008cea:	6879      	ldr	r1, [r7, #4]
 8008cec:	4613      	mov	r3, r2
 8008cee:	011b      	lsls	r3, r3, #4
 8008cf0:	1a9b      	subs	r3, r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	440b      	add	r3, r1
 8008cf6:	3344      	adds	r3, #68	@ 0x44
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8008cfc:	78fa      	ldrb	r2, [r7, #3]
 8008cfe:	6879      	ldr	r1, [r7, #4]
 8008d00:	4613      	mov	r3, r2
 8008d02:	011b      	lsls	r3, r3, #4
 8008d04:	1a9b      	subs	r3, r3, r2
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	440b      	add	r3, r1
 8008d0a:	331a      	adds	r3, #26
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d123      	bne.n	8008d5a <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8008d12:	78fa      	ldrb	r2, [r7, #3]
 8008d14:	6879      	ldr	r1, [r7, #4]
 8008d16:	4613      	mov	r3, r2
 8008d18:	011b      	lsls	r3, r3, #4
 8008d1a:	1a9b      	subs	r3, r3, r2
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	440b      	add	r3, r1
 8008d20:	331b      	adds	r3, #27
 8008d22:	2200      	movs	r2, #0
 8008d24:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8008d26:	78fa      	ldrb	r2, [r7, #3]
 8008d28:	6879      	ldr	r1, [r7, #4]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	011b      	lsls	r3, r3, #4
 8008d2e:	1a9b      	subs	r3, r3, r2
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	440b      	add	r3, r1
 8008d34:	331c      	adds	r3, #28
 8008d36:	2200      	movs	r2, #0
 8008d38:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008d3a:	78fb      	ldrb	r3, [r7, #3]
 8008d3c:	015a      	lsls	r2, r3, #5
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	4413      	add	r3, r2
 8008d42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	78fa      	ldrb	r2, [r7, #3]
 8008d4a:	0151      	lsls	r1, r2, #5
 8008d4c:	693a      	ldr	r2, [r7, #16]
 8008d4e:	440a      	add	r2, r1
 8008d50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d58:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8008d5a:	78fa      	ldrb	r2, [r7, #3]
 8008d5c:	6879      	ldr	r1, [r7, #4]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	011b      	lsls	r3, r3, #4
 8008d62:	1a9b      	subs	r3, r3, r2
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	440b      	add	r3, r1
 8008d68:	334c      	adds	r3, #76	@ 0x4c
 8008d6a:	2204      	movs	r2, #4
 8008d6c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008d6e:	e229      	b.n	80091c4 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008d70:	78fa      	ldrb	r2, [r7, #3]
 8008d72:	6879      	ldr	r1, [r7, #4]
 8008d74:	4613      	mov	r3, r2
 8008d76:	011b      	lsls	r3, r3, #4
 8008d78:	1a9b      	subs	r3, r3, r2
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	440b      	add	r3, r1
 8008d7e:	334c      	adds	r3, #76	@ 0x4c
 8008d80:	2202      	movs	r2, #2
 8008d82:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008d84:	78fa      	ldrb	r2, [r7, #3]
 8008d86:	6879      	ldr	r1, [r7, #4]
 8008d88:	4613      	mov	r3, r2
 8008d8a:	011b      	lsls	r3, r3, #4
 8008d8c:	1a9b      	subs	r3, r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	440b      	add	r3, r1
 8008d92:	3326      	adds	r3, #38	@ 0x26
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00b      	beq.n	8008db2 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008d9a:	78fa      	ldrb	r2, [r7, #3]
 8008d9c:	6879      	ldr	r1, [r7, #4]
 8008d9e:	4613      	mov	r3, r2
 8008da0:	011b      	lsls	r3, r3, #4
 8008da2:	1a9b      	subs	r3, r3, r2
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	440b      	add	r3, r1
 8008da8:	3326      	adds	r3, #38	@ 0x26
 8008daa:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	f040 8209 	bne.w	80091c4 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8008db2:	78fb      	ldrb	r3, [r7, #3]
 8008db4:	015a      	lsls	r2, r3, #5
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	4413      	add	r3, r2
 8008dba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008dc8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008dd0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8008dd2:	78fb      	ldrb	r3, [r7, #3]
 8008dd4:	015a      	lsls	r2, r3, #5
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	4413      	add	r3, r2
 8008dda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dde:	461a      	mov	r2, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008de4:	e1ee      	b.n	80091c4 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8008de6:	78fa      	ldrb	r2, [r7, #3]
 8008de8:	6879      	ldr	r1, [r7, #4]
 8008dea:	4613      	mov	r3, r2
 8008dec:	011b      	lsls	r3, r3, #4
 8008dee:	1a9b      	subs	r3, r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	440b      	add	r3, r1
 8008df4:	334d      	adds	r3, #77	@ 0x4d
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	2b05      	cmp	r3, #5
 8008dfa:	f040 80c8 	bne.w	8008f8e <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008dfe:	78fa      	ldrb	r2, [r7, #3]
 8008e00:	6879      	ldr	r1, [r7, #4]
 8008e02:	4613      	mov	r3, r2
 8008e04:	011b      	lsls	r3, r3, #4
 8008e06:	1a9b      	subs	r3, r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	440b      	add	r3, r1
 8008e0c:	334d      	adds	r3, #77	@ 0x4d
 8008e0e:	2202      	movs	r2, #2
 8008e10:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008e12:	78fa      	ldrb	r2, [r7, #3]
 8008e14:	6879      	ldr	r1, [r7, #4]
 8008e16:	4613      	mov	r3, r2
 8008e18:	011b      	lsls	r3, r3, #4
 8008e1a:	1a9b      	subs	r3, r3, r2
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	440b      	add	r3, r1
 8008e20:	331b      	adds	r3, #27
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	f040 81ce 	bne.w	80091c6 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8008e2a:	78fa      	ldrb	r2, [r7, #3]
 8008e2c:	6879      	ldr	r1, [r7, #4]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	011b      	lsls	r3, r3, #4
 8008e32:	1a9b      	subs	r3, r3, r2
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	440b      	add	r3, r1
 8008e38:	3326      	adds	r3, #38	@ 0x26
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	2b03      	cmp	r3, #3
 8008e3e:	d16b      	bne.n	8008f18 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8008e40:	78fa      	ldrb	r2, [r7, #3]
 8008e42:	6879      	ldr	r1, [r7, #4]
 8008e44:	4613      	mov	r3, r2
 8008e46:	011b      	lsls	r3, r3, #4
 8008e48:	1a9b      	subs	r3, r3, r2
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	440b      	add	r3, r1
 8008e4e:	3348      	adds	r3, #72	@ 0x48
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	1c59      	adds	r1, r3, #1
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	4613      	mov	r3, r2
 8008e58:	011b      	lsls	r3, r3, #4
 8008e5a:	1a9b      	subs	r3, r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	4403      	add	r3, r0
 8008e60:	3348      	adds	r3, #72	@ 0x48
 8008e62:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8008e64:	78fa      	ldrb	r2, [r7, #3]
 8008e66:	6879      	ldr	r1, [r7, #4]
 8008e68:	4613      	mov	r3, r2
 8008e6a:	011b      	lsls	r3, r3, #4
 8008e6c:	1a9b      	subs	r3, r3, r2
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	440b      	add	r3, r1
 8008e72:	3348      	adds	r3, #72	@ 0x48
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d943      	bls.n	8008f02 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8008e7a:	78fa      	ldrb	r2, [r7, #3]
 8008e7c:	6879      	ldr	r1, [r7, #4]
 8008e7e:	4613      	mov	r3, r2
 8008e80:	011b      	lsls	r3, r3, #4
 8008e82:	1a9b      	subs	r3, r3, r2
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	440b      	add	r3, r1
 8008e88:	3348      	adds	r3, #72	@ 0x48
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8008e8e:	78fa      	ldrb	r2, [r7, #3]
 8008e90:	6879      	ldr	r1, [r7, #4]
 8008e92:	4613      	mov	r3, r2
 8008e94:	011b      	lsls	r3, r3, #4
 8008e96:	1a9b      	subs	r3, r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	440b      	add	r3, r1
 8008e9c:	331b      	adds	r3, #27
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8008ea2:	78fa      	ldrb	r2, [r7, #3]
 8008ea4:	6879      	ldr	r1, [r7, #4]
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	011b      	lsls	r3, r3, #4
 8008eaa:	1a9b      	subs	r3, r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	440b      	add	r3, r1
 8008eb0:	3344      	adds	r3, #68	@ 0x44
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d809      	bhi.n	8008ecc <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8008eb8:	78fa      	ldrb	r2, [r7, #3]
 8008eba:	6879      	ldr	r1, [r7, #4]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	011b      	lsls	r3, r3, #4
 8008ec0:	1a9b      	subs	r3, r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	440b      	add	r3, r1
 8008ec6:	331c      	adds	r3, #28
 8008ec8:	2201      	movs	r2, #1
 8008eca:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008ecc:	78fb      	ldrb	r3, [r7, #3]
 8008ece:	015a      	lsls	r2, r3, #5
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	78fa      	ldrb	r2, [r7, #3]
 8008edc:	0151      	lsls	r1, r2, #5
 8008ede:	693a      	ldr	r2, [r7, #16]
 8008ee0:	440a      	add	r2, r1
 8008ee2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ee6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008eea:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8008eec:	78fa      	ldrb	r2, [r7, #3]
 8008eee:	6879      	ldr	r1, [r7, #4]
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	011b      	lsls	r3, r3, #4
 8008ef4:	1a9b      	subs	r3, r3, r2
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	440b      	add	r3, r1
 8008efa:	334c      	adds	r3, #76	@ 0x4c
 8008efc:	2204      	movs	r2, #4
 8008efe:	701a      	strb	r2, [r3, #0]
 8008f00:	e014      	b.n	8008f2c <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008f02:	78fa      	ldrb	r2, [r7, #3]
 8008f04:	6879      	ldr	r1, [r7, #4]
 8008f06:	4613      	mov	r3, r2
 8008f08:	011b      	lsls	r3, r3, #4
 8008f0a:	1a9b      	subs	r3, r3, r2
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	440b      	add	r3, r1
 8008f10:	334c      	adds	r3, #76	@ 0x4c
 8008f12:	2202      	movs	r2, #2
 8008f14:	701a      	strb	r2, [r3, #0]
 8008f16:	e009      	b.n	8008f2c <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008f18:	78fa      	ldrb	r2, [r7, #3]
 8008f1a:	6879      	ldr	r1, [r7, #4]
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	011b      	lsls	r3, r3, #4
 8008f20:	1a9b      	subs	r3, r3, r2
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	440b      	add	r3, r1
 8008f26:	334c      	adds	r3, #76	@ 0x4c
 8008f28:	2202      	movs	r2, #2
 8008f2a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008f2c:	78fa      	ldrb	r2, [r7, #3]
 8008f2e:	6879      	ldr	r1, [r7, #4]
 8008f30:	4613      	mov	r3, r2
 8008f32:	011b      	lsls	r3, r3, #4
 8008f34:	1a9b      	subs	r3, r3, r2
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	440b      	add	r3, r1
 8008f3a:	3326      	adds	r3, #38	@ 0x26
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00b      	beq.n	8008f5a <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008f42:	78fa      	ldrb	r2, [r7, #3]
 8008f44:	6879      	ldr	r1, [r7, #4]
 8008f46:	4613      	mov	r3, r2
 8008f48:	011b      	lsls	r3, r3, #4
 8008f4a:	1a9b      	subs	r3, r3, r2
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	440b      	add	r3, r1
 8008f50:	3326      	adds	r3, #38	@ 0x26
 8008f52:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	f040 8136 	bne.w	80091c6 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8008f5a:	78fb      	ldrb	r3, [r7, #3]
 8008f5c:	015a      	lsls	r2, r3, #5
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	4413      	add	r3, r2
 8008f62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008f70:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f78:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8008f7a:	78fb      	ldrb	r3, [r7, #3]
 8008f7c:	015a      	lsls	r2, r3, #5
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	4413      	add	r3, r2
 8008f82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f86:	461a      	mov	r2, r3
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6013      	str	r3, [r2, #0]
 8008f8c:	e11b      	b.n	80091c6 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8008f8e:	78fa      	ldrb	r2, [r7, #3]
 8008f90:	6879      	ldr	r1, [r7, #4]
 8008f92:	4613      	mov	r3, r2
 8008f94:	011b      	lsls	r3, r3, #4
 8008f96:	1a9b      	subs	r3, r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	440b      	add	r3, r1
 8008f9c:	334d      	adds	r3, #77	@ 0x4d
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	2b03      	cmp	r3, #3
 8008fa2:	f040 8081 	bne.w	80090a8 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008fa6:	78fa      	ldrb	r2, [r7, #3]
 8008fa8:	6879      	ldr	r1, [r7, #4]
 8008faa:	4613      	mov	r3, r2
 8008fac:	011b      	lsls	r3, r3, #4
 8008fae:	1a9b      	subs	r3, r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	440b      	add	r3, r1
 8008fb4:	334d      	adds	r3, #77	@ 0x4d
 8008fb6:	2202      	movs	r2, #2
 8008fb8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008fba:	78fa      	ldrb	r2, [r7, #3]
 8008fbc:	6879      	ldr	r1, [r7, #4]
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	011b      	lsls	r3, r3, #4
 8008fc2:	1a9b      	subs	r3, r3, r2
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	440b      	add	r3, r1
 8008fc8:	331b      	adds	r3, #27
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	f040 80fa 	bne.w	80091c6 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008fd2:	78fa      	ldrb	r2, [r7, #3]
 8008fd4:	6879      	ldr	r1, [r7, #4]
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	011b      	lsls	r3, r3, #4
 8008fda:	1a9b      	subs	r3, r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	440b      	add	r3, r1
 8008fe0:	334c      	adds	r3, #76	@ 0x4c
 8008fe2:	2202      	movs	r2, #2
 8008fe4:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008fe6:	78fb      	ldrb	r3, [r7, #3]
 8008fe8:	015a      	lsls	r2, r3, #5
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	4413      	add	r3, r2
 8008fee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	78fa      	ldrb	r2, [r7, #3]
 8008ff6:	0151      	lsls	r1, r2, #5
 8008ff8:	693a      	ldr	r2, [r7, #16]
 8008ffa:	440a      	add	r2, r1
 8008ffc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009004:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8009006:	78fb      	ldrb	r3, [r7, #3]
 8009008:	015a      	lsls	r2, r3, #5
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	4413      	add	r3, r2
 800900e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	78fa      	ldrb	r2, [r7, #3]
 8009016:	0151      	lsls	r1, r2, #5
 8009018:	693a      	ldr	r2, [r7, #16]
 800901a:	440a      	add	r2, r1
 800901c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009020:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009024:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8009026:	78fb      	ldrb	r3, [r7, #3]
 8009028:	015a      	lsls	r2, r3, #5
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	4413      	add	r3, r2
 800902e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	78fa      	ldrb	r2, [r7, #3]
 8009036:	0151      	lsls	r1, r2, #5
 8009038:	693a      	ldr	r2, [r7, #16]
 800903a:	440a      	add	r2, r1
 800903c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009040:	f023 0320 	bic.w	r3, r3, #32
 8009044:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009046:	78fa      	ldrb	r2, [r7, #3]
 8009048:	6879      	ldr	r1, [r7, #4]
 800904a:	4613      	mov	r3, r2
 800904c:	011b      	lsls	r3, r3, #4
 800904e:	1a9b      	subs	r3, r3, r2
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	440b      	add	r3, r1
 8009054:	3326      	adds	r3, #38	@ 0x26
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00b      	beq.n	8009074 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800905c:	78fa      	ldrb	r2, [r7, #3]
 800905e:	6879      	ldr	r1, [r7, #4]
 8009060:	4613      	mov	r3, r2
 8009062:	011b      	lsls	r3, r3, #4
 8009064:	1a9b      	subs	r3, r3, r2
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	440b      	add	r3, r1
 800906a:	3326      	adds	r3, #38	@ 0x26
 800906c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800906e:	2b02      	cmp	r3, #2
 8009070:	f040 80a9 	bne.w	80091c6 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8009074:	78fb      	ldrb	r3, [r7, #3]
 8009076:	015a      	lsls	r2, r3, #5
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	4413      	add	r3, r2
 800907c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800908a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009092:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8009094:	78fb      	ldrb	r3, [r7, #3]
 8009096:	015a      	lsls	r2, r3, #5
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	4413      	add	r3, r2
 800909c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090a0:	461a      	mov	r2, r3
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6013      	str	r3, [r2, #0]
 80090a6:	e08e      	b.n	80091c6 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80090a8:	78fa      	ldrb	r2, [r7, #3]
 80090aa:	6879      	ldr	r1, [r7, #4]
 80090ac:	4613      	mov	r3, r2
 80090ae:	011b      	lsls	r3, r3, #4
 80090b0:	1a9b      	subs	r3, r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	440b      	add	r3, r1
 80090b6:	334d      	adds	r3, #77	@ 0x4d
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	2b04      	cmp	r3, #4
 80090bc:	d143      	bne.n	8009146 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80090be:	78fa      	ldrb	r2, [r7, #3]
 80090c0:	6879      	ldr	r1, [r7, #4]
 80090c2:	4613      	mov	r3, r2
 80090c4:	011b      	lsls	r3, r3, #4
 80090c6:	1a9b      	subs	r3, r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	440b      	add	r3, r1
 80090cc:	334d      	adds	r3, #77	@ 0x4d
 80090ce:	2202      	movs	r2, #2
 80090d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80090d2:	78fa      	ldrb	r2, [r7, #3]
 80090d4:	6879      	ldr	r1, [r7, #4]
 80090d6:	4613      	mov	r3, r2
 80090d8:	011b      	lsls	r3, r3, #4
 80090da:	1a9b      	subs	r3, r3, r2
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	440b      	add	r3, r1
 80090e0:	334c      	adds	r3, #76	@ 0x4c
 80090e2:	2202      	movs	r2, #2
 80090e4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80090e6:	78fa      	ldrb	r2, [r7, #3]
 80090e8:	6879      	ldr	r1, [r7, #4]
 80090ea:	4613      	mov	r3, r2
 80090ec:	011b      	lsls	r3, r3, #4
 80090ee:	1a9b      	subs	r3, r3, r2
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	440b      	add	r3, r1
 80090f4:	3326      	adds	r3, #38	@ 0x26
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d00a      	beq.n	8009112 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80090fc:	78fa      	ldrb	r2, [r7, #3]
 80090fe:	6879      	ldr	r1, [r7, #4]
 8009100:	4613      	mov	r3, r2
 8009102:	011b      	lsls	r3, r3, #4
 8009104:	1a9b      	subs	r3, r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	440b      	add	r3, r1
 800910a:	3326      	adds	r3, #38	@ 0x26
 800910c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800910e:	2b02      	cmp	r3, #2
 8009110:	d159      	bne.n	80091c6 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009112:	78fb      	ldrb	r3, [r7, #3]
 8009114:	015a      	lsls	r2, r3, #5
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	4413      	add	r3, r2
 800911a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009128:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009130:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009132:	78fb      	ldrb	r3, [r7, #3]
 8009134:	015a      	lsls	r2, r3, #5
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	4413      	add	r3, r2
 800913a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800913e:	461a      	mov	r2, r3
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6013      	str	r3, [r2, #0]
 8009144:	e03f      	b.n	80091c6 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8009146:	78fa      	ldrb	r2, [r7, #3]
 8009148:	6879      	ldr	r1, [r7, #4]
 800914a:	4613      	mov	r3, r2
 800914c:	011b      	lsls	r3, r3, #4
 800914e:	1a9b      	subs	r3, r3, r2
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	440b      	add	r3, r1
 8009154:	334d      	adds	r3, #77	@ 0x4d
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	2b08      	cmp	r3, #8
 800915a:	d126      	bne.n	80091aa <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800915c:	78fa      	ldrb	r2, [r7, #3]
 800915e:	6879      	ldr	r1, [r7, #4]
 8009160:	4613      	mov	r3, r2
 8009162:	011b      	lsls	r3, r3, #4
 8009164:	1a9b      	subs	r3, r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	440b      	add	r3, r1
 800916a:	334d      	adds	r3, #77	@ 0x4d
 800916c:	2202      	movs	r2, #2
 800916e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8009170:	78fa      	ldrb	r2, [r7, #3]
 8009172:	6879      	ldr	r1, [r7, #4]
 8009174:	4613      	mov	r3, r2
 8009176:	011b      	lsls	r3, r3, #4
 8009178:	1a9b      	subs	r3, r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	440b      	add	r3, r1
 800917e:	3344      	adds	r3, #68	@ 0x44
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	1c59      	adds	r1, r3, #1
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	4613      	mov	r3, r2
 8009188:	011b      	lsls	r3, r3, #4
 800918a:	1a9b      	subs	r3, r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	4403      	add	r3, r0
 8009190:	3344      	adds	r3, #68	@ 0x44
 8009192:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8009194:	78fa      	ldrb	r2, [r7, #3]
 8009196:	6879      	ldr	r1, [r7, #4]
 8009198:	4613      	mov	r3, r2
 800919a:	011b      	lsls	r3, r3, #4
 800919c:	1a9b      	subs	r3, r3, r2
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	440b      	add	r3, r1
 80091a2:	334c      	adds	r3, #76	@ 0x4c
 80091a4:	2204      	movs	r2, #4
 80091a6:	701a      	strb	r2, [r3, #0]
 80091a8:	e00d      	b.n	80091c6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80091aa:	78fa      	ldrb	r2, [r7, #3]
 80091ac:	6879      	ldr	r1, [r7, #4]
 80091ae:	4613      	mov	r3, r2
 80091b0:	011b      	lsls	r3, r3, #4
 80091b2:	1a9b      	subs	r3, r3, r2
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	440b      	add	r3, r1
 80091b8:	334d      	adds	r3, #77	@ 0x4d
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	2b02      	cmp	r3, #2
 80091be:	f000 8100 	beq.w	80093c2 <HCD_HC_IN_IRQHandler+0xcca>
 80091c2:	e000      	b.n	80091c6 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80091c4:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80091c6:	78fa      	ldrb	r2, [r7, #3]
 80091c8:	6879      	ldr	r1, [r7, #4]
 80091ca:	4613      	mov	r3, r2
 80091cc:	011b      	lsls	r3, r3, #4
 80091ce:	1a9b      	subs	r3, r3, r2
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	440b      	add	r3, r1
 80091d4:	334c      	adds	r3, #76	@ 0x4c
 80091d6:	781a      	ldrb	r2, [r3, #0]
 80091d8:	78fb      	ldrb	r3, [r7, #3]
 80091da:	4619      	mov	r1, r3
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f00e f9c3 	bl	8017568 <HAL_HCD_HC_NotifyURBChange_Callback>
 80091e2:	e0ef      	b.n	80093c4 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	78fa      	ldrb	r2, [r7, #3]
 80091ea:	4611      	mov	r1, r2
 80091ec:	4618      	mov	r0, r3
 80091ee:	f008 fa94 	bl	801171a <USB_ReadChInterrupts>
 80091f2:	4603      	mov	r3, r0
 80091f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091f8:	2b40      	cmp	r3, #64	@ 0x40
 80091fa:	d12f      	bne.n	800925c <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80091fc:	78fb      	ldrb	r3, [r7, #3]
 80091fe:	015a      	lsls	r2, r3, #5
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	4413      	add	r3, r2
 8009204:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009208:	461a      	mov	r2, r3
 800920a:	2340      	movs	r3, #64	@ 0x40
 800920c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800920e:	78fa      	ldrb	r2, [r7, #3]
 8009210:	6879      	ldr	r1, [r7, #4]
 8009212:	4613      	mov	r3, r2
 8009214:	011b      	lsls	r3, r3, #4
 8009216:	1a9b      	subs	r3, r3, r2
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	440b      	add	r3, r1
 800921c:	334d      	adds	r3, #77	@ 0x4d
 800921e:	2205      	movs	r2, #5
 8009220:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8009222:	78fa      	ldrb	r2, [r7, #3]
 8009224:	6879      	ldr	r1, [r7, #4]
 8009226:	4613      	mov	r3, r2
 8009228:	011b      	lsls	r3, r3, #4
 800922a:	1a9b      	subs	r3, r3, r2
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	440b      	add	r3, r1
 8009230:	331a      	adds	r3, #26
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d109      	bne.n	800924c <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8009238:	78fa      	ldrb	r2, [r7, #3]
 800923a:	6879      	ldr	r1, [r7, #4]
 800923c:	4613      	mov	r3, r2
 800923e:	011b      	lsls	r3, r3, #4
 8009240:	1a9b      	subs	r3, r3, r2
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	440b      	add	r3, r1
 8009246:	3344      	adds	r3, #68	@ 0x44
 8009248:	2200      	movs	r2, #0
 800924a:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	78fa      	ldrb	r2, [r7, #3]
 8009252:	4611      	mov	r1, r2
 8009254:	4618      	mov	r0, r3
 8009256:	f008 fadd 	bl	8011814 <USB_HC_Halt>
 800925a:	e0b3      	b.n	80093c4 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	78fa      	ldrb	r2, [r7, #3]
 8009262:	4611      	mov	r1, r2
 8009264:	4618      	mov	r0, r3
 8009266:	f008 fa58 	bl	801171a <USB_ReadChInterrupts>
 800926a:	4603      	mov	r3, r0
 800926c:	f003 0310 	and.w	r3, r3, #16
 8009270:	2b10      	cmp	r3, #16
 8009272:	f040 80a7 	bne.w	80093c4 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8009276:	78fa      	ldrb	r2, [r7, #3]
 8009278:	6879      	ldr	r1, [r7, #4]
 800927a:	4613      	mov	r3, r2
 800927c:	011b      	lsls	r3, r3, #4
 800927e:	1a9b      	subs	r3, r3, r2
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	440b      	add	r3, r1
 8009284:	3326      	adds	r3, #38	@ 0x26
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	2b03      	cmp	r3, #3
 800928a:	d11b      	bne.n	80092c4 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800928c:	78fa      	ldrb	r2, [r7, #3]
 800928e:	6879      	ldr	r1, [r7, #4]
 8009290:	4613      	mov	r3, r2
 8009292:	011b      	lsls	r3, r3, #4
 8009294:	1a9b      	subs	r3, r3, r2
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	440b      	add	r3, r1
 800929a:	3344      	adds	r3, #68	@ 0x44
 800929c:	2200      	movs	r2, #0
 800929e:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80092a0:	78fa      	ldrb	r2, [r7, #3]
 80092a2:	6879      	ldr	r1, [r7, #4]
 80092a4:	4613      	mov	r3, r2
 80092a6:	011b      	lsls	r3, r3, #4
 80092a8:	1a9b      	subs	r3, r3, r2
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	440b      	add	r3, r1
 80092ae:	334d      	adds	r3, #77	@ 0x4d
 80092b0:	2204      	movs	r2, #4
 80092b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	78fa      	ldrb	r2, [r7, #3]
 80092ba:	4611      	mov	r1, r2
 80092bc:	4618      	mov	r0, r3
 80092be:	f008 faa9 	bl	8011814 <USB_HC_Halt>
 80092c2:	e03f      	b.n	8009344 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80092c4:	78fa      	ldrb	r2, [r7, #3]
 80092c6:	6879      	ldr	r1, [r7, #4]
 80092c8:	4613      	mov	r3, r2
 80092ca:	011b      	lsls	r3, r3, #4
 80092cc:	1a9b      	subs	r3, r3, r2
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	440b      	add	r3, r1
 80092d2:	3326      	adds	r3, #38	@ 0x26
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00a      	beq.n	80092f0 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80092da:	78fa      	ldrb	r2, [r7, #3]
 80092dc:	6879      	ldr	r1, [r7, #4]
 80092de:	4613      	mov	r3, r2
 80092e0:	011b      	lsls	r3, r3, #4
 80092e2:	1a9b      	subs	r3, r3, r2
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	440b      	add	r3, r1
 80092e8:	3326      	adds	r3, #38	@ 0x26
 80092ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d129      	bne.n	8009344 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80092f0:	78fa      	ldrb	r2, [r7, #3]
 80092f2:	6879      	ldr	r1, [r7, #4]
 80092f4:	4613      	mov	r3, r2
 80092f6:	011b      	lsls	r3, r3, #4
 80092f8:	1a9b      	subs	r3, r3, r2
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	440b      	add	r3, r1
 80092fe:	3344      	adds	r3, #68	@ 0x44
 8009300:	2200      	movs	r2, #0
 8009302:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	799b      	ldrb	r3, [r3, #6]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00a      	beq.n	8009322 <HCD_HC_IN_IRQHandler+0xc2a>
 800930c:	78fa      	ldrb	r2, [r7, #3]
 800930e:	6879      	ldr	r1, [r7, #4]
 8009310:	4613      	mov	r3, r2
 8009312:	011b      	lsls	r3, r3, #4
 8009314:	1a9b      	subs	r3, r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	440b      	add	r3, r1
 800931a:	331b      	adds	r3, #27
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	2b01      	cmp	r3, #1
 8009320:	d110      	bne.n	8009344 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8009322:	78fa      	ldrb	r2, [r7, #3]
 8009324:	6879      	ldr	r1, [r7, #4]
 8009326:	4613      	mov	r3, r2
 8009328:	011b      	lsls	r3, r3, #4
 800932a:	1a9b      	subs	r3, r3, r2
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	440b      	add	r3, r1
 8009330:	334d      	adds	r3, #77	@ 0x4d
 8009332:	2204      	movs	r2, #4
 8009334:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	78fa      	ldrb	r2, [r7, #3]
 800933c:	4611      	mov	r1, r2
 800933e:	4618      	mov	r0, r3
 8009340:	f008 fa68 	bl	8011814 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8009344:	78fa      	ldrb	r2, [r7, #3]
 8009346:	6879      	ldr	r1, [r7, #4]
 8009348:	4613      	mov	r3, r2
 800934a:	011b      	lsls	r3, r3, #4
 800934c:	1a9b      	subs	r3, r3, r2
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	440b      	add	r3, r1
 8009352:	331b      	adds	r3, #27
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d129      	bne.n	80093ae <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800935a:	78fa      	ldrb	r2, [r7, #3]
 800935c:	6879      	ldr	r1, [r7, #4]
 800935e:	4613      	mov	r3, r2
 8009360:	011b      	lsls	r3, r3, #4
 8009362:	1a9b      	subs	r3, r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	440b      	add	r3, r1
 8009368:	331b      	adds	r3, #27
 800936a:	2200      	movs	r2, #0
 800936c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800936e:	78fb      	ldrb	r3, [r7, #3]
 8009370:	015a      	lsls	r2, r3, #5
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	4413      	add	r3, r2
 8009376:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	78fa      	ldrb	r2, [r7, #3]
 800937e:	0151      	lsls	r1, r2, #5
 8009380:	693a      	ldr	r2, [r7, #16]
 8009382:	440a      	add	r2, r1
 8009384:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009388:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800938c:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800938e:	78fb      	ldrb	r3, [r7, #3]
 8009390:	015a      	lsls	r2, r3, #5
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	4413      	add	r3, r2
 8009396:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	78fa      	ldrb	r2, [r7, #3]
 800939e:	0151      	lsls	r1, r2, #5
 80093a0:	693a      	ldr	r2, [r7, #16]
 80093a2:	440a      	add	r2, r1
 80093a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80093a8:	f043 0320 	orr.w	r3, r3, #32
 80093ac:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80093ae:	78fb      	ldrb	r3, [r7, #3]
 80093b0:	015a      	lsls	r2, r3, #5
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	4413      	add	r3, r2
 80093b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093ba:	461a      	mov	r2, r3
 80093bc:	2310      	movs	r3, #16
 80093be:	6093      	str	r3, [r2, #8]
 80093c0:	e000      	b.n	80093c4 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80093c2:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80093c4:	3718      	adds	r7, #24
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b086      	sub	sp, #24
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
 80093d2:	460b      	mov	r3, r1
 80093d4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	78fa      	ldrb	r2, [r7, #3]
 80093e6:	4611      	mov	r1, r2
 80093e8:	4618      	mov	r0, r3
 80093ea:	f008 f996 	bl	801171a <USB_ReadChInterrupts>
 80093ee:	4603      	mov	r3, r0
 80093f0:	f003 0304 	and.w	r3, r3, #4
 80093f4:	2b04      	cmp	r3, #4
 80093f6:	d11b      	bne.n	8009430 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80093f8:	78fb      	ldrb	r3, [r7, #3]
 80093fa:	015a      	lsls	r2, r3, #5
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	4413      	add	r3, r2
 8009400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009404:	461a      	mov	r2, r3
 8009406:	2304      	movs	r3, #4
 8009408:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800940a:	78fa      	ldrb	r2, [r7, #3]
 800940c:	6879      	ldr	r1, [r7, #4]
 800940e:	4613      	mov	r3, r2
 8009410:	011b      	lsls	r3, r3, #4
 8009412:	1a9b      	subs	r3, r3, r2
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	440b      	add	r3, r1
 8009418:	334d      	adds	r3, #77	@ 0x4d
 800941a:	2207      	movs	r2, #7
 800941c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	78fa      	ldrb	r2, [r7, #3]
 8009424:	4611      	mov	r1, r2
 8009426:	4618      	mov	r0, r3
 8009428:	f008 f9f4 	bl	8011814 <USB_HC_Halt>
 800942c:	f000 bc89 	b.w	8009d42 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	78fa      	ldrb	r2, [r7, #3]
 8009436:	4611      	mov	r1, r2
 8009438:	4618      	mov	r0, r3
 800943a:	f008 f96e 	bl	801171a <USB_ReadChInterrupts>
 800943e:	4603      	mov	r3, r0
 8009440:	f003 0320 	and.w	r3, r3, #32
 8009444:	2b20      	cmp	r3, #32
 8009446:	f040 8082 	bne.w	800954e <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800944a:	78fb      	ldrb	r3, [r7, #3]
 800944c:	015a      	lsls	r2, r3, #5
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	4413      	add	r3, r2
 8009452:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009456:	461a      	mov	r2, r3
 8009458:	2320      	movs	r3, #32
 800945a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800945c:	78fa      	ldrb	r2, [r7, #3]
 800945e:	6879      	ldr	r1, [r7, #4]
 8009460:	4613      	mov	r3, r2
 8009462:	011b      	lsls	r3, r3, #4
 8009464:	1a9b      	subs	r3, r3, r2
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	440b      	add	r3, r1
 800946a:	3319      	adds	r3, #25
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	2b01      	cmp	r3, #1
 8009470:	d124      	bne.n	80094bc <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8009472:	78fa      	ldrb	r2, [r7, #3]
 8009474:	6879      	ldr	r1, [r7, #4]
 8009476:	4613      	mov	r3, r2
 8009478:	011b      	lsls	r3, r3, #4
 800947a:	1a9b      	subs	r3, r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	440b      	add	r3, r1
 8009480:	3319      	adds	r3, #25
 8009482:	2200      	movs	r2, #0
 8009484:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009486:	78fa      	ldrb	r2, [r7, #3]
 8009488:	6879      	ldr	r1, [r7, #4]
 800948a:	4613      	mov	r3, r2
 800948c:	011b      	lsls	r3, r3, #4
 800948e:	1a9b      	subs	r3, r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	440b      	add	r3, r1
 8009494:	334c      	adds	r3, #76	@ 0x4c
 8009496:	2202      	movs	r2, #2
 8009498:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800949a:	78fa      	ldrb	r2, [r7, #3]
 800949c:	6879      	ldr	r1, [r7, #4]
 800949e:	4613      	mov	r3, r2
 80094a0:	011b      	lsls	r3, r3, #4
 80094a2:	1a9b      	subs	r3, r3, r2
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	440b      	add	r3, r1
 80094a8:	334d      	adds	r3, #77	@ 0x4d
 80094aa:	2203      	movs	r2, #3
 80094ac:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	78fa      	ldrb	r2, [r7, #3]
 80094b4:	4611      	mov	r1, r2
 80094b6:	4618      	mov	r0, r3
 80094b8:	f008 f9ac 	bl	8011814 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80094bc:	78fa      	ldrb	r2, [r7, #3]
 80094be:	6879      	ldr	r1, [r7, #4]
 80094c0:	4613      	mov	r3, r2
 80094c2:	011b      	lsls	r3, r3, #4
 80094c4:	1a9b      	subs	r3, r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	440b      	add	r3, r1
 80094ca:	331a      	adds	r3, #26
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	f040 8437 	bne.w	8009d42 <HCD_HC_OUT_IRQHandler+0x978>
 80094d4:	78fa      	ldrb	r2, [r7, #3]
 80094d6:	6879      	ldr	r1, [r7, #4]
 80094d8:	4613      	mov	r3, r2
 80094da:	011b      	lsls	r3, r3, #4
 80094dc:	1a9b      	subs	r3, r3, r2
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	440b      	add	r3, r1
 80094e2:	331b      	adds	r3, #27
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	f040 842b 	bne.w	8009d42 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80094ec:	78fa      	ldrb	r2, [r7, #3]
 80094ee:	6879      	ldr	r1, [r7, #4]
 80094f0:	4613      	mov	r3, r2
 80094f2:	011b      	lsls	r3, r3, #4
 80094f4:	1a9b      	subs	r3, r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	440b      	add	r3, r1
 80094fa:	3326      	adds	r3, #38	@ 0x26
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d009      	beq.n	8009516 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8009502:	78fa      	ldrb	r2, [r7, #3]
 8009504:	6879      	ldr	r1, [r7, #4]
 8009506:	4613      	mov	r3, r2
 8009508:	011b      	lsls	r3, r3, #4
 800950a:	1a9b      	subs	r3, r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	440b      	add	r3, r1
 8009510:	331b      	adds	r3, #27
 8009512:	2201      	movs	r2, #1
 8009514:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8009516:	78fa      	ldrb	r2, [r7, #3]
 8009518:	6879      	ldr	r1, [r7, #4]
 800951a:	4613      	mov	r3, r2
 800951c:	011b      	lsls	r3, r3, #4
 800951e:	1a9b      	subs	r3, r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	440b      	add	r3, r1
 8009524:	334d      	adds	r3, #77	@ 0x4d
 8009526:	2203      	movs	r2, #3
 8009528:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	78fa      	ldrb	r2, [r7, #3]
 8009530:	4611      	mov	r1, r2
 8009532:	4618      	mov	r0, r3
 8009534:	f008 f96e 	bl	8011814 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8009538:	78fa      	ldrb	r2, [r7, #3]
 800953a:	6879      	ldr	r1, [r7, #4]
 800953c:	4613      	mov	r3, r2
 800953e:	011b      	lsls	r3, r3, #4
 8009540:	1a9b      	subs	r3, r3, r2
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	440b      	add	r3, r1
 8009546:	3344      	adds	r3, #68	@ 0x44
 8009548:	2200      	movs	r2, #0
 800954a:	601a      	str	r2, [r3, #0]
 800954c:	e3f9      	b.n	8009d42 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	78fa      	ldrb	r2, [r7, #3]
 8009554:	4611      	mov	r1, r2
 8009556:	4618      	mov	r0, r3
 8009558:	f008 f8df 	bl	801171a <USB_ReadChInterrupts>
 800955c:	4603      	mov	r3, r0
 800955e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009562:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009566:	d111      	bne.n	800958c <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8009568:	78fb      	ldrb	r3, [r7, #3]
 800956a:	015a      	lsls	r2, r3, #5
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	4413      	add	r3, r2
 8009570:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009574:	461a      	mov	r2, r3
 8009576:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800957a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	78fa      	ldrb	r2, [r7, #3]
 8009582:	4611      	mov	r1, r2
 8009584:	4618      	mov	r0, r3
 8009586:	f008 f945 	bl	8011814 <USB_HC_Halt>
 800958a:	e3da      	b.n	8009d42 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	78fa      	ldrb	r2, [r7, #3]
 8009592:	4611      	mov	r1, r2
 8009594:	4618      	mov	r0, r3
 8009596:	f008 f8c0 	bl	801171a <USB_ReadChInterrupts>
 800959a:	4603      	mov	r3, r0
 800959c:	f003 0301 	and.w	r3, r3, #1
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d168      	bne.n	8009676 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80095a4:	78fa      	ldrb	r2, [r7, #3]
 80095a6:	6879      	ldr	r1, [r7, #4]
 80095a8:	4613      	mov	r3, r2
 80095aa:	011b      	lsls	r3, r3, #4
 80095ac:	1a9b      	subs	r3, r3, r2
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	440b      	add	r3, r1
 80095b2:	3344      	adds	r3, #68	@ 0x44
 80095b4:	2200      	movs	r2, #0
 80095b6:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	78fa      	ldrb	r2, [r7, #3]
 80095be:	4611      	mov	r1, r2
 80095c0:	4618      	mov	r0, r3
 80095c2:	f008 f8aa 	bl	801171a <USB_ReadChInterrupts>
 80095c6:	4603      	mov	r3, r0
 80095c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095cc:	2b40      	cmp	r3, #64	@ 0x40
 80095ce:	d112      	bne.n	80095f6 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80095d0:	78fa      	ldrb	r2, [r7, #3]
 80095d2:	6879      	ldr	r1, [r7, #4]
 80095d4:	4613      	mov	r3, r2
 80095d6:	011b      	lsls	r3, r3, #4
 80095d8:	1a9b      	subs	r3, r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	440b      	add	r3, r1
 80095de:	3319      	adds	r3, #25
 80095e0:	2201      	movs	r2, #1
 80095e2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80095e4:	78fb      	ldrb	r3, [r7, #3]
 80095e6:	015a      	lsls	r2, r3, #5
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	4413      	add	r3, r2
 80095ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095f0:	461a      	mov	r2, r3
 80095f2:	2340      	movs	r3, #64	@ 0x40
 80095f4:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80095f6:	78fa      	ldrb	r2, [r7, #3]
 80095f8:	6879      	ldr	r1, [r7, #4]
 80095fa:	4613      	mov	r3, r2
 80095fc:	011b      	lsls	r3, r3, #4
 80095fe:	1a9b      	subs	r3, r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	440b      	add	r3, r1
 8009604:	331b      	adds	r3, #27
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d019      	beq.n	8009640 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800960c:	78fa      	ldrb	r2, [r7, #3]
 800960e:	6879      	ldr	r1, [r7, #4]
 8009610:	4613      	mov	r3, r2
 8009612:	011b      	lsls	r3, r3, #4
 8009614:	1a9b      	subs	r3, r3, r2
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	440b      	add	r3, r1
 800961a:	331b      	adds	r3, #27
 800961c:	2200      	movs	r2, #0
 800961e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8009620:	78fb      	ldrb	r3, [r7, #3]
 8009622:	015a      	lsls	r2, r3, #5
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	4413      	add	r3, r2
 8009628:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	78fa      	ldrb	r2, [r7, #3]
 8009630:	0151      	lsls	r1, r2, #5
 8009632:	693a      	ldr	r2, [r7, #16]
 8009634:	440a      	add	r2, r1
 8009636:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800963a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800963e:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8009640:	78fb      	ldrb	r3, [r7, #3]
 8009642:	015a      	lsls	r2, r3, #5
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	4413      	add	r3, r2
 8009648:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800964c:	461a      	mov	r2, r3
 800964e:	2301      	movs	r3, #1
 8009650:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8009652:	78fa      	ldrb	r2, [r7, #3]
 8009654:	6879      	ldr	r1, [r7, #4]
 8009656:	4613      	mov	r3, r2
 8009658:	011b      	lsls	r3, r3, #4
 800965a:	1a9b      	subs	r3, r3, r2
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	440b      	add	r3, r1
 8009660:	334d      	adds	r3, #77	@ 0x4d
 8009662:	2201      	movs	r2, #1
 8009664:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	78fa      	ldrb	r2, [r7, #3]
 800966c:	4611      	mov	r1, r2
 800966e:	4618      	mov	r0, r3
 8009670:	f008 f8d0 	bl	8011814 <USB_HC_Halt>
 8009674:	e365      	b.n	8009d42 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	78fa      	ldrb	r2, [r7, #3]
 800967c:	4611      	mov	r1, r2
 800967e:	4618      	mov	r0, r3
 8009680:	f008 f84b 	bl	801171a <USB_ReadChInterrupts>
 8009684:	4603      	mov	r3, r0
 8009686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800968a:	2b40      	cmp	r3, #64	@ 0x40
 800968c:	d139      	bne.n	8009702 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800968e:	78fa      	ldrb	r2, [r7, #3]
 8009690:	6879      	ldr	r1, [r7, #4]
 8009692:	4613      	mov	r3, r2
 8009694:	011b      	lsls	r3, r3, #4
 8009696:	1a9b      	subs	r3, r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	440b      	add	r3, r1
 800969c:	334d      	adds	r3, #77	@ 0x4d
 800969e:	2205      	movs	r2, #5
 80096a0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80096a2:	78fa      	ldrb	r2, [r7, #3]
 80096a4:	6879      	ldr	r1, [r7, #4]
 80096a6:	4613      	mov	r3, r2
 80096a8:	011b      	lsls	r3, r3, #4
 80096aa:	1a9b      	subs	r3, r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	440b      	add	r3, r1
 80096b0:	331a      	adds	r3, #26
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d109      	bne.n	80096cc <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80096b8:	78fa      	ldrb	r2, [r7, #3]
 80096ba:	6879      	ldr	r1, [r7, #4]
 80096bc:	4613      	mov	r3, r2
 80096be:	011b      	lsls	r3, r3, #4
 80096c0:	1a9b      	subs	r3, r3, r2
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	440b      	add	r3, r1
 80096c6:	3319      	adds	r3, #25
 80096c8:	2201      	movs	r2, #1
 80096ca:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80096cc:	78fa      	ldrb	r2, [r7, #3]
 80096ce:	6879      	ldr	r1, [r7, #4]
 80096d0:	4613      	mov	r3, r2
 80096d2:	011b      	lsls	r3, r3, #4
 80096d4:	1a9b      	subs	r3, r3, r2
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	440b      	add	r3, r1
 80096da:	3344      	adds	r3, #68	@ 0x44
 80096dc:	2200      	movs	r2, #0
 80096de:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	78fa      	ldrb	r2, [r7, #3]
 80096e6:	4611      	mov	r1, r2
 80096e8:	4618      	mov	r0, r3
 80096ea:	f008 f893 	bl	8011814 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80096ee:	78fb      	ldrb	r3, [r7, #3]
 80096f0:	015a      	lsls	r2, r3, #5
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	4413      	add	r3, r2
 80096f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096fa:	461a      	mov	r2, r3
 80096fc:	2340      	movs	r3, #64	@ 0x40
 80096fe:	6093      	str	r3, [r2, #8]
 8009700:	e31f      	b.n	8009d42 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	78fa      	ldrb	r2, [r7, #3]
 8009708:	4611      	mov	r1, r2
 800970a:	4618      	mov	r0, r3
 800970c:	f008 f805 	bl	801171a <USB_ReadChInterrupts>
 8009710:	4603      	mov	r3, r0
 8009712:	f003 0308 	and.w	r3, r3, #8
 8009716:	2b08      	cmp	r3, #8
 8009718:	d11a      	bne.n	8009750 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800971a:	78fb      	ldrb	r3, [r7, #3]
 800971c:	015a      	lsls	r2, r3, #5
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	4413      	add	r3, r2
 8009722:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009726:	461a      	mov	r2, r3
 8009728:	2308      	movs	r3, #8
 800972a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800972c:	78fa      	ldrb	r2, [r7, #3]
 800972e:	6879      	ldr	r1, [r7, #4]
 8009730:	4613      	mov	r3, r2
 8009732:	011b      	lsls	r3, r3, #4
 8009734:	1a9b      	subs	r3, r3, r2
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	440b      	add	r3, r1
 800973a:	334d      	adds	r3, #77	@ 0x4d
 800973c:	2206      	movs	r2, #6
 800973e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	78fa      	ldrb	r2, [r7, #3]
 8009746:	4611      	mov	r1, r2
 8009748:	4618      	mov	r0, r3
 800974a:	f008 f863 	bl	8011814 <USB_HC_Halt>
 800974e:	e2f8      	b.n	8009d42 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	78fa      	ldrb	r2, [r7, #3]
 8009756:	4611      	mov	r1, r2
 8009758:	4618      	mov	r0, r3
 800975a:	f007 ffde 	bl	801171a <USB_ReadChInterrupts>
 800975e:	4603      	mov	r3, r0
 8009760:	f003 0310 	and.w	r3, r3, #16
 8009764:	2b10      	cmp	r3, #16
 8009766:	d144      	bne.n	80097f2 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8009768:	78fa      	ldrb	r2, [r7, #3]
 800976a:	6879      	ldr	r1, [r7, #4]
 800976c:	4613      	mov	r3, r2
 800976e:	011b      	lsls	r3, r3, #4
 8009770:	1a9b      	subs	r3, r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	440b      	add	r3, r1
 8009776:	3344      	adds	r3, #68	@ 0x44
 8009778:	2200      	movs	r2, #0
 800977a:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800977c:	78fa      	ldrb	r2, [r7, #3]
 800977e:	6879      	ldr	r1, [r7, #4]
 8009780:	4613      	mov	r3, r2
 8009782:	011b      	lsls	r3, r3, #4
 8009784:	1a9b      	subs	r3, r3, r2
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	440b      	add	r3, r1
 800978a:	334d      	adds	r3, #77	@ 0x4d
 800978c:	2204      	movs	r2, #4
 800978e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8009790:	78fa      	ldrb	r2, [r7, #3]
 8009792:	6879      	ldr	r1, [r7, #4]
 8009794:	4613      	mov	r3, r2
 8009796:	011b      	lsls	r3, r3, #4
 8009798:	1a9b      	subs	r3, r3, r2
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	440b      	add	r3, r1
 800979e:	3319      	adds	r3, #25
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d114      	bne.n	80097d0 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80097a6:	78fa      	ldrb	r2, [r7, #3]
 80097a8:	6879      	ldr	r1, [r7, #4]
 80097aa:	4613      	mov	r3, r2
 80097ac:	011b      	lsls	r3, r3, #4
 80097ae:	1a9b      	subs	r3, r3, r2
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	440b      	add	r3, r1
 80097b4:	3318      	adds	r3, #24
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d109      	bne.n	80097d0 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80097bc:	78fa      	ldrb	r2, [r7, #3]
 80097be:	6879      	ldr	r1, [r7, #4]
 80097c0:	4613      	mov	r3, r2
 80097c2:	011b      	lsls	r3, r3, #4
 80097c4:	1a9b      	subs	r3, r3, r2
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	440b      	add	r3, r1
 80097ca:	3319      	adds	r3, #25
 80097cc:	2201      	movs	r2, #1
 80097ce:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	78fa      	ldrb	r2, [r7, #3]
 80097d6:	4611      	mov	r1, r2
 80097d8:	4618      	mov	r0, r3
 80097da:	f008 f81b 	bl	8011814 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80097de:	78fb      	ldrb	r3, [r7, #3]
 80097e0:	015a      	lsls	r2, r3, #5
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	4413      	add	r3, r2
 80097e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097ea:	461a      	mov	r2, r3
 80097ec:	2310      	movs	r3, #16
 80097ee:	6093      	str	r3, [r2, #8]
 80097f0:	e2a7      	b.n	8009d42 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	78fa      	ldrb	r2, [r7, #3]
 80097f8:	4611      	mov	r1, r2
 80097fa:	4618      	mov	r0, r3
 80097fc:	f007 ff8d 	bl	801171a <USB_ReadChInterrupts>
 8009800:	4603      	mov	r3, r0
 8009802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009806:	2b80      	cmp	r3, #128	@ 0x80
 8009808:	f040 8083 	bne.w	8009912 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	799b      	ldrb	r3, [r3, #6]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d111      	bne.n	8009838 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8009814:	78fa      	ldrb	r2, [r7, #3]
 8009816:	6879      	ldr	r1, [r7, #4]
 8009818:	4613      	mov	r3, r2
 800981a:	011b      	lsls	r3, r3, #4
 800981c:	1a9b      	subs	r3, r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	440b      	add	r3, r1
 8009822:	334d      	adds	r3, #77	@ 0x4d
 8009824:	2207      	movs	r2, #7
 8009826:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	78fa      	ldrb	r2, [r7, #3]
 800982e:	4611      	mov	r1, r2
 8009830:	4618      	mov	r0, r3
 8009832:	f007 ffef 	bl	8011814 <USB_HC_Halt>
 8009836:	e062      	b.n	80098fe <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8009838:	78fa      	ldrb	r2, [r7, #3]
 800983a:	6879      	ldr	r1, [r7, #4]
 800983c:	4613      	mov	r3, r2
 800983e:	011b      	lsls	r3, r3, #4
 8009840:	1a9b      	subs	r3, r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	440b      	add	r3, r1
 8009846:	3344      	adds	r3, #68	@ 0x44
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	1c59      	adds	r1, r3, #1
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	4613      	mov	r3, r2
 8009850:	011b      	lsls	r3, r3, #4
 8009852:	1a9b      	subs	r3, r3, r2
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	4403      	add	r3, r0
 8009858:	3344      	adds	r3, #68	@ 0x44
 800985a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800985c:	78fa      	ldrb	r2, [r7, #3]
 800985e:	6879      	ldr	r1, [r7, #4]
 8009860:	4613      	mov	r3, r2
 8009862:	011b      	lsls	r3, r3, #4
 8009864:	1a9b      	subs	r3, r3, r2
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	440b      	add	r3, r1
 800986a:	3344      	adds	r3, #68	@ 0x44
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2b02      	cmp	r3, #2
 8009870:	d922      	bls.n	80098b8 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8009872:	78fa      	ldrb	r2, [r7, #3]
 8009874:	6879      	ldr	r1, [r7, #4]
 8009876:	4613      	mov	r3, r2
 8009878:	011b      	lsls	r3, r3, #4
 800987a:	1a9b      	subs	r3, r3, r2
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	440b      	add	r3, r1
 8009880:	3344      	adds	r3, #68	@ 0x44
 8009882:	2200      	movs	r2, #0
 8009884:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8009886:	78fa      	ldrb	r2, [r7, #3]
 8009888:	6879      	ldr	r1, [r7, #4]
 800988a:	4613      	mov	r3, r2
 800988c:	011b      	lsls	r3, r3, #4
 800988e:	1a9b      	subs	r3, r3, r2
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	440b      	add	r3, r1
 8009894:	334c      	adds	r3, #76	@ 0x4c
 8009896:	2204      	movs	r2, #4
 8009898:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800989a:	78fa      	ldrb	r2, [r7, #3]
 800989c:	6879      	ldr	r1, [r7, #4]
 800989e:	4613      	mov	r3, r2
 80098a0:	011b      	lsls	r3, r3, #4
 80098a2:	1a9b      	subs	r3, r3, r2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	440b      	add	r3, r1
 80098a8:	334c      	adds	r3, #76	@ 0x4c
 80098aa:	781a      	ldrb	r2, [r3, #0]
 80098ac:	78fb      	ldrb	r3, [r7, #3]
 80098ae:	4619      	mov	r1, r3
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f00d fe59 	bl	8017568 <HAL_HCD_HC_NotifyURBChange_Callback>
 80098b6:	e022      	b.n	80098fe <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80098b8:	78fa      	ldrb	r2, [r7, #3]
 80098ba:	6879      	ldr	r1, [r7, #4]
 80098bc:	4613      	mov	r3, r2
 80098be:	011b      	lsls	r3, r3, #4
 80098c0:	1a9b      	subs	r3, r3, r2
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	440b      	add	r3, r1
 80098c6:	334c      	adds	r3, #76	@ 0x4c
 80098c8:	2202      	movs	r2, #2
 80098ca:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80098cc:	78fb      	ldrb	r3, [r7, #3]
 80098ce:	015a      	lsls	r2, r3, #5
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	4413      	add	r3, r2
 80098d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80098e2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80098ea:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80098ec:	78fb      	ldrb	r3, [r7, #3]
 80098ee:	015a      	lsls	r2, r3, #5
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	4413      	add	r3, r2
 80098f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098f8:	461a      	mov	r2, r3
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80098fe:	78fb      	ldrb	r3, [r7, #3]
 8009900:	015a      	lsls	r2, r3, #5
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	4413      	add	r3, r2
 8009906:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800990a:	461a      	mov	r2, r3
 800990c:	2380      	movs	r3, #128	@ 0x80
 800990e:	6093      	str	r3, [r2, #8]
 8009910:	e217      	b.n	8009d42 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	78fa      	ldrb	r2, [r7, #3]
 8009918:	4611      	mov	r1, r2
 800991a:	4618      	mov	r0, r3
 800991c:	f007 fefd 	bl	801171a <USB_ReadChInterrupts>
 8009920:	4603      	mov	r3, r0
 8009922:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009926:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800992a:	d11b      	bne.n	8009964 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800992c:	78fa      	ldrb	r2, [r7, #3]
 800992e:	6879      	ldr	r1, [r7, #4]
 8009930:	4613      	mov	r3, r2
 8009932:	011b      	lsls	r3, r3, #4
 8009934:	1a9b      	subs	r3, r3, r2
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	440b      	add	r3, r1
 800993a:	334d      	adds	r3, #77	@ 0x4d
 800993c:	2209      	movs	r2, #9
 800993e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	78fa      	ldrb	r2, [r7, #3]
 8009946:	4611      	mov	r1, r2
 8009948:	4618      	mov	r0, r3
 800994a:	f007 ff63 	bl	8011814 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800994e:	78fb      	ldrb	r3, [r7, #3]
 8009950:	015a      	lsls	r2, r3, #5
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	4413      	add	r3, r2
 8009956:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800995a:	461a      	mov	r2, r3
 800995c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009960:	6093      	str	r3, [r2, #8]
 8009962:	e1ee      	b.n	8009d42 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	78fa      	ldrb	r2, [r7, #3]
 800996a:	4611      	mov	r1, r2
 800996c:	4618      	mov	r0, r3
 800996e:	f007 fed4 	bl	801171a <USB_ReadChInterrupts>
 8009972:	4603      	mov	r3, r0
 8009974:	f003 0302 	and.w	r3, r3, #2
 8009978:	2b02      	cmp	r3, #2
 800997a:	f040 81df 	bne.w	8009d3c <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800997e:	78fb      	ldrb	r3, [r7, #3]
 8009980:	015a      	lsls	r2, r3, #5
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	4413      	add	r3, r2
 8009986:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800998a:	461a      	mov	r2, r3
 800998c:	2302      	movs	r3, #2
 800998e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8009990:	78fa      	ldrb	r2, [r7, #3]
 8009992:	6879      	ldr	r1, [r7, #4]
 8009994:	4613      	mov	r3, r2
 8009996:	011b      	lsls	r3, r3, #4
 8009998:	1a9b      	subs	r3, r3, r2
 800999a:	009b      	lsls	r3, r3, #2
 800999c:	440b      	add	r3, r1
 800999e:	334d      	adds	r3, #77	@ 0x4d
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	f040 8093 	bne.w	8009ace <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80099a8:	78fa      	ldrb	r2, [r7, #3]
 80099aa:	6879      	ldr	r1, [r7, #4]
 80099ac:	4613      	mov	r3, r2
 80099ae:	011b      	lsls	r3, r3, #4
 80099b0:	1a9b      	subs	r3, r3, r2
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	440b      	add	r3, r1
 80099b6:	334d      	adds	r3, #77	@ 0x4d
 80099b8:	2202      	movs	r2, #2
 80099ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80099bc:	78fa      	ldrb	r2, [r7, #3]
 80099be:	6879      	ldr	r1, [r7, #4]
 80099c0:	4613      	mov	r3, r2
 80099c2:	011b      	lsls	r3, r3, #4
 80099c4:	1a9b      	subs	r3, r3, r2
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	440b      	add	r3, r1
 80099ca:	334c      	adds	r3, #76	@ 0x4c
 80099cc:	2201      	movs	r2, #1
 80099ce:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80099d0:	78fa      	ldrb	r2, [r7, #3]
 80099d2:	6879      	ldr	r1, [r7, #4]
 80099d4:	4613      	mov	r3, r2
 80099d6:	011b      	lsls	r3, r3, #4
 80099d8:	1a9b      	subs	r3, r3, r2
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	440b      	add	r3, r1
 80099de:	3326      	adds	r3, #38	@ 0x26
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	2b02      	cmp	r3, #2
 80099e4:	d00b      	beq.n	80099fe <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80099e6:	78fa      	ldrb	r2, [r7, #3]
 80099e8:	6879      	ldr	r1, [r7, #4]
 80099ea:	4613      	mov	r3, r2
 80099ec:	011b      	lsls	r3, r3, #4
 80099ee:	1a9b      	subs	r3, r3, r2
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	440b      	add	r3, r1
 80099f4:	3326      	adds	r3, #38	@ 0x26
 80099f6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80099f8:	2b03      	cmp	r3, #3
 80099fa:	f040 8190 	bne.w	8009d1e <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	799b      	ldrb	r3, [r3, #6]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d115      	bne.n	8009a32 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8009a06:	78fa      	ldrb	r2, [r7, #3]
 8009a08:	6879      	ldr	r1, [r7, #4]
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	011b      	lsls	r3, r3, #4
 8009a0e:	1a9b      	subs	r3, r3, r2
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	440b      	add	r3, r1
 8009a14:	333d      	adds	r3, #61	@ 0x3d
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	78fa      	ldrb	r2, [r7, #3]
 8009a1a:	f083 0301 	eor.w	r3, r3, #1
 8009a1e:	b2d8      	uxtb	r0, r3
 8009a20:	6879      	ldr	r1, [r7, #4]
 8009a22:	4613      	mov	r3, r2
 8009a24:	011b      	lsls	r3, r3, #4
 8009a26:	1a9b      	subs	r3, r3, r2
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	440b      	add	r3, r1
 8009a2c:	333d      	adds	r3, #61	@ 0x3d
 8009a2e:	4602      	mov	r2, r0
 8009a30:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	799b      	ldrb	r3, [r3, #6]
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	f040 8171 	bne.w	8009d1e <HCD_HC_OUT_IRQHandler+0x954>
 8009a3c:	78fa      	ldrb	r2, [r7, #3]
 8009a3e:	6879      	ldr	r1, [r7, #4]
 8009a40:	4613      	mov	r3, r2
 8009a42:	011b      	lsls	r3, r3, #4
 8009a44:	1a9b      	subs	r3, r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	440b      	add	r3, r1
 8009a4a:	3334      	adds	r3, #52	@ 0x34
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f000 8165 	beq.w	8009d1e <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8009a54:	78fa      	ldrb	r2, [r7, #3]
 8009a56:	6879      	ldr	r1, [r7, #4]
 8009a58:	4613      	mov	r3, r2
 8009a5a:	011b      	lsls	r3, r3, #4
 8009a5c:	1a9b      	subs	r3, r3, r2
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	440b      	add	r3, r1
 8009a62:	3334      	adds	r3, #52	@ 0x34
 8009a64:	6819      	ldr	r1, [r3, #0]
 8009a66:	78fa      	ldrb	r2, [r7, #3]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	4613      	mov	r3, r2
 8009a6c:	011b      	lsls	r3, r3, #4
 8009a6e:	1a9b      	subs	r3, r3, r2
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	4403      	add	r3, r0
 8009a74:	3328      	adds	r3, #40	@ 0x28
 8009a76:	881b      	ldrh	r3, [r3, #0]
 8009a78:	440b      	add	r3, r1
 8009a7a:	1e59      	subs	r1, r3, #1
 8009a7c:	78fa      	ldrb	r2, [r7, #3]
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	4613      	mov	r3, r2
 8009a82:	011b      	lsls	r3, r3, #4
 8009a84:	1a9b      	subs	r3, r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	4403      	add	r3, r0
 8009a8a:	3328      	adds	r3, #40	@ 0x28
 8009a8c:	881b      	ldrh	r3, [r3, #0]
 8009a8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009a92:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	f003 0301 	and.w	r3, r3, #1
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f000 813f 	beq.w	8009d1e <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8009aa0:	78fa      	ldrb	r2, [r7, #3]
 8009aa2:	6879      	ldr	r1, [r7, #4]
 8009aa4:	4613      	mov	r3, r2
 8009aa6:	011b      	lsls	r3, r3, #4
 8009aa8:	1a9b      	subs	r3, r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	440b      	add	r3, r1
 8009aae:	333d      	adds	r3, #61	@ 0x3d
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	78fa      	ldrb	r2, [r7, #3]
 8009ab4:	f083 0301 	eor.w	r3, r3, #1
 8009ab8:	b2d8      	uxtb	r0, r3
 8009aba:	6879      	ldr	r1, [r7, #4]
 8009abc:	4613      	mov	r3, r2
 8009abe:	011b      	lsls	r3, r3, #4
 8009ac0:	1a9b      	subs	r3, r3, r2
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	440b      	add	r3, r1
 8009ac6:	333d      	adds	r3, #61	@ 0x3d
 8009ac8:	4602      	mov	r2, r0
 8009aca:	701a      	strb	r2, [r3, #0]
 8009acc:	e127      	b.n	8009d1e <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8009ace:	78fa      	ldrb	r2, [r7, #3]
 8009ad0:	6879      	ldr	r1, [r7, #4]
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	011b      	lsls	r3, r3, #4
 8009ad6:	1a9b      	subs	r3, r3, r2
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	440b      	add	r3, r1
 8009adc:	334d      	adds	r3, #77	@ 0x4d
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	2b03      	cmp	r3, #3
 8009ae2:	d120      	bne.n	8009b26 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009ae4:	78fa      	ldrb	r2, [r7, #3]
 8009ae6:	6879      	ldr	r1, [r7, #4]
 8009ae8:	4613      	mov	r3, r2
 8009aea:	011b      	lsls	r3, r3, #4
 8009aec:	1a9b      	subs	r3, r3, r2
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	440b      	add	r3, r1
 8009af2:	334d      	adds	r3, #77	@ 0x4d
 8009af4:	2202      	movs	r2, #2
 8009af6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8009af8:	78fa      	ldrb	r2, [r7, #3]
 8009afa:	6879      	ldr	r1, [r7, #4]
 8009afc:	4613      	mov	r3, r2
 8009afe:	011b      	lsls	r3, r3, #4
 8009b00:	1a9b      	subs	r3, r3, r2
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	440b      	add	r3, r1
 8009b06:	331b      	adds	r3, #27
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	f040 8107 	bne.w	8009d1e <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009b10:	78fa      	ldrb	r2, [r7, #3]
 8009b12:	6879      	ldr	r1, [r7, #4]
 8009b14:	4613      	mov	r3, r2
 8009b16:	011b      	lsls	r3, r3, #4
 8009b18:	1a9b      	subs	r3, r3, r2
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	440b      	add	r3, r1
 8009b1e:	334c      	adds	r3, #76	@ 0x4c
 8009b20:	2202      	movs	r2, #2
 8009b22:	701a      	strb	r2, [r3, #0]
 8009b24:	e0fb      	b.n	8009d1e <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8009b26:	78fa      	ldrb	r2, [r7, #3]
 8009b28:	6879      	ldr	r1, [r7, #4]
 8009b2a:	4613      	mov	r3, r2
 8009b2c:	011b      	lsls	r3, r3, #4
 8009b2e:	1a9b      	subs	r3, r3, r2
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	440b      	add	r3, r1
 8009b34:	334d      	adds	r3, #77	@ 0x4d
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	2b04      	cmp	r3, #4
 8009b3a:	d13a      	bne.n	8009bb2 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009b3c:	78fa      	ldrb	r2, [r7, #3]
 8009b3e:	6879      	ldr	r1, [r7, #4]
 8009b40:	4613      	mov	r3, r2
 8009b42:	011b      	lsls	r3, r3, #4
 8009b44:	1a9b      	subs	r3, r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	440b      	add	r3, r1
 8009b4a:	334d      	adds	r3, #77	@ 0x4d
 8009b4c:	2202      	movs	r2, #2
 8009b4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009b50:	78fa      	ldrb	r2, [r7, #3]
 8009b52:	6879      	ldr	r1, [r7, #4]
 8009b54:	4613      	mov	r3, r2
 8009b56:	011b      	lsls	r3, r3, #4
 8009b58:	1a9b      	subs	r3, r3, r2
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	440b      	add	r3, r1
 8009b5e:	334c      	adds	r3, #76	@ 0x4c
 8009b60:	2202      	movs	r2, #2
 8009b62:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8009b64:	78fa      	ldrb	r2, [r7, #3]
 8009b66:	6879      	ldr	r1, [r7, #4]
 8009b68:	4613      	mov	r3, r2
 8009b6a:	011b      	lsls	r3, r3, #4
 8009b6c:	1a9b      	subs	r3, r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	440b      	add	r3, r1
 8009b72:	331b      	adds	r3, #27
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	f040 80d1 	bne.w	8009d1e <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8009b7c:	78fa      	ldrb	r2, [r7, #3]
 8009b7e:	6879      	ldr	r1, [r7, #4]
 8009b80:	4613      	mov	r3, r2
 8009b82:	011b      	lsls	r3, r3, #4
 8009b84:	1a9b      	subs	r3, r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	440b      	add	r3, r1
 8009b8a:	331b      	adds	r3, #27
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8009b90:	78fb      	ldrb	r3, [r7, #3]
 8009b92:	015a      	lsls	r2, r3, #5
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	4413      	add	r3, r2
 8009b98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	78fa      	ldrb	r2, [r7, #3]
 8009ba0:	0151      	lsls	r1, r2, #5
 8009ba2:	693a      	ldr	r2, [r7, #16]
 8009ba4:	440a      	add	r2, r1
 8009ba6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009baa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009bae:	6053      	str	r3, [r2, #4]
 8009bb0:	e0b5      	b.n	8009d1e <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8009bb2:	78fa      	ldrb	r2, [r7, #3]
 8009bb4:	6879      	ldr	r1, [r7, #4]
 8009bb6:	4613      	mov	r3, r2
 8009bb8:	011b      	lsls	r3, r3, #4
 8009bba:	1a9b      	subs	r3, r3, r2
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	440b      	add	r3, r1
 8009bc0:	334d      	adds	r3, #77	@ 0x4d
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	2b05      	cmp	r3, #5
 8009bc6:	d114      	bne.n	8009bf2 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009bc8:	78fa      	ldrb	r2, [r7, #3]
 8009bca:	6879      	ldr	r1, [r7, #4]
 8009bcc:	4613      	mov	r3, r2
 8009bce:	011b      	lsls	r3, r3, #4
 8009bd0:	1a9b      	subs	r3, r3, r2
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	440b      	add	r3, r1
 8009bd6:	334d      	adds	r3, #77	@ 0x4d
 8009bd8:	2202      	movs	r2, #2
 8009bda:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8009bdc:	78fa      	ldrb	r2, [r7, #3]
 8009bde:	6879      	ldr	r1, [r7, #4]
 8009be0:	4613      	mov	r3, r2
 8009be2:	011b      	lsls	r3, r3, #4
 8009be4:	1a9b      	subs	r3, r3, r2
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	440b      	add	r3, r1
 8009bea:	334c      	adds	r3, #76	@ 0x4c
 8009bec:	2202      	movs	r2, #2
 8009bee:	701a      	strb	r2, [r3, #0]
 8009bf0:	e095      	b.n	8009d1e <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8009bf2:	78fa      	ldrb	r2, [r7, #3]
 8009bf4:	6879      	ldr	r1, [r7, #4]
 8009bf6:	4613      	mov	r3, r2
 8009bf8:	011b      	lsls	r3, r3, #4
 8009bfa:	1a9b      	subs	r3, r3, r2
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	440b      	add	r3, r1
 8009c00:	334d      	adds	r3, #77	@ 0x4d
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	2b06      	cmp	r3, #6
 8009c06:	d114      	bne.n	8009c32 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009c08:	78fa      	ldrb	r2, [r7, #3]
 8009c0a:	6879      	ldr	r1, [r7, #4]
 8009c0c:	4613      	mov	r3, r2
 8009c0e:	011b      	lsls	r3, r3, #4
 8009c10:	1a9b      	subs	r3, r3, r2
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	440b      	add	r3, r1
 8009c16:	334d      	adds	r3, #77	@ 0x4d
 8009c18:	2202      	movs	r2, #2
 8009c1a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8009c1c:	78fa      	ldrb	r2, [r7, #3]
 8009c1e:	6879      	ldr	r1, [r7, #4]
 8009c20:	4613      	mov	r3, r2
 8009c22:	011b      	lsls	r3, r3, #4
 8009c24:	1a9b      	subs	r3, r3, r2
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	440b      	add	r3, r1
 8009c2a:	334c      	adds	r3, #76	@ 0x4c
 8009c2c:	2205      	movs	r2, #5
 8009c2e:	701a      	strb	r2, [r3, #0]
 8009c30:	e075      	b.n	8009d1e <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8009c32:	78fa      	ldrb	r2, [r7, #3]
 8009c34:	6879      	ldr	r1, [r7, #4]
 8009c36:	4613      	mov	r3, r2
 8009c38:	011b      	lsls	r3, r3, #4
 8009c3a:	1a9b      	subs	r3, r3, r2
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	440b      	add	r3, r1
 8009c40:	334d      	adds	r3, #77	@ 0x4d
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	2b07      	cmp	r3, #7
 8009c46:	d00a      	beq.n	8009c5e <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8009c48:	78fa      	ldrb	r2, [r7, #3]
 8009c4a:	6879      	ldr	r1, [r7, #4]
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	011b      	lsls	r3, r3, #4
 8009c50:	1a9b      	subs	r3, r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	440b      	add	r3, r1
 8009c56:	334d      	adds	r3, #77	@ 0x4d
 8009c58:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8009c5a:	2b09      	cmp	r3, #9
 8009c5c:	d170      	bne.n	8009d40 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009c5e:	78fa      	ldrb	r2, [r7, #3]
 8009c60:	6879      	ldr	r1, [r7, #4]
 8009c62:	4613      	mov	r3, r2
 8009c64:	011b      	lsls	r3, r3, #4
 8009c66:	1a9b      	subs	r3, r3, r2
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	440b      	add	r3, r1
 8009c6c:	334d      	adds	r3, #77	@ 0x4d
 8009c6e:	2202      	movs	r2, #2
 8009c70:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8009c72:	78fa      	ldrb	r2, [r7, #3]
 8009c74:	6879      	ldr	r1, [r7, #4]
 8009c76:	4613      	mov	r3, r2
 8009c78:	011b      	lsls	r3, r3, #4
 8009c7a:	1a9b      	subs	r3, r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	440b      	add	r3, r1
 8009c80:	3344      	adds	r3, #68	@ 0x44
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	1c59      	adds	r1, r3, #1
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	4613      	mov	r3, r2
 8009c8a:	011b      	lsls	r3, r3, #4
 8009c8c:	1a9b      	subs	r3, r3, r2
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	4403      	add	r3, r0
 8009c92:	3344      	adds	r3, #68	@ 0x44
 8009c94:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009c96:	78fa      	ldrb	r2, [r7, #3]
 8009c98:	6879      	ldr	r1, [r7, #4]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	011b      	lsls	r3, r3, #4
 8009c9e:	1a9b      	subs	r3, r3, r2
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	440b      	add	r3, r1
 8009ca4:	3344      	adds	r3, #68	@ 0x44
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2b02      	cmp	r3, #2
 8009caa:	d914      	bls.n	8009cd6 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8009cac:	78fa      	ldrb	r2, [r7, #3]
 8009cae:	6879      	ldr	r1, [r7, #4]
 8009cb0:	4613      	mov	r3, r2
 8009cb2:	011b      	lsls	r3, r3, #4
 8009cb4:	1a9b      	subs	r3, r3, r2
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	440b      	add	r3, r1
 8009cba:	3344      	adds	r3, #68	@ 0x44
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8009cc0:	78fa      	ldrb	r2, [r7, #3]
 8009cc2:	6879      	ldr	r1, [r7, #4]
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	011b      	lsls	r3, r3, #4
 8009cc8:	1a9b      	subs	r3, r3, r2
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	440b      	add	r3, r1
 8009cce:	334c      	adds	r3, #76	@ 0x4c
 8009cd0:	2204      	movs	r2, #4
 8009cd2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009cd4:	e022      	b.n	8009d1c <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009cd6:	78fa      	ldrb	r2, [r7, #3]
 8009cd8:	6879      	ldr	r1, [r7, #4]
 8009cda:	4613      	mov	r3, r2
 8009cdc:	011b      	lsls	r3, r3, #4
 8009cde:	1a9b      	subs	r3, r3, r2
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	440b      	add	r3, r1
 8009ce4:	334c      	adds	r3, #76	@ 0x4c
 8009ce6:	2202      	movs	r2, #2
 8009ce8:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009cea:	78fb      	ldrb	r3, [r7, #3]
 8009cec:	015a      	lsls	r2, r3, #5
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009d00:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009d08:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009d0a:	78fb      	ldrb	r3, [r7, #3]
 8009d0c:	015a      	lsls	r2, r3, #5
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	4413      	add	r3, r2
 8009d12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d16:	461a      	mov	r2, r3
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009d1c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009d1e:	78fa      	ldrb	r2, [r7, #3]
 8009d20:	6879      	ldr	r1, [r7, #4]
 8009d22:	4613      	mov	r3, r2
 8009d24:	011b      	lsls	r3, r3, #4
 8009d26:	1a9b      	subs	r3, r3, r2
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	440b      	add	r3, r1
 8009d2c:	334c      	adds	r3, #76	@ 0x4c
 8009d2e:	781a      	ldrb	r2, [r3, #0]
 8009d30:	78fb      	ldrb	r3, [r7, #3]
 8009d32:	4619      	mov	r1, r3
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f00d fc17 	bl	8017568 <HAL_HCD_HC_NotifyURBChange_Callback>
 8009d3a:	e002      	b.n	8009d42 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8009d3c:	bf00      	nop
 8009d3e:	e000      	b.n	8009d42 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8009d40:	bf00      	nop
  }
}
 8009d42:	3718      	adds	r7, #24
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b08a      	sub	sp, #40	@ 0x28
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d58:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	6a1b      	ldr	r3, [r3, #32]
 8009d60:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	f003 030f 	and.w	r3, r3, #15
 8009d68:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	0c5b      	lsrs	r3, r3, #17
 8009d6e:	f003 030f 	and.w	r3, r3, #15
 8009d72:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	091b      	lsrs	r3, r3, #4
 8009d78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d7c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d004      	beq.n	8009d8e <HCD_RXQLVL_IRQHandler+0x46>
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	2b05      	cmp	r3, #5
 8009d88:	f000 80b6 	beq.w	8009ef8 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8009d8c:	e0b7      	b.n	8009efe <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f000 80b3 	beq.w	8009efc <HCD_RXQLVL_IRQHandler+0x1b4>
 8009d96:	6879      	ldr	r1, [r7, #4]
 8009d98:	69ba      	ldr	r2, [r7, #24]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	011b      	lsls	r3, r3, #4
 8009d9e:	1a9b      	subs	r3, r3, r2
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	440b      	add	r3, r1
 8009da4:	332c      	adds	r3, #44	@ 0x2c
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	f000 80a7 	beq.w	8009efc <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8009dae:	6879      	ldr	r1, [r7, #4]
 8009db0:	69ba      	ldr	r2, [r7, #24]
 8009db2:	4613      	mov	r3, r2
 8009db4:	011b      	lsls	r3, r3, #4
 8009db6:	1a9b      	subs	r3, r3, r2
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	440b      	add	r3, r1
 8009dbc:	3338      	adds	r3, #56	@ 0x38
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	18d1      	adds	r1, r2, r3
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	69ba      	ldr	r2, [r7, #24]
 8009dc8:	4613      	mov	r3, r2
 8009dca:	011b      	lsls	r3, r3, #4
 8009dcc:	1a9b      	subs	r3, r3, r2
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	4403      	add	r3, r0
 8009dd2:	3334      	adds	r3, #52	@ 0x34
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4299      	cmp	r1, r3
 8009dd8:	f200 8083 	bhi.w	8009ee2 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6818      	ldr	r0, [r3, #0]
 8009de0:	6879      	ldr	r1, [r7, #4]
 8009de2:	69ba      	ldr	r2, [r7, #24]
 8009de4:	4613      	mov	r3, r2
 8009de6:	011b      	lsls	r3, r3, #4
 8009de8:	1a9b      	subs	r3, r3, r2
 8009dea:	009b      	lsls	r3, r3, #2
 8009dec:	440b      	add	r3, r1
 8009dee:	332c      	adds	r3, #44	@ 0x2c
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	693a      	ldr	r2, [r7, #16]
 8009df4:	b292      	uxth	r2, r2
 8009df6:	4619      	mov	r1, r3
 8009df8:	f007 fc24 	bl	8011644 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8009dfc:	6879      	ldr	r1, [r7, #4]
 8009dfe:	69ba      	ldr	r2, [r7, #24]
 8009e00:	4613      	mov	r3, r2
 8009e02:	011b      	lsls	r3, r3, #4
 8009e04:	1a9b      	subs	r3, r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	440b      	add	r3, r1
 8009e0a:	332c      	adds	r3, #44	@ 0x2c
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	18d1      	adds	r1, r2, r3
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	69ba      	ldr	r2, [r7, #24]
 8009e16:	4613      	mov	r3, r2
 8009e18:	011b      	lsls	r3, r3, #4
 8009e1a:	1a9b      	subs	r3, r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4403      	add	r3, r0
 8009e20:	332c      	adds	r3, #44	@ 0x2c
 8009e22:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8009e24:	6879      	ldr	r1, [r7, #4]
 8009e26:	69ba      	ldr	r2, [r7, #24]
 8009e28:	4613      	mov	r3, r2
 8009e2a:	011b      	lsls	r3, r3, #4
 8009e2c:	1a9b      	subs	r3, r3, r2
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	440b      	add	r3, r1
 8009e32:	3338      	adds	r3, #56	@ 0x38
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	18d1      	adds	r1, r2, r3
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	69ba      	ldr	r2, [r7, #24]
 8009e3e:	4613      	mov	r3, r2
 8009e40:	011b      	lsls	r3, r3, #4
 8009e42:	1a9b      	subs	r3, r3, r2
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	4403      	add	r3, r0
 8009e48:	3338      	adds	r3, #56	@ 0x38
 8009e4a:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8009e4c:	69bb      	ldr	r3, [r7, #24]
 8009e4e:	015a      	lsls	r2, r3, #5
 8009e50:	6a3b      	ldr	r3, [r7, #32]
 8009e52:	4413      	add	r3, r2
 8009e54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e58:	691b      	ldr	r3, [r3, #16]
 8009e5a:	0cdb      	lsrs	r3, r3, #19
 8009e5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e60:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8009e62:	6879      	ldr	r1, [r7, #4]
 8009e64:	69ba      	ldr	r2, [r7, #24]
 8009e66:	4613      	mov	r3, r2
 8009e68:	011b      	lsls	r3, r3, #4
 8009e6a:	1a9b      	subs	r3, r3, r2
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	440b      	add	r3, r1
 8009e70:	3328      	adds	r3, #40	@ 0x28
 8009e72:	881b      	ldrh	r3, [r3, #0]
 8009e74:	461a      	mov	r2, r3
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d13f      	bne.n	8009efc <HCD_RXQLVL_IRQHandler+0x1b4>
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d03c      	beq.n	8009efc <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	015a      	lsls	r2, r3, #5
 8009e86:	6a3b      	ldr	r3, [r7, #32]
 8009e88:	4413      	add	r3, r2
 8009e8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009e98:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009ea0:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	015a      	lsls	r2, r3, #5
 8009ea6:	6a3b      	ldr	r3, [r7, #32]
 8009ea8:	4413      	add	r3, r2
 8009eaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009eae:	461a      	mov	r2, r3
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8009eb4:	6879      	ldr	r1, [r7, #4]
 8009eb6:	69ba      	ldr	r2, [r7, #24]
 8009eb8:	4613      	mov	r3, r2
 8009eba:	011b      	lsls	r3, r3, #4
 8009ebc:	1a9b      	subs	r3, r3, r2
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	440b      	add	r3, r1
 8009ec2:	333c      	adds	r3, #60	@ 0x3c
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	f083 0301 	eor.w	r3, r3, #1
 8009eca:	b2d8      	uxtb	r0, r3
 8009ecc:	6879      	ldr	r1, [r7, #4]
 8009ece:	69ba      	ldr	r2, [r7, #24]
 8009ed0:	4613      	mov	r3, r2
 8009ed2:	011b      	lsls	r3, r3, #4
 8009ed4:	1a9b      	subs	r3, r3, r2
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	440b      	add	r3, r1
 8009eda:	333c      	adds	r3, #60	@ 0x3c
 8009edc:	4602      	mov	r2, r0
 8009ede:	701a      	strb	r2, [r3, #0]
      break;
 8009ee0:	e00c      	b.n	8009efc <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8009ee2:	6879      	ldr	r1, [r7, #4]
 8009ee4:	69ba      	ldr	r2, [r7, #24]
 8009ee6:	4613      	mov	r3, r2
 8009ee8:	011b      	lsls	r3, r3, #4
 8009eea:	1a9b      	subs	r3, r3, r2
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	440b      	add	r3, r1
 8009ef0:	334c      	adds	r3, #76	@ 0x4c
 8009ef2:	2204      	movs	r2, #4
 8009ef4:	701a      	strb	r2, [r3, #0]
      break;
 8009ef6:	e001      	b.n	8009efc <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8009ef8:	bf00      	nop
 8009efa:	e000      	b.n	8009efe <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8009efc:	bf00      	nop
  }
}
 8009efe:	bf00      	nop
 8009f00:	3728      	adds	r7, #40	@ 0x28
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b086      	sub	sp, #24
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009f32:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f003 0302 	and.w	r3, r3, #2
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d10b      	bne.n	8009f56 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f003 0301 	and.w	r3, r3, #1
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d102      	bne.n	8009f4e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f00d faf1 	bl	8017530 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	f043 0302 	orr.w	r3, r3, #2
 8009f54:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f003 0308 	and.w	r3, r3, #8
 8009f5c:	2b08      	cmp	r3, #8
 8009f5e:	d132      	bne.n	8009fc6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	f043 0308 	orr.w	r3, r3, #8
 8009f66:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f003 0304 	and.w	r3, r3, #4
 8009f6e:	2b04      	cmp	r3, #4
 8009f70:	d126      	bne.n	8009fc0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	7a5b      	ldrb	r3, [r3, #9]
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	d113      	bne.n	8009fa2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8009f80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009f84:	d106      	bne.n	8009f94 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2102      	movs	r1, #2
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f007 fbf3 	bl	8011778 <USB_InitFSLSPClkSel>
 8009f92:	e011      	b.n	8009fb8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2101      	movs	r1, #1
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f007 fbec 	bl	8011778 <USB_InitFSLSPClkSel>
 8009fa0:	e00a      	b.n	8009fb8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	79db      	ldrb	r3, [r3, #7]
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d106      	bne.n	8009fb8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8009fb6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f00d fae7 	bl	801758c <HAL_HCD_PortEnabled_Callback>
 8009fbe:	e002      	b.n	8009fc6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f00d faf1 	bl	80175a8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f003 0320 	and.w	r3, r3, #32
 8009fcc:	2b20      	cmp	r3, #32
 8009fce:	d103      	bne.n	8009fd8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	f043 0320 	orr.w	r3, r3, #32
 8009fd6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009fde:	461a      	mov	r2, r3
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	6013      	str	r3, [r2, #0]
}
 8009fe4:	bf00      	nop
 8009fe6:	3718      	adds	r7, #24
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d101      	bne.n	8009ffe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e08b      	b.n	800a116 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a004:	b2db      	uxtb	r3, r3
 800a006:	2b00      	cmp	r3, #0
 800a008:	d106      	bne.n	800a018 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2200      	movs	r2, #0
 800a00e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f7fa fae0 	bl	80045d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2224      	movs	r2, #36	@ 0x24
 800a01c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f022 0201 	bic.w	r2, r2, #1
 800a02e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	685a      	ldr	r2, [r3, #4]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a03c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	689a      	ldr	r2, [r3, #8]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a04c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	2b01      	cmp	r3, #1
 800a054:	d107      	bne.n	800a066 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	689a      	ldr	r2, [r3, #8]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a062:	609a      	str	r2, [r3, #8]
 800a064:	e006      	b.n	800a074 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	689a      	ldr	r2, [r3, #8]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a072:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	2b02      	cmp	r3, #2
 800a07a:	d108      	bne.n	800a08e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	685a      	ldr	r2, [r3, #4]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a08a:	605a      	str	r2, [r3, #4]
 800a08c:	e007      	b.n	800a09e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	685a      	ldr	r2, [r3, #4]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a09c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	6859      	ldr	r1, [r3, #4]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	4b1d      	ldr	r3, [pc, #116]	@ (800a120 <HAL_I2C_Init+0x134>)
 800a0aa:	430b      	orrs	r3, r1
 800a0ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	68da      	ldr	r2, [r3, #12]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a0bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	691a      	ldr	r2, [r3, #16]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	695b      	ldr	r3, [r3, #20]
 800a0c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	699b      	ldr	r3, [r3, #24]
 800a0ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	430a      	orrs	r2, r1
 800a0d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	69d9      	ldr	r1, [r3, #28]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6a1a      	ldr	r2, [r3, #32]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	430a      	orrs	r2, r1
 800a0e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f042 0201 	orr.w	r2, r2, #1
 800a0f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2220      	movs	r2, #32
 800a102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	02008000 	.word	0x02008000

0800a124 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a134:	b2db      	uxtb	r3, r3
 800a136:	2b20      	cmp	r3, #32
 800a138:	d138      	bne.n	800a1ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a140:	2b01      	cmp	r3, #1
 800a142:	d101      	bne.n	800a148 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a144:	2302      	movs	r3, #2
 800a146:	e032      	b.n	800a1ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2224      	movs	r2, #36	@ 0x24
 800a154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f022 0201 	bic.w	r2, r2, #1
 800a166:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a176:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	6819      	ldr	r1, [r3, #0]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	683a      	ldr	r2, [r7, #0]
 800a184:	430a      	orrs	r2, r1
 800a186:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f042 0201 	orr.w	r2, r2, #1
 800a196:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2220      	movs	r2, #32
 800a19c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	e000      	b.n	800a1ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a1ac:	2302      	movs	r3, #2
  }
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	370c      	adds	r7, #12
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr

0800a1ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a1ba:	b480      	push	{r7}
 800a1bc:	b085      	sub	sp, #20
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
 800a1c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	2b20      	cmp	r3, #32
 800a1ce:	d139      	bne.n	800a244 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d101      	bne.n	800a1de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a1da:	2302      	movs	r3, #2
 800a1dc:	e033      	b.n	800a246 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2224      	movs	r2, #36	@ 0x24
 800a1ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f022 0201 	bic.w	r2, r2, #1
 800a1fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a20c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	021b      	lsls	r3, r3, #8
 800a212:	68fa      	ldr	r2, [r7, #12]
 800a214:	4313      	orrs	r3, r2
 800a216:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68fa      	ldr	r2, [r7, #12]
 800a21e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f042 0201 	orr.w	r2, r2, #1
 800a22e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2220      	movs	r2, #32
 800a234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a240:	2300      	movs	r3, #0
 800a242:	e000      	b.n	800a246 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a244:	2302      	movs	r3, #2
  }
}
 800a246:	4618      	mov	r0, r3
 800a248:	3714      	adds	r7, #20
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr

0800a252 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b084      	sub	sp, #16
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d101      	bne.n	800a264 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800a260:	2301      	movs	r3, #1
 800a262:	e08f      	b.n	800a384 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d106      	bne.n	800a27e <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f7fa fa55 	bl	8004728 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2202      	movs	r2, #2
 800a282:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	699a      	ldr	r2, [r3, #24]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800a294:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	6999      	ldr	r1, [r3, #24]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	685a      	ldr	r2, [r3, #4]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a2aa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	691b      	ldr	r3, [r3, #16]
 800a2b0:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	430a      	orrs	r2, r1
 800a2b8:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	695b      	ldr	r3, [r3, #20]
 800a2be:	041b      	lsls	r3, r3, #16
 800a2c0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6999      	ldr	r1, [r3, #24]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	68fa      	ldr	r2, [r7, #12]
 800a2cc:	430a      	orrs	r2, r1
 800a2ce:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	69db      	ldr	r3, [r3, #28]
 800a2d4:	041b      	lsls	r3, r3, #16
 800a2d6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6a19      	ldr	r1, [r3, #32]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	68fa      	ldr	r2, [r7, #12]
 800a2e2:	430a      	orrs	r2, r1
 800a2e4:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2ea:	041b      	lsls	r3, r3, #16
 800a2ec:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	68fa      	ldr	r2, [r7, #12]
 800a2f8:	430a      	orrs	r2, r1
 800a2fa:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a300:	041b      	lsls	r3, r3, #16
 800a302:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	430a      	orrs	r2, r1
 800a310:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a318:	021b      	lsls	r3, r3, #8
 800a31a:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800a322:	041b      	lsls	r3, r3, #16
 800a324:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800a334:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a33c:	68ba      	ldr	r2, [r7, #8]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	4313      	orrs	r3, r2
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800a348:	431a      	orrs	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	430a      	orrs	r2, r1
 800a350:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f042 0206 	orr.w	r2, r2, #6
 800a360:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	699a      	ldr	r2, [r3, #24]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f042 0201 	orr.w	r2, r2, #1
 800a370:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2201      	movs	r2, #1
 800a37e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800a382:	2300      	movs	r3, #0
}
 800a384:	4618      	mov	r0, r3
 800a386:	3710      	adds	r7, #16
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a39a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3a2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f003 0304 	and.w	r3, r3, #4
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d023      	beq.n	800a3f6 <HAL_LTDC_IRQHandler+0x6a>
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	f003 0304 	and.w	r3, r3, #4
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d01e      	beq.n	800a3f6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f022 0204 	bic.w	r2, r2, #4
 800a3c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2204      	movs	r2, #4
 800a3ce:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a3d6:	f043 0201 	orr.w	r2, r3, #1
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2204      	movs	r2, #4
 800a3e4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 f86f 	bl	800a4d4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f003 0302 	and.w	r3, r3, #2
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d023      	beq.n	800a448 <HAL_LTDC_IRQHandler+0xbc>
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	f003 0302 	and.w	r3, r3, #2
 800a406:	2b00      	cmp	r3, #0
 800a408:	d01e      	beq.n	800a448 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f022 0202 	bic.w	r2, r2, #2
 800a418:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2202      	movs	r2, #2
 800a420:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a428:	f043 0202 	orr.w	r2, r3, #2
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2204      	movs	r2, #4
 800a436:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 f846 	bl	800a4d4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f003 0301 	and.w	r3, r3, #1
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d01b      	beq.n	800a48a <HAL_LTDC_IRQHandler+0xfe>
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	f003 0301 	and.w	r3, r3, #1
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d016      	beq.n	800a48a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f022 0201 	bic.w	r2, r2, #1
 800a46a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2201      	movs	r2, #1
 800a472:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2200      	movs	r2, #0
 800a480:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 f82f 	bl	800a4e8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f003 0308 	and.w	r3, r3, #8
 800a490:	2b00      	cmp	r3, #0
 800a492:	d01b      	beq.n	800a4cc <HAL_LTDC_IRQHandler+0x140>
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	f003 0308 	and.w	r3, r3, #8
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d016      	beq.n	800a4cc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f022 0208 	bic.w	r2, r2, #8
 800a4ac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	2208      	movs	r2, #8
 800a4b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 f818 	bl	800a4fc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800a4cc:	bf00      	nop
 800a4ce:	3710      	adds	r7, #16
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b083      	sub	sp, #12
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800a4dc:	bf00      	nop
 800a4de:	370c      	adds	r7, #12
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b083      	sub	sp, #12
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800a4f0:	bf00      	nop
 800a4f2:	370c      	adds	r7, #12
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b083      	sub	sp, #12
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800a504:	bf00      	nop
 800a506:	370c      	adds	r7, #12
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a510:	b5b0      	push	{r4, r5, r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800a522:	2b01      	cmp	r3, #1
 800a524:	d101      	bne.n	800a52a <HAL_LTDC_ConfigLayer+0x1a>
 800a526:	2302      	movs	r3, #2
 800a528:	e02c      	b.n	800a584 <HAL_LTDC_ConfigLayer+0x74>
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2201      	movs	r2, #1
 800a52e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2202      	movs	r2, #2
 800a536:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a53a:	68fa      	ldr	r2, [r7, #12]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2134      	movs	r1, #52	@ 0x34
 800a540:	fb01 f303 	mul.w	r3, r1, r3
 800a544:	4413      	add	r3, r2
 800a546:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	4614      	mov	r4, r2
 800a54e:	461d      	mov	r5, r3
 800a550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a55a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a55c:	682b      	ldr	r3, [r5, #0]
 800a55e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	68b9      	ldr	r1, [r7, #8]
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f000 f811 	bl	800a58c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	2201      	movs	r2, #1
 800a570:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2201      	movs	r2, #1
 800a576:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800a582:	2300      	movs	r3, #0
}
 800a584:	4618      	mov	r0, r3
 800a586:	3710      	adds	r7, #16
 800a588:	46bd      	mov	sp, r7
 800a58a:	bdb0      	pop	{r4, r5, r7, pc}

0800a58c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b089      	sub	sp, #36	@ 0x24
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	685a      	ldr	r2, [r3, #4]
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	0c1b      	lsrs	r3, r3, #16
 800a5a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a5a8:	4413      	add	r3, r2
 800a5aa:	041b      	lsls	r3, r3, #16
 800a5ac:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	01db      	lsls	r3, r3, #7
 800a5b8:	4413      	add	r3, r2
 800a5ba:	3384      	adds	r3, #132	@ 0x84
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	68fa      	ldr	r2, [r7, #12]
 800a5c0:	6812      	ldr	r2, [r2, #0]
 800a5c2:	4611      	mov	r1, r2
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	01d2      	lsls	r2, r2, #7
 800a5c8:	440a      	add	r2, r1
 800a5ca:	3284      	adds	r2, #132	@ 0x84
 800a5cc:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a5d0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	68db      	ldr	r3, [r3, #12]
 800a5dc:	0c1b      	lsrs	r3, r3, #16
 800a5de:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a5e2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a5e4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	01db      	lsls	r3, r3, #7
 800a5f0:	440b      	add	r3, r1
 800a5f2:	3384      	adds	r3, #132	@ 0x84
 800a5f4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a5f6:	69fb      	ldr	r3, [r7, #28]
 800a5f8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a5fa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	68da      	ldr	r2, [r3, #12]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	68db      	ldr	r3, [r3, #12]
 800a606:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a60a:	4413      	add	r3, r2
 800a60c:	041b      	lsls	r3, r3, #16
 800a60e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	461a      	mov	r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	01db      	lsls	r3, r3, #7
 800a61a:	4413      	add	r3, r2
 800a61c:	3384      	adds	r3, #132	@ 0x84
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	68fa      	ldr	r2, [r7, #12]
 800a622:	6812      	ldr	r2, [r2, #0]
 800a624:	4611      	mov	r1, r2
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	01d2      	lsls	r2, r2, #7
 800a62a:	440a      	add	r2, r1
 800a62c:	3284      	adds	r2, #132	@ 0x84
 800a62e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a632:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	689a      	ldr	r2, [r3, #8]
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a642:	4413      	add	r3, r2
 800a644:	1c5a      	adds	r2, r3, #1
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4619      	mov	r1, r3
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	01db      	lsls	r3, r3, #7
 800a650:	440b      	add	r3, r1
 800a652:	3384      	adds	r3, #132	@ 0x84
 800a654:	4619      	mov	r1, r3
 800a656:	69fb      	ldr	r3, [r7, #28]
 800a658:	4313      	orrs	r3, r2
 800a65a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	461a      	mov	r2, r3
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	01db      	lsls	r3, r3, #7
 800a666:	4413      	add	r3, r2
 800a668:	3384      	adds	r3, #132	@ 0x84
 800a66a:	691b      	ldr	r3, [r3, #16]
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	6812      	ldr	r2, [r2, #0]
 800a670:	4611      	mov	r1, r2
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	01d2      	lsls	r2, r2, #7
 800a676:	440a      	add	r2, r1
 800a678:	3284      	adds	r2, #132	@ 0x84
 800a67a:	f023 0307 	bic.w	r3, r3, #7
 800a67e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	461a      	mov	r2, r3
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	01db      	lsls	r3, r3, #7
 800a68a:	4413      	add	r3, r2
 800a68c:	3384      	adds	r3, #132	@ 0x84
 800a68e:	461a      	mov	r2, r3
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	691b      	ldr	r3, [r3, #16]
 800a694:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a69c:	021b      	lsls	r3, r3, #8
 800a69e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a6a6:	041b      	lsls	r3, r3, #16
 800a6a8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	699b      	ldr	r3, [r3, #24]
 800a6ae:	061b      	lsls	r3, r3, #24
 800a6b0:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	431a      	orrs	r2, r3
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	431a      	orrs	r2, r3
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	01db      	lsls	r3, r3, #7
 800a6cc:	440b      	add	r3, r1
 800a6ce:	3384      	adds	r3, #132	@ 0x84
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	461a      	mov	r2, r3
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	01db      	lsls	r3, r3, #7
 800a6e2:	4413      	add	r3, r2
 800a6e4:	3384      	adds	r3, #132	@ 0x84
 800a6e6:	695b      	ldr	r3, [r3, #20]
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	6812      	ldr	r2, [r2, #0]
 800a6ec:	4611      	mov	r1, r2
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	01d2      	lsls	r2, r2, #7
 800a6f2:	440a      	add	r2, r1
 800a6f4:	3284      	adds	r2, #132	@ 0x84
 800a6f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a6fa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	461a      	mov	r2, r3
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	01db      	lsls	r3, r3, #7
 800a706:	4413      	add	r3, r2
 800a708:	3384      	adds	r3, #132	@ 0x84
 800a70a:	461a      	mov	r2, r3
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	695b      	ldr	r3, [r3, #20]
 800a710:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	461a      	mov	r2, r3
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	01db      	lsls	r3, r3, #7
 800a71c:	4413      	add	r3, r2
 800a71e:	3384      	adds	r3, #132	@ 0x84
 800a720:	69da      	ldr	r2, [r3, #28]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4619      	mov	r1, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	01db      	lsls	r3, r3, #7
 800a72c:	440b      	add	r3, r1
 800a72e:	3384      	adds	r3, #132	@ 0x84
 800a730:	4619      	mov	r1, r3
 800a732:	4b4f      	ldr	r3, [pc, #316]	@ (800a870 <LTDC_SetConfig+0x2e4>)
 800a734:	4013      	ands	r3, r2
 800a736:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	69da      	ldr	r2, [r3, #28]
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	6a1b      	ldr	r3, [r3, #32]
 800a740:	68f9      	ldr	r1, [r7, #12]
 800a742:	6809      	ldr	r1, [r1, #0]
 800a744:	4608      	mov	r0, r1
 800a746:	6879      	ldr	r1, [r7, #4]
 800a748:	01c9      	lsls	r1, r1, #7
 800a74a:	4401      	add	r1, r0
 800a74c:	3184      	adds	r1, #132	@ 0x84
 800a74e:	4313      	orrs	r3, r2
 800a750:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	461a      	mov	r2, r3
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	01db      	lsls	r3, r3, #7
 800a75c:	4413      	add	r3, r2
 800a75e:	3384      	adds	r3, #132	@ 0x84
 800a760:	461a      	mov	r2, r3
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a766:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	691b      	ldr	r3, [r3, #16]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d102      	bne.n	800a776 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 800a770:	2304      	movs	r3, #4
 800a772:	61fb      	str	r3, [r7, #28]
 800a774:	e01b      	b.n	800a7ae <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	691b      	ldr	r3, [r3, #16]
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d102      	bne.n	800a784 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 800a77e:	2303      	movs	r3, #3
 800a780:	61fb      	str	r3, [r7, #28]
 800a782:	e014      	b.n	800a7ae <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	691b      	ldr	r3, [r3, #16]
 800a788:	2b04      	cmp	r3, #4
 800a78a:	d00b      	beq.n	800a7a4 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a790:	2b02      	cmp	r3, #2
 800a792:	d007      	beq.n	800a7a4 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a798:	2b03      	cmp	r3, #3
 800a79a:	d003      	beq.n	800a7a4 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a7a0:	2b07      	cmp	r3, #7
 800a7a2:	d102      	bne.n	800a7aa <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 800a7a4:	2302      	movs	r3, #2
 800a7a6:	61fb      	str	r3, [r7, #28]
 800a7a8:	e001      	b.n	800a7ae <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	01db      	lsls	r3, r3, #7
 800a7b8:	4413      	add	r3, r2
 800a7ba:	3384      	adds	r3, #132	@ 0x84
 800a7bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	6812      	ldr	r2, [r2, #0]
 800a7c2:	4611      	mov	r1, r2
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	01d2      	lsls	r2, r2, #7
 800a7c8:	440a      	add	r2, r1
 800a7ca:	3284      	adds	r2, #132	@ 0x84
 800a7cc:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800a7d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7d6:	69fa      	ldr	r2, [r7, #28]
 800a7d8:	fb02 f303 	mul.w	r3, r2, r3
 800a7dc:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	6859      	ldr	r1, [r3, #4]
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	1acb      	subs	r3, r1, r3
 800a7e8:	69f9      	ldr	r1, [r7, #28]
 800a7ea:	fb01 f303 	mul.w	r3, r1, r3
 800a7ee:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a7f0:	68f9      	ldr	r1, [r7, #12]
 800a7f2:	6809      	ldr	r1, [r1, #0]
 800a7f4:	4608      	mov	r0, r1
 800a7f6:	6879      	ldr	r1, [r7, #4]
 800a7f8:	01c9      	lsls	r1, r1, #7
 800a7fa:	4401      	add	r1, r0
 800a7fc:	3184      	adds	r1, #132	@ 0x84
 800a7fe:	4313      	orrs	r3, r2
 800a800:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	461a      	mov	r2, r3
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	01db      	lsls	r3, r3, #7
 800a80c:	4413      	add	r3, r2
 800a80e:	3384      	adds	r3, #132	@ 0x84
 800a810:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4619      	mov	r1, r3
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	01db      	lsls	r3, r3, #7
 800a81c:	440b      	add	r3, r1
 800a81e:	3384      	adds	r3, #132	@ 0x84
 800a820:	4619      	mov	r1, r3
 800a822:	4b14      	ldr	r3, [pc, #80]	@ (800a874 <LTDC_SetConfig+0x2e8>)
 800a824:	4013      	ands	r3, r2
 800a826:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	461a      	mov	r2, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	01db      	lsls	r3, r3, #7
 800a832:	4413      	add	r3, r2
 800a834:	3384      	adds	r3, #132	@ 0x84
 800a836:	461a      	mov	r2, r3
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a83c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	461a      	mov	r2, r3
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	01db      	lsls	r3, r3, #7
 800a848:	4413      	add	r3, r2
 800a84a:	3384      	adds	r3, #132	@ 0x84
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	68fa      	ldr	r2, [r7, #12]
 800a850:	6812      	ldr	r2, [r2, #0]
 800a852:	4611      	mov	r1, r2
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	01d2      	lsls	r2, r2, #7
 800a858:	440a      	add	r2, r1
 800a85a:	3284      	adds	r2, #132	@ 0x84
 800a85c:	f043 0301 	orr.w	r3, r3, #1
 800a860:	6013      	str	r3, [r2, #0]
}
 800a862:	bf00      	nop
 800a864:	3724      	adds	r7, #36	@ 0x24
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr
 800a86e:	bf00      	nop
 800a870:	fffff8f8 	.word	0xfffff8f8
 800a874:	fffff800 	.word	0xfffff800

0800a878 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a878:	b480      	push	{r7}
 800a87a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a87c:	4b05      	ldr	r3, [pc, #20]	@ (800a894 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4a04      	ldr	r2, [pc, #16]	@ (800a894 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a882:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a886:	6013      	str	r3, [r2, #0]
}
 800a888:	bf00      	nop
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr
 800a892:	bf00      	nop
 800a894:	40007000 	.word	0x40007000

0800a898 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a8a2:	4b23      	ldr	r3, [pc, #140]	@ (800a930 <HAL_PWREx_EnableOverDrive+0x98>)
 800a8a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8a6:	4a22      	ldr	r2, [pc, #136]	@ (800a930 <HAL_PWREx_EnableOverDrive+0x98>)
 800a8a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a8ac:	6413      	str	r3, [r2, #64]	@ 0x40
 800a8ae:	4b20      	ldr	r3, [pc, #128]	@ (800a930 <HAL_PWREx_EnableOverDrive+0x98>)
 800a8b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a8b6:	603b      	str	r3, [r7, #0]
 800a8b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a8ba:	4b1e      	ldr	r3, [pc, #120]	@ (800a934 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4a1d      	ldr	r2, [pc, #116]	@ (800a934 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a8c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a8c4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a8c6:	f7fb fd49 	bl	800635c <HAL_GetTick>
 800a8ca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a8cc:	e009      	b.n	800a8e2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a8ce:	f7fb fd45 	bl	800635c <HAL_GetTick>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	1ad3      	subs	r3, r2, r3
 800a8d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a8dc:	d901      	bls.n	800a8e2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800a8de:	2303      	movs	r3, #3
 800a8e0:	e022      	b.n	800a928 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a8e2:	4b14      	ldr	r3, [pc, #80]	@ (800a934 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a8ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8ee:	d1ee      	bne.n	800a8ce <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a8f0:	4b10      	ldr	r3, [pc, #64]	@ (800a934 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a0f      	ldr	r2, [pc, #60]	@ (800a934 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a8f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a8fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a8fc:	f7fb fd2e 	bl	800635c <HAL_GetTick>
 800a900:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a902:	e009      	b.n	800a918 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a904:	f7fb fd2a 	bl	800635c <HAL_GetTick>
 800a908:	4602      	mov	r2, r0
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	1ad3      	subs	r3, r2, r3
 800a90e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a912:	d901      	bls.n	800a918 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800a914:	2303      	movs	r3, #3
 800a916:	e007      	b.n	800a928 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a918:	4b06      	ldr	r3, [pc, #24]	@ (800a934 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a920:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a924:	d1ee      	bne.n	800a904 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800a926:	2300      	movs	r3, #0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3708      	adds	r7, #8
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}
 800a930:	40023800 	.word	0x40023800
 800a934:	40007000 	.word	0x40007000

0800a938 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b086      	sub	sp, #24
 800a93c:	af02      	add	r7, sp, #8
 800a93e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a940:	f7fb fd0c 	bl	800635c <HAL_GetTick>
 800a944:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d101      	bne.n	800a950 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	e067      	b.n	800aa20 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a956:	b2db      	uxtb	r3, r3
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d10b      	bne.n	800a974 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f7f9 ffa7 	bl	80048b8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a96a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 f85e 	bl	800aa30 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	3b01      	subs	r3, #1
 800a984:	021a      	lsls	r2, r3, #8
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	430a      	orrs	r2, r1
 800a98c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a992:	9300      	str	r3, [sp, #0]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2200      	movs	r2, #0
 800a998:	2120      	movs	r1, #32
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 f856 	bl	800aa4c <QSPI_WaitFlagStateUntilTimeout>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a9a4:	7afb      	ldrb	r3, [r7, #11]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d135      	bne.n	800aa16 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	4b1d      	ldr	r3, [pc, #116]	@ (800aa28 <HAL_QSPI_Init+0xf0>)
 800a9b2:	4013      	ands	r3, r2
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	6852      	ldr	r2, [r2, #4]
 800a9b8:	0611      	lsls	r1, r2, #24
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	68d2      	ldr	r2, [r2, #12]
 800a9be:	4311      	orrs	r1, r2
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	69d2      	ldr	r2, [r2, #28]
 800a9c4:	4311      	orrs	r1, r2
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	6a12      	ldr	r2, [r2, #32]
 800a9ca:	4311      	orrs	r1, r2
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	6812      	ldr	r2, [r2, #0]
 800a9d0:	430b      	orrs	r3, r1
 800a9d2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	685a      	ldr	r2, [r3, #4]
 800a9da:	4b14      	ldr	r3, [pc, #80]	@ (800aa2c <HAL_QSPI_Init+0xf4>)
 800a9dc:	4013      	ands	r3, r2
 800a9de:	687a      	ldr	r2, [r7, #4]
 800a9e0:	6912      	ldr	r2, [r2, #16]
 800a9e2:	0411      	lsls	r1, r2, #16
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	6952      	ldr	r2, [r2, #20]
 800a9e8:	4311      	orrs	r1, r2
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	6992      	ldr	r2, [r2, #24]
 800a9ee:	4311      	orrs	r1, r2
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	6812      	ldr	r2, [r2, #0]
 800a9f4:	430b      	orrs	r3, r1
 800a9f6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f042 0201 	orr.w	r2, r2, #1
 800aa06:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2201      	movs	r2, #1
 800aa12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800aa1e:	7afb      	ldrb	r3, [r7, #11]
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3710      	adds	r7, #16
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	00ffff2f 	.word	0x00ffff2f
 800aa2c:	ffe0f8fe 	.word	0xffe0f8fe

0800aa30 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b083      	sub	sp, #12
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	683a      	ldr	r2, [r7, #0]
 800aa3e:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800aa40:	bf00      	nop
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	603b      	str	r3, [r7, #0]
 800aa58:	4613      	mov	r3, r2
 800aa5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800aa5c:	e01a      	b.n	800aa94 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa5e:	69bb      	ldr	r3, [r7, #24]
 800aa60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa64:	d016      	beq.n	800aa94 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa66:	f7fb fc79 	bl	800635c <HAL_GetTick>
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	1ad3      	subs	r3, r2, r3
 800aa70:	69ba      	ldr	r2, [r7, #24]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d302      	bcc.n	800aa7c <QSPI_WaitFlagStateUntilTimeout+0x30>
 800aa76:	69bb      	ldr	r3, [r7, #24]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d10b      	bne.n	800aa94 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2204      	movs	r2, #4
 800aa80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa88:	f043 0201 	orr.w	r2, r3, #1
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 800aa90:	2301      	movs	r3, #1
 800aa92:	e00e      	b.n	800aab2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	689a      	ldr	r2, [r3, #8]
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	4013      	ands	r3, r2
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	bf14      	ite	ne
 800aaa2:	2301      	movne	r3, #1
 800aaa4:	2300      	moveq	r3, #0
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	79fb      	ldrb	r3, [r7, #7]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d1d6      	bne.n	800aa5e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aab0:	2300      	movs	r3, #0
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
	...

0800aabc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b086      	sub	sp, #24
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800aac4:	2300      	movs	r3, #0
 800aac6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d101      	bne.n	800aad2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800aace:	2301      	movs	r3, #1
 800aad0:	e291      	b.n	800aff6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f003 0301 	and.w	r3, r3, #1
 800aada:	2b00      	cmp	r3, #0
 800aadc:	f000 8087 	beq.w	800abee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800aae0:	4b96      	ldr	r3, [pc, #600]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	f003 030c 	and.w	r3, r3, #12
 800aae8:	2b04      	cmp	r3, #4
 800aaea:	d00c      	beq.n	800ab06 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aaec:	4b93      	ldr	r3, [pc, #588]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	f003 030c 	and.w	r3, r3, #12
 800aaf4:	2b08      	cmp	r3, #8
 800aaf6:	d112      	bne.n	800ab1e <HAL_RCC_OscConfig+0x62>
 800aaf8:	4b90      	ldr	r3, [pc, #576]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ab00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ab04:	d10b      	bne.n	800ab1e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab06:	4b8d      	ldr	r3, [pc, #564]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d06c      	beq.n	800abec <HAL_RCC_OscConfig+0x130>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d168      	bne.n	800abec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	e26b      	b.n	800aff6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab26:	d106      	bne.n	800ab36 <HAL_RCC_OscConfig+0x7a>
 800ab28:	4b84      	ldr	r3, [pc, #528]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a83      	ldr	r2, [pc, #524]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ab2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab32:	6013      	str	r3, [r2, #0]
 800ab34:	e02e      	b.n	800ab94 <HAL_RCC_OscConfig+0xd8>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d10c      	bne.n	800ab58 <HAL_RCC_OscConfig+0x9c>
 800ab3e:	4b7f      	ldr	r3, [pc, #508]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a7e      	ldr	r2, [pc, #504]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ab44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab48:	6013      	str	r3, [r2, #0]
 800ab4a:	4b7c      	ldr	r3, [pc, #496]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4a7b      	ldr	r2, [pc, #492]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ab50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ab54:	6013      	str	r3, [r2, #0]
 800ab56:	e01d      	b.n	800ab94 <HAL_RCC_OscConfig+0xd8>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ab60:	d10c      	bne.n	800ab7c <HAL_RCC_OscConfig+0xc0>
 800ab62:	4b76      	ldr	r3, [pc, #472]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a75      	ldr	r2, [pc, #468]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ab68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ab6c:	6013      	str	r3, [r2, #0]
 800ab6e:	4b73      	ldr	r3, [pc, #460]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4a72      	ldr	r2, [pc, #456]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ab74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab78:	6013      	str	r3, [r2, #0]
 800ab7a:	e00b      	b.n	800ab94 <HAL_RCC_OscConfig+0xd8>
 800ab7c:	4b6f      	ldr	r3, [pc, #444]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a6e      	ldr	r2, [pc, #440]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ab82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab86:	6013      	str	r3, [r2, #0]
 800ab88:	4b6c      	ldr	r3, [pc, #432]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a6b      	ldr	r2, [pc, #428]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ab8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ab92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d013      	beq.n	800abc4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab9c:	f7fb fbde 	bl	800635c <HAL_GetTick>
 800aba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aba2:	e008      	b.n	800abb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aba4:	f7fb fbda 	bl	800635c <HAL_GetTick>
 800aba8:	4602      	mov	r2, r0
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	1ad3      	subs	r3, r2, r3
 800abae:	2b64      	cmp	r3, #100	@ 0x64
 800abb0:	d901      	bls.n	800abb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800abb2:	2303      	movs	r3, #3
 800abb4:	e21f      	b.n	800aff6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800abb6:	4b61      	ldr	r3, [pc, #388]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d0f0      	beq.n	800aba4 <HAL_RCC_OscConfig+0xe8>
 800abc2:	e014      	b.n	800abee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abc4:	f7fb fbca 	bl	800635c <HAL_GetTick>
 800abc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800abca:	e008      	b.n	800abde <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800abcc:	f7fb fbc6 	bl	800635c <HAL_GetTick>
 800abd0:	4602      	mov	r2, r0
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	1ad3      	subs	r3, r2, r3
 800abd6:	2b64      	cmp	r3, #100	@ 0x64
 800abd8:	d901      	bls.n	800abde <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800abda:	2303      	movs	r3, #3
 800abdc:	e20b      	b.n	800aff6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800abde:	4b57      	ldr	r3, [pc, #348]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d1f0      	bne.n	800abcc <HAL_RCC_OscConfig+0x110>
 800abea:	e000      	b.n	800abee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800abec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f003 0302 	and.w	r3, r3, #2
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d069      	beq.n	800acce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800abfa:	4b50      	ldr	r3, [pc, #320]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	f003 030c 	and.w	r3, r3, #12
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d00b      	beq.n	800ac1e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ac06:	4b4d      	ldr	r3, [pc, #308]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ac08:	689b      	ldr	r3, [r3, #8]
 800ac0a:	f003 030c 	and.w	r3, r3, #12
 800ac0e:	2b08      	cmp	r3, #8
 800ac10:	d11c      	bne.n	800ac4c <HAL_RCC_OscConfig+0x190>
 800ac12:	4b4a      	ldr	r3, [pc, #296]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d116      	bne.n	800ac4c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ac1e:	4b47      	ldr	r3, [pc, #284]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f003 0302 	and.w	r3, r3, #2
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d005      	beq.n	800ac36 <HAL_RCC_OscConfig+0x17a>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d001      	beq.n	800ac36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800ac32:	2301      	movs	r3, #1
 800ac34:	e1df      	b.n	800aff6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac36:	4b41      	ldr	r3, [pc, #260]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	691b      	ldr	r3, [r3, #16]
 800ac42:	00db      	lsls	r3, r3, #3
 800ac44:	493d      	ldr	r1, [pc, #244]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ac46:	4313      	orrs	r3, r2
 800ac48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ac4a:	e040      	b.n	800acce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d023      	beq.n	800ac9c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ac54:	4b39      	ldr	r3, [pc, #228]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a38      	ldr	r2, [pc, #224]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ac5a:	f043 0301 	orr.w	r3, r3, #1
 800ac5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac60:	f7fb fb7c 	bl	800635c <HAL_GetTick>
 800ac64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac66:	e008      	b.n	800ac7a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac68:	f7fb fb78 	bl	800635c <HAL_GetTick>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	1ad3      	subs	r3, r2, r3
 800ac72:	2b02      	cmp	r3, #2
 800ac74:	d901      	bls.n	800ac7a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800ac76:	2303      	movs	r3, #3
 800ac78:	e1bd      	b.n	800aff6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac7a:	4b30      	ldr	r3, [pc, #192]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f003 0302 	and.w	r3, r3, #2
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d0f0      	beq.n	800ac68 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac86:	4b2d      	ldr	r3, [pc, #180]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	691b      	ldr	r3, [r3, #16]
 800ac92:	00db      	lsls	r3, r3, #3
 800ac94:	4929      	ldr	r1, [pc, #164]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ac96:	4313      	orrs	r3, r2
 800ac98:	600b      	str	r3, [r1, #0]
 800ac9a:	e018      	b.n	800acce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ac9c:	4b27      	ldr	r3, [pc, #156]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a26      	ldr	r2, [pc, #152]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800aca2:	f023 0301 	bic.w	r3, r3, #1
 800aca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aca8:	f7fb fb58 	bl	800635c <HAL_GetTick>
 800acac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800acae:	e008      	b.n	800acc2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800acb0:	f7fb fb54 	bl	800635c <HAL_GetTick>
 800acb4:	4602      	mov	r2, r0
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	1ad3      	subs	r3, r2, r3
 800acba:	2b02      	cmp	r3, #2
 800acbc:	d901      	bls.n	800acc2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800acbe:	2303      	movs	r3, #3
 800acc0:	e199      	b.n	800aff6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800acc2:	4b1e      	ldr	r3, [pc, #120]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f003 0302 	and.w	r3, r3, #2
 800acca:	2b00      	cmp	r3, #0
 800accc:	d1f0      	bne.n	800acb0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f003 0308 	and.w	r3, r3, #8
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d038      	beq.n	800ad4c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	695b      	ldr	r3, [r3, #20]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d019      	beq.n	800ad16 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ace2:	4b16      	ldr	r3, [pc, #88]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ace4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ace6:	4a15      	ldr	r2, [pc, #84]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ace8:	f043 0301 	orr.w	r3, r3, #1
 800acec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acee:	f7fb fb35 	bl	800635c <HAL_GetTick>
 800acf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800acf4:	e008      	b.n	800ad08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800acf6:	f7fb fb31 	bl	800635c <HAL_GetTick>
 800acfa:	4602      	mov	r2, r0
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	1ad3      	subs	r3, r2, r3
 800ad00:	2b02      	cmp	r3, #2
 800ad02:	d901      	bls.n	800ad08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ad04:	2303      	movs	r3, #3
 800ad06:	e176      	b.n	800aff6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ad08:	4b0c      	ldr	r3, [pc, #48]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ad0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad0c:	f003 0302 	and.w	r3, r3, #2
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d0f0      	beq.n	800acf6 <HAL_RCC_OscConfig+0x23a>
 800ad14:	e01a      	b.n	800ad4c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ad16:	4b09      	ldr	r3, [pc, #36]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ad18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad1a:	4a08      	ldr	r2, [pc, #32]	@ (800ad3c <HAL_RCC_OscConfig+0x280>)
 800ad1c:	f023 0301 	bic.w	r3, r3, #1
 800ad20:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad22:	f7fb fb1b 	bl	800635c <HAL_GetTick>
 800ad26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ad28:	e00a      	b.n	800ad40 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ad2a:	f7fb fb17 	bl	800635c <HAL_GetTick>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	1ad3      	subs	r3, r2, r3
 800ad34:	2b02      	cmp	r3, #2
 800ad36:	d903      	bls.n	800ad40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800ad38:	2303      	movs	r3, #3
 800ad3a:	e15c      	b.n	800aff6 <HAL_RCC_OscConfig+0x53a>
 800ad3c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ad40:	4b91      	ldr	r3, [pc, #580]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800ad42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad44:	f003 0302 	and.w	r3, r3, #2
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d1ee      	bne.n	800ad2a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f003 0304 	and.w	r3, r3, #4
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	f000 80a4 	beq.w	800aea2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ad5a:	4b8b      	ldr	r3, [pc, #556]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800ad5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d10d      	bne.n	800ad82 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800ad66:	4b88      	ldr	r3, [pc, #544]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800ad68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad6a:	4a87      	ldr	r2, [pc, #540]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800ad6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad70:	6413      	str	r3, [r2, #64]	@ 0x40
 800ad72:	4b85      	ldr	r3, [pc, #532]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800ad74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad7a:	60bb      	str	r3, [r7, #8]
 800ad7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ad82:	4b82      	ldr	r3, [pc, #520]	@ (800af8c <HAL_RCC_OscConfig+0x4d0>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d118      	bne.n	800adc0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800ad8e:	4b7f      	ldr	r3, [pc, #508]	@ (800af8c <HAL_RCC_OscConfig+0x4d0>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a7e      	ldr	r2, [pc, #504]	@ (800af8c <HAL_RCC_OscConfig+0x4d0>)
 800ad94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ad9a:	f7fb fadf 	bl	800635c <HAL_GetTick>
 800ad9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ada0:	e008      	b.n	800adb4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ada2:	f7fb fadb 	bl	800635c <HAL_GetTick>
 800ada6:	4602      	mov	r2, r0
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	1ad3      	subs	r3, r2, r3
 800adac:	2b64      	cmp	r3, #100	@ 0x64
 800adae:	d901      	bls.n	800adb4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800adb0:	2303      	movs	r3, #3
 800adb2:	e120      	b.n	800aff6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800adb4:	4b75      	ldr	r3, [pc, #468]	@ (800af8c <HAL_RCC_OscConfig+0x4d0>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d0f0      	beq.n	800ada2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d106      	bne.n	800add6 <HAL_RCC_OscConfig+0x31a>
 800adc8:	4b6f      	ldr	r3, [pc, #444]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800adca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adcc:	4a6e      	ldr	r2, [pc, #440]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800adce:	f043 0301 	orr.w	r3, r3, #1
 800add2:	6713      	str	r3, [r2, #112]	@ 0x70
 800add4:	e02d      	b.n	800ae32 <HAL_RCC_OscConfig+0x376>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d10c      	bne.n	800adf8 <HAL_RCC_OscConfig+0x33c>
 800adde:	4b6a      	ldr	r3, [pc, #424]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800ade0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ade2:	4a69      	ldr	r2, [pc, #420]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800ade4:	f023 0301 	bic.w	r3, r3, #1
 800ade8:	6713      	str	r3, [r2, #112]	@ 0x70
 800adea:	4b67      	ldr	r3, [pc, #412]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800adec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adee:	4a66      	ldr	r2, [pc, #408]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800adf0:	f023 0304 	bic.w	r3, r3, #4
 800adf4:	6713      	str	r3, [r2, #112]	@ 0x70
 800adf6:	e01c      	b.n	800ae32 <HAL_RCC_OscConfig+0x376>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	2b05      	cmp	r3, #5
 800adfe:	d10c      	bne.n	800ae1a <HAL_RCC_OscConfig+0x35e>
 800ae00:	4b61      	ldr	r3, [pc, #388]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800ae02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae04:	4a60      	ldr	r2, [pc, #384]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800ae06:	f043 0304 	orr.w	r3, r3, #4
 800ae0a:	6713      	str	r3, [r2, #112]	@ 0x70
 800ae0c:	4b5e      	ldr	r3, [pc, #376]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800ae0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae10:	4a5d      	ldr	r2, [pc, #372]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800ae12:	f043 0301 	orr.w	r3, r3, #1
 800ae16:	6713      	str	r3, [r2, #112]	@ 0x70
 800ae18:	e00b      	b.n	800ae32 <HAL_RCC_OscConfig+0x376>
 800ae1a:	4b5b      	ldr	r3, [pc, #364]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800ae1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae1e:	4a5a      	ldr	r2, [pc, #360]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800ae20:	f023 0301 	bic.w	r3, r3, #1
 800ae24:	6713      	str	r3, [r2, #112]	@ 0x70
 800ae26:	4b58      	ldr	r3, [pc, #352]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800ae28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae2a:	4a57      	ldr	r2, [pc, #348]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800ae2c:	f023 0304 	bic.w	r3, r3, #4
 800ae30:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d015      	beq.n	800ae66 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae3a:	f7fb fa8f 	bl	800635c <HAL_GetTick>
 800ae3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae40:	e00a      	b.n	800ae58 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae42:	f7fb fa8b 	bl	800635c <HAL_GetTick>
 800ae46:	4602      	mov	r2, r0
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	1ad3      	subs	r3, r2, r3
 800ae4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d901      	bls.n	800ae58 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800ae54:	2303      	movs	r3, #3
 800ae56:	e0ce      	b.n	800aff6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae58:	4b4b      	ldr	r3, [pc, #300]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800ae5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae5c:	f003 0302 	and.w	r3, r3, #2
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d0ee      	beq.n	800ae42 <HAL_RCC_OscConfig+0x386>
 800ae64:	e014      	b.n	800ae90 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae66:	f7fb fa79 	bl	800635c <HAL_GetTick>
 800ae6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ae6c:	e00a      	b.n	800ae84 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae6e:	f7fb fa75 	bl	800635c <HAL_GetTick>
 800ae72:	4602      	mov	r2, r0
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	1ad3      	subs	r3, r2, r3
 800ae78:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d901      	bls.n	800ae84 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800ae80:	2303      	movs	r3, #3
 800ae82:	e0b8      	b.n	800aff6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ae84:	4b40      	ldr	r3, [pc, #256]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800ae86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae88:	f003 0302 	and.w	r3, r3, #2
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d1ee      	bne.n	800ae6e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ae90:	7dfb      	ldrb	r3, [r7, #23]
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d105      	bne.n	800aea2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ae96:	4b3c      	ldr	r3, [pc, #240]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800ae98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae9a:	4a3b      	ldr	r2, [pc, #236]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800ae9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aea0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	699b      	ldr	r3, [r3, #24]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	f000 80a4 	beq.w	800aff4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aeac:	4b36      	ldr	r3, [pc, #216]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800aeae:	689b      	ldr	r3, [r3, #8]
 800aeb0:	f003 030c 	and.w	r3, r3, #12
 800aeb4:	2b08      	cmp	r3, #8
 800aeb6:	d06b      	beq.n	800af90 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	699b      	ldr	r3, [r3, #24]
 800aebc:	2b02      	cmp	r3, #2
 800aebe:	d149      	bne.n	800af54 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aec0:	4b31      	ldr	r3, [pc, #196]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a30      	ldr	r2, [pc, #192]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800aec6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aeca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aecc:	f7fb fa46 	bl	800635c <HAL_GetTick>
 800aed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aed2:	e008      	b.n	800aee6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aed4:	f7fb fa42 	bl	800635c <HAL_GetTick>
 800aed8:	4602      	mov	r2, r0
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	1ad3      	subs	r3, r2, r3
 800aede:	2b02      	cmp	r3, #2
 800aee0:	d901      	bls.n	800aee6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800aee2:	2303      	movs	r3, #3
 800aee4:	e087      	b.n	800aff6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aee6:	4b28      	ldr	r3, [pc, #160]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1f0      	bne.n	800aed4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	69da      	ldr	r2, [r3, #28]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6a1b      	ldr	r3, [r3, #32]
 800aefa:	431a      	orrs	r2, r3
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af00:	019b      	lsls	r3, r3, #6
 800af02:	431a      	orrs	r2, r3
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af08:	085b      	lsrs	r3, r3, #1
 800af0a:	3b01      	subs	r3, #1
 800af0c:	041b      	lsls	r3, r3, #16
 800af0e:	431a      	orrs	r2, r3
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af14:	061b      	lsls	r3, r3, #24
 800af16:	4313      	orrs	r3, r2
 800af18:	4a1b      	ldr	r2, [pc, #108]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800af1a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800af1e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800af20:	4b19      	ldr	r3, [pc, #100]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4a18      	ldr	r2, [pc, #96]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800af26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800af2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af2c:	f7fb fa16 	bl	800635c <HAL_GetTick>
 800af30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800af32:	e008      	b.n	800af46 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af34:	f7fb fa12 	bl	800635c <HAL_GetTick>
 800af38:	4602      	mov	r2, r0
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	1ad3      	subs	r3, r2, r3
 800af3e:	2b02      	cmp	r3, #2
 800af40:	d901      	bls.n	800af46 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800af42:	2303      	movs	r3, #3
 800af44:	e057      	b.n	800aff6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800af46:	4b10      	ldr	r3, [pc, #64]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d0f0      	beq.n	800af34 <HAL_RCC_OscConfig+0x478>
 800af52:	e04f      	b.n	800aff4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af54:	4b0c      	ldr	r3, [pc, #48]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a0b      	ldr	r2, [pc, #44]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800af5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800af5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af60:	f7fb f9fc 	bl	800635c <HAL_GetTick>
 800af64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800af66:	e008      	b.n	800af7a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af68:	f7fb f9f8 	bl	800635c <HAL_GetTick>
 800af6c:	4602      	mov	r2, r0
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	1ad3      	subs	r3, r2, r3
 800af72:	2b02      	cmp	r3, #2
 800af74:	d901      	bls.n	800af7a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800af76:	2303      	movs	r3, #3
 800af78:	e03d      	b.n	800aff6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800af7a:	4b03      	ldr	r3, [pc, #12]	@ (800af88 <HAL_RCC_OscConfig+0x4cc>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af82:	2b00      	cmp	r3, #0
 800af84:	d1f0      	bne.n	800af68 <HAL_RCC_OscConfig+0x4ac>
 800af86:	e035      	b.n	800aff4 <HAL_RCC_OscConfig+0x538>
 800af88:	40023800 	.word	0x40023800
 800af8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800af90:	4b1b      	ldr	r3, [pc, #108]	@ (800b000 <HAL_RCC_OscConfig+0x544>)
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	699b      	ldr	r3, [r3, #24]
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d028      	beq.n	800aff0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d121      	bne.n	800aff0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d11a      	bne.n	800aff0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800afba:	68fa      	ldr	r2, [r7, #12]
 800afbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800afc0:	4013      	ands	r3, r2
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800afc6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800afc8:	4293      	cmp	r3, r2
 800afca:	d111      	bne.n	800aff0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afd6:	085b      	lsrs	r3, r3, #1
 800afd8:	3b01      	subs	r3, #1
 800afda:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800afdc:	429a      	cmp	r2, r3
 800afde:	d107      	bne.n	800aff0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800afec:	429a      	cmp	r2, r3
 800afee:	d001      	beq.n	800aff4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800aff0:	2301      	movs	r3, #1
 800aff2:	e000      	b.n	800aff6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800aff4:	2300      	movs	r3, #0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3718      	adds	r7, #24
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	40023800 	.word	0x40023800

0800b004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b00e:	2300      	movs	r3, #0
 800b010:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d101      	bne.n	800b01c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b018:	2301      	movs	r3, #1
 800b01a:	e0d0      	b.n	800b1be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b01c:	4b6a      	ldr	r3, [pc, #424]	@ (800b1c8 <HAL_RCC_ClockConfig+0x1c4>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f003 030f 	and.w	r3, r3, #15
 800b024:	683a      	ldr	r2, [r7, #0]
 800b026:	429a      	cmp	r2, r3
 800b028:	d910      	bls.n	800b04c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b02a:	4b67      	ldr	r3, [pc, #412]	@ (800b1c8 <HAL_RCC_ClockConfig+0x1c4>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f023 020f 	bic.w	r2, r3, #15
 800b032:	4965      	ldr	r1, [pc, #404]	@ (800b1c8 <HAL_RCC_ClockConfig+0x1c4>)
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	4313      	orrs	r3, r2
 800b038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b03a:	4b63      	ldr	r3, [pc, #396]	@ (800b1c8 <HAL_RCC_ClockConfig+0x1c4>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f003 030f 	and.w	r3, r3, #15
 800b042:	683a      	ldr	r2, [r7, #0]
 800b044:	429a      	cmp	r2, r3
 800b046:	d001      	beq.n	800b04c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b048:	2301      	movs	r3, #1
 800b04a:	e0b8      	b.n	800b1be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f003 0302 	and.w	r3, r3, #2
 800b054:	2b00      	cmp	r3, #0
 800b056:	d020      	beq.n	800b09a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f003 0304 	and.w	r3, r3, #4
 800b060:	2b00      	cmp	r3, #0
 800b062:	d005      	beq.n	800b070 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b064:	4b59      	ldr	r3, [pc, #356]	@ (800b1cc <HAL_RCC_ClockConfig+0x1c8>)
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	4a58      	ldr	r2, [pc, #352]	@ (800b1cc <HAL_RCC_ClockConfig+0x1c8>)
 800b06a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b06e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f003 0308 	and.w	r3, r3, #8
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d005      	beq.n	800b088 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b07c:	4b53      	ldr	r3, [pc, #332]	@ (800b1cc <HAL_RCC_ClockConfig+0x1c8>)
 800b07e:	689b      	ldr	r3, [r3, #8]
 800b080:	4a52      	ldr	r2, [pc, #328]	@ (800b1cc <HAL_RCC_ClockConfig+0x1c8>)
 800b082:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b086:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b088:	4b50      	ldr	r3, [pc, #320]	@ (800b1cc <HAL_RCC_ClockConfig+0x1c8>)
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	689b      	ldr	r3, [r3, #8]
 800b094:	494d      	ldr	r1, [pc, #308]	@ (800b1cc <HAL_RCC_ClockConfig+0x1c8>)
 800b096:	4313      	orrs	r3, r2
 800b098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f003 0301 	and.w	r3, r3, #1
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d040      	beq.n	800b128 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d107      	bne.n	800b0be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b0ae:	4b47      	ldr	r3, [pc, #284]	@ (800b1cc <HAL_RCC_ClockConfig+0x1c8>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d115      	bne.n	800b0e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	e07f      	b.n	800b1be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	2b02      	cmp	r3, #2
 800b0c4:	d107      	bne.n	800b0d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0c6:	4b41      	ldr	r3, [pc, #260]	@ (800b1cc <HAL_RCC_ClockConfig+0x1c8>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d109      	bne.n	800b0e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e073      	b.n	800b1be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b0d6:	4b3d      	ldr	r3, [pc, #244]	@ (800b1cc <HAL_RCC_ClockConfig+0x1c8>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f003 0302 	and.w	r3, r3, #2
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d101      	bne.n	800b0e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	e06b      	b.n	800b1be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b0e6:	4b39      	ldr	r3, [pc, #228]	@ (800b1cc <HAL_RCC_ClockConfig+0x1c8>)
 800b0e8:	689b      	ldr	r3, [r3, #8]
 800b0ea:	f023 0203 	bic.w	r2, r3, #3
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	4936      	ldr	r1, [pc, #216]	@ (800b1cc <HAL_RCC_ClockConfig+0x1c8>)
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0f8:	f7fb f930 	bl	800635c <HAL_GetTick>
 800b0fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b0fe:	e00a      	b.n	800b116 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b100:	f7fb f92c 	bl	800635c <HAL_GetTick>
 800b104:	4602      	mov	r2, r0
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	1ad3      	subs	r3, r2, r3
 800b10a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b10e:	4293      	cmp	r3, r2
 800b110:	d901      	bls.n	800b116 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800b112:	2303      	movs	r3, #3
 800b114:	e053      	b.n	800b1be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b116:	4b2d      	ldr	r3, [pc, #180]	@ (800b1cc <HAL_RCC_ClockConfig+0x1c8>)
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	f003 020c 	and.w	r2, r3, #12
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	009b      	lsls	r3, r3, #2
 800b124:	429a      	cmp	r2, r3
 800b126:	d1eb      	bne.n	800b100 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b128:	4b27      	ldr	r3, [pc, #156]	@ (800b1c8 <HAL_RCC_ClockConfig+0x1c4>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f003 030f 	and.w	r3, r3, #15
 800b130:	683a      	ldr	r2, [r7, #0]
 800b132:	429a      	cmp	r2, r3
 800b134:	d210      	bcs.n	800b158 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b136:	4b24      	ldr	r3, [pc, #144]	@ (800b1c8 <HAL_RCC_ClockConfig+0x1c4>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f023 020f 	bic.w	r2, r3, #15
 800b13e:	4922      	ldr	r1, [pc, #136]	@ (800b1c8 <HAL_RCC_ClockConfig+0x1c4>)
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	4313      	orrs	r3, r2
 800b144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b146:	4b20      	ldr	r3, [pc, #128]	@ (800b1c8 <HAL_RCC_ClockConfig+0x1c4>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f003 030f 	and.w	r3, r3, #15
 800b14e:	683a      	ldr	r2, [r7, #0]
 800b150:	429a      	cmp	r2, r3
 800b152:	d001      	beq.n	800b158 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800b154:	2301      	movs	r3, #1
 800b156:	e032      	b.n	800b1be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f003 0304 	and.w	r3, r3, #4
 800b160:	2b00      	cmp	r3, #0
 800b162:	d008      	beq.n	800b176 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b164:	4b19      	ldr	r3, [pc, #100]	@ (800b1cc <HAL_RCC_ClockConfig+0x1c8>)
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	68db      	ldr	r3, [r3, #12]
 800b170:	4916      	ldr	r1, [pc, #88]	@ (800b1cc <HAL_RCC_ClockConfig+0x1c8>)
 800b172:	4313      	orrs	r3, r2
 800b174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f003 0308 	and.w	r3, r3, #8
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d009      	beq.n	800b196 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b182:	4b12      	ldr	r3, [pc, #72]	@ (800b1cc <HAL_RCC_ClockConfig+0x1c8>)
 800b184:	689b      	ldr	r3, [r3, #8]
 800b186:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	691b      	ldr	r3, [r3, #16]
 800b18e:	00db      	lsls	r3, r3, #3
 800b190:	490e      	ldr	r1, [pc, #56]	@ (800b1cc <HAL_RCC_ClockConfig+0x1c8>)
 800b192:	4313      	orrs	r3, r2
 800b194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b196:	f000 f821 	bl	800b1dc <HAL_RCC_GetSysClockFreq>
 800b19a:	4602      	mov	r2, r0
 800b19c:	4b0b      	ldr	r3, [pc, #44]	@ (800b1cc <HAL_RCC_ClockConfig+0x1c8>)
 800b19e:	689b      	ldr	r3, [r3, #8]
 800b1a0:	091b      	lsrs	r3, r3, #4
 800b1a2:	f003 030f 	and.w	r3, r3, #15
 800b1a6:	490a      	ldr	r1, [pc, #40]	@ (800b1d0 <HAL_RCC_ClockConfig+0x1cc>)
 800b1a8:	5ccb      	ldrb	r3, [r1, r3]
 800b1aa:	fa22 f303 	lsr.w	r3, r2, r3
 800b1ae:	4a09      	ldr	r2, [pc, #36]	@ (800b1d4 <HAL_RCC_ClockConfig+0x1d0>)
 800b1b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b1b2:	4b09      	ldr	r3, [pc, #36]	@ (800b1d8 <HAL_RCC_ClockConfig+0x1d4>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7fa f88c 	bl	80052d4 <HAL_InitTick>

  return HAL_OK;
 800b1bc:	2300      	movs	r3, #0
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3710      	adds	r7, #16
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	40023c00 	.word	0x40023c00
 800b1cc:	40023800 	.word	0x40023800
 800b1d0:	0801c1e4 	.word	0x0801c1e4
 800b1d4:	2000001c 	.word	0x2000001c
 800b1d8:	2000006c 	.word	0x2000006c

0800b1dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b1dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1e0:	b090      	sub	sp, #64	@ 0x40
 800b1e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b1f4:	4b59      	ldr	r3, [pc, #356]	@ (800b35c <HAL_RCC_GetSysClockFreq+0x180>)
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	f003 030c 	and.w	r3, r3, #12
 800b1fc:	2b08      	cmp	r3, #8
 800b1fe:	d00d      	beq.n	800b21c <HAL_RCC_GetSysClockFreq+0x40>
 800b200:	2b08      	cmp	r3, #8
 800b202:	f200 80a1 	bhi.w	800b348 <HAL_RCC_GetSysClockFreq+0x16c>
 800b206:	2b00      	cmp	r3, #0
 800b208:	d002      	beq.n	800b210 <HAL_RCC_GetSysClockFreq+0x34>
 800b20a:	2b04      	cmp	r3, #4
 800b20c:	d003      	beq.n	800b216 <HAL_RCC_GetSysClockFreq+0x3a>
 800b20e:	e09b      	b.n	800b348 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b210:	4b53      	ldr	r3, [pc, #332]	@ (800b360 <HAL_RCC_GetSysClockFreq+0x184>)
 800b212:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b214:	e09b      	b.n	800b34e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b216:	4b53      	ldr	r3, [pc, #332]	@ (800b364 <HAL_RCC_GetSysClockFreq+0x188>)
 800b218:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b21a:	e098      	b.n	800b34e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b21c:	4b4f      	ldr	r3, [pc, #316]	@ (800b35c <HAL_RCC_GetSysClockFreq+0x180>)
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b224:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b226:	4b4d      	ldr	r3, [pc, #308]	@ (800b35c <HAL_RCC_GetSysClockFreq+0x180>)
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d028      	beq.n	800b284 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b232:	4b4a      	ldr	r3, [pc, #296]	@ (800b35c <HAL_RCC_GetSysClockFreq+0x180>)
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	099b      	lsrs	r3, r3, #6
 800b238:	2200      	movs	r2, #0
 800b23a:	623b      	str	r3, [r7, #32]
 800b23c:	627a      	str	r2, [r7, #36]	@ 0x24
 800b23e:	6a3b      	ldr	r3, [r7, #32]
 800b240:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800b244:	2100      	movs	r1, #0
 800b246:	4b47      	ldr	r3, [pc, #284]	@ (800b364 <HAL_RCC_GetSysClockFreq+0x188>)
 800b248:	fb03 f201 	mul.w	r2, r3, r1
 800b24c:	2300      	movs	r3, #0
 800b24e:	fb00 f303 	mul.w	r3, r0, r3
 800b252:	4413      	add	r3, r2
 800b254:	4a43      	ldr	r2, [pc, #268]	@ (800b364 <HAL_RCC_GetSysClockFreq+0x188>)
 800b256:	fba0 1202 	umull	r1, r2, r0, r2
 800b25a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b25c:	460a      	mov	r2, r1
 800b25e:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b260:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b262:	4413      	add	r3, r2
 800b264:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b268:	2200      	movs	r2, #0
 800b26a:	61bb      	str	r3, [r7, #24]
 800b26c:	61fa      	str	r2, [r7, #28]
 800b26e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b272:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800b276:	f7f5 f833 	bl	80002e0 <__aeabi_uldivmod>
 800b27a:	4602      	mov	r2, r0
 800b27c:	460b      	mov	r3, r1
 800b27e:	4613      	mov	r3, r2
 800b280:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b282:	e053      	b.n	800b32c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b284:	4b35      	ldr	r3, [pc, #212]	@ (800b35c <HAL_RCC_GetSysClockFreq+0x180>)
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	099b      	lsrs	r3, r3, #6
 800b28a:	2200      	movs	r2, #0
 800b28c:	613b      	str	r3, [r7, #16]
 800b28e:	617a      	str	r2, [r7, #20]
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800b296:	f04f 0b00 	mov.w	fp, #0
 800b29a:	4652      	mov	r2, sl
 800b29c:	465b      	mov	r3, fp
 800b29e:	f04f 0000 	mov.w	r0, #0
 800b2a2:	f04f 0100 	mov.w	r1, #0
 800b2a6:	0159      	lsls	r1, r3, #5
 800b2a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b2ac:	0150      	lsls	r0, r2, #5
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	ebb2 080a 	subs.w	r8, r2, sl
 800b2b6:	eb63 090b 	sbc.w	r9, r3, fp
 800b2ba:	f04f 0200 	mov.w	r2, #0
 800b2be:	f04f 0300 	mov.w	r3, #0
 800b2c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800b2c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800b2ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800b2ce:	ebb2 0408 	subs.w	r4, r2, r8
 800b2d2:	eb63 0509 	sbc.w	r5, r3, r9
 800b2d6:	f04f 0200 	mov.w	r2, #0
 800b2da:	f04f 0300 	mov.w	r3, #0
 800b2de:	00eb      	lsls	r3, r5, #3
 800b2e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b2e4:	00e2      	lsls	r2, r4, #3
 800b2e6:	4614      	mov	r4, r2
 800b2e8:	461d      	mov	r5, r3
 800b2ea:	eb14 030a 	adds.w	r3, r4, sl
 800b2ee:	603b      	str	r3, [r7, #0]
 800b2f0:	eb45 030b 	adc.w	r3, r5, fp
 800b2f4:	607b      	str	r3, [r7, #4]
 800b2f6:	f04f 0200 	mov.w	r2, #0
 800b2fa:	f04f 0300 	mov.w	r3, #0
 800b2fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b302:	4629      	mov	r1, r5
 800b304:	028b      	lsls	r3, r1, #10
 800b306:	4621      	mov	r1, r4
 800b308:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b30c:	4621      	mov	r1, r4
 800b30e:	028a      	lsls	r2, r1, #10
 800b310:	4610      	mov	r0, r2
 800b312:	4619      	mov	r1, r3
 800b314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b316:	2200      	movs	r2, #0
 800b318:	60bb      	str	r3, [r7, #8]
 800b31a:	60fa      	str	r2, [r7, #12]
 800b31c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b320:	f7f4 ffde 	bl	80002e0 <__aeabi_uldivmod>
 800b324:	4602      	mov	r2, r0
 800b326:	460b      	mov	r3, r1
 800b328:	4613      	mov	r3, r2
 800b32a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800b32c:	4b0b      	ldr	r3, [pc, #44]	@ (800b35c <HAL_RCC_GetSysClockFreq+0x180>)
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	0c1b      	lsrs	r3, r3, #16
 800b332:	f003 0303 	and.w	r3, r3, #3
 800b336:	3301      	adds	r3, #1
 800b338:	005b      	lsls	r3, r3, #1
 800b33a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800b33c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b340:	fbb2 f3f3 	udiv	r3, r2, r3
 800b344:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b346:	e002      	b.n	800b34e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b348:	4b05      	ldr	r3, [pc, #20]	@ (800b360 <HAL_RCC_GetSysClockFreq+0x184>)
 800b34a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b34c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b34e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800b350:	4618      	mov	r0, r3
 800b352:	3740      	adds	r7, #64	@ 0x40
 800b354:	46bd      	mov	sp, r7
 800b356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b35a:	bf00      	nop
 800b35c:	40023800 	.word	0x40023800
 800b360:	00f42400 	.word	0x00f42400
 800b364:	017d7840 	.word	0x017d7840

0800b368 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b368:	b480      	push	{r7}
 800b36a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b36c:	4b03      	ldr	r3, [pc, #12]	@ (800b37c <HAL_RCC_GetHCLKFreq+0x14>)
 800b36e:	681b      	ldr	r3, [r3, #0]
}
 800b370:	4618      	mov	r0, r3
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop
 800b37c:	2000001c 	.word	0x2000001c

0800b380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b384:	f7ff fff0 	bl	800b368 <HAL_RCC_GetHCLKFreq>
 800b388:	4602      	mov	r2, r0
 800b38a:	4b05      	ldr	r3, [pc, #20]	@ (800b3a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b38c:	689b      	ldr	r3, [r3, #8]
 800b38e:	0a9b      	lsrs	r3, r3, #10
 800b390:	f003 0307 	and.w	r3, r3, #7
 800b394:	4903      	ldr	r1, [pc, #12]	@ (800b3a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b396:	5ccb      	ldrb	r3, [r1, r3]
 800b398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	40023800 	.word	0x40023800
 800b3a4:	0801c1f4 	.word	0x0801c1f4

0800b3a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b3ac:	f7ff ffdc 	bl	800b368 <HAL_RCC_GetHCLKFreq>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	4b05      	ldr	r3, [pc, #20]	@ (800b3c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	0b5b      	lsrs	r3, r3, #13
 800b3b8:	f003 0307 	and.w	r3, r3, #7
 800b3bc:	4903      	ldr	r1, [pc, #12]	@ (800b3cc <HAL_RCC_GetPCLK2Freq+0x24>)
 800b3be:	5ccb      	ldrb	r3, [r1, r3]
 800b3c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	bd80      	pop	{r7, pc}
 800b3c8:	40023800 	.word	0x40023800
 800b3cc:	0801c1f4 	.word	0x0801c1f4

0800b3d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b083      	sub	sp, #12
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	220f      	movs	r2, #15
 800b3de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b3e0:	4b12      	ldr	r3, [pc, #72]	@ (800b42c <HAL_RCC_GetClockConfig+0x5c>)
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	f003 0203 	and.w	r2, r3, #3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b3ec:	4b0f      	ldr	r3, [pc, #60]	@ (800b42c <HAL_RCC_GetClockConfig+0x5c>)
 800b3ee:	689b      	ldr	r3, [r3, #8]
 800b3f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b3f8:	4b0c      	ldr	r3, [pc, #48]	@ (800b42c <HAL_RCC_GetClockConfig+0x5c>)
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800b404:	4b09      	ldr	r3, [pc, #36]	@ (800b42c <HAL_RCC_GetClockConfig+0x5c>)
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	08db      	lsrs	r3, r3, #3
 800b40a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b412:	4b07      	ldr	r3, [pc, #28]	@ (800b430 <HAL_RCC_GetClockConfig+0x60>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f003 020f 	and.w	r2, r3, #15
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	601a      	str	r2, [r3, #0]
}
 800b41e:	bf00      	nop
 800b420:	370c      	adds	r7, #12
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr
 800b42a:	bf00      	nop
 800b42c:	40023800 	.word	0x40023800
 800b430:	40023c00 	.word	0x40023c00

0800b434 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b088      	sub	sp, #32
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b43c:	2300      	movs	r3, #0
 800b43e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800b440:	2300      	movs	r3, #0
 800b442:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800b444:	2300      	movs	r3, #0
 800b446:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800b448:	2300      	movs	r3, #0
 800b44a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800b44c:	2300      	movs	r3, #0
 800b44e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f003 0301 	and.w	r3, r3, #1
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d012      	beq.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b45c:	4b69      	ldr	r3, [pc, #420]	@ (800b604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b45e:	689b      	ldr	r3, [r3, #8]
 800b460:	4a68      	ldr	r2, [pc, #416]	@ (800b604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b462:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b466:	6093      	str	r3, [r2, #8]
 800b468:	4b66      	ldr	r3, [pc, #408]	@ (800b604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b46a:	689a      	ldr	r2, [r3, #8]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b470:	4964      	ldr	r1, [pc, #400]	@ (800b604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b472:	4313      	orrs	r3, r2
 800b474:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d101      	bne.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800b47e:	2301      	movs	r3, #1
 800b480:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d017      	beq.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b48e:	4b5d      	ldr	r3, [pc, #372]	@ (800b604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b490:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b494:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b49c:	4959      	ldr	r1, [pc, #356]	@ (800b604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b4ac:	d101      	bne.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d101      	bne.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d017      	beq.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b4ca:	4b4e      	ldr	r3, [pc, #312]	@ (800b604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b4cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b4d0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4d8:	494a      	ldr	r1, [pc, #296]	@ (800b604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b4e8:	d101      	bne.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d101      	bne.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b502:	2b00      	cmp	r3, #0
 800b504:	d001      	beq.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800b506:	2301      	movs	r3, #1
 800b508:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f003 0320 	and.w	r3, r3, #32
 800b512:	2b00      	cmp	r3, #0
 800b514:	f000 808b 	beq.w	800b62e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b518:	4b3a      	ldr	r3, [pc, #232]	@ (800b604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b51a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b51c:	4a39      	ldr	r2, [pc, #228]	@ (800b604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b51e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b522:	6413      	str	r3, [r2, #64]	@ 0x40
 800b524:	4b37      	ldr	r3, [pc, #220]	@ (800b604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b52c:	60bb      	str	r3, [r7, #8]
 800b52e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b530:	4b35      	ldr	r3, [pc, #212]	@ (800b608 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a34      	ldr	r2, [pc, #208]	@ (800b608 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b536:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b53a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b53c:	f7fa ff0e 	bl	800635c <HAL_GetTick>
 800b540:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b542:	e008      	b.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b544:	f7fa ff0a 	bl	800635c <HAL_GetTick>
 800b548:	4602      	mov	r2, r0
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	1ad3      	subs	r3, r2, r3
 800b54e:	2b64      	cmp	r3, #100	@ 0x64
 800b550:	d901      	bls.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800b552:	2303      	movs	r3, #3
 800b554:	e357      	b.n	800bc06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b556:	4b2c      	ldr	r3, [pc, #176]	@ (800b608 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d0f0      	beq.n	800b544 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b562:	4b28      	ldr	r3, [pc, #160]	@ (800b604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b56a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d035      	beq.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b576:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b57a:	693a      	ldr	r2, [r7, #16]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d02e      	beq.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b580:	4b20      	ldr	r3, [pc, #128]	@ (800b604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b584:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b588:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b58a:	4b1e      	ldr	r3, [pc, #120]	@ (800b604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b58c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b58e:	4a1d      	ldr	r2, [pc, #116]	@ (800b604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b594:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b596:	4b1b      	ldr	r3, [pc, #108]	@ (800b604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b59a:	4a1a      	ldr	r2, [pc, #104]	@ (800b604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b59c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b5a0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800b5a2:	4a18      	ldr	r2, [pc, #96]	@ (800b604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b5a8:	4b16      	ldr	r3, [pc, #88]	@ (800b604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b5ac:	f003 0301 	and.w	r3, r3, #1
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d114      	bne.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5b4:	f7fa fed2 	bl	800635c <HAL_GetTick>
 800b5b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b5ba:	e00a      	b.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b5bc:	f7fa fece 	bl	800635c <HAL_GetTick>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	1ad3      	subs	r3, r2, r3
 800b5c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d901      	bls.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800b5ce:	2303      	movs	r3, #3
 800b5d0:	e319      	b.n	800bc06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b5d2:	4b0c      	ldr	r3, [pc, #48]	@ (800b604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b5d6:	f003 0302 	and.w	r3, r3, #2
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d0ee      	beq.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b5e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b5ea:	d111      	bne.n	800b610 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800b5ec:	4b05      	ldr	r3, [pc, #20]	@ (800b604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800b5f8:	4b04      	ldr	r3, [pc, #16]	@ (800b60c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800b5fa:	400b      	ands	r3, r1
 800b5fc:	4901      	ldr	r1, [pc, #4]	@ (800b604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5fe:	4313      	orrs	r3, r2
 800b600:	608b      	str	r3, [r1, #8]
 800b602:	e00b      	b.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800b604:	40023800 	.word	0x40023800
 800b608:	40007000 	.word	0x40007000
 800b60c:	0ffffcff 	.word	0x0ffffcff
 800b610:	4baa      	ldr	r3, [pc, #680]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b612:	689b      	ldr	r3, [r3, #8]
 800b614:	4aa9      	ldr	r2, [pc, #676]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b616:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800b61a:	6093      	str	r3, [r2, #8]
 800b61c:	4ba7      	ldr	r3, [pc, #668]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b61e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b628:	49a4      	ldr	r1, [pc, #656]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b62a:	4313      	orrs	r3, r2
 800b62c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f003 0310 	and.w	r3, r3, #16
 800b636:	2b00      	cmp	r3, #0
 800b638:	d010      	beq.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b63a:	4ba0      	ldr	r3, [pc, #640]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b63c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b640:	4a9e      	ldr	r2, [pc, #632]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b642:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b646:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800b64a:	4b9c      	ldr	r3, [pc, #624]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b64c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b654:	4999      	ldr	r1, [pc, #612]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b656:	4313      	orrs	r3, r2
 800b658:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b664:	2b00      	cmp	r3, #0
 800b666:	d00a      	beq.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b668:	4b94      	ldr	r3, [pc, #592]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b66a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b66e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b676:	4991      	ldr	r1, [pc, #580]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b678:	4313      	orrs	r3, r2
 800b67a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00a      	beq.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b68a:	4b8c      	ldr	r3, [pc, #560]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b68c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b690:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b698:	4988      	ldr	r1, [pc, #544]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b69a:	4313      	orrs	r3, r2
 800b69c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d00a      	beq.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b6ac:	4b83      	ldr	r3, [pc, #524]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b6ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6ba:	4980      	ldr	r1, [pc, #512]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d00a      	beq.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b6ce:	4b7b      	ldr	r3, [pc, #492]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b6d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6d4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6dc:	4977      	ldr	r1, [pc, #476]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d00a      	beq.n	800b706 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b6f0:	4b72      	ldr	r3, [pc, #456]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b6f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6f6:	f023 0203 	bic.w	r2, r3, #3
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6fe:	496f      	ldr	r1, [pc, #444]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b700:	4313      	orrs	r3, r2
 800b702:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d00a      	beq.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b712:	4b6a      	ldr	r3, [pc, #424]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b718:	f023 020c 	bic.w	r2, r3, #12
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b720:	4966      	ldr	r1, [pc, #408]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b722:	4313      	orrs	r3, r2
 800b724:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b730:	2b00      	cmp	r3, #0
 800b732:	d00a      	beq.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b734:	4b61      	ldr	r3, [pc, #388]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b73a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b742:	495e      	ldr	r1, [pc, #376]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b744:	4313      	orrs	r3, r2
 800b746:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b752:	2b00      	cmp	r3, #0
 800b754:	d00a      	beq.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b756:	4b59      	ldr	r3, [pc, #356]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b75c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b764:	4955      	ldr	r1, [pc, #340]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b766:	4313      	orrs	r3, r2
 800b768:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b774:	2b00      	cmp	r3, #0
 800b776:	d00a      	beq.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b778:	4b50      	ldr	r3, [pc, #320]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b77a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b77e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b786:	494d      	ldr	r1, [pc, #308]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b788:	4313      	orrs	r3, r2
 800b78a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00a      	beq.n	800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800b79a:	4b48      	ldr	r3, [pc, #288]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b79c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7a0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7a8:	4944      	ldr	r1, [pc, #272]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d00a      	beq.n	800b7d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800b7bc:	4b3f      	ldr	r3, [pc, #252]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7c2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7ca:	493c      	ldr	r1, [pc, #240]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d00a      	beq.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800b7de:	4b37      	ldr	r3, [pc, #220]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7e4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b7ec:	4933      	ldr	r1, [pc, #204]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d00a      	beq.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b800:	4b2e      	ldr	r3, [pc, #184]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b806:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b80e:	492b      	ldr	r1, [pc, #172]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b810:	4313      	orrs	r3, r2
 800b812:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d011      	beq.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b822:	4b26      	ldr	r3, [pc, #152]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b828:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b830:	4922      	ldr	r1, [pc, #136]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b832:	4313      	orrs	r3, r2
 800b834:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b83c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b840:	d101      	bne.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800b842:	2301      	movs	r3, #1
 800b844:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f003 0308 	and.w	r3, r3, #8
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d001      	beq.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800b852:	2301      	movs	r3, #1
 800b854:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d00a      	beq.n	800b878 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b862:	4b16      	ldr	r3, [pc, #88]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b868:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b870:	4912      	ldr	r1, [pc, #72]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b872:	4313      	orrs	r3, r2
 800b874:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b880:	2b00      	cmp	r3, #0
 800b882:	d00b      	beq.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b884:	4b0d      	ldr	r3, [pc, #52]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b88a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b894:	4909      	ldr	r1, [pc, #36]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b896:	4313      	orrs	r3, r2
 800b898:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b89c:	69fb      	ldr	r3, [r7, #28]
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d006      	beq.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	f000 80d9 	beq.w	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b8b0:	4b02      	ldr	r3, [pc, #8]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4a01      	ldr	r2, [pc, #4]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b8ba:	e001      	b.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800b8bc:	40023800 	.word	0x40023800
 800b8c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8c2:	f7fa fd4b 	bl	800635c <HAL_GetTick>
 800b8c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b8c8:	e008      	b.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b8ca:	f7fa fd47 	bl	800635c <HAL_GetTick>
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	1ad3      	subs	r3, r2, r3
 800b8d4:	2b64      	cmp	r3, #100	@ 0x64
 800b8d6:	d901      	bls.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b8d8:	2303      	movs	r3, #3
 800b8da:	e194      	b.n	800bc06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b8dc:	4b6c      	ldr	r3, [pc, #432]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d1f0      	bne.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f003 0301 	and.w	r3, r3, #1
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d021      	beq.n	800b938 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d11d      	bne.n	800b938 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b8fc:	4b64      	ldr	r3, [pc, #400]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b8fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b902:	0c1b      	lsrs	r3, r3, #16
 800b904:	f003 0303 	and.w	r3, r3, #3
 800b908:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b90a:	4b61      	ldr	r3, [pc, #388]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b90c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b910:	0e1b      	lsrs	r3, r3, #24
 800b912:	f003 030f 	and.w	r3, r3, #15
 800b916:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	019a      	lsls	r2, r3, #6
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	041b      	lsls	r3, r3, #16
 800b922:	431a      	orrs	r2, r3
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	061b      	lsls	r3, r3, #24
 800b928:	431a      	orrs	r2, r3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	689b      	ldr	r3, [r3, #8]
 800b92e:	071b      	lsls	r3, r3, #28
 800b930:	4957      	ldr	r1, [pc, #348]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b932:	4313      	orrs	r3, r2
 800b934:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b940:	2b00      	cmp	r3, #0
 800b942:	d004      	beq.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b948:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b94c:	d00a      	beq.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b956:	2b00      	cmp	r3, #0
 800b958:	d02e      	beq.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b95e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b962:	d129      	bne.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b964:	4b4a      	ldr	r3, [pc, #296]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b966:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b96a:	0c1b      	lsrs	r3, r3, #16
 800b96c:	f003 0303 	and.w	r3, r3, #3
 800b970:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b972:	4b47      	ldr	r3, [pc, #284]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b974:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b978:	0f1b      	lsrs	r3, r3, #28
 800b97a:	f003 0307 	and.w	r3, r3, #7
 800b97e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	019a      	lsls	r2, r3, #6
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	041b      	lsls	r3, r3, #16
 800b98a:	431a      	orrs	r2, r3
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	68db      	ldr	r3, [r3, #12]
 800b990:	061b      	lsls	r3, r3, #24
 800b992:	431a      	orrs	r2, r3
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	071b      	lsls	r3, r3, #28
 800b998:	493d      	ldr	r1, [pc, #244]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b99a:	4313      	orrs	r3, r2
 800b99c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b9a0:	4b3b      	ldr	r3, [pc, #236]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b9a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b9a6:	f023 021f 	bic.w	r2, r3, #31
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9ae:	3b01      	subs	r3, #1
 800b9b0:	4937      	ldr	r1, [pc, #220]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d01d      	beq.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b9c4:	4b32      	ldr	r3, [pc, #200]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b9c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b9ca:	0e1b      	lsrs	r3, r3, #24
 800b9cc:	f003 030f 	and.w	r3, r3, #15
 800b9d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b9d2:	4b2f      	ldr	r3, [pc, #188]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b9d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b9d8:	0f1b      	lsrs	r3, r3, #28
 800b9da:	f003 0307 	and.w	r3, r3, #7
 800b9de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	019a      	lsls	r2, r3, #6
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	691b      	ldr	r3, [r3, #16]
 800b9ea:	041b      	lsls	r3, r3, #16
 800b9ec:	431a      	orrs	r2, r3
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	061b      	lsls	r3, r3, #24
 800b9f2:	431a      	orrs	r2, r3
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	071b      	lsls	r3, r3, #28
 800b9f8:	4925      	ldr	r1, [pc, #148]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d011      	beq.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	019a      	lsls	r2, r3, #6
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	691b      	ldr	r3, [r3, #16]
 800ba16:	041b      	lsls	r3, r3, #16
 800ba18:	431a      	orrs	r2, r3
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	061b      	lsls	r3, r3, #24
 800ba20:	431a      	orrs	r2, r3
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	689b      	ldr	r3, [r3, #8]
 800ba26:	071b      	lsls	r3, r3, #28
 800ba28:	4919      	ldr	r1, [pc, #100]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ba30:	4b17      	ldr	r3, [pc, #92]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4a16      	ldr	r2, [pc, #88]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba36:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ba3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba3c:	f7fa fc8e 	bl	800635c <HAL_GetTick>
 800ba40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ba42:	e008      	b.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ba44:	f7fa fc8a 	bl	800635c <HAL_GetTick>
 800ba48:	4602      	mov	r2, r0
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	1ad3      	subs	r3, r2, r3
 800ba4e:	2b64      	cmp	r3, #100	@ 0x64
 800ba50:	d901      	bls.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ba52:	2303      	movs	r3, #3
 800ba54:	e0d7      	b.n	800bc06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ba56:	4b0e      	ldr	r3, [pc, #56]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d0f0      	beq.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800ba62:	69bb      	ldr	r3, [r7, #24]
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	f040 80cd 	bne.w	800bc04 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ba6a:	4b09      	ldr	r3, [pc, #36]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4a08      	ldr	r2, [pc, #32]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ba74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba76:	f7fa fc71 	bl	800635c <HAL_GetTick>
 800ba7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ba7c:	e00a      	b.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ba7e:	f7fa fc6d 	bl	800635c <HAL_GetTick>
 800ba82:	4602      	mov	r2, r0
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	1ad3      	subs	r3, r2, r3
 800ba88:	2b64      	cmp	r3, #100	@ 0x64
 800ba8a:	d903      	bls.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ba8c:	2303      	movs	r3, #3
 800ba8e:	e0ba      	b.n	800bc06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800ba90:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ba94:	4b5e      	ldr	r3, [pc, #376]	@ (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800baa0:	d0ed      	beq.n	800ba7e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d003      	beq.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d009      	beq.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d02e      	beq.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d12a      	bne.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800baca:	4b51      	ldr	r3, [pc, #324]	@ (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bacc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bad0:	0c1b      	lsrs	r3, r3, #16
 800bad2:	f003 0303 	and.w	r3, r3, #3
 800bad6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bad8:	4b4d      	ldr	r3, [pc, #308]	@ (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bade:	0f1b      	lsrs	r3, r3, #28
 800bae0:	f003 0307 	and.w	r3, r3, #7
 800bae4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	695b      	ldr	r3, [r3, #20]
 800baea:	019a      	lsls	r2, r3, #6
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	041b      	lsls	r3, r3, #16
 800baf0:	431a      	orrs	r2, r3
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	699b      	ldr	r3, [r3, #24]
 800baf6:	061b      	lsls	r3, r3, #24
 800baf8:	431a      	orrs	r2, r3
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	071b      	lsls	r3, r3, #28
 800bafe:	4944      	ldr	r1, [pc, #272]	@ (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bb00:	4313      	orrs	r3, r2
 800bb02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800bb06:	4b42      	ldr	r3, [pc, #264]	@ (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bb08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bb0c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb14:	3b01      	subs	r3, #1
 800bb16:	021b      	lsls	r3, r3, #8
 800bb18:	493d      	ldr	r1, [pc, #244]	@ (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d022      	beq.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bb30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bb34:	d11d      	bne.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bb36:	4b36      	ldr	r3, [pc, #216]	@ (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bb38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb3c:	0e1b      	lsrs	r3, r3, #24
 800bb3e:	f003 030f 	and.w	r3, r3, #15
 800bb42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bb44:	4b32      	ldr	r3, [pc, #200]	@ (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bb46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb4a:	0f1b      	lsrs	r3, r3, #28
 800bb4c:	f003 0307 	and.w	r3, r3, #7
 800bb50:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	695b      	ldr	r3, [r3, #20]
 800bb56:	019a      	lsls	r2, r3, #6
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6a1b      	ldr	r3, [r3, #32]
 800bb5c:	041b      	lsls	r3, r3, #16
 800bb5e:	431a      	orrs	r2, r3
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	061b      	lsls	r3, r3, #24
 800bb64:	431a      	orrs	r2, r3
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	071b      	lsls	r3, r3, #28
 800bb6a:	4929      	ldr	r1, [pc, #164]	@ (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f003 0308 	and.w	r3, r3, #8
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d028      	beq.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bb7e:	4b24      	ldr	r3, [pc, #144]	@ (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bb80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb84:	0e1b      	lsrs	r3, r3, #24
 800bb86:	f003 030f 	and.w	r3, r3, #15
 800bb8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bb8c:	4b20      	ldr	r3, [pc, #128]	@ (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bb8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb92:	0c1b      	lsrs	r3, r3, #16
 800bb94:	f003 0303 	and.w	r3, r3, #3
 800bb98:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	695b      	ldr	r3, [r3, #20]
 800bb9e:	019a      	lsls	r2, r3, #6
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	041b      	lsls	r3, r3, #16
 800bba4:	431a      	orrs	r2, r3
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	061b      	lsls	r3, r3, #24
 800bbaa:	431a      	orrs	r2, r3
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	69db      	ldr	r3, [r3, #28]
 800bbb0:	071b      	lsls	r3, r3, #28
 800bbb2:	4917      	ldr	r1, [pc, #92]	@ (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800bbba:	4b15      	ldr	r3, [pc, #84]	@ (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bbbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bbc0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbc8:	4911      	ldr	r1, [pc, #68]	@ (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800bbd0:	4b0f      	ldr	r3, [pc, #60]	@ (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4a0e      	ldr	r2, [pc, #56]	@ (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bbd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bbda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbdc:	f7fa fbbe 	bl	800635c <HAL_GetTick>
 800bbe0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bbe2:	e008      	b.n	800bbf6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800bbe4:	f7fa fbba 	bl	800635c <HAL_GetTick>
 800bbe8:	4602      	mov	r2, r0
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	1ad3      	subs	r3, r2, r3
 800bbee:	2b64      	cmp	r3, #100	@ 0x64
 800bbf0:	d901      	bls.n	800bbf6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bbf2:	2303      	movs	r3, #3
 800bbf4:	e007      	b.n	800bc06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bbf6:	4b06      	ldr	r3, [pc, #24]	@ (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bbfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc02:	d1ef      	bne.n	800bbe4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800bc04:	2300      	movs	r3, #0
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3720      	adds	r7, #32
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	40023800 	.word	0x40023800

0800bc14 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b087      	sub	sp, #28
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800bc20:	2300      	movs	r3, #0
 800bc22:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800bc24:	2300      	movs	r3, #0
 800bc26:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800bc32:	f040 808d 	bne.w	800bd50 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800bc36:	4b93      	ldr	r3, [pc, #588]	@ (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bc38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc3c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800bc44:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bc4c:	d07c      	beq.n	800bd48 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bc54:	d87b      	bhi.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d004      	beq.n	800bc66 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bc62:	d039      	beq.n	800bcd8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800bc64:	e073      	b.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800bc66:	4b87      	ldr	r3, [pc, #540]	@ (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d108      	bne.n	800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800bc72:	4b84      	ldr	r3, [pc, #528]	@ (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bc74:	685b      	ldr	r3, [r3, #4]
 800bc76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bc7a:	4a83      	ldr	r2, [pc, #524]	@ (800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800bc7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc80:	613b      	str	r3, [r7, #16]
 800bc82:	e007      	b.n	800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800bc84:	4b7f      	ldr	r3, [pc, #508]	@ (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bc8c:	4a7f      	ldr	r2, [pc, #508]	@ (800be8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bc8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc92:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800bc94:	4b7b      	ldr	r3, [pc, #492]	@ (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bc96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc9a:	0e1b      	lsrs	r3, r3, #24
 800bc9c:	f003 030f 	and.w	r3, r3, #15
 800bca0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800bca2:	4b78      	ldr	r3, [pc, #480]	@ (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bca8:	099b      	lsrs	r3, r3, #6
 800bcaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcae:	693a      	ldr	r2, [r7, #16]
 800bcb0:	fb03 f202 	mul.w	r2, r3, r2
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcba:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800bcbc:	4b71      	ldr	r3, [pc, #452]	@ (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bcbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bcc2:	0a1b      	lsrs	r3, r3, #8
 800bcc4:	f003 031f 	and.w	r3, r3, #31
 800bcc8:	3301      	adds	r3, #1
 800bcca:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800bccc:	697a      	ldr	r2, [r7, #20]
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcd4:	617b      	str	r3, [r7, #20]
        break;
 800bcd6:	e03b      	b.n	800bd50 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800bcd8:	4b6a      	ldr	r3, [pc, #424]	@ (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d108      	bne.n	800bcf6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800bce4:	4b67      	ldr	r3, [pc, #412]	@ (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bcec:	4a66      	ldr	r2, [pc, #408]	@ (800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800bcee:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcf2:	613b      	str	r3, [r7, #16]
 800bcf4:	e007      	b.n	800bd06 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800bcf6:	4b63      	ldr	r3, [pc, #396]	@ (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bcf8:	685b      	ldr	r3, [r3, #4]
 800bcfa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bcfe:	4a63      	ldr	r2, [pc, #396]	@ (800be8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bd00:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd04:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800bd06:	4b5f      	ldr	r3, [pc, #380]	@ (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bd08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd0c:	0e1b      	lsrs	r3, r3, #24
 800bd0e:	f003 030f 	and.w	r3, r3, #15
 800bd12:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800bd14:	4b5b      	ldr	r3, [pc, #364]	@ (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bd16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd1a:	099b      	lsrs	r3, r3, #6
 800bd1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd20:	693a      	ldr	r2, [r7, #16]
 800bd22:	fb03 f202 	mul.w	r2, r3, r2
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd2c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800bd2e:	4b55      	ldr	r3, [pc, #340]	@ (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bd30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd34:	f003 031f 	and.w	r3, r3, #31
 800bd38:	3301      	adds	r3, #1
 800bd3a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800bd3c:	697a      	ldr	r2, [r7, #20]
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd44:	617b      	str	r3, [r7, #20]
        break;
 800bd46:	e003      	b.n	800bd50 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800bd48:	4b51      	ldr	r3, [pc, #324]	@ (800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800bd4a:	617b      	str	r3, [r7, #20]
        break;
 800bd4c:	e000      	b.n	800bd50 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800bd4e:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bd56:	f040 808d 	bne.w	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800bd5a:	4b4a      	ldr	r3, [pc, #296]	@ (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bd5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd60:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800bd68:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bd70:	d07c      	beq.n	800be6c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bd78:	d87b      	bhi.n	800be72 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d004      	beq.n	800bd8a <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bd86:	d039      	beq.n	800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800bd88:	e073      	b.n	800be72 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800bd8a:	4b3e      	ldr	r3, [pc, #248]	@ (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d108      	bne.n	800bda8 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800bd96:	4b3b      	ldr	r3, [pc, #236]	@ (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bd9e:	4a3a      	ldr	r2, [pc, #232]	@ (800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800bda0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bda4:	613b      	str	r3, [r7, #16]
 800bda6:	e007      	b.n	800bdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800bda8:	4b36      	ldr	r3, [pc, #216]	@ (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bdb0:	4a36      	ldr	r2, [pc, #216]	@ (800be8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bdb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdb6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800bdb8:	4b32      	ldr	r3, [pc, #200]	@ (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bdba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdbe:	0e1b      	lsrs	r3, r3, #24
 800bdc0:	f003 030f 	and.w	r3, r3, #15
 800bdc4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800bdc6:	4b2f      	ldr	r3, [pc, #188]	@ (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bdc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdcc:	099b      	lsrs	r3, r3, #6
 800bdce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdd2:	693a      	ldr	r2, [r7, #16]
 800bdd4:	fb03 f202 	mul.w	r2, r3, r2
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdde:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800bde0:	4b28      	ldr	r3, [pc, #160]	@ (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bde2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bde6:	0a1b      	lsrs	r3, r3, #8
 800bde8:	f003 031f 	and.w	r3, r3, #31
 800bdec:	3301      	adds	r3, #1
 800bdee:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800bdf0:	697a      	ldr	r2, [r7, #20]
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdf8:	617b      	str	r3, [r7, #20]
        break;
 800bdfa:	e03b      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800bdfc:	4b21      	ldr	r3, [pc, #132]	@ (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800be04:	2b00      	cmp	r3, #0
 800be06:	d108      	bne.n	800be1a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800be08:	4b1e      	ldr	r3, [pc, #120]	@ (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800be10:	4a1d      	ldr	r2, [pc, #116]	@ (800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800be12:	fbb2 f3f3 	udiv	r3, r2, r3
 800be16:	613b      	str	r3, [r7, #16]
 800be18:	e007      	b.n	800be2a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800be1a:	4b1a      	ldr	r3, [pc, #104]	@ (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800be22:	4a1a      	ldr	r2, [pc, #104]	@ (800be8c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800be24:	fbb2 f3f3 	udiv	r3, r2, r3
 800be28:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800be2a:	4b16      	ldr	r3, [pc, #88]	@ (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be30:	0e1b      	lsrs	r3, r3, #24
 800be32:	f003 030f 	and.w	r3, r3, #15
 800be36:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800be38:	4b12      	ldr	r3, [pc, #72]	@ (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be3e:	099b      	lsrs	r3, r3, #6
 800be40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be44:	693a      	ldr	r2, [r7, #16]
 800be46:	fb03 f202 	mul.w	r2, r3, r2
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800be50:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800be52:	4b0c      	ldr	r3, [pc, #48]	@ (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800be58:	f003 031f 	and.w	r3, r3, #31
 800be5c:	3301      	adds	r3, #1
 800be5e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800be60:	697a      	ldr	r2, [r7, #20]
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	fbb2 f3f3 	udiv	r3, r2, r3
 800be68:	617b      	str	r3, [r7, #20]
        break;
 800be6a:	e003      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800be6c:	4b08      	ldr	r3, [pc, #32]	@ (800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800be6e:	617b      	str	r3, [r7, #20]
        break;
 800be70:	e000      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800be72:	bf00      	nop
      }
    }
  }

  return frequency;
 800be74:	697b      	ldr	r3, [r7, #20]
}
 800be76:	4618      	mov	r0, r3
 800be78:	371c      	adds	r7, #28
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr
 800be82:	bf00      	nop
 800be84:	40023800 	.word	0x40023800
 800be88:	00f42400 	.word	0x00f42400
 800be8c:	017d7840 	.word	0x017d7840
 800be90:	00bb8000 	.word	0x00bb8000

0800be94 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b084      	sub	sp, #16
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d101      	bne.n	800bea6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800bea2:	2301      	movs	r3, #1
 800bea4:	e071      	b.n	800bf8a <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	7f5b      	ldrb	r3, [r3, #29]
 800beaa:	b2db      	uxtb	r3, r3
 800beac:	2b00      	cmp	r3, #0
 800beae:	d105      	bne.n	800bebc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2200      	movs	r2, #0
 800beb4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f7f8 fd8e 	bl	80049d8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2202      	movs	r2, #2
 800bec0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	68db      	ldr	r3, [r3, #12]
 800bec8:	f003 0310 	and.w	r3, r3, #16
 800becc:	2b10      	cmp	r3, #16
 800bece:	d053      	beq.n	800bf78 <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	22ca      	movs	r2, #202	@ 0xca
 800bed6:	625a      	str	r2, [r3, #36]	@ 0x24
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	2253      	movs	r2, #83	@ 0x53
 800bede:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f000 fac7 	bl	800c474 <RTC_EnterInitMode>
 800bee6:	4603      	mov	r3, r0
 800bee8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800beea:	7bfb      	ldrb	r3, [r7, #15]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d12a      	bne.n	800bf46 <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	6899      	ldr	r1, [r3, #8]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681a      	ldr	r2, [r3, #0]
 800befa:	4b26      	ldr	r3, [pc, #152]	@ (800bf94 <HAL_RTC_Init+0x100>)
 800befc:	400b      	ands	r3, r1
 800befe:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	6899      	ldr	r1, [r3, #8]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	685a      	ldr	r2, [r3, #4]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	691b      	ldr	r3, [r3, #16]
 800bf0e:	431a      	orrs	r2, r3
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	695b      	ldr	r3, [r3, #20]
 800bf14:	431a      	orrs	r2, r3
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	430a      	orrs	r2, r1
 800bf1c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	68d2      	ldr	r2, [r2, #12]
 800bf26:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	6919      	ldr	r1, [r3, #16]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	689b      	ldr	r3, [r3, #8]
 800bf32:	041a      	lsls	r2, r3, #16
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	430a      	orrs	r2, r1
 800bf3a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f000 fad0 	bl	800c4e2 <RTC_ExitInitMode>
 800bf42:	4603      	mov	r3, r0
 800bf44:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800bf46:	7bfb      	ldrb	r3, [r7, #15]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d110      	bne.n	800bf6e <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f022 0208 	bic.w	r2, r2, #8
 800bf5a:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	699a      	ldr	r2, [r3, #24]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	430a      	orrs	r2, r1
 800bf6c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	22ff      	movs	r2, #255	@ 0xff
 800bf74:	625a      	str	r2, [r3, #36]	@ 0x24
 800bf76:	e001      	b.n	800bf7c <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800bf7c:	7bfb      	ldrb	r3, [r7, #15]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d102      	bne.n	800bf88 <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2201      	movs	r2, #1
 800bf86:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800bf88:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3710      	adds	r7, #16
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}
 800bf92:	bf00      	nop
 800bf94:	ff8fffbf 	.word	0xff8fffbf

0800bf98 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bf98:	b590      	push	{r4, r7, lr}
 800bf9a:	b087      	sub	sp, #28
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	60f8      	str	r0, [r7, #12]
 800bfa0:	60b9      	str	r1, [r7, #8]
 800bfa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	7f1b      	ldrb	r3, [r3, #28]
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d101      	bne.n	800bfb4 <HAL_RTC_SetTime+0x1c>
 800bfb0:	2302      	movs	r3, #2
 800bfb2:	e085      	b.n	800c0c0 <HAL_RTC_SetTime+0x128>
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	2202      	movs	r2, #2
 800bfbe:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d126      	bne.n	800c014 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d102      	bne.n	800bfda <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f000 faa4 	bl	800c52c <RTC_ByteToBcd2>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	785b      	ldrb	r3, [r3, #1]
 800bfec:	4618      	mov	r0, r3
 800bfee:	f000 fa9d 	bl	800c52c <RTC_ByteToBcd2>
 800bff2:	4603      	mov	r3, r0
 800bff4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bff6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	789b      	ldrb	r3, [r3, #2]
 800bffc:	4618      	mov	r0, r3
 800bffe:	f000 fa95 	bl	800c52c <RTC_ByteToBcd2>
 800c002:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c004:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	78db      	ldrb	r3, [r3, #3]
 800c00c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c00e:	4313      	orrs	r3, r2
 800c010:	617b      	str	r3, [r7, #20]
 800c012:	e018      	b.n	800c046 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	689b      	ldr	r3, [r3, #8]
 800c01a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d102      	bne.n	800c028 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	2200      	movs	r2, #0
 800c026:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	785b      	ldrb	r3, [r3, #1]
 800c032:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c034:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800c036:	68ba      	ldr	r2, [r7, #8]
 800c038:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800c03a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	78db      	ldrb	r3, [r3, #3]
 800c040:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c042:	4313      	orrs	r3, r2
 800c044:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	22ca      	movs	r2, #202	@ 0xca
 800c04c:	625a      	str	r2, [r3, #36]	@ 0x24
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	2253      	movs	r2, #83	@ 0x53
 800c054:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c056:	68f8      	ldr	r0, [r7, #12]
 800c058:	f000 fa0c 	bl	800c474 <RTC_EnterInitMode>
 800c05c:	4603      	mov	r3, r0
 800c05e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800c060:	7cfb      	ldrb	r3, [r7, #19]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d11e      	bne.n	800c0a4 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	6979      	ldr	r1, [r7, #20]
 800c06c:	4b16      	ldr	r3, [pc, #88]	@ (800c0c8 <HAL_RTC_SetTime+0x130>)
 800c06e:	400b      	ands	r3, r1
 800c070:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	689a      	ldr	r2, [r3, #8]
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800c080:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	6899      	ldr	r1, [r3, #8]
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	68da      	ldr	r2, [r3, #12]
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	691b      	ldr	r3, [r3, #16]
 800c090:	431a      	orrs	r2, r3
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	430a      	orrs	r2, r1
 800c098:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c09a:	68f8      	ldr	r0, [r7, #12]
 800c09c:	f000 fa21 	bl	800c4e2 <RTC_ExitInitMode>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800c0a4:	7cfb      	ldrb	r3, [r7, #19]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d102      	bne.n	800c0b0 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	22ff      	movs	r2, #255	@ 0xff
 800c0b6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	771a      	strb	r2, [r3, #28]

  return status;
 800c0be:	7cfb      	ldrb	r3, [r7, #19]
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	371c      	adds	r7, #28
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd90      	pop	{r4, r7, pc}
 800c0c8:	007f7f7f 	.word	0x007f7f7f

0800c0cc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c0cc:	b590      	push	{r4, r7, lr}
 800c0ce:	b087      	sub	sp, #28
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	60f8      	str	r0, [r7, #12]
 800c0d4:	60b9      	str	r1, [r7, #8]
 800c0d6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	7f1b      	ldrb	r3, [r3, #28]
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d101      	bne.n	800c0e8 <HAL_RTC_SetDate+0x1c>
 800c0e4:	2302      	movs	r3, #2
 800c0e6:	e06f      	b.n	800c1c8 <HAL_RTC_SetDate+0xfc>
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2202      	movs	r2, #2
 800c0f2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d10e      	bne.n	800c118 <HAL_RTC_SetDate+0x4c>
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	785b      	ldrb	r3, [r3, #1]
 800c0fe:	f003 0310 	and.w	r3, r3, #16
 800c102:	2b00      	cmp	r3, #0
 800c104:	d008      	beq.n	800c118 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	785b      	ldrb	r3, [r3, #1]
 800c10a:	f023 0310 	bic.w	r3, r3, #16
 800c10e:	b2db      	uxtb	r3, r3
 800c110:	330a      	adds	r3, #10
 800c112:	b2da      	uxtb	r2, r3
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d11c      	bne.n	800c158 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	78db      	ldrb	r3, [r3, #3]
 800c122:	4618      	mov	r0, r3
 800c124:	f000 fa02 	bl	800c52c <RTC_ByteToBcd2>
 800c128:	4603      	mov	r3, r0
 800c12a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	785b      	ldrb	r3, [r3, #1]
 800c130:	4618      	mov	r0, r3
 800c132:	f000 f9fb 	bl	800c52c <RTC_ByteToBcd2>
 800c136:	4603      	mov	r3, r0
 800c138:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c13a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	789b      	ldrb	r3, [r3, #2]
 800c140:	4618      	mov	r0, r3
 800c142:	f000 f9f3 	bl	800c52c <RTC_ByteToBcd2>
 800c146:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c148:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c152:	4313      	orrs	r3, r2
 800c154:	617b      	str	r3, [r7, #20]
 800c156:	e00e      	b.n	800c176 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	78db      	ldrb	r3, [r3, #3]
 800c15c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	785b      	ldrb	r3, [r3, #1]
 800c162:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c164:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800c166:	68ba      	ldr	r2, [r7, #8]
 800c168:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c16a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	781b      	ldrb	r3, [r3, #0]
 800c170:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c172:	4313      	orrs	r3, r2
 800c174:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	22ca      	movs	r2, #202	@ 0xca
 800c17c:	625a      	str	r2, [r3, #36]	@ 0x24
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	2253      	movs	r2, #83	@ 0x53
 800c184:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c186:	68f8      	ldr	r0, [r7, #12]
 800c188:	f000 f974 	bl	800c474 <RTC_EnterInitMode>
 800c18c:	4603      	mov	r3, r0
 800c18e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800c190:	7cfb      	ldrb	r3, [r7, #19]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d10a      	bne.n	800c1ac <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	6979      	ldr	r1, [r7, #20]
 800c19c:	4b0c      	ldr	r3, [pc, #48]	@ (800c1d0 <HAL_RTC_SetDate+0x104>)
 800c19e:	400b      	ands	r3, r1
 800c1a0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c1a2:	68f8      	ldr	r0, [r7, #12]
 800c1a4:	f000 f99d 	bl	800c4e2 <RTC_ExitInitMode>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800c1ac:	7cfb      	ldrb	r3, [r7, #19]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d102      	bne.n	800c1b8 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	22ff      	movs	r2, #255	@ 0xff
 800c1be:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	771a      	strb	r2, [r3, #28]

  return status;
 800c1c6:	7cfb      	ldrb	r3, [r7, #19]
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	371c      	adds	r7, #28
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd90      	pop	{r4, r7, pc}
 800c1d0:	00ffff3f 	.word	0x00ffff3f

0800c1d4 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800c1d4:	b590      	push	{r4, r7, lr}
 800c1d6:	b089      	sub	sp, #36	@ 0x24
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	60b9      	str	r1, [r7, #8]
 800c1de:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	7f1b      	ldrb	r3, [r3, #28]
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d101      	bne.n	800c1f8 <HAL_RTC_SetAlarm+0x24>
 800c1f4:	2302      	movs	r3, #2
 800c1f6:	e113      	b.n	800c420 <HAL_RTC_SetAlarm+0x24c>
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2202      	movs	r2, #2
 800c202:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d137      	bne.n	800c27a <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	689b      	ldr	r3, [r3, #8]
 800c210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c214:	2b00      	cmp	r3, #0
 800c216:	d102      	bne.n	800c21e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	2200      	movs	r2, #0
 800c21c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	4618      	mov	r0, r3
 800c224:	f000 f982 	bl	800c52c <RTC_ByteToBcd2>
 800c228:	4603      	mov	r3, r0
 800c22a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	785b      	ldrb	r3, [r3, #1]
 800c230:	4618      	mov	r0, r3
 800c232:	f000 f97b 	bl	800c52c <RTC_ByteToBcd2>
 800c236:	4603      	mov	r3, r0
 800c238:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800c23a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	789b      	ldrb	r3, [r3, #2]
 800c240:	4618      	mov	r0, r3
 800c242:	f000 f973 	bl	800c52c <RTC_ByteToBcd2>
 800c246:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800c248:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	78db      	ldrb	r3, [r3, #3]
 800c250:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800c252:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c25c:	4618      	mov	r0, r3
 800c25e:	f000 f965 	bl	800c52c <RTC_ByteToBcd2>
 800c262:	4603      	mov	r3, r0
 800c264:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800c266:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800c26e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800c274:	4313      	orrs	r3, r2
 800c276:	61fb      	str	r3, [r7, #28]
 800c278:	e023      	b.n	800c2c2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	689b      	ldr	r3, [r3, #8]
 800c280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c284:	2b00      	cmp	r3, #0
 800c286:	d102      	bne.n	800c28e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	2200      	movs	r2, #0
 800c28c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	785b      	ldrb	r3, [r3, #1]
 800c298:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800c29a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800c29c:	68ba      	ldr	r2, [r7, #8]
 800c29e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800c2a0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	78db      	ldrb	r3, [r3, #3]
 800c2a6:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800c2a8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c2b0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800c2b2:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800c2b8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	22ca      	movs	r2, #202	@ 0xca
 800c2d4:	625a      	str	r2, [r3, #36]	@ 0x24
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2253      	movs	r2, #83	@ 0x53
 800c2dc:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c2e6:	d148      	bne.n	800c37a <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	689a      	ldr	r2, [r3, #8]
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c2f6:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	689a      	ldr	r2, [r3, #8]
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c306:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	68db      	ldr	r3, [r3, #12]
 800c30e:	b2da      	uxtb	r2, r3
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800c318:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c31a:	f7fa f81f 	bl	800635c <HAL_GetTick>
 800c31e:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800c320:	e013      	b.n	800c34a <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c322:	f7fa f81b 	bl	800635c <HAL_GetTick>
 800c326:	4602      	mov	r2, r0
 800c328:	69bb      	ldr	r3, [r7, #24]
 800c32a:	1ad3      	subs	r3, r2, r3
 800c32c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c330:	d90b      	bls.n	800c34a <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	22ff      	movs	r2, #255	@ 0xff
 800c338:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2203      	movs	r2, #3
 800c33e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	2200      	movs	r2, #0
 800c344:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c346:	2303      	movs	r3, #3
 800c348:	e06a      	b.n	800c420 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	68db      	ldr	r3, [r3, #12]
 800c350:	f003 0301 	and.w	r3, r3, #1
 800c354:	2b00      	cmp	r3, #0
 800c356:	d0e4      	beq.n	800c322 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	69fa      	ldr	r2, [r7, #28]
 800c35e:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	697a      	ldr	r2, [r7, #20]
 800c366:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	689a      	ldr	r2, [r3, #8]
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c376:	609a      	str	r2, [r3, #8]
 800c378:	e047      	b.n	800c40a <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	689a      	ldr	r2, [r3, #8]
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800c388:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	689a      	ldr	r2, [r3, #8]
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c398:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	68db      	ldr	r3, [r3, #12]
 800c3a0:	b2da      	uxtb	r2, r3
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800c3aa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c3ac:	f7f9 ffd6 	bl	800635c <HAL_GetTick>
 800c3b0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800c3b2:	e013      	b.n	800c3dc <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c3b4:	f7f9 ffd2 	bl	800635c <HAL_GetTick>
 800c3b8:	4602      	mov	r2, r0
 800c3ba:	69bb      	ldr	r3, [r7, #24]
 800c3bc:	1ad3      	subs	r3, r2, r3
 800c3be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c3c2:	d90b      	bls.n	800c3dc <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	22ff      	movs	r2, #255	@ 0xff
 800c3ca:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	2203      	movs	r2, #3
 800c3d0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c3d8:	2303      	movs	r3, #3
 800c3da:	e021      	b.n	800c420 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	68db      	ldr	r3, [r3, #12]
 800c3e2:	f003 0302 	and.w	r3, r3, #2
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d0e4      	beq.n	800c3b4 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	69fa      	ldr	r2, [r7, #28]
 800c3f0:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	697a      	ldr	r2, [r7, #20]
 800c3f8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	689a      	ldr	r2, [r3, #8]
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c408:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	22ff      	movs	r2, #255	@ 0xff
 800c410:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	2201      	movs	r2, #1
 800c416:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2200      	movs	r2, #0
 800c41c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c41e:	2300      	movs	r3, #0
}
 800c420:	4618      	mov	r0, r3
 800c422:	3724      	adds	r7, #36	@ 0x24
 800c424:	46bd      	mov	sp, r7
 800c426:	bd90      	pop	{r4, r7, pc}

0800c428 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c430:	2300      	movs	r3, #0
 800c432:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4a0d      	ldr	r2, [pc, #52]	@ (800c470 <HAL_RTC_WaitForSynchro+0x48>)
 800c43a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c43c:	f7f9 ff8e 	bl	800635c <HAL_GetTick>
 800c440:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c442:	e009      	b.n	800c458 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c444:	f7f9 ff8a 	bl	800635c <HAL_GetTick>
 800c448:	4602      	mov	r2, r0
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	1ad3      	subs	r3, r2, r3
 800c44e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c452:	d901      	bls.n	800c458 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800c454:	2303      	movs	r3, #3
 800c456:	e007      	b.n	800c468 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	68db      	ldr	r3, [r3, #12]
 800c45e:	f003 0320 	and.w	r3, r3, #32
 800c462:	2b00      	cmp	r3, #0
 800c464:	d0ee      	beq.n	800c444 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800c466:	2300      	movs	r3, #0
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3710      	adds	r7, #16
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}
 800c470:	0001ff5f 	.word	0x0001ff5f

0800c474 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b084      	sub	sp, #16
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c47c:	2300      	movs	r3, #0
 800c47e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800c480:	2300      	movs	r3, #0
 800c482:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	68db      	ldr	r3, [r3, #12]
 800c48a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d122      	bne.n	800c4d8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	68da      	ldr	r2, [r3, #12]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c4a0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c4a2:	f7f9 ff5b 	bl	800635c <HAL_GetTick>
 800c4a6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800c4a8:	e00c      	b.n	800c4c4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c4aa:	f7f9 ff57 	bl	800635c <HAL_GetTick>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	1ad3      	subs	r3, r2, r3
 800c4b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c4b8:	d904      	bls.n	800c4c4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2204      	movs	r2, #4
 800c4be:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	68db      	ldr	r3, [r3, #12]
 800c4ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d102      	bne.n	800c4d8 <RTC_EnterInitMode+0x64>
 800c4d2:	7bfb      	ldrb	r3, [r7, #15]
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d1e8      	bne.n	800c4aa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800c4d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3710      	adds	r7, #16
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}

0800c4e2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c4e2:	b580      	push	{r7, lr}
 800c4e4:	b084      	sub	sp, #16
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	68da      	ldr	r2, [r3, #12]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c4fc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	689b      	ldr	r3, [r3, #8]
 800c504:	f003 0320 	and.w	r3, r3, #32
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d10a      	bne.n	800c522 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f7ff ff8b 	bl	800c428 <HAL_RTC_WaitForSynchro>
 800c512:	4603      	mov	r3, r0
 800c514:	2b00      	cmp	r3, #0
 800c516:	d004      	beq.n	800c522 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2204      	movs	r2, #4
 800c51c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800c51e:	2301      	movs	r3, #1
 800c520:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800c522:	7bfb      	ldrb	r3, [r7, #15]
}
 800c524:	4618      	mov	r0, r3
 800c526:	3710      	adds	r7, #16
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b085      	sub	sp, #20
 800c530:	af00      	add	r7, sp, #0
 800c532:	4603      	mov	r3, r0
 800c534:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c536:	2300      	movs	r3, #0
 800c538:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800c53a:	e005      	b.n	800c548 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	3301      	adds	r3, #1
 800c540:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800c542:	79fb      	ldrb	r3, [r7, #7]
 800c544:	3b0a      	subs	r3, #10
 800c546:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800c548:	79fb      	ldrb	r3, [r7, #7]
 800c54a:	2b09      	cmp	r3, #9
 800c54c:	d8f6      	bhi.n	800c53c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	b2db      	uxtb	r3, r3
 800c552:	011b      	lsls	r3, r3, #4
 800c554:	b2da      	uxtb	r2, r3
 800c556:	79fb      	ldrb	r3, [r7, #7]
 800c558:	4313      	orrs	r3, r2
 800c55a:	b2db      	uxtb	r3, r3
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3714      	adds	r7, #20
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr

0800c568 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800c568:	b480      	push	{r7}
 800c56a:	b087      	sub	sp, #28
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	60f8      	str	r0, [r7, #12]
 800c570:	60b9      	str	r1, [r7, #8]
 800c572:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c574:	2300      	movs	r3, #0
 800c576:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	7f1b      	ldrb	r3, [r3, #28]
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d101      	bne.n	800c584 <HAL_RTCEx_SetTimeStamp+0x1c>
 800c580:	2302      	movs	r3, #2
 800c582:	e050      	b.n	800c626 <HAL_RTCEx_SetTimeStamp+0xbe>
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2201      	movs	r2, #1
 800c588:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2202      	movs	r2, #2
 800c58e:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f022 0206 	bic.w	r2, r2, #6
 800c59e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	687a      	ldr	r2, [r7, #4]
 800c5ac:	430a      	orrs	r2, r1
 800c5ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	689a      	ldr	r2, [r3, #8]
 800c5b6:	4b1f      	ldr	r3, [pc, #124]	@ (800c634 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800c5b8:	4013      	ands	r3, r2
 800c5ba:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800c5bc:	697a      	ldr	r2, [r7, #20]
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	4313      	orrs	r3, r2
 800c5c2:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	22ca      	movs	r2, #202	@ 0xca
 800c5ca:	625a      	str	r2, [r3, #36]	@ 0x24
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	2253      	movs	r2, #83	@ 0x53
 800c5d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	697a      	ldr	r2, [r7, #20]
 800c5da:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	68db      	ldr	r3, [r3, #12]
 800c5e2:	b2da      	uxtb	r2, r3
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800c5ec:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	68db      	ldr	r3, [r3, #12]
 800c5f4:	b2da      	uxtb	r2, r3
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800c5fe:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	689a      	ldr	r2, [r3, #8]
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c60e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	22ff      	movs	r2, #255	@ 0xff
 800c616:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2201      	movs	r2, #1
 800c61c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2200      	movs	r2, #0
 800c622:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c624:	2300      	movs	r3, #0
}
 800c626:	4618      	mov	r0, r3
 800c628:	371c      	adds	r7, #28
 800c62a:	46bd      	mov	sp, r7
 800c62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c630:	4770      	bx	lr
 800c632:	bf00      	nop
 800c634:	fffff7f7 	.word	0xfffff7f7

0800c638 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b088      	sub	sp, #32
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800c640:	2300      	movs	r3, #0
 800c642:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800c644:	2300      	movs	r3, #0
 800c646:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800c648:	2300      	movs	r3, #0
 800c64a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d101      	bne.n	800c656 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800c652:	2301      	movs	r3, #1
 800c654:	e156      	b.n	800c904 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800c65c:	b2db      	uxtb	r3, r3
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d106      	bne.n	800c670 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2200      	movs	r2, #0
 800c666:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f7f8 fdc8 	bl	8005200 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2202      	movs	r2, #2
 800c674:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f000 f95b 	bl	800c934 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	68db      	ldr	r3, [r3, #12]
 800c682:	2b02      	cmp	r3, #2
 800c684:	d00c      	beq.n	800c6a0 <HAL_SAI_Init+0x68>
 800c686:	2b02      	cmp	r3, #2
 800c688:	d80d      	bhi.n	800c6a6 <HAL_SAI_Init+0x6e>
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d002      	beq.n	800c694 <HAL_SAI_Init+0x5c>
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d003      	beq.n	800c69a <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800c692:	e008      	b.n	800c6a6 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800c694:	2300      	movs	r3, #0
 800c696:	61fb      	str	r3, [r7, #28]
      break;
 800c698:	e006      	b.n	800c6a8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800c69a:	2310      	movs	r3, #16
 800c69c:	61fb      	str	r3, [r7, #28]
      break;
 800c69e:	e003      	b.n	800c6a8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800c6a0:	2320      	movs	r3, #32
 800c6a2:	61fb      	str	r3, [r7, #28]
      break;
 800c6a4:	e000      	b.n	800c6a8 <HAL_SAI_Init+0x70>
      break;
 800c6a6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	689b      	ldr	r3, [r3, #8]
 800c6ac:	2b03      	cmp	r3, #3
 800c6ae:	d81e      	bhi.n	800c6ee <HAL_SAI_Init+0xb6>
 800c6b0:	a201      	add	r2, pc, #4	@ (adr r2, 800c6b8 <HAL_SAI_Init+0x80>)
 800c6b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6b6:	bf00      	nop
 800c6b8:	0800c6c9 	.word	0x0800c6c9
 800c6bc:	0800c6cf 	.word	0x0800c6cf
 800c6c0:	0800c6d7 	.word	0x0800c6d7
 800c6c4:	0800c6df 	.word	0x0800c6df
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	617b      	str	r3, [r7, #20]
    }
    break;
 800c6cc:	e010      	b.n	800c6f0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800c6ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c6d2:	617b      	str	r3, [r7, #20]
    }
    break;
 800c6d4:	e00c      	b.n	800c6f0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c6d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c6da:	617b      	str	r3, [r7, #20]
    }
    break;
 800c6dc:	e008      	b.n	800c6f0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c6de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c6e2:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800c6e4:	69fb      	ldr	r3, [r7, #28]
 800c6e6:	f043 0301 	orr.w	r3, r3, #1
 800c6ea:	61fb      	str	r3, [r7, #28]
    }
    break;
 800c6ec:	e000      	b.n	800c6f0 <HAL_SAI_Init+0xb8>
    default:
      break;
 800c6ee:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a85      	ldr	r2, [pc, #532]	@ (800c90c <HAL_SAI_Init+0x2d4>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d004      	beq.n	800c704 <HAL_SAI_Init+0xcc>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4a84      	ldr	r2, [pc, #528]	@ (800c910 <HAL_SAI_Init+0x2d8>)
 800c700:	4293      	cmp	r3, r2
 800c702:	d103      	bne.n	800c70c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800c704:	4a83      	ldr	r2, [pc, #524]	@ (800c914 <HAL_SAI_Init+0x2dc>)
 800c706:	69fb      	ldr	r3, [r7, #28]
 800c708:	6013      	str	r3, [r2, #0]
 800c70a:	e002      	b.n	800c712 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800c70c:	4a82      	ldr	r2, [pc, #520]	@ (800c918 <HAL_SAI_Init+0x2e0>)
 800c70e:	69fb      	ldr	r3, [r7, #28]
 800c710:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	69db      	ldr	r3, [r3, #28]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d04c      	beq.n	800c7b4 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800c71a:	2300      	movs	r3, #0
 800c71c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	4a7a      	ldr	r2, [pc, #488]	@ (800c90c <HAL_SAI_Init+0x2d4>)
 800c724:	4293      	cmp	r3, r2
 800c726:	d004      	beq.n	800c732 <HAL_SAI_Init+0xfa>
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4a78      	ldr	r2, [pc, #480]	@ (800c910 <HAL_SAI_Init+0x2d8>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d104      	bne.n	800c73c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800c732:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800c736:	f7ff fa6d 	bl	800bc14 <HAL_RCCEx_GetPeriphCLKFreq>
 800c73a:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a76      	ldr	r2, [pc, #472]	@ (800c91c <HAL_SAI_Init+0x2e4>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d004      	beq.n	800c750 <HAL_SAI_Init+0x118>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	4a75      	ldr	r2, [pc, #468]	@ (800c920 <HAL_SAI_Init+0x2e8>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d104      	bne.n	800c75a <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800c750:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800c754:	f7ff fa5e 	bl	800bc14 <HAL_RCCEx_GetPeriphCLKFreq>
 800c758:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800c75a:	693a      	ldr	r2, [r7, #16]
 800c75c:	4613      	mov	r3, r2
 800c75e:	009b      	lsls	r3, r3, #2
 800c760:	4413      	add	r3, r2
 800c762:	005b      	lsls	r3, r3, #1
 800c764:	461a      	mov	r2, r3
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	69db      	ldr	r3, [r3, #28]
 800c76a:	025b      	lsls	r3, r3, #9
 800c76c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c770:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	4a6b      	ldr	r2, [pc, #428]	@ (800c924 <HAL_SAI_Init+0x2ec>)
 800c776:	fba2 2303 	umull	r2, r3, r2, r3
 800c77a:	08da      	lsrs	r2, r3, #3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800c780:	68f9      	ldr	r1, [r7, #12]
 800c782:	4b68      	ldr	r3, [pc, #416]	@ (800c924 <HAL_SAI_Init+0x2ec>)
 800c784:	fba3 2301 	umull	r2, r3, r3, r1
 800c788:	08da      	lsrs	r2, r3, #3
 800c78a:	4613      	mov	r3, r2
 800c78c:	009b      	lsls	r3, r3, #2
 800c78e:	4413      	add	r3, r2
 800c790:	005b      	lsls	r3, r3, #1
 800c792:	1aca      	subs	r2, r1, r3
 800c794:	2a08      	cmp	r2, #8
 800c796:	d904      	bls.n	800c7a2 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6a1b      	ldr	r3, [r3, #32]
 800c79c:	1c5a      	adds	r2, r3, #1
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7a6:	2b04      	cmp	r3, #4
 800c7a8:	d104      	bne.n	800c7b4 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6a1b      	ldr	r3, [r3, #32]
 800c7ae:	085a      	lsrs	r2, r3, #1
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d003      	beq.n	800c7c4 <HAL_SAI_Init+0x18c>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	685b      	ldr	r3, [r3, #4]
 800c7c0:	2b02      	cmp	r3, #2
 800c7c2:	d109      	bne.n	800c7d8 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d101      	bne.n	800c7d0 <HAL_SAI_Init+0x198>
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	e001      	b.n	800c7d4 <HAL_SAI_Init+0x19c>
 800c7d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c7d4:	61bb      	str	r3, [r7, #24]
 800c7d6:	e008      	b.n	800c7ea <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	d102      	bne.n	800c7e6 <HAL_SAI_Init+0x1ae>
 800c7e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c7e4:	e000      	b.n	800c7e8 <HAL_SAI_Init+0x1b0>
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	6819      	ldr	r1, [r3, #0]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681a      	ldr	r2, [r3, #0]
 800c7f4:	4b4c      	ldr	r3, [pc, #304]	@ (800c928 <HAL_SAI_Init+0x2f0>)
 800c7f6:	400b      	ands	r3, r1
 800c7f8:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	6819      	ldr	r1, [r3, #0]
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	685a      	ldr	r2, [r3, #4]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c808:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c80e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c814:	431a      	orrs	r2, r3
 800c816:	69bb      	ldr	r3, [r7, #24]
 800c818:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800c822:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	691b      	ldr	r3, [r3, #16]
 800c828:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c82e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6a1b      	ldr	r3, [r3, #32]
 800c834:	051b      	lsls	r3, r3, #20
 800c836:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	430a      	orrs	r2, r1
 800c83e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	6859      	ldr	r1, [r3, #4]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681a      	ldr	r2, [r3, #0]
 800c84a:	4b38      	ldr	r3, [pc, #224]	@ (800c92c <HAL_SAI_Init+0x2f4>)
 800c84c:	400b      	ands	r3, r1
 800c84e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	6859      	ldr	r1, [r3, #4]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	699a      	ldr	r2, [r3, #24]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c85e:	431a      	orrs	r2, r3
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c864:	431a      	orrs	r2, r3
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	430a      	orrs	r2, r1
 800c86c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	6899      	ldr	r1, [r3, #8]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681a      	ldr	r2, [r3, #0]
 800c878:	4b2d      	ldr	r3, [pc, #180]	@ (800c930 <HAL_SAI_Init+0x2f8>)
 800c87a:	400b      	ands	r3, r1
 800c87c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	6899      	ldr	r1, [r3, #8]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c888:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c88e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800c894:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800c89a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8a0:	3b01      	subs	r3, #1
 800c8a2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800c8a4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	430a      	orrs	r2, r1
 800c8ac:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	68d9      	ldr	r1, [r3, #12]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681a      	ldr	r2, [r3, #0]
 800c8b8:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800c8bc:	400b      	ands	r3, r1
 800c8be:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	68d9      	ldr	r1, [r3, #12]
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8ce:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c8d4:	041b      	lsls	r3, r3, #16
 800c8d6:	431a      	orrs	r2, r3
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c8dc:	3b01      	subs	r3, #1
 800c8de:	021b      	lsls	r3, r3, #8
 800c8e0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	430a      	orrs	r2, r1
 800c8e8:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800c902:	2300      	movs	r3, #0
}
 800c904:	4618      	mov	r0, r3
 800c906:	3720      	adds	r7, #32
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}
 800c90c:	40015804 	.word	0x40015804
 800c910:	40015824 	.word	0x40015824
 800c914:	40015800 	.word	0x40015800
 800c918:	40015c00 	.word	0x40015c00
 800c91c:	40015c04 	.word	0x40015c04
 800c920:	40015c24 	.word	0x40015c24
 800c924:	cccccccd 	.word	0xcccccccd
 800c928:	ff05c010 	.word	0xff05c010
 800c92c:	ffff1ff0 	.word	0xffff1ff0
 800c930:	fff88000 	.word	0xfff88000

0800c934 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800c934:	b480      	push	{r7}
 800c936:	b085      	sub	sp, #20
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800c93c:	4b17      	ldr	r3, [pc, #92]	@ (800c99c <SAI_Disable+0x68>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	4a17      	ldr	r2, [pc, #92]	@ (800c9a0 <SAI_Disable+0x6c>)
 800c942:	fba2 2303 	umull	r2, r3, r2, r3
 800c946:	0b1b      	lsrs	r3, r3, #12
 800c948:	009b      	lsls	r3, r3, #2
 800c94a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800c94c:	2300      	movs	r3, #0
 800c94e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	681a      	ldr	r2, [r3, #0]
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800c95e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	1e5a      	subs	r2, r3, #1
 800c964:	60fa      	str	r2, [r7, #12]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d10a      	bne.n	800c980 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c970:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800c97a:	2303      	movs	r3, #3
 800c97c:	72fb      	strb	r3, [r7, #11]
      break;
 800c97e:	e006      	b.n	800c98e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d1e8      	bne.n	800c960 <SAI_Disable+0x2c>

  return status;
 800c98e:	7afb      	ldrb	r3, [r7, #11]
}
 800c990:	4618      	mov	r0, r3
 800c992:	3714      	adds	r7, #20
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr
 800c99c:	2000001c 	.word	0x2000001c
 800c9a0:	95cbec1b 	.word	0x95cbec1b

0800c9a4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b082      	sub	sp, #8
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d101      	bne.n	800c9b6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	e022      	b.n	800c9fc <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c9bc:	b2db      	uxtb	r3, r3
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d105      	bne.n	800c9ce <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f7f8 f833 	bl	8004a34 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2203      	movs	r2, #3
 800c9d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f000 f814 	bl	800ca04 <HAL_SD_InitCard>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d001      	beq.n	800c9e6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	e00a      	b.n	800c9fc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c9fa:	2300      	movs	r3, #0
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3708      	adds	r7, #8
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ca04:	b5b0      	push	{r4, r5, r7, lr}
 800ca06:	b08e      	sub	sp, #56	@ 0x38
 800ca08:	af04      	add	r7, sp, #16
 800ca0a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800ca10:	2300      	movs	r3, #0
 800ca12:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800ca14:	2300      	movs	r3, #0
 800ca16:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800ca20:	2376      	movs	r3, #118	@ 0x76
 800ca22:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681d      	ldr	r5, [r3, #0]
 800ca28:	466c      	mov	r4, sp
 800ca2a:	f107 0318 	add.w	r3, r7, #24
 800ca2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ca32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ca36:	f107 030c 	add.w	r3, r7, #12
 800ca3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ca3c:	4628      	mov	r0, r5
 800ca3e:	f004 f809 	bl	8010a54 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	685a      	ldr	r2, [r3, #4]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ca50:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	4618      	mov	r0, r3
 800ca58:	f004 f846 	bl	8010ae8 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	685a      	ldr	r2, [r3, #4]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ca6a:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800ca6c:	2002      	movs	r0, #2
 800ca6e:	f7f9 fc81 	bl	8006374 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f000 ff02 	bl	800d87c <SD_PowerON>
 800ca78:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d00b      	beq.n	800ca98 <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2201      	movs	r2, #1
 800ca84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca8e:	431a      	orrs	r2, r3
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ca94:	2301      	movs	r3, #1
 800ca96:	e02e      	b.n	800caf6 <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f000 fe21 	bl	800d6e0 <SD_InitCard>
 800ca9e:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800caa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d00b      	beq.n	800cabe <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2201      	movs	r2, #1
 800caaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab4:	431a      	orrs	r2, r3
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800caba:	2301      	movs	r3, #1
 800cabc:	e01b      	b.n	800caf6 <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cac6:	4618      	mov	r0, r3
 800cac8:	f004 f8a0 	bl	8010c0c <SDMMC_CmdBlockLength>
 800cacc:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800cace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d00f      	beq.n	800caf4 <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4a09      	ldr	r2, [pc, #36]	@ (800cb00 <HAL_SD_InitCard+0xfc>)
 800cada:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cae2:	431a      	orrs	r2, r3
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2201      	movs	r2, #1
 800caec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800caf0:	2301      	movs	r3, #1
 800caf2:	e000      	b.n	800caf6 <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 800caf4:	2300      	movs	r3, #0
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3728      	adds	r7, #40	@ 0x28
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bdb0      	pop	{r4, r5, r7, pc}
 800cafe:	bf00      	nop
 800cb00:	004005ff 	.word	0x004005ff

0800cb04 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b092      	sub	sp, #72	@ 0x48
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	60f8      	str	r0, [r7, #12]
 800cb0c:	60b9      	str	r1, [r7, #8]
 800cb0e:	607a      	str	r2, [r7, #4]
 800cb10:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cb12:	f7f9 fc23 	bl	800635c <HAL_GetTick>
 800cb16:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d107      	bne.n	800cb36 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb2a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800cb32:	2301      	movs	r3, #1
 800cb34:	e1bd      	b.n	800ceb2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cb3c:	b2db      	uxtb	r3, r3
 800cb3e:	2b01      	cmp	r3, #1
 800cb40:	f040 81b0 	bne.w	800cea4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2200      	movs	r2, #0
 800cb48:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cb4a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	441a      	add	r2, r3
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d907      	bls.n	800cb68 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb5c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800cb64:	2301      	movs	r3, #1
 800cb66:	e1a4      	b.n	800ceb2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2203      	movs	r2, #3
 800cb6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	2200      	movs	r2, #0
 800cb76:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	d002      	beq.n	800cb86 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800cb80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb82:	025b      	lsls	r3, r3, #9
 800cb84:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cb86:	f04f 33ff 	mov.w	r3, #4294967295
 800cb8a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	025b      	lsls	r3, r3, #9
 800cb90:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cb92:	2390      	movs	r3, #144	@ 0x90
 800cb94:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cb96:	2302      	movs	r3, #2
 800cb98:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800cb9e:	2301      	movs	r3, #1
 800cba0:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f107 0214 	add.w	r2, r7, #20
 800cbaa:	4611      	mov	r1, r2
 800cbac:	4618      	mov	r0, r3
 800cbae:	f004 f801 	bl	8010bb4 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	2b01      	cmp	r3, #1
 800cbb6:	d90a      	bls.n	800cbce <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2202      	movs	r2, #2
 800cbbc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f004 f865 	bl	8010c94 <SDMMC_CmdReadMultiBlock>
 800cbca:	6478      	str	r0, [r7, #68]	@ 0x44
 800cbcc:	e009      	b.n	800cbe2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	2201      	movs	r2, #1
 800cbd2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f004 f838 	bl	8010c50 <SDMMC_CmdReadSingleBlock>
 800cbe0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cbe2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d012      	beq.n	800cc0e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4a7a      	ldr	r2, [pc, #488]	@ (800cdd8 <HAL_SD_ReadBlocks+0x2d4>)
 800cbee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbf6:	431a      	orrs	r2, r3
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2201      	movs	r2, #1
 800cc00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	2200      	movs	r2, #0
 800cc08:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	e151      	b.n	800ceb2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800cc0e:	69bb      	ldr	r3, [r7, #24]
 800cc10:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cc12:	e061      	b.n	800ccd8 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d03c      	beq.n	800cc9c <HAL_SD_ReadBlocks+0x198>
 800cc22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d039      	beq.n	800cc9c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800cc28:	2300      	movs	r3, #0
 800cc2a:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc2c:	e033      	b.n	800cc96 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	4618      	mov	r0, r3
 800cc34:	f003 ff3a 	bl	8010aac <SDMMC_ReadFIFO>
 800cc38:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800cc3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc3c:	b2da      	uxtb	r2, r3
 800cc3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc40:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cc42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc44:	3301      	adds	r3, #1
 800cc46:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cc48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc4a:	3b01      	subs	r3, #1
 800cc4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800cc4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc50:	0a1b      	lsrs	r3, r3, #8
 800cc52:	b2da      	uxtb	r2, r3
 800cc54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc56:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cc58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cc5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc60:	3b01      	subs	r3, #1
 800cc62:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800cc64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc66:	0c1b      	lsrs	r3, r3, #16
 800cc68:	b2da      	uxtb	r2, r3
 800cc6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc6c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cc6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc70:	3301      	adds	r3, #1
 800cc72:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cc74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc76:	3b01      	subs	r3, #1
 800cc78:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800cc7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc7c:	0e1b      	lsrs	r3, r3, #24
 800cc7e:	b2da      	uxtb	r2, r3
 800cc80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc82:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cc84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc86:	3301      	adds	r3, #1
 800cc88:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cc8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc8c:	3b01      	subs	r3, #1
 800cc8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800cc90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc92:	3301      	adds	r3, #1
 800cc94:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc98:	2b07      	cmp	r3, #7
 800cc9a:	d9c8      	bls.n	800cc2e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800cc9c:	f7f9 fb5e 	bl	800635c <HAL_GetTick>
 800cca0:	4602      	mov	r2, r0
 800cca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cca4:	1ad3      	subs	r3, r2, r3
 800cca6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d902      	bls.n	800ccb2 <HAL_SD_ReadBlocks+0x1ae>
 800ccac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d112      	bne.n	800ccd8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	4a48      	ldr	r2, [pc, #288]	@ (800cdd8 <HAL_SD_ReadBlocks+0x2d4>)
 800ccb8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccbe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	2201      	movs	r2, #1
 800ccca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800ccd4:	2303      	movs	r3, #3
 800ccd6:	e0ec      	b.n	800ceb2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccde:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d096      	beq.n	800cc14 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d022      	beq.n	800cd3a <HAL_SD_ReadBlocks+0x236>
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	2b01      	cmp	r3, #1
 800ccf8:	d91f      	bls.n	800cd3a <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccfe:	2b03      	cmp	r3, #3
 800cd00:	d01b      	beq.n	800cd3a <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	4618      	mov	r0, r3
 800cd08:	f004 f82a 	bl	8010d60 <SDMMC_CmdStopTransfer>
 800cd0c:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800cd0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d012      	beq.n	800cd3a <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4a2f      	ldr	r2, [pc, #188]	@ (800cdd8 <HAL_SD_ReadBlocks+0x2d4>)
 800cd1a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cd20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd22:	431a      	orrs	r2, r3
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	2201      	movs	r2, #1
 800cd2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	2200      	movs	r2, #0
 800cd34:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800cd36:	2301      	movs	r3, #1
 800cd38:	e0bb      	b.n	800ceb2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd40:	f003 0308 	and.w	r3, r3, #8
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d012      	beq.n	800cd6e <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	4a22      	ldr	r2, [pc, #136]	@ (800cdd8 <HAL_SD_ReadBlocks+0x2d4>)
 800cd4e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd54:	f043 0208 	orr.w	r2, r3, #8
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	2201      	movs	r2, #1
 800cd60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	2200      	movs	r2, #0
 800cd68:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	e0a1      	b.n	800ceb2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd74:	f003 0302 	and.w	r3, r3, #2
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d012      	beq.n	800cda2 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	4a15      	ldr	r2, [pc, #84]	@ (800cdd8 <HAL_SD_ReadBlocks+0x2d4>)
 800cd82:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd88:	f043 0202 	orr.w	r2, r3, #2
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	2201      	movs	r2, #1
 800cd94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cd9e:	2301      	movs	r3, #1
 800cda0:	e087      	b.n	800ceb2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cda8:	f003 0320 	and.w	r3, r3, #32
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d064      	beq.n	800ce7a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4a08      	ldr	r2, [pc, #32]	@ (800cdd8 <HAL_SD_ReadBlocks+0x2d4>)
 800cdb6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdbc:	f043 0220 	orr.w	r2, r3, #32
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	2201      	movs	r2, #1
 800cdc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	e06d      	b.n	800ceb2 <HAL_SD_ReadBlocks+0x3ae>
 800cdd6:	bf00      	nop
 800cdd8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4618      	mov	r0, r3
 800cde2:	f003 fe63 	bl	8010aac <SDMMC_ReadFIFO>
 800cde6:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800cde8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdea:	b2da      	uxtb	r2, r3
 800cdec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdee:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800cdf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800cdf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdf8:	3b01      	subs	r3, #1
 800cdfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800cdfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdfe:	0a1b      	lsrs	r3, r3, #8
 800ce00:	b2da      	uxtb	r2, r3
 800ce02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce04:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800ce06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce08:	3301      	adds	r3, #1
 800ce0a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800ce0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce0e:	3b01      	subs	r3, #1
 800ce10:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800ce12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce14:	0c1b      	lsrs	r3, r3, #16
 800ce16:	b2da      	uxtb	r2, r3
 800ce18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce1a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800ce1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce1e:	3301      	adds	r3, #1
 800ce20:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800ce22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce24:	3b01      	subs	r3, #1
 800ce26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800ce28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce2a:	0e1b      	lsrs	r3, r3, #24
 800ce2c:	b2da      	uxtb	r2, r3
 800ce2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce30:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800ce32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce34:	3301      	adds	r3, #1
 800ce36:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800ce38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce3a:	3b01      	subs	r3, #1
 800ce3c:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800ce3e:	f7f9 fa8d 	bl	800635c <HAL_GetTick>
 800ce42:	4602      	mov	r2, r0
 800ce44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce46:	1ad3      	subs	r3, r2, r3
 800ce48:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d902      	bls.n	800ce54 <HAL_SD_ReadBlocks+0x350>
 800ce4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d112      	bne.n	800ce7a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4a18      	ldr	r2, [pc, #96]	@ (800cebc <HAL_SD_ReadBlocks+0x3b8>)
 800ce5a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce60:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	2200      	movs	r2, #0
 800ce74:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800ce76:	2301      	movs	r3, #1
 800ce78:	e01b      	b.n	800ceb2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d002      	beq.n	800ce8e <HAL_SD_ReadBlocks+0x38a>
 800ce88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d1a6      	bne.n	800cddc <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f240 523a 	movw	r2, #1338	@ 0x53a
 800ce96:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800cea0:	2300      	movs	r3, #0
 800cea2:	e006      	b.n	800ceb2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cea8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ceb0:	2301      	movs	r3, #1
  }
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	3748      	adds	r7, #72	@ 0x48
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}
 800ceba:	bf00      	nop
 800cebc:	004005ff 	.word	0x004005ff

0800cec0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b092      	sub	sp, #72	@ 0x48
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	60f8      	str	r0, [r7, #12]
 800cec8:	60b9      	str	r1, [r7, #8]
 800ceca:	607a      	str	r2, [r7, #4]
 800cecc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cece:	f7f9 fa45 	bl	800635c <HAL_GetTick>
 800ced2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d107      	bne.n	800cef2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cee6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ceee:	2301      	movs	r3, #1
 800cef0:	e165      	b.n	800d1be <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cef8:	b2db      	uxtb	r3, r3
 800cefa:	2b01      	cmp	r3, #1
 800cefc:	f040 8158 	bne.w	800d1b0 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2200      	movs	r2, #0
 800cf04:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cf06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	441a      	add	r2, r3
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d907      	bls.n	800cf24 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf18:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800cf20:	2301      	movs	r3, #1
 800cf22:	e14c      	b.n	800d1be <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	2203      	movs	r2, #3
 800cf28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	2200      	movs	r2, #0
 800cf32:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	d002      	beq.n	800cf42 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800cf3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf3e:	025b      	lsls	r3, r3, #9
 800cf40:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cf42:	f04f 33ff 	mov.w	r3, #4294967295
 800cf46:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	025b      	lsls	r3, r3, #9
 800cf4c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cf4e:	2390      	movs	r3, #144	@ 0x90
 800cf50:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800cf52:	2300      	movs	r3, #0
 800cf54:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cf56:	2300      	movs	r3, #0
 800cf58:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f107 0218 	add.w	r2, r7, #24
 800cf66:	4611      	mov	r1, r2
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f003 fe23 	bl	8010bb4 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	d90a      	bls.n	800cf8a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	2220      	movs	r2, #32
 800cf78:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cf80:	4618      	mov	r0, r3
 800cf82:	f003 fecb 	bl	8010d1c <SDMMC_CmdWriteMultiBlock>
 800cf86:	6478      	str	r0, [r7, #68]	@ 0x44
 800cf88:	e009      	b.n	800cf9e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	2210      	movs	r2, #16
 800cf8e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cf96:	4618      	mov	r0, r3
 800cf98:	f003 fe9e 	bl	8010cd8 <SDMMC_CmdWriteSingleBlock>
 800cf9c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d012      	beq.n	800cfca <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	4a87      	ldr	r2, [pc, #540]	@ (800d1c8 <HAL_SD_WriteBlocks+0x308>)
 800cfaa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cfb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cfb2:	431a      	orrs	r2, r3
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	2201      	movs	r2, #1
 800cfbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	e0f9      	b.n	800d1be <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800cfca:	69fb      	ldr	r3, [r7, #28]
 800cfcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cfce:	e065      	b.n	800d09c <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d040      	beq.n	800d060 <HAL_SD_WriteBlocks+0x1a0>
 800cfde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d03d      	beq.n	800d060 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	643b      	str	r3, [r7, #64]	@ 0x40
 800cfe8:	e037      	b.n	800d05a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800cfea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfec:	781b      	ldrb	r3, [r3, #0]
 800cfee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cff2:	3301      	adds	r3, #1
 800cff4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cff8:	3b01      	subs	r3, #1
 800cffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800cffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	021a      	lsls	r2, r3, #8
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	4313      	orrs	r3, r2
 800d006:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d00a:	3301      	adds	r3, #1
 800d00c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800d00e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d010:	3b01      	subs	r3, #1
 800d012:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800d014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	041a      	lsls	r2, r3, #16
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	4313      	orrs	r3, r2
 800d01e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d022:	3301      	adds	r3, #1
 800d024:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800d026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d028:	3b01      	subs	r3, #1
 800d02a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800d02c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	061a      	lsls	r2, r3, #24
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	4313      	orrs	r3, r2
 800d036:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d03a:	3301      	adds	r3, #1
 800d03c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800d03e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d040:	3b01      	subs	r3, #1
 800d042:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f107 0214 	add.w	r2, r7, #20
 800d04c:	4611      	mov	r1, r2
 800d04e:	4618      	mov	r0, r3
 800d050:	f003 fd39 	bl	8010ac6 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800d054:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d056:	3301      	adds	r3, #1
 800d058:	643b      	str	r3, [r7, #64]	@ 0x40
 800d05a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d05c:	2b07      	cmp	r3, #7
 800d05e:	d9c4      	bls.n	800cfea <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d060:	f7f9 f97c 	bl	800635c <HAL_GetTick>
 800d064:	4602      	mov	r2, r0
 800d066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d068:	1ad3      	subs	r3, r2, r3
 800d06a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d902      	bls.n	800d076 <HAL_SD_WriteBlocks+0x1b6>
 800d070:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d072:	2b00      	cmp	r3, #0
 800d074:	d112      	bne.n	800d09c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	4a53      	ldr	r2, [pc, #332]	@ (800d1c8 <HAL_SD_WriteBlocks+0x308>)
 800d07c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d082:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d084:	431a      	orrs	r2, r3
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2201      	movs	r2, #1
 800d08e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	2200      	movs	r2, #0
 800d096:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800d098:	2303      	movs	r3, #3
 800d09a:	e090      	b.n	800d1be <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0a2:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d092      	beq.n	800cfd0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d022      	beq.n	800d0fe <HAL_SD_WriteBlocks+0x23e>
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	2b01      	cmp	r3, #1
 800d0bc:	d91f      	bls.n	800d0fe <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0c2:	2b03      	cmp	r3, #3
 800d0c4:	d01b      	beq.n	800d0fe <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f003 fe48 	bl	8010d60 <SDMMC_CmdStopTransfer>
 800d0d0:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d0d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d012      	beq.n	800d0fe <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a3a      	ldr	r2, [pc, #232]	@ (800d1c8 <HAL_SD_WriteBlocks+0x308>)
 800d0de:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d0e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0e6:	431a      	orrs	r2, r3
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	e05f      	b.n	800d1be <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d104:	f003 0308 	and.w	r3, r3, #8
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d012      	beq.n	800d132 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	4a2d      	ldr	r2, [pc, #180]	@ (800d1c8 <HAL_SD_WriteBlocks+0x308>)
 800d112:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d118:	f043 0208 	orr.w	r2, r3, #8
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	2201      	movs	r2, #1
 800d124:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	2200      	movs	r2, #0
 800d12c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d12e:	2301      	movs	r3, #1
 800d130:	e045      	b.n	800d1be <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d138:	f003 0302 	and.w	r3, r3, #2
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d012      	beq.n	800d166 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4a20      	ldr	r2, [pc, #128]	@ (800d1c8 <HAL_SD_WriteBlocks+0x308>)
 800d146:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d14c:	f043 0202 	orr.w	r2, r3, #2
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	2201      	movs	r2, #1
 800d158:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	2200      	movs	r2, #0
 800d160:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d162:	2301      	movs	r3, #1
 800d164:	e02b      	b.n	800d1be <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d16c:	f003 0310 	and.w	r3, r3, #16
 800d170:	2b00      	cmp	r3, #0
 800d172:	d012      	beq.n	800d19a <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4a13      	ldr	r2, [pc, #76]	@ (800d1c8 <HAL_SD_WriteBlocks+0x308>)
 800d17a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d180:	f043 0210 	orr.w	r2, r3, #16
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	2201      	movs	r2, #1
 800d18c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2200      	movs	r2, #0
 800d194:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d196:	2301      	movs	r3, #1
 800d198:	e011      	b.n	800d1be <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d1a2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	e006      	b.n	800d1be <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1b4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d1bc:	2301      	movs	r3, #1
  }
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3748      	adds	r7, #72	@ 0x48
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	004005ff 	.word	0x004005ff

0800d1cc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b083      	sub	sp, #12
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1da:	0f9b      	lsrs	r3, r3, #30
 800d1dc:	b2da      	uxtb	r2, r3
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1e6:	0e9b      	lsrs	r3, r3, #26
 800d1e8:	b2db      	uxtb	r3, r3
 800d1ea:	f003 030f 	and.w	r3, r3, #15
 800d1ee:	b2da      	uxtb	r2, r3
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1f8:	0e1b      	lsrs	r3, r3, #24
 800d1fa:	b2db      	uxtb	r3, r3
 800d1fc:	f003 0303 	and.w	r3, r3, #3
 800d200:	b2da      	uxtb	r2, r3
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d20a:	0c1b      	lsrs	r3, r3, #16
 800d20c:	b2da      	uxtb	r2, r3
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d216:	0a1b      	lsrs	r3, r3, #8
 800d218:	b2da      	uxtb	r2, r3
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d222:	b2da      	uxtb	r2, r3
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d22c:	0d1b      	lsrs	r3, r3, #20
 800d22e:	b29a      	uxth	r2, r3
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d238:	0c1b      	lsrs	r3, r3, #16
 800d23a:	b2db      	uxtb	r3, r3
 800d23c:	f003 030f 	and.w	r3, r3, #15
 800d240:	b2da      	uxtb	r2, r3
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d24a:	0bdb      	lsrs	r3, r3, #15
 800d24c:	b2db      	uxtb	r3, r3
 800d24e:	f003 0301 	and.w	r3, r3, #1
 800d252:	b2da      	uxtb	r2, r3
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d25c:	0b9b      	lsrs	r3, r3, #14
 800d25e:	b2db      	uxtb	r3, r3
 800d260:	f003 0301 	and.w	r3, r3, #1
 800d264:	b2da      	uxtb	r2, r3
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d26e:	0b5b      	lsrs	r3, r3, #13
 800d270:	b2db      	uxtb	r3, r3
 800d272:	f003 0301 	and.w	r3, r3, #1
 800d276:	b2da      	uxtb	r2, r3
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d280:	0b1b      	lsrs	r3, r3, #12
 800d282:	b2db      	uxtb	r3, r3
 800d284:	f003 0301 	and.w	r3, r3, #1
 800d288:	b2da      	uxtb	r2, r3
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	2200      	movs	r2, #0
 800d292:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d163      	bne.n	800d364 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d2a0:	009a      	lsls	r2, r3, #2
 800d2a2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800d2a6:	4013      	ands	r3, r2
 800d2a8:	687a      	ldr	r2, [r7, #4]
 800d2aa:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800d2ac:	0f92      	lsrs	r2, r2, #30
 800d2ae:	431a      	orrs	r2, r3
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2b8:	0edb      	lsrs	r3, r3, #27
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	f003 0307 	and.w	r3, r3, #7
 800d2c0:	b2da      	uxtb	r2, r3
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2ca:	0e1b      	lsrs	r3, r3, #24
 800d2cc:	b2db      	uxtb	r3, r3
 800d2ce:	f003 0307 	and.w	r3, r3, #7
 800d2d2:	b2da      	uxtb	r2, r3
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2dc:	0d5b      	lsrs	r3, r3, #21
 800d2de:	b2db      	uxtb	r3, r3
 800d2e0:	f003 0307 	and.w	r3, r3, #7
 800d2e4:	b2da      	uxtb	r2, r3
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2ee:	0c9b      	lsrs	r3, r3, #18
 800d2f0:	b2db      	uxtb	r3, r3
 800d2f2:	f003 0307 	and.w	r3, r3, #7
 800d2f6:	b2da      	uxtb	r2, r3
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d300:	0bdb      	lsrs	r3, r3, #15
 800d302:	b2db      	uxtb	r3, r3
 800d304:	f003 0307 	and.w	r3, r3, #7
 800d308:	b2da      	uxtb	r2, r3
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	691b      	ldr	r3, [r3, #16]
 800d312:	1c5a      	adds	r2, r3, #1
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	7e1b      	ldrb	r3, [r3, #24]
 800d31c:	b2db      	uxtb	r3, r3
 800d31e:	f003 0307 	and.w	r3, r3, #7
 800d322:	3302      	adds	r3, #2
 800d324:	2201      	movs	r2, #1
 800d326:	fa02 f303 	lsl.w	r3, r2, r3
 800d32a:	687a      	ldr	r2, [r7, #4]
 800d32c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800d32e:	fb03 f202 	mul.w	r2, r3, r2
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	7a1b      	ldrb	r3, [r3, #8]
 800d33a:	b2db      	uxtb	r3, r3
 800d33c:	f003 030f 	and.w	r3, r3, #15
 800d340:	2201      	movs	r2, #1
 800d342:	409a      	lsls	r2, r3
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d34c:	687a      	ldr	r2, [r7, #4]
 800d34e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800d350:	0a52      	lsrs	r2, r2, #9
 800d352:	fb03 f202 	mul.w	r2, r3, r2
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d360:	661a      	str	r2, [r3, #96]	@ 0x60
 800d362:	e031      	b.n	800d3c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d368:	2b01      	cmp	r3, #1
 800d36a:	d11d      	bne.n	800d3a8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d370:	041b      	lsls	r3, r3, #16
 800d372:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d37a:	0c1b      	lsrs	r3, r3, #16
 800d37c:	431a      	orrs	r2, r3
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	691b      	ldr	r3, [r3, #16]
 800d386:	3301      	adds	r3, #1
 800d388:	029a      	lsls	r2, r3, #10
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d39c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	661a      	str	r2, [r3, #96]	@ 0x60
 800d3a6:	e00f      	b.n	800d3c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	4a58      	ldr	r2, [pc, #352]	@ (800d510 <HAL_SD_GetCardCSD+0x344>)
 800d3ae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2201      	movs	r2, #1
 800d3c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	e09d      	b.n	800d504 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3cc:	0b9b      	lsrs	r3, r3, #14
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	f003 0301 	and.w	r3, r3, #1
 800d3d4:	b2da      	uxtb	r2, r3
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3de:	09db      	lsrs	r3, r3, #7
 800d3e0:	b2db      	uxtb	r3, r3
 800d3e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d3e6:	b2da      	uxtb	r2, r3
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3f0:	b2db      	uxtb	r3, r3
 800d3f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d3f6:	b2da      	uxtb	r2, r3
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d400:	0fdb      	lsrs	r3, r3, #31
 800d402:	b2da      	uxtb	r2, r3
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d40c:	0f5b      	lsrs	r3, r3, #29
 800d40e:	b2db      	uxtb	r3, r3
 800d410:	f003 0303 	and.w	r3, r3, #3
 800d414:	b2da      	uxtb	r2, r3
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d41e:	0e9b      	lsrs	r3, r3, #26
 800d420:	b2db      	uxtb	r3, r3
 800d422:	f003 0307 	and.w	r3, r3, #7
 800d426:	b2da      	uxtb	r2, r3
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d430:	0d9b      	lsrs	r3, r3, #22
 800d432:	b2db      	uxtb	r3, r3
 800d434:	f003 030f 	and.w	r3, r3, #15
 800d438:	b2da      	uxtb	r2, r3
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d442:	0d5b      	lsrs	r3, r3, #21
 800d444:	b2db      	uxtb	r3, r3
 800d446:	f003 0301 	and.w	r3, r3, #1
 800d44a:	b2da      	uxtb	r2, r3
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	2200      	movs	r2, #0
 800d456:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d45e:	0c1b      	lsrs	r3, r3, #16
 800d460:	b2db      	uxtb	r3, r3
 800d462:	f003 0301 	and.w	r3, r3, #1
 800d466:	b2da      	uxtb	r2, r3
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d472:	0bdb      	lsrs	r3, r3, #15
 800d474:	b2db      	uxtb	r3, r3
 800d476:	f003 0301 	and.w	r3, r3, #1
 800d47a:	b2da      	uxtb	r2, r3
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d486:	0b9b      	lsrs	r3, r3, #14
 800d488:	b2db      	uxtb	r3, r3
 800d48a:	f003 0301 	and.w	r3, r3, #1
 800d48e:	b2da      	uxtb	r2, r3
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d49a:	0b5b      	lsrs	r3, r3, #13
 800d49c:	b2db      	uxtb	r3, r3
 800d49e:	f003 0301 	and.w	r3, r3, #1
 800d4a2:	b2da      	uxtb	r2, r3
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4ae:	0b1b      	lsrs	r3, r3, #12
 800d4b0:	b2db      	uxtb	r3, r3
 800d4b2:	f003 0301 	and.w	r3, r3, #1
 800d4b6:	b2da      	uxtb	r2, r3
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4c2:	0a9b      	lsrs	r3, r3, #10
 800d4c4:	b2db      	uxtb	r3, r3
 800d4c6:	f003 0303 	and.w	r3, r3, #3
 800d4ca:	b2da      	uxtb	r2, r3
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4d6:	0a1b      	lsrs	r3, r3, #8
 800d4d8:	b2db      	uxtb	r3, r3
 800d4da:	f003 0303 	and.w	r3, r3, #3
 800d4de:	b2da      	uxtb	r2, r3
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4ea:	085b      	lsrs	r3, r3, #1
 800d4ec:	b2db      	uxtb	r3, r3
 800d4ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d4f2:	b2da      	uxtb	r2, r3
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	2201      	movs	r2, #1
 800d4fe:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800d502:	2300      	movs	r3, #0
}
 800d504:	4618      	mov	r0, r3
 800d506:	370c      	adds	r7, #12
 800d508:	46bd      	mov	sp, r7
 800d50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50e:	4770      	bx	lr
 800d510:	004005ff 	.word	0x004005ff

0800d514 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d514:	b480      	push	{r7}
 800d516:	b083      	sub	sp, #12
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d55e:	2300      	movs	r3, #0
}
 800d560:	4618      	mov	r0, r3
 800d562:	370c      	adds	r7, #12
 800d564:	46bd      	mov	sp, r7
 800d566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56a:	4770      	bx	lr

0800d56c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d56c:	b5b0      	push	{r4, r5, r7, lr}
 800d56e:	b08e      	sub	sp, #56	@ 0x38
 800d570:	af04      	add	r7, sp, #16
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d576:	2300      	movs	r3, #0
 800d578:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2203      	movs	r2, #3
 800d580:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d588:	2b03      	cmp	r3, #3
 800d58a:	d02e      	beq.n	800d5ea <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d592:	d106      	bne.n	800d5a2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d598:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	639a      	str	r2, [r3, #56]	@ 0x38
 800d5a0:	e029      	b.n	800d5f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d5a8:	d10a      	bne.n	800d5c0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f000 fa1c 	bl	800d9e8 <SD_WideBus_Enable>
 800d5b0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d5b6:	6a3b      	ldr	r3, [r7, #32]
 800d5b8:	431a      	orrs	r2, r3
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	639a      	str	r2, [r3, #56]	@ 0x38
 800d5be:	e01a      	b.n	800d5f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d10a      	bne.n	800d5dc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f000 fa59 	bl	800da7e <SD_WideBus_Disable>
 800d5cc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d5d2:	6a3b      	ldr	r3, [r7, #32]
 800d5d4:	431a      	orrs	r2, r3
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	639a      	str	r2, [r3, #56]	@ 0x38
 800d5da:	e00c      	b.n	800d5f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5e0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	639a      	str	r2, [r3, #56]	@ 0x38
 800d5e8:	e005      	b.n	800d5f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5ee:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d00b      	beq.n	800d616 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	4a26      	ldr	r2, [pc, #152]	@ (800d69c <HAL_SD_ConfigWideBusOperation+0x130>)
 800d604:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2201      	movs	r2, #1
 800d60a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800d60e:	2301      	movs	r3, #1
 800d610:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d614:	e01f      	b.n	800d656 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	689b      	ldr	r3, [r3, #8]
 800d620:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	68db      	ldr	r3, [r3, #12]
 800d626:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	695b      	ldr	r3, [r3, #20]
 800d630:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	699b      	ldr	r3, [r3, #24]
 800d636:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681d      	ldr	r5, [r3, #0]
 800d63c:	466c      	mov	r4, sp
 800d63e:	f107 0314 	add.w	r3, r7, #20
 800d642:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d646:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d64a:	f107 0308 	add.w	r3, r7, #8
 800d64e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d650:	4628      	mov	r0, r5
 800d652:	f003 f9ff 	bl	8010a54 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d65e:	4618      	mov	r0, r3
 800d660:	f003 fad4 	bl	8010c0c <SDMMC_CmdBlockLength>
 800d664:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d666:	6a3b      	ldr	r3, [r7, #32]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d00c      	beq.n	800d686 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	4a0a      	ldr	r2, [pc, #40]	@ (800d69c <HAL_SD_ConfigWideBusOperation+0x130>)
 800d672:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d678:	6a3b      	ldr	r3, [r7, #32]
 800d67a:	431a      	orrs	r2, r3
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800d680:	2301      	movs	r3, #1
 800d682:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2201      	movs	r2, #1
 800d68a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800d68e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d692:	4618      	mov	r0, r3
 800d694:	3728      	adds	r7, #40	@ 0x28
 800d696:	46bd      	mov	sp, r7
 800d698:	bdb0      	pop	{r4, r5, r7, pc}
 800d69a:	bf00      	nop
 800d69c:	004005ff 	.word	0x004005ff

0800d6a0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b086      	sub	sp, #24
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d6ac:	f107 030c 	add.w	r3, r7, #12
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f000 f970 	bl	800d998 <SD_SendStatus>
 800d6b8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d005      	beq.n	800d6cc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	431a      	orrs	r2, r3
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	0a5b      	lsrs	r3, r3, #9
 800d6d0:	f003 030f 	and.w	r3, r3, #15
 800d6d4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d6d6:	693b      	ldr	r3, [r7, #16]
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3718      	adds	r7, #24
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}

0800d6e0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d6e0:	b5b0      	push	{r4, r5, r7, lr}
 800d6e2:	b094      	sub	sp, #80	@ 0x50
 800d6e4:	af04      	add	r7, sp, #16
 800d6e6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d6e8:	2301      	movs	r3, #1
 800d6ea:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f003 fa07 	bl	8010b04 <SDMMC_GetPowerState>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d102      	bne.n	800d702 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d6fc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800d700:	e0b8      	b.n	800d874 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d706:	2b03      	cmp	r3, #3
 800d708:	d02f      	beq.n	800d76a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	4618      	mov	r0, r3
 800d710:	f003 fc31 	bl	8010f76 <SDMMC_CmdSendCID>
 800d714:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d001      	beq.n	800d720 <SD_InitCard+0x40>
    {
      return errorstate;
 800d71c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d71e:	e0a9      	b.n	800d874 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	2100      	movs	r1, #0
 800d726:	4618      	mov	r0, r3
 800d728:	f003 fa31 	bl	8010b8e <SDMMC_GetResponse>
 800d72c:	4602      	mov	r2, r0
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	2104      	movs	r1, #4
 800d738:	4618      	mov	r0, r3
 800d73a:	f003 fa28 	bl	8010b8e <SDMMC_GetResponse>
 800d73e:	4602      	mov	r2, r0
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	2108      	movs	r1, #8
 800d74a:	4618      	mov	r0, r3
 800d74c:	f003 fa1f 	bl	8010b8e <SDMMC_GetResponse>
 800d750:	4602      	mov	r2, r0
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	210c      	movs	r1, #12
 800d75c:	4618      	mov	r0, r3
 800d75e:	f003 fa16 	bl	8010b8e <SDMMC_GetResponse>
 800d762:	4602      	mov	r2, r0
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d76e:	2b03      	cmp	r3, #3
 800d770:	d00d      	beq.n	800d78e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f107 020e 	add.w	r2, r7, #14
 800d77a:	4611      	mov	r1, r2
 800d77c:	4618      	mov	r0, r3
 800d77e:	f003 fc37 	bl	8010ff0 <SDMMC_CmdSetRelAdd>
 800d782:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d786:	2b00      	cmp	r3, #0
 800d788:	d001      	beq.n	800d78e <SD_InitCard+0xae>
    {
      return errorstate;
 800d78a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d78c:	e072      	b.n	800d874 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d792:	2b03      	cmp	r3, #3
 800d794:	d036      	beq.n	800d804 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d796:	89fb      	ldrh	r3, [r7, #14]
 800d798:	461a      	mov	r2, r3
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681a      	ldr	r2, [r3, #0]
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7a6:	041b      	lsls	r3, r3, #16
 800d7a8:	4619      	mov	r1, r3
 800d7aa:	4610      	mov	r0, r2
 800d7ac:	f003 fc01 	bl	8010fb2 <SDMMC_CmdSendCSD>
 800d7b0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d7b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d001      	beq.n	800d7bc <SD_InitCard+0xdc>
    {
      return errorstate;
 800d7b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7ba:	e05b      	b.n	800d874 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	2100      	movs	r1, #0
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f003 f9e3 	bl	8010b8e <SDMMC_GetResponse>
 800d7c8:	4602      	mov	r2, r0
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	2104      	movs	r1, #4
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f003 f9da 	bl	8010b8e <SDMMC_GetResponse>
 800d7da:	4602      	mov	r2, r0
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	2108      	movs	r1, #8
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f003 f9d1 	bl	8010b8e <SDMMC_GetResponse>
 800d7ec:	4602      	mov	r2, r0
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	210c      	movs	r1, #12
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f003 f9c8 	bl	8010b8e <SDMMC_GetResponse>
 800d7fe:	4602      	mov	r2, r0
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	2104      	movs	r1, #4
 800d80a:	4618      	mov	r0, r3
 800d80c:	f003 f9bf 	bl	8010b8e <SDMMC_GetResponse>
 800d810:	4603      	mov	r3, r0
 800d812:	0d1a      	lsrs	r2, r3, #20
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d818:	f107 0310 	add.w	r3, r7, #16
 800d81c:	4619      	mov	r1, r3
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f7ff fcd4 	bl	800d1cc <HAL_SD_GetCardCSD>
 800d824:	4603      	mov	r3, r0
 800d826:	2b00      	cmp	r3, #0
 800d828:	d002      	beq.n	800d830 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d82a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d82e:	e021      	b.n	800d874 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6819      	ldr	r1, [r3, #0]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d838:	041b      	lsls	r3, r3, #16
 800d83a:	2200      	movs	r2, #0
 800d83c:	461c      	mov	r4, r3
 800d83e:	4615      	mov	r5, r2
 800d840:	4622      	mov	r2, r4
 800d842:	462b      	mov	r3, r5
 800d844:	4608      	mov	r0, r1
 800d846:	f003 faad 	bl	8010da4 <SDMMC_CmdSelDesel>
 800d84a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d84c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d001      	beq.n	800d856 <SD_InitCard+0x176>
  {
    return errorstate;
 800d852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d854:	e00e      	b.n	800d874 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681d      	ldr	r5, [r3, #0]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	466c      	mov	r4, sp
 800d85e:	f103 0210 	add.w	r2, r3, #16
 800d862:	ca07      	ldmia	r2, {r0, r1, r2}
 800d864:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d868:	3304      	adds	r3, #4
 800d86a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d86c:	4628      	mov	r0, r5
 800d86e:	f003 f8f1 	bl	8010a54 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d872:	2300      	movs	r3, #0
}
 800d874:	4618      	mov	r0, r3
 800d876:	3740      	adds	r7, #64	@ 0x40
 800d878:	46bd      	mov	sp, r7
 800d87a:	bdb0      	pop	{r4, r5, r7, pc}

0800d87c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b086      	sub	sp, #24
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d884:	2300      	movs	r3, #0
 800d886:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d888:	2300      	movs	r3, #0
 800d88a:	617b      	str	r3, [r7, #20]
 800d88c:	2300      	movs	r3, #0
 800d88e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4618      	mov	r0, r3
 800d896:	f003 faa8 	bl	8010dea <SDMMC_CmdGoIdleState>
 800d89a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d001      	beq.n	800d8a6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	e072      	b.n	800d98c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f003 fabb 	bl	8010e26 <SDMMC_CmdOperCond>
 800d8b0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d00d      	beq.n	800d8d4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f003 fa91 	bl	8010dea <SDMMC_CmdGoIdleState>
 800d8c8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d004      	beq.n	800d8da <SD_PowerON+0x5e>
    {
      return errorstate;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	e05b      	b.n	800d98c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d8de:	2b01      	cmp	r3, #1
 800d8e0:	d137      	bne.n	800d952 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	2100      	movs	r1, #0
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f003 fabb 	bl	8010e64 <SDMMC_CmdAppCommand>
 800d8ee:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d02d      	beq.n	800d952 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d8f6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d8fa:	e047      	b.n	800d98c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	2100      	movs	r1, #0
 800d902:	4618      	mov	r0, r3
 800d904:	f003 faae 	bl	8010e64 <SDMMC_CmdAppCommand>
 800d908:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d001      	beq.n	800d914 <SD_PowerON+0x98>
    {
      return errorstate;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	e03b      	b.n	800d98c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	491e      	ldr	r1, [pc, #120]	@ (800d994 <SD_PowerON+0x118>)
 800d91a:	4618      	mov	r0, r3
 800d91c:	f003 fac4 	bl	8010ea8 <SDMMC_CmdAppOperCommand>
 800d920:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d002      	beq.n	800d92e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d928:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d92c:	e02e      	b.n	800d98c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	2100      	movs	r1, #0
 800d934:	4618      	mov	r0, r3
 800d936:	f003 f92a 	bl	8010b8e <SDMMC_GetResponse>
 800d93a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	0fdb      	lsrs	r3, r3, #31
 800d940:	2b01      	cmp	r3, #1
 800d942:	d101      	bne.n	800d948 <SD_PowerON+0xcc>
 800d944:	2301      	movs	r3, #1
 800d946:	e000      	b.n	800d94a <SD_PowerON+0xce>
 800d948:	2300      	movs	r3, #0
 800d94a:	613b      	str	r3, [r7, #16]

    count++;
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	3301      	adds	r3, #1
 800d950:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d958:	4293      	cmp	r3, r2
 800d95a:	d802      	bhi.n	800d962 <SD_PowerON+0xe6>
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d0cc      	beq.n	800d8fc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d968:	4293      	cmp	r3, r2
 800d96a:	d902      	bls.n	800d972 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d96c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d970:	e00c      	b.n	800d98c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d003      	beq.n	800d984 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2201      	movs	r2, #1
 800d980:	645a      	str	r2, [r3, #68]	@ 0x44
 800d982:	e002      	b.n	800d98a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2200      	movs	r2, #0
 800d988:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800d98a:	2300      	movs	r3, #0
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3718      	adds	r7, #24
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}
 800d994:	c1100000 	.word	0xc1100000

0800d998 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b084      	sub	sp, #16
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d102      	bne.n	800d9ae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d9a8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d9ac:	e018      	b.n	800d9e0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681a      	ldr	r2, [r3, #0]
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9b6:	041b      	lsls	r3, r3, #16
 800d9b8:	4619      	mov	r1, r3
 800d9ba:	4610      	mov	r0, r2
 800d9bc:	f003 fb39 	bl	8011032 <SDMMC_CmdSendStatus>
 800d9c0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d001      	beq.n	800d9cc <SD_SendStatus+0x34>
  {
    return errorstate;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	e009      	b.n	800d9e0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	2100      	movs	r1, #0
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f003 f8db 	bl	8010b8e <SDMMC_GetResponse>
 800d9d8:	4602      	mov	r2, r0
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d9de:	2300      	movs	r3, #0
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3710      	adds	r7, #16
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}

0800d9e8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b086      	sub	sp, #24
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	60fb      	str	r3, [r7, #12]
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	2100      	movs	r1, #0
 800d9fe:	4618      	mov	r0, r3
 800da00:	f003 f8c5 	bl	8010b8e <SDMMC_GetResponse>
 800da04:	4603      	mov	r3, r0
 800da06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800da0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800da0e:	d102      	bne.n	800da16 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800da10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800da14:	e02f      	b.n	800da76 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800da16:	f107 030c 	add.w	r3, r7, #12
 800da1a:	4619      	mov	r1, r3
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f000 f879 	bl	800db14 <SD_FindSCR>
 800da22:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d001      	beq.n	800da2e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	e023      	b.n	800da76 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800da34:	2b00      	cmp	r3, #0
 800da36:	d01c      	beq.n	800da72 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681a      	ldr	r2, [r3, #0]
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da40:	041b      	lsls	r3, r3, #16
 800da42:	4619      	mov	r1, r3
 800da44:	4610      	mov	r0, r2
 800da46:	f003 fa0d 	bl	8010e64 <SDMMC_CmdAppCommand>
 800da4a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d001      	beq.n	800da56 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	e00f      	b.n	800da76 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	2102      	movs	r1, #2
 800da5c:	4618      	mov	r0, r3
 800da5e:	f003 fa47 	bl	8010ef0 <SDMMC_CmdBusWidth>
 800da62:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d001      	beq.n	800da6e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	e003      	b.n	800da76 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800da6e:	2300      	movs	r3, #0
 800da70:	e001      	b.n	800da76 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800da72:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800da76:	4618      	mov	r0, r3
 800da78:	3718      	adds	r7, #24
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}

0800da7e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800da7e:	b580      	push	{r7, lr}
 800da80:	b086      	sub	sp, #24
 800da82:	af00      	add	r7, sp, #0
 800da84:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800da86:	2300      	movs	r3, #0
 800da88:	60fb      	str	r3, [r7, #12]
 800da8a:	2300      	movs	r3, #0
 800da8c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	2100      	movs	r1, #0
 800da94:	4618      	mov	r0, r3
 800da96:	f003 f87a 	bl	8010b8e <SDMMC_GetResponse>
 800da9a:	4603      	mov	r3, r0
 800da9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800daa0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800daa4:	d102      	bne.n	800daac <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800daa6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800daaa:	e02f      	b.n	800db0c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800daac:	f107 030c 	add.w	r3, r7, #12
 800dab0:	4619      	mov	r1, r3
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f000 f82e 	bl	800db14 <SD_FindSCR>
 800dab8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d001      	beq.n	800dac4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	e023      	b.n	800db0c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d01c      	beq.n	800db08 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681a      	ldr	r2, [r3, #0]
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dad6:	041b      	lsls	r3, r3, #16
 800dad8:	4619      	mov	r1, r3
 800dada:	4610      	mov	r0, r2
 800dadc:	f003 f9c2 	bl	8010e64 <SDMMC_CmdAppCommand>
 800dae0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d001      	beq.n	800daec <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	e00f      	b.n	800db0c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	2100      	movs	r1, #0
 800daf2:	4618      	mov	r0, r3
 800daf4:	f003 f9fc 	bl	8010ef0 <SDMMC_CmdBusWidth>
 800daf8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d001      	beq.n	800db04 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	e003      	b.n	800db0c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800db04:	2300      	movs	r3, #0
 800db06:	e001      	b.n	800db0c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800db08:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3718      	adds	r7, #24
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}

0800db14 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800db14:	b590      	push	{r4, r7, lr}
 800db16:	b08f      	sub	sp, #60	@ 0x3c
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800db1e:	f7f8 fc1d 	bl	800635c <HAL_GetTick>
 800db22:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800db24:	2300      	movs	r3, #0
 800db26:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800db28:	2300      	movs	r3, #0
 800db2a:	60bb      	str	r3, [r7, #8]
 800db2c:	2300      	movs	r3, #0
 800db2e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	2108      	movs	r1, #8
 800db3a:	4618      	mov	r0, r3
 800db3c:	f003 f866 	bl	8010c0c <SDMMC_CmdBlockLength>
 800db40:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800db42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db44:	2b00      	cmp	r3, #0
 800db46:	d001      	beq.n	800db4c <SD_FindSCR+0x38>
  {
    return errorstate;
 800db48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db4a:	e0b2      	b.n	800dcb2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db54:	041b      	lsls	r3, r3, #16
 800db56:	4619      	mov	r1, r3
 800db58:	4610      	mov	r0, r2
 800db5a:	f003 f983 	bl	8010e64 <SDMMC_CmdAppCommand>
 800db5e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800db60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db62:	2b00      	cmp	r3, #0
 800db64:	d001      	beq.n	800db6a <SD_FindSCR+0x56>
  {
    return errorstate;
 800db66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db68:	e0a3      	b.n	800dcb2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800db6a:	f04f 33ff 	mov.w	r3, #4294967295
 800db6e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800db70:	2308      	movs	r3, #8
 800db72:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800db74:	2330      	movs	r3, #48	@ 0x30
 800db76:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800db78:	2302      	movs	r3, #2
 800db7a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800db7c:	2300      	movs	r3, #0
 800db7e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800db80:	2301      	movs	r3, #1
 800db82:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	f107 0210 	add.w	r2, r7, #16
 800db8c:	4611      	mov	r1, r2
 800db8e:	4618      	mov	r0, r3
 800db90:	f003 f810 	bl	8010bb4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	4618      	mov	r0, r3
 800db9a:	f003 f9cb 	bl	8010f34 <SDMMC_CmdSendSCR>
 800db9e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d02a      	beq.n	800dbfc <SD_FindSCR+0xe8>
  {
    return errorstate;
 800dba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dba8:	e083      	b.n	800dcb2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d00f      	beq.n	800dbd8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6819      	ldr	r1, [r3, #0]
 800dbbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbbe:	009b      	lsls	r3, r3, #2
 800dbc0:	f107 0208 	add.w	r2, r7, #8
 800dbc4:	18d4      	adds	r4, r2, r3
 800dbc6:	4608      	mov	r0, r1
 800dbc8:	f002 ff70 	bl	8010aac <SDMMC_ReadFIFO>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	6023      	str	r3, [r4, #0]
      index++;
 800dbd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbd2:	3301      	adds	r3, #1
 800dbd4:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbd6:	e006      	b.n	800dbe6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d012      	beq.n	800dc0c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800dbe6:	f7f8 fbb9 	bl	800635c <HAL_GetTick>
 800dbea:	4602      	mov	r2, r0
 800dbec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbee:	1ad3      	subs	r3, r2, r3
 800dbf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbf4:	d102      	bne.n	800dbfc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dbf6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dbfa:	e05a      	b.n	800dcb2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc02:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d0cf      	beq.n	800dbaa <SD_FindSCR+0x96>
 800dc0a:	e000      	b.n	800dc0e <SD_FindSCR+0xfa>
      break;
 800dc0c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc14:	f003 0308 	and.w	r3, r3, #8
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d005      	beq.n	800dc28 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	2208      	movs	r2, #8
 800dc22:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800dc24:	2308      	movs	r3, #8
 800dc26:	e044      	b.n	800dcb2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc2e:	f003 0302 	and.w	r3, r3, #2
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d005      	beq.n	800dc42 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	2202      	movs	r2, #2
 800dc3c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dc3e:	2302      	movs	r3, #2
 800dc40:	e037      	b.n	800dcb2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc48:	f003 0320 	and.w	r3, r3, #32
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d005      	beq.n	800dc5c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	2220      	movs	r2, #32
 800dc56:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800dc58:	2320      	movs	r3, #32
 800dc5a:	e02a      	b.n	800dcb2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	f240 523a 	movw	r2, #1338	@ 0x53a
 800dc64:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	061a      	lsls	r2, r3, #24
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	021b      	lsls	r3, r3, #8
 800dc6e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dc72:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	0a1b      	lsrs	r3, r3, #8
 800dc78:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dc7c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	0e1b      	lsrs	r3, r3, #24
 800dc82:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dc84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc86:	601a      	str	r2, [r3, #0]
    scr++;
 800dc88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc8a:	3304      	adds	r3, #4
 800dc8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	061a      	lsls	r2, r3, #24
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	021b      	lsls	r3, r3, #8
 800dc96:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dc9a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	0a1b      	lsrs	r3, r3, #8
 800dca0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dca4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	0e1b      	lsrs	r3, r3, #24
 800dcaa:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dcac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcae:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800dcb0:	2300      	movs	r3, #0
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	373c      	adds	r7, #60	@ 0x3c
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd90      	pop	{r4, r7, pc}

0800dcba <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800dcba:	b580      	push	{r7, lr}
 800dcbc:	b082      	sub	sp, #8
 800dcbe:	af00      	add	r7, sp, #0
 800dcc0:	6078      	str	r0, [r7, #4]
 800dcc2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d101      	bne.n	800dcce <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800dcca:	2301      	movs	r3, #1
 800dccc:	e025      	b.n	800dd1a <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800dcd4:	b2db      	uxtb	r3, r3
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d106      	bne.n	800dce8 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f7f7 fa82 	bl	80051ec <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2202      	movs	r2, #2
 800dcec:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681a      	ldr	r2, [r3, #0]
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	3304      	adds	r3, #4
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	4610      	mov	r0, r2
 800dcfc:	f002 fde4 	bl	80108c8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6818      	ldr	r0, [r3, #0]
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	461a      	mov	r2, r3
 800dd0a:	6839      	ldr	r1, [r7, #0]
 800dd0c:	f002 fe38 	bl	8010980 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2201      	movs	r2, #1
 800dd14:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800dd18:	2300      	movs	r3, #0
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3708      	adds	r7, #8
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}
	...

0800dd24 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b084      	sub	sp, #16
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d101      	bne.n	800dd36 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800dd32:	2301      	movs	r3, #1
 800dd34:	e04c      	b.n	800ddd0 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dd3c:	b2db      	uxtb	r3, r3
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d106      	bne.n	800dd50 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2200      	movs	r2, #0
 800dd46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f7f6 fed4 	bl	8004af8 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2202      	movs	r2, #2
 800dd54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	681a      	ldr	r2, [r3, #0]
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f022 0203 	bic.w	r2, r2, #3
 800dd66:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800dd70:	68fa      	ldr	r2, [r7, #12]
 800dd72:	4b19      	ldr	r3, [pc, #100]	@ (800ddd8 <HAL_SPDIFRX_Init+0xb4>)
 800dd74:	4013      	ands	r3, r2
 800dd76:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800dd80:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800dd86:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800dd8c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800dd92:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800dd98:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800dd9e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800dda4:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800ddaa:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800ddb0:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800ddb2:	68fa      	ldr	r2, [r7, #12]
 800ddb4:	4313      	orrs	r3, r2
 800ddb6:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	68fa      	ldr	r2, [r7, #12]
 800ddbe:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2201      	movs	r2, #1
 800ddca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800ddce:	2300      	movs	r3, #0
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3710      	adds	r7, #16
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}
 800ddd8:	fff88407 	.word	0xfff88407

0800dddc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d101      	bne.n	800ddee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ddea:	2301      	movs	r3, #1
 800ddec:	e09d      	b.n	800df2a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d108      	bne.n	800de08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	685b      	ldr	r3, [r3, #4]
 800ddfa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ddfe:	d009      	beq.n	800de14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2200      	movs	r2, #0
 800de04:	61da      	str	r2, [r3, #28]
 800de06:	e005      	b.n	800de14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2200      	movs	r2, #0
 800de0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2200      	movs	r2, #0
 800de12:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2200      	movs	r2, #0
 800de18:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800de20:	b2db      	uxtb	r3, r3
 800de22:	2b00      	cmp	r3, #0
 800de24:	d106      	bne.n	800de34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2200      	movs	r2, #0
 800de2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f7f6 fec6 	bl	8004bc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2202      	movs	r2, #2
 800de38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	681a      	ldr	r2, [r3, #0]
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800de4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	68db      	ldr	r3, [r3, #12]
 800de50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800de54:	d902      	bls.n	800de5c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800de56:	2300      	movs	r3, #0
 800de58:	60fb      	str	r3, [r7, #12]
 800de5a:	e002      	b.n	800de62 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800de5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800de60:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	68db      	ldr	r3, [r3, #12]
 800de66:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800de6a:	d007      	beq.n	800de7c <HAL_SPI_Init+0xa0>
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	68db      	ldr	r3, [r3, #12]
 800de70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800de74:	d002      	beq.n	800de7c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2200      	movs	r2, #0
 800de7a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	685b      	ldr	r3, [r3, #4]
 800de80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	689b      	ldr	r3, [r3, #8]
 800de88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800de8c:	431a      	orrs	r2, r3
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	691b      	ldr	r3, [r3, #16]
 800de92:	f003 0302 	and.w	r3, r3, #2
 800de96:	431a      	orrs	r2, r3
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	695b      	ldr	r3, [r3, #20]
 800de9c:	f003 0301 	and.w	r3, r3, #1
 800dea0:	431a      	orrs	r2, r3
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	699b      	ldr	r3, [r3, #24]
 800dea6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800deaa:	431a      	orrs	r2, r3
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	69db      	ldr	r3, [r3, #28]
 800deb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800deb4:	431a      	orrs	r2, r3
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6a1b      	ldr	r3, [r3, #32]
 800deba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800debe:	ea42 0103 	orr.w	r1, r2, r3
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dec6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	430a      	orrs	r2, r1
 800ded0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	699b      	ldr	r3, [r3, #24]
 800ded6:	0c1b      	lsrs	r3, r3, #16
 800ded8:	f003 0204 	and.w	r2, r3, #4
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dee0:	f003 0310 	and.w	r3, r3, #16
 800dee4:	431a      	orrs	r2, r3
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800deea:	f003 0308 	and.w	r3, r3, #8
 800deee:	431a      	orrs	r2, r3
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	68db      	ldr	r3, [r3, #12]
 800def4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800def8:	ea42 0103 	orr.w	r1, r2, r3
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	430a      	orrs	r2, r1
 800df08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	69da      	ldr	r2, [r3, #28]
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800df18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2200      	movs	r2, #0
 800df1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	2201      	movs	r2, #1
 800df24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800df28:	2300      	movs	r3, #0
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	3710      	adds	r7, #16
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}

0800df32 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800df32:	b580      	push	{r7, lr}
 800df34:	b082      	sub	sp, #8
 800df36:	af00      	add	r7, sp, #0
 800df38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d101      	bne.n	800df44 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800df40:	2301      	movs	r3, #1
 800df42:	e049      	b.n	800dfd8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800df4a:	b2db      	uxtb	r3, r3
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d106      	bne.n	800df5e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2200      	movs	r2, #0
 800df54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f7f6 fe93 	bl	8004c84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2202      	movs	r2, #2
 800df62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681a      	ldr	r2, [r3, #0]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	3304      	adds	r3, #4
 800df6e:	4619      	mov	r1, r3
 800df70:	4610      	mov	r0, r2
 800df72:	f000 fc11 	bl	800e798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2201      	movs	r2, #1
 800df7a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2201      	movs	r2, #1
 800df82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2201      	movs	r2, #1
 800df8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2201      	movs	r2, #1
 800df92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2201      	movs	r2, #1
 800df9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2201      	movs	r2, #1
 800dfa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2201      	movs	r2, #1
 800dfaa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2201      	movs	r2, #1
 800dfb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2201      	movs	r2, #1
 800dfba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2201      	movs	r2, #1
 800dfc2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2201      	movs	r2, #1
 800dfca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dfd6:	2300      	movs	r3, #0
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	3708      	adds	r7, #8
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}

0800dfe0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b085      	sub	sp, #20
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dfee:	b2db      	uxtb	r3, r3
 800dff0:	2b01      	cmp	r3, #1
 800dff2:	d001      	beq.n	800dff8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dff4:	2301      	movs	r3, #1
 800dff6:	e054      	b.n	800e0a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2202      	movs	r2, #2
 800dffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	68da      	ldr	r2, [r3, #12]
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	f042 0201 	orr.w	r2, r2, #1
 800e00e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	4a26      	ldr	r2, [pc, #152]	@ (800e0b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800e016:	4293      	cmp	r3, r2
 800e018:	d022      	beq.n	800e060 <HAL_TIM_Base_Start_IT+0x80>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e022:	d01d      	beq.n	800e060 <HAL_TIM_Base_Start_IT+0x80>
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	4a22      	ldr	r2, [pc, #136]	@ (800e0b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800e02a:	4293      	cmp	r3, r2
 800e02c:	d018      	beq.n	800e060 <HAL_TIM_Base_Start_IT+0x80>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	4a21      	ldr	r2, [pc, #132]	@ (800e0b8 <HAL_TIM_Base_Start_IT+0xd8>)
 800e034:	4293      	cmp	r3, r2
 800e036:	d013      	beq.n	800e060 <HAL_TIM_Base_Start_IT+0x80>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	4a1f      	ldr	r2, [pc, #124]	@ (800e0bc <HAL_TIM_Base_Start_IT+0xdc>)
 800e03e:	4293      	cmp	r3, r2
 800e040:	d00e      	beq.n	800e060 <HAL_TIM_Base_Start_IT+0x80>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	4a1e      	ldr	r2, [pc, #120]	@ (800e0c0 <HAL_TIM_Base_Start_IT+0xe0>)
 800e048:	4293      	cmp	r3, r2
 800e04a:	d009      	beq.n	800e060 <HAL_TIM_Base_Start_IT+0x80>
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4a1c      	ldr	r2, [pc, #112]	@ (800e0c4 <HAL_TIM_Base_Start_IT+0xe4>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d004      	beq.n	800e060 <HAL_TIM_Base_Start_IT+0x80>
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	4a1b      	ldr	r2, [pc, #108]	@ (800e0c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800e05c:	4293      	cmp	r3, r2
 800e05e:	d115      	bne.n	800e08c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	689a      	ldr	r2, [r3, #8]
 800e066:	4b19      	ldr	r3, [pc, #100]	@ (800e0cc <HAL_TIM_Base_Start_IT+0xec>)
 800e068:	4013      	ands	r3, r2
 800e06a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	2b06      	cmp	r3, #6
 800e070:	d015      	beq.n	800e09e <HAL_TIM_Base_Start_IT+0xbe>
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e078:	d011      	beq.n	800e09e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	681a      	ldr	r2, [r3, #0]
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	f042 0201 	orr.w	r2, r2, #1
 800e088:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e08a:	e008      	b.n	800e09e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	681a      	ldr	r2, [r3, #0]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	f042 0201 	orr.w	r2, r2, #1
 800e09a:	601a      	str	r2, [r3, #0]
 800e09c:	e000      	b.n	800e0a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e09e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e0a0:	2300      	movs	r3, #0
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	3714      	adds	r7, #20
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ac:	4770      	bx	lr
 800e0ae:	bf00      	nop
 800e0b0:	40010000 	.word	0x40010000
 800e0b4:	40000400 	.word	0x40000400
 800e0b8:	40000800 	.word	0x40000800
 800e0bc:	40000c00 	.word	0x40000c00
 800e0c0:	40010400 	.word	0x40010400
 800e0c4:	40014000 	.word	0x40014000
 800e0c8:	40001800 	.word	0x40001800
 800e0cc:	00010007 	.word	0x00010007

0800e0d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b082      	sub	sp, #8
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d101      	bne.n	800e0e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e0de:	2301      	movs	r3, #1
 800e0e0:	e049      	b.n	800e176 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e0e8:	b2db      	uxtb	r3, r3
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d106      	bne.n	800e0fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f7f6 fe32 	bl	8004d60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2202      	movs	r2, #2
 800e100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	3304      	adds	r3, #4
 800e10c:	4619      	mov	r1, r3
 800e10e:	4610      	mov	r0, r2
 800e110:	f000 fb42 	bl	800e798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2201      	movs	r2, #1
 800e118:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2201      	movs	r2, #1
 800e120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2201      	movs	r2, #1
 800e128:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2201      	movs	r2, #1
 800e130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2201      	movs	r2, #1
 800e138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2201      	movs	r2, #1
 800e140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2201      	movs	r2, #1
 800e148:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2201      	movs	r2, #1
 800e150:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2201      	movs	r2, #1
 800e158:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2201      	movs	r2, #1
 800e160:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2201      	movs	r2, #1
 800e168:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2201      	movs	r2, #1
 800e170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e174:	2300      	movs	r3, #0
}
 800e176:	4618      	mov	r0, r3
 800e178:	3708      	adds	r7, #8
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}

0800e17e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e17e:	b580      	push	{r7, lr}
 800e180:	b084      	sub	sp, #16
 800e182:	af00      	add	r7, sp, #0
 800e184:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	68db      	ldr	r3, [r3, #12]
 800e18c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	691b      	ldr	r3, [r3, #16]
 800e194:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	f003 0302 	and.w	r3, r3, #2
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d020      	beq.n	800e1e2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	f003 0302 	and.w	r3, r3, #2
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d01b      	beq.n	800e1e2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	f06f 0202 	mvn.w	r2, #2
 800e1b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	699b      	ldr	r3, [r3, #24]
 800e1c0:	f003 0303 	and.w	r3, r3, #3
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d003      	beq.n	800e1d0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e1c8:	6878      	ldr	r0, [r7, #4]
 800e1ca:	f000 fac7 	bl	800e75c <HAL_TIM_IC_CaptureCallback>
 800e1ce:	e005      	b.n	800e1dc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f000 fab9 	bl	800e748 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f000 faca 	bl	800e770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	f003 0304 	and.w	r3, r3, #4
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d020      	beq.n	800e22e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	f003 0304 	and.w	r3, r3, #4
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d01b      	beq.n	800e22e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	f06f 0204 	mvn.w	r2, #4
 800e1fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2202      	movs	r2, #2
 800e204:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	699b      	ldr	r3, [r3, #24]
 800e20c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e210:	2b00      	cmp	r3, #0
 800e212:	d003      	beq.n	800e21c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e214:	6878      	ldr	r0, [r7, #4]
 800e216:	f000 faa1 	bl	800e75c <HAL_TIM_IC_CaptureCallback>
 800e21a:	e005      	b.n	800e228 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	f000 fa93 	bl	800e748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f000 faa4 	bl	800e770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2200      	movs	r2, #0
 800e22c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	f003 0308 	and.w	r3, r3, #8
 800e234:	2b00      	cmp	r3, #0
 800e236:	d020      	beq.n	800e27a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	f003 0308 	and.w	r3, r3, #8
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d01b      	beq.n	800e27a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f06f 0208 	mvn.w	r2, #8
 800e24a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2204      	movs	r2, #4
 800e250:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	69db      	ldr	r3, [r3, #28]
 800e258:	f003 0303 	and.w	r3, r3, #3
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d003      	beq.n	800e268 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f000 fa7b 	bl	800e75c <HAL_TIM_IC_CaptureCallback>
 800e266:	e005      	b.n	800e274 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f000 fa6d 	bl	800e748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f000 fa7e 	bl	800e770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2200      	movs	r2, #0
 800e278:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	f003 0310 	and.w	r3, r3, #16
 800e280:	2b00      	cmp	r3, #0
 800e282:	d020      	beq.n	800e2c6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	f003 0310 	and.w	r3, r3, #16
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d01b      	beq.n	800e2c6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	f06f 0210 	mvn.w	r2, #16
 800e296:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2208      	movs	r2, #8
 800e29c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	69db      	ldr	r3, [r3, #28]
 800e2a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d003      	beq.n	800e2b4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	f000 fa55 	bl	800e75c <HAL_TIM_IC_CaptureCallback>
 800e2b2:	e005      	b.n	800e2c0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f000 fa47 	bl	800e748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f000 fa58 	bl	800e770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	f003 0301 	and.w	r3, r3, #1
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d00c      	beq.n	800e2ea <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	f003 0301 	and.w	r3, r3, #1
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d007      	beq.n	800e2ea <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	f06f 0201 	mvn.w	r2, #1
 800e2e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f7f5 fed5 	bl	8004094 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d104      	bne.n	800e2fe <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d00c      	beq.n	800e318 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e304:	2b00      	cmp	r3, #0
 800e306:	d007      	beq.n	800e318 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f000 fef4 	bl	800f100 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d00c      	beq.n	800e33c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d007      	beq.n	800e33c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f000 feec 	bl	800f114 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e342:	2b00      	cmp	r3, #0
 800e344:	d00c      	beq.n	800e360 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d007      	beq.n	800e360 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f000 fa12 	bl	800e784 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	f003 0320 	and.w	r3, r3, #32
 800e366:	2b00      	cmp	r3, #0
 800e368:	d00c      	beq.n	800e384 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	f003 0320 	and.w	r3, r3, #32
 800e370:	2b00      	cmp	r3, #0
 800e372:	d007      	beq.n	800e384 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	f06f 0220 	mvn.w	r2, #32
 800e37c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e37e:	6878      	ldr	r0, [r7, #4]
 800e380:	f000 feb4 	bl	800f0ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e384:	bf00      	nop
 800e386:	3710      	adds	r7, #16
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}

0800e38c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b086      	sub	sp, #24
 800e390:	af00      	add	r7, sp, #0
 800e392:	60f8      	str	r0, [r7, #12]
 800e394:	60b9      	str	r1, [r7, #8]
 800e396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e398:	2300      	movs	r3, #0
 800e39a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e3a2:	2b01      	cmp	r3, #1
 800e3a4:	d101      	bne.n	800e3aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e3a6:	2302      	movs	r3, #2
 800e3a8:	e0ff      	b.n	800e5aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	2201      	movs	r2, #1
 800e3ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	2b14      	cmp	r3, #20
 800e3b6:	f200 80f0 	bhi.w	800e59a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e3ba:	a201      	add	r2, pc, #4	@ (adr r2, 800e3c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3c0:	0800e415 	.word	0x0800e415
 800e3c4:	0800e59b 	.word	0x0800e59b
 800e3c8:	0800e59b 	.word	0x0800e59b
 800e3cc:	0800e59b 	.word	0x0800e59b
 800e3d0:	0800e455 	.word	0x0800e455
 800e3d4:	0800e59b 	.word	0x0800e59b
 800e3d8:	0800e59b 	.word	0x0800e59b
 800e3dc:	0800e59b 	.word	0x0800e59b
 800e3e0:	0800e497 	.word	0x0800e497
 800e3e4:	0800e59b 	.word	0x0800e59b
 800e3e8:	0800e59b 	.word	0x0800e59b
 800e3ec:	0800e59b 	.word	0x0800e59b
 800e3f0:	0800e4d7 	.word	0x0800e4d7
 800e3f4:	0800e59b 	.word	0x0800e59b
 800e3f8:	0800e59b 	.word	0x0800e59b
 800e3fc:	0800e59b 	.word	0x0800e59b
 800e400:	0800e519 	.word	0x0800e519
 800e404:	0800e59b 	.word	0x0800e59b
 800e408:	0800e59b 	.word	0x0800e59b
 800e40c:	0800e59b 	.word	0x0800e59b
 800e410:	0800e559 	.word	0x0800e559
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	68b9      	ldr	r1, [r7, #8]
 800e41a:	4618      	mov	r0, r3
 800e41c:	f000 fa62 	bl	800e8e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	699a      	ldr	r2, [r3, #24]
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f042 0208 	orr.w	r2, r2, #8
 800e42e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	699a      	ldr	r2, [r3, #24]
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f022 0204 	bic.w	r2, r2, #4
 800e43e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	6999      	ldr	r1, [r3, #24]
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	691a      	ldr	r2, [r3, #16]
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	430a      	orrs	r2, r1
 800e450:	619a      	str	r2, [r3, #24]
      break;
 800e452:	e0a5      	b.n	800e5a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	68b9      	ldr	r1, [r7, #8]
 800e45a:	4618      	mov	r0, r3
 800e45c:	f000 fab4 	bl	800e9c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	699a      	ldr	r2, [r3, #24]
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e46e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	699a      	ldr	r2, [r3, #24]
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e47e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	6999      	ldr	r1, [r3, #24]
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	691b      	ldr	r3, [r3, #16]
 800e48a:	021a      	lsls	r2, r3, #8
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	430a      	orrs	r2, r1
 800e492:	619a      	str	r2, [r3, #24]
      break;
 800e494:	e084      	b.n	800e5a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	68b9      	ldr	r1, [r7, #8]
 800e49c:	4618      	mov	r0, r3
 800e49e:	f000 fb0b 	bl	800eab8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	69da      	ldr	r2, [r3, #28]
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f042 0208 	orr.w	r2, r2, #8
 800e4b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	69da      	ldr	r2, [r3, #28]
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	f022 0204 	bic.w	r2, r2, #4
 800e4c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	69d9      	ldr	r1, [r3, #28]
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	691a      	ldr	r2, [r3, #16]
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	430a      	orrs	r2, r1
 800e4d2:	61da      	str	r2, [r3, #28]
      break;
 800e4d4:	e064      	b.n	800e5a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	68b9      	ldr	r1, [r7, #8]
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f000 fb61 	bl	800eba4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	69da      	ldr	r2, [r3, #28]
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e4f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	69da      	ldr	r2, [r3, #28]
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	69d9      	ldr	r1, [r3, #28]
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	691b      	ldr	r3, [r3, #16]
 800e50c:	021a      	lsls	r2, r3, #8
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	430a      	orrs	r2, r1
 800e514:	61da      	str	r2, [r3, #28]
      break;
 800e516:	e043      	b.n	800e5a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	68b9      	ldr	r1, [r7, #8]
 800e51e:	4618      	mov	r0, r3
 800e520:	f000 fb98 	bl	800ec54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	f042 0208 	orr.w	r2, r2, #8
 800e532:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	f022 0204 	bic.w	r2, r2, #4
 800e542:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e54a:	68bb      	ldr	r3, [r7, #8]
 800e54c:	691a      	ldr	r2, [r3, #16]
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	430a      	orrs	r2, r1
 800e554:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e556:	e023      	b.n	800e5a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	68b9      	ldr	r1, [r7, #8]
 800e55e:	4618      	mov	r0, r3
 800e560:	f000 fbca 	bl	800ecf8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e572:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e582:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	691b      	ldr	r3, [r3, #16]
 800e58e:	021a      	lsls	r2, r3, #8
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	430a      	orrs	r2, r1
 800e596:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e598:	e002      	b.n	800e5a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e59a:	2301      	movs	r3, #1
 800e59c:	75fb      	strb	r3, [r7, #23]
      break;
 800e59e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e5a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	3718      	adds	r7, #24
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}
 800e5b2:	bf00      	nop

0800e5b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b084      	sub	sp, #16
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	d101      	bne.n	800e5d0 <HAL_TIM_ConfigClockSource+0x1c>
 800e5cc:	2302      	movs	r3, #2
 800e5ce:	e0b4      	b.n	800e73a <HAL_TIM_ConfigClockSource+0x186>
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2201      	movs	r2, #1
 800e5d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2202      	movs	r2, #2
 800e5dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	689b      	ldr	r3, [r3, #8]
 800e5e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e5e8:	68ba      	ldr	r2, [r7, #8]
 800e5ea:	4b56      	ldr	r3, [pc, #344]	@ (800e744 <HAL_TIM_ConfigClockSource+0x190>)
 800e5ec:	4013      	ands	r3, r2
 800e5ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e5f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	68ba      	ldr	r2, [r7, #8]
 800e5fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e608:	d03e      	beq.n	800e688 <HAL_TIM_ConfigClockSource+0xd4>
 800e60a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e60e:	f200 8087 	bhi.w	800e720 <HAL_TIM_ConfigClockSource+0x16c>
 800e612:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e616:	f000 8086 	beq.w	800e726 <HAL_TIM_ConfigClockSource+0x172>
 800e61a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e61e:	d87f      	bhi.n	800e720 <HAL_TIM_ConfigClockSource+0x16c>
 800e620:	2b70      	cmp	r3, #112	@ 0x70
 800e622:	d01a      	beq.n	800e65a <HAL_TIM_ConfigClockSource+0xa6>
 800e624:	2b70      	cmp	r3, #112	@ 0x70
 800e626:	d87b      	bhi.n	800e720 <HAL_TIM_ConfigClockSource+0x16c>
 800e628:	2b60      	cmp	r3, #96	@ 0x60
 800e62a:	d050      	beq.n	800e6ce <HAL_TIM_ConfigClockSource+0x11a>
 800e62c:	2b60      	cmp	r3, #96	@ 0x60
 800e62e:	d877      	bhi.n	800e720 <HAL_TIM_ConfigClockSource+0x16c>
 800e630:	2b50      	cmp	r3, #80	@ 0x50
 800e632:	d03c      	beq.n	800e6ae <HAL_TIM_ConfigClockSource+0xfa>
 800e634:	2b50      	cmp	r3, #80	@ 0x50
 800e636:	d873      	bhi.n	800e720 <HAL_TIM_ConfigClockSource+0x16c>
 800e638:	2b40      	cmp	r3, #64	@ 0x40
 800e63a:	d058      	beq.n	800e6ee <HAL_TIM_ConfigClockSource+0x13a>
 800e63c:	2b40      	cmp	r3, #64	@ 0x40
 800e63e:	d86f      	bhi.n	800e720 <HAL_TIM_ConfigClockSource+0x16c>
 800e640:	2b30      	cmp	r3, #48	@ 0x30
 800e642:	d064      	beq.n	800e70e <HAL_TIM_ConfigClockSource+0x15a>
 800e644:	2b30      	cmp	r3, #48	@ 0x30
 800e646:	d86b      	bhi.n	800e720 <HAL_TIM_ConfigClockSource+0x16c>
 800e648:	2b20      	cmp	r3, #32
 800e64a:	d060      	beq.n	800e70e <HAL_TIM_ConfigClockSource+0x15a>
 800e64c:	2b20      	cmp	r3, #32
 800e64e:	d867      	bhi.n	800e720 <HAL_TIM_ConfigClockSource+0x16c>
 800e650:	2b00      	cmp	r3, #0
 800e652:	d05c      	beq.n	800e70e <HAL_TIM_ConfigClockSource+0x15a>
 800e654:	2b10      	cmp	r3, #16
 800e656:	d05a      	beq.n	800e70e <HAL_TIM_ConfigClockSource+0x15a>
 800e658:	e062      	b.n	800e720 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e66a:	f000 fc13 	bl	800ee94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	689b      	ldr	r3, [r3, #8]
 800e674:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e67c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	68ba      	ldr	r2, [r7, #8]
 800e684:	609a      	str	r2, [r3, #8]
      break;
 800e686:	e04f      	b.n	800e728 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e698:	f000 fbfc 	bl	800ee94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	689a      	ldr	r2, [r3, #8]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e6aa:	609a      	str	r2, [r3, #8]
      break;
 800e6ac:	e03c      	b.n	800e728 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e6ba:	461a      	mov	r2, r3
 800e6bc:	f000 fb70 	bl	800eda0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	2150      	movs	r1, #80	@ 0x50
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f000 fbc9 	bl	800ee5e <TIM_ITRx_SetConfig>
      break;
 800e6cc:	e02c      	b.n	800e728 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e6da:	461a      	mov	r2, r3
 800e6dc:	f000 fb8f 	bl	800edfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	2160      	movs	r1, #96	@ 0x60
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f000 fbb9 	bl	800ee5e <TIM_ITRx_SetConfig>
      break;
 800e6ec:	e01c      	b.n	800e728 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e6fa:	461a      	mov	r2, r3
 800e6fc:	f000 fb50 	bl	800eda0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	2140      	movs	r1, #64	@ 0x40
 800e706:	4618      	mov	r0, r3
 800e708:	f000 fba9 	bl	800ee5e <TIM_ITRx_SetConfig>
      break;
 800e70c:	e00c      	b.n	800e728 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681a      	ldr	r2, [r3, #0]
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	4619      	mov	r1, r3
 800e718:	4610      	mov	r0, r2
 800e71a:	f000 fba0 	bl	800ee5e <TIM_ITRx_SetConfig>
      break;
 800e71e:	e003      	b.n	800e728 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800e720:	2301      	movs	r3, #1
 800e722:	73fb      	strb	r3, [r7, #15]
      break;
 800e724:	e000      	b.n	800e728 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800e726:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2201      	movs	r2, #1
 800e72c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2200      	movs	r2, #0
 800e734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e738:	7bfb      	ldrb	r3, [r7, #15]
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	3710      	adds	r7, #16
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}
 800e742:	bf00      	nop
 800e744:	fffeff88 	.word	0xfffeff88

0800e748 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e748:	b480      	push	{r7}
 800e74a:	b083      	sub	sp, #12
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e750:	bf00      	nop
 800e752:	370c      	adds	r7, #12
 800e754:	46bd      	mov	sp, r7
 800e756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75a:	4770      	bx	lr

0800e75c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e75c:	b480      	push	{r7}
 800e75e:	b083      	sub	sp, #12
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e764:	bf00      	nop
 800e766:	370c      	adds	r7, #12
 800e768:	46bd      	mov	sp, r7
 800e76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76e:	4770      	bx	lr

0800e770 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e770:	b480      	push	{r7}
 800e772:	b083      	sub	sp, #12
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e778:	bf00      	nop
 800e77a:	370c      	adds	r7, #12
 800e77c:	46bd      	mov	sp, r7
 800e77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e782:	4770      	bx	lr

0800e784 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e784:	b480      	push	{r7}
 800e786:	b083      	sub	sp, #12
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e78c:	bf00      	nop
 800e78e:	370c      	adds	r7, #12
 800e790:	46bd      	mov	sp, r7
 800e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e796:	4770      	bx	lr

0800e798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e798:	b480      	push	{r7}
 800e79a:	b085      	sub	sp, #20
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
 800e7a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	4a43      	ldr	r2, [pc, #268]	@ (800e8b8 <TIM_Base_SetConfig+0x120>)
 800e7ac:	4293      	cmp	r3, r2
 800e7ae:	d013      	beq.n	800e7d8 <TIM_Base_SetConfig+0x40>
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e7b6:	d00f      	beq.n	800e7d8 <TIM_Base_SetConfig+0x40>
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	4a40      	ldr	r2, [pc, #256]	@ (800e8bc <TIM_Base_SetConfig+0x124>)
 800e7bc:	4293      	cmp	r3, r2
 800e7be:	d00b      	beq.n	800e7d8 <TIM_Base_SetConfig+0x40>
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	4a3f      	ldr	r2, [pc, #252]	@ (800e8c0 <TIM_Base_SetConfig+0x128>)
 800e7c4:	4293      	cmp	r3, r2
 800e7c6:	d007      	beq.n	800e7d8 <TIM_Base_SetConfig+0x40>
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	4a3e      	ldr	r2, [pc, #248]	@ (800e8c4 <TIM_Base_SetConfig+0x12c>)
 800e7cc:	4293      	cmp	r3, r2
 800e7ce:	d003      	beq.n	800e7d8 <TIM_Base_SetConfig+0x40>
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	4a3d      	ldr	r2, [pc, #244]	@ (800e8c8 <TIM_Base_SetConfig+0x130>)
 800e7d4:	4293      	cmp	r3, r2
 800e7d6:	d108      	bne.n	800e7ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e7de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	685b      	ldr	r3, [r3, #4]
 800e7e4:	68fa      	ldr	r2, [r7, #12]
 800e7e6:	4313      	orrs	r3, r2
 800e7e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	4a32      	ldr	r2, [pc, #200]	@ (800e8b8 <TIM_Base_SetConfig+0x120>)
 800e7ee:	4293      	cmp	r3, r2
 800e7f0:	d02b      	beq.n	800e84a <TIM_Base_SetConfig+0xb2>
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e7f8:	d027      	beq.n	800e84a <TIM_Base_SetConfig+0xb2>
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	4a2f      	ldr	r2, [pc, #188]	@ (800e8bc <TIM_Base_SetConfig+0x124>)
 800e7fe:	4293      	cmp	r3, r2
 800e800:	d023      	beq.n	800e84a <TIM_Base_SetConfig+0xb2>
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	4a2e      	ldr	r2, [pc, #184]	@ (800e8c0 <TIM_Base_SetConfig+0x128>)
 800e806:	4293      	cmp	r3, r2
 800e808:	d01f      	beq.n	800e84a <TIM_Base_SetConfig+0xb2>
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	4a2d      	ldr	r2, [pc, #180]	@ (800e8c4 <TIM_Base_SetConfig+0x12c>)
 800e80e:	4293      	cmp	r3, r2
 800e810:	d01b      	beq.n	800e84a <TIM_Base_SetConfig+0xb2>
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	4a2c      	ldr	r2, [pc, #176]	@ (800e8c8 <TIM_Base_SetConfig+0x130>)
 800e816:	4293      	cmp	r3, r2
 800e818:	d017      	beq.n	800e84a <TIM_Base_SetConfig+0xb2>
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	4a2b      	ldr	r2, [pc, #172]	@ (800e8cc <TIM_Base_SetConfig+0x134>)
 800e81e:	4293      	cmp	r3, r2
 800e820:	d013      	beq.n	800e84a <TIM_Base_SetConfig+0xb2>
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	4a2a      	ldr	r2, [pc, #168]	@ (800e8d0 <TIM_Base_SetConfig+0x138>)
 800e826:	4293      	cmp	r3, r2
 800e828:	d00f      	beq.n	800e84a <TIM_Base_SetConfig+0xb2>
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	4a29      	ldr	r2, [pc, #164]	@ (800e8d4 <TIM_Base_SetConfig+0x13c>)
 800e82e:	4293      	cmp	r3, r2
 800e830:	d00b      	beq.n	800e84a <TIM_Base_SetConfig+0xb2>
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	4a28      	ldr	r2, [pc, #160]	@ (800e8d8 <TIM_Base_SetConfig+0x140>)
 800e836:	4293      	cmp	r3, r2
 800e838:	d007      	beq.n	800e84a <TIM_Base_SetConfig+0xb2>
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	4a27      	ldr	r2, [pc, #156]	@ (800e8dc <TIM_Base_SetConfig+0x144>)
 800e83e:	4293      	cmp	r3, r2
 800e840:	d003      	beq.n	800e84a <TIM_Base_SetConfig+0xb2>
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	4a26      	ldr	r2, [pc, #152]	@ (800e8e0 <TIM_Base_SetConfig+0x148>)
 800e846:	4293      	cmp	r3, r2
 800e848:	d108      	bne.n	800e85c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	68db      	ldr	r3, [r3, #12]
 800e856:	68fa      	ldr	r2, [r7, #12]
 800e858:	4313      	orrs	r3, r2
 800e85a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	695b      	ldr	r3, [r3, #20]
 800e866:	4313      	orrs	r3, r2
 800e868:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	689a      	ldr	r2, [r3, #8]
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	681a      	ldr	r2, [r3, #0]
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	4a0e      	ldr	r2, [pc, #56]	@ (800e8b8 <TIM_Base_SetConfig+0x120>)
 800e87e:	4293      	cmp	r3, r2
 800e880:	d003      	beq.n	800e88a <TIM_Base_SetConfig+0xf2>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	4a10      	ldr	r2, [pc, #64]	@ (800e8c8 <TIM_Base_SetConfig+0x130>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d103      	bne.n	800e892 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	691a      	ldr	r2, [r3, #16]
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	f043 0204 	orr.w	r2, r3, #4
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2201      	movs	r2, #1
 800e8a2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	68fa      	ldr	r2, [r7, #12]
 800e8a8:	601a      	str	r2, [r3, #0]
}
 800e8aa:	bf00      	nop
 800e8ac:	3714      	adds	r7, #20
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b4:	4770      	bx	lr
 800e8b6:	bf00      	nop
 800e8b8:	40010000 	.word	0x40010000
 800e8bc:	40000400 	.word	0x40000400
 800e8c0:	40000800 	.word	0x40000800
 800e8c4:	40000c00 	.word	0x40000c00
 800e8c8:	40010400 	.word	0x40010400
 800e8cc:	40014000 	.word	0x40014000
 800e8d0:	40014400 	.word	0x40014400
 800e8d4:	40014800 	.word	0x40014800
 800e8d8:	40001800 	.word	0x40001800
 800e8dc:	40001c00 	.word	0x40001c00
 800e8e0:	40002000 	.word	0x40002000

0800e8e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b087      	sub	sp, #28
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	6a1b      	ldr	r3, [r3, #32]
 800e8f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6a1b      	ldr	r3, [r3, #32]
 800e8f8:	f023 0201 	bic.w	r2, r3, #1
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	699b      	ldr	r3, [r3, #24]
 800e90a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e90c:	68fa      	ldr	r2, [r7, #12]
 800e90e:	4b2b      	ldr	r3, [pc, #172]	@ (800e9bc <TIM_OC1_SetConfig+0xd8>)
 800e910:	4013      	ands	r3, r2
 800e912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	f023 0303 	bic.w	r3, r3, #3
 800e91a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	68fa      	ldr	r2, [r7, #12]
 800e922:	4313      	orrs	r3, r2
 800e924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e926:	697b      	ldr	r3, [r7, #20]
 800e928:	f023 0302 	bic.w	r3, r3, #2
 800e92c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	689b      	ldr	r3, [r3, #8]
 800e932:	697a      	ldr	r2, [r7, #20]
 800e934:	4313      	orrs	r3, r2
 800e936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	4a21      	ldr	r2, [pc, #132]	@ (800e9c0 <TIM_OC1_SetConfig+0xdc>)
 800e93c:	4293      	cmp	r3, r2
 800e93e:	d003      	beq.n	800e948 <TIM_OC1_SetConfig+0x64>
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	4a20      	ldr	r2, [pc, #128]	@ (800e9c4 <TIM_OC1_SetConfig+0xe0>)
 800e944:	4293      	cmp	r3, r2
 800e946:	d10c      	bne.n	800e962 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	f023 0308 	bic.w	r3, r3, #8
 800e94e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	68db      	ldr	r3, [r3, #12]
 800e954:	697a      	ldr	r2, [r7, #20]
 800e956:	4313      	orrs	r3, r2
 800e958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	f023 0304 	bic.w	r3, r3, #4
 800e960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	4a16      	ldr	r2, [pc, #88]	@ (800e9c0 <TIM_OC1_SetConfig+0xdc>)
 800e966:	4293      	cmp	r3, r2
 800e968:	d003      	beq.n	800e972 <TIM_OC1_SetConfig+0x8e>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	4a15      	ldr	r2, [pc, #84]	@ (800e9c4 <TIM_OC1_SetConfig+0xe0>)
 800e96e:	4293      	cmp	r3, r2
 800e970:	d111      	bne.n	800e996 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e972:	693b      	ldr	r3, [r7, #16]
 800e974:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e97a:	693b      	ldr	r3, [r7, #16]
 800e97c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	695b      	ldr	r3, [r3, #20]
 800e986:	693a      	ldr	r2, [r7, #16]
 800e988:	4313      	orrs	r3, r2
 800e98a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	699b      	ldr	r3, [r3, #24]
 800e990:	693a      	ldr	r2, [r7, #16]
 800e992:	4313      	orrs	r3, r2
 800e994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	693a      	ldr	r2, [r7, #16]
 800e99a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	68fa      	ldr	r2, [r7, #12]
 800e9a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	685a      	ldr	r2, [r3, #4]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	697a      	ldr	r2, [r7, #20]
 800e9ae:	621a      	str	r2, [r3, #32]
}
 800e9b0:	bf00      	nop
 800e9b2:	371c      	adds	r7, #28
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr
 800e9bc:	fffeff8f 	.word	0xfffeff8f
 800e9c0:	40010000 	.word	0x40010000
 800e9c4:	40010400 	.word	0x40010400

0800e9c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b087      	sub	sp, #28
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6a1b      	ldr	r3, [r3, #32]
 800e9d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6a1b      	ldr	r3, [r3, #32]
 800e9dc:	f023 0210 	bic.w	r2, r3, #16
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	685b      	ldr	r3, [r3, #4]
 800e9e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	699b      	ldr	r3, [r3, #24]
 800e9ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e9f0:	68fa      	ldr	r2, [r7, #12]
 800e9f2:	4b2e      	ldr	r3, [pc, #184]	@ (800eaac <TIM_OC2_SetConfig+0xe4>)
 800e9f4:	4013      	ands	r3, r2
 800e9f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e9fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	021b      	lsls	r3, r3, #8
 800ea06:	68fa      	ldr	r2, [r7, #12]
 800ea08:	4313      	orrs	r3, r2
 800ea0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	f023 0320 	bic.w	r3, r3, #32
 800ea12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	689b      	ldr	r3, [r3, #8]
 800ea18:	011b      	lsls	r3, r3, #4
 800ea1a:	697a      	ldr	r2, [r7, #20]
 800ea1c:	4313      	orrs	r3, r2
 800ea1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	4a23      	ldr	r2, [pc, #140]	@ (800eab0 <TIM_OC2_SetConfig+0xe8>)
 800ea24:	4293      	cmp	r3, r2
 800ea26:	d003      	beq.n	800ea30 <TIM_OC2_SetConfig+0x68>
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	4a22      	ldr	r2, [pc, #136]	@ (800eab4 <TIM_OC2_SetConfig+0xec>)
 800ea2c:	4293      	cmp	r3, r2
 800ea2e:	d10d      	bne.n	800ea4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ea36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	68db      	ldr	r3, [r3, #12]
 800ea3c:	011b      	lsls	r3, r3, #4
 800ea3e:	697a      	ldr	r2, [r7, #20]
 800ea40:	4313      	orrs	r3, r2
 800ea42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ea4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	4a18      	ldr	r2, [pc, #96]	@ (800eab0 <TIM_OC2_SetConfig+0xe8>)
 800ea50:	4293      	cmp	r3, r2
 800ea52:	d003      	beq.n	800ea5c <TIM_OC2_SetConfig+0x94>
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	4a17      	ldr	r2, [pc, #92]	@ (800eab4 <TIM_OC2_SetConfig+0xec>)
 800ea58:	4293      	cmp	r3, r2
 800ea5a:	d113      	bne.n	800ea84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ea5c:	693b      	ldr	r3, [r7, #16]
 800ea5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ea62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ea64:	693b      	ldr	r3, [r7, #16]
 800ea66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ea6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	695b      	ldr	r3, [r3, #20]
 800ea70:	009b      	lsls	r3, r3, #2
 800ea72:	693a      	ldr	r2, [r7, #16]
 800ea74:	4313      	orrs	r3, r2
 800ea76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	699b      	ldr	r3, [r3, #24]
 800ea7c:	009b      	lsls	r3, r3, #2
 800ea7e:	693a      	ldr	r2, [r7, #16]
 800ea80:	4313      	orrs	r3, r2
 800ea82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	693a      	ldr	r2, [r7, #16]
 800ea88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	68fa      	ldr	r2, [r7, #12]
 800ea8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	685a      	ldr	r2, [r3, #4]
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	697a      	ldr	r2, [r7, #20]
 800ea9c:	621a      	str	r2, [r3, #32]
}
 800ea9e:	bf00      	nop
 800eaa0:	371c      	adds	r7, #28
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa8:	4770      	bx	lr
 800eaaa:	bf00      	nop
 800eaac:	feff8fff 	.word	0xfeff8fff
 800eab0:	40010000 	.word	0x40010000
 800eab4:	40010400 	.word	0x40010400

0800eab8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eab8:	b480      	push	{r7}
 800eaba:	b087      	sub	sp, #28
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6a1b      	ldr	r3, [r3, #32]
 800eac6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6a1b      	ldr	r3, [r3, #32]
 800eacc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	685b      	ldr	r3, [r3, #4]
 800ead8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	69db      	ldr	r3, [r3, #28]
 800eade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800eae0:	68fa      	ldr	r2, [r7, #12]
 800eae2:	4b2d      	ldr	r3, [pc, #180]	@ (800eb98 <TIM_OC3_SetConfig+0xe0>)
 800eae4:	4013      	ands	r3, r2
 800eae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	f023 0303 	bic.w	r3, r3, #3
 800eaee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	68fa      	ldr	r2, [r7, #12]
 800eaf6:	4313      	orrs	r3, r2
 800eaf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800eb00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	689b      	ldr	r3, [r3, #8]
 800eb06:	021b      	lsls	r3, r3, #8
 800eb08:	697a      	ldr	r2, [r7, #20]
 800eb0a:	4313      	orrs	r3, r2
 800eb0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	4a22      	ldr	r2, [pc, #136]	@ (800eb9c <TIM_OC3_SetConfig+0xe4>)
 800eb12:	4293      	cmp	r3, r2
 800eb14:	d003      	beq.n	800eb1e <TIM_OC3_SetConfig+0x66>
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	4a21      	ldr	r2, [pc, #132]	@ (800eba0 <TIM_OC3_SetConfig+0xe8>)
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	d10d      	bne.n	800eb3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800eb24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	68db      	ldr	r3, [r3, #12]
 800eb2a:	021b      	lsls	r3, r3, #8
 800eb2c:	697a      	ldr	r2, [r7, #20]
 800eb2e:	4313      	orrs	r3, r2
 800eb30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800eb32:	697b      	ldr	r3, [r7, #20]
 800eb34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800eb38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	4a17      	ldr	r2, [pc, #92]	@ (800eb9c <TIM_OC3_SetConfig+0xe4>)
 800eb3e:	4293      	cmp	r3, r2
 800eb40:	d003      	beq.n	800eb4a <TIM_OC3_SetConfig+0x92>
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	4a16      	ldr	r2, [pc, #88]	@ (800eba0 <TIM_OC3_SetConfig+0xe8>)
 800eb46:	4293      	cmp	r3, r2
 800eb48:	d113      	bne.n	800eb72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eb50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800eb52:	693b      	ldr	r3, [r7, #16]
 800eb54:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800eb58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	695b      	ldr	r3, [r3, #20]
 800eb5e:	011b      	lsls	r3, r3, #4
 800eb60:	693a      	ldr	r2, [r7, #16]
 800eb62:	4313      	orrs	r3, r2
 800eb64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	699b      	ldr	r3, [r3, #24]
 800eb6a:	011b      	lsls	r3, r3, #4
 800eb6c:	693a      	ldr	r2, [r7, #16]
 800eb6e:	4313      	orrs	r3, r2
 800eb70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	693a      	ldr	r2, [r7, #16]
 800eb76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	68fa      	ldr	r2, [r7, #12]
 800eb7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	685a      	ldr	r2, [r3, #4]
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	697a      	ldr	r2, [r7, #20]
 800eb8a:	621a      	str	r2, [r3, #32]
}
 800eb8c:	bf00      	nop
 800eb8e:	371c      	adds	r7, #28
 800eb90:	46bd      	mov	sp, r7
 800eb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb96:	4770      	bx	lr
 800eb98:	fffeff8f 	.word	0xfffeff8f
 800eb9c:	40010000 	.word	0x40010000
 800eba0:	40010400 	.word	0x40010400

0800eba4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eba4:	b480      	push	{r7}
 800eba6:	b087      	sub	sp, #28
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6a1b      	ldr	r3, [r3, #32]
 800ebb2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	6a1b      	ldr	r3, [r3, #32]
 800ebb8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	685b      	ldr	r3, [r3, #4]
 800ebc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	69db      	ldr	r3, [r3, #28]
 800ebca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ebcc:	68fa      	ldr	r2, [r7, #12]
 800ebce:	4b1e      	ldr	r3, [pc, #120]	@ (800ec48 <TIM_OC4_SetConfig+0xa4>)
 800ebd0:	4013      	ands	r3, r2
 800ebd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ebda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	021b      	lsls	r3, r3, #8
 800ebe2:	68fa      	ldr	r2, [r7, #12]
 800ebe4:	4313      	orrs	r3, r2
 800ebe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ebe8:	693b      	ldr	r3, [r7, #16]
 800ebea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ebee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	689b      	ldr	r3, [r3, #8]
 800ebf4:	031b      	lsls	r3, r3, #12
 800ebf6:	693a      	ldr	r2, [r7, #16]
 800ebf8:	4313      	orrs	r3, r2
 800ebfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	4a13      	ldr	r2, [pc, #76]	@ (800ec4c <TIM_OC4_SetConfig+0xa8>)
 800ec00:	4293      	cmp	r3, r2
 800ec02:	d003      	beq.n	800ec0c <TIM_OC4_SetConfig+0x68>
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	4a12      	ldr	r2, [pc, #72]	@ (800ec50 <TIM_OC4_SetConfig+0xac>)
 800ec08:	4293      	cmp	r3, r2
 800ec0a:	d109      	bne.n	800ec20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ec12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	695b      	ldr	r3, [r3, #20]
 800ec18:	019b      	lsls	r3, r3, #6
 800ec1a:	697a      	ldr	r2, [r7, #20]
 800ec1c:	4313      	orrs	r3, r2
 800ec1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	697a      	ldr	r2, [r7, #20]
 800ec24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	68fa      	ldr	r2, [r7, #12]
 800ec2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	685a      	ldr	r2, [r3, #4]
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	693a      	ldr	r2, [r7, #16]
 800ec38:	621a      	str	r2, [r3, #32]
}
 800ec3a:	bf00      	nop
 800ec3c:	371c      	adds	r7, #28
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec44:	4770      	bx	lr
 800ec46:	bf00      	nop
 800ec48:	feff8fff 	.word	0xfeff8fff
 800ec4c:	40010000 	.word	0x40010000
 800ec50:	40010400 	.word	0x40010400

0800ec54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ec54:	b480      	push	{r7}
 800ec56:	b087      	sub	sp, #28
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
 800ec5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	6a1b      	ldr	r3, [r3, #32]
 800ec62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	6a1b      	ldr	r3, [r3, #32]
 800ec68:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	685b      	ldr	r3, [r3, #4]
 800ec74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ec7c:	68fa      	ldr	r2, [r7, #12]
 800ec7e:	4b1b      	ldr	r3, [pc, #108]	@ (800ecec <TIM_OC5_SetConfig+0x98>)
 800ec80:	4013      	ands	r3, r2
 800ec82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	68fa      	ldr	r2, [r7, #12]
 800ec8a:	4313      	orrs	r3, r2
 800ec8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ec8e:	693b      	ldr	r3, [r7, #16]
 800ec90:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ec94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	689b      	ldr	r3, [r3, #8]
 800ec9a:	041b      	lsls	r3, r3, #16
 800ec9c:	693a      	ldr	r2, [r7, #16]
 800ec9e:	4313      	orrs	r3, r2
 800eca0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	4a12      	ldr	r2, [pc, #72]	@ (800ecf0 <TIM_OC5_SetConfig+0x9c>)
 800eca6:	4293      	cmp	r3, r2
 800eca8:	d003      	beq.n	800ecb2 <TIM_OC5_SetConfig+0x5e>
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	4a11      	ldr	r2, [pc, #68]	@ (800ecf4 <TIM_OC5_SetConfig+0xa0>)
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d109      	bne.n	800ecc6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ecb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	695b      	ldr	r3, [r3, #20]
 800ecbe:	021b      	lsls	r3, r3, #8
 800ecc0:	697a      	ldr	r2, [r7, #20]
 800ecc2:	4313      	orrs	r3, r2
 800ecc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	697a      	ldr	r2, [r7, #20]
 800ecca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	68fa      	ldr	r2, [r7, #12]
 800ecd0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ecd2:	683b      	ldr	r3, [r7, #0]
 800ecd4:	685a      	ldr	r2, [r3, #4]
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	693a      	ldr	r2, [r7, #16]
 800ecde:	621a      	str	r2, [r3, #32]
}
 800ece0:	bf00      	nop
 800ece2:	371c      	adds	r7, #28
 800ece4:	46bd      	mov	sp, r7
 800ece6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecea:	4770      	bx	lr
 800ecec:	fffeff8f 	.word	0xfffeff8f
 800ecf0:	40010000 	.word	0x40010000
 800ecf4:	40010400 	.word	0x40010400

0800ecf8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ecf8:	b480      	push	{r7}
 800ecfa:	b087      	sub	sp, #28
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6a1b      	ldr	r3, [r3, #32]
 800ed06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	6a1b      	ldr	r3, [r3, #32]
 800ed0c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	685b      	ldr	r3, [r3, #4]
 800ed18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ed20:	68fa      	ldr	r2, [r7, #12]
 800ed22:	4b1c      	ldr	r3, [pc, #112]	@ (800ed94 <TIM_OC6_SetConfig+0x9c>)
 800ed24:	4013      	ands	r3, r2
 800ed26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	021b      	lsls	r3, r3, #8
 800ed2e:	68fa      	ldr	r2, [r7, #12]
 800ed30:	4313      	orrs	r3, r2
 800ed32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ed3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	689b      	ldr	r3, [r3, #8]
 800ed40:	051b      	lsls	r3, r3, #20
 800ed42:	693a      	ldr	r2, [r7, #16]
 800ed44:	4313      	orrs	r3, r2
 800ed46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	4a13      	ldr	r2, [pc, #76]	@ (800ed98 <TIM_OC6_SetConfig+0xa0>)
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	d003      	beq.n	800ed58 <TIM_OC6_SetConfig+0x60>
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	4a12      	ldr	r2, [pc, #72]	@ (800ed9c <TIM_OC6_SetConfig+0xa4>)
 800ed54:	4293      	cmp	r3, r2
 800ed56:	d109      	bne.n	800ed6c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ed5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	695b      	ldr	r3, [r3, #20]
 800ed64:	029b      	lsls	r3, r3, #10
 800ed66:	697a      	ldr	r2, [r7, #20]
 800ed68:	4313      	orrs	r3, r2
 800ed6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	697a      	ldr	r2, [r7, #20]
 800ed70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	68fa      	ldr	r2, [r7, #12]
 800ed76:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	685a      	ldr	r2, [r3, #4]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	693a      	ldr	r2, [r7, #16]
 800ed84:	621a      	str	r2, [r3, #32]
}
 800ed86:	bf00      	nop
 800ed88:	371c      	adds	r7, #28
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed90:	4770      	bx	lr
 800ed92:	bf00      	nop
 800ed94:	feff8fff 	.word	0xfeff8fff
 800ed98:	40010000 	.word	0x40010000
 800ed9c:	40010400 	.word	0x40010400

0800eda0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800eda0:	b480      	push	{r7}
 800eda2:	b087      	sub	sp, #28
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	60f8      	str	r0, [r7, #12]
 800eda8:	60b9      	str	r1, [r7, #8]
 800edaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	6a1b      	ldr	r3, [r3, #32]
 800edb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	6a1b      	ldr	r3, [r3, #32]
 800edb6:	f023 0201 	bic.w	r2, r3, #1
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	699b      	ldr	r3, [r3, #24]
 800edc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800edca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	011b      	lsls	r3, r3, #4
 800edd0:	693a      	ldr	r2, [r7, #16]
 800edd2:	4313      	orrs	r3, r2
 800edd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800edd6:	697b      	ldr	r3, [r7, #20]
 800edd8:	f023 030a 	bic.w	r3, r3, #10
 800eddc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800edde:	697a      	ldr	r2, [r7, #20]
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	4313      	orrs	r3, r2
 800ede4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	693a      	ldr	r2, [r7, #16]
 800edea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	697a      	ldr	r2, [r7, #20]
 800edf0:	621a      	str	r2, [r3, #32]
}
 800edf2:	bf00      	nop
 800edf4:	371c      	adds	r7, #28
 800edf6:	46bd      	mov	sp, r7
 800edf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfc:	4770      	bx	lr

0800edfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800edfe:	b480      	push	{r7}
 800ee00:	b087      	sub	sp, #28
 800ee02:	af00      	add	r7, sp, #0
 800ee04:	60f8      	str	r0, [r7, #12]
 800ee06:	60b9      	str	r1, [r7, #8]
 800ee08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	6a1b      	ldr	r3, [r3, #32]
 800ee0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	6a1b      	ldr	r3, [r3, #32]
 800ee14:	f023 0210 	bic.w	r2, r3, #16
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	699b      	ldr	r3, [r3, #24]
 800ee20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ee22:	693b      	ldr	r3, [r7, #16]
 800ee24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ee28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	031b      	lsls	r3, r3, #12
 800ee2e:	693a      	ldr	r2, [r7, #16]
 800ee30:	4313      	orrs	r3, r2
 800ee32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ee3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	011b      	lsls	r3, r3, #4
 800ee40:	697a      	ldr	r2, [r7, #20]
 800ee42:	4313      	orrs	r3, r2
 800ee44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	693a      	ldr	r2, [r7, #16]
 800ee4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	697a      	ldr	r2, [r7, #20]
 800ee50:	621a      	str	r2, [r3, #32]
}
 800ee52:	bf00      	nop
 800ee54:	371c      	adds	r7, #28
 800ee56:	46bd      	mov	sp, r7
 800ee58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5c:	4770      	bx	lr

0800ee5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ee5e:	b480      	push	{r7}
 800ee60:	b085      	sub	sp, #20
 800ee62:	af00      	add	r7, sp, #0
 800ee64:	6078      	str	r0, [r7, #4]
 800ee66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	689b      	ldr	r3, [r3, #8]
 800ee6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ee74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ee76:	683a      	ldr	r2, [r7, #0]
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	4313      	orrs	r3, r2
 800ee7c:	f043 0307 	orr.w	r3, r3, #7
 800ee80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	68fa      	ldr	r2, [r7, #12]
 800ee86:	609a      	str	r2, [r3, #8]
}
 800ee88:	bf00      	nop
 800ee8a:	3714      	adds	r7, #20
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee92:	4770      	bx	lr

0800ee94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ee94:	b480      	push	{r7}
 800ee96:	b087      	sub	sp, #28
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	60f8      	str	r0, [r7, #12]
 800ee9c:	60b9      	str	r1, [r7, #8]
 800ee9e:	607a      	str	r2, [r7, #4]
 800eea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	689b      	ldr	r3, [r3, #8]
 800eea6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eea8:	697b      	ldr	r3, [r7, #20]
 800eeaa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800eeae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	021a      	lsls	r2, r3, #8
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	431a      	orrs	r2, r3
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	4313      	orrs	r3, r2
 800eebc:	697a      	ldr	r2, [r7, #20]
 800eebe:	4313      	orrs	r3, r2
 800eec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	697a      	ldr	r2, [r7, #20]
 800eec6:	609a      	str	r2, [r3, #8]
}
 800eec8:	bf00      	nop
 800eeca:	371c      	adds	r7, #28
 800eecc:	46bd      	mov	sp, r7
 800eece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed2:	4770      	bx	lr

0800eed4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800eed4:	b480      	push	{r7}
 800eed6:	b085      	sub	sp, #20
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800eee4:	2b01      	cmp	r3, #1
 800eee6:	d101      	bne.n	800eeec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800eee8:	2302      	movs	r3, #2
 800eeea:	e06d      	b.n	800efc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2201      	movs	r2, #1
 800eef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2202      	movs	r2, #2
 800eef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	685b      	ldr	r3, [r3, #4]
 800ef02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	689b      	ldr	r3, [r3, #8]
 800ef0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	4a30      	ldr	r2, [pc, #192]	@ (800efd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ef12:	4293      	cmp	r3, r2
 800ef14:	d004      	beq.n	800ef20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	4a2f      	ldr	r2, [pc, #188]	@ (800efd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ef1c:	4293      	cmp	r3, r2
 800ef1e:	d108      	bne.n	800ef32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ef26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	685b      	ldr	r3, [r3, #4]
 800ef2c:	68fa      	ldr	r2, [r7, #12]
 800ef2e:	4313      	orrs	r3, r2
 800ef30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ef38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ef3a:	683b      	ldr	r3, [r7, #0]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	68fa      	ldr	r2, [r7, #12]
 800ef40:	4313      	orrs	r3, r2
 800ef42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	68fa      	ldr	r2, [r7, #12]
 800ef4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	4a20      	ldr	r2, [pc, #128]	@ (800efd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d022      	beq.n	800ef9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef5e:	d01d      	beq.n	800ef9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	4a1d      	ldr	r2, [pc, #116]	@ (800efdc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d018      	beq.n	800ef9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	4a1c      	ldr	r2, [pc, #112]	@ (800efe0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ef70:	4293      	cmp	r3, r2
 800ef72:	d013      	beq.n	800ef9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	4a1a      	ldr	r2, [pc, #104]	@ (800efe4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ef7a:	4293      	cmp	r3, r2
 800ef7c:	d00e      	beq.n	800ef9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	4a15      	ldr	r2, [pc, #84]	@ (800efd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ef84:	4293      	cmp	r3, r2
 800ef86:	d009      	beq.n	800ef9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	4a16      	ldr	r2, [pc, #88]	@ (800efe8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ef8e:	4293      	cmp	r3, r2
 800ef90:	d004      	beq.n	800ef9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	4a15      	ldr	r2, [pc, #84]	@ (800efec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ef98:	4293      	cmp	r3, r2
 800ef9a:	d10c      	bne.n	800efb6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800efa2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	689b      	ldr	r3, [r3, #8]
 800efa8:	68ba      	ldr	r2, [r7, #8]
 800efaa:	4313      	orrs	r3, r2
 800efac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	68ba      	ldr	r2, [r7, #8]
 800efb4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2201      	movs	r2, #1
 800efba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2200      	movs	r2, #0
 800efc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800efc6:	2300      	movs	r3, #0
}
 800efc8:	4618      	mov	r0, r3
 800efca:	3714      	adds	r7, #20
 800efcc:	46bd      	mov	sp, r7
 800efce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd2:	4770      	bx	lr
 800efd4:	40010000 	.word	0x40010000
 800efd8:	40010400 	.word	0x40010400
 800efdc:	40000400 	.word	0x40000400
 800efe0:	40000800 	.word	0x40000800
 800efe4:	40000c00 	.word	0x40000c00
 800efe8:	40014000 	.word	0x40014000
 800efec:	40001800 	.word	0x40001800

0800eff0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800eff0:	b480      	push	{r7}
 800eff2:	b085      	sub	sp, #20
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
 800eff8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800effa:	2300      	movs	r3, #0
 800effc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f004:	2b01      	cmp	r3, #1
 800f006:	d101      	bne.n	800f00c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f008:	2302      	movs	r3, #2
 800f00a:	e065      	b.n	800f0d8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2201      	movs	r2, #1
 800f010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	68db      	ldr	r3, [r3, #12]
 800f01e:	4313      	orrs	r3, r2
 800f020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	689b      	ldr	r3, [r3, #8]
 800f02c:	4313      	orrs	r3, r2
 800f02e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f036:	683b      	ldr	r3, [r7, #0]
 800f038:	685b      	ldr	r3, [r3, #4]
 800f03a:	4313      	orrs	r3, r2
 800f03c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	4313      	orrs	r3, r2
 800f04a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	691b      	ldr	r3, [r3, #16]
 800f056:	4313      	orrs	r3, r2
 800f058:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	695b      	ldr	r3, [r3, #20]
 800f064:	4313      	orrs	r3, r2
 800f066:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f072:	4313      	orrs	r3, r2
 800f074:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	699b      	ldr	r3, [r3, #24]
 800f080:	041b      	lsls	r3, r3, #16
 800f082:	4313      	orrs	r3, r2
 800f084:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	4a16      	ldr	r2, [pc, #88]	@ (800f0e4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f08c:	4293      	cmp	r3, r2
 800f08e:	d004      	beq.n	800f09a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	4a14      	ldr	r2, [pc, #80]	@ (800f0e8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f096:	4293      	cmp	r3, r2
 800f098:	d115      	bne.n	800f0c6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0a4:	051b      	lsls	r3, r3, #20
 800f0a6:	4313      	orrs	r3, r2
 800f0a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	69db      	ldr	r3, [r3, #28]
 800f0b4:	4313      	orrs	r3, r2
 800f0b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	6a1b      	ldr	r3, [r3, #32]
 800f0c2:	4313      	orrs	r3, r2
 800f0c4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	68fa      	ldr	r2, [r7, #12]
 800f0cc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f0d6:	2300      	movs	r3, #0
}
 800f0d8:	4618      	mov	r0, r3
 800f0da:	3714      	adds	r7, #20
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e2:	4770      	bx	lr
 800f0e4:	40010000 	.word	0x40010000
 800f0e8:	40010400 	.word	0x40010400

0800f0ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b083      	sub	sp, #12
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f0f4:	bf00      	nop
 800f0f6:	370c      	adds	r7, #12
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr

0800f100 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f100:	b480      	push	{r7}
 800f102:	b083      	sub	sp, #12
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f108:	bf00      	nop
 800f10a:	370c      	adds	r7, #12
 800f10c:	46bd      	mov	sp, r7
 800f10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f112:	4770      	bx	lr

0800f114 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f114:	b480      	push	{r7}
 800f116:	b083      	sub	sp, #12
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f11c:	bf00      	nop
 800f11e:	370c      	adds	r7, #12
 800f120:	46bd      	mov	sp, r7
 800f122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f126:	4770      	bx	lr

0800f128 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b082      	sub	sp, #8
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d101      	bne.n	800f13a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f136:	2301      	movs	r3, #1
 800f138:	e040      	b.n	800f1bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d106      	bne.n	800f150 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	2200      	movs	r2, #0
 800f146:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	f7f5 fef6 	bl	8004f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2224      	movs	r2, #36	@ 0x24
 800f154:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	681a      	ldr	r2, [r3, #0]
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	f022 0201 	bic.w	r2, r2, #1
 800f164:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d002      	beq.n	800f174 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800f16e:	6878      	ldr	r0, [r7, #4]
 800f170:	f000 ffb6 	bl	80100e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f000 fd4f 	bl	800fc18 <UART_SetConfig>
 800f17a:	4603      	mov	r3, r0
 800f17c:	2b01      	cmp	r3, #1
 800f17e:	d101      	bne.n	800f184 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800f180:	2301      	movs	r3, #1
 800f182:	e01b      	b.n	800f1bc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	685a      	ldr	r2, [r3, #4]
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f192:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	689a      	ldr	r2, [r3, #8]
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f1a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	681a      	ldr	r2, [r3, #0]
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	f042 0201 	orr.w	r2, r2, #1
 800f1b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f001 f835 	bl	8010224 <UART_CheckIdleState>
 800f1ba:	4603      	mov	r3, r0
}
 800f1bc:	4618      	mov	r0, r3
 800f1be:	3708      	adds	r7, #8
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}

0800f1c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b08a      	sub	sp, #40	@ 0x28
 800f1c8:	af02      	add	r7, sp, #8
 800f1ca:	60f8      	str	r0, [r7, #12]
 800f1cc:	60b9      	str	r1, [r7, #8]
 800f1ce:	603b      	str	r3, [r7, #0]
 800f1d0:	4613      	mov	r3, r2
 800f1d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f1d8:	2b20      	cmp	r3, #32
 800f1da:	d177      	bne.n	800f2cc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d002      	beq.n	800f1e8 <HAL_UART_Transmit+0x24>
 800f1e2:	88fb      	ldrh	r3, [r7, #6]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d101      	bne.n	800f1ec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	e070      	b.n	800f2ce <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	2221      	movs	r2, #33	@ 0x21
 800f1f8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f1fa:	f7f7 f8af 	bl	800635c <HAL_GetTick>
 800f1fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	88fa      	ldrh	r2, [r7, #6]
 800f204:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	88fa      	ldrh	r2, [r7, #6]
 800f20c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	689b      	ldr	r3, [r3, #8]
 800f214:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f218:	d108      	bne.n	800f22c <HAL_UART_Transmit+0x68>
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	691b      	ldr	r3, [r3, #16]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d104      	bne.n	800f22c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800f222:	2300      	movs	r3, #0
 800f224:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	61bb      	str	r3, [r7, #24]
 800f22a:	e003      	b.n	800f234 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f230:	2300      	movs	r3, #0
 800f232:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f234:	e02f      	b.n	800f296 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	9300      	str	r3, [sp, #0]
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	2200      	movs	r2, #0
 800f23e:	2180      	movs	r1, #128	@ 0x80
 800f240:	68f8      	ldr	r0, [r7, #12]
 800f242:	f001 f846 	bl	80102d2 <UART_WaitOnFlagUntilTimeout>
 800f246:	4603      	mov	r3, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d004      	beq.n	800f256 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	2220      	movs	r2, #32
 800f250:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800f252:	2303      	movs	r3, #3
 800f254:	e03b      	b.n	800f2ce <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800f256:	69fb      	ldr	r3, [r7, #28]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d10b      	bne.n	800f274 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f25c:	69bb      	ldr	r3, [r7, #24]
 800f25e:	881b      	ldrh	r3, [r3, #0]
 800f260:	461a      	mov	r2, r3
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f26a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f26c:	69bb      	ldr	r3, [r7, #24]
 800f26e:	3302      	adds	r3, #2
 800f270:	61bb      	str	r3, [r7, #24]
 800f272:	e007      	b.n	800f284 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f274:	69fb      	ldr	r3, [r7, #28]
 800f276:	781a      	ldrb	r2, [r3, #0]
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f27e:	69fb      	ldr	r3, [r7, #28]
 800f280:	3301      	adds	r3, #1
 800f282:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800f28a:	b29b      	uxth	r3, r3
 800f28c:	3b01      	subs	r3, #1
 800f28e:	b29a      	uxth	r2, r3
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800f29c:	b29b      	uxth	r3, r3
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d1c9      	bne.n	800f236 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	9300      	str	r3, [sp, #0]
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	2140      	movs	r1, #64	@ 0x40
 800f2ac:	68f8      	ldr	r0, [r7, #12]
 800f2ae:	f001 f810 	bl	80102d2 <UART_WaitOnFlagUntilTimeout>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d004      	beq.n	800f2c2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	2220      	movs	r2, #32
 800f2bc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800f2be:	2303      	movs	r3, #3
 800f2c0:	e005      	b.n	800f2ce <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	2220      	movs	r2, #32
 800f2c6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	e000      	b.n	800f2ce <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800f2cc:	2302      	movs	r3, #2
  }
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3720      	adds	r7, #32
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}

0800f2d6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f2d6:	b580      	push	{r7, lr}
 800f2d8:	b08a      	sub	sp, #40	@ 0x28
 800f2da:	af02      	add	r7, sp, #8
 800f2dc:	60f8      	str	r0, [r7, #12]
 800f2de:	60b9      	str	r1, [r7, #8]
 800f2e0:	603b      	str	r3, [r7, #0]
 800f2e2:	4613      	mov	r3, r2
 800f2e4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f2ec:	2b20      	cmp	r3, #32
 800f2ee:	f040 80b5 	bne.w	800f45c <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d002      	beq.n	800f2fe <HAL_UART_Receive+0x28>
 800f2f8:	88fb      	ldrh	r3, [r7, #6]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d101      	bne.n	800f302 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800f2fe:	2301      	movs	r3, #1
 800f300:	e0ad      	b.n	800f45e <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	2200      	movs	r2, #0
 800f306:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	2222      	movs	r2, #34	@ 0x22
 800f30e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	2200      	movs	r2, #0
 800f316:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f318:	f7f7 f820 	bl	800635c <HAL_GetTick>
 800f31c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	88fa      	ldrh	r2, [r7, #6]
 800f322:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	88fa      	ldrh	r2, [r7, #6]
 800f32a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	689b      	ldr	r3, [r3, #8]
 800f332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f336:	d10e      	bne.n	800f356 <HAL_UART_Receive+0x80>
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	691b      	ldr	r3, [r3, #16]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d105      	bne.n	800f34c <HAL_UART_Receive+0x76>
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800f346:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f34a:	e02d      	b.n	800f3a8 <HAL_UART_Receive+0xd2>
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	22ff      	movs	r2, #255	@ 0xff
 800f350:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f354:	e028      	b.n	800f3a8 <HAL_UART_Receive+0xd2>
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	689b      	ldr	r3, [r3, #8]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d10d      	bne.n	800f37a <HAL_UART_Receive+0xa4>
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	691b      	ldr	r3, [r3, #16]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d104      	bne.n	800f370 <HAL_UART_Receive+0x9a>
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	22ff      	movs	r2, #255	@ 0xff
 800f36a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f36e:	e01b      	b.n	800f3a8 <HAL_UART_Receive+0xd2>
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	227f      	movs	r2, #127	@ 0x7f
 800f374:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f378:	e016      	b.n	800f3a8 <HAL_UART_Receive+0xd2>
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	689b      	ldr	r3, [r3, #8]
 800f37e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f382:	d10d      	bne.n	800f3a0 <HAL_UART_Receive+0xca>
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	691b      	ldr	r3, [r3, #16]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d104      	bne.n	800f396 <HAL_UART_Receive+0xc0>
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	227f      	movs	r2, #127	@ 0x7f
 800f390:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f394:	e008      	b.n	800f3a8 <HAL_UART_Receive+0xd2>
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	223f      	movs	r2, #63	@ 0x3f
 800f39a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f39e:	e003      	b.n	800f3a8 <HAL_UART_Receive+0xd2>
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f3ae:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	689b      	ldr	r3, [r3, #8]
 800f3b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f3b8:	d108      	bne.n	800f3cc <HAL_UART_Receive+0xf6>
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	691b      	ldr	r3, [r3, #16]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d104      	bne.n	800f3cc <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f3c6:	68bb      	ldr	r3, [r7, #8]
 800f3c8:	61bb      	str	r3, [r7, #24]
 800f3ca:	e003      	b.n	800f3d4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f3d4:	e036      	b.n	800f444 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	9300      	str	r3, [sp, #0]
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	2200      	movs	r2, #0
 800f3de:	2120      	movs	r1, #32
 800f3e0:	68f8      	ldr	r0, [r7, #12]
 800f3e2:	f000 ff76 	bl	80102d2 <UART_WaitOnFlagUntilTimeout>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d005      	beq.n	800f3f8 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	2220      	movs	r2, #32
 800f3f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800f3f4:	2303      	movs	r3, #3
 800f3f6:	e032      	b.n	800f45e <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800f3f8:	69fb      	ldr	r3, [r7, #28]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d10c      	bne.n	800f418 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f404:	b29a      	uxth	r2, r3
 800f406:	8a7b      	ldrh	r3, [r7, #18]
 800f408:	4013      	ands	r3, r2
 800f40a:	b29a      	uxth	r2, r3
 800f40c:	69bb      	ldr	r3, [r7, #24]
 800f40e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f410:	69bb      	ldr	r3, [r7, #24]
 800f412:	3302      	adds	r3, #2
 800f414:	61bb      	str	r3, [r7, #24]
 800f416:	e00c      	b.n	800f432 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f41e:	b2da      	uxtb	r2, r3
 800f420:	8a7b      	ldrh	r3, [r7, #18]
 800f422:	b2db      	uxtb	r3, r3
 800f424:	4013      	ands	r3, r2
 800f426:	b2da      	uxtb	r2, r3
 800f428:	69fb      	ldr	r3, [r7, #28]
 800f42a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f42c:	69fb      	ldr	r3, [r7, #28]
 800f42e:	3301      	adds	r3, #1
 800f430:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f438:	b29b      	uxth	r3, r3
 800f43a:	3b01      	subs	r3, #1
 800f43c:	b29a      	uxth	r2, r3
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f44a:	b29b      	uxth	r3, r3
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d1c2      	bne.n	800f3d6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	2220      	movs	r2, #32
 800f454:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800f458:	2300      	movs	r3, #0
 800f45a:	e000      	b.n	800f45e <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800f45c:	2302      	movs	r3, #2
  }
}
 800f45e:	4618      	mov	r0, r3
 800f460:	3720      	adds	r7, #32
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}

0800f466 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f466:	b580      	push	{r7, lr}
 800f468:	b08a      	sub	sp, #40	@ 0x28
 800f46a:	af00      	add	r7, sp, #0
 800f46c:	60f8      	str	r0, [r7, #12]
 800f46e:	60b9      	str	r1, [r7, #8]
 800f470:	4613      	mov	r3, r2
 800f472:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f47a:	2b20      	cmp	r3, #32
 800f47c:	d132      	bne.n	800f4e4 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d002      	beq.n	800f48a <HAL_UART_Receive_DMA+0x24>
 800f484:	88fb      	ldrh	r3, [r7, #6]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d101      	bne.n	800f48e <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800f48a:	2301      	movs	r3, #1
 800f48c:	e02b      	b.n	800f4e6 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	2200      	movs	r2, #0
 800f492:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	685b      	ldr	r3, [r3, #4]
 800f49a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d018      	beq.n	800f4d4 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	e853 3f00 	ldrex	r3, [r3]
 800f4ae:	613b      	str	r3, [r7, #16]
   return(result);
 800f4b0:	693b      	ldr	r3, [r7, #16]
 800f4b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f4b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	461a      	mov	r2, r3
 800f4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4c0:	623b      	str	r3, [r7, #32]
 800f4c2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4c4:	69f9      	ldr	r1, [r7, #28]
 800f4c6:	6a3a      	ldr	r2, [r7, #32]
 800f4c8:	e841 2300 	strex	r3, r2, [r1]
 800f4cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800f4ce:	69bb      	ldr	r3, [r7, #24]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d1e6      	bne.n	800f4a2 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f4d4:	88fb      	ldrh	r3, [r7, #6]
 800f4d6:	461a      	mov	r2, r3
 800f4d8:	68b9      	ldr	r1, [r7, #8]
 800f4da:	68f8      	ldr	r0, [r7, #12]
 800f4dc:	f000 ff66 	bl	80103ac <UART_Start_Receive_DMA>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	e000      	b.n	800f4e6 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800f4e4:	2302      	movs	r3, #2
  }
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3728      	adds	r7, #40	@ 0x28
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}

0800f4ee <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800f4ee:	b580      	push	{r7, lr}
 800f4f0:	b090      	sub	sp, #64	@ 0x40
 800f4f2:	af00      	add	r7, sp, #0
 800f4f4:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f4fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f502:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	689b      	ldr	r3, [r3, #8]
 800f50a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f50e:	2b80      	cmp	r3, #128	@ 0x80
 800f510:	d139      	bne.n	800f586 <HAL_UART_DMAStop+0x98>
 800f512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f514:	2b21      	cmp	r3, #33	@ 0x21
 800f516:	d136      	bne.n	800f586 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	3308      	adds	r3, #8
 800f51e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f520:	6a3b      	ldr	r3, [r7, #32]
 800f522:	e853 3f00 	ldrex	r3, [r3]
 800f526:	61fb      	str	r3, [r7, #28]
   return(result);
 800f528:	69fb      	ldr	r3, [r7, #28]
 800f52a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f52e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	3308      	adds	r3, #8
 800f536:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f538:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f53a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f53c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f53e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f540:	e841 2300 	strex	r3, r2, [r1]
 800f544:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d1e5      	bne.n	800f518 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f550:	2b00      	cmp	r3, #0
 800f552:	d015      	beq.n	800f580 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f558:	4618      	mov	r0, r3
 800f55a:	f7f7 fd81 	bl	8007060 <HAL_DMA_Abort>
 800f55e:	4603      	mov	r3, r0
 800f560:	2b00      	cmp	r3, #0
 800f562:	d00d      	beq.n	800f580 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f568:	4618      	mov	r0, r3
 800f56a:	f7f7 ff95 	bl	8007498 <HAL_DMA_GetError>
 800f56e:	4603      	mov	r3, r0
 800f570:	2b20      	cmp	r3, #32
 800f572:	d105      	bne.n	800f580 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2210      	movs	r2, #16
 800f578:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f57c:	2303      	movs	r3, #3
 800f57e:	e044      	b.n	800f60a <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f000 ffb3 	bl	80104ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	689b      	ldr	r3, [r3, #8]
 800f58c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f590:	2b40      	cmp	r3, #64	@ 0x40
 800f592:	d139      	bne.n	800f608 <HAL_UART_DMAStop+0x11a>
 800f594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f596:	2b22      	cmp	r3, #34	@ 0x22
 800f598:	d136      	bne.n	800f608 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	3308      	adds	r3, #8
 800f5a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	e853 3f00 	ldrex	r3, [r3]
 800f5a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f5b0:	633b      	str	r3, [r7, #48]	@ 0x30
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	3308      	adds	r3, #8
 800f5b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f5ba:	61ba      	str	r2, [r7, #24]
 800f5bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5be:	6979      	ldr	r1, [r7, #20]
 800f5c0:	69ba      	ldr	r2, [r7, #24]
 800f5c2:	e841 2300 	strex	r3, r2, [r1]
 800f5c6:	613b      	str	r3, [r7, #16]
   return(result);
 800f5c8:	693b      	ldr	r3, [r7, #16]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d1e5      	bne.n	800f59a <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d015      	beq.n	800f602 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f7f7 fd40 	bl	8007060 <HAL_DMA_Abort>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d00d      	beq.n	800f602 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	f7f7 ff54 	bl	8007498 <HAL_DMA_GetError>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	2b20      	cmp	r3, #32
 800f5f4:	d105      	bne.n	800f602 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2210      	movs	r2, #16
 800f5fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f5fe:	2303      	movs	r3, #3
 800f600:	e003      	b.n	800f60a <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800f602:	6878      	ldr	r0, [r7, #4]
 800f604:	f000 ff98 	bl	8010538 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800f608:	2300      	movs	r3, #0
}
 800f60a:	4618      	mov	r0, r3
 800f60c:	3740      	adds	r7, #64	@ 0x40
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}
	...

0800f614 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b0ba      	sub	sp, #232	@ 0xe8
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	69db      	ldr	r3, [r3, #28]
 800f622:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	689b      	ldr	r3, [r3, #8]
 800f636:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f63a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f63e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f642:	4013      	ands	r3, r2
 800f644:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f648:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d115      	bne.n	800f67c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800f650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f654:	f003 0320 	and.w	r3, r3, #32
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d00f      	beq.n	800f67c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f65c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f660:	f003 0320 	and.w	r3, r3, #32
 800f664:	2b00      	cmp	r3, #0
 800f666:	d009      	beq.n	800f67c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	f000 82b1 	beq.w	800fbd4 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f676:	6878      	ldr	r0, [r7, #4]
 800f678:	4798      	blx	r3
      }
      return;
 800f67a:	e2ab      	b.n	800fbd4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f67c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f680:	2b00      	cmp	r3, #0
 800f682:	f000 8117 	beq.w	800f8b4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800f686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f68a:	f003 0301 	and.w	r3, r3, #1
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d106      	bne.n	800f6a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800f692:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f696:	4b85      	ldr	r3, [pc, #532]	@ (800f8ac <HAL_UART_IRQHandler+0x298>)
 800f698:	4013      	ands	r3, r2
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	f000 810a 	beq.w	800f8b4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f6a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f6a4:	f003 0301 	and.w	r3, r3, #1
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d011      	beq.n	800f6d0 <HAL_UART_IRQHandler+0xbc>
 800f6ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f6b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d00b      	beq.n	800f6d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	2201      	movs	r2, #1
 800f6be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f6c6:	f043 0201 	orr.w	r2, r3, #1
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f6d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f6d4:	f003 0302 	and.w	r3, r3, #2
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d011      	beq.n	800f700 <HAL_UART_IRQHandler+0xec>
 800f6dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f6e0:	f003 0301 	and.w	r3, r3, #1
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d00b      	beq.n	800f700 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	2202      	movs	r2, #2
 800f6ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f6f6:	f043 0204 	orr.w	r2, r3, #4
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f704:	f003 0304 	and.w	r3, r3, #4
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d011      	beq.n	800f730 <HAL_UART_IRQHandler+0x11c>
 800f70c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f710:	f003 0301 	and.w	r3, r3, #1
 800f714:	2b00      	cmp	r3, #0
 800f716:	d00b      	beq.n	800f730 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	2204      	movs	r2, #4
 800f71e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f726:	f043 0202 	orr.w	r2, r3, #2
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f734:	f003 0308 	and.w	r3, r3, #8
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d017      	beq.n	800f76c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f73c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f740:	f003 0320 	and.w	r3, r3, #32
 800f744:	2b00      	cmp	r3, #0
 800f746:	d105      	bne.n	800f754 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800f748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f74c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f750:	2b00      	cmp	r3, #0
 800f752:	d00b      	beq.n	800f76c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	2208      	movs	r2, #8
 800f75a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f762:	f043 0208 	orr.w	r2, r3, #8
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f76c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f770:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f774:	2b00      	cmp	r3, #0
 800f776:	d012      	beq.n	800f79e <HAL_UART_IRQHandler+0x18a>
 800f778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f77c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f780:	2b00      	cmp	r3, #0
 800f782:	d00c      	beq.n	800f79e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f78c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f794:	f043 0220 	orr.w	r2, r3, #32
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	f000 8217 	beq.w	800fbd8 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800f7aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f7ae:	f003 0320 	and.w	r3, r3, #32
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d00d      	beq.n	800f7d2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f7b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f7ba:	f003 0320 	and.w	r3, r3, #32
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d007      	beq.n	800f7d2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d003      	beq.n	800f7d2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f7ce:	6878      	ldr	r0, [r7, #4]
 800f7d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f7d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	689b      	ldr	r3, [r3, #8]
 800f7e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7e6:	2b40      	cmp	r3, #64	@ 0x40
 800f7e8:	d005      	beq.n	800f7f6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f7ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f7ee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d04f      	beq.n	800f896 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f7f6:	6878      	ldr	r0, [r7, #4]
 800f7f8:	f000 fe9e 	bl	8010538 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	689b      	ldr	r3, [r3, #8]
 800f802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f806:	2b40      	cmp	r3, #64	@ 0x40
 800f808:	d141      	bne.n	800f88e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	3308      	adds	r3, #8
 800f810:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f814:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f818:	e853 3f00 	ldrex	r3, [r3]
 800f81c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f820:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f824:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f828:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	3308      	adds	r3, #8
 800f832:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f836:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f83a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f83e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f842:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f846:	e841 2300 	strex	r3, r2, [r1]
 800f84a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f84e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f852:	2b00      	cmp	r3, #0
 800f854:	d1d9      	bne.n	800f80a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d013      	beq.n	800f886 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f862:	4a13      	ldr	r2, [pc, #76]	@ (800f8b0 <HAL_UART_IRQHandler+0x29c>)
 800f864:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f86a:	4618      	mov	r0, r3
 800f86c:	f7f7 fc68 	bl	8007140 <HAL_DMA_Abort_IT>
 800f870:	4603      	mov	r3, r0
 800f872:	2b00      	cmp	r3, #0
 800f874:	d017      	beq.n	800f8a6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f87a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f87c:	687a      	ldr	r2, [r7, #4]
 800f87e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800f880:	4610      	mov	r0, r2
 800f882:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f884:	e00f      	b.n	800f8a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f7f6 fbf6 	bl	8006078 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f88c:	e00b      	b.n	800f8a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f88e:	6878      	ldr	r0, [r7, #4]
 800f890:	f7f6 fbf2 	bl	8006078 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f894:	e007      	b.n	800f8a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	f7f6 fbee 	bl	8006078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2200      	movs	r2, #0
 800f8a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800f8a4:	e198      	b.n	800fbd8 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f8a6:	bf00      	nop
    return;
 800f8a8:	e196      	b.n	800fbd8 <HAL_UART_IRQHandler+0x5c4>
 800f8aa:	bf00      	nop
 800f8ac:	04000120 	.word	0x04000120
 800f8b0:	0801084f 	.word	0x0801084f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f8b8:	2b01      	cmp	r3, #1
 800f8ba:	f040 8166 	bne.w	800fb8a <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f8be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8c2:	f003 0310 	and.w	r3, r3, #16
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	f000 815f 	beq.w	800fb8a <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f8cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f8d0:	f003 0310 	and.w	r3, r3, #16
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	f000 8158 	beq.w	800fb8a <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	2210      	movs	r2, #16
 800f8e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	689b      	ldr	r3, [r3, #8]
 800f8e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f8ec:	2b40      	cmp	r3, #64	@ 0x40
 800f8ee:	f040 80d0 	bne.w	800fa92 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	685b      	ldr	r3, [r3, #4]
 800f8fa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f8fe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f902:	2b00      	cmp	r3, #0
 800f904:	f000 80ab 	beq.w	800fa5e <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f90e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f912:	429a      	cmp	r2, r3
 800f914:	f080 80a3 	bcs.w	800fa5e <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f91e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f926:	69db      	ldr	r3, [r3, #28]
 800f928:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f92c:	f000 8086 	beq.w	800fa3c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f938:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f93c:	e853 3f00 	ldrex	r3, [r3]
 800f940:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f944:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f948:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f94c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	461a      	mov	r2, r3
 800f956:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f95a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f95e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f962:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f966:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f96a:	e841 2300 	strex	r3, r2, [r1]
 800f96e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f972:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f976:	2b00      	cmp	r3, #0
 800f978:	d1da      	bne.n	800f930 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	3308      	adds	r3, #8
 800f980:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f982:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f984:	e853 3f00 	ldrex	r3, [r3]
 800f988:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f98a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f98c:	f023 0301 	bic.w	r3, r3, #1
 800f990:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	3308      	adds	r3, #8
 800f99a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f99e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f9a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f9a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f9aa:	e841 2300 	strex	r3, r2, [r1]
 800f9ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f9b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d1e1      	bne.n	800f97a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	3308      	adds	r3, #8
 800f9bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f9c0:	e853 3f00 	ldrex	r3, [r3]
 800f9c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f9c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f9c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f9cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	3308      	adds	r3, #8
 800f9d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f9da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f9dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f9e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f9e2:	e841 2300 	strex	r3, r2, [r1]
 800f9e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f9e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d1e3      	bne.n	800f9b6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2220      	movs	r2, #32
 800f9f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa04:	e853 3f00 	ldrex	r3, [r3]
 800fa08:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fa0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fa0c:	f023 0310 	bic.w	r3, r3, #16
 800fa10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	461a      	mov	r2, r3
 800fa1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fa1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fa20:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fa24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fa26:	e841 2300 	strex	r3, r2, [r1]
 800fa2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fa2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d1e4      	bne.n	800f9fc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa36:	4618      	mov	r0, r3
 800fa38:	f7f7 fb12 	bl	8007060 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2202      	movs	r2, #2
 800fa40:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800fa4e:	b29b      	uxth	r3, r3
 800fa50:	1ad3      	subs	r3, r2, r3
 800fa52:	b29b      	uxth	r3, r3
 800fa54:	4619      	mov	r1, r3
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	f000 f8d2 	bl	800fc00 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800fa5c:	e0be      	b.n	800fbdc <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800fa64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fa68:	429a      	cmp	r2, r3
 800fa6a:	f040 80b7 	bne.w	800fbdc <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa72:	69db      	ldr	r3, [r3, #28]
 800fa74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fa78:	f040 80b0 	bne.w	800fbdc <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2202      	movs	r2, #2
 800fa80:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800fa88:	4619      	mov	r1, r3
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	f000 f8b8 	bl	800fc00 <HAL_UARTEx_RxEventCallback>
      return;
 800fa90:	e0a4      	b.n	800fbdc <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800fa9e:	b29b      	uxth	r3, r3
 800faa0:	1ad3      	subs	r3, r2, r3
 800faa2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800faac:	b29b      	uxth	r3, r3
 800faae:	2b00      	cmp	r3, #0
 800fab0:	f000 8096 	beq.w	800fbe0 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800fab4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fab8:	2b00      	cmp	r3, #0
 800faba:	f000 8091 	beq.w	800fbe0 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fac6:	e853 3f00 	ldrex	r3, [r3]
 800faca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800facc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800face:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fad2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	461a      	mov	r2, r3
 800fadc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800fae0:	647b      	str	r3, [r7, #68]	@ 0x44
 800fae2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fae4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fae6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fae8:	e841 2300 	strex	r3, r2, [r1]
 800faec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800faee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d1e4      	bne.n	800fabe <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	3308      	adds	r3, #8
 800fafa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fafe:	e853 3f00 	ldrex	r3, [r3]
 800fb02:	623b      	str	r3, [r7, #32]
   return(result);
 800fb04:	6a3b      	ldr	r3, [r7, #32]
 800fb06:	f023 0301 	bic.w	r3, r3, #1
 800fb0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	3308      	adds	r3, #8
 800fb14:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800fb18:	633a      	str	r2, [r7, #48]	@ 0x30
 800fb1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fb1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fb20:	e841 2300 	strex	r3, r2, [r1]
 800fb24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fb26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d1e3      	bne.n	800faf4 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2220      	movs	r2, #32
 800fb30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2200      	movs	r2, #0
 800fb38:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb46:	693b      	ldr	r3, [r7, #16]
 800fb48:	e853 3f00 	ldrex	r3, [r3]
 800fb4c:	60fb      	str	r3, [r7, #12]
   return(result);
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	f023 0310 	bic.w	r3, r3, #16
 800fb54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	461a      	mov	r2, r3
 800fb5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800fb62:	61fb      	str	r3, [r7, #28]
 800fb64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb66:	69b9      	ldr	r1, [r7, #24]
 800fb68:	69fa      	ldr	r2, [r7, #28]
 800fb6a:	e841 2300 	strex	r3, r2, [r1]
 800fb6e:	617b      	str	r3, [r7, #20]
   return(result);
 800fb70:	697b      	ldr	r3, [r7, #20]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d1e4      	bne.n	800fb40 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2202      	movs	r2, #2
 800fb7a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fb7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fb80:	4619      	mov	r1, r3
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f000 f83c 	bl	800fc00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fb88:	e02a      	b.n	800fbe0 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800fb8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fb8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d00e      	beq.n	800fbb4 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800fb96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fb9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d008      	beq.n	800fbb4 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d01c      	beq.n	800fbe4 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fbae:	6878      	ldr	r0, [r7, #4]
 800fbb0:	4798      	blx	r3
    }
    return;
 800fbb2:	e017      	b.n	800fbe4 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fbb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fbb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d012      	beq.n	800fbe6 <HAL_UART_IRQHandler+0x5d2>
 800fbc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fbc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d00c      	beq.n	800fbe6 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f000 fe50 	bl	8010872 <UART_EndTransmit_IT>
    return;
 800fbd2:	e008      	b.n	800fbe6 <HAL_UART_IRQHandler+0x5d2>
      return;
 800fbd4:	bf00      	nop
 800fbd6:	e006      	b.n	800fbe6 <HAL_UART_IRQHandler+0x5d2>
    return;
 800fbd8:	bf00      	nop
 800fbda:	e004      	b.n	800fbe6 <HAL_UART_IRQHandler+0x5d2>
      return;
 800fbdc:	bf00      	nop
 800fbde:	e002      	b.n	800fbe6 <HAL_UART_IRQHandler+0x5d2>
      return;
 800fbe0:	bf00      	nop
 800fbe2:	e000      	b.n	800fbe6 <HAL_UART_IRQHandler+0x5d2>
    return;
 800fbe4:	bf00      	nop
  }

}
 800fbe6:	37e8      	adds	r7, #232	@ 0xe8
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}

0800fbec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fbec:	b480      	push	{r7}
 800fbee:	b083      	sub	sp, #12
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fbf4:	bf00      	nop
 800fbf6:	370c      	adds	r7, #12
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfe:	4770      	bx	lr

0800fc00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fc00:	b480      	push	{r7}
 800fc02:	b083      	sub	sp, #12
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
 800fc08:	460b      	mov	r3, r1
 800fc0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fc0c:	bf00      	nop
 800fc0e:	370c      	adds	r7, #12
 800fc10:	46bd      	mov	sp, r7
 800fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc16:	4770      	bx	lr

0800fc18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b088      	sub	sp, #32
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fc20:	2300      	movs	r3, #0
 800fc22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	689a      	ldr	r2, [r3, #8]
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	691b      	ldr	r3, [r3, #16]
 800fc2c:	431a      	orrs	r2, r3
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	695b      	ldr	r3, [r3, #20]
 800fc32:	431a      	orrs	r2, r3
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	69db      	ldr	r3, [r3, #28]
 800fc38:	4313      	orrs	r3, r2
 800fc3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	681a      	ldr	r2, [r3, #0]
 800fc42:	4ba6      	ldr	r3, [pc, #664]	@ (800fedc <UART_SetConfig+0x2c4>)
 800fc44:	4013      	ands	r3, r2
 800fc46:	687a      	ldr	r2, [r7, #4]
 800fc48:	6812      	ldr	r2, [r2, #0]
 800fc4a:	6979      	ldr	r1, [r7, #20]
 800fc4c:	430b      	orrs	r3, r1
 800fc4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	685b      	ldr	r3, [r3, #4]
 800fc56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	68da      	ldr	r2, [r3, #12]
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	430a      	orrs	r2, r1
 800fc64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	699b      	ldr	r3, [r3, #24]
 800fc6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	6a1b      	ldr	r3, [r3, #32]
 800fc70:	697a      	ldr	r2, [r7, #20]
 800fc72:	4313      	orrs	r3, r2
 800fc74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	689b      	ldr	r3, [r3, #8]
 800fc7c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	697a      	ldr	r2, [r7, #20]
 800fc86:	430a      	orrs	r2, r1
 800fc88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	4a94      	ldr	r2, [pc, #592]	@ (800fee0 <UART_SetConfig+0x2c8>)
 800fc90:	4293      	cmp	r3, r2
 800fc92:	d120      	bne.n	800fcd6 <UART_SetConfig+0xbe>
 800fc94:	4b93      	ldr	r3, [pc, #588]	@ (800fee4 <UART_SetConfig+0x2cc>)
 800fc96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc9a:	f003 0303 	and.w	r3, r3, #3
 800fc9e:	2b03      	cmp	r3, #3
 800fca0:	d816      	bhi.n	800fcd0 <UART_SetConfig+0xb8>
 800fca2:	a201      	add	r2, pc, #4	@ (adr r2, 800fca8 <UART_SetConfig+0x90>)
 800fca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fca8:	0800fcb9 	.word	0x0800fcb9
 800fcac:	0800fcc5 	.word	0x0800fcc5
 800fcb0:	0800fcbf 	.word	0x0800fcbf
 800fcb4:	0800fccb 	.word	0x0800fccb
 800fcb8:	2301      	movs	r3, #1
 800fcba:	77fb      	strb	r3, [r7, #31]
 800fcbc:	e150      	b.n	800ff60 <UART_SetConfig+0x348>
 800fcbe:	2302      	movs	r3, #2
 800fcc0:	77fb      	strb	r3, [r7, #31]
 800fcc2:	e14d      	b.n	800ff60 <UART_SetConfig+0x348>
 800fcc4:	2304      	movs	r3, #4
 800fcc6:	77fb      	strb	r3, [r7, #31]
 800fcc8:	e14a      	b.n	800ff60 <UART_SetConfig+0x348>
 800fcca:	2308      	movs	r3, #8
 800fccc:	77fb      	strb	r3, [r7, #31]
 800fcce:	e147      	b.n	800ff60 <UART_SetConfig+0x348>
 800fcd0:	2310      	movs	r3, #16
 800fcd2:	77fb      	strb	r3, [r7, #31]
 800fcd4:	e144      	b.n	800ff60 <UART_SetConfig+0x348>
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	4a83      	ldr	r2, [pc, #524]	@ (800fee8 <UART_SetConfig+0x2d0>)
 800fcdc:	4293      	cmp	r3, r2
 800fcde:	d132      	bne.n	800fd46 <UART_SetConfig+0x12e>
 800fce0:	4b80      	ldr	r3, [pc, #512]	@ (800fee4 <UART_SetConfig+0x2cc>)
 800fce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fce6:	f003 030c 	and.w	r3, r3, #12
 800fcea:	2b0c      	cmp	r3, #12
 800fcec:	d828      	bhi.n	800fd40 <UART_SetConfig+0x128>
 800fcee:	a201      	add	r2, pc, #4	@ (adr r2, 800fcf4 <UART_SetConfig+0xdc>)
 800fcf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcf4:	0800fd29 	.word	0x0800fd29
 800fcf8:	0800fd41 	.word	0x0800fd41
 800fcfc:	0800fd41 	.word	0x0800fd41
 800fd00:	0800fd41 	.word	0x0800fd41
 800fd04:	0800fd35 	.word	0x0800fd35
 800fd08:	0800fd41 	.word	0x0800fd41
 800fd0c:	0800fd41 	.word	0x0800fd41
 800fd10:	0800fd41 	.word	0x0800fd41
 800fd14:	0800fd2f 	.word	0x0800fd2f
 800fd18:	0800fd41 	.word	0x0800fd41
 800fd1c:	0800fd41 	.word	0x0800fd41
 800fd20:	0800fd41 	.word	0x0800fd41
 800fd24:	0800fd3b 	.word	0x0800fd3b
 800fd28:	2300      	movs	r3, #0
 800fd2a:	77fb      	strb	r3, [r7, #31]
 800fd2c:	e118      	b.n	800ff60 <UART_SetConfig+0x348>
 800fd2e:	2302      	movs	r3, #2
 800fd30:	77fb      	strb	r3, [r7, #31]
 800fd32:	e115      	b.n	800ff60 <UART_SetConfig+0x348>
 800fd34:	2304      	movs	r3, #4
 800fd36:	77fb      	strb	r3, [r7, #31]
 800fd38:	e112      	b.n	800ff60 <UART_SetConfig+0x348>
 800fd3a:	2308      	movs	r3, #8
 800fd3c:	77fb      	strb	r3, [r7, #31]
 800fd3e:	e10f      	b.n	800ff60 <UART_SetConfig+0x348>
 800fd40:	2310      	movs	r3, #16
 800fd42:	77fb      	strb	r3, [r7, #31]
 800fd44:	e10c      	b.n	800ff60 <UART_SetConfig+0x348>
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	4a68      	ldr	r2, [pc, #416]	@ (800feec <UART_SetConfig+0x2d4>)
 800fd4c:	4293      	cmp	r3, r2
 800fd4e:	d120      	bne.n	800fd92 <UART_SetConfig+0x17a>
 800fd50:	4b64      	ldr	r3, [pc, #400]	@ (800fee4 <UART_SetConfig+0x2cc>)
 800fd52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd56:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800fd5a:	2b30      	cmp	r3, #48	@ 0x30
 800fd5c:	d013      	beq.n	800fd86 <UART_SetConfig+0x16e>
 800fd5e:	2b30      	cmp	r3, #48	@ 0x30
 800fd60:	d814      	bhi.n	800fd8c <UART_SetConfig+0x174>
 800fd62:	2b20      	cmp	r3, #32
 800fd64:	d009      	beq.n	800fd7a <UART_SetConfig+0x162>
 800fd66:	2b20      	cmp	r3, #32
 800fd68:	d810      	bhi.n	800fd8c <UART_SetConfig+0x174>
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d002      	beq.n	800fd74 <UART_SetConfig+0x15c>
 800fd6e:	2b10      	cmp	r3, #16
 800fd70:	d006      	beq.n	800fd80 <UART_SetConfig+0x168>
 800fd72:	e00b      	b.n	800fd8c <UART_SetConfig+0x174>
 800fd74:	2300      	movs	r3, #0
 800fd76:	77fb      	strb	r3, [r7, #31]
 800fd78:	e0f2      	b.n	800ff60 <UART_SetConfig+0x348>
 800fd7a:	2302      	movs	r3, #2
 800fd7c:	77fb      	strb	r3, [r7, #31]
 800fd7e:	e0ef      	b.n	800ff60 <UART_SetConfig+0x348>
 800fd80:	2304      	movs	r3, #4
 800fd82:	77fb      	strb	r3, [r7, #31]
 800fd84:	e0ec      	b.n	800ff60 <UART_SetConfig+0x348>
 800fd86:	2308      	movs	r3, #8
 800fd88:	77fb      	strb	r3, [r7, #31]
 800fd8a:	e0e9      	b.n	800ff60 <UART_SetConfig+0x348>
 800fd8c:	2310      	movs	r3, #16
 800fd8e:	77fb      	strb	r3, [r7, #31]
 800fd90:	e0e6      	b.n	800ff60 <UART_SetConfig+0x348>
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	4a56      	ldr	r2, [pc, #344]	@ (800fef0 <UART_SetConfig+0x2d8>)
 800fd98:	4293      	cmp	r3, r2
 800fd9a:	d120      	bne.n	800fdde <UART_SetConfig+0x1c6>
 800fd9c:	4b51      	ldr	r3, [pc, #324]	@ (800fee4 <UART_SetConfig+0x2cc>)
 800fd9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fda2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800fda6:	2bc0      	cmp	r3, #192	@ 0xc0
 800fda8:	d013      	beq.n	800fdd2 <UART_SetConfig+0x1ba>
 800fdaa:	2bc0      	cmp	r3, #192	@ 0xc0
 800fdac:	d814      	bhi.n	800fdd8 <UART_SetConfig+0x1c0>
 800fdae:	2b80      	cmp	r3, #128	@ 0x80
 800fdb0:	d009      	beq.n	800fdc6 <UART_SetConfig+0x1ae>
 800fdb2:	2b80      	cmp	r3, #128	@ 0x80
 800fdb4:	d810      	bhi.n	800fdd8 <UART_SetConfig+0x1c0>
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d002      	beq.n	800fdc0 <UART_SetConfig+0x1a8>
 800fdba:	2b40      	cmp	r3, #64	@ 0x40
 800fdbc:	d006      	beq.n	800fdcc <UART_SetConfig+0x1b4>
 800fdbe:	e00b      	b.n	800fdd8 <UART_SetConfig+0x1c0>
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	77fb      	strb	r3, [r7, #31]
 800fdc4:	e0cc      	b.n	800ff60 <UART_SetConfig+0x348>
 800fdc6:	2302      	movs	r3, #2
 800fdc8:	77fb      	strb	r3, [r7, #31]
 800fdca:	e0c9      	b.n	800ff60 <UART_SetConfig+0x348>
 800fdcc:	2304      	movs	r3, #4
 800fdce:	77fb      	strb	r3, [r7, #31]
 800fdd0:	e0c6      	b.n	800ff60 <UART_SetConfig+0x348>
 800fdd2:	2308      	movs	r3, #8
 800fdd4:	77fb      	strb	r3, [r7, #31]
 800fdd6:	e0c3      	b.n	800ff60 <UART_SetConfig+0x348>
 800fdd8:	2310      	movs	r3, #16
 800fdda:	77fb      	strb	r3, [r7, #31]
 800fddc:	e0c0      	b.n	800ff60 <UART_SetConfig+0x348>
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	4a44      	ldr	r2, [pc, #272]	@ (800fef4 <UART_SetConfig+0x2dc>)
 800fde4:	4293      	cmp	r3, r2
 800fde6:	d125      	bne.n	800fe34 <UART_SetConfig+0x21c>
 800fde8:	4b3e      	ldr	r3, [pc, #248]	@ (800fee4 <UART_SetConfig+0x2cc>)
 800fdea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fdee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fdf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fdf6:	d017      	beq.n	800fe28 <UART_SetConfig+0x210>
 800fdf8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fdfc:	d817      	bhi.n	800fe2e <UART_SetConfig+0x216>
 800fdfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fe02:	d00b      	beq.n	800fe1c <UART_SetConfig+0x204>
 800fe04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fe08:	d811      	bhi.n	800fe2e <UART_SetConfig+0x216>
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d003      	beq.n	800fe16 <UART_SetConfig+0x1fe>
 800fe0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fe12:	d006      	beq.n	800fe22 <UART_SetConfig+0x20a>
 800fe14:	e00b      	b.n	800fe2e <UART_SetConfig+0x216>
 800fe16:	2300      	movs	r3, #0
 800fe18:	77fb      	strb	r3, [r7, #31]
 800fe1a:	e0a1      	b.n	800ff60 <UART_SetConfig+0x348>
 800fe1c:	2302      	movs	r3, #2
 800fe1e:	77fb      	strb	r3, [r7, #31]
 800fe20:	e09e      	b.n	800ff60 <UART_SetConfig+0x348>
 800fe22:	2304      	movs	r3, #4
 800fe24:	77fb      	strb	r3, [r7, #31]
 800fe26:	e09b      	b.n	800ff60 <UART_SetConfig+0x348>
 800fe28:	2308      	movs	r3, #8
 800fe2a:	77fb      	strb	r3, [r7, #31]
 800fe2c:	e098      	b.n	800ff60 <UART_SetConfig+0x348>
 800fe2e:	2310      	movs	r3, #16
 800fe30:	77fb      	strb	r3, [r7, #31]
 800fe32:	e095      	b.n	800ff60 <UART_SetConfig+0x348>
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	4a2f      	ldr	r2, [pc, #188]	@ (800fef8 <UART_SetConfig+0x2e0>)
 800fe3a:	4293      	cmp	r3, r2
 800fe3c:	d125      	bne.n	800fe8a <UART_SetConfig+0x272>
 800fe3e:	4b29      	ldr	r3, [pc, #164]	@ (800fee4 <UART_SetConfig+0x2cc>)
 800fe40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe44:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800fe48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800fe4c:	d017      	beq.n	800fe7e <UART_SetConfig+0x266>
 800fe4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800fe52:	d817      	bhi.n	800fe84 <UART_SetConfig+0x26c>
 800fe54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fe58:	d00b      	beq.n	800fe72 <UART_SetConfig+0x25a>
 800fe5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fe5e:	d811      	bhi.n	800fe84 <UART_SetConfig+0x26c>
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d003      	beq.n	800fe6c <UART_SetConfig+0x254>
 800fe64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fe68:	d006      	beq.n	800fe78 <UART_SetConfig+0x260>
 800fe6a:	e00b      	b.n	800fe84 <UART_SetConfig+0x26c>
 800fe6c:	2301      	movs	r3, #1
 800fe6e:	77fb      	strb	r3, [r7, #31]
 800fe70:	e076      	b.n	800ff60 <UART_SetConfig+0x348>
 800fe72:	2302      	movs	r3, #2
 800fe74:	77fb      	strb	r3, [r7, #31]
 800fe76:	e073      	b.n	800ff60 <UART_SetConfig+0x348>
 800fe78:	2304      	movs	r3, #4
 800fe7a:	77fb      	strb	r3, [r7, #31]
 800fe7c:	e070      	b.n	800ff60 <UART_SetConfig+0x348>
 800fe7e:	2308      	movs	r3, #8
 800fe80:	77fb      	strb	r3, [r7, #31]
 800fe82:	e06d      	b.n	800ff60 <UART_SetConfig+0x348>
 800fe84:	2310      	movs	r3, #16
 800fe86:	77fb      	strb	r3, [r7, #31]
 800fe88:	e06a      	b.n	800ff60 <UART_SetConfig+0x348>
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	4a1b      	ldr	r2, [pc, #108]	@ (800fefc <UART_SetConfig+0x2e4>)
 800fe90:	4293      	cmp	r3, r2
 800fe92:	d138      	bne.n	800ff06 <UART_SetConfig+0x2ee>
 800fe94:	4b13      	ldr	r3, [pc, #76]	@ (800fee4 <UART_SetConfig+0x2cc>)
 800fe96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe9a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800fe9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800fea2:	d017      	beq.n	800fed4 <UART_SetConfig+0x2bc>
 800fea4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800fea8:	d82a      	bhi.n	800ff00 <UART_SetConfig+0x2e8>
 800feaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800feae:	d00b      	beq.n	800fec8 <UART_SetConfig+0x2b0>
 800feb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800feb4:	d824      	bhi.n	800ff00 <UART_SetConfig+0x2e8>
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d003      	beq.n	800fec2 <UART_SetConfig+0x2aa>
 800feba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800febe:	d006      	beq.n	800fece <UART_SetConfig+0x2b6>
 800fec0:	e01e      	b.n	800ff00 <UART_SetConfig+0x2e8>
 800fec2:	2300      	movs	r3, #0
 800fec4:	77fb      	strb	r3, [r7, #31]
 800fec6:	e04b      	b.n	800ff60 <UART_SetConfig+0x348>
 800fec8:	2302      	movs	r3, #2
 800feca:	77fb      	strb	r3, [r7, #31]
 800fecc:	e048      	b.n	800ff60 <UART_SetConfig+0x348>
 800fece:	2304      	movs	r3, #4
 800fed0:	77fb      	strb	r3, [r7, #31]
 800fed2:	e045      	b.n	800ff60 <UART_SetConfig+0x348>
 800fed4:	2308      	movs	r3, #8
 800fed6:	77fb      	strb	r3, [r7, #31]
 800fed8:	e042      	b.n	800ff60 <UART_SetConfig+0x348>
 800feda:	bf00      	nop
 800fedc:	efff69f3 	.word	0xefff69f3
 800fee0:	40011000 	.word	0x40011000
 800fee4:	40023800 	.word	0x40023800
 800fee8:	40004400 	.word	0x40004400
 800feec:	40004800 	.word	0x40004800
 800fef0:	40004c00 	.word	0x40004c00
 800fef4:	40005000 	.word	0x40005000
 800fef8:	40011400 	.word	0x40011400
 800fefc:	40007800 	.word	0x40007800
 800ff00:	2310      	movs	r3, #16
 800ff02:	77fb      	strb	r3, [r7, #31]
 800ff04:	e02c      	b.n	800ff60 <UART_SetConfig+0x348>
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	4a72      	ldr	r2, [pc, #456]	@ (80100d4 <UART_SetConfig+0x4bc>)
 800ff0c:	4293      	cmp	r3, r2
 800ff0e:	d125      	bne.n	800ff5c <UART_SetConfig+0x344>
 800ff10:	4b71      	ldr	r3, [pc, #452]	@ (80100d8 <UART_SetConfig+0x4c0>)
 800ff12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff16:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ff1a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ff1e:	d017      	beq.n	800ff50 <UART_SetConfig+0x338>
 800ff20:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ff24:	d817      	bhi.n	800ff56 <UART_SetConfig+0x33e>
 800ff26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ff2a:	d00b      	beq.n	800ff44 <UART_SetConfig+0x32c>
 800ff2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ff30:	d811      	bhi.n	800ff56 <UART_SetConfig+0x33e>
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d003      	beq.n	800ff3e <UART_SetConfig+0x326>
 800ff36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ff3a:	d006      	beq.n	800ff4a <UART_SetConfig+0x332>
 800ff3c:	e00b      	b.n	800ff56 <UART_SetConfig+0x33e>
 800ff3e:	2300      	movs	r3, #0
 800ff40:	77fb      	strb	r3, [r7, #31]
 800ff42:	e00d      	b.n	800ff60 <UART_SetConfig+0x348>
 800ff44:	2302      	movs	r3, #2
 800ff46:	77fb      	strb	r3, [r7, #31]
 800ff48:	e00a      	b.n	800ff60 <UART_SetConfig+0x348>
 800ff4a:	2304      	movs	r3, #4
 800ff4c:	77fb      	strb	r3, [r7, #31]
 800ff4e:	e007      	b.n	800ff60 <UART_SetConfig+0x348>
 800ff50:	2308      	movs	r3, #8
 800ff52:	77fb      	strb	r3, [r7, #31]
 800ff54:	e004      	b.n	800ff60 <UART_SetConfig+0x348>
 800ff56:	2310      	movs	r3, #16
 800ff58:	77fb      	strb	r3, [r7, #31]
 800ff5a:	e001      	b.n	800ff60 <UART_SetConfig+0x348>
 800ff5c:	2310      	movs	r3, #16
 800ff5e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	69db      	ldr	r3, [r3, #28]
 800ff64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ff68:	d15b      	bne.n	8010022 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800ff6a:	7ffb      	ldrb	r3, [r7, #31]
 800ff6c:	2b08      	cmp	r3, #8
 800ff6e:	d828      	bhi.n	800ffc2 <UART_SetConfig+0x3aa>
 800ff70:	a201      	add	r2, pc, #4	@ (adr r2, 800ff78 <UART_SetConfig+0x360>)
 800ff72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff76:	bf00      	nop
 800ff78:	0800ff9d 	.word	0x0800ff9d
 800ff7c:	0800ffa5 	.word	0x0800ffa5
 800ff80:	0800ffad 	.word	0x0800ffad
 800ff84:	0800ffc3 	.word	0x0800ffc3
 800ff88:	0800ffb3 	.word	0x0800ffb3
 800ff8c:	0800ffc3 	.word	0x0800ffc3
 800ff90:	0800ffc3 	.word	0x0800ffc3
 800ff94:	0800ffc3 	.word	0x0800ffc3
 800ff98:	0800ffbb 	.word	0x0800ffbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ff9c:	f7fb f9f0 	bl	800b380 <HAL_RCC_GetPCLK1Freq>
 800ffa0:	61b8      	str	r0, [r7, #24]
        break;
 800ffa2:	e013      	b.n	800ffcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ffa4:	f7fb fa00 	bl	800b3a8 <HAL_RCC_GetPCLK2Freq>
 800ffa8:	61b8      	str	r0, [r7, #24]
        break;
 800ffaa:	e00f      	b.n	800ffcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ffac:	4b4b      	ldr	r3, [pc, #300]	@ (80100dc <UART_SetConfig+0x4c4>)
 800ffae:	61bb      	str	r3, [r7, #24]
        break;
 800ffb0:	e00c      	b.n	800ffcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ffb2:	f7fb f913 	bl	800b1dc <HAL_RCC_GetSysClockFreq>
 800ffb6:	61b8      	str	r0, [r7, #24]
        break;
 800ffb8:	e008      	b.n	800ffcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ffba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ffbe:	61bb      	str	r3, [r7, #24]
        break;
 800ffc0:	e004      	b.n	800ffcc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	77bb      	strb	r3, [r7, #30]
        break;
 800ffca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ffcc:	69bb      	ldr	r3, [r7, #24]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d074      	beq.n	80100bc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ffd2:	69bb      	ldr	r3, [r7, #24]
 800ffd4:	005a      	lsls	r2, r3, #1
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	685b      	ldr	r3, [r3, #4]
 800ffda:	085b      	lsrs	r3, r3, #1
 800ffdc:	441a      	add	r2, r3
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	685b      	ldr	r3, [r3, #4]
 800ffe2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ffe6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ffe8:	693b      	ldr	r3, [r7, #16]
 800ffea:	2b0f      	cmp	r3, #15
 800ffec:	d916      	bls.n	801001c <UART_SetConfig+0x404>
 800ffee:	693b      	ldr	r3, [r7, #16]
 800fff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fff4:	d212      	bcs.n	801001c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fff6:	693b      	ldr	r3, [r7, #16]
 800fff8:	b29b      	uxth	r3, r3
 800fffa:	f023 030f 	bic.w	r3, r3, #15
 800fffe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010000:	693b      	ldr	r3, [r7, #16]
 8010002:	085b      	lsrs	r3, r3, #1
 8010004:	b29b      	uxth	r3, r3
 8010006:	f003 0307 	and.w	r3, r3, #7
 801000a:	b29a      	uxth	r2, r3
 801000c:	89fb      	ldrh	r3, [r7, #14]
 801000e:	4313      	orrs	r3, r2
 8010010:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	89fa      	ldrh	r2, [r7, #14]
 8010018:	60da      	str	r2, [r3, #12]
 801001a:	e04f      	b.n	80100bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801001c:	2301      	movs	r3, #1
 801001e:	77bb      	strb	r3, [r7, #30]
 8010020:	e04c      	b.n	80100bc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010022:	7ffb      	ldrb	r3, [r7, #31]
 8010024:	2b08      	cmp	r3, #8
 8010026:	d828      	bhi.n	801007a <UART_SetConfig+0x462>
 8010028:	a201      	add	r2, pc, #4	@ (adr r2, 8010030 <UART_SetConfig+0x418>)
 801002a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801002e:	bf00      	nop
 8010030:	08010055 	.word	0x08010055
 8010034:	0801005d 	.word	0x0801005d
 8010038:	08010065 	.word	0x08010065
 801003c:	0801007b 	.word	0x0801007b
 8010040:	0801006b 	.word	0x0801006b
 8010044:	0801007b 	.word	0x0801007b
 8010048:	0801007b 	.word	0x0801007b
 801004c:	0801007b 	.word	0x0801007b
 8010050:	08010073 	.word	0x08010073
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010054:	f7fb f994 	bl	800b380 <HAL_RCC_GetPCLK1Freq>
 8010058:	61b8      	str	r0, [r7, #24]
        break;
 801005a:	e013      	b.n	8010084 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801005c:	f7fb f9a4 	bl	800b3a8 <HAL_RCC_GetPCLK2Freq>
 8010060:	61b8      	str	r0, [r7, #24]
        break;
 8010062:	e00f      	b.n	8010084 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010064:	4b1d      	ldr	r3, [pc, #116]	@ (80100dc <UART_SetConfig+0x4c4>)
 8010066:	61bb      	str	r3, [r7, #24]
        break;
 8010068:	e00c      	b.n	8010084 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801006a:	f7fb f8b7 	bl	800b1dc <HAL_RCC_GetSysClockFreq>
 801006e:	61b8      	str	r0, [r7, #24]
        break;
 8010070:	e008      	b.n	8010084 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010072:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010076:	61bb      	str	r3, [r7, #24]
        break;
 8010078:	e004      	b.n	8010084 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 801007a:	2300      	movs	r3, #0
 801007c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801007e:	2301      	movs	r3, #1
 8010080:	77bb      	strb	r3, [r7, #30]
        break;
 8010082:	bf00      	nop
    }

    if (pclk != 0U)
 8010084:	69bb      	ldr	r3, [r7, #24]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d018      	beq.n	80100bc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	685b      	ldr	r3, [r3, #4]
 801008e:	085a      	lsrs	r2, r3, #1
 8010090:	69bb      	ldr	r3, [r7, #24]
 8010092:	441a      	add	r2, r3
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	685b      	ldr	r3, [r3, #4]
 8010098:	fbb2 f3f3 	udiv	r3, r2, r3
 801009c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801009e:	693b      	ldr	r3, [r7, #16]
 80100a0:	2b0f      	cmp	r3, #15
 80100a2:	d909      	bls.n	80100b8 <UART_SetConfig+0x4a0>
 80100a4:	693b      	ldr	r3, [r7, #16]
 80100a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80100aa:	d205      	bcs.n	80100b8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80100ac:	693b      	ldr	r3, [r7, #16]
 80100ae:	b29a      	uxth	r2, r3
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	60da      	str	r2, [r3, #12]
 80100b6:	e001      	b.n	80100bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80100b8:	2301      	movs	r3, #1
 80100ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2200      	movs	r2, #0
 80100c0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	2200      	movs	r2, #0
 80100c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80100c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3720      	adds	r7, #32
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}
 80100d2:	bf00      	nop
 80100d4:	40007c00 	.word	0x40007c00
 80100d8:	40023800 	.word	0x40023800
 80100dc:	00f42400 	.word	0x00f42400

080100e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80100e0:	b480      	push	{r7}
 80100e2:	b083      	sub	sp, #12
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100ec:	f003 0308 	and.w	r3, r3, #8
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d00a      	beq.n	801010a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	685b      	ldr	r3, [r3, #4]
 80100fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	430a      	orrs	r2, r1
 8010108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801010e:	f003 0301 	and.w	r3, r3, #1
 8010112:	2b00      	cmp	r3, #0
 8010114:	d00a      	beq.n	801012c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	685b      	ldr	r3, [r3, #4]
 801011c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	430a      	orrs	r2, r1
 801012a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010130:	f003 0302 	and.w	r3, r3, #2
 8010134:	2b00      	cmp	r3, #0
 8010136:	d00a      	beq.n	801014e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	685b      	ldr	r3, [r3, #4]
 801013e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	430a      	orrs	r2, r1
 801014c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010152:	f003 0304 	and.w	r3, r3, #4
 8010156:	2b00      	cmp	r3, #0
 8010158:	d00a      	beq.n	8010170 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	685b      	ldr	r3, [r3, #4]
 8010160:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	430a      	orrs	r2, r1
 801016e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010174:	f003 0310 	and.w	r3, r3, #16
 8010178:	2b00      	cmp	r3, #0
 801017a:	d00a      	beq.n	8010192 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	689b      	ldr	r3, [r3, #8]
 8010182:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	430a      	orrs	r2, r1
 8010190:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010196:	f003 0320 	and.w	r3, r3, #32
 801019a:	2b00      	cmp	r3, #0
 801019c:	d00a      	beq.n	80101b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	689b      	ldr	r3, [r3, #8]
 80101a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	430a      	orrs	r2, r1
 80101b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d01a      	beq.n	80101f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	685b      	ldr	r3, [r3, #4]
 80101c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	430a      	orrs	r2, r1
 80101d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80101da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80101de:	d10a      	bne.n	80101f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	685b      	ldr	r3, [r3, #4]
 80101e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	430a      	orrs	r2, r1
 80101f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d00a      	beq.n	8010218 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	685b      	ldr	r3, [r3, #4]
 8010208:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	430a      	orrs	r2, r1
 8010216:	605a      	str	r2, [r3, #4]
  }
}
 8010218:	bf00      	nop
 801021a:	370c      	adds	r7, #12
 801021c:	46bd      	mov	sp, r7
 801021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010222:	4770      	bx	lr

08010224 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b08c      	sub	sp, #48	@ 0x30
 8010228:	af02      	add	r7, sp, #8
 801022a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	2200      	movs	r2, #0
 8010230:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010234:	f7f6 f892 	bl	800635c <HAL_GetTick>
 8010238:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	f003 0308 	and.w	r3, r3, #8
 8010244:	2b08      	cmp	r3, #8
 8010246:	d12e      	bne.n	80102a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010248:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801024c:	9300      	str	r3, [sp, #0]
 801024e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010250:	2200      	movs	r2, #0
 8010252:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010256:	6878      	ldr	r0, [r7, #4]
 8010258:	f000 f83b 	bl	80102d2 <UART_WaitOnFlagUntilTimeout>
 801025c:	4603      	mov	r3, r0
 801025e:	2b00      	cmp	r3, #0
 8010260:	d021      	beq.n	80102a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010268:	693b      	ldr	r3, [r7, #16]
 801026a:	e853 3f00 	ldrex	r3, [r3]
 801026e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010276:	623b      	str	r3, [r7, #32]
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	461a      	mov	r2, r3
 801027e:	6a3b      	ldr	r3, [r7, #32]
 8010280:	61fb      	str	r3, [r7, #28]
 8010282:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010284:	69b9      	ldr	r1, [r7, #24]
 8010286:	69fa      	ldr	r2, [r7, #28]
 8010288:	e841 2300 	strex	r3, r2, [r1]
 801028c:	617b      	str	r3, [r7, #20]
   return(result);
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d1e6      	bne.n	8010262 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2220      	movs	r2, #32
 8010298:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2200      	movs	r2, #0
 801029e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80102a2:	2303      	movs	r3, #3
 80102a4:	e011      	b.n	80102ca <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	2220      	movs	r2, #32
 80102aa:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2220      	movs	r2, #32
 80102b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2200      	movs	r2, #0
 80102b8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	2200      	movs	r2, #0
 80102be:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2200      	movs	r2, #0
 80102c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80102c8:	2300      	movs	r3, #0
}
 80102ca:	4618      	mov	r0, r3
 80102cc:	3728      	adds	r7, #40	@ 0x28
 80102ce:	46bd      	mov	sp, r7
 80102d0:	bd80      	pop	{r7, pc}

080102d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80102d2:	b580      	push	{r7, lr}
 80102d4:	b084      	sub	sp, #16
 80102d6:	af00      	add	r7, sp, #0
 80102d8:	60f8      	str	r0, [r7, #12]
 80102da:	60b9      	str	r1, [r7, #8]
 80102dc:	603b      	str	r3, [r7, #0]
 80102de:	4613      	mov	r3, r2
 80102e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80102e2:	e04f      	b.n	8010384 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80102e4:	69bb      	ldr	r3, [r7, #24]
 80102e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102ea:	d04b      	beq.n	8010384 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80102ec:	f7f6 f836 	bl	800635c <HAL_GetTick>
 80102f0:	4602      	mov	r2, r0
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	1ad3      	subs	r3, r2, r3
 80102f6:	69ba      	ldr	r2, [r7, #24]
 80102f8:	429a      	cmp	r2, r3
 80102fa:	d302      	bcc.n	8010302 <UART_WaitOnFlagUntilTimeout+0x30>
 80102fc:	69bb      	ldr	r3, [r7, #24]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d101      	bne.n	8010306 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010302:	2303      	movs	r3, #3
 8010304:	e04e      	b.n	80103a4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	f003 0304 	and.w	r3, r3, #4
 8010310:	2b00      	cmp	r3, #0
 8010312:	d037      	beq.n	8010384 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	2b80      	cmp	r3, #128	@ 0x80
 8010318:	d034      	beq.n	8010384 <UART_WaitOnFlagUntilTimeout+0xb2>
 801031a:	68bb      	ldr	r3, [r7, #8]
 801031c:	2b40      	cmp	r3, #64	@ 0x40
 801031e:	d031      	beq.n	8010384 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	69db      	ldr	r3, [r3, #28]
 8010326:	f003 0308 	and.w	r3, r3, #8
 801032a:	2b08      	cmp	r3, #8
 801032c:	d110      	bne.n	8010350 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	2208      	movs	r2, #8
 8010334:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010336:	68f8      	ldr	r0, [r7, #12]
 8010338:	f000 f8fe 	bl	8010538 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	2208      	movs	r2, #8
 8010340:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	2200      	movs	r2, #0
 8010348:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 801034c:	2301      	movs	r3, #1
 801034e:	e029      	b.n	80103a4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	69db      	ldr	r3, [r3, #28]
 8010356:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801035a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801035e:	d111      	bne.n	8010384 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010368:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801036a:	68f8      	ldr	r0, [r7, #12]
 801036c:	f000 f8e4 	bl	8010538 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	2220      	movs	r2, #32
 8010374:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	2200      	movs	r2, #0
 801037c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8010380:	2303      	movs	r3, #3
 8010382:	e00f      	b.n	80103a4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	69da      	ldr	r2, [r3, #28]
 801038a:	68bb      	ldr	r3, [r7, #8]
 801038c:	4013      	ands	r3, r2
 801038e:	68ba      	ldr	r2, [r7, #8]
 8010390:	429a      	cmp	r2, r3
 8010392:	bf0c      	ite	eq
 8010394:	2301      	moveq	r3, #1
 8010396:	2300      	movne	r3, #0
 8010398:	b2db      	uxtb	r3, r3
 801039a:	461a      	mov	r2, r3
 801039c:	79fb      	ldrb	r3, [r7, #7]
 801039e:	429a      	cmp	r2, r3
 80103a0:	d0a0      	beq.n	80102e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80103a2:	2300      	movs	r3, #0
}
 80103a4:	4618      	mov	r0, r3
 80103a6:	3710      	adds	r7, #16
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}

080103ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b096      	sub	sp, #88	@ 0x58
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	60f8      	str	r0, [r7, #12]
 80103b4:	60b9      	str	r1, [r7, #8]
 80103b6:	4613      	mov	r3, r2
 80103b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	68ba      	ldr	r2, [r7, #8]
 80103be:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	88fa      	ldrh	r2, [r7, #6]
 80103c4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	2200      	movs	r2, #0
 80103cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	2222      	movs	r2, #34	@ 0x22
 80103d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d028      	beq.n	8010432 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80103e4:	4a3e      	ldr	r2, [pc, #248]	@ (80104e0 <UART_Start_Receive_DMA+0x134>)
 80103e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80103ec:	4a3d      	ldr	r2, [pc, #244]	@ (80104e4 <UART_Start_Receive_DMA+0x138>)
 80103ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80103f4:	4a3c      	ldr	r2, [pc, #240]	@ (80104e8 <UART_Start_Receive_DMA+0x13c>)
 80103f6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80103fc:	2200      	movs	r2, #0
 80103fe:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	3324      	adds	r3, #36	@ 0x24
 801040a:	4619      	mov	r1, r3
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010410:	461a      	mov	r2, r3
 8010412:	88fb      	ldrh	r3, [r7, #6]
 8010414:	f7f6 fdc4 	bl	8006fa0 <HAL_DMA_Start_IT>
 8010418:	4603      	mov	r3, r0
 801041a:	2b00      	cmp	r3, #0
 801041c:	d009      	beq.n	8010432 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	2210      	movs	r2, #16
 8010422:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	2220      	movs	r2, #32
 801042a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 801042e:	2301      	movs	r3, #1
 8010430:	e051      	b.n	80104d6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	691b      	ldr	r3, [r3, #16]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d018      	beq.n	801046c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010442:	e853 3f00 	ldrex	r3, [r3]
 8010446:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801044a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801044e:	657b      	str	r3, [r7, #84]	@ 0x54
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	461a      	mov	r2, r3
 8010456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010458:	64bb      	str	r3, [r7, #72]	@ 0x48
 801045a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801045c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801045e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010460:	e841 2300 	strex	r3, r2, [r1]
 8010464:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8010466:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010468:	2b00      	cmp	r3, #0
 801046a:	d1e6      	bne.n	801043a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	3308      	adds	r3, #8
 8010472:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010476:	e853 3f00 	ldrex	r3, [r3]
 801047a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801047c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801047e:	f043 0301 	orr.w	r3, r3, #1
 8010482:	653b      	str	r3, [r7, #80]	@ 0x50
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	3308      	adds	r3, #8
 801048a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801048c:	637a      	str	r2, [r7, #52]	@ 0x34
 801048e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010490:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010492:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010494:	e841 2300 	strex	r3, r2, [r1]
 8010498:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801049a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801049c:	2b00      	cmp	r3, #0
 801049e:	d1e5      	bne.n	801046c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	3308      	adds	r3, #8
 80104a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104a8:	697b      	ldr	r3, [r7, #20]
 80104aa:	e853 3f00 	ldrex	r3, [r3]
 80104ae:	613b      	str	r3, [r7, #16]
   return(result);
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80104b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	3308      	adds	r3, #8
 80104be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80104c0:	623a      	str	r2, [r7, #32]
 80104c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104c4:	69f9      	ldr	r1, [r7, #28]
 80104c6:	6a3a      	ldr	r2, [r7, #32]
 80104c8:	e841 2300 	strex	r3, r2, [r1]
 80104cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80104ce:	69bb      	ldr	r3, [r7, #24]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d1e5      	bne.n	80104a0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80104d4:	2300      	movs	r3, #0
}
 80104d6:	4618      	mov	r0, r3
 80104d8:	3758      	adds	r7, #88	@ 0x58
 80104da:	46bd      	mov	sp, r7
 80104dc:	bd80      	pop	{r7, pc}
 80104de:	bf00      	nop
 80104e0:	08010601 	.word	0x08010601
 80104e4:	0801075f 	.word	0x0801075f
 80104e8:	080107d1 	.word	0x080107d1

080104ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80104ec:	b480      	push	{r7}
 80104ee:	b089      	sub	sp, #36	@ 0x24
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	e853 3f00 	ldrex	r3, [r3]
 8010500:	60bb      	str	r3, [r7, #8]
   return(result);
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010508:	61fb      	str	r3, [r7, #28]
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	461a      	mov	r2, r3
 8010510:	69fb      	ldr	r3, [r7, #28]
 8010512:	61bb      	str	r3, [r7, #24]
 8010514:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010516:	6979      	ldr	r1, [r7, #20]
 8010518:	69ba      	ldr	r2, [r7, #24]
 801051a:	e841 2300 	strex	r3, r2, [r1]
 801051e:	613b      	str	r3, [r7, #16]
   return(result);
 8010520:	693b      	ldr	r3, [r7, #16]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d1e6      	bne.n	80104f4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	2220      	movs	r2, #32
 801052a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801052c:	bf00      	nop
 801052e:	3724      	adds	r7, #36	@ 0x24
 8010530:	46bd      	mov	sp, r7
 8010532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010536:	4770      	bx	lr

08010538 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010538:	b480      	push	{r7}
 801053a:	b095      	sub	sp, #84	@ 0x54
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010548:	e853 3f00 	ldrex	r3, [r3]
 801054c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801054e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010550:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010554:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	461a      	mov	r2, r3
 801055c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801055e:	643b      	str	r3, [r7, #64]	@ 0x40
 8010560:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010562:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010564:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010566:	e841 2300 	strex	r3, r2, [r1]
 801056a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801056c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801056e:	2b00      	cmp	r3, #0
 8010570:	d1e6      	bne.n	8010540 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	3308      	adds	r3, #8
 8010578:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801057a:	6a3b      	ldr	r3, [r7, #32]
 801057c:	e853 3f00 	ldrex	r3, [r3]
 8010580:	61fb      	str	r3, [r7, #28]
   return(result);
 8010582:	69fb      	ldr	r3, [r7, #28]
 8010584:	f023 0301 	bic.w	r3, r3, #1
 8010588:	64bb      	str	r3, [r7, #72]	@ 0x48
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	3308      	adds	r3, #8
 8010590:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010592:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010594:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010596:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010598:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801059a:	e841 2300 	strex	r3, r2, [r1]
 801059e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80105a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d1e5      	bne.n	8010572 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80105aa:	2b01      	cmp	r3, #1
 80105ac:	d118      	bne.n	80105e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	e853 3f00 	ldrex	r3, [r3]
 80105ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80105bc:	68bb      	ldr	r3, [r7, #8]
 80105be:	f023 0310 	bic.w	r3, r3, #16
 80105c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	461a      	mov	r2, r3
 80105ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80105cc:	61bb      	str	r3, [r7, #24]
 80105ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105d0:	6979      	ldr	r1, [r7, #20]
 80105d2:	69ba      	ldr	r2, [r7, #24]
 80105d4:	e841 2300 	strex	r3, r2, [r1]
 80105d8:	613b      	str	r3, [r7, #16]
   return(result);
 80105da:	693b      	ldr	r3, [r7, #16]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d1e6      	bne.n	80105ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2220      	movs	r2, #32
 80105e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2200      	movs	r2, #0
 80105ec:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2200      	movs	r2, #0
 80105f2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80105f4:	bf00      	nop
 80105f6:	3754      	adds	r7, #84	@ 0x54
 80105f8:	46bd      	mov	sp, r7
 80105fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fe:	4770      	bx	lr

08010600 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b09c      	sub	sp, #112	@ 0x70
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801060c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	69db      	ldr	r3, [r3, #28]
 8010612:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010616:	d071      	beq.n	80106fc <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8010618:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801061a:	2200      	movs	r2, #0
 801061c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010620:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010626:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010628:	e853 3f00 	ldrex	r3, [r3]
 801062c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801062e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010630:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010634:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010636:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	461a      	mov	r2, r3
 801063c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801063e:	657b      	str	r3, [r7, #84]	@ 0x54
 8010640:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010642:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010644:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010646:	e841 2300 	strex	r3, r2, [r1]
 801064a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801064c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801064e:	2b00      	cmp	r3, #0
 8010650:	d1e6      	bne.n	8010620 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010652:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	3308      	adds	r3, #8
 8010658:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801065a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801065c:	e853 3f00 	ldrex	r3, [r3]
 8010660:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010664:	f023 0301 	bic.w	r3, r3, #1
 8010668:	667b      	str	r3, [r7, #100]	@ 0x64
 801066a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	3308      	adds	r3, #8
 8010670:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010672:	643a      	str	r2, [r7, #64]	@ 0x40
 8010674:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010676:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010678:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801067a:	e841 2300 	strex	r3, r2, [r1]
 801067e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010682:	2b00      	cmp	r3, #0
 8010684:	d1e5      	bne.n	8010652 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010686:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	3308      	adds	r3, #8
 801068c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801068e:	6a3b      	ldr	r3, [r7, #32]
 8010690:	e853 3f00 	ldrex	r3, [r3]
 8010694:	61fb      	str	r3, [r7, #28]
   return(result);
 8010696:	69fb      	ldr	r3, [r7, #28]
 8010698:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801069c:	663b      	str	r3, [r7, #96]	@ 0x60
 801069e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	3308      	adds	r3, #8
 80106a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80106a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80106a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80106ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80106ae:	e841 2300 	strex	r3, r2, [r1]
 80106b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80106b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d1e5      	bne.n	8010686 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80106ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80106bc:	2220      	movs	r2, #32
 80106be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80106c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80106c6:	2b01      	cmp	r3, #1
 80106c8:	d118      	bne.n	80106fc <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	e853 3f00 	ldrex	r3, [r3]
 80106d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	f023 0310 	bic.w	r3, r3, #16
 80106de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80106e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	461a      	mov	r2, r3
 80106e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80106e8:	61bb      	str	r3, [r7, #24]
 80106ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106ec:	6979      	ldr	r1, [r7, #20]
 80106ee:	69ba      	ldr	r2, [r7, #24]
 80106f0:	e841 2300 	strex	r3, r2, [r1]
 80106f4:	613b      	str	r3, [r7, #16]
   return(result);
 80106f6:	693b      	ldr	r3, [r7, #16]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d1e6      	bne.n	80106ca <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80106fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80106fe:	2200      	movs	r2, #0
 8010700:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010702:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010706:	2b01      	cmp	r3, #1
 8010708:	d122      	bne.n	8010750 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 801070a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801070c:	2200      	movs	r2, #0
 801070e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	685b      	ldr	r3, [r3, #4]
 8010718:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 801071c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801071e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8010722:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8010726:	429a      	cmp	r2, r3
 8010728:	d204      	bcs.n	8010734 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 801072a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801072c:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8010730:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010734:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010736:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 801073a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801073c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8010740:	b29b      	uxth	r3, r3
 8010742:	1ad3      	subs	r3, r2, r3
 8010744:	b29b      	uxth	r3, r3
 8010746:	4619      	mov	r1, r3
 8010748:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801074a:	f7ff fa59 	bl	800fc00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801074e:	e002      	b.n	8010756 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 8010750:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010752:	f7f5 fc57 	bl	8006004 <HAL_UART_RxCpltCallback>
}
 8010756:	bf00      	nop
 8010758:	3770      	adds	r7, #112	@ 0x70
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}

0801075e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801075e:	b580      	push	{r7, lr}
 8010760:	b084      	sub	sp, #16
 8010762:	af00      	add	r7, sp, #0
 8010764:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801076a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	2201      	movs	r2, #1
 8010770:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010776:	2b01      	cmp	r3, #1
 8010778:	d123      	bne.n	80107c2 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8010780:	085b      	lsrs	r3, r3, #1
 8010782:	b29a      	uxth	r2, r3
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	685b      	ldr	r3, [r3, #4]
 8010790:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8010798:	897a      	ldrh	r2, [r7, #10]
 801079a:	429a      	cmp	r2, r3
 801079c:	d803      	bhi.n	80107a6 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	897a      	ldrh	r2, [r7, #10]
 80107a2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80107b2:	b29b      	uxth	r3, r3
 80107b4:	1ad3      	subs	r3, r2, r3
 80107b6:	b29b      	uxth	r3, r3
 80107b8:	4619      	mov	r1, r3
 80107ba:	68f8      	ldr	r0, [r7, #12]
 80107bc:	f7ff fa20 	bl	800fc00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80107c0:	e002      	b.n	80107c8 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 80107c2:	68f8      	ldr	r0, [r7, #12]
 80107c4:	f7f5 fc42 	bl	800604c <HAL_UART_RxHalfCpltCallback>
}
 80107c8:	bf00      	nop
 80107ca:	3710      	adds	r7, #16
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}

080107d0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b086      	sub	sp, #24
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107dc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80107de:	697b      	ldr	r3, [r7, #20]
 80107e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80107e2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80107e4:	697b      	ldr	r3, [r7, #20]
 80107e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80107ea:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80107ec:	697b      	ldr	r3, [r7, #20]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	689b      	ldr	r3, [r3, #8]
 80107f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80107f6:	2b80      	cmp	r3, #128	@ 0x80
 80107f8:	d109      	bne.n	801080e <UART_DMAError+0x3e>
 80107fa:	693b      	ldr	r3, [r7, #16]
 80107fc:	2b21      	cmp	r3, #33	@ 0x21
 80107fe:	d106      	bne.n	801080e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010800:	697b      	ldr	r3, [r7, #20]
 8010802:	2200      	movs	r2, #0
 8010804:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8010808:	6978      	ldr	r0, [r7, #20]
 801080a:	f7ff fe6f 	bl	80104ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801080e:	697b      	ldr	r3, [r7, #20]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	689b      	ldr	r3, [r3, #8]
 8010814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010818:	2b40      	cmp	r3, #64	@ 0x40
 801081a:	d109      	bne.n	8010830 <UART_DMAError+0x60>
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	2b22      	cmp	r3, #34	@ 0x22
 8010820:	d106      	bne.n	8010830 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	2200      	movs	r2, #0
 8010826:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 801082a:	6978      	ldr	r0, [r7, #20]
 801082c:	f7ff fe84 	bl	8010538 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010830:	697b      	ldr	r3, [r7, #20]
 8010832:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010836:	f043 0210 	orr.w	r2, r3, #16
 801083a:	697b      	ldr	r3, [r7, #20]
 801083c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010840:	6978      	ldr	r0, [r7, #20]
 8010842:	f7f5 fc19 	bl	8006078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010846:	bf00      	nop
 8010848:	3718      	adds	r7, #24
 801084a:	46bd      	mov	sp, r7
 801084c:	bd80      	pop	{r7, pc}

0801084e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801084e:	b580      	push	{r7, lr}
 8010850:	b084      	sub	sp, #16
 8010852:	af00      	add	r7, sp, #0
 8010854:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801085a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	2200      	movs	r2, #0
 8010860:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010864:	68f8      	ldr	r0, [r7, #12]
 8010866:	f7f5 fc07 	bl	8006078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801086a:	bf00      	nop
 801086c:	3710      	adds	r7, #16
 801086e:	46bd      	mov	sp, r7
 8010870:	bd80      	pop	{r7, pc}

08010872 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010872:	b580      	push	{r7, lr}
 8010874:	b088      	sub	sp, #32
 8010876:	af00      	add	r7, sp, #0
 8010878:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	e853 3f00 	ldrex	r3, [r3]
 8010886:	60bb      	str	r3, [r7, #8]
   return(result);
 8010888:	68bb      	ldr	r3, [r7, #8]
 801088a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801088e:	61fb      	str	r3, [r7, #28]
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	461a      	mov	r2, r3
 8010896:	69fb      	ldr	r3, [r7, #28]
 8010898:	61bb      	str	r3, [r7, #24]
 801089a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801089c:	6979      	ldr	r1, [r7, #20]
 801089e:	69ba      	ldr	r2, [r7, #24]
 80108a0:	e841 2300 	strex	r3, r2, [r1]
 80108a4:	613b      	str	r3, [r7, #16]
   return(result);
 80108a6:	693b      	ldr	r3, [r7, #16]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d1e6      	bne.n	801087a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	2220      	movs	r2, #32
 80108b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	2200      	movs	r2, #0
 80108b6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	f7ff f997 	bl	800fbec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80108be:	bf00      	nop
 80108c0:	3720      	adds	r7, #32
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}
	...

080108c8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 80108c8:	b480      	push	{r7}
 80108ca:	b083      	sub	sp, #12
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d121      	bne.n	801091e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681a      	ldr	r2, [r3, #0]
 80108de:	4b27      	ldr	r3, [pc, #156]	@ (801097c <FMC_SDRAM_Init+0xb4>)
 80108e0:	4013      	ands	r3, r2
 80108e2:	683a      	ldr	r2, [r7, #0]
 80108e4:	6851      	ldr	r1, [r2, #4]
 80108e6:	683a      	ldr	r2, [r7, #0]
 80108e8:	6892      	ldr	r2, [r2, #8]
 80108ea:	4311      	orrs	r1, r2
 80108ec:	683a      	ldr	r2, [r7, #0]
 80108ee:	68d2      	ldr	r2, [r2, #12]
 80108f0:	4311      	orrs	r1, r2
 80108f2:	683a      	ldr	r2, [r7, #0]
 80108f4:	6912      	ldr	r2, [r2, #16]
 80108f6:	4311      	orrs	r1, r2
 80108f8:	683a      	ldr	r2, [r7, #0]
 80108fa:	6952      	ldr	r2, [r2, #20]
 80108fc:	4311      	orrs	r1, r2
 80108fe:	683a      	ldr	r2, [r7, #0]
 8010900:	6992      	ldr	r2, [r2, #24]
 8010902:	4311      	orrs	r1, r2
 8010904:	683a      	ldr	r2, [r7, #0]
 8010906:	69d2      	ldr	r2, [r2, #28]
 8010908:	4311      	orrs	r1, r2
 801090a:	683a      	ldr	r2, [r7, #0]
 801090c:	6a12      	ldr	r2, [r2, #32]
 801090e:	4311      	orrs	r1, r2
 8010910:	683a      	ldr	r2, [r7, #0]
 8010912:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8010914:	430a      	orrs	r2, r1
 8010916:	431a      	orrs	r2, r3
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	601a      	str	r2, [r3, #0]
 801091c:	e026      	b.n	801096c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8010926:	683b      	ldr	r3, [r7, #0]
 8010928:	69d9      	ldr	r1, [r3, #28]
 801092a:	683b      	ldr	r3, [r7, #0]
 801092c:	6a1b      	ldr	r3, [r3, #32]
 801092e:	4319      	orrs	r1, r3
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010934:	430b      	orrs	r3, r1
 8010936:	431a      	orrs	r2, r3
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	685a      	ldr	r2, [r3, #4]
 8010940:	4b0e      	ldr	r3, [pc, #56]	@ (801097c <FMC_SDRAM_Init+0xb4>)
 8010942:	4013      	ands	r3, r2
 8010944:	683a      	ldr	r2, [r7, #0]
 8010946:	6851      	ldr	r1, [r2, #4]
 8010948:	683a      	ldr	r2, [r7, #0]
 801094a:	6892      	ldr	r2, [r2, #8]
 801094c:	4311      	orrs	r1, r2
 801094e:	683a      	ldr	r2, [r7, #0]
 8010950:	68d2      	ldr	r2, [r2, #12]
 8010952:	4311      	orrs	r1, r2
 8010954:	683a      	ldr	r2, [r7, #0]
 8010956:	6912      	ldr	r2, [r2, #16]
 8010958:	4311      	orrs	r1, r2
 801095a:	683a      	ldr	r2, [r7, #0]
 801095c:	6952      	ldr	r2, [r2, #20]
 801095e:	4311      	orrs	r1, r2
 8010960:	683a      	ldr	r2, [r7, #0]
 8010962:	6992      	ldr	r2, [r2, #24]
 8010964:	430a      	orrs	r2, r1
 8010966:	431a      	orrs	r2, r3
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 801096c:	2300      	movs	r3, #0
}
 801096e:	4618      	mov	r0, r3
 8010970:	370c      	adds	r7, #12
 8010972:	46bd      	mov	sp, r7
 8010974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010978:	4770      	bx	lr
 801097a:	bf00      	nop
 801097c:	ffff8000 	.word	0xffff8000

08010980 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8010980:	b480      	push	{r7}
 8010982:	b085      	sub	sp, #20
 8010984:	af00      	add	r7, sp, #0
 8010986:	60f8      	str	r0, [r7, #12]
 8010988:	60b9      	str	r1, [r7, #8]
 801098a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d128      	bne.n	80109e4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	689b      	ldr	r3, [r3, #8]
 8010996:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 801099a:	68bb      	ldr	r3, [r7, #8]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	1e59      	subs	r1, r3, #1
 80109a0:	68bb      	ldr	r3, [r7, #8]
 80109a2:	685b      	ldr	r3, [r3, #4]
 80109a4:	3b01      	subs	r3, #1
 80109a6:	011b      	lsls	r3, r3, #4
 80109a8:	4319      	orrs	r1, r3
 80109aa:	68bb      	ldr	r3, [r7, #8]
 80109ac:	689b      	ldr	r3, [r3, #8]
 80109ae:	3b01      	subs	r3, #1
 80109b0:	021b      	lsls	r3, r3, #8
 80109b2:	4319      	orrs	r1, r3
 80109b4:	68bb      	ldr	r3, [r7, #8]
 80109b6:	68db      	ldr	r3, [r3, #12]
 80109b8:	3b01      	subs	r3, #1
 80109ba:	031b      	lsls	r3, r3, #12
 80109bc:	4319      	orrs	r1, r3
 80109be:	68bb      	ldr	r3, [r7, #8]
 80109c0:	691b      	ldr	r3, [r3, #16]
 80109c2:	3b01      	subs	r3, #1
 80109c4:	041b      	lsls	r3, r3, #16
 80109c6:	4319      	orrs	r1, r3
 80109c8:	68bb      	ldr	r3, [r7, #8]
 80109ca:	695b      	ldr	r3, [r3, #20]
 80109cc:	3b01      	subs	r3, #1
 80109ce:	051b      	lsls	r3, r3, #20
 80109d0:	4319      	orrs	r1, r3
 80109d2:	68bb      	ldr	r3, [r7, #8]
 80109d4:	699b      	ldr	r3, [r3, #24]
 80109d6:	3b01      	subs	r3, #1
 80109d8:	061b      	lsls	r3, r3, #24
 80109da:	430b      	orrs	r3, r1
 80109dc:	431a      	orrs	r2, r3
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	609a      	str	r2, [r3, #8]
 80109e2:	e02d      	b.n	8010a40 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	689a      	ldr	r2, [r3, #8]
 80109e8:	4b19      	ldr	r3, [pc, #100]	@ (8010a50 <FMC_SDRAM_Timing_Init+0xd0>)
 80109ea:	4013      	ands	r3, r2
 80109ec:	68ba      	ldr	r2, [r7, #8]
 80109ee:	68d2      	ldr	r2, [r2, #12]
 80109f0:	3a01      	subs	r2, #1
 80109f2:	0311      	lsls	r1, r2, #12
 80109f4:	68ba      	ldr	r2, [r7, #8]
 80109f6:	6952      	ldr	r2, [r2, #20]
 80109f8:	3a01      	subs	r2, #1
 80109fa:	0512      	lsls	r2, r2, #20
 80109fc:	430a      	orrs	r2, r1
 80109fe:	431a      	orrs	r2, r3
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	68db      	ldr	r3, [r3, #12]
 8010a08:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8010a0c:	68bb      	ldr	r3, [r7, #8]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	1e59      	subs	r1, r3, #1
 8010a12:	68bb      	ldr	r3, [r7, #8]
 8010a14:	685b      	ldr	r3, [r3, #4]
 8010a16:	3b01      	subs	r3, #1
 8010a18:	011b      	lsls	r3, r3, #4
 8010a1a:	4319      	orrs	r1, r3
 8010a1c:	68bb      	ldr	r3, [r7, #8]
 8010a1e:	689b      	ldr	r3, [r3, #8]
 8010a20:	3b01      	subs	r3, #1
 8010a22:	021b      	lsls	r3, r3, #8
 8010a24:	4319      	orrs	r1, r3
 8010a26:	68bb      	ldr	r3, [r7, #8]
 8010a28:	691b      	ldr	r3, [r3, #16]
 8010a2a:	3b01      	subs	r3, #1
 8010a2c:	041b      	lsls	r3, r3, #16
 8010a2e:	4319      	orrs	r1, r3
 8010a30:	68bb      	ldr	r3, [r7, #8]
 8010a32:	699b      	ldr	r3, [r3, #24]
 8010a34:	3b01      	subs	r3, #1
 8010a36:	061b      	lsls	r3, r3, #24
 8010a38:	430b      	orrs	r3, r1
 8010a3a:	431a      	orrs	r2, r3
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8010a40:	2300      	movs	r3, #0
}
 8010a42:	4618      	mov	r0, r3
 8010a44:	3714      	adds	r7, #20
 8010a46:	46bd      	mov	sp, r7
 8010a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4c:	4770      	bx	lr
 8010a4e:	bf00      	nop
 8010a50:	ff0f0fff 	.word	0xff0f0fff

08010a54 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010a54:	b084      	sub	sp, #16
 8010a56:	b480      	push	{r7}
 8010a58:	b085      	sub	sp, #20
 8010a5a:	af00      	add	r7, sp, #0
 8010a5c:	6078      	str	r0, [r7, #4]
 8010a5e:	f107 001c 	add.w	r0, r7, #28
 8010a62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010a66:	2300      	movs	r3, #0
 8010a68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8010a6a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010a6c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010a6e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8010a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8010a72:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8010a76:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8010a7a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8010a7e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010a80:	68fa      	ldr	r2, [r7, #12]
 8010a82:	4313      	orrs	r3, r2
 8010a84:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	685a      	ldr	r2, [r3, #4]
 8010a8a:	4b07      	ldr	r3, [pc, #28]	@ (8010aa8 <SDMMC_Init+0x54>)
 8010a8c:	4013      	ands	r3, r2
 8010a8e:	68fa      	ldr	r2, [r7, #12]
 8010a90:	431a      	orrs	r2, r3
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010a96:	2300      	movs	r3, #0
}
 8010a98:	4618      	mov	r0, r3
 8010a9a:	3714      	adds	r7, #20
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa2:	b004      	add	sp, #16
 8010aa4:	4770      	bx	lr
 8010aa6:	bf00      	nop
 8010aa8:	ffff8100 	.word	0xffff8100

08010aac <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010aac:	b480      	push	{r7}
 8010aae:	b083      	sub	sp, #12
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8010aba:	4618      	mov	r0, r3
 8010abc:	370c      	adds	r7, #12
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac4:	4770      	bx	lr

08010ac6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8010ac6:	b480      	push	{r7}
 8010ac8:	b083      	sub	sp, #12
 8010aca:	af00      	add	r7, sp, #0
 8010acc:	6078      	str	r0, [r7, #4]
 8010ace:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	681a      	ldr	r2, [r3, #0]
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8010ada:	2300      	movs	r3, #0
}
 8010adc:	4618      	mov	r0, r3
 8010ade:	370c      	adds	r7, #12
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae6:	4770      	bx	lr

08010ae8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8010ae8:	b480      	push	{r7}
 8010aea:	b083      	sub	sp, #12
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	2203      	movs	r2, #3
 8010af4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010af6:	2300      	movs	r3, #0
}
 8010af8:	4618      	mov	r0, r3
 8010afa:	370c      	adds	r7, #12
 8010afc:	46bd      	mov	sp, r7
 8010afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b02:	4770      	bx	lr

08010b04 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8010b04:	b480      	push	{r7}
 8010b06:	b083      	sub	sp, #12
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	f003 0303 	and.w	r3, r3, #3
}
 8010b14:	4618      	mov	r0, r3
 8010b16:	370c      	adds	r7, #12
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1e:	4770      	bx	lr

08010b20 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010b20:	b480      	push	{r7}
 8010b22:	b085      	sub	sp, #20
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
 8010b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010b2e:	683b      	ldr	r3, [r7, #0]
 8010b30:	681a      	ldr	r2, [r3, #0]
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010b36:	683b      	ldr	r3, [r7, #0]
 8010b38:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010b3e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010b40:	683b      	ldr	r3, [r7, #0]
 8010b42:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010b44:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010b46:	683b      	ldr	r3, [r7, #0]
 8010b48:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010b4a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010b4c:	68fa      	ldr	r2, [r7, #12]
 8010b4e:	4313      	orrs	r3, r2
 8010b50:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	68da      	ldr	r2, [r3, #12]
 8010b56:	4b06      	ldr	r3, [pc, #24]	@ (8010b70 <SDMMC_SendCommand+0x50>)
 8010b58:	4013      	ands	r3, r2
 8010b5a:	68fa      	ldr	r2, [r7, #12]
 8010b5c:	431a      	orrs	r2, r3
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8010b62:	2300      	movs	r3, #0
}
 8010b64:	4618      	mov	r0, r3
 8010b66:	3714      	adds	r7, #20
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6e:	4770      	bx	lr
 8010b70:	fffff000 	.word	0xfffff000

08010b74 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010b74:	b480      	push	{r7}
 8010b76:	b083      	sub	sp, #12
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	691b      	ldr	r3, [r3, #16]
 8010b80:	b2db      	uxtb	r3, r3
}
 8010b82:	4618      	mov	r0, r3
 8010b84:	370c      	adds	r7, #12
 8010b86:	46bd      	mov	sp, r7
 8010b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8c:	4770      	bx	lr

08010b8e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010b8e:	b480      	push	{r7}
 8010b90:	b085      	sub	sp, #20
 8010b92:	af00      	add	r7, sp, #0
 8010b94:	6078      	str	r0, [r7, #4]
 8010b96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	3314      	adds	r3, #20
 8010b9c:	461a      	mov	r2, r3
 8010b9e:	683b      	ldr	r3, [r7, #0]
 8010ba0:	4413      	add	r3, r2
 8010ba2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	681b      	ldr	r3, [r3, #0]
}  
 8010ba8:	4618      	mov	r0, r3
 8010baa:	3714      	adds	r7, #20
 8010bac:	46bd      	mov	sp, r7
 8010bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb2:	4770      	bx	lr

08010bb4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b085      	sub	sp, #20
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
 8010bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010bc2:	683b      	ldr	r3, [r7, #0]
 8010bc4:	681a      	ldr	r2, [r3, #0]
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010bca:	683b      	ldr	r3, [r7, #0]
 8010bcc:	685a      	ldr	r2, [r3, #4]
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010bd2:	683b      	ldr	r3, [r7, #0]
 8010bd4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010bd6:	683b      	ldr	r3, [r7, #0]
 8010bd8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010bda:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010bdc:	683b      	ldr	r3, [r7, #0]
 8010bde:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010be0:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010be2:	683b      	ldr	r3, [r7, #0]
 8010be4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010be6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010be8:	68fa      	ldr	r2, [r7, #12]
 8010bea:	4313      	orrs	r3, r2
 8010bec:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bf2:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	431a      	orrs	r2, r3
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8010bfe:	2300      	movs	r3, #0

}
 8010c00:	4618      	mov	r0, r3
 8010c02:	3714      	adds	r7, #20
 8010c04:	46bd      	mov	sp, r7
 8010c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0a:	4770      	bx	lr

08010c0c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b088      	sub	sp, #32
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
 8010c14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010c1a:	2310      	movs	r3, #16
 8010c1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c1e:	2340      	movs	r3, #64	@ 0x40
 8010c20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c22:	2300      	movs	r3, #0
 8010c24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010c2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c2c:	f107 0308 	add.w	r3, r7, #8
 8010c30:	4619      	mov	r1, r3
 8010c32:	6878      	ldr	r0, [r7, #4]
 8010c34:	f7ff ff74 	bl	8010b20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010c38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010c3c:	2110      	movs	r1, #16
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	f000 fa1a 	bl	8011078 <SDMMC_GetCmdResp1>
 8010c44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c46:	69fb      	ldr	r3, [r7, #28]
}
 8010c48:	4618      	mov	r0, r3
 8010c4a:	3720      	adds	r7, #32
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}

08010c50 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b088      	sub	sp, #32
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
 8010c58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010c5a:	683b      	ldr	r3, [r7, #0]
 8010c5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010c5e:	2311      	movs	r3, #17
 8010c60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c62:	2340      	movs	r3, #64	@ 0x40
 8010c64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c66:	2300      	movs	r3, #0
 8010c68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010c6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c70:	f107 0308 	add.w	r3, r7, #8
 8010c74:	4619      	mov	r1, r3
 8010c76:	6878      	ldr	r0, [r7, #4]
 8010c78:	f7ff ff52 	bl	8010b20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010c7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010c80:	2111      	movs	r1, #17
 8010c82:	6878      	ldr	r0, [r7, #4]
 8010c84:	f000 f9f8 	bl	8011078 <SDMMC_GetCmdResp1>
 8010c88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c8a:	69fb      	ldr	r3, [r7, #28]
}
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	3720      	adds	r7, #32
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}

08010c94 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b088      	sub	sp, #32
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
 8010c9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010ca2:	2312      	movs	r3, #18
 8010ca4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ca6:	2340      	movs	r3, #64	@ 0x40
 8010ca8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010caa:	2300      	movs	r3, #0
 8010cac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010cae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010cb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010cb4:	f107 0308 	add.w	r3, r7, #8
 8010cb8:	4619      	mov	r1, r3
 8010cba:	6878      	ldr	r0, [r7, #4]
 8010cbc:	f7ff ff30 	bl	8010b20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010cc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010cc4:	2112      	movs	r1, #18
 8010cc6:	6878      	ldr	r0, [r7, #4]
 8010cc8:	f000 f9d6 	bl	8011078 <SDMMC_GetCmdResp1>
 8010ccc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cce:	69fb      	ldr	r3, [r7, #28]
}
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	3720      	adds	r7, #32
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd80      	pop	{r7, pc}

08010cd8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b088      	sub	sp, #32
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
 8010ce0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010ce6:	2318      	movs	r3, #24
 8010ce8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010cea:	2340      	movs	r3, #64	@ 0x40
 8010cec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010cee:	2300      	movs	r3, #0
 8010cf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010cf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010cf6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010cf8:	f107 0308 	add.w	r3, r7, #8
 8010cfc:	4619      	mov	r1, r3
 8010cfe:	6878      	ldr	r0, [r7, #4]
 8010d00:	f7ff ff0e 	bl	8010b20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010d04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010d08:	2118      	movs	r1, #24
 8010d0a:	6878      	ldr	r0, [r7, #4]
 8010d0c:	f000 f9b4 	bl	8011078 <SDMMC_GetCmdResp1>
 8010d10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d12:	69fb      	ldr	r3, [r7, #28]
}
 8010d14:	4618      	mov	r0, r3
 8010d16:	3720      	adds	r7, #32
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd80      	pop	{r7, pc}

08010d1c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b088      	sub	sp, #32
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
 8010d24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010d2a:	2319      	movs	r3, #25
 8010d2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d2e:	2340      	movs	r3, #64	@ 0x40
 8010d30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d32:	2300      	movs	r3, #0
 8010d34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010d3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d3c:	f107 0308 	add.w	r3, r7, #8
 8010d40:	4619      	mov	r1, r3
 8010d42:	6878      	ldr	r0, [r7, #4]
 8010d44:	f7ff feec 	bl	8010b20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010d48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010d4c:	2119      	movs	r1, #25
 8010d4e:	6878      	ldr	r0, [r7, #4]
 8010d50:	f000 f992 	bl	8011078 <SDMMC_GetCmdResp1>
 8010d54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d56:	69fb      	ldr	r3, [r7, #28]
}
 8010d58:	4618      	mov	r0, r3
 8010d5a:	3720      	adds	r7, #32
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bd80      	pop	{r7, pc}

08010d60 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b088      	sub	sp, #32
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010d68:	2300      	movs	r3, #0
 8010d6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010d6c:	230c      	movs	r3, #12
 8010d6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d70:	2340      	movs	r3, #64	@ 0x40
 8010d72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d74:	2300      	movs	r3, #0
 8010d76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010d7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d7e:	f107 0308 	add.w	r3, r7, #8
 8010d82:	4619      	mov	r1, r3
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	f7ff fecb 	bl	8010b20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010d8a:	4a05      	ldr	r2, [pc, #20]	@ (8010da0 <SDMMC_CmdStopTransfer+0x40>)
 8010d8c:	210c      	movs	r1, #12
 8010d8e:	6878      	ldr	r0, [r7, #4]
 8010d90:	f000 f972 	bl	8011078 <SDMMC_GetCmdResp1>
 8010d94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d96:	69fb      	ldr	r3, [r7, #28]
}
 8010d98:	4618      	mov	r0, r3
 8010d9a:	3720      	adds	r7, #32
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}
 8010da0:	05f5e100 	.word	0x05f5e100

08010da4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b08a      	sub	sp, #40	@ 0x28
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	60f8      	str	r0, [r7, #12]
 8010dac:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010db4:	2307      	movs	r3, #7
 8010db6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010db8:	2340      	movs	r3, #64	@ 0x40
 8010dba:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010dc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010dc4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010dc6:	f107 0310 	add.w	r3, r7, #16
 8010dca:	4619      	mov	r1, r3
 8010dcc:	68f8      	ldr	r0, [r7, #12]
 8010dce:	f7ff fea7 	bl	8010b20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010dd6:	2107      	movs	r1, #7
 8010dd8:	68f8      	ldr	r0, [r7, #12]
 8010dda:	f000 f94d 	bl	8011078 <SDMMC_GetCmdResp1>
 8010dde:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8010de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010de2:	4618      	mov	r0, r3
 8010de4:	3728      	adds	r7, #40	@ 0x28
 8010de6:	46bd      	mov	sp, r7
 8010de8:	bd80      	pop	{r7, pc}

08010dea <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010dea:	b580      	push	{r7, lr}
 8010dec:	b088      	sub	sp, #32
 8010dee:	af00      	add	r7, sp, #0
 8010df0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010df2:	2300      	movs	r3, #0
 8010df4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010df6:	2300      	movs	r3, #0
 8010df8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010e06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e08:	f107 0308 	add.w	r3, r7, #8
 8010e0c:	4619      	mov	r1, r3
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	f7ff fe86 	bl	8010b20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	f000 fb67 	bl	80114e8 <SDMMC_GetCmdError>
 8010e1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e1c:	69fb      	ldr	r3, [r7, #28]
}
 8010e1e:	4618      	mov	r0, r3
 8010e20:	3720      	adds	r7, #32
 8010e22:	46bd      	mov	sp, r7
 8010e24:	bd80      	pop	{r7, pc}

08010e26 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010e26:	b580      	push	{r7, lr}
 8010e28:	b088      	sub	sp, #32
 8010e2a:	af00      	add	r7, sp, #0
 8010e2c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010e2e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8010e32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010e34:	2308      	movs	r3, #8
 8010e36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e38:	2340      	movs	r3, #64	@ 0x40
 8010e3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010e44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e46:	f107 0308 	add.w	r3, r7, #8
 8010e4a:	4619      	mov	r1, r3
 8010e4c:	6878      	ldr	r0, [r7, #4]
 8010e4e:	f7ff fe67 	bl	8010b20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010e52:	6878      	ldr	r0, [r7, #4]
 8010e54:	f000 fafa 	bl	801144c <SDMMC_GetCmdResp7>
 8010e58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e5a:	69fb      	ldr	r3, [r7, #28]
}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	3720      	adds	r7, #32
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}

08010e64 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b088      	sub	sp, #32
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
 8010e6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010e6e:	683b      	ldr	r3, [r7, #0]
 8010e70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010e72:	2337      	movs	r3, #55	@ 0x37
 8010e74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e76:	2340      	movs	r3, #64	@ 0x40
 8010e78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010e82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e84:	f107 0308 	add.w	r3, r7, #8
 8010e88:	4619      	mov	r1, r3
 8010e8a:	6878      	ldr	r0, [r7, #4]
 8010e8c:	f7ff fe48 	bl	8010b20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010e90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010e94:	2137      	movs	r1, #55	@ 0x37
 8010e96:	6878      	ldr	r0, [r7, #4]
 8010e98:	f000 f8ee 	bl	8011078 <SDMMC_GetCmdResp1>
 8010e9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e9e:	69fb      	ldr	r3, [r7, #28]
}
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	3720      	adds	r7, #32
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	bd80      	pop	{r7, pc}

08010ea8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b088      	sub	sp, #32
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
 8010eb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010eb2:	683a      	ldr	r2, [r7, #0]
 8010eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8010eec <SDMMC_CmdAppOperCommand+0x44>)
 8010eb6:	4313      	orrs	r3, r2
 8010eb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010eba:	2329      	movs	r3, #41	@ 0x29
 8010ebc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ebe:	2340      	movs	r3, #64	@ 0x40
 8010ec0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ec6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010eca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ecc:	f107 0308 	add.w	r3, r7, #8
 8010ed0:	4619      	mov	r1, r3
 8010ed2:	6878      	ldr	r0, [r7, #4]
 8010ed4:	f7ff fe24 	bl	8010b20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010ed8:	6878      	ldr	r0, [r7, #4]
 8010eda:	f000 fa03 	bl	80112e4 <SDMMC_GetCmdResp3>
 8010ede:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ee0:	69fb      	ldr	r3, [r7, #28]
}
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	3720      	adds	r7, #32
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	bd80      	pop	{r7, pc}
 8010eea:	bf00      	nop
 8010eec:	80100000 	.word	0x80100000

08010ef0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b088      	sub	sp, #32
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
 8010ef8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010efe:	2306      	movs	r3, #6
 8010f00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010f02:	2340      	movs	r3, #64	@ 0x40
 8010f04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f06:	2300      	movs	r3, #0
 8010f08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010f0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f10:	f107 0308 	add.w	r3, r7, #8
 8010f14:	4619      	mov	r1, r3
 8010f16:	6878      	ldr	r0, [r7, #4]
 8010f18:	f7ff fe02 	bl	8010b20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010f20:	2106      	movs	r1, #6
 8010f22:	6878      	ldr	r0, [r7, #4]
 8010f24:	f000 f8a8 	bl	8011078 <SDMMC_GetCmdResp1>
 8010f28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f2a:	69fb      	ldr	r3, [r7, #28]
}
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	3720      	adds	r7, #32
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}

08010f34 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b088      	sub	sp, #32
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010f40:	2333      	movs	r3, #51	@ 0x33
 8010f42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010f44:	2340      	movs	r3, #64	@ 0x40
 8010f46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f48:	2300      	movs	r3, #0
 8010f4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010f50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f52:	f107 0308 	add.w	r3, r7, #8
 8010f56:	4619      	mov	r1, r3
 8010f58:	6878      	ldr	r0, [r7, #4]
 8010f5a:	f7ff fde1 	bl	8010b20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010f62:	2133      	movs	r1, #51	@ 0x33
 8010f64:	6878      	ldr	r0, [r7, #4]
 8010f66:	f000 f887 	bl	8011078 <SDMMC_GetCmdResp1>
 8010f6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f6c:	69fb      	ldr	r3, [r7, #28]
}
 8010f6e:	4618      	mov	r0, r3
 8010f70:	3720      	adds	r7, #32
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bd80      	pop	{r7, pc}

08010f76 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010f76:	b580      	push	{r7, lr}
 8010f78:	b088      	sub	sp, #32
 8010f7a:	af00      	add	r7, sp, #0
 8010f7c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010f7e:	2300      	movs	r3, #0
 8010f80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010f82:	2302      	movs	r3, #2
 8010f84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010f86:	23c0      	movs	r3, #192	@ 0xc0
 8010f88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010f92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f94:	f107 0308 	add.w	r3, r7, #8
 8010f98:	4619      	mov	r1, r3
 8010f9a:	6878      	ldr	r0, [r7, #4]
 8010f9c:	f7ff fdc0 	bl	8010b20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010fa0:	6878      	ldr	r0, [r7, #4]
 8010fa2:	f000 f957 	bl	8011254 <SDMMC_GetCmdResp2>
 8010fa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010fa8:	69fb      	ldr	r3, [r7, #28]
}
 8010faa:	4618      	mov	r0, r3
 8010fac:	3720      	adds	r7, #32
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bd80      	pop	{r7, pc}

08010fb2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010fb2:	b580      	push	{r7, lr}
 8010fb4:	b088      	sub	sp, #32
 8010fb6:	af00      	add	r7, sp, #0
 8010fb8:	6078      	str	r0, [r7, #4]
 8010fba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010fc0:	2309      	movs	r3, #9
 8010fc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010fc4:	23c0      	movs	r3, #192	@ 0xc0
 8010fc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010fc8:	2300      	movs	r3, #0
 8010fca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010fcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010fd0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010fd2:	f107 0308 	add.w	r3, r7, #8
 8010fd6:	4619      	mov	r1, r3
 8010fd8:	6878      	ldr	r0, [r7, #4]
 8010fda:	f7ff fda1 	bl	8010b20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010fde:	6878      	ldr	r0, [r7, #4]
 8010fe0:	f000 f938 	bl	8011254 <SDMMC_GetCmdResp2>
 8010fe4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010fe6:	69fb      	ldr	r3, [r7, #28]
}
 8010fe8:	4618      	mov	r0, r3
 8010fea:	3720      	adds	r7, #32
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd80      	pop	{r7, pc}

08010ff0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b088      	sub	sp, #32
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
 8010ff8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010ffe:	2303      	movs	r3, #3
 8011000:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011002:	2340      	movs	r3, #64	@ 0x40
 8011004:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011006:	2300      	movs	r3, #0
 8011008:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801100a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801100e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011010:	f107 0308 	add.w	r3, r7, #8
 8011014:	4619      	mov	r1, r3
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f7ff fd82 	bl	8010b20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801101c:	683a      	ldr	r2, [r7, #0]
 801101e:	2103      	movs	r1, #3
 8011020:	6878      	ldr	r0, [r7, #4]
 8011022:	f000 f99d 	bl	8011360 <SDMMC_GetCmdResp6>
 8011026:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011028:	69fb      	ldr	r3, [r7, #28]
}
 801102a:	4618      	mov	r0, r3
 801102c:	3720      	adds	r7, #32
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}

08011032 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011032:	b580      	push	{r7, lr}
 8011034:	b088      	sub	sp, #32
 8011036:	af00      	add	r7, sp, #0
 8011038:	6078      	str	r0, [r7, #4]
 801103a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 801103c:	683b      	ldr	r3, [r7, #0]
 801103e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011040:	230d      	movs	r3, #13
 8011042:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011044:	2340      	movs	r3, #64	@ 0x40
 8011046:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011048:	2300      	movs	r3, #0
 801104a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801104c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011050:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011052:	f107 0308 	add.w	r3, r7, #8
 8011056:	4619      	mov	r1, r3
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	f7ff fd61 	bl	8010b20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801105e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011062:	210d      	movs	r1, #13
 8011064:	6878      	ldr	r0, [r7, #4]
 8011066:	f000 f807 	bl	8011078 <SDMMC_GetCmdResp1>
 801106a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801106c:	69fb      	ldr	r3, [r7, #28]
}
 801106e:	4618      	mov	r0, r3
 8011070:	3720      	adds	r7, #32
 8011072:	46bd      	mov	sp, r7
 8011074:	bd80      	pop	{r7, pc}
	...

08011078 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b088      	sub	sp, #32
 801107c:	af00      	add	r7, sp, #0
 801107e:	60f8      	str	r0, [r7, #12]
 8011080:	460b      	mov	r3, r1
 8011082:	607a      	str	r2, [r7, #4]
 8011084:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011086:	4b70      	ldr	r3, [pc, #448]	@ (8011248 <SDMMC_GetCmdResp1+0x1d0>)
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	4a70      	ldr	r2, [pc, #448]	@ (801124c <SDMMC_GetCmdResp1+0x1d4>)
 801108c:	fba2 2303 	umull	r2, r3, r2, r3
 8011090:	0a5a      	lsrs	r2, r3, #9
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	fb02 f303 	mul.w	r3, r2, r3
 8011098:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 801109a:	69fb      	ldr	r3, [r7, #28]
 801109c:	1e5a      	subs	r2, r3, #1
 801109e:	61fa      	str	r2, [r7, #28]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d102      	bne.n	80110aa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80110a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80110a8:	e0c9      	b.n	801123e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110ae:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80110b0:	69bb      	ldr	r3, [r7, #24]
 80110b2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d0ef      	beq.n	801109a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80110ba:	69bb      	ldr	r3, [r7, #24]
 80110bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d1ea      	bne.n	801109a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110c8:	f003 0304 	and.w	r3, r3, #4
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d004      	beq.n	80110da <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	2204      	movs	r2, #4
 80110d4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80110d6:	2304      	movs	r3, #4
 80110d8:	e0b1      	b.n	801123e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110de:	f003 0301 	and.w	r3, r3, #1
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d004      	beq.n	80110f0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	2201      	movs	r2, #1
 80110ea:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80110ec:	2301      	movs	r3, #1
 80110ee:	e0a6      	b.n	801123e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	22c5      	movs	r2, #197	@ 0xc5
 80110f4:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80110f6:	68f8      	ldr	r0, [r7, #12]
 80110f8:	f7ff fd3c 	bl	8010b74 <SDMMC_GetCommandResponse>
 80110fc:	4603      	mov	r3, r0
 80110fe:	461a      	mov	r2, r3
 8011100:	7afb      	ldrb	r3, [r7, #11]
 8011102:	4293      	cmp	r3, r2
 8011104:	d001      	beq.n	801110a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011106:	2301      	movs	r3, #1
 8011108:	e099      	b.n	801123e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801110a:	2100      	movs	r1, #0
 801110c:	68f8      	ldr	r0, [r7, #12]
 801110e:	f7ff fd3e 	bl	8010b8e <SDMMC_GetResponse>
 8011112:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011114:	697a      	ldr	r2, [r7, #20]
 8011116:	4b4e      	ldr	r3, [pc, #312]	@ (8011250 <SDMMC_GetCmdResp1+0x1d8>)
 8011118:	4013      	ands	r3, r2
 801111a:	2b00      	cmp	r3, #0
 801111c:	d101      	bne.n	8011122 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801111e:	2300      	movs	r3, #0
 8011120:	e08d      	b.n	801123e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011122:	697b      	ldr	r3, [r7, #20]
 8011124:	2b00      	cmp	r3, #0
 8011126:	da02      	bge.n	801112e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011128:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 801112c:	e087      	b.n	801123e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801112e:	697b      	ldr	r3, [r7, #20]
 8011130:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8011134:	2b00      	cmp	r3, #0
 8011136:	d001      	beq.n	801113c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011138:	2340      	movs	r3, #64	@ 0x40
 801113a:	e080      	b.n	801123e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801113c:	697b      	ldr	r3, [r7, #20]
 801113e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011142:	2b00      	cmp	r3, #0
 8011144:	d001      	beq.n	801114a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011146:	2380      	movs	r3, #128	@ 0x80
 8011148:	e079      	b.n	801123e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801114a:	697b      	ldr	r3, [r7, #20]
 801114c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011150:	2b00      	cmp	r3, #0
 8011152:	d002      	beq.n	801115a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011154:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011158:	e071      	b.n	801123e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801115a:	697b      	ldr	r3, [r7, #20]
 801115c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011160:	2b00      	cmp	r3, #0
 8011162:	d002      	beq.n	801116a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011164:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011168:	e069      	b.n	801123e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801116a:	697b      	ldr	r3, [r7, #20]
 801116c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8011170:	2b00      	cmp	r3, #0
 8011172:	d002      	beq.n	801117a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011174:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011178:	e061      	b.n	801123e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801117a:	697b      	ldr	r3, [r7, #20]
 801117c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8011180:	2b00      	cmp	r3, #0
 8011182:	d002      	beq.n	801118a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011184:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011188:	e059      	b.n	801123e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801118a:	697b      	ldr	r3, [r7, #20]
 801118c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011190:	2b00      	cmp	r3, #0
 8011192:	d002      	beq.n	801119a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011194:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011198:	e051      	b.n	801123e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801119a:	697b      	ldr	r3, [r7, #20]
 801119c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d002      	beq.n	80111aa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80111a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80111a8:	e049      	b.n	801123e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80111aa:	697b      	ldr	r3, [r7, #20]
 80111ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d002      	beq.n	80111ba <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80111b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80111b8:	e041      	b.n	801123e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80111ba:	697b      	ldr	r3, [r7, #20]
 80111bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d002      	beq.n	80111ca <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80111c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80111c8:	e039      	b.n	801123e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80111ca:	697b      	ldr	r3, [r7, #20]
 80111cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d002      	beq.n	80111da <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80111d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80111d8:	e031      	b.n	801123e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d002      	beq.n	80111ea <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80111e4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80111e8:	e029      	b.n	801123e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80111ea:	697b      	ldr	r3, [r7, #20]
 80111ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d002      	beq.n	80111fa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80111f4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80111f8:	e021      	b.n	801123e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80111fa:	697b      	ldr	r3, [r7, #20]
 80111fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011200:	2b00      	cmp	r3, #0
 8011202:	d002      	beq.n	801120a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011204:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8011208:	e019      	b.n	801123e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801120a:	697b      	ldr	r3, [r7, #20]
 801120c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011210:	2b00      	cmp	r3, #0
 8011212:	d002      	beq.n	801121a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011214:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8011218:	e011      	b.n	801123e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801121a:	697b      	ldr	r3, [r7, #20]
 801121c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011220:	2b00      	cmp	r3, #0
 8011222:	d002      	beq.n	801122a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011224:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8011228:	e009      	b.n	801123e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801122a:	697b      	ldr	r3, [r7, #20]
 801122c:	f003 0308 	and.w	r3, r3, #8
 8011230:	2b00      	cmp	r3, #0
 8011232:	d002      	beq.n	801123a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011234:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8011238:	e001      	b.n	801123e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801123a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801123e:	4618      	mov	r0, r3
 8011240:	3720      	adds	r7, #32
 8011242:	46bd      	mov	sp, r7
 8011244:	bd80      	pop	{r7, pc}
 8011246:	bf00      	nop
 8011248:	2000001c 	.word	0x2000001c
 801124c:	10624dd3 	.word	0x10624dd3
 8011250:	fdffe008 	.word	0xfdffe008

08011254 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011254:	b480      	push	{r7}
 8011256:	b085      	sub	sp, #20
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801125c:	4b1f      	ldr	r3, [pc, #124]	@ (80112dc <SDMMC_GetCmdResp2+0x88>)
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	4a1f      	ldr	r2, [pc, #124]	@ (80112e0 <SDMMC_GetCmdResp2+0x8c>)
 8011262:	fba2 2303 	umull	r2, r3, r2, r3
 8011266:	0a5b      	lsrs	r3, r3, #9
 8011268:	f241 3288 	movw	r2, #5000	@ 0x1388
 801126c:	fb02 f303 	mul.w	r3, r2, r3
 8011270:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	1e5a      	subs	r2, r3, #1
 8011276:	60fa      	str	r2, [r7, #12]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d102      	bne.n	8011282 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801127c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011280:	e026      	b.n	80112d0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011286:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011288:	68bb      	ldr	r3, [r7, #8]
 801128a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801128e:	2b00      	cmp	r3, #0
 8011290:	d0ef      	beq.n	8011272 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011292:	68bb      	ldr	r3, [r7, #8]
 8011294:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011298:	2b00      	cmp	r3, #0
 801129a:	d1ea      	bne.n	8011272 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80112a0:	f003 0304 	and.w	r3, r3, #4
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d004      	beq.n	80112b2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	2204      	movs	r2, #4
 80112ac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80112ae:	2304      	movs	r3, #4
 80112b0:	e00e      	b.n	80112d0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80112b6:	f003 0301 	and.w	r3, r3, #1
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d004      	beq.n	80112c8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	2201      	movs	r2, #1
 80112c2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80112c4:	2301      	movs	r3, #1
 80112c6:	e003      	b.n	80112d0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	22c5      	movs	r2, #197	@ 0xc5
 80112cc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80112ce:	2300      	movs	r3, #0
}
 80112d0:	4618      	mov	r0, r3
 80112d2:	3714      	adds	r7, #20
 80112d4:	46bd      	mov	sp, r7
 80112d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112da:	4770      	bx	lr
 80112dc:	2000001c 	.word	0x2000001c
 80112e0:	10624dd3 	.word	0x10624dd3

080112e4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80112e4:	b480      	push	{r7}
 80112e6:	b085      	sub	sp, #20
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80112ec:	4b1a      	ldr	r3, [pc, #104]	@ (8011358 <SDMMC_GetCmdResp3+0x74>)
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	4a1a      	ldr	r2, [pc, #104]	@ (801135c <SDMMC_GetCmdResp3+0x78>)
 80112f2:	fba2 2303 	umull	r2, r3, r2, r3
 80112f6:	0a5b      	lsrs	r3, r3, #9
 80112f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80112fc:	fb02 f303 	mul.w	r3, r2, r3
 8011300:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	1e5a      	subs	r2, r3, #1
 8011306:	60fa      	str	r2, [r7, #12]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d102      	bne.n	8011312 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801130c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011310:	e01b      	b.n	801134a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011316:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011318:	68bb      	ldr	r3, [r7, #8]
 801131a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801131e:	2b00      	cmp	r3, #0
 8011320:	d0ef      	beq.n	8011302 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011322:	68bb      	ldr	r3, [r7, #8]
 8011324:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011328:	2b00      	cmp	r3, #0
 801132a:	d1ea      	bne.n	8011302 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011330:	f003 0304 	and.w	r3, r3, #4
 8011334:	2b00      	cmp	r3, #0
 8011336:	d004      	beq.n	8011342 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2204      	movs	r2, #4
 801133c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801133e:	2304      	movs	r3, #4
 8011340:	e003      	b.n	801134a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	22c5      	movs	r2, #197	@ 0xc5
 8011346:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011348:	2300      	movs	r3, #0
}
 801134a:	4618      	mov	r0, r3
 801134c:	3714      	adds	r7, #20
 801134e:	46bd      	mov	sp, r7
 8011350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011354:	4770      	bx	lr
 8011356:	bf00      	nop
 8011358:	2000001c 	.word	0x2000001c
 801135c:	10624dd3 	.word	0x10624dd3

08011360 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b088      	sub	sp, #32
 8011364:	af00      	add	r7, sp, #0
 8011366:	60f8      	str	r0, [r7, #12]
 8011368:	460b      	mov	r3, r1
 801136a:	607a      	str	r2, [r7, #4]
 801136c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801136e:	4b35      	ldr	r3, [pc, #212]	@ (8011444 <SDMMC_GetCmdResp6+0xe4>)
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	4a35      	ldr	r2, [pc, #212]	@ (8011448 <SDMMC_GetCmdResp6+0xe8>)
 8011374:	fba2 2303 	umull	r2, r3, r2, r3
 8011378:	0a5b      	lsrs	r3, r3, #9
 801137a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801137e:	fb02 f303 	mul.w	r3, r2, r3
 8011382:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8011384:	69fb      	ldr	r3, [r7, #28]
 8011386:	1e5a      	subs	r2, r3, #1
 8011388:	61fa      	str	r2, [r7, #28]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d102      	bne.n	8011394 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801138e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011392:	e052      	b.n	801143a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011398:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801139a:	69bb      	ldr	r3, [r7, #24]
 801139c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d0ef      	beq.n	8011384 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80113a4:	69bb      	ldr	r3, [r7, #24]
 80113a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d1ea      	bne.n	8011384 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80113b2:	f003 0304 	and.w	r3, r3, #4
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d004      	beq.n	80113c4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	2204      	movs	r2, #4
 80113be:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80113c0:	2304      	movs	r3, #4
 80113c2:	e03a      	b.n	801143a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80113c8:	f003 0301 	and.w	r3, r3, #1
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d004      	beq.n	80113da <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	2201      	movs	r2, #1
 80113d4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80113d6:	2301      	movs	r3, #1
 80113d8:	e02f      	b.n	801143a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80113da:	68f8      	ldr	r0, [r7, #12]
 80113dc:	f7ff fbca 	bl	8010b74 <SDMMC_GetCommandResponse>
 80113e0:	4603      	mov	r3, r0
 80113e2:	461a      	mov	r2, r3
 80113e4:	7afb      	ldrb	r3, [r7, #11]
 80113e6:	4293      	cmp	r3, r2
 80113e8:	d001      	beq.n	80113ee <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80113ea:	2301      	movs	r3, #1
 80113ec:	e025      	b.n	801143a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	22c5      	movs	r2, #197	@ 0xc5
 80113f2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80113f4:	2100      	movs	r1, #0
 80113f6:	68f8      	ldr	r0, [r7, #12]
 80113f8:	f7ff fbc9 	bl	8010b8e <SDMMC_GetResponse>
 80113fc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80113fe:	697b      	ldr	r3, [r7, #20]
 8011400:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8011404:	2b00      	cmp	r3, #0
 8011406:	d106      	bne.n	8011416 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8011408:	697b      	ldr	r3, [r7, #20]
 801140a:	0c1b      	lsrs	r3, r3, #16
 801140c:	b29a      	uxth	r2, r3
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8011412:	2300      	movs	r3, #0
 8011414:	e011      	b.n	801143a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011416:	697b      	ldr	r3, [r7, #20]
 8011418:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801141c:	2b00      	cmp	r3, #0
 801141e:	d002      	beq.n	8011426 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011420:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011424:	e009      	b.n	801143a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011426:	697b      	ldr	r3, [r7, #20]
 8011428:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801142c:	2b00      	cmp	r3, #0
 801142e:	d002      	beq.n	8011436 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011430:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011434:	e001      	b.n	801143a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011436:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801143a:	4618      	mov	r0, r3
 801143c:	3720      	adds	r7, #32
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}
 8011442:	bf00      	nop
 8011444:	2000001c 	.word	0x2000001c
 8011448:	10624dd3 	.word	0x10624dd3

0801144c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 801144c:	b480      	push	{r7}
 801144e:	b085      	sub	sp, #20
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011454:	4b22      	ldr	r3, [pc, #136]	@ (80114e0 <SDMMC_GetCmdResp7+0x94>)
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	4a22      	ldr	r2, [pc, #136]	@ (80114e4 <SDMMC_GetCmdResp7+0x98>)
 801145a:	fba2 2303 	umull	r2, r3, r2, r3
 801145e:	0a5b      	lsrs	r3, r3, #9
 8011460:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011464:	fb02 f303 	mul.w	r3, r2, r3
 8011468:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	1e5a      	subs	r2, r3, #1
 801146e:	60fa      	str	r2, [r7, #12]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d102      	bne.n	801147a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011474:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011478:	e02c      	b.n	80114d4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801147e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011480:	68bb      	ldr	r3, [r7, #8]
 8011482:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8011486:	2b00      	cmp	r3, #0
 8011488:	d0ef      	beq.n	801146a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801148a:	68bb      	ldr	r3, [r7, #8]
 801148c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011490:	2b00      	cmp	r3, #0
 8011492:	d1ea      	bne.n	801146a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011498:	f003 0304 	and.w	r3, r3, #4
 801149c:	2b00      	cmp	r3, #0
 801149e:	d004      	beq.n	80114aa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	2204      	movs	r2, #4
 80114a4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80114a6:	2304      	movs	r3, #4
 80114a8:	e014      	b.n	80114d4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80114ae:	f003 0301 	and.w	r3, r3, #1
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d004      	beq.n	80114c0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	2201      	movs	r2, #1
 80114ba:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80114bc:	2301      	movs	r3, #1
 80114be:	e009      	b.n	80114d4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80114c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d002      	beq.n	80114d2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2240      	movs	r2, #64	@ 0x40
 80114d0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80114d2:	2300      	movs	r3, #0
  
}
 80114d4:	4618      	mov	r0, r3
 80114d6:	3714      	adds	r7, #20
 80114d8:	46bd      	mov	sp, r7
 80114da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114de:	4770      	bx	lr
 80114e0:	2000001c 	.word	0x2000001c
 80114e4:	10624dd3 	.word	0x10624dd3

080114e8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80114e8:	b480      	push	{r7}
 80114ea:	b085      	sub	sp, #20
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80114f0:	4b11      	ldr	r3, [pc, #68]	@ (8011538 <SDMMC_GetCmdError+0x50>)
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	4a11      	ldr	r2, [pc, #68]	@ (801153c <SDMMC_GetCmdError+0x54>)
 80114f6:	fba2 2303 	umull	r2, r3, r2, r3
 80114fa:	0a5b      	lsrs	r3, r3, #9
 80114fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011500:	fb02 f303 	mul.w	r3, r2, r3
 8011504:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	1e5a      	subs	r2, r3, #1
 801150a:	60fa      	str	r2, [r7, #12]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d102      	bne.n	8011516 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011510:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011514:	e009      	b.n	801152a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801151a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801151e:	2b00      	cmp	r3, #0
 8011520:	d0f1      	beq.n	8011506 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	22c5      	movs	r2, #197	@ 0xc5
 8011526:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8011528:	2300      	movs	r3, #0
}
 801152a:	4618      	mov	r0, r3
 801152c:	3714      	adds	r7, #20
 801152e:	46bd      	mov	sp, r7
 8011530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011534:	4770      	bx	lr
 8011536:	bf00      	nop
 8011538:	2000001c 	.word	0x2000001c
 801153c:	10624dd3 	.word	0x10624dd3

08011540 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011540:	b480      	push	{r7}
 8011542:	b083      	sub	sp, #12
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	689b      	ldr	r3, [r3, #8]
 801154c:	f043 0201 	orr.w	r2, r3, #1
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011554:	2300      	movs	r3, #0
}
 8011556:	4618      	mov	r0, r3
 8011558:	370c      	adds	r7, #12
 801155a:	46bd      	mov	sp, r7
 801155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011560:	4770      	bx	lr

08011562 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011562:	b480      	push	{r7}
 8011564:	b083      	sub	sp, #12
 8011566:	af00      	add	r7, sp, #0
 8011568:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	689b      	ldr	r3, [r3, #8]
 801156e:	f023 0201 	bic.w	r2, r3, #1
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011576:	2300      	movs	r3, #0
}
 8011578:	4618      	mov	r0, r3
 801157a:	370c      	adds	r7, #12
 801157c:	46bd      	mov	sp, r7
 801157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011582:	4770      	bx	lr

08011584 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011584:	b480      	push	{r7}
 8011586:	b085      	sub	sp, #20
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
 801158c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801158e:	2300      	movs	r3, #0
 8011590:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	3301      	adds	r3, #1
 8011596:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801159e:	d901      	bls.n	80115a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80115a0:	2303      	movs	r3, #3
 80115a2:	e01b      	b.n	80115dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	691b      	ldr	r3, [r3, #16]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	daf2      	bge.n	8011592 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80115ac:	2300      	movs	r3, #0
 80115ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80115b0:	683b      	ldr	r3, [r7, #0]
 80115b2:	019b      	lsls	r3, r3, #6
 80115b4:	f043 0220 	orr.w	r2, r3, #32
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	3301      	adds	r3, #1
 80115c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80115c8:	d901      	bls.n	80115ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80115ca:	2303      	movs	r3, #3
 80115cc:	e006      	b.n	80115dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	691b      	ldr	r3, [r3, #16]
 80115d2:	f003 0320 	and.w	r3, r3, #32
 80115d6:	2b20      	cmp	r3, #32
 80115d8:	d0f0      	beq.n	80115bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80115da:	2300      	movs	r3, #0
}
 80115dc:	4618      	mov	r0, r3
 80115de:	3714      	adds	r7, #20
 80115e0:	46bd      	mov	sp, r7
 80115e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e6:	4770      	bx	lr

080115e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80115e8:	b480      	push	{r7}
 80115ea:	b085      	sub	sp, #20
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80115f0:	2300      	movs	r3, #0
 80115f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	3301      	adds	r3, #1
 80115f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011600:	d901      	bls.n	8011606 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8011602:	2303      	movs	r3, #3
 8011604:	e018      	b.n	8011638 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	691b      	ldr	r3, [r3, #16]
 801160a:	2b00      	cmp	r3, #0
 801160c:	daf2      	bge.n	80115f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801160e:	2300      	movs	r3, #0
 8011610:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	2210      	movs	r2, #16
 8011616:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	3301      	adds	r3, #1
 801161c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011624:	d901      	bls.n	801162a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8011626:	2303      	movs	r3, #3
 8011628:	e006      	b.n	8011638 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	691b      	ldr	r3, [r3, #16]
 801162e:	f003 0310 	and.w	r3, r3, #16
 8011632:	2b10      	cmp	r3, #16
 8011634:	d0f0      	beq.n	8011618 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8011636:	2300      	movs	r3, #0
}
 8011638:	4618      	mov	r0, r3
 801163a:	3714      	adds	r7, #20
 801163c:	46bd      	mov	sp, r7
 801163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011642:	4770      	bx	lr

08011644 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011644:	b480      	push	{r7}
 8011646:	b08b      	sub	sp, #44	@ 0x2c
 8011648:	af00      	add	r7, sp, #0
 801164a:	60f8      	str	r0, [r7, #12]
 801164c:	60b9      	str	r1, [r7, #8]
 801164e:	4613      	mov	r3, r2
 8011650:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8011656:	68bb      	ldr	r3, [r7, #8]
 8011658:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801165a:	88fb      	ldrh	r3, [r7, #6]
 801165c:	089b      	lsrs	r3, r3, #2
 801165e:	b29b      	uxth	r3, r3
 8011660:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8011662:	88fb      	ldrh	r3, [r7, #6]
 8011664:	f003 0303 	and.w	r3, r3, #3
 8011668:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801166a:	2300      	movs	r3, #0
 801166c:	623b      	str	r3, [r7, #32]
 801166e:	e014      	b.n	801169a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011670:	69bb      	ldr	r3, [r7, #24]
 8011672:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011676:	681a      	ldr	r2, [r3, #0]
 8011678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801167a:	601a      	str	r2, [r3, #0]
    pDest++;
 801167c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801167e:	3301      	adds	r3, #1
 8011680:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011684:	3301      	adds	r3, #1
 8011686:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801168a:	3301      	adds	r3, #1
 801168c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801168e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011690:	3301      	adds	r3, #1
 8011692:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8011694:	6a3b      	ldr	r3, [r7, #32]
 8011696:	3301      	adds	r3, #1
 8011698:	623b      	str	r3, [r7, #32]
 801169a:	6a3a      	ldr	r2, [r7, #32]
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	429a      	cmp	r2, r3
 80116a0:	d3e6      	bcc.n	8011670 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80116a2:	8bfb      	ldrh	r3, [r7, #30]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d01e      	beq.n	80116e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80116a8:	2300      	movs	r3, #0
 80116aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80116ac:	69bb      	ldr	r3, [r7, #24]
 80116ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80116b2:	461a      	mov	r2, r3
 80116b4:	f107 0310 	add.w	r3, r7, #16
 80116b8:	6812      	ldr	r2, [r2, #0]
 80116ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80116bc:	693a      	ldr	r2, [r7, #16]
 80116be:	6a3b      	ldr	r3, [r7, #32]
 80116c0:	b2db      	uxtb	r3, r3
 80116c2:	00db      	lsls	r3, r3, #3
 80116c4:	fa22 f303 	lsr.w	r3, r2, r3
 80116c8:	b2da      	uxtb	r2, r3
 80116ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116cc:	701a      	strb	r2, [r3, #0]
      i++;
 80116ce:	6a3b      	ldr	r3, [r7, #32]
 80116d0:	3301      	adds	r3, #1
 80116d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80116d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116d6:	3301      	adds	r3, #1
 80116d8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80116da:	8bfb      	ldrh	r3, [r7, #30]
 80116dc:	3b01      	subs	r3, #1
 80116de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80116e0:	8bfb      	ldrh	r3, [r7, #30]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d1ea      	bne.n	80116bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80116e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80116e8:	4618      	mov	r0, r3
 80116ea:	372c      	adds	r7, #44	@ 0x2c
 80116ec:	46bd      	mov	sp, r7
 80116ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f2:	4770      	bx	lr

080116f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80116f4:	b480      	push	{r7}
 80116f6:	b085      	sub	sp, #20
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	695b      	ldr	r3, [r3, #20]
 8011700:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	699b      	ldr	r3, [r3, #24]
 8011706:	68fa      	ldr	r2, [r7, #12]
 8011708:	4013      	ands	r3, r2
 801170a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801170c:	68fb      	ldr	r3, [r7, #12]
}
 801170e:	4618      	mov	r0, r3
 8011710:	3714      	adds	r7, #20
 8011712:	46bd      	mov	sp, r7
 8011714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011718:	4770      	bx	lr

0801171a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 801171a:	b480      	push	{r7}
 801171c:	b085      	sub	sp, #20
 801171e:	af00      	add	r7, sp, #0
 8011720:	6078      	str	r0, [r7, #4]
 8011722:	460b      	mov	r3, r1
 8011724:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 801172a:	78fb      	ldrb	r3, [r7, #3]
 801172c:	015a      	lsls	r2, r3, #5
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	4413      	add	r3, r2
 8011732:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011736:	689b      	ldr	r3, [r3, #8]
 8011738:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 801173a:	78fb      	ldrb	r3, [r7, #3]
 801173c:	015a      	lsls	r2, r3, #5
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	4413      	add	r3, r2
 8011742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011746:	68db      	ldr	r3, [r3, #12]
 8011748:	68ba      	ldr	r2, [r7, #8]
 801174a:	4013      	ands	r3, r2
 801174c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801174e:	68bb      	ldr	r3, [r7, #8]
}
 8011750:	4618      	mov	r0, r3
 8011752:	3714      	adds	r7, #20
 8011754:	46bd      	mov	sp, r7
 8011756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175a:	4770      	bx	lr

0801175c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 801175c:	b480      	push	{r7}
 801175e:	b083      	sub	sp, #12
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	695b      	ldr	r3, [r3, #20]
 8011768:	f003 0301 	and.w	r3, r3, #1
}
 801176c:	4618      	mov	r0, r3
 801176e:	370c      	adds	r7, #12
 8011770:	46bd      	mov	sp, r7
 8011772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011776:	4770      	bx	lr

08011778 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8011778:	b480      	push	{r7}
 801177a:	b085      	sub	sp, #20
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
 8011780:	460b      	mov	r3, r1
 8011782:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	68fa      	ldr	r2, [r7, #12]
 8011792:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8011796:	f023 0303 	bic.w	r3, r3, #3
 801179a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80117a2:	681a      	ldr	r2, [r3, #0]
 80117a4:	78fb      	ldrb	r3, [r7, #3]
 80117a6:	f003 0303 	and.w	r3, r3, #3
 80117aa:	68f9      	ldr	r1, [r7, #12]
 80117ac:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80117b0:	4313      	orrs	r3, r2
 80117b2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80117b4:	78fb      	ldrb	r3, [r7, #3]
 80117b6:	2b01      	cmp	r3, #1
 80117b8:	d107      	bne.n	80117ca <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80117c0:	461a      	mov	r2, r3
 80117c2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80117c6:	6053      	str	r3, [r2, #4]
 80117c8:	e00c      	b.n	80117e4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80117ca:	78fb      	ldrb	r3, [r7, #3]
 80117cc:	2b02      	cmp	r3, #2
 80117ce:	d107      	bne.n	80117e0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80117d6:	461a      	mov	r2, r3
 80117d8:	f241 7370 	movw	r3, #6000	@ 0x1770
 80117dc:	6053      	str	r3, [r2, #4]
 80117de:	e001      	b.n	80117e4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80117e0:	2301      	movs	r3, #1
 80117e2:	e000      	b.n	80117e6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80117e4:	2300      	movs	r3, #0
}
 80117e6:	4618      	mov	r0, r3
 80117e8:	3714      	adds	r7, #20
 80117ea:	46bd      	mov	sp, r7
 80117ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f0:	4770      	bx	lr

080117f2 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80117f2:	b480      	push	{r7}
 80117f4:	b085      	sub	sp, #20
 80117f6:	af00      	add	r7, sp, #0
 80117f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011804:	695b      	ldr	r3, [r3, #20]
 8011806:	b29b      	uxth	r3, r3
}
 8011808:	4618      	mov	r0, r3
 801180a:	3714      	adds	r7, #20
 801180c:	46bd      	mov	sp, r7
 801180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011812:	4770      	bx	lr

08011814 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8011814:	b480      	push	{r7}
 8011816:	b089      	sub	sp, #36	@ 0x24
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
 801181c:	460b      	mov	r3, r1
 801181e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8011824:	78fb      	ldrb	r3, [r7, #3]
 8011826:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8011828:	2300      	movs	r3, #0
 801182a:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 801182c:	69bb      	ldr	r3, [r7, #24]
 801182e:	015a      	lsls	r2, r3, #5
 8011830:	69fb      	ldr	r3, [r7, #28]
 8011832:	4413      	add	r3, r2
 8011834:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	0c9b      	lsrs	r3, r3, #18
 801183c:	f003 0303 	and.w	r3, r3, #3
 8011840:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8011842:	69bb      	ldr	r3, [r7, #24]
 8011844:	015a      	lsls	r2, r3, #5
 8011846:	69fb      	ldr	r3, [r7, #28]
 8011848:	4413      	add	r3, r2
 801184a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	0fdb      	lsrs	r3, r3, #31
 8011852:	f003 0301 	and.w	r3, r3, #1
 8011856:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8011858:	69bb      	ldr	r3, [r7, #24]
 801185a:	015a      	lsls	r2, r3, #5
 801185c:	69fb      	ldr	r3, [r7, #28]
 801185e:	4413      	add	r3, r2
 8011860:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011864:	685b      	ldr	r3, [r3, #4]
 8011866:	0fdb      	lsrs	r3, r3, #31
 8011868:	f003 0301 	and.w	r3, r3, #1
 801186c:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	689b      	ldr	r3, [r3, #8]
 8011872:	f003 0320 	and.w	r3, r3, #32
 8011876:	2b20      	cmp	r3, #32
 8011878:	d10d      	bne.n	8011896 <USB_HC_Halt+0x82>
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d10a      	bne.n	8011896 <USB_HC_Halt+0x82>
 8011880:	693b      	ldr	r3, [r7, #16]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d005      	beq.n	8011892 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8011886:	697b      	ldr	r3, [r7, #20]
 8011888:	2b01      	cmp	r3, #1
 801188a:	d002      	beq.n	8011892 <USB_HC_Halt+0x7e>
 801188c:	697b      	ldr	r3, [r7, #20]
 801188e:	2b03      	cmp	r3, #3
 8011890:	d101      	bne.n	8011896 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8011892:	2300      	movs	r3, #0
 8011894:	e0d8      	b.n	8011a48 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8011896:	697b      	ldr	r3, [r7, #20]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d002      	beq.n	80118a2 <USB_HC_Halt+0x8e>
 801189c:	697b      	ldr	r3, [r7, #20]
 801189e:	2b02      	cmp	r3, #2
 80118a0:	d173      	bne.n	801198a <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80118a2:	69bb      	ldr	r3, [r7, #24]
 80118a4:	015a      	lsls	r2, r3, #5
 80118a6:	69fb      	ldr	r3, [r7, #28]
 80118a8:	4413      	add	r3, r2
 80118aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	69ba      	ldr	r2, [r7, #24]
 80118b2:	0151      	lsls	r1, r2, #5
 80118b4:	69fa      	ldr	r2, [r7, #28]
 80118b6:	440a      	add	r2, r1
 80118b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80118bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80118c0:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	689b      	ldr	r3, [r3, #8]
 80118c6:	f003 0320 	and.w	r3, r3, #32
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d14a      	bne.n	8011964 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118d2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d133      	bne.n	8011942 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80118da:	69bb      	ldr	r3, [r7, #24]
 80118dc:	015a      	lsls	r2, r3, #5
 80118de:	69fb      	ldr	r3, [r7, #28]
 80118e0:	4413      	add	r3, r2
 80118e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	69ba      	ldr	r2, [r7, #24]
 80118ea:	0151      	lsls	r1, r2, #5
 80118ec:	69fa      	ldr	r2, [r7, #28]
 80118ee:	440a      	add	r2, r1
 80118f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80118f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80118f8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80118fa:	69bb      	ldr	r3, [r7, #24]
 80118fc:	015a      	lsls	r2, r3, #5
 80118fe:	69fb      	ldr	r3, [r7, #28]
 8011900:	4413      	add	r3, r2
 8011902:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	69ba      	ldr	r2, [r7, #24]
 801190a:	0151      	lsls	r1, r2, #5
 801190c:	69fa      	ldr	r2, [r7, #28]
 801190e:	440a      	add	r2, r1
 8011910:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011914:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011918:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 801191a:	68bb      	ldr	r3, [r7, #8]
 801191c:	3301      	adds	r3, #1
 801191e:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8011920:	68bb      	ldr	r3, [r7, #8]
 8011922:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011926:	d82e      	bhi.n	8011986 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8011928:	69bb      	ldr	r3, [r7, #24]
 801192a:	015a      	lsls	r2, r3, #5
 801192c:	69fb      	ldr	r3, [r7, #28]
 801192e:	4413      	add	r3, r2
 8011930:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801193a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801193e:	d0ec      	beq.n	801191a <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011940:	e081      	b.n	8011a46 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011942:	69bb      	ldr	r3, [r7, #24]
 8011944:	015a      	lsls	r2, r3, #5
 8011946:	69fb      	ldr	r3, [r7, #28]
 8011948:	4413      	add	r3, r2
 801194a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	69ba      	ldr	r2, [r7, #24]
 8011952:	0151      	lsls	r1, r2, #5
 8011954:	69fa      	ldr	r2, [r7, #28]
 8011956:	440a      	add	r2, r1
 8011958:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801195c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011960:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011962:	e070      	b.n	8011a46 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011964:	69bb      	ldr	r3, [r7, #24]
 8011966:	015a      	lsls	r2, r3, #5
 8011968:	69fb      	ldr	r3, [r7, #28]
 801196a:	4413      	add	r3, r2
 801196c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	69ba      	ldr	r2, [r7, #24]
 8011974:	0151      	lsls	r1, r2, #5
 8011976:	69fa      	ldr	r2, [r7, #28]
 8011978:	440a      	add	r2, r1
 801197a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801197e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011982:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011984:	e05f      	b.n	8011a46 <USB_HC_Halt+0x232>
            break;
 8011986:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011988:	e05d      	b.n	8011a46 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 801198a:	69bb      	ldr	r3, [r7, #24]
 801198c:	015a      	lsls	r2, r3, #5
 801198e:	69fb      	ldr	r3, [r7, #28]
 8011990:	4413      	add	r3, r2
 8011992:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	69ba      	ldr	r2, [r7, #24]
 801199a:	0151      	lsls	r1, r2, #5
 801199c:	69fa      	ldr	r2, [r7, #28]
 801199e:	440a      	add	r2, r1
 80119a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80119a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80119a8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80119aa:	69fb      	ldr	r3, [r7, #28]
 80119ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80119b0:	691b      	ldr	r3, [r3, #16]
 80119b2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d133      	bne.n	8011a22 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80119ba:	69bb      	ldr	r3, [r7, #24]
 80119bc:	015a      	lsls	r2, r3, #5
 80119be:	69fb      	ldr	r3, [r7, #28]
 80119c0:	4413      	add	r3, r2
 80119c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	69ba      	ldr	r2, [r7, #24]
 80119ca:	0151      	lsls	r1, r2, #5
 80119cc:	69fa      	ldr	r2, [r7, #28]
 80119ce:	440a      	add	r2, r1
 80119d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80119d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80119d8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80119da:	69bb      	ldr	r3, [r7, #24]
 80119dc:	015a      	lsls	r2, r3, #5
 80119de:	69fb      	ldr	r3, [r7, #28]
 80119e0:	4413      	add	r3, r2
 80119e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	69ba      	ldr	r2, [r7, #24]
 80119ea:	0151      	lsls	r1, r2, #5
 80119ec:	69fa      	ldr	r2, [r7, #28]
 80119ee:	440a      	add	r2, r1
 80119f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80119f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80119f8:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80119fa:	68bb      	ldr	r3, [r7, #8]
 80119fc:	3301      	adds	r3, #1
 80119fe:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8011a00:	68bb      	ldr	r3, [r7, #8]
 8011a02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011a06:	d81d      	bhi.n	8011a44 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8011a08:	69bb      	ldr	r3, [r7, #24]
 8011a0a:	015a      	lsls	r2, r3, #5
 8011a0c:	69fb      	ldr	r3, [r7, #28]
 8011a0e:	4413      	add	r3, r2
 8011a10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011a1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011a1e:	d0ec      	beq.n	80119fa <USB_HC_Halt+0x1e6>
 8011a20:	e011      	b.n	8011a46 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011a22:	69bb      	ldr	r3, [r7, #24]
 8011a24:	015a      	lsls	r2, r3, #5
 8011a26:	69fb      	ldr	r3, [r7, #28]
 8011a28:	4413      	add	r3, r2
 8011a2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	69ba      	ldr	r2, [r7, #24]
 8011a32:	0151      	lsls	r1, r2, #5
 8011a34:	69fa      	ldr	r2, [r7, #28]
 8011a36:	440a      	add	r2, r1
 8011a38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011a3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011a40:	6013      	str	r3, [r2, #0]
 8011a42:	e000      	b.n	8011a46 <USB_HC_Halt+0x232>
          break;
 8011a44:	bf00      	nop
    }
  }

  return HAL_OK;
 8011a46:	2300      	movs	r3, #0
}
 8011a48:	4618      	mov	r0, r3
 8011a4a:	3724      	adds	r7, #36	@ 0x24
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a52:	4770      	bx	lr

08011a54 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b088      	sub	sp, #32
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8011a64:	2300      	movs	r3, #0
 8011a66:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8011a68:	6878      	ldr	r0, [r7, #4]
 8011a6a:	f7ff fd7a 	bl	8011562 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011a6e:	2110      	movs	r1, #16
 8011a70:	6878      	ldr	r0, [r7, #4]
 8011a72:	f7ff fd87 	bl	8011584 <USB_FlushTxFifo>
 8011a76:	4603      	mov	r3, r0
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d001      	beq.n	8011a80 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8011a7c:	2301      	movs	r3, #1
 8011a7e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011a80:	6878      	ldr	r0, [r7, #4]
 8011a82:	f7ff fdb1 	bl	80115e8 <USB_FlushRxFifo>
 8011a86:	4603      	mov	r3, r0
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d001      	beq.n	8011a90 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8011a8c:	2301      	movs	r3, #1
 8011a8e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8011a90:	2300      	movs	r3, #0
 8011a92:	61bb      	str	r3, [r7, #24]
 8011a94:	e01f      	b.n	8011ad6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8011a96:	69bb      	ldr	r3, [r7, #24]
 8011a98:	015a      	lsls	r2, r3, #5
 8011a9a:	697b      	ldr	r3, [r7, #20]
 8011a9c:	4413      	add	r3, r2
 8011a9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8011aa6:	693b      	ldr	r3, [r7, #16]
 8011aa8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011aac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8011aae:	693b      	ldr	r3, [r7, #16]
 8011ab0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011ab4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8011ab6:	693b      	ldr	r3, [r7, #16]
 8011ab8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8011abc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8011abe:	69bb      	ldr	r3, [r7, #24]
 8011ac0:	015a      	lsls	r2, r3, #5
 8011ac2:	697b      	ldr	r3, [r7, #20]
 8011ac4:	4413      	add	r3, r2
 8011ac6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011aca:	461a      	mov	r2, r3
 8011acc:	693b      	ldr	r3, [r7, #16]
 8011ace:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8011ad0:	69bb      	ldr	r3, [r7, #24]
 8011ad2:	3301      	adds	r3, #1
 8011ad4:	61bb      	str	r3, [r7, #24]
 8011ad6:	69bb      	ldr	r3, [r7, #24]
 8011ad8:	2b0f      	cmp	r3, #15
 8011ada:	d9dc      	bls.n	8011a96 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8011adc:	2300      	movs	r3, #0
 8011ade:	61bb      	str	r3, [r7, #24]
 8011ae0:	e034      	b.n	8011b4c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8011ae2:	69bb      	ldr	r3, [r7, #24]
 8011ae4:	015a      	lsls	r2, r3, #5
 8011ae6:	697b      	ldr	r3, [r7, #20]
 8011ae8:	4413      	add	r3, r2
 8011aea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8011af2:	693b      	ldr	r3, [r7, #16]
 8011af4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011af8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8011afa:	693b      	ldr	r3, [r7, #16]
 8011afc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011b00:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8011b02:	693b      	ldr	r3, [r7, #16]
 8011b04:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8011b08:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8011b0a:	69bb      	ldr	r3, [r7, #24]
 8011b0c:	015a      	lsls	r2, r3, #5
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	4413      	add	r3, r2
 8011b12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011b16:	461a      	mov	r2, r3
 8011b18:	693b      	ldr	r3, [r7, #16]
 8011b1a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	3301      	adds	r3, #1
 8011b20:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011b28:	d80c      	bhi.n	8011b44 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8011b2a:	69bb      	ldr	r3, [r7, #24]
 8011b2c:	015a      	lsls	r2, r3, #5
 8011b2e:	697b      	ldr	r3, [r7, #20]
 8011b30:	4413      	add	r3, r2
 8011b32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011b40:	d0ec      	beq.n	8011b1c <USB_StopHost+0xc8>
 8011b42:	e000      	b.n	8011b46 <USB_StopHost+0xf2>
        break;
 8011b44:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8011b46:	69bb      	ldr	r3, [r7, #24]
 8011b48:	3301      	adds	r3, #1
 8011b4a:	61bb      	str	r3, [r7, #24]
 8011b4c:	69bb      	ldr	r3, [r7, #24]
 8011b4e:	2b0f      	cmp	r3, #15
 8011b50:	d9c7      	bls.n	8011ae2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8011b52:	697b      	ldr	r3, [r7, #20]
 8011b54:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011b58:	461a      	mov	r2, r3
 8011b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8011b5e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	f04f 32ff 	mov.w	r2, #4294967295
 8011b66:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8011b68:	6878      	ldr	r0, [r7, #4]
 8011b6a:	f7ff fce9 	bl	8011540 <USB_EnableGlobalInt>

  return ret;
 8011b6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8011b70:	4618      	mov	r0, r3
 8011b72:	3720      	adds	r7, #32
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd80      	pop	{r7, pc}

08011b78 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011b7c:	4904      	ldr	r1, [pc, #16]	@ (8011b90 <MX_FATFS_Init+0x18>)
 8011b7e:	4805      	ldr	r0, [pc, #20]	@ (8011b94 <MX_FATFS_Init+0x1c>)
 8011b80:	f003 f91e 	bl	8014dc0 <FATFS_LinkDriver>
 8011b84:	4603      	mov	r3, r0
 8011b86:	461a      	mov	r2, r3
 8011b88:	4b03      	ldr	r3, [pc, #12]	@ (8011b98 <MX_FATFS_Init+0x20>)
 8011b8a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011b8c:	bf00      	nop
 8011b8e:	bd80      	pop	{r7, pc}
 8011b90:	200026d4 	.word	0x200026d4
 8011b94:	0801c204 	.word	0x0801c204
 8011b98:	200026d0 	.word	0x200026d0

08011b9c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011b9c:	b480      	push	{r7}
 8011b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011ba0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011baa:	4770      	bx	lr

08011bac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b082      	sub	sp, #8
 8011bb0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011bb6:	f000 f879 	bl	8011cac <BSP_SD_IsDetected>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	2b01      	cmp	r3, #1
 8011bbe:	d001      	beq.n	8011bc4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8011bc0:	2302      	movs	r3, #2
 8011bc2:	e012      	b.n	8011bea <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8011bc4:	480b      	ldr	r0, [pc, #44]	@ (8011bf4 <BSP_SD_Init+0x48>)
 8011bc6:	f7fa feed 	bl	800c9a4 <HAL_SD_Init>
 8011bca:	4603      	mov	r3, r0
 8011bcc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8011bce:	79fb      	ldrb	r3, [r7, #7]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d109      	bne.n	8011be8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8011bd4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8011bd8:	4806      	ldr	r0, [pc, #24]	@ (8011bf4 <BSP_SD_Init+0x48>)
 8011bda:	f7fb fcc7 	bl	800d56c <HAL_SD_ConfigWideBusOperation>
 8011bde:	4603      	mov	r3, r0
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d001      	beq.n	8011be8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011be4:	2301      	movs	r3, #1
 8011be6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011be8:	79fb      	ldrb	r3, [r7, #7]
}
 8011bea:	4618      	mov	r0, r3
 8011bec:	3708      	adds	r7, #8
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	bd80      	pop	{r7, pc}
 8011bf2:	bf00      	nop
 8011bf4:	20001d90 	.word	0x20001d90

08011bf8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b088      	sub	sp, #32
 8011bfc:	af02      	add	r7, sp, #8
 8011bfe:	60f8      	str	r0, [r7, #12]
 8011c00:	60b9      	str	r1, [r7, #8]
 8011c02:	607a      	str	r2, [r7, #4]
 8011c04:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8011c06:	2300      	movs	r3, #0
 8011c08:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8011c0a:	683b      	ldr	r3, [r7, #0]
 8011c0c:	9300      	str	r3, [sp, #0]
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	68ba      	ldr	r2, [r7, #8]
 8011c12:	68f9      	ldr	r1, [r7, #12]
 8011c14:	4806      	ldr	r0, [pc, #24]	@ (8011c30 <BSP_SD_ReadBlocks+0x38>)
 8011c16:	f7fa ff75 	bl	800cb04 <HAL_SD_ReadBlocks>
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d001      	beq.n	8011c24 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8011c20:	2301      	movs	r3, #1
 8011c22:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c26:	4618      	mov	r0, r3
 8011c28:	3718      	adds	r7, #24
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	bd80      	pop	{r7, pc}
 8011c2e:	bf00      	nop
 8011c30:	20001d90 	.word	0x20001d90

08011c34 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b088      	sub	sp, #32
 8011c38:	af02      	add	r7, sp, #8
 8011c3a:	60f8      	str	r0, [r7, #12]
 8011c3c:	60b9      	str	r1, [r7, #8]
 8011c3e:	607a      	str	r2, [r7, #4]
 8011c40:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8011c42:	2300      	movs	r3, #0
 8011c44:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8011c46:	683b      	ldr	r3, [r7, #0]
 8011c48:	9300      	str	r3, [sp, #0]
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	68ba      	ldr	r2, [r7, #8]
 8011c4e:	68f9      	ldr	r1, [r7, #12]
 8011c50:	4806      	ldr	r0, [pc, #24]	@ (8011c6c <BSP_SD_WriteBlocks+0x38>)
 8011c52:	f7fb f935 	bl	800cec0 <HAL_SD_WriteBlocks>
 8011c56:	4603      	mov	r3, r0
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d001      	beq.n	8011c60 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8011c5c:	2301      	movs	r3, #1
 8011c5e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c62:	4618      	mov	r0, r3
 8011c64:	3718      	adds	r7, #24
 8011c66:	46bd      	mov	sp, r7
 8011c68:	bd80      	pop	{r7, pc}
 8011c6a:	bf00      	nop
 8011c6c:	20001d90 	.word	0x20001d90

08011c70 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011c74:	4805      	ldr	r0, [pc, #20]	@ (8011c8c <BSP_SD_GetCardState+0x1c>)
 8011c76:	f7fb fd13 	bl	800d6a0 <HAL_SD_GetCardState>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	2b04      	cmp	r3, #4
 8011c7e:	bf14      	ite	ne
 8011c80:	2301      	movne	r3, #1
 8011c82:	2300      	moveq	r3, #0
 8011c84:	b2db      	uxtb	r3, r3
}
 8011c86:	4618      	mov	r0, r3
 8011c88:	bd80      	pop	{r7, pc}
 8011c8a:	bf00      	nop
 8011c8c:	20001d90 	.word	0x20001d90

08011c90 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b082      	sub	sp, #8
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8011c98:	6879      	ldr	r1, [r7, #4]
 8011c9a:	4803      	ldr	r0, [pc, #12]	@ (8011ca8 <BSP_SD_GetCardInfo+0x18>)
 8011c9c:	f7fb fc3a 	bl	800d514 <HAL_SD_GetCardInfo>
}
 8011ca0:	bf00      	nop
 8011ca2:	3708      	adds	r7, #8
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bd80      	pop	{r7, pc}
 8011ca8:	20001d90 	.word	0x20001d90

08011cac <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b082      	sub	sp, #8
 8011cb0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011cb2:	2301      	movs	r3, #1
 8011cb4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8011cb6:	f000 f80b 	bl	8011cd0 <BSP_PlatformIsDetected>
 8011cba:	4603      	mov	r3, r0
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d101      	bne.n	8011cc4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8011cc4:	79fb      	ldrb	r3, [r7, #7]
 8011cc6:	b2db      	uxtb	r3, r3
}
 8011cc8:	4618      	mov	r0, r3
 8011cca:	3708      	adds	r7, #8
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	bd80      	pop	{r7, pc}

08011cd0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b082      	sub	sp, #8
 8011cd4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8011cd6:	2301      	movs	r3, #1
 8011cd8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011cda:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8011cde:	4806      	ldr	r0, [pc, #24]	@ (8011cf8 <BSP_PlatformIsDetected+0x28>)
 8011ce0:	f7f6 fbac 	bl	800843c <HAL_GPIO_ReadPin>
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d001      	beq.n	8011cee <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8011cea:	2300      	movs	r3, #0
 8011cec:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8011cee:	79fb      	ldrb	r3, [r7, #7]
}
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	3708      	adds	r7, #8
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}
 8011cf8:	40020800 	.word	0x40020800

08011cfc <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8011cfc:	b480      	push	{r7}
 8011cfe:	b087      	sub	sp, #28
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
 8011d04:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8011d06:	683b      	ldr	r3, [r7, #0]
 8011d08:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8011d0e:	2320      	movs	r3, #32
 8011d10:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8011d12:	f3bf 8f4f 	dsb	sy
}
 8011d16:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8011d18:	e00b      	b.n	8011d32 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8011d1a:	4a0d      	ldr	r2, [pc, #52]	@ (8011d50 <SCB_InvalidateDCache_by_Addr+0x54>)
 8011d1c:	693b      	ldr	r3, [r7, #16]
 8011d1e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	693a      	ldr	r2, [r7, #16]
 8011d26:	4413      	add	r3, r2
 8011d28:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8011d2a:	697a      	ldr	r2, [r7, #20]
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	1ad3      	subs	r3, r2, r3
 8011d30:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8011d32:	697b      	ldr	r3, [r7, #20]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	dcf0      	bgt.n	8011d1a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8011d38:	f3bf 8f4f 	dsb	sy
}
 8011d3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011d3e:	f3bf 8f6f 	isb	sy
}
 8011d42:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8011d44:	bf00      	nop
 8011d46:	371c      	adds	r7, #28
 8011d48:	46bd      	mov	sp, r7
 8011d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4e:	4770      	bx	lr
 8011d50:	e000ed00 	.word	0xe000ed00

08011d54 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8011d54:	b480      	push	{r7}
 8011d56:	b087      	sub	sp, #28
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	6078      	str	r0, [r7, #4]
 8011d5c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8011d5e:	683b      	ldr	r3, [r7, #0]
 8011d60:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8011d66:	2320      	movs	r3, #32
 8011d68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8011d6a:	f3bf 8f4f 	dsb	sy
}
 8011d6e:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8011d70:	e00b      	b.n	8011d8a <SCB_CleanDCache_by_Addr+0x36>
      SCB->DCCMVAC = op_addr;
 8011d72:	4a0d      	ldr	r2, [pc, #52]	@ (8011da8 <SCB_CleanDCache_by_Addr+0x54>)
 8011d74:	693b      	ldr	r3, [r7, #16]
 8011d76:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
      op_addr += (uint32_t)linesize;
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	693a      	ldr	r2, [r7, #16]
 8011d7e:	4413      	add	r3, r2
 8011d80:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8011d82:	697a      	ldr	r2, [r7, #20]
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	1ad3      	subs	r3, r2, r3
 8011d88:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8011d8a:	697b      	ldr	r3, [r7, #20]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	dcf0      	bgt.n	8011d72 <SCB_CleanDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8011d90:	f3bf 8f4f 	dsb	sy
}
 8011d94:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011d96:	f3bf 8f6f 	isb	sy
}
 8011d9a:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8011d9c:	bf00      	nop
 8011d9e:	371c      	adds	r7, #28
 8011da0:	46bd      	mov	sp, r7
 8011da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da6:	4770      	bx	lr
 8011da8:	e000ed00 	.word	0xe000ed00

08011dac <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b084      	sub	sp, #16
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8011db4:	f003 f850 	bl	8014e58 <osKernelSysTick>
 8011db8:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8011dba:	e006      	b.n	8011dca <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011dbc:	f7ff ff58 	bl	8011c70 <BSP_SD_GetCardState>
 8011dc0:	4603      	mov	r3, r0
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d101      	bne.n	8011dca <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	e009      	b.n	8011dde <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8011dca:	f003 f845 	bl	8014e58 <osKernelSysTick>
 8011dce:	4602      	mov	r2, r0
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	1ad3      	subs	r3, r2, r3
 8011dd4:	687a      	ldr	r2, [r7, #4]
 8011dd6:	429a      	cmp	r2, r3
 8011dd8:	d8f0      	bhi.n	8011dbc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011dda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011dde:	4618      	mov	r0, r3
 8011de0:	3710      	adds	r7, #16
 8011de2:	46bd      	mov	sp, r7
 8011de4:	bd80      	pop	{r7, pc}
	...

08011de8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b082      	sub	sp, #8
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	4603      	mov	r3, r0
 8011df0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011df2:	4b0b      	ldr	r3, [pc, #44]	@ (8011e20 <SD_CheckStatus+0x38>)
 8011df4:	2201      	movs	r2, #1
 8011df6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011df8:	f7ff ff3a 	bl	8011c70 <BSP_SD_GetCardState>
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d107      	bne.n	8011e12 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011e02:	4b07      	ldr	r3, [pc, #28]	@ (8011e20 <SD_CheckStatus+0x38>)
 8011e04:	781b      	ldrb	r3, [r3, #0]
 8011e06:	b2db      	uxtb	r3, r3
 8011e08:	f023 0301 	bic.w	r3, r3, #1
 8011e0c:	b2da      	uxtb	r2, r3
 8011e0e:	4b04      	ldr	r3, [pc, #16]	@ (8011e20 <SD_CheckStatus+0x38>)
 8011e10:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011e12:	4b03      	ldr	r3, [pc, #12]	@ (8011e20 <SD_CheckStatus+0x38>)
 8011e14:	781b      	ldrb	r3, [r3, #0]
 8011e16:	b2db      	uxtb	r3, r3
}
 8011e18:	4618      	mov	r0, r3
 8011e1a:	3708      	adds	r7, #8
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	bd80      	pop	{r7, pc}
 8011e20:	20000071 	.word	0x20000071

08011e24 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011e24:	b590      	push	{r4, r7, lr}
 8011e26:	b087      	sub	sp, #28
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8011e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8011ea4 <SD_initialize+0x80>)
 8011e30:	2201      	movs	r2, #1
 8011e32:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8011e34:	f003 f804 	bl	8014e40 <osKernelRunning>
 8011e38:	4603      	mov	r3, r0
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d02b      	beq.n	8011e96 <SD_initialize+0x72>
    {
      Stat = SD_CheckStatus(lun);
    }

#else
    Stat = SD_CheckStatus(lun);
 8011e3e:	79fb      	ldrb	r3, [r7, #7]
 8011e40:	4618      	mov	r0, r3
 8011e42:	f7ff ffd1 	bl	8011de8 <SD_CheckStatus>
 8011e46:	4603      	mov	r3, r0
 8011e48:	461a      	mov	r2, r3
 8011e4a:	4b16      	ldr	r3, [pc, #88]	@ (8011ea4 <SD_initialize+0x80>)
 8011e4c:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8011e4e:	4b15      	ldr	r3, [pc, #84]	@ (8011ea4 <SD_initialize+0x80>)
 8011e50:	781b      	ldrb	r3, [r3, #0]
 8011e52:	b2db      	uxtb	r3, r3
 8011e54:	2b01      	cmp	r3, #1
 8011e56:	d01e      	beq.n	8011e96 <SD_initialize+0x72>
    {
      if (SDQueueID == NULL)
 8011e58:	4b13      	ldr	r3, [pc, #76]	@ (8011ea8 <SD_initialize+0x84>)
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d10e      	bne.n	8011e7e <SD_initialize+0x5a>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8011e60:	4b12      	ldr	r3, [pc, #72]	@ (8011eac <SD_initialize+0x88>)
 8011e62:	f107 0408 	add.w	r4, r7, #8
 8011e66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011e68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8011e6c:	f107 0308 	add.w	r3, r7, #8
 8011e70:	2100      	movs	r1, #0
 8011e72:	4618      	mov	r0, r3
 8011e74:	f003 f860 	bl	8014f38 <osMessageCreate>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	4a0b      	ldr	r2, [pc, #44]	@ (8011ea8 <SD_initialize+0x84>)
 8011e7c:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8011e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8011ea8 <SD_initialize+0x84>)
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d107      	bne.n	8011e96 <SD_initialize+0x72>
      {
        Stat |= STA_NOINIT;
 8011e86:	4b07      	ldr	r3, [pc, #28]	@ (8011ea4 <SD_initialize+0x80>)
 8011e88:	781b      	ldrb	r3, [r3, #0]
 8011e8a:	b2db      	uxtb	r3, r3
 8011e8c:	f043 0301 	orr.w	r3, r3, #1
 8011e90:	b2da      	uxtb	r2, r3
 8011e92:	4b04      	ldr	r3, [pc, #16]	@ (8011ea4 <SD_initialize+0x80>)
 8011e94:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8011e96:	4b03      	ldr	r3, [pc, #12]	@ (8011ea4 <SD_initialize+0x80>)
 8011e98:	781b      	ldrb	r3, [r3, #0]
 8011e9a:	b2db      	uxtb	r3, r3
}
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	371c      	adds	r7, #28
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd90      	pop	{r4, r7, pc}
 8011ea4:	20000071 	.word	0x20000071
 8011ea8:	20002b20 	.word	0x20002b20
 8011eac:	0801c188 	.word	0x0801c188

08011eb0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b082      	sub	sp, #8
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011eba:	79fb      	ldrb	r3, [r7, #7]
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	f7ff ff93 	bl	8011de8 <SD_CheckStatus>
 8011ec2:	4603      	mov	r3, r0
}
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	3708      	adds	r7, #8
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	bd80      	pop	{r7, pc}

08011ecc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b08a      	sub	sp, #40	@ 0x28
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	60b9      	str	r1, [r7, #8]
 8011ed4:	607a      	str	r2, [r7, #4]
 8011ed6:	603b      	str	r3, [r7, #0]
 8011ed8:	4603      	mov	r3, r0
 8011eda:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8011edc:	2301      	movs	r3, #1
 8011ede:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011ee2:	f247 5030 	movw	r0, #30000	@ 0x7530
 8011ee6:	f7ff ff61 	bl	8011dac <SD_CheckStatusWithTimeout>
 8011eea:	4603      	mov	r3, r0
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	da02      	bge.n	8011ef6 <SD_read+0x2a>
  {
    return res;
 8011ef0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011ef4:	e051      	b.n	8011f9a <SD_read+0xce>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8011ef6:	68bb      	ldr	r3, [r7, #8]
 8011ef8:	f003 0303 	and.w	r3, r3, #3
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d111      	bne.n	8011f24 <SD_read+0x58>
  {
#endif
    /* Use polling mode instead of DMA to avoid callback issues */
    ret = BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_TIMEOUT);
 8011f00:	f247 5330 	movw	r3, #30000	@ 0x7530
 8011f04:	683a      	ldr	r2, [r7, #0]
 8011f06:	6879      	ldr	r1, [r7, #4]
 8011f08:	68b8      	ldr	r0, [r7, #8]
 8011f0a:	f7ff fe75 	bl	8011bf8 <BSP_SD_ReadBlocks>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (ret == MSD_OK) {
 8011f14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d13c      	bne.n	8011f96 <SD_read+0xca>
      /* Polling mode - no need for message queue */
      res = RES_OK;
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011f22:	e038      	b.n	8011f96 <SD_read+0xca>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++)
 8011f24:	2300      	movs	r3, #0
 8011f26:	623b      	str	r3, [r7, #32]
 8011f28:	e024      	b.n	8011f74 <SD_read+0xa8>
      {
        ret = BSP_SD_ReadBlocks((uint32_t*)scratch, (uint32_t)sector++, 1, SD_TIMEOUT);
 8011f2a:	6879      	ldr	r1, [r7, #4]
 8011f2c:	1c4b      	adds	r3, r1, #1
 8011f2e:	607b      	str	r3, [r7, #4]
 8011f30:	f247 5330 	movw	r3, #30000	@ 0x7530
 8011f34:	2201      	movs	r2, #1
 8011f36:	481b      	ldr	r0, [pc, #108]	@ (8011fa4 <SD_read+0xd8>)
 8011f38:	f7ff fe5e 	bl	8011bf8 <BSP_SD_ReadBlocks>
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (ret == MSD_OK )
 8011f42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d119      	bne.n	8011f7e <SD_read+0xb2>
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
          /*
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
 8011f4a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011f4e:	4815      	ldr	r0, [pc, #84]	@ (8011fa4 <SD_read+0xd8>)
 8011f50:	f7ff fed4 	bl	8011cfc <SCB_InvalidateDCache_by_Addr>
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	4a13      	ldr	r2, [pc, #76]	@ (8011fa4 <SD_read+0xd8>)
 8011f58:	4618      	mov	r0, r3
 8011f5a:	4611      	mov	r1, r2
 8011f5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011f60:	461a      	mov	r2, r3
 8011f62:	f005 fe92 	bl	8017c8a <memcpy>
          buff += BLOCKSIZE;
 8011f66:	68bb      	ldr	r3, [r7, #8]
 8011f68:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8011f6c:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 8011f6e:	6a3b      	ldr	r3, [r7, #32]
 8011f70:	3301      	adds	r3, #1
 8011f72:	623b      	str	r3, [r7, #32]
 8011f74:	6a3b      	ldr	r3, [r7, #32]
 8011f76:	683a      	ldr	r2, [r7, #0]
 8011f78:	429a      	cmp	r2, r3
 8011f7a:	d8d6      	bhi.n	8011f2a <SD_read+0x5e>
 8011f7c:	e000      	b.n	8011f80 <SD_read+0xb4>
        }
        else
        {
          break;
 8011f7e:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK ))
 8011f80:	6a3b      	ldr	r3, [r7, #32]
 8011f82:	683a      	ldr	r2, [r7, #0]
 8011f84:	429a      	cmp	r2, r3
 8011f86:	d106      	bne.n	8011f96 <SD_read+0xca>
 8011f88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d102      	bne.n	8011f96 <SD_read+0xca>
        res = RES_OK;
 8011f90:	2300      	movs	r3, #0
 8011f92:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    }
#endif
  return res;
 8011f96:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
}
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	3728      	adds	r7, #40	@ 0x28
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	bd80      	pop	{r7, pc}
 8011fa2:	bf00      	nop
 8011fa4:	20002920 	.word	0x20002920

08011fa8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b08c      	sub	sp, #48	@ 0x30
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	60b9      	str	r1, [r7, #8]
 8011fb0:	607a      	str	r2, [r7, #4]
 8011fb2:	603b      	str	r3, [r7, #0]
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011fb8:	2301      	movs	r3, #1
 8011fba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011fbe:	f247 5030 	movw	r0, #30000	@ 0x7530
 8011fc2:	f7ff fef3 	bl	8011dac <SD_CheckStatusWithTimeout>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	da02      	bge.n	8011fd2 <SD_write+0x2a>
  {
    return res;
 8011fcc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011fd0:	e082      	b.n	80120d8 <SD_write+0x130>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8011fd2:	68bb      	ldr	r3, [r7, #8]
 8011fd4:	f003 0303 	and.w	r3, r3, #3
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d17b      	bne.n	80120d4 <SD_write+0x12c>
  uint32_t alignedAddr;
  /*
    the SCB_CleanDCache_by_Addr() requires a 32-Byte aligned address
    adjust the address and the D-Cache size to clean accordingly.
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
 8011fdc:	68bb      	ldr	r3, [r7, #8]
 8011fde:	f023 031f 	bic.w	r3, r3, #31
 8011fe2:	623b      	str	r3, [r7, #32]
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 8011fe4:	6a38      	ldr	r0, [r7, #32]
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	025a      	lsls	r2, r3, #9
 8011fea:	68b9      	ldr	r1, [r7, #8]
 8011fec:	6a3b      	ldr	r3, [r7, #32]
 8011fee:	1acb      	subs	r3, r1, r3
 8011ff0:	4413      	add	r3, r2
 8011ff2:	4619      	mov	r1, r3
 8011ff4:	f7ff feae 	bl	8011d54 <SCB_CleanDCache_by_Addr>
#endif

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8011ff8:	f247 5330 	movw	r3, #30000	@ 0x7530
 8011ffc:	683a      	ldr	r2, [r7, #0]
 8011ffe:	6879      	ldr	r1, [r7, #4]
 8012000:	68b8      	ldr	r0, [r7, #8]
 8012002:	f7ff fe17 	bl	8011c34 <BSP_SD_WriteBlocks>
 8012006:	4603      	mov	r3, r0
 8012008:	2b00      	cmp	r3, #0
 801200a:	d103      	bne.n	8012014 <SD_write+0x6c>
                        (uint32_t) (sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
    /* Polling mode - no need for message queue */
    res = RES_OK;
 801200c:	2300      	movs	r3, #0
 801200e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8012012:	e05f      	b.n	80120d4 <SD_write+0x12c>

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
    /*
     * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
     */
     SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
 8012014:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8012018:	4831      	ldr	r0, [pc, #196]	@ (80120e0 <SD_write+0x138>)
 801201a:	f7ff fe6f 	bl	8011cfc <SCB_InvalidateDCache_by_Addr>
#endif
      for (i = 0; i < count; i++)
 801201e:	2300      	movs	r3, #0
 8012020:	627b      	str	r3, [r7, #36]	@ 0x24
 8012022:	e045      	b.n	80120b0 <SD_write+0x108>
      {
        memcpy((void *)scratch, buff, BLOCKSIZE);
 8012024:	4a2e      	ldr	r2, [pc, #184]	@ (80120e0 <SD_write+0x138>)
 8012026:	68bb      	ldr	r3, [r7, #8]
 8012028:	4610      	mov	r0, r2
 801202a:	4619      	mov	r1, r3
 801202c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012030:	461a      	mov	r2, r3
 8012032:	f005 fe2a 	bl	8017c8a <memcpy>
        buff += BLOCKSIZE;
 8012036:	68bb      	ldr	r3, [r7, #8]
 8012038:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801203c:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks((uint32_t*)scratch, (uint32_t)sector++, 1, SD_TIMEOUT);
 801203e:	6879      	ldr	r1, [r7, #4]
 8012040:	1c4b      	adds	r3, r1, #1
 8012042:	607b      	str	r3, [r7, #4]
 8012044:	f247 5330 	movw	r3, #30000	@ 0x7530
 8012048:	2201      	movs	r2, #1
 801204a:	4825      	ldr	r0, [pc, #148]	@ (80120e0 <SD_write+0x138>)
 801204c:	f7ff fdf2 	bl	8011c34 <BSP_SD_WriteBlocks>
 8012050:	4603      	mov	r3, r0
 8012052:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (ret == MSD_OK )
 8012054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012056:	2b00      	cmp	r3, #0
 8012058:	d12f      	bne.n	80120ba <SD_write+0x112>
        {
          /* Polling mode - operation already completed */
#if (osCMSIS < 0x20000U)
          /* wait for a message from the queue or a timeout */
          event = osMessageGet(SDQueueID, SD_TIMEOUT);
 801205a:	4b22      	ldr	r3, [pc, #136]	@ (80120e4 <SD_write+0x13c>)
 801205c:	6819      	ldr	r1, [r3, #0]
 801205e:	f107 0310 	add.w	r3, r7, #16
 8012062:	f247 5230 	movw	r2, #30000	@ 0x7530
 8012066:	4618      	mov	r0, r3
 8012068:	f002 ffce 	bl	8015008 <osMessageGet>

          if (event.status == osEventMessage)
 801206c:	693b      	ldr	r3, [r7, #16]
 801206e:	2b10      	cmp	r3, #16
 8012070:	d11b      	bne.n	80120aa <SD_write+0x102>
          {
            if (event.value.v == READ_CPLT_MSG)
 8012072:	697b      	ldr	r3, [r7, #20]
 8012074:	2b01      	cmp	r3, #1
 8012076:	d118      	bne.n	80120aa <SD_write+0x102>
            {
              timer = osKernelSysTick();
 8012078:	f002 feee 	bl	8014e58 <osKernelSysTick>
 801207c:	61f8      	str	r0, [r7, #28]
              /* block until SDIO IP is ready or a timeout occur */
              while(osKernelSysTick() - timer <SD_TIMEOUT)
 801207e:	e006      	b.n	801208e <SD_write+0xe6>
                /* block until SDIO IP is ready or a timeout occur */
                ret = MSD_ERROR;
                while(osKernelGetTickCount() - timer < SD_TIMEOUT)
#endif
                {
                  ret = BSP_SD_GetCardState();
 8012080:	f7ff fdf6 	bl	8011c70 <BSP_SD_GetCardState>
 8012084:	4603      	mov	r3, r0
 8012086:	62bb      	str	r3, [r7, #40]	@ 0x28

                  if (ret == MSD_OK)
 8012088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801208a:	2b00      	cmp	r3, #0
 801208c:	d009      	beq.n	80120a2 <SD_write+0xfa>
              while(osKernelSysTick() - timer <SD_TIMEOUT)
 801208e:	f002 fee3 	bl	8014e58 <osKernelSysTick>
 8012092:	4602      	mov	r2, r0
 8012094:	69fb      	ldr	r3, [r7, #28]
 8012096:	1ad3      	subs	r3, r2, r3
 8012098:	f247 522f 	movw	r2, #29999	@ 0x752f
 801209c:	4293      	cmp	r3, r2
 801209e:	d9ef      	bls.n	8012080 <SD_write+0xd8>
 80120a0:	e000      	b.n	80120a4 <SD_write+0xfc>
                  {
                    break;
 80120a2:	bf00      	nop
                  }
                }

                if (ret != MSD_OK)
 80120a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d109      	bne.n	80120be <SD_write+0x116>
      for (i = 0; i < count; i++)
 80120aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120ac:	3301      	adds	r3, #1
 80120ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80120b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120b2:	683a      	ldr	r2, [r7, #0]
 80120b4:	429a      	cmp	r2, r3
 80120b6:	d8b5      	bhi.n	8012024 <SD_write+0x7c>
 80120b8:	e002      	b.n	80120c0 <SD_write+0x118>
          }
#endif
        }
        else
        {
          break;
 80120ba:	bf00      	nop
 80120bc:	e000      	b.n	80120c0 <SD_write+0x118>
                  break;
 80120be:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK ))
 80120c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120c2:	683a      	ldr	r2, [r7, #0]
 80120c4:	429a      	cmp	r2, r3
 80120c6:	d105      	bne.n	80120d4 <SD_write+0x12c>
 80120c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d102      	bne.n	80120d4 <SD_write+0x12c>
        res = RES_OK;
 80120ce:	2300      	movs	r3, #0
 80120d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

  }
#endif

  return res;
 80120d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80120d8:	4618      	mov	r0, r3
 80120da:	3730      	adds	r7, #48	@ 0x30
 80120dc:	46bd      	mov	sp, r7
 80120de:	bd80      	pop	{r7, pc}
 80120e0:	20002920 	.word	0x20002920
 80120e4:	20002b20 	.word	0x20002b20

080120e8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b08c      	sub	sp, #48	@ 0x30
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	4603      	mov	r3, r0
 80120f0:	603a      	str	r2, [r7, #0]
 80120f2:	71fb      	strb	r3, [r7, #7]
 80120f4:	460b      	mov	r3, r1
 80120f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80120f8:	2301      	movs	r3, #1
 80120fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80120fe:	4b25      	ldr	r3, [pc, #148]	@ (8012194 <SD_ioctl+0xac>)
 8012100:	781b      	ldrb	r3, [r3, #0]
 8012102:	b2db      	uxtb	r3, r3
 8012104:	f003 0301 	and.w	r3, r3, #1
 8012108:	2b00      	cmp	r3, #0
 801210a:	d001      	beq.n	8012110 <SD_ioctl+0x28>
 801210c:	2303      	movs	r3, #3
 801210e:	e03c      	b.n	801218a <SD_ioctl+0xa2>

  switch (cmd)
 8012110:	79bb      	ldrb	r3, [r7, #6]
 8012112:	2b03      	cmp	r3, #3
 8012114:	d834      	bhi.n	8012180 <SD_ioctl+0x98>
 8012116:	a201      	add	r2, pc, #4	@ (adr r2, 801211c <SD_ioctl+0x34>)
 8012118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801211c:	0801212d 	.word	0x0801212d
 8012120:	08012135 	.word	0x08012135
 8012124:	0801214d 	.word	0x0801214d
 8012128:	08012167 	.word	0x08012167
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801212c:	2300      	movs	r3, #0
 801212e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8012132:	e028      	b.n	8012186 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012134:	f107 030c 	add.w	r3, r7, #12
 8012138:	4618      	mov	r0, r3
 801213a:	f7ff fda9 	bl	8011c90 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801213e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012140:	683b      	ldr	r3, [r7, #0]
 8012142:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012144:	2300      	movs	r3, #0
 8012146:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801214a:	e01c      	b.n	8012186 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801214c:	f107 030c 	add.w	r3, r7, #12
 8012150:	4618      	mov	r0, r3
 8012152:	f7ff fd9d 	bl	8011c90 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012158:	b29a      	uxth	r2, r3
 801215a:	683b      	ldr	r3, [r7, #0]
 801215c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801215e:	2300      	movs	r3, #0
 8012160:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8012164:	e00f      	b.n	8012186 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012166:	f107 030c 	add.w	r3, r7, #12
 801216a:	4618      	mov	r0, r3
 801216c:	f7ff fd90 	bl	8011c90 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012172:	0a5a      	lsrs	r2, r3, #9
 8012174:	683b      	ldr	r3, [r7, #0]
 8012176:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012178:	2300      	movs	r3, #0
 801217a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801217e:	e002      	b.n	8012186 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012180:	2304      	movs	r3, #4
 8012182:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8012186:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801218a:	4618      	mov	r0, r3
 801218c:	3730      	adds	r7, #48	@ 0x30
 801218e:	46bd      	mov	sp, r7
 8012190:	bd80      	pop	{r7, pc}
 8012192:	bf00      	nop
 8012194:	20000071 	.word	0x20000071

08012198 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8012198:	b580      	push	{r7, lr}
 801219a:	b082      	sub	sp, #8
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80121a6:	1c5a      	adds	r2, r3, #1
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80121ae:	6878      	ldr	r0, [r7, #4]
 80121b0:	f000 f804 	bl	80121bc <USBH_HandleSof>
}
 80121b4:	bf00      	nop
 80121b6:	3708      	adds	r7, #8
 80121b8:	46bd      	mov	sp, r7
 80121ba:	bd80      	pop	{r7, pc}

080121bc <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	b082      	sub	sp, #8
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	781b      	ldrb	r3, [r3, #0]
 80121c8:	b2db      	uxtb	r3, r3
 80121ca:	2b0b      	cmp	r3, #11
 80121cc:	d10a      	bne.n	80121e4 <USBH_HandleSof+0x28>
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d005      	beq.n	80121e4 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80121de:	699b      	ldr	r3, [r3, #24]
 80121e0:	6878      	ldr	r0, [r7, #4]
 80121e2:	4798      	blx	r3
  }
}
 80121e4:	bf00      	nop
 80121e6:	3708      	adds	r7, #8
 80121e8:	46bd      	mov	sp, r7
 80121ea:	bd80      	pop	{r7, pc}

080121ec <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80121ec:	b580      	push	{r7, lr}
 80121ee:	b082      	sub	sp, #8
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	2201      	movs	r2, #1
 80121f8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80121fc:	2300      	movs	r3, #0
 80121fe:	2200      	movs	r2, #0
 8012200:	2101      	movs	r1, #1
 8012202:	6878      	ldr	r0, [r7, #4]
 8012204:	f000 f85b 	bl	80122be <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 8012208:	bf00      	nop
}
 801220a:	3708      	adds	r7, #8
 801220c:	46bd      	mov	sp, r7
 801220e:	bd80      	pop	{r7, pc}

08012210 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8012210:	b480      	push	{r7}
 8012212:	b083      	sub	sp, #12
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	2200      	movs	r2, #0
 801221c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	2201      	movs	r2, #1
 8012224:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8012228:	bf00      	nop
}
 801222a:	370c      	adds	r7, #12
 801222c:	46bd      	mov	sp, r7
 801222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012232:	4770      	bx	lr

08012234 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b082      	sub	sp, #8
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	2201      	movs	r2, #1
 8012240:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	2200      	movs	r2, #0
 8012248:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	2200      	movs	r2, #0
 8012250:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012254:	2300      	movs	r3, #0
 8012256:	2200      	movs	r2, #0
 8012258:	2101      	movs	r1, #1
 801225a:	6878      	ldr	r0, [r7, #4]
 801225c:	f000 f82f 	bl	80122be <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8012260:	2300      	movs	r3, #0
}
 8012262:	4618      	mov	r0, r3
 8012264:	3708      	adds	r7, #8
 8012266:	46bd      	mov	sp, r7
 8012268:	bd80      	pop	{r7, pc}

0801226a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 801226a:	b580      	push	{r7, lr}
 801226c:	b082      	sub	sp, #8
 801226e:	af00      	add	r7, sp, #0
 8012270:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	2201      	movs	r2, #1
 8012276:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	2200      	movs	r2, #0
 801227e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	2200      	movs	r2, #0
 8012286:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 801228a:	6878      	ldr	r0, [r7, #4]
 801228c:	f005 f99a 	bl	80175c4 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	791b      	ldrb	r3, [r3, #4]
 8012294:	4619      	mov	r1, r3
 8012296:	6878      	ldr	r0, [r7, #4]
 8012298:	f000 f847 	bl	801232a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	795b      	ldrb	r3, [r3, #5]
 80122a0:	4619      	mov	r1, r3
 80122a2:	6878      	ldr	r0, [r7, #4]
 80122a4:	f000 f841 	bl	801232a <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80122a8:	2300      	movs	r3, #0
 80122aa:	2200      	movs	r2, #0
 80122ac:	2101      	movs	r1, #1
 80122ae:	6878      	ldr	r0, [r7, #4]
 80122b0:	f000 f805 	bl	80122be <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80122b4:	2300      	movs	r3, #0
}
 80122b6:	4618      	mov	r0, r3
 80122b8:	3708      	adds	r7, #8
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bd80      	pop	{r7, pc}

080122be <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 80122be:	b580      	push	{r7, lr}
 80122c0:	b086      	sub	sp, #24
 80122c2:	af00      	add	r7, sp, #0
 80122c4:	60f8      	str	r0, [r7, #12]
 80122c6:	607a      	str	r2, [r7, #4]
 80122c8:	603b      	str	r3, [r7, #0]
 80122ca:	460b      	mov	r3, r1
 80122cc:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 80122ce:	7afa      	ldrb	r2, [r7, #11]
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  UNUSED(priority);

  /* Calculate the number of available spaces */
  uint32_t available_spaces = MSGQUEUE_OBJECTS - osMessageWaiting(phost->os_event);
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 80122dc:	4618      	mov	r0, r3
 80122de:	f002 ff07 	bl	80150f0 <osMessageWaiting>
 80122e2:	4603      	mov	r3, r0
 80122e4:	f1c3 0310 	rsb	r3, r3, #16
 80122e8:	617b      	str	r3, [r7, #20]

  if (available_spaces != 0U)
 80122ea:	697b      	ldr	r3, [r7, #20]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d009      	beq.n	8012304 <USBH_OS_PutMessage+0x46>
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80122fc:	687a      	ldr	r2, [r7, #4]
 80122fe:	4619      	mov	r1, r3
 8012300:	f002 fe42 	bl	8014f88 <osMessagePut>
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
  }
#endif /* (osCMSIS < 0x20000U) */
}
 8012304:	bf00      	nop
 8012306:	3718      	adds	r7, #24
 8012308:	46bd      	mov	sp, r7
 801230a:	bd80      	pop	{r7, pc}

0801230c <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b082      	sub	sp, #8
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012314:	2300      	movs	r3, #0
 8012316:	2200      	movs	r2, #0
 8012318:	2101      	movs	r1, #1
 801231a:	6878      	ldr	r0, [r7, #4]
 801231c:	f7ff ffcf 	bl	80122be <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8012320:	2300      	movs	r3, #0
}
 8012322:	4618      	mov	r0, r3
 8012324:	3708      	adds	r7, #8
 8012326:	46bd      	mov	sp, r7
 8012328:	bd80      	pop	{r7, pc}

0801232a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 801232a:	b480      	push	{r7}
 801232c:	b083      	sub	sp, #12
 801232e:	af00      	add	r7, sp, #0
 8012330:	6078      	str	r0, [r7, #4]
 8012332:	460b      	mov	r3, r1
 8012334:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8012336:	78fb      	ldrb	r3, [r7, #3]
 8012338:	2b0f      	cmp	r3, #15
 801233a:	d80d      	bhi.n	8012358 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801233c:	78fb      	ldrb	r3, [r7, #3]
 801233e:	687a      	ldr	r2, [r7, #4]
 8012340:	33e0      	adds	r3, #224	@ 0xe0
 8012342:	009b      	lsls	r3, r3, #2
 8012344:	4413      	add	r3, r2
 8012346:	685a      	ldr	r2, [r3, #4]
 8012348:	78fb      	ldrb	r3, [r7, #3]
 801234a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 801234e:	6879      	ldr	r1, [r7, #4]
 8012350:	33e0      	adds	r3, #224	@ 0xe0
 8012352:	009b      	lsls	r3, r3, #2
 8012354:	440b      	add	r3, r1
 8012356:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8012358:	2300      	movs	r3, #0
}
 801235a:	4618      	mov	r0, r3
 801235c:	370c      	adds	r7, #12
 801235e:	46bd      	mov	sp, r7
 8012360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012364:	4770      	bx	lr
	...

08012368 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b084      	sub	sp, #16
 801236c:	af00      	add	r7, sp, #0
 801236e:	4603      	mov	r3, r0
 8012370:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012372:	79fb      	ldrb	r3, [r7, #7]
 8012374:	4a08      	ldr	r2, [pc, #32]	@ (8012398 <disk_status+0x30>)
 8012376:	009b      	lsls	r3, r3, #2
 8012378:	4413      	add	r3, r2
 801237a:	685b      	ldr	r3, [r3, #4]
 801237c:	685b      	ldr	r3, [r3, #4]
 801237e:	79fa      	ldrb	r2, [r7, #7]
 8012380:	4905      	ldr	r1, [pc, #20]	@ (8012398 <disk_status+0x30>)
 8012382:	440a      	add	r2, r1
 8012384:	7a12      	ldrb	r2, [r2, #8]
 8012386:	4610      	mov	r0, r2
 8012388:	4798      	blx	r3
 801238a:	4603      	mov	r3, r0
 801238c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801238e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012390:	4618      	mov	r0, r3
 8012392:	3710      	adds	r7, #16
 8012394:	46bd      	mov	sp, r7
 8012396:	bd80      	pop	{r7, pc}
 8012398:	20002b2c 	.word	0x20002b2c

0801239c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b084      	sub	sp, #16
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	4603      	mov	r3, r0
 80123a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80123a6:	2300      	movs	r3, #0
 80123a8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80123aa:	79fb      	ldrb	r3, [r7, #7]
 80123ac:	4a0d      	ldr	r2, [pc, #52]	@ (80123e4 <disk_initialize+0x48>)
 80123ae:	5cd3      	ldrb	r3, [r2, r3]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d111      	bne.n	80123d8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80123b4:	79fb      	ldrb	r3, [r7, #7]
 80123b6:	4a0b      	ldr	r2, [pc, #44]	@ (80123e4 <disk_initialize+0x48>)
 80123b8:	2101      	movs	r1, #1
 80123ba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80123bc:	79fb      	ldrb	r3, [r7, #7]
 80123be:	4a09      	ldr	r2, [pc, #36]	@ (80123e4 <disk_initialize+0x48>)
 80123c0:	009b      	lsls	r3, r3, #2
 80123c2:	4413      	add	r3, r2
 80123c4:	685b      	ldr	r3, [r3, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	79fa      	ldrb	r2, [r7, #7]
 80123ca:	4906      	ldr	r1, [pc, #24]	@ (80123e4 <disk_initialize+0x48>)
 80123cc:	440a      	add	r2, r1
 80123ce:	7a12      	ldrb	r2, [r2, #8]
 80123d0:	4610      	mov	r0, r2
 80123d2:	4798      	blx	r3
 80123d4:	4603      	mov	r3, r0
 80123d6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80123d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80123da:	4618      	mov	r0, r3
 80123dc:	3710      	adds	r7, #16
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}
 80123e2:	bf00      	nop
 80123e4:	20002b2c 	.word	0x20002b2c

080123e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80123e8:	b590      	push	{r4, r7, lr}
 80123ea:	b087      	sub	sp, #28
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	60b9      	str	r1, [r7, #8]
 80123f0:	607a      	str	r2, [r7, #4]
 80123f2:	603b      	str	r3, [r7, #0]
 80123f4:	4603      	mov	r3, r0
 80123f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80123f8:	7bfb      	ldrb	r3, [r7, #15]
 80123fa:	4a0a      	ldr	r2, [pc, #40]	@ (8012424 <disk_read+0x3c>)
 80123fc:	009b      	lsls	r3, r3, #2
 80123fe:	4413      	add	r3, r2
 8012400:	685b      	ldr	r3, [r3, #4]
 8012402:	689c      	ldr	r4, [r3, #8]
 8012404:	7bfb      	ldrb	r3, [r7, #15]
 8012406:	4a07      	ldr	r2, [pc, #28]	@ (8012424 <disk_read+0x3c>)
 8012408:	4413      	add	r3, r2
 801240a:	7a18      	ldrb	r0, [r3, #8]
 801240c:	683b      	ldr	r3, [r7, #0]
 801240e:	687a      	ldr	r2, [r7, #4]
 8012410:	68b9      	ldr	r1, [r7, #8]
 8012412:	47a0      	blx	r4
 8012414:	4603      	mov	r3, r0
 8012416:	75fb      	strb	r3, [r7, #23]
  return res;
 8012418:	7dfb      	ldrb	r3, [r7, #23]
}
 801241a:	4618      	mov	r0, r3
 801241c:	371c      	adds	r7, #28
 801241e:	46bd      	mov	sp, r7
 8012420:	bd90      	pop	{r4, r7, pc}
 8012422:	bf00      	nop
 8012424:	20002b2c 	.word	0x20002b2c

08012428 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012428:	b590      	push	{r4, r7, lr}
 801242a:	b087      	sub	sp, #28
 801242c:	af00      	add	r7, sp, #0
 801242e:	60b9      	str	r1, [r7, #8]
 8012430:	607a      	str	r2, [r7, #4]
 8012432:	603b      	str	r3, [r7, #0]
 8012434:	4603      	mov	r3, r0
 8012436:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012438:	7bfb      	ldrb	r3, [r7, #15]
 801243a:	4a0a      	ldr	r2, [pc, #40]	@ (8012464 <disk_write+0x3c>)
 801243c:	009b      	lsls	r3, r3, #2
 801243e:	4413      	add	r3, r2
 8012440:	685b      	ldr	r3, [r3, #4]
 8012442:	68dc      	ldr	r4, [r3, #12]
 8012444:	7bfb      	ldrb	r3, [r7, #15]
 8012446:	4a07      	ldr	r2, [pc, #28]	@ (8012464 <disk_write+0x3c>)
 8012448:	4413      	add	r3, r2
 801244a:	7a18      	ldrb	r0, [r3, #8]
 801244c:	683b      	ldr	r3, [r7, #0]
 801244e:	687a      	ldr	r2, [r7, #4]
 8012450:	68b9      	ldr	r1, [r7, #8]
 8012452:	47a0      	blx	r4
 8012454:	4603      	mov	r3, r0
 8012456:	75fb      	strb	r3, [r7, #23]
  return res;
 8012458:	7dfb      	ldrb	r3, [r7, #23]
}
 801245a:	4618      	mov	r0, r3
 801245c:	371c      	adds	r7, #28
 801245e:	46bd      	mov	sp, r7
 8012460:	bd90      	pop	{r4, r7, pc}
 8012462:	bf00      	nop
 8012464:	20002b2c 	.word	0x20002b2c

08012468 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012468:	b580      	push	{r7, lr}
 801246a:	b084      	sub	sp, #16
 801246c:	af00      	add	r7, sp, #0
 801246e:	4603      	mov	r3, r0
 8012470:	603a      	str	r2, [r7, #0]
 8012472:	71fb      	strb	r3, [r7, #7]
 8012474:	460b      	mov	r3, r1
 8012476:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012478:	79fb      	ldrb	r3, [r7, #7]
 801247a:	4a09      	ldr	r2, [pc, #36]	@ (80124a0 <disk_ioctl+0x38>)
 801247c:	009b      	lsls	r3, r3, #2
 801247e:	4413      	add	r3, r2
 8012480:	685b      	ldr	r3, [r3, #4]
 8012482:	691b      	ldr	r3, [r3, #16]
 8012484:	79fa      	ldrb	r2, [r7, #7]
 8012486:	4906      	ldr	r1, [pc, #24]	@ (80124a0 <disk_ioctl+0x38>)
 8012488:	440a      	add	r2, r1
 801248a:	7a10      	ldrb	r0, [r2, #8]
 801248c:	79b9      	ldrb	r1, [r7, #6]
 801248e:	683a      	ldr	r2, [r7, #0]
 8012490:	4798      	blx	r3
 8012492:	4603      	mov	r3, r0
 8012494:	73fb      	strb	r3, [r7, #15]
  return res;
 8012496:	7bfb      	ldrb	r3, [r7, #15]
}
 8012498:	4618      	mov	r0, r3
 801249a:	3710      	adds	r7, #16
 801249c:	46bd      	mov	sp, r7
 801249e:	bd80      	pop	{r7, pc}
 80124a0:	20002b2c 	.word	0x20002b2c

080124a4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80124a4:	b480      	push	{r7}
 80124a6:	b085      	sub	sp, #20
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	3301      	adds	r3, #1
 80124b0:	781b      	ldrb	r3, [r3, #0]
 80124b2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80124b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80124b8:	021b      	lsls	r3, r3, #8
 80124ba:	b21a      	sxth	r2, r3
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	781b      	ldrb	r3, [r3, #0]
 80124c0:	b21b      	sxth	r3, r3
 80124c2:	4313      	orrs	r3, r2
 80124c4:	b21b      	sxth	r3, r3
 80124c6:	81fb      	strh	r3, [r7, #14]
	return rv;
 80124c8:	89fb      	ldrh	r3, [r7, #14]
}
 80124ca:	4618      	mov	r0, r3
 80124cc:	3714      	adds	r7, #20
 80124ce:	46bd      	mov	sp, r7
 80124d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d4:	4770      	bx	lr

080124d6 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80124d6:	b480      	push	{r7}
 80124d8:	b085      	sub	sp, #20
 80124da:	af00      	add	r7, sp, #0
 80124dc:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	3303      	adds	r3, #3
 80124e2:	781b      	ldrb	r3, [r3, #0]
 80124e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	021b      	lsls	r3, r3, #8
 80124ea:	687a      	ldr	r2, [r7, #4]
 80124ec:	3202      	adds	r2, #2
 80124ee:	7812      	ldrb	r2, [r2, #0]
 80124f0:	4313      	orrs	r3, r2
 80124f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	021b      	lsls	r3, r3, #8
 80124f8:	687a      	ldr	r2, [r7, #4]
 80124fa:	3201      	adds	r2, #1
 80124fc:	7812      	ldrb	r2, [r2, #0]
 80124fe:	4313      	orrs	r3, r2
 8012500:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	021b      	lsls	r3, r3, #8
 8012506:	687a      	ldr	r2, [r7, #4]
 8012508:	7812      	ldrb	r2, [r2, #0]
 801250a:	4313      	orrs	r3, r2
 801250c:	60fb      	str	r3, [r7, #12]
	return rv;
 801250e:	68fb      	ldr	r3, [r7, #12]
}
 8012510:	4618      	mov	r0, r3
 8012512:	3714      	adds	r7, #20
 8012514:	46bd      	mov	sp, r7
 8012516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251a:	4770      	bx	lr

0801251c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801251c:	b480      	push	{r7}
 801251e:	b083      	sub	sp, #12
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
 8012524:	460b      	mov	r3, r1
 8012526:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	1c5a      	adds	r2, r3, #1
 801252c:	607a      	str	r2, [r7, #4]
 801252e:	887a      	ldrh	r2, [r7, #2]
 8012530:	b2d2      	uxtb	r2, r2
 8012532:	701a      	strb	r2, [r3, #0]
 8012534:	887b      	ldrh	r3, [r7, #2]
 8012536:	0a1b      	lsrs	r3, r3, #8
 8012538:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	1c5a      	adds	r2, r3, #1
 801253e:	607a      	str	r2, [r7, #4]
 8012540:	887a      	ldrh	r2, [r7, #2]
 8012542:	b2d2      	uxtb	r2, r2
 8012544:	701a      	strb	r2, [r3, #0]
}
 8012546:	bf00      	nop
 8012548:	370c      	adds	r7, #12
 801254a:	46bd      	mov	sp, r7
 801254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012550:	4770      	bx	lr

08012552 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012552:	b480      	push	{r7}
 8012554:	b083      	sub	sp, #12
 8012556:	af00      	add	r7, sp, #0
 8012558:	6078      	str	r0, [r7, #4]
 801255a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	1c5a      	adds	r2, r3, #1
 8012560:	607a      	str	r2, [r7, #4]
 8012562:	683a      	ldr	r2, [r7, #0]
 8012564:	b2d2      	uxtb	r2, r2
 8012566:	701a      	strb	r2, [r3, #0]
 8012568:	683b      	ldr	r3, [r7, #0]
 801256a:	0a1b      	lsrs	r3, r3, #8
 801256c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	1c5a      	adds	r2, r3, #1
 8012572:	607a      	str	r2, [r7, #4]
 8012574:	683a      	ldr	r2, [r7, #0]
 8012576:	b2d2      	uxtb	r2, r2
 8012578:	701a      	strb	r2, [r3, #0]
 801257a:	683b      	ldr	r3, [r7, #0]
 801257c:	0a1b      	lsrs	r3, r3, #8
 801257e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	1c5a      	adds	r2, r3, #1
 8012584:	607a      	str	r2, [r7, #4]
 8012586:	683a      	ldr	r2, [r7, #0]
 8012588:	b2d2      	uxtb	r2, r2
 801258a:	701a      	strb	r2, [r3, #0]
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	0a1b      	lsrs	r3, r3, #8
 8012590:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	1c5a      	adds	r2, r3, #1
 8012596:	607a      	str	r2, [r7, #4]
 8012598:	683a      	ldr	r2, [r7, #0]
 801259a:	b2d2      	uxtb	r2, r2
 801259c:	701a      	strb	r2, [r3, #0]
}
 801259e:	bf00      	nop
 80125a0:	370c      	adds	r7, #12
 80125a2:	46bd      	mov	sp, r7
 80125a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a8:	4770      	bx	lr

080125aa <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80125aa:	b480      	push	{r7}
 80125ac:	b087      	sub	sp, #28
 80125ae:	af00      	add	r7, sp, #0
 80125b0:	60f8      	str	r0, [r7, #12]
 80125b2:	60b9      	str	r1, [r7, #8]
 80125b4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d00d      	beq.n	80125e0 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80125c4:	693a      	ldr	r2, [r7, #16]
 80125c6:	1c53      	adds	r3, r2, #1
 80125c8:	613b      	str	r3, [r7, #16]
 80125ca:	697b      	ldr	r3, [r7, #20]
 80125cc:	1c59      	adds	r1, r3, #1
 80125ce:	6179      	str	r1, [r7, #20]
 80125d0:	7812      	ldrb	r2, [r2, #0]
 80125d2:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	3b01      	subs	r3, #1
 80125d8:	607b      	str	r3, [r7, #4]
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d1f1      	bne.n	80125c4 <mem_cpy+0x1a>
	}
}
 80125e0:	bf00      	nop
 80125e2:	371c      	adds	r7, #28
 80125e4:	46bd      	mov	sp, r7
 80125e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ea:	4770      	bx	lr

080125ec <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80125ec:	b480      	push	{r7}
 80125ee:	b087      	sub	sp, #28
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	60f8      	str	r0, [r7, #12]
 80125f4:	60b9      	str	r1, [r7, #8]
 80125f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80125fc:	697b      	ldr	r3, [r7, #20]
 80125fe:	1c5a      	adds	r2, r3, #1
 8012600:	617a      	str	r2, [r7, #20]
 8012602:	68ba      	ldr	r2, [r7, #8]
 8012604:	b2d2      	uxtb	r2, r2
 8012606:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	3b01      	subs	r3, #1
 801260c:	607b      	str	r3, [r7, #4]
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d1f3      	bne.n	80125fc <mem_set+0x10>
}
 8012614:	bf00      	nop
 8012616:	bf00      	nop
 8012618:	371c      	adds	r7, #28
 801261a:	46bd      	mov	sp, r7
 801261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012620:	4770      	bx	lr

08012622 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012622:	b480      	push	{r7}
 8012624:	b089      	sub	sp, #36	@ 0x24
 8012626:	af00      	add	r7, sp, #0
 8012628:	60f8      	str	r0, [r7, #12]
 801262a:	60b9      	str	r1, [r7, #8]
 801262c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	61fb      	str	r3, [r7, #28]
 8012632:	68bb      	ldr	r3, [r7, #8]
 8012634:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012636:	2300      	movs	r3, #0
 8012638:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801263a:	69fb      	ldr	r3, [r7, #28]
 801263c:	1c5a      	adds	r2, r3, #1
 801263e:	61fa      	str	r2, [r7, #28]
 8012640:	781b      	ldrb	r3, [r3, #0]
 8012642:	4619      	mov	r1, r3
 8012644:	69bb      	ldr	r3, [r7, #24]
 8012646:	1c5a      	adds	r2, r3, #1
 8012648:	61ba      	str	r2, [r7, #24]
 801264a:	781b      	ldrb	r3, [r3, #0]
 801264c:	1acb      	subs	r3, r1, r3
 801264e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	3b01      	subs	r3, #1
 8012654:	607b      	str	r3, [r7, #4]
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d002      	beq.n	8012662 <mem_cmp+0x40>
 801265c:	697b      	ldr	r3, [r7, #20]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d0eb      	beq.n	801263a <mem_cmp+0x18>

	return r;
 8012662:	697b      	ldr	r3, [r7, #20]
}
 8012664:	4618      	mov	r0, r3
 8012666:	3724      	adds	r7, #36	@ 0x24
 8012668:	46bd      	mov	sp, r7
 801266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801266e:	4770      	bx	lr

08012670 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8012670:	b480      	push	{r7}
 8012672:	b083      	sub	sp, #12
 8012674:	af00      	add	r7, sp, #0
 8012676:	6078      	str	r0, [r7, #4]
 8012678:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801267a:	e002      	b.n	8012682 <chk_chr+0x12>
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	3301      	adds	r3, #1
 8012680:	607b      	str	r3, [r7, #4]
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	781b      	ldrb	r3, [r3, #0]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d005      	beq.n	8012696 <chk_chr+0x26>
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	781b      	ldrb	r3, [r3, #0]
 801268e:	461a      	mov	r2, r3
 8012690:	683b      	ldr	r3, [r7, #0]
 8012692:	4293      	cmp	r3, r2
 8012694:	d1f2      	bne.n	801267c <chk_chr+0xc>
	return *str;
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	781b      	ldrb	r3, [r3, #0]
}
 801269a:	4618      	mov	r0, r3
 801269c:	370c      	adds	r7, #12
 801269e:	46bd      	mov	sp, r7
 80126a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a4:	4770      	bx	lr

080126a6 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80126a6:	b580      	push	{r7, lr}
 80126a8:	b086      	sub	sp, #24
 80126aa:	af00      	add	r7, sp, #0
 80126ac:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80126ae:	2300      	movs	r3, #0
 80126b0:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	78db      	ldrb	r3, [r3, #3]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d034      	beq.n	8012724 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80126be:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	7858      	ldrb	r0, [r3, #1]
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80126ca:	2301      	movs	r3, #1
 80126cc:	697a      	ldr	r2, [r7, #20]
 80126ce:	f7ff feab 	bl	8012428 <disk_write>
 80126d2:	4603      	mov	r3, r0
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d002      	beq.n	80126de <sync_window+0x38>
			res = FR_DISK_ERR;
 80126d8:	2301      	movs	r3, #1
 80126da:	73fb      	strb	r3, [r7, #15]
 80126dc:	e022      	b.n	8012724 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	2200      	movs	r2, #0
 80126e2:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	6a1b      	ldr	r3, [r3, #32]
 80126e8:	697a      	ldr	r2, [r7, #20]
 80126ea:	1ad2      	subs	r2, r2, r3
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	699b      	ldr	r3, [r3, #24]
 80126f0:	429a      	cmp	r2, r3
 80126f2:	d217      	bcs.n	8012724 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	789b      	ldrb	r3, [r3, #2]
 80126f8:	613b      	str	r3, [r7, #16]
 80126fa:	e010      	b.n	801271e <sync_window+0x78>
					wsect += fs->fsize;
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	699b      	ldr	r3, [r3, #24]
 8012700:	697a      	ldr	r2, [r7, #20]
 8012702:	4413      	add	r3, r2
 8012704:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	7858      	ldrb	r0, [r3, #1]
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012710:	2301      	movs	r3, #1
 8012712:	697a      	ldr	r2, [r7, #20]
 8012714:	f7ff fe88 	bl	8012428 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012718:	693b      	ldr	r3, [r7, #16]
 801271a:	3b01      	subs	r3, #1
 801271c:	613b      	str	r3, [r7, #16]
 801271e:	693b      	ldr	r3, [r7, #16]
 8012720:	2b01      	cmp	r3, #1
 8012722:	d8eb      	bhi.n	80126fc <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8012724:	7bfb      	ldrb	r3, [r7, #15]
}
 8012726:	4618      	mov	r0, r3
 8012728:	3718      	adds	r7, #24
 801272a:	46bd      	mov	sp, r7
 801272c:	bd80      	pop	{r7, pc}

0801272e <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801272e:	b580      	push	{r7, lr}
 8012730:	b084      	sub	sp, #16
 8012732:	af00      	add	r7, sp, #0
 8012734:	6078      	str	r0, [r7, #4]
 8012736:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012738:	2300      	movs	r3, #0
 801273a:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012740:	683a      	ldr	r2, [r7, #0]
 8012742:	429a      	cmp	r2, r3
 8012744:	d01b      	beq.n	801277e <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012746:	6878      	ldr	r0, [r7, #4]
 8012748:	f7ff ffad 	bl	80126a6 <sync_window>
 801274c:	4603      	mov	r3, r0
 801274e:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8012750:	7bfb      	ldrb	r3, [r7, #15]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d113      	bne.n	801277e <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	7858      	ldrb	r0, [r3, #1]
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012760:	2301      	movs	r3, #1
 8012762:	683a      	ldr	r2, [r7, #0]
 8012764:	f7ff fe40 	bl	80123e8 <disk_read>
 8012768:	4603      	mov	r3, r0
 801276a:	2b00      	cmp	r3, #0
 801276c:	d004      	beq.n	8012778 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801276e:	f04f 33ff 	mov.w	r3, #4294967295
 8012772:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8012774:	2301      	movs	r3, #1
 8012776:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	683a      	ldr	r2, [r7, #0]
 801277c:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 801277e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012780:	4618      	mov	r0, r3
 8012782:	3710      	adds	r7, #16
 8012784:	46bd      	mov	sp, r7
 8012786:	bd80      	pop	{r7, pc}

08012788 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b084      	sub	sp, #16
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012790:	6878      	ldr	r0, [r7, #4]
 8012792:	f7ff ff88 	bl	80126a6 <sync_window>
 8012796:	4603      	mov	r3, r0
 8012798:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801279a:	7bfb      	ldrb	r3, [r7, #15]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d158      	bne.n	8012852 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	781b      	ldrb	r3, [r3, #0]
 80127a4:	2b03      	cmp	r3, #3
 80127a6:	d148      	bne.n	801283a <sync_fs+0xb2>
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	791b      	ldrb	r3, [r3, #4]
 80127ac:	2b01      	cmp	r3, #1
 80127ae:	d144      	bne.n	801283a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	3330      	adds	r3, #48	@ 0x30
 80127b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80127b8:	2100      	movs	r1, #0
 80127ba:	4618      	mov	r0, r3
 80127bc:	f7ff ff16 	bl	80125ec <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	3330      	adds	r3, #48	@ 0x30
 80127c4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80127c8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80127cc:	4618      	mov	r0, r3
 80127ce:	f7ff fea5 	bl	801251c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	3330      	adds	r3, #48	@ 0x30
 80127d6:	4921      	ldr	r1, [pc, #132]	@ (801285c <sync_fs+0xd4>)
 80127d8:	4618      	mov	r0, r3
 80127da:	f7ff feba 	bl	8012552 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	3330      	adds	r3, #48	@ 0x30
 80127e2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80127e6:	491e      	ldr	r1, [pc, #120]	@ (8012860 <sync_fs+0xd8>)
 80127e8:	4618      	mov	r0, r3
 80127ea:	f7ff feb2 	bl	8012552 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	3330      	adds	r3, #48	@ 0x30
 80127f2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	691b      	ldr	r3, [r3, #16]
 80127fa:	4619      	mov	r1, r3
 80127fc:	4610      	mov	r0, r2
 80127fe:	f7ff fea8 	bl	8012552 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	3330      	adds	r3, #48	@ 0x30
 8012806:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	68db      	ldr	r3, [r3, #12]
 801280e:	4619      	mov	r1, r3
 8012810:	4610      	mov	r0, r2
 8012812:	f7ff fe9e 	bl	8012552 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	69db      	ldr	r3, [r3, #28]
 801281a:	1c5a      	adds	r2, r3, #1
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	7858      	ldrb	r0, [r3, #1]
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801282e:	2301      	movs	r3, #1
 8012830:	f7ff fdfa 	bl	8012428 <disk_write>
			fs->fsi_flag = 0;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	2200      	movs	r2, #0
 8012838:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	785b      	ldrb	r3, [r3, #1]
 801283e:	2200      	movs	r2, #0
 8012840:	2100      	movs	r1, #0
 8012842:	4618      	mov	r0, r3
 8012844:	f7ff fe10 	bl	8012468 <disk_ioctl>
 8012848:	4603      	mov	r3, r0
 801284a:	2b00      	cmp	r3, #0
 801284c:	d001      	beq.n	8012852 <sync_fs+0xca>
 801284e:	2301      	movs	r3, #1
 8012850:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012852:	7bfb      	ldrb	r3, [r7, #15]
}
 8012854:	4618      	mov	r0, r3
 8012856:	3710      	adds	r7, #16
 8012858:	46bd      	mov	sp, r7
 801285a:	bd80      	pop	{r7, pc}
 801285c:	41615252 	.word	0x41615252
 8012860:	61417272 	.word	0x61417272

08012864 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012864:	b480      	push	{r7}
 8012866:	b083      	sub	sp, #12
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
 801286c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801286e:	683b      	ldr	r3, [r7, #0]
 8012870:	3b02      	subs	r3, #2
 8012872:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	695b      	ldr	r3, [r3, #20]
 8012878:	3b02      	subs	r3, #2
 801287a:	683a      	ldr	r2, [r7, #0]
 801287c:	429a      	cmp	r2, r3
 801287e:	d301      	bcc.n	8012884 <clust2sect+0x20>
 8012880:	2300      	movs	r3, #0
 8012882:	e008      	b.n	8012896 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	895b      	ldrh	r3, [r3, #10]
 8012888:	461a      	mov	r2, r3
 801288a:	683b      	ldr	r3, [r7, #0]
 801288c:	fb03 f202 	mul.w	r2, r3, r2
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012894:	4413      	add	r3, r2
}
 8012896:	4618      	mov	r0, r3
 8012898:	370c      	adds	r7, #12
 801289a:	46bd      	mov	sp, r7
 801289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a0:	4770      	bx	lr

080128a2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80128a2:	b580      	push	{r7, lr}
 80128a4:	b086      	sub	sp, #24
 80128a6:	af00      	add	r7, sp, #0
 80128a8:	6078      	str	r0, [r7, #4]
 80128aa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80128b2:	683b      	ldr	r3, [r7, #0]
 80128b4:	2b01      	cmp	r3, #1
 80128b6:	d904      	bls.n	80128c2 <get_fat+0x20>
 80128b8:	693b      	ldr	r3, [r7, #16]
 80128ba:	695b      	ldr	r3, [r3, #20]
 80128bc:	683a      	ldr	r2, [r7, #0]
 80128be:	429a      	cmp	r2, r3
 80128c0:	d302      	bcc.n	80128c8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80128c2:	2301      	movs	r3, #1
 80128c4:	617b      	str	r3, [r7, #20]
 80128c6:	e08e      	b.n	80129e6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80128c8:	f04f 33ff 	mov.w	r3, #4294967295
 80128cc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80128ce:	693b      	ldr	r3, [r7, #16]
 80128d0:	781b      	ldrb	r3, [r3, #0]
 80128d2:	2b03      	cmp	r3, #3
 80128d4:	d061      	beq.n	801299a <get_fat+0xf8>
 80128d6:	2b03      	cmp	r3, #3
 80128d8:	dc7b      	bgt.n	80129d2 <get_fat+0x130>
 80128da:	2b01      	cmp	r3, #1
 80128dc:	d002      	beq.n	80128e4 <get_fat+0x42>
 80128de:	2b02      	cmp	r3, #2
 80128e0:	d041      	beq.n	8012966 <get_fat+0xc4>
 80128e2:	e076      	b.n	80129d2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80128e4:	683b      	ldr	r3, [r7, #0]
 80128e6:	60fb      	str	r3, [r7, #12]
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	085b      	lsrs	r3, r3, #1
 80128ec:	68fa      	ldr	r2, [r7, #12]
 80128ee:	4413      	add	r3, r2
 80128f0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80128f2:	693b      	ldr	r3, [r7, #16]
 80128f4:	6a1a      	ldr	r2, [r3, #32]
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	0a5b      	lsrs	r3, r3, #9
 80128fa:	4413      	add	r3, r2
 80128fc:	4619      	mov	r1, r3
 80128fe:	6938      	ldr	r0, [r7, #16]
 8012900:	f7ff ff15 	bl	801272e <move_window>
 8012904:	4603      	mov	r3, r0
 8012906:	2b00      	cmp	r3, #0
 8012908:	d166      	bne.n	80129d8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	1c5a      	adds	r2, r3, #1
 801290e:	60fa      	str	r2, [r7, #12]
 8012910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012914:	693a      	ldr	r2, [r7, #16]
 8012916:	4413      	add	r3, r2
 8012918:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801291c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801291e:	693b      	ldr	r3, [r7, #16]
 8012920:	6a1a      	ldr	r2, [r3, #32]
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	0a5b      	lsrs	r3, r3, #9
 8012926:	4413      	add	r3, r2
 8012928:	4619      	mov	r1, r3
 801292a:	6938      	ldr	r0, [r7, #16]
 801292c:	f7ff feff 	bl	801272e <move_window>
 8012930:	4603      	mov	r3, r0
 8012932:	2b00      	cmp	r3, #0
 8012934:	d152      	bne.n	80129dc <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801293c:	693a      	ldr	r2, [r7, #16]
 801293e:	4413      	add	r3, r2
 8012940:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012944:	021b      	lsls	r3, r3, #8
 8012946:	68ba      	ldr	r2, [r7, #8]
 8012948:	4313      	orrs	r3, r2
 801294a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801294c:	683b      	ldr	r3, [r7, #0]
 801294e:	f003 0301 	and.w	r3, r3, #1
 8012952:	2b00      	cmp	r3, #0
 8012954:	d002      	beq.n	801295c <get_fat+0xba>
 8012956:	68bb      	ldr	r3, [r7, #8]
 8012958:	091b      	lsrs	r3, r3, #4
 801295a:	e002      	b.n	8012962 <get_fat+0xc0>
 801295c:	68bb      	ldr	r3, [r7, #8]
 801295e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012962:	617b      	str	r3, [r7, #20]
			break;
 8012964:	e03f      	b.n	80129e6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012966:	693b      	ldr	r3, [r7, #16]
 8012968:	6a1a      	ldr	r2, [r3, #32]
 801296a:	683b      	ldr	r3, [r7, #0]
 801296c:	0a1b      	lsrs	r3, r3, #8
 801296e:	4413      	add	r3, r2
 8012970:	4619      	mov	r1, r3
 8012972:	6938      	ldr	r0, [r7, #16]
 8012974:	f7ff fedb 	bl	801272e <move_window>
 8012978:	4603      	mov	r3, r0
 801297a:	2b00      	cmp	r3, #0
 801297c:	d130      	bne.n	80129e0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801297e:	693b      	ldr	r3, [r7, #16]
 8012980:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012984:	683b      	ldr	r3, [r7, #0]
 8012986:	005b      	lsls	r3, r3, #1
 8012988:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801298c:	4413      	add	r3, r2
 801298e:	4618      	mov	r0, r3
 8012990:	f7ff fd88 	bl	80124a4 <ld_word>
 8012994:	4603      	mov	r3, r0
 8012996:	617b      	str	r3, [r7, #20]
			break;
 8012998:	e025      	b.n	80129e6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801299a:	693b      	ldr	r3, [r7, #16]
 801299c:	6a1a      	ldr	r2, [r3, #32]
 801299e:	683b      	ldr	r3, [r7, #0]
 80129a0:	09db      	lsrs	r3, r3, #7
 80129a2:	4413      	add	r3, r2
 80129a4:	4619      	mov	r1, r3
 80129a6:	6938      	ldr	r0, [r7, #16]
 80129a8:	f7ff fec1 	bl	801272e <move_window>
 80129ac:	4603      	mov	r3, r0
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d118      	bne.n	80129e4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80129b2:	693b      	ldr	r3, [r7, #16]
 80129b4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80129b8:	683b      	ldr	r3, [r7, #0]
 80129ba:	009b      	lsls	r3, r3, #2
 80129bc:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80129c0:	4413      	add	r3, r2
 80129c2:	4618      	mov	r0, r3
 80129c4:	f7ff fd87 	bl	80124d6 <ld_dword>
 80129c8:	4603      	mov	r3, r0
 80129ca:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80129ce:	617b      	str	r3, [r7, #20]
			break;
 80129d0:	e009      	b.n	80129e6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80129d2:	2301      	movs	r3, #1
 80129d4:	617b      	str	r3, [r7, #20]
 80129d6:	e006      	b.n	80129e6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80129d8:	bf00      	nop
 80129da:	e004      	b.n	80129e6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80129dc:	bf00      	nop
 80129de:	e002      	b.n	80129e6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80129e0:	bf00      	nop
 80129e2:	e000      	b.n	80129e6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80129e4:	bf00      	nop
		}
	}

	return val;
 80129e6:	697b      	ldr	r3, [r7, #20]
}
 80129e8:	4618      	mov	r0, r3
 80129ea:	3718      	adds	r7, #24
 80129ec:	46bd      	mov	sp, r7
 80129ee:	bd80      	pop	{r7, pc}

080129f0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80129f0:	b590      	push	{r4, r7, lr}
 80129f2:	b089      	sub	sp, #36	@ 0x24
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	60f8      	str	r0, [r7, #12]
 80129f8:	60b9      	str	r1, [r7, #8]
 80129fa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80129fc:	2302      	movs	r3, #2
 80129fe:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012a00:	68bb      	ldr	r3, [r7, #8]
 8012a02:	2b01      	cmp	r3, #1
 8012a04:	f240 80d9 	bls.w	8012bba <put_fat+0x1ca>
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	695b      	ldr	r3, [r3, #20]
 8012a0c:	68ba      	ldr	r2, [r7, #8]
 8012a0e:	429a      	cmp	r2, r3
 8012a10:	f080 80d3 	bcs.w	8012bba <put_fat+0x1ca>
		switch (fs->fs_type) {
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	781b      	ldrb	r3, [r3, #0]
 8012a18:	2b03      	cmp	r3, #3
 8012a1a:	f000 8096 	beq.w	8012b4a <put_fat+0x15a>
 8012a1e:	2b03      	cmp	r3, #3
 8012a20:	f300 80cb 	bgt.w	8012bba <put_fat+0x1ca>
 8012a24:	2b01      	cmp	r3, #1
 8012a26:	d002      	beq.n	8012a2e <put_fat+0x3e>
 8012a28:	2b02      	cmp	r3, #2
 8012a2a:	d06e      	beq.n	8012b0a <put_fat+0x11a>
 8012a2c:	e0c5      	b.n	8012bba <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012a2e:	68bb      	ldr	r3, [r7, #8]
 8012a30:	61bb      	str	r3, [r7, #24]
 8012a32:	69bb      	ldr	r3, [r7, #24]
 8012a34:	085b      	lsrs	r3, r3, #1
 8012a36:	69ba      	ldr	r2, [r7, #24]
 8012a38:	4413      	add	r3, r2
 8012a3a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	6a1a      	ldr	r2, [r3, #32]
 8012a40:	69bb      	ldr	r3, [r7, #24]
 8012a42:	0a5b      	lsrs	r3, r3, #9
 8012a44:	4413      	add	r3, r2
 8012a46:	4619      	mov	r1, r3
 8012a48:	68f8      	ldr	r0, [r7, #12]
 8012a4a:	f7ff fe70 	bl	801272e <move_window>
 8012a4e:	4603      	mov	r3, r0
 8012a50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012a52:	7ffb      	ldrb	r3, [r7, #31]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	f040 80a9 	bne.w	8012bac <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012a60:	69bb      	ldr	r3, [r7, #24]
 8012a62:	1c59      	adds	r1, r3, #1
 8012a64:	61b9      	str	r1, [r7, #24]
 8012a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a6a:	4413      	add	r3, r2
 8012a6c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012a6e:	68bb      	ldr	r3, [r7, #8]
 8012a70:	f003 0301 	and.w	r3, r3, #1
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d00d      	beq.n	8012a94 <put_fat+0xa4>
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	781b      	ldrb	r3, [r3, #0]
 8012a7c:	b25b      	sxtb	r3, r3
 8012a7e:	f003 030f 	and.w	r3, r3, #15
 8012a82:	b25a      	sxtb	r2, r3
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	b25b      	sxtb	r3, r3
 8012a88:	011b      	lsls	r3, r3, #4
 8012a8a:	b25b      	sxtb	r3, r3
 8012a8c:	4313      	orrs	r3, r2
 8012a8e:	b25b      	sxtb	r3, r3
 8012a90:	b2db      	uxtb	r3, r3
 8012a92:	e001      	b.n	8012a98 <put_fat+0xa8>
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	b2db      	uxtb	r3, r3
 8012a98:	697a      	ldr	r2, [r7, #20]
 8012a9a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	2201      	movs	r2, #1
 8012aa0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	6a1a      	ldr	r2, [r3, #32]
 8012aa6:	69bb      	ldr	r3, [r7, #24]
 8012aa8:	0a5b      	lsrs	r3, r3, #9
 8012aaa:	4413      	add	r3, r2
 8012aac:	4619      	mov	r1, r3
 8012aae:	68f8      	ldr	r0, [r7, #12]
 8012ab0:	f7ff fe3d 	bl	801272e <move_window>
 8012ab4:	4603      	mov	r3, r0
 8012ab6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012ab8:	7ffb      	ldrb	r3, [r7, #31]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d178      	bne.n	8012bb0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012ac4:	69bb      	ldr	r3, [r7, #24]
 8012ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012aca:	4413      	add	r3, r2
 8012acc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012ace:	68bb      	ldr	r3, [r7, #8]
 8012ad0:	f003 0301 	and.w	r3, r3, #1
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d003      	beq.n	8012ae0 <put_fat+0xf0>
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	091b      	lsrs	r3, r3, #4
 8012adc:	b2db      	uxtb	r3, r3
 8012ade:	e00e      	b.n	8012afe <put_fat+0x10e>
 8012ae0:	697b      	ldr	r3, [r7, #20]
 8012ae2:	781b      	ldrb	r3, [r3, #0]
 8012ae4:	b25b      	sxtb	r3, r3
 8012ae6:	f023 030f 	bic.w	r3, r3, #15
 8012aea:	b25a      	sxtb	r2, r3
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	0a1b      	lsrs	r3, r3, #8
 8012af0:	b25b      	sxtb	r3, r3
 8012af2:	f003 030f 	and.w	r3, r3, #15
 8012af6:	b25b      	sxtb	r3, r3
 8012af8:	4313      	orrs	r3, r2
 8012afa:	b25b      	sxtb	r3, r3
 8012afc:	b2db      	uxtb	r3, r3
 8012afe:	697a      	ldr	r2, [r7, #20]
 8012b00:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	2201      	movs	r2, #1
 8012b06:	70da      	strb	r2, [r3, #3]
			break;
 8012b08:	e057      	b.n	8012bba <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	6a1a      	ldr	r2, [r3, #32]
 8012b0e:	68bb      	ldr	r3, [r7, #8]
 8012b10:	0a1b      	lsrs	r3, r3, #8
 8012b12:	4413      	add	r3, r2
 8012b14:	4619      	mov	r1, r3
 8012b16:	68f8      	ldr	r0, [r7, #12]
 8012b18:	f7ff fe09 	bl	801272e <move_window>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012b20:	7ffb      	ldrb	r3, [r7, #31]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d146      	bne.n	8012bb4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012b2c:	68bb      	ldr	r3, [r7, #8]
 8012b2e:	005b      	lsls	r3, r3, #1
 8012b30:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8012b34:	4413      	add	r3, r2
 8012b36:	687a      	ldr	r2, [r7, #4]
 8012b38:	b292      	uxth	r2, r2
 8012b3a:	4611      	mov	r1, r2
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f7ff fced 	bl	801251c <st_word>
			fs->wflag = 1;
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	2201      	movs	r2, #1
 8012b46:	70da      	strb	r2, [r3, #3]
			break;
 8012b48:	e037      	b.n	8012bba <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	6a1a      	ldr	r2, [r3, #32]
 8012b4e:	68bb      	ldr	r3, [r7, #8]
 8012b50:	09db      	lsrs	r3, r3, #7
 8012b52:	4413      	add	r3, r2
 8012b54:	4619      	mov	r1, r3
 8012b56:	68f8      	ldr	r0, [r7, #12]
 8012b58:	f7ff fde9 	bl	801272e <move_window>
 8012b5c:	4603      	mov	r3, r0
 8012b5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012b60:	7ffb      	ldrb	r3, [r7, #31]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d128      	bne.n	8012bb8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012b72:	68bb      	ldr	r3, [r7, #8]
 8012b74:	009b      	lsls	r3, r3, #2
 8012b76:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012b7a:	4413      	add	r3, r2
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f7ff fcaa 	bl	80124d6 <ld_dword>
 8012b82:	4603      	mov	r3, r0
 8012b84:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8012b88:	4323      	orrs	r3, r4
 8012b8a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012b92:	68bb      	ldr	r3, [r7, #8]
 8012b94:	009b      	lsls	r3, r3, #2
 8012b96:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012b9a:	4413      	add	r3, r2
 8012b9c:	6879      	ldr	r1, [r7, #4]
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	f7ff fcd7 	bl	8012552 <st_dword>
			fs->wflag = 1;
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	2201      	movs	r2, #1
 8012ba8:	70da      	strb	r2, [r3, #3]
			break;
 8012baa:	e006      	b.n	8012bba <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012bac:	bf00      	nop
 8012bae:	e004      	b.n	8012bba <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012bb0:	bf00      	nop
 8012bb2:	e002      	b.n	8012bba <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012bb4:	bf00      	nop
 8012bb6:	e000      	b.n	8012bba <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012bb8:	bf00      	nop
		}
	}
	return res;
 8012bba:	7ffb      	ldrb	r3, [r7, #31]
}
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	3724      	adds	r7, #36	@ 0x24
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	bd90      	pop	{r4, r7, pc}

08012bc4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b088      	sub	sp, #32
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	60f8      	str	r0, [r7, #12]
 8012bcc:	60b9      	str	r1, [r7, #8]
 8012bce:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012bda:	68bb      	ldr	r3, [r7, #8]
 8012bdc:	2b01      	cmp	r3, #1
 8012bde:	d904      	bls.n	8012bea <remove_chain+0x26>
 8012be0:	69bb      	ldr	r3, [r7, #24]
 8012be2:	695b      	ldr	r3, [r3, #20]
 8012be4:	68ba      	ldr	r2, [r7, #8]
 8012be6:	429a      	cmp	r2, r3
 8012be8:	d301      	bcc.n	8012bee <remove_chain+0x2a>
 8012bea:	2302      	movs	r3, #2
 8012bec:	e04b      	b.n	8012c86 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d00c      	beq.n	8012c0e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8012bf8:	6879      	ldr	r1, [r7, #4]
 8012bfa:	69b8      	ldr	r0, [r7, #24]
 8012bfc:	f7ff fef8 	bl	80129f0 <put_fat>
 8012c00:	4603      	mov	r3, r0
 8012c02:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012c04:	7ffb      	ldrb	r3, [r7, #31]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d001      	beq.n	8012c0e <remove_chain+0x4a>
 8012c0a:	7ffb      	ldrb	r3, [r7, #31]
 8012c0c:	e03b      	b.n	8012c86 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012c0e:	68b9      	ldr	r1, [r7, #8]
 8012c10:	68f8      	ldr	r0, [r7, #12]
 8012c12:	f7ff fe46 	bl	80128a2 <get_fat>
 8012c16:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012c18:	697b      	ldr	r3, [r7, #20]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d031      	beq.n	8012c82 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012c1e:	697b      	ldr	r3, [r7, #20]
 8012c20:	2b01      	cmp	r3, #1
 8012c22:	d101      	bne.n	8012c28 <remove_chain+0x64>
 8012c24:	2302      	movs	r3, #2
 8012c26:	e02e      	b.n	8012c86 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012c28:	697b      	ldr	r3, [r7, #20]
 8012c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c2e:	d101      	bne.n	8012c34 <remove_chain+0x70>
 8012c30:	2301      	movs	r3, #1
 8012c32:	e028      	b.n	8012c86 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012c34:	2200      	movs	r2, #0
 8012c36:	68b9      	ldr	r1, [r7, #8]
 8012c38:	69b8      	ldr	r0, [r7, #24]
 8012c3a:	f7ff fed9 	bl	80129f0 <put_fat>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012c42:	7ffb      	ldrb	r3, [r7, #31]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d001      	beq.n	8012c4c <remove_chain+0x88>
 8012c48:	7ffb      	ldrb	r3, [r7, #31]
 8012c4a:	e01c      	b.n	8012c86 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012c4c:	69bb      	ldr	r3, [r7, #24]
 8012c4e:	691a      	ldr	r2, [r3, #16]
 8012c50:	69bb      	ldr	r3, [r7, #24]
 8012c52:	695b      	ldr	r3, [r3, #20]
 8012c54:	3b02      	subs	r3, #2
 8012c56:	429a      	cmp	r2, r3
 8012c58:	d20b      	bcs.n	8012c72 <remove_chain+0xae>
			fs->free_clst++;
 8012c5a:	69bb      	ldr	r3, [r7, #24]
 8012c5c:	691b      	ldr	r3, [r3, #16]
 8012c5e:	1c5a      	adds	r2, r3, #1
 8012c60:	69bb      	ldr	r3, [r7, #24]
 8012c62:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8012c64:	69bb      	ldr	r3, [r7, #24]
 8012c66:	791b      	ldrb	r3, [r3, #4]
 8012c68:	f043 0301 	orr.w	r3, r3, #1
 8012c6c:	b2da      	uxtb	r2, r3
 8012c6e:	69bb      	ldr	r3, [r7, #24]
 8012c70:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012c72:	697b      	ldr	r3, [r7, #20]
 8012c74:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012c76:	69bb      	ldr	r3, [r7, #24]
 8012c78:	695b      	ldr	r3, [r3, #20]
 8012c7a:	68ba      	ldr	r2, [r7, #8]
 8012c7c:	429a      	cmp	r2, r3
 8012c7e:	d3c6      	bcc.n	8012c0e <remove_chain+0x4a>
 8012c80:	e000      	b.n	8012c84 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012c82:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012c84:	2300      	movs	r3, #0
}
 8012c86:	4618      	mov	r0, r3
 8012c88:	3720      	adds	r7, #32
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	bd80      	pop	{r7, pc}

08012c8e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012c8e:	b580      	push	{r7, lr}
 8012c90:	b088      	sub	sp, #32
 8012c92:	af00      	add	r7, sp, #0
 8012c94:	6078      	str	r0, [r7, #4]
 8012c96:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012c9e:	683b      	ldr	r3, [r7, #0]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d10d      	bne.n	8012cc0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012ca4:	693b      	ldr	r3, [r7, #16]
 8012ca6:	68db      	ldr	r3, [r3, #12]
 8012ca8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012caa:	69bb      	ldr	r3, [r7, #24]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d004      	beq.n	8012cba <create_chain+0x2c>
 8012cb0:	693b      	ldr	r3, [r7, #16]
 8012cb2:	695b      	ldr	r3, [r3, #20]
 8012cb4:	69ba      	ldr	r2, [r7, #24]
 8012cb6:	429a      	cmp	r2, r3
 8012cb8:	d31b      	bcc.n	8012cf2 <create_chain+0x64>
 8012cba:	2301      	movs	r3, #1
 8012cbc:	61bb      	str	r3, [r7, #24]
 8012cbe:	e018      	b.n	8012cf2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012cc0:	6839      	ldr	r1, [r7, #0]
 8012cc2:	6878      	ldr	r0, [r7, #4]
 8012cc4:	f7ff fded 	bl	80128a2 <get_fat>
 8012cc8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	2b01      	cmp	r3, #1
 8012cce:	d801      	bhi.n	8012cd4 <create_chain+0x46>
 8012cd0:	2301      	movs	r3, #1
 8012cd2:	e070      	b.n	8012db6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cda:	d101      	bne.n	8012ce0 <create_chain+0x52>
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	e06a      	b.n	8012db6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012ce0:	693b      	ldr	r3, [r7, #16]
 8012ce2:	695b      	ldr	r3, [r3, #20]
 8012ce4:	68fa      	ldr	r2, [r7, #12]
 8012ce6:	429a      	cmp	r2, r3
 8012ce8:	d201      	bcs.n	8012cee <create_chain+0x60>
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	e063      	b.n	8012db6 <create_chain+0x128>
		scl = clst;
 8012cee:	683b      	ldr	r3, [r7, #0]
 8012cf0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012cf2:	69bb      	ldr	r3, [r7, #24]
 8012cf4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012cf6:	69fb      	ldr	r3, [r7, #28]
 8012cf8:	3301      	adds	r3, #1
 8012cfa:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012cfc:	693b      	ldr	r3, [r7, #16]
 8012cfe:	695b      	ldr	r3, [r3, #20]
 8012d00:	69fa      	ldr	r2, [r7, #28]
 8012d02:	429a      	cmp	r2, r3
 8012d04:	d307      	bcc.n	8012d16 <create_chain+0x88>
				ncl = 2;
 8012d06:	2302      	movs	r3, #2
 8012d08:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012d0a:	69fa      	ldr	r2, [r7, #28]
 8012d0c:	69bb      	ldr	r3, [r7, #24]
 8012d0e:	429a      	cmp	r2, r3
 8012d10:	d901      	bls.n	8012d16 <create_chain+0x88>
 8012d12:	2300      	movs	r3, #0
 8012d14:	e04f      	b.n	8012db6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012d16:	69f9      	ldr	r1, [r7, #28]
 8012d18:	6878      	ldr	r0, [r7, #4]
 8012d1a:	f7ff fdc2 	bl	80128a2 <get_fat>
 8012d1e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d00e      	beq.n	8012d44 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	2b01      	cmp	r3, #1
 8012d2a:	d003      	beq.n	8012d34 <create_chain+0xa6>
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d32:	d101      	bne.n	8012d38 <create_chain+0xaa>
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	e03e      	b.n	8012db6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012d38:	69fa      	ldr	r2, [r7, #28]
 8012d3a:	69bb      	ldr	r3, [r7, #24]
 8012d3c:	429a      	cmp	r2, r3
 8012d3e:	d1da      	bne.n	8012cf6 <create_chain+0x68>
 8012d40:	2300      	movs	r3, #0
 8012d42:	e038      	b.n	8012db6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012d44:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012d46:	f04f 32ff 	mov.w	r2, #4294967295
 8012d4a:	69f9      	ldr	r1, [r7, #28]
 8012d4c:	6938      	ldr	r0, [r7, #16]
 8012d4e:	f7ff fe4f 	bl	80129f0 <put_fat>
 8012d52:	4603      	mov	r3, r0
 8012d54:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012d56:	7dfb      	ldrb	r3, [r7, #23]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d109      	bne.n	8012d70 <create_chain+0xe2>
 8012d5c:	683b      	ldr	r3, [r7, #0]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d006      	beq.n	8012d70 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012d62:	69fa      	ldr	r2, [r7, #28]
 8012d64:	6839      	ldr	r1, [r7, #0]
 8012d66:	6938      	ldr	r0, [r7, #16]
 8012d68:	f7ff fe42 	bl	80129f0 <put_fat>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012d70:	7dfb      	ldrb	r3, [r7, #23]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d116      	bne.n	8012da4 <create_chain+0x116>
		fs->last_clst = ncl;
 8012d76:	693b      	ldr	r3, [r7, #16]
 8012d78:	69fa      	ldr	r2, [r7, #28]
 8012d7a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012d7c:	693b      	ldr	r3, [r7, #16]
 8012d7e:	691a      	ldr	r2, [r3, #16]
 8012d80:	693b      	ldr	r3, [r7, #16]
 8012d82:	695b      	ldr	r3, [r3, #20]
 8012d84:	3b02      	subs	r3, #2
 8012d86:	429a      	cmp	r2, r3
 8012d88:	d804      	bhi.n	8012d94 <create_chain+0x106>
 8012d8a:	693b      	ldr	r3, [r7, #16]
 8012d8c:	691b      	ldr	r3, [r3, #16]
 8012d8e:	1e5a      	subs	r2, r3, #1
 8012d90:	693b      	ldr	r3, [r7, #16]
 8012d92:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8012d94:	693b      	ldr	r3, [r7, #16]
 8012d96:	791b      	ldrb	r3, [r3, #4]
 8012d98:	f043 0301 	orr.w	r3, r3, #1
 8012d9c:	b2da      	uxtb	r2, r3
 8012d9e:	693b      	ldr	r3, [r7, #16]
 8012da0:	711a      	strb	r2, [r3, #4]
 8012da2:	e007      	b.n	8012db4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012da4:	7dfb      	ldrb	r3, [r7, #23]
 8012da6:	2b01      	cmp	r3, #1
 8012da8:	d102      	bne.n	8012db0 <create_chain+0x122>
 8012daa:	f04f 33ff 	mov.w	r3, #4294967295
 8012dae:	e000      	b.n	8012db2 <create_chain+0x124>
 8012db0:	2301      	movs	r3, #1
 8012db2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012db4:	69fb      	ldr	r3, [r7, #28]
}
 8012db6:	4618      	mov	r0, r3
 8012db8:	3720      	adds	r7, #32
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	bd80      	pop	{r7, pc}

08012dbe <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012dbe:	b480      	push	{r7}
 8012dc0:	b087      	sub	sp, #28
 8012dc2:	af00      	add	r7, sp, #0
 8012dc4:	6078      	str	r0, [r7, #4]
 8012dc6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012dd2:	3304      	adds	r3, #4
 8012dd4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012dd6:	683b      	ldr	r3, [r7, #0]
 8012dd8:	0a5b      	lsrs	r3, r3, #9
 8012dda:	68fa      	ldr	r2, [r7, #12]
 8012ddc:	8952      	ldrh	r2, [r2, #10]
 8012dde:	fbb3 f3f2 	udiv	r3, r3, r2
 8012de2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012de4:	693b      	ldr	r3, [r7, #16]
 8012de6:	1d1a      	adds	r2, r3, #4
 8012de8:	613a      	str	r2, [r7, #16]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012dee:	68bb      	ldr	r3, [r7, #8]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d101      	bne.n	8012df8 <clmt_clust+0x3a>
 8012df4:	2300      	movs	r3, #0
 8012df6:	e010      	b.n	8012e1a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012df8:	697a      	ldr	r2, [r7, #20]
 8012dfa:	68bb      	ldr	r3, [r7, #8]
 8012dfc:	429a      	cmp	r2, r3
 8012dfe:	d307      	bcc.n	8012e10 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012e00:	697a      	ldr	r2, [r7, #20]
 8012e02:	68bb      	ldr	r3, [r7, #8]
 8012e04:	1ad3      	subs	r3, r2, r3
 8012e06:	617b      	str	r3, [r7, #20]
 8012e08:	693b      	ldr	r3, [r7, #16]
 8012e0a:	3304      	adds	r3, #4
 8012e0c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012e0e:	e7e9      	b.n	8012de4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012e10:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012e12:	693b      	ldr	r3, [r7, #16]
 8012e14:	681a      	ldr	r2, [r3, #0]
 8012e16:	697b      	ldr	r3, [r7, #20]
 8012e18:	4413      	add	r3, r2
}
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	371c      	adds	r7, #28
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e24:	4770      	bx	lr

08012e26 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012e26:	b580      	push	{r7, lr}
 8012e28:	b086      	sub	sp, #24
 8012e2a:	af00      	add	r7, sp, #0
 8012e2c:	6078      	str	r0, [r7, #4]
 8012e2e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012e36:	683b      	ldr	r3, [r7, #0]
 8012e38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012e3c:	d204      	bcs.n	8012e48 <dir_sdi+0x22>
 8012e3e:	683b      	ldr	r3, [r7, #0]
 8012e40:	f003 031f 	and.w	r3, r3, #31
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d001      	beq.n	8012e4c <dir_sdi+0x26>
		return FR_INT_ERR;
 8012e48:	2302      	movs	r3, #2
 8012e4a:	e063      	b.n	8012f14 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	683a      	ldr	r2, [r7, #0]
 8012e50:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	689b      	ldr	r3, [r3, #8]
 8012e56:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012e58:	697b      	ldr	r3, [r7, #20]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d106      	bne.n	8012e6c <dir_sdi+0x46>
 8012e5e:	693b      	ldr	r3, [r7, #16]
 8012e60:	781b      	ldrb	r3, [r3, #0]
 8012e62:	2b02      	cmp	r3, #2
 8012e64:	d902      	bls.n	8012e6c <dir_sdi+0x46>
		clst = fs->dirbase;
 8012e66:	693b      	ldr	r3, [r7, #16]
 8012e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e6a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012e6c:	697b      	ldr	r3, [r7, #20]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d10c      	bne.n	8012e8c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012e72:	683b      	ldr	r3, [r7, #0]
 8012e74:	095b      	lsrs	r3, r3, #5
 8012e76:	693a      	ldr	r2, [r7, #16]
 8012e78:	8912      	ldrh	r2, [r2, #8]
 8012e7a:	4293      	cmp	r3, r2
 8012e7c:	d301      	bcc.n	8012e82 <dir_sdi+0x5c>
 8012e7e:	2302      	movs	r3, #2
 8012e80:	e048      	b.n	8012f14 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8012e82:	693b      	ldr	r3, [r7, #16]
 8012e84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	619a      	str	r2, [r3, #24]
 8012e8a:	e029      	b.n	8012ee0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012e8c:	693b      	ldr	r3, [r7, #16]
 8012e8e:	895b      	ldrh	r3, [r3, #10]
 8012e90:	025b      	lsls	r3, r3, #9
 8012e92:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012e94:	e019      	b.n	8012eca <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	6979      	ldr	r1, [r7, #20]
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f7ff fd01 	bl	80128a2 <get_fat>
 8012ea0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012ea2:	697b      	ldr	r3, [r7, #20]
 8012ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ea8:	d101      	bne.n	8012eae <dir_sdi+0x88>
 8012eaa:	2301      	movs	r3, #1
 8012eac:	e032      	b.n	8012f14 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012eae:	697b      	ldr	r3, [r7, #20]
 8012eb0:	2b01      	cmp	r3, #1
 8012eb2:	d904      	bls.n	8012ebe <dir_sdi+0x98>
 8012eb4:	693b      	ldr	r3, [r7, #16]
 8012eb6:	695b      	ldr	r3, [r3, #20]
 8012eb8:	697a      	ldr	r2, [r7, #20]
 8012eba:	429a      	cmp	r2, r3
 8012ebc:	d301      	bcc.n	8012ec2 <dir_sdi+0x9c>
 8012ebe:	2302      	movs	r3, #2
 8012ec0:	e028      	b.n	8012f14 <dir_sdi+0xee>
			ofs -= csz;
 8012ec2:	683a      	ldr	r2, [r7, #0]
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	1ad3      	subs	r3, r2, r3
 8012ec8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012eca:	683a      	ldr	r2, [r7, #0]
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	429a      	cmp	r2, r3
 8012ed0:	d2e1      	bcs.n	8012e96 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8012ed2:	6979      	ldr	r1, [r7, #20]
 8012ed4:	6938      	ldr	r0, [r7, #16]
 8012ed6:	f7ff fcc5 	bl	8012864 <clust2sect>
 8012eda:	4602      	mov	r2, r0
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	697a      	ldr	r2, [r7, #20]
 8012ee4:	615a      	str	r2, [r3, #20]
	if (!dp->sect) return FR_INT_ERR;
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	699b      	ldr	r3, [r3, #24]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d101      	bne.n	8012ef2 <dir_sdi+0xcc>
 8012eee:	2302      	movs	r3, #2
 8012ef0:	e010      	b.n	8012f14 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	699a      	ldr	r2, [r3, #24]
 8012ef6:	683b      	ldr	r3, [r7, #0]
 8012ef8:	0a5b      	lsrs	r3, r3, #9
 8012efa:	441a      	add	r2, r3
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012f00:	693b      	ldr	r3, [r7, #16]
 8012f02:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012f06:	683b      	ldr	r3, [r7, #0]
 8012f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012f0c:	441a      	add	r2, r3
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8012f12:	2300      	movs	r3, #0
}
 8012f14:	4618      	mov	r0, r3
 8012f16:	3718      	adds	r7, #24
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	bd80      	pop	{r7, pc}

08012f1c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b086      	sub	sp, #24
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
 8012f24:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	691b      	ldr	r3, [r3, #16]
 8012f30:	3320      	adds	r3, #32
 8012f32:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	699b      	ldr	r3, [r3, #24]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d003      	beq.n	8012f44 <dir_next+0x28>
 8012f3c:	68bb      	ldr	r3, [r7, #8]
 8012f3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012f42:	d301      	bcc.n	8012f48 <dir_next+0x2c>
 8012f44:	2304      	movs	r3, #4
 8012f46:	e0aa      	b.n	801309e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012f48:	68bb      	ldr	r3, [r7, #8]
 8012f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	f040 8098 	bne.w	8013084 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	699b      	ldr	r3, [r3, #24]
 8012f58:	1c5a      	adds	r2, r3, #1
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	619a      	str	r2, [r3, #24]

		if (!dp->clust) {		/* Static table */
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	695b      	ldr	r3, [r3, #20]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d10b      	bne.n	8012f7e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	095b      	lsrs	r3, r3, #5
 8012f6a:	68fa      	ldr	r2, [r7, #12]
 8012f6c:	8912      	ldrh	r2, [r2, #8]
 8012f6e:	4293      	cmp	r3, r2
 8012f70:	f0c0 8088 	bcc.w	8013084 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	2200      	movs	r2, #0
 8012f78:	619a      	str	r2, [r3, #24]
 8012f7a:	2304      	movs	r3, #4
 8012f7c:	e08f      	b.n	801309e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012f7e:	68bb      	ldr	r3, [r7, #8]
 8012f80:	0a5b      	lsrs	r3, r3, #9
 8012f82:	68fa      	ldr	r2, [r7, #12]
 8012f84:	8952      	ldrh	r2, [r2, #10]
 8012f86:	3a01      	subs	r2, #1
 8012f88:	4013      	ands	r3, r2
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d17a      	bne.n	8013084 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012f8e:	687a      	ldr	r2, [r7, #4]
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	695b      	ldr	r3, [r3, #20]
 8012f94:	4619      	mov	r1, r3
 8012f96:	4610      	mov	r0, r2
 8012f98:	f7ff fc83 	bl	80128a2 <get_fat>
 8012f9c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012f9e:	697b      	ldr	r3, [r7, #20]
 8012fa0:	2b01      	cmp	r3, #1
 8012fa2:	d801      	bhi.n	8012fa8 <dir_next+0x8c>
 8012fa4:	2302      	movs	r3, #2
 8012fa6:	e07a      	b.n	801309e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012fa8:	697b      	ldr	r3, [r7, #20]
 8012faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fae:	d101      	bne.n	8012fb4 <dir_next+0x98>
 8012fb0:	2301      	movs	r3, #1
 8012fb2:	e074      	b.n	801309e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	695b      	ldr	r3, [r3, #20]
 8012fb8:	697a      	ldr	r2, [r7, #20]
 8012fba:	429a      	cmp	r2, r3
 8012fbc:	d358      	bcc.n	8013070 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012fbe:	683b      	ldr	r3, [r7, #0]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d104      	bne.n	8012fce <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	619a      	str	r2, [r3, #24]
 8012fca:	2304      	movs	r3, #4
 8012fcc:	e067      	b.n	801309e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012fce:	687a      	ldr	r2, [r7, #4]
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	695b      	ldr	r3, [r3, #20]
 8012fd4:	4619      	mov	r1, r3
 8012fd6:	4610      	mov	r0, r2
 8012fd8:	f7ff fe59 	bl	8012c8e <create_chain>
 8012fdc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012fde:	697b      	ldr	r3, [r7, #20]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d101      	bne.n	8012fe8 <dir_next+0xcc>
 8012fe4:	2307      	movs	r3, #7
 8012fe6:	e05a      	b.n	801309e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012fe8:	697b      	ldr	r3, [r7, #20]
 8012fea:	2b01      	cmp	r3, #1
 8012fec:	d101      	bne.n	8012ff2 <dir_next+0xd6>
 8012fee:	2302      	movs	r3, #2
 8012ff0:	e055      	b.n	801309e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012ff2:	697b      	ldr	r3, [r7, #20]
 8012ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ff8:	d101      	bne.n	8012ffe <dir_next+0xe2>
 8012ffa:	2301      	movs	r3, #1
 8012ffc:	e04f      	b.n	801309e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012ffe:	68f8      	ldr	r0, [r7, #12]
 8013000:	f7ff fb51 	bl	80126a6 <sync_window>
 8013004:	4603      	mov	r3, r0
 8013006:	2b00      	cmp	r3, #0
 8013008:	d001      	beq.n	801300e <dir_next+0xf2>
 801300a:	2301      	movs	r3, #1
 801300c:	e047      	b.n	801309e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	3330      	adds	r3, #48	@ 0x30
 8013012:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013016:	2100      	movs	r1, #0
 8013018:	4618      	mov	r0, r3
 801301a:	f7ff fae7 	bl	80125ec <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801301e:	2300      	movs	r3, #0
 8013020:	613b      	str	r3, [r7, #16]
 8013022:	6979      	ldr	r1, [r7, #20]
 8013024:	68f8      	ldr	r0, [r7, #12]
 8013026:	f7ff fc1d 	bl	8012864 <clust2sect>
 801302a:	4602      	mov	r2, r0
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013030:	e012      	b.n	8013058 <dir_next+0x13c>
						fs->wflag = 1;
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	2201      	movs	r2, #1
 8013036:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013038:	68f8      	ldr	r0, [r7, #12]
 801303a:	f7ff fb34 	bl	80126a6 <sync_window>
 801303e:	4603      	mov	r3, r0
 8013040:	2b00      	cmp	r3, #0
 8013042:	d001      	beq.n	8013048 <dir_next+0x12c>
 8013044:	2301      	movs	r3, #1
 8013046:	e02a      	b.n	801309e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013048:	693b      	ldr	r3, [r7, #16]
 801304a:	3301      	adds	r3, #1
 801304c:	613b      	str	r3, [r7, #16]
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013052:	1c5a      	adds	r2, r3, #1
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	895b      	ldrh	r3, [r3, #10]
 801305c:	461a      	mov	r2, r3
 801305e:	693b      	ldr	r3, [r7, #16]
 8013060:	4293      	cmp	r3, r2
 8013062:	d3e6      	bcc.n	8013032 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013068:	693b      	ldr	r3, [r7, #16]
 801306a:	1ad2      	subs	r2, r2, r3
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	697a      	ldr	r2, [r7, #20]
 8013074:	615a      	str	r2, [r3, #20]
				dp->sect = clust2sect(fs, clst);
 8013076:	6979      	ldr	r1, [r7, #20]
 8013078:	68f8      	ldr	r0, [r7, #12]
 801307a:	f7ff fbf3 	bl	8012864 <clust2sect>
 801307e:	4602      	mov	r2, r0
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	68ba      	ldr	r2, [r7, #8]
 8013088:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013090:	68bb      	ldr	r3, [r7, #8]
 8013092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013096:	441a      	add	r2, r3
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	61da      	str	r2, [r3, #28]

	return FR_OK;
 801309c:	2300      	movs	r3, #0
}
 801309e:	4618      	mov	r0, r3
 80130a0:	3718      	adds	r7, #24
 80130a2:	46bd      	mov	sp, r7
 80130a4:	bd80      	pop	{r7, pc}

080130a6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80130a6:	b580      	push	{r7, lr}
 80130a8:	b086      	sub	sp, #24
 80130aa:	af00      	add	r7, sp, #0
 80130ac:	6078      	str	r0, [r7, #4]
 80130ae:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80130b6:	2100      	movs	r1, #0
 80130b8:	6878      	ldr	r0, [r7, #4]
 80130ba:	f7ff feb4 	bl	8012e26 <dir_sdi>
 80130be:	4603      	mov	r3, r0
 80130c0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80130c2:	7dfb      	ldrb	r3, [r7, #23]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d12b      	bne.n	8013120 <dir_alloc+0x7a>
		n = 0;
 80130c8:	2300      	movs	r3, #0
 80130ca:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	699b      	ldr	r3, [r3, #24]
 80130d0:	4619      	mov	r1, r3
 80130d2:	68f8      	ldr	r0, [r7, #12]
 80130d4:	f7ff fb2b 	bl	801272e <move_window>
 80130d8:	4603      	mov	r3, r0
 80130da:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80130dc:	7dfb      	ldrb	r3, [r7, #23]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d11d      	bne.n	801311e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	69db      	ldr	r3, [r3, #28]
 80130e6:	781b      	ldrb	r3, [r3, #0]
 80130e8:	2be5      	cmp	r3, #229	@ 0xe5
 80130ea:	d004      	beq.n	80130f6 <dir_alloc+0x50>
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	69db      	ldr	r3, [r3, #28]
 80130f0:	781b      	ldrb	r3, [r3, #0]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d107      	bne.n	8013106 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80130f6:	693b      	ldr	r3, [r7, #16]
 80130f8:	3301      	adds	r3, #1
 80130fa:	613b      	str	r3, [r7, #16]
 80130fc:	693a      	ldr	r2, [r7, #16]
 80130fe:	683b      	ldr	r3, [r7, #0]
 8013100:	429a      	cmp	r2, r3
 8013102:	d102      	bne.n	801310a <dir_alloc+0x64>
 8013104:	e00c      	b.n	8013120 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013106:	2300      	movs	r3, #0
 8013108:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801310a:	2101      	movs	r1, #1
 801310c:	6878      	ldr	r0, [r7, #4]
 801310e:	f7ff ff05 	bl	8012f1c <dir_next>
 8013112:	4603      	mov	r3, r0
 8013114:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013116:	7dfb      	ldrb	r3, [r7, #23]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d0d7      	beq.n	80130cc <dir_alloc+0x26>
 801311c:	e000      	b.n	8013120 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801311e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013120:	7dfb      	ldrb	r3, [r7, #23]
 8013122:	2b04      	cmp	r3, #4
 8013124:	d101      	bne.n	801312a <dir_alloc+0x84>
 8013126:	2307      	movs	r3, #7
 8013128:	75fb      	strb	r3, [r7, #23]
	return res;
 801312a:	7dfb      	ldrb	r3, [r7, #23]
}
 801312c:	4618      	mov	r0, r3
 801312e:	3718      	adds	r7, #24
 8013130:	46bd      	mov	sp, r7
 8013132:	bd80      	pop	{r7, pc}

08013134 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013134:	b580      	push	{r7, lr}
 8013136:	b084      	sub	sp, #16
 8013138:	af00      	add	r7, sp, #0
 801313a:	6078      	str	r0, [r7, #4]
 801313c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801313e:	683b      	ldr	r3, [r7, #0]
 8013140:	331a      	adds	r3, #26
 8013142:	4618      	mov	r0, r3
 8013144:	f7ff f9ae 	bl	80124a4 <ld_word>
 8013148:	4603      	mov	r3, r0
 801314a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	781b      	ldrb	r3, [r3, #0]
 8013150:	2b03      	cmp	r3, #3
 8013152:	d109      	bne.n	8013168 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013154:	683b      	ldr	r3, [r7, #0]
 8013156:	3314      	adds	r3, #20
 8013158:	4618      	mov	r0, r3
 801315a:	f7ff f9a3 	bl	80124a4 <ld_word>
 801315e:	4603      	mov	r3, r0
 8013160:	041b      	lsls	r3, r3, #16
 8013162:	68fa      	ldr	r2, [r7, #12]
 8013164:	4313      	orrs	r3, r2
 8013166:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013168:	68fb      	ldr	r3, [r7, #12]
}
 801316a:	4618      	mov	r0, r3
 801316c:	3710      	adds	r7, #16
 801316e:	46bd      	mov	sp, r7
 8013170:	bd80      	pop	{r7, pc}

08013172 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013172:	b580      	push	{r7, lr}
 8013174:	b084      	sub	sp, #16
 8013176:	af00      	add	r7, sp, #0
 8013178:	60f8      	str	r0, [r7, #12]
 801317a:	60b9      	str	r1, [r7, #8]
 801317c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801317e:	68bb      	ldr	r3, [r7, #8]
 8013180:	331a      	adds	r3, #26
 8013182:	687a      	ldr	r2, [r7, #4]
 8013184:	b292      	uxth	r2, r2
 8013186:	4611      	mov	r1, r2
 8013188:	4618      	mov	r0, r3
 801318a:	f7ff f9c7 	bl	801251c <st_word>
	if (fs->fs_type == FS_FAT32) {
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	781b      	ldrb	r3, [r3, #0]
 8013192:	2b03      	cmp	r3, #3
 8013194:	d109      	bne.n	80131aa <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013196:	68bb      	ldr	r3, [r7, #8]
 8013198:	f103 0214 	add.w	r2, r3, #20
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	0c1b      	lsrs	r3, r3, #16
 80131a0:	b29b      	uxth	r3, r3
 80131a2:	4619      	mov	r1, r3
 80131a4:	4610      	mov	r0, r2
 80131a6:	f7ff f9b9 	bl	801251c <st_word>
	}
}
 80131aa:	bf00      	nop
 80131ac:	3710      	adds	r7, #16
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd80      	pop	{r7, pc}

080131b2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80131b2:	b580      	push	{r7, lr}
 80131b4:	b086      	sub	sp, #24
 80131b6:	af00      	add	r7, sp, #0
 80131b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80131c0:	2100      	movs	r1, #0
 80131c2:	6878      	ldr	r0, [r7, #4]
 80131c4:	f7ff fe2f 	bl	8012e26 <dir_sdi>
 80131c8:	4603      	mov	r3, r0
 80131ca:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80131cc:	7dfb      	ldrb	r3, [r7, #23]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d001      	beq.n	80131d6 <dir_find+0x24>
 80131d2:	7dfb      	ldrb	r3, [r7, #23]
 80131d4:	e03e      	b.n	8013254 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	699b      	ldr	r3, [r3, #24]
 80131da:	4619      	mov	r1, r3
 80131dc:	6938      	ldr	r0, [r7, #16]
 80131de:	f7ff faa6 	bl	801272e <move_window>
 80131e2:	4603      	mov	r3, r0
 80131e4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80131e6:	7dfb      	ldrb	r3, [r7, #23]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d12f      	bne.n	801324c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	69db      	ldr	r3, [r3, #28]
 80131f0:	781b      	ldrb	r3, [r3, #0]
 80131f2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80131f4:	7bfb      	ldrb	r3, [r7, #15]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d102      	bne.n	8013200 <dir_find+0x4e>
 80131fa:	2304      	movs	r3, #4
 80131fc:	75fb      	strb	r3, [r7, #23]
 80131fe:	e028      	b.n	8013252 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	69db      	ldr	r3, [r3, #28]
 8013204:	330b      	adds	r3, #11
 8013206:	781b      	ldrb	r3, [r3, #0]
 8013208:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801320c:	b2da      	uxtb	r2, r3
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	69db      	ldr	r3, [r3, #28]
 8013216:	330b      	adds	r3, #11
 8013218:	781b      	ldrb	r3, [r3, #0]
 801321a:	f003 0308 	and.w	r3, r3, #8
 801321e:	2b00      	cmp	r3, #0
 8013220:	d10a      	bne.n	8013238 <dir_find+0x86>
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	69d8      	ldr	r0, [r3, #28]
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	3320      	adds	r3, #32
 801322a:	220b      	movs	r2, #11
 801322c:	4619      	mov	r1, r3
 801322e:	f7ff f9f8 	bl	8012622 <mem_cmp>
 8013232:	4603      	mov	r3, r0
 8013234:	2b00      	cmp	r3, #0
 8013236:	d00b      	beq.n	8013250 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8013238:	2100      	movs	r1, #0
 801323a:	6878      	ldr	r0, [r7, #4]
 801323c:	f7ff fe6e 	bl	8012f1c <dir_next>
 8013240:	4603      	mov	r3, r0
 8013242:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013244:	7dfb      	ldrb	r3, [r7, #23]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d0c5      	beq.n	80131d6 <dir_find+0x24>
 801324a:	e002      	b.n	8013252 <dir_find+0xa0>
		if (res != FR_OK) break;
 801324c:	bf00      	nop
 801324e:	e000      	b.n	8013252 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013250:	bf00      	nop

	return res;
 8013252:	7dfb      	ldrb	r3, [r7, #23]
}
 8013254:	4618      	mov	r0, r3
 8013256:	3718      	adds	r7, #24
 8013258:	46bd      	mov	sp, r7
 801325a:	bd80      	pop	{r7, pc}

0801325c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b084      	sub	sp, #16
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801326a:	2101      	movs	r1, #1
 801326c:	6878      	ldr	r0, [r7, #4]
 801326e:	f7ff ff1a 	bl	80130a6 <dir_alloc>
 8013272:	4603      	mov	r3, r0
 8013274:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013276:	7bfb      	ldrb	r3, [r7, #15]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d11c      	bne.n	80132b6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	699b      	ldr	r3, [r3, #24]
 8013280:	4619      	mov	r1, r3
 8013282:	68b8      	ldr	r0, [r7, #8]
 8013284:	f7ff fa53 	bl	801272e <move_window>
 8013288:	4603      	mov	r3, r0
 801328a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801328c:	7bfb      	ldrb	r3, [r7, #15]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d111      	bne.n	80132b6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	69db      	ldr	r3, [r3, #28]
 8013296:	2220      	movs	r2, #32
 8013298:	2100      	movs	r1, #0
 801329a:	4618      	mov	r0, r3
 801329c:	f7ff f9a6 	bl	80125ec <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	69d8      	ldr	r0, [r3, #28]
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	3320      	adds	r3, #32
 80132a8:	220b      	movs	r2, #11
 80132aa:	4619      	mov	r1, r3
 80132ac:	f7ff f97d 	bl	80125aa <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80132b0:	68bb      	ldr	r3, [r7, #8]
 80132b2:	2201      	movs	r2, #1
 80132b4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80132b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80132b8:	4618      	mov	r0, r3
 80132ba:	3710      	adds	r7, #16
 80132bc:	46bd      	mov	sp, r7
 80132be:	bd80      	pop	{r7, pc}

080132c0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b088      	sub	sp, #32
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
 80132c8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80132ca:	683b      	ldr	r3, [r7, #0]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	60fb      	str	r3, [r7, #12]
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	3320      	adds	r3, #32
 80132d4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80132d6:	220b      	movs	r2, #11
 80132d8:	2120      	movs	r1, #32
 80132da:	68b8      	ldr	r0, [r7, #8]
 80132dc:	f7ff f986 	bl	80125ec <mem_set>
	si = i = 0; ni = 8;
 80132e0:	2300      	movs	r3, #0
 80132e2:	613b      	str	r3, [r7, #16]
 80132e4:	693b      	ldr	r3, [r7, #16]
 80132e6:	61fb      	str	r3, [r7, #28]
 80132e8:	2308      	movs	r3, #8
 80132ea:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80132ec:	69fb      	ldr	r3, [r7, #28]
 80132ee:	1c5a      	adds	r2, r3, #1
 80132f0:	61fa      	str	r2, [r7, #28]
 80132f2:	68fa      	ldr	r2, [r7, #12]
 80132f4:	4413      	add	r3, r2
 80132f6:	781b      	ldrb	r3, [r3, #0]
 80132f8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80132fa:	7efb      	ldrb	r3, [r7, #27]
 80132fc:	2b20      	cmp	r3, #32
 80132fe:	d94e      	bls.n	801339e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8013300:	7efb      	ldrb	r3, [r7, #27]
 8013302:	2b2f      	cmp	r3, #47	@ 0x2f
 8013304:	d006      	beq.n	8013314 <create_name+0x54>
 8013306:	7efb      	ldrb	r3, [r7, #27]
 8013308:	2b5c      	cmp	r3, #92	@ 0x5c
 801330a:	d110      	bne.n	801332e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801330c:	e002      	b.n	8013314 <create_name+0x54>
 801330e:	69fb      	ldr	r3, [r7, #28]
 8013310:	3301      	adds	r3, #1
 8013312:	61fb      	str	r3, [r7, #28]
 8013314:	68fa      	ldr	r2, [r7, #12]
 8013316:	69fb      	ldr	r3, [r7, #28]
 8013318:	4413      	add	r3, r2
 801331a:	781b      	ldrb	r3, [r3, #0]
 801331c:	2b2f      	cmp	r3, #47	@ 0x2f
 801331e:	d0f6      	beq.n	801330e <create_name+0x4e>
 8013320:	68fa      	ldr	r2, [r7, #12]
 8013322:	69fb      	ldr	r3, [r7, #28]
 8013324:	4413      	add	r3, r2
 8013326:	781b      	ldrb	r3, [r3, #0]
 8013328:	2b5c      	cmp	r3, #92	@ 0x5c
 801332a:	d0f0      	beq.n	801330e <create_name+0x4e>
			break;
 801332c:	e038      	b.n	80133a0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801332e:	7efb      	ldrb	r3, [r7, #27]
 8013330:	2b2e      	cmp	r3, #46	@ 0x2e
 8013332:	d003      	beq.n	801333c <create_name+0x7c>
 8013334:	693a      	ldr	r2, [r7, #16]
 8013336:	697b      	ldr	r3, [r7, #20]
 8013338:	429a      	cmp	r2, r3
 801333a:	d30c      	bcc.n	8013356 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801333c:	697b      	ldr	r3, [r7, #20]
 801333e:	2b0b      	cmp	r3, #11
 8013340:	d002      	beq.n	8013348 <create_name+0x88>
 8013342:	7efb      	ldrb	r3, [r7, #27]
 8013344:	2b2e      	cmp	r3, #46	@ 0x2e
 8013346:	d001      	beq.n	801334c <create_name+0x8c>
 8013348:	2306      	movs	r3, #6
 801334a:	e044      	b.n	80133d6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801334c:	2308      	movs	r3, #8
 801334e:	613b      	str	r3, [r7, #16]
 8013350:	230b      	movs	r3, #11
 8013352:	617b      	str	r3, [r7, #20]
			continue;
 8013354:	e022      	b.n	801339c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8013356:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801335a:	2b00      	cmp	r3, #0
 801335c:	da04      	bge.n	8013368 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801335e:	7efb      	ldrb	r3, [r7, #27]
 8013360:	3b80      	subs	r3, #128	@ 0x80
 8013362:	4a1f      	ldr	r2, [pc, #124]	@ (80133e0 <create_name+0x120>)
 8013364:	5cd3      	ldrb	r3, [r2, r3]
 8013366:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8013368:	7efb      	ldrb	r3, [r7, #27]
 801336a:	4619      	mov	r1, r3
 801336c:	481d      	ldr	r0, [pc, #116]	@ (80133e4 <create_name+0x124>)
 801336e:	f7ff f97f 	bl	8012670 <chk_chr>
 8013372:	4603      	mov	r3, r0
 8013374:	2b00      	cmp	r3, #0
 8013376:	d001      	beq.n	801337c <create_name+0xbc>
 8013378:	2306      	movs	r3, #6
 801337a:	e02c      	b.n	80133d6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801337c:	7efb      	ldrb	r3, [r7, #27]
 801337e:	2b60      	cmp	r3, #96	@ 0x60
 8013380:	d905      	bls.n	801338e <create_name+0xce>
 8013382:	7efb      	ldrb	r3, [r7, #27]
 8013384:	2b7a      	cmp	r3, #122	@ 0x7a
 8013386:	d802      	bhi.n	801338e <create_name+0xce>
 8013388:	7efb      	ldrb	r3, [r7, #27]
 801338a:	3b20      	subs	r3, #32
 801338c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801338e:	693b      	ldr	r3, [r7, #16]
 8013390:	1c5a      	adds	r2, r3, #1
 8013392:	613a      	str	r2, [r7, #16]
 8013394:	68ba      	ldr	r2, [r7, #8]
 8013396:	4413      	add	r3, r2
 8013398:	7efa      	ldrb	r2, [r7, #27]
 801339a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801339c:	e7a6      	b.n	80132ec <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801339e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80133a0:	68fa      	ldr	r2, [r7, #12]
 80133a2:	69fb      	ldr	r3, [r7, #28]
 80133a4:	441a      	add	r2, r3
 80133a6:	683b      	ldr	r3, [r7, #0]
 80133a8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80133aa:	693b      	ldr	r3, [r7, #16]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d101      	bne.n	80133b4 <create_name+0xf4>
 80133b0:	2306      	movs	r3, #6
 80133b2:	e010      	b.n	80133d6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80133b4:	68bb      	ldr	r3, [r7, #8]
 80133b6:	781b      	ldrb	r3, [r3, #0]
 80133b8:	2be5      	cmp	r3, #229	@ 0xe5
 80133ba:	d102      	bne.n	80133c2 <create_name+0x102>
 80133bc:	68bb      	ldr	r3, [r7, #8]
 80133be:	2205      	movs	r2, #5
 80133c0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80133c2:	7efb      	ldrb	r3, [r7, #27]
 80133c4:	2b20      	cmp	r3, #32
 80133c6:	d801      	bhi.n	80133cc <create_name+0x10c>
 80133c8:	2204      	movs	r2, #4
 80133ca:	e000      	b.n	80133ce <create_name+0x10e>
 80133cc:	2200      	movs	r2, #0
 80133ce:	68bb      	ldr	r3, [r7, #8]
 80133d0:	330b      	adds	r3, #11
 80133d2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80133d4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80133d6:	4618      	mov	r0, r3
 80133d8:	3720      	adds	r7, #32
 80133da:	46bd      	mov	sp, r7
 80133dc:	bd80      	pop	{r7, pc}
 80133de:	bf00      	nop
 80133e0:	0801c218 	.word	0x0801c218
 80133e4:	0801c198 	.word	0x0801c198

080133e8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80133e8:	b580      	push	{r7, lr}
 80133ea:	b086      	sub	sp, #24
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	6078      	str	r0, [r7, #4]
 80133f0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80133f6:	693b      	ldr	r3, [r7, #16]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80133fc:	e002      	b.n	8013404 <follow_path+0x1c>
 80133fe:	683b      	ldr	r3, [r7, #0]
 8013400:	3301      	adds	r3, #1
 8013402:	603b      	str	r3, [r7, #0]
 8013404:	683b      	ldr	r3, [r7, #0]
 8013406:	781b      	ldrb	r3, [r3, #0]
 8013408:	2b2f      	cmp	r3, #47	@ 0x2f
 801340a:	d0f8      	beq.n	80133fe <follow_path+0x16>
 801340c:	683b      	ldr	r3, [r7, #0]
 801340e:	781b      	ldrb	r3, [r3, #0]
 8013410:	2b5c      	cmp	r3, #92	@ 0x5c
 8013412:	d0f4      	beq.n	80133fe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013414:	693b      	ldr	r3, [r7, #16]
 8013416:	2200      	movs	r2, #0
 8013418:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801341a:	683b      	ldr	r3, [r7, #0]
 801341c:	781b      	ldrb	r3, [r3, #0]
 801341e:	2b1f      	cmp	r3, #31
 8013420:	d80a      	bhi.n	8013438 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	2280      	movs	r2, #128	@ 0x80
 8013426:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		res = dir_sdi(dp, 0);
 801342a:	2100      	movs	r1, #0
 801342c:	6878      	ldr	r0, [r7, #4]
 801342e:	f7ff fcfa 	bl	8012e26 <dir_sdi>
 8013432:	4603      	mov	r3, r0
 8013434:	75fb      	strb	r3, [r7, #23]
 8013436:	e043      	b.n	80134c0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013438:	463b      	mov	r3, r7
 801343a:	4619      	mov	r1, r3
 801343c:	6878      	ldr	r0, [r7, #4]
 801343e:	f7ff ff3f 	bl	80132c0 <create_name>
 8013442:	4603      	mov	r3, r0
 8013444:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013446:	7dfb      	ldrb	r3, [r7, #23]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d134      	bne.n	80134b6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801344c:	6878      	ldr	r0, [r7, #4]
 801344e:	f7ff feb0 	bl	80131b2 <dir_find>
 8013452:	4603      	mov	r3, r0
 8013454:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 801345c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801345e:	7dfb      	ldrb	r3, [r7, #23]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d00a      	beq.n	801347a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013464:	7dfb      	ldrb	r3, [r7, #23]
 8013466:	2b04      	cmp	r3, #4
 8013468:	d127      	bne.n	80134ba <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801346a:	7afb      	ldrb	r3, [r7, #11]
 801346c:	f003 0304 	and.w	r3, r3, #4
 8013470:	2b00      	cmp	r3, #0
 8013472:	d122      	bne.n	80134ba <follow_path+0xd2>
 8013474:	2305      	movs	r3, #5
 8013476:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013478:	e01f      	b.n	80134ba <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801347a:	7afb      	ldrb	r3, [r7, #11]
 801347c:	f003 0304 	and.w	r3, r3, #4
 8013480:	2b00      	cmp	r3, #0
 8013482:	d11c      	bne.n	80134be <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013484:	693b      	ldr	r3, [r7, #16]
 8013486:	799b      	ldrb	r3, [r3, #6]
 8013488:	f003 0310 	and.w	r3, r3, #16
 801348c:	2b00      	cmp	r3, #0
 801348e:	d102      	bne.n	8013496 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013490:	2305      	movs	r3, #5
 8013492:	75fb      	strb	r3, [r7, #23]
 8013494:	e014      	b.n	80134c0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	691b      	ldr	r3, [r3, #16]
 80134a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80134a4:	4413      	add	r3, r2
 80134a6:	4619      	mov	r1, r3
 80134a8:	68f8      	ldr	r0, [r7, #12]
 80134aa:	f7ff fe43 	bl	8013134 <ld_clust>
 80134ae:	4602      	mov	r2, r0
 80134b0:	693b      	ldr	r3, [r7, #16]
 80134b2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80134b4:	e7c0      	b.n	8013438 <follow_path+0x50>
			if (res != FR_OK) break;
 80134b6:	bf00      	nop
 80134b8:	e002      	b.n	80134c0 <follow_path+0xd8>
				break;
 80134ba:	bf00      	nop
 80134bc:	e000      	b.n	80134c0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80134be:	bf00      	nop
			}
		}
	}

	return res;
 80134c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80134c2:	4618      	mov	r0, r3
 80134c4:	3718      	adds	r7, #24
 80134c6:	46bd      	mov	sp, r7
 80134c8:	bd80      	pop	{r7, pc}

080134ca <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80134ca:	b480      	push	{r7}
 80134cc:	b087      	sub	sp, #28
 80134ce:	af00      	add	r7, sp, #0
 80134d0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80134d2:	f04f 33ff 	mov.w	r3, #4294967295
 80134d6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d031      	beq.n	8013544 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	617b      	str	r3, [r7, #20]
 80134e6:	e002      	b.n	80134ee <get_ldnumber+0x24>
 80134e8:	697b      	ldr	r3, [r7, #20]
 80134ea:	3301      	adds	r3, #1
 80134ec:	617b      	str	r3, [r7, #20]
 80134ee:	697b      	ldr	r3, [r7, #20]
 80134f0:	781b      	ldrb	r3, [r3, #0]
 80134f2:	2b20      	cmp	r3, #32
 80134f4:	d903      	bls.n	80134fe <get_ldnumber+0x34>
 80134f6:	697b      	ldr	r3, [r7, #20]
 80134f8:	781b      	ldrb	r3, [r3, #0]
 80134fa:	2b3a      	cmp	r3, #58	@ 0x3a
 80134fc:	d1f4      	bne.n	80134e8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80134fe:	697b      	ldr	r3, [r7, #20]
 8013500:	781b      	ldrb	r3, [r3, #0]
 8013502:	2b3a      	cmp	r3, #58	@ 0x3a
 8013504:	d11c      	bne.n	8013540 <get_ldnumber+0x76>
			tp = *path;
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	1c5a      	adds	r2, r3, #1
 8013510:	60fa      	str	r2, [r7, #12]
 8013512:	781b      	ldrb	r3, [r3, #0]
 8013514:	3b30      	subs	r3, #48	@ 0x30
 8013516:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013518:	68bb      	ldr	r3, [r7, #8]
 801351a:	2b09      	cmp	r3, #9
 801351c:	d80e      	bhi.n	801353c <get_ldnumber+0x72>
 801351e:	68fa      	ldr	r2, [r7, #12]
 8013520:	697b      	ldr	r3, [r7, #20]
 8013522:	429a      	cmp	r2, r3
 8013524:	d10a      	bne.n	801353c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013526:	68bb      	ldr	r3, [r7, #8]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d107      	bne.n	801353c <get_ldnumber+0x72>
					vol = (int)i;
 801352c:	68bb      	ldr	r3, [r7, #8]
 801352e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013530:	697b      	ldr	r3, [r7, #20]
 8013532:	3301      	adds	r3, #1
 8013534:	617b      	str	r3, [r7, #20]
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	697a      	ldr	r2, [r7, #20]
 801353a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801353c:	693b      	ldr	r3, [r7, #16]
 801353e:	e002      	b.n	8013546 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013540:	2300      	movs	r3, #0
 8013542:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013544:	693b      	ldr	r3, [r7, #16]
}
 8013546:	4618      	mov	r0, r3
 8013548:	371c      	adds	r7, #28
 801354a:	46bd      	mov	sp, r7
 801354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013550:	4770      	bx	lr
	...

08013554 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013554:	b580      	push	{r7, lr}
 8013556:	b082      	sub	sp, #8
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
 801355c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	2200      	movs	r2, #0
 8013562:	70da      	strb	r2, [r3, #3]
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	f04f 32ff 	mov.w	r2, #4294967295
 801356a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801356c:	6839      	ldr	r1, [r7, #0]
 801356e:	6878      	ldr	r0, [r7, #4]
 8013570:	f7ff f8dd 	bl	801272e <move_window>
 8013574:	4603      	mov	r3, r0
 8013576:	2b00      	cmp	r3, #0
 8013578:	d001      	beq.n	801357e <check_fs+0x2a>
 801357a:	2304      	movs	r3, #4
 801357c:	e038      	b.n	80135f0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	3330      	adds	r3, #48	@ 0x30
 8013582:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013586:	4618      	mov	r0, r3
 8013588:	f7fe ff8c 	bl	80124a4 <ld_word>
 801358c:	4603      	mov	r3, r0
 801358e:	461a      	mov	r2, r3
 8013590:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013594:	429a      	cmp	r2, r3
 8013596:	d001      	beq.n	801359c <check_fs+0x48>
 8013598:	2303      	movs	r3, #3
 801359a:	e029      	b.n	80135f0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80135a2:	2be9      	cmp	r3, #233	@ 0xe9
 80135a4:	d009      	beq.n	80135ba <check_fs+0x66>
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80135ac:	2beb      	cmp	r3, #235	@ 0xeb
 80135ae:	d11e      	bne.n	80135ee <check_fs+0x9a>
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80135b6:	2b90      	cmp	r3, #144	@ 0x90
 80135b8:	d119      	bne.n	80135ee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	3330      	adds	r3, #48	@ 0x30
 80135be:	3336      	adds	r3, #54	@ 0x36
 80135c0:	4618      	mov	r0, r3
 80135c2:	f7fe ff88 	bl	80124d6 <ld_dword>
 80135c6:	4603      	mov	r3, r0
 80135c8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80135cc:	4a0a      	ldr	r2, [pc, #40]	@ (80135f8 <check_fs+0xa4>)
 80135ce:	4293      	cmp	r3, r2
 80135d0:	d101      	bne.n	80135d6 <check_fs+0x82>
 80135d2:	2300      	movs	r3, #0
 80135d4:	e00c      	b.n	80135f0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	3330      	adds	r3, #48	@ 0x30
 80135da:	3352      	adds	r3, #82	@ 0x52
 80135dc:	4618      	mov	r0, r3
 80135de:	f7fe ff7a 	bl	80124d6 <ld_dword>
 80135e2:	4603      	mov	r3, r0
 80135e4:	4a05      	ldr	r2, [pc, #20]	@ (80135fc <check_fs+0xa8>)
 80135e6:	4293      	cmp	r3, r2
 80135e8:	d101      	bne.n	80135ee <check_fs+0x9a>
 80135ea:	2300      	movs	r3, #0
 80135ec:	e000      	b.n	80135f0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80135ee:	2302      	movs	r3, #2
}
 80135f0:	4618      	mov	r0, r3
 80135f2:	3708      	adds	r7, #8
 80135f4:	46bd      	mov	sp, r7
 80135f6:	bd80      	pop	{r7, pc}
 80135f8:	00544146 	.word	0x00544146
 80135fc:	33544146 	.word	0x33544146

08013600 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013600:	b580      	push	{r7, lr}
 8013602:	b096      	sub	sp, #88	@ 0x58
 8013604:	af00      	add	r7, sp, #0
 8013606:	60f8      	str	r0, [r7, #12]
 8013608:	60b9      	str	r1, [r7, #8]
 801360a:	4613      	mov	r3, r2
 801360c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801360e:	68bb      	ldr	r3, [r7, #8]
 8013610:	2200      	movs	r2, #0
 8013612:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013614:	68f8      	ldr	r0, [r7, #12]
 8013616:	f7ff ff58 	bl	80134ca <get_ldnumber>
 801361a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801361c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801361e:	2b00      	cmp	r3, #0
 8013620:	da01      	bge.n	8013626 <find_volume+0x26>
 8013622:	230b      	movs	r3, #11
 8013624:	e22a      	b.n	8013a7c <find_volume+0x47c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013626:	4aa1      	ldr	r2, [pc, #644]	@ (80138ac <find_volume+0x2ac>)
 8013628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801362a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801362e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013632:	2b00      	cmp	r3, #0
 8013634:	d101      	bne.n	801363a <find_volume+0x3a>
 8013636:	230c      	movs	r3, #12
 8013638:	e220      	b.n	8013a7c <find_volume+0x47c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801363a:	68bb      	ldr	r3, [r7, #8]
 801363c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801363e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013640:	79fb      	ldrb	r3, [r7, #7]
 8013642:	f023 0301 	bic.w	r3, r3, #1
 8013646:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801364a:	781b      	ldrb	r3, [r3, #0]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d01a      	beq.n	8013686 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013652:	785b      	ldrb	r3, [r3, #1]
 8013654:	4618      	mov	r0, r3
 8013656:	f7fe fe87 	bl	8012368 <disk_status>
 801365a:	4603      	mov	r3, r0
 801365c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013660:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013664:	f003 0301 	and.w	r3, r3, #1
 8013668:	2b00      	cmp	r3, #0
 801366a:	d10c      	bne.n	8013686 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801366c:	79fb      	ldrb	r3, [r7, #7]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d007      	beq.n	8013682 <find_volume+0x82>
 8013672:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013676:	f003 0304 	and.w	r3, r3, #4
 801367a:	2b00      	cmp	r3, #0
 801367c:	d001      	beq.n	8013682 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801367e:	230a      	movs	r3, #10
 8013680:	e1fc      	b.n	8013a7c <find_volume+0x47c>
			}
			return FR_OK;				/* The file system object is valid */
 8013682:	2300      	movs	r3, #0
 8013684:	e1fa      	b.n	8013a7c <find_volume+0x47c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013688:	2200      	movs	r2, #0
 801368a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801368c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801368e:	b2da      	uxtb	r2, r3
 8013690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013692:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013696:	785b      	ldrb	r3, [r3, #1]
 8013698:	4618      	mov	r0, r3
 801369a:	f7fe fe7f 	bl	801239c <disk_initialize>
 801369e:	4603      	mov	r3, r0
 80136a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80136a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80136a8:	f003 0301 	and.w	r3, r3, #1
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d001      	beq.n	80136b4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80136b0:	2303      	movs	r3, #3
 80136b2:	e1e3      	b.n	8013a7c <find_volume+0x47c>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80136b4:	79fb      	ldrb	r3, [r7, #7]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d007      	beq.n	80136ca <find_volume+0xca>
 80136ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80136be:	f003 0304 	and.w	r3, r3, #4
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d001      	beq.n	80136ca <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80136c6:	230a      	movs	r3, #10
 80136c8:	e1d8      	b.n	8013a7c <find_volume+0x47c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80136ca:	2300      	movs	r3, #0
 80136cc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80136ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80136d0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80136d2:	f7ff ff3f 	bl	8013554 <check_fs>
 80136d6:	4603      	mov	r3, r0
 80136d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80136dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80136e0:	2b02      	cmp	r3, #2
 80136e2:	d149      	bne.n	8013778 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80136e4:	2300      	movs	r3, #0
 80136e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80136e8:	e01e      	b.n	8013728 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80136ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80136f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80136f2:	011b      	lsls	r3, r3, #4
 80136f4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80136f8:	4413      	add	r3, r2
 80136fa:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80136fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136fe:	3304      	adds	r3, #4
 8013700:	781b      	ldrb	r3, [r3, #0]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d006      	beq.n	8013714 <find_volume+0x114>
 8013706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013708:	3308      	adds	r3, #8
 801370a:	4618      	mov	r0, r3
 801370c:	f7fe fee3 	bl	80124d6 <ld_dword>
 8013710:	4602      	mov	r2, r0
 8013712:	e000      	b.n	8013716 <find_volume+0x116>
 8013714:	2200      	movs	r2, #0
 8013716:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013718:	009b      	lsls	r3, r3, #2
 801371a:	3358      	adds	r3, #88	@ 0x58
 801371c:	443b      	add	r3, r7
 801371e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013724:	3301      	adds	r3, #1
 8013726:	643b      	str	r3, [r7, #64]	@ 0x40
 8013728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801372a:	2b03      	cmp	r3, #3
 801372c:	d9dd      	bls.n	80136ea <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801372e:	2300      	movs	r3, #0
 8013730:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8013732:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013734:	2b00      	cmp	r3, #0
 8013736:	d002      	beq.n	801373e <find_volume+0x13e>
 8013738:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801373a:	3b01      	subs	r3, #1
 801373c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801373e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013740:	009b      	lsls	r3, r3, #2
 8013742:	3358      	adds	r3, #88	@ 0x58
 8013744:	443b      	add	r3, r7
 8013746:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801374a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801374c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801374e:	2b00      	cmp	r3, #0
 8013750:	d005      	beq.n	801375e <find_volume+0x15e>
 8013752:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013754:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013756:	f7ff fefd 	bl	8013554 <check_fs>
 801375a:	4603      	mov	r3, r0
 801375c:	e000      	b.n	8013760 <find_volume+0x160>
 801375e:	2303      	movs	r3, #3
 8013760:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013764:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013768:	2b01      	cmp	r3, #1
 801376a:	d905      	bls.n	8013778 <find_volume+0x178>
 801376c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801376e:	3301      	adds	r3, #1
 8013770:	643b      	str	r3, [r7, #64]	@ 0x40
 8013772:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013774:	2b03      	cmp	r3, #3
 8013776:	d9e2      	bls.n	801373e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013778:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801377c:	2b04      	cmp	r3, #4
 801377e:	d101      	bne.n	8013784 <find_volume+0x184>
 8013780:	2301      	movs	r3, #1
 8013782:	e17b      	b.n	8013a7c <find_volume+0x47c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013784:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013788:	2b01      	cmp	r3, #1
 801378a:	d901      	bls.n	8013790 <find_volume+0x190>
 801378c:	230d      	movs	r3, #13
 801378e:	e175      	b.n	8013a7c <find_volume+0x47c>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013792:	3330      	adds	r3, #48	@ 0x30
 8013794:	330b      	adds	r3, #11
 8013796:	4618      	mov	r0, r3
 8013798:	f7fe fe84 	bl	80124a4 <ld_word>
 801379c:	4603      	mov	r3, r0
 801379e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80137a2:	d001      	beq.n	80137a8 <find_volume+0x1a8>
 80137a4:	230d      	movs	r3, #13
 80137a6:	e169      	b.n	8013a7c <find_volume+0x47c>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80137a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137aa:	3330      	adds	r3, #48	@ 0x30
 80137ac:	3316      	adds	r3, #22
 80137ae:	4618      	mov	r0, r3
 80137b0:	f7fe fe78 	bl	80124a4 <ld_word>
 80137b4:	4603      	mov	r3, r0
 80137b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80137b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d106      	bne.n	80137cc <find_volume+0x1cc>
 80137be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137c0:	3330      	adds	r3, #48	@ 0x30
 80137c2:	3324      	adds	r3, #36	@ 0x24
 80137c4:	4618      	mov	r0, r3
 80137c6:	f7fe fe86 	bl	80124d6 <ld_dword>
 80137ca:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80137cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80137d0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80137d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137d4:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80137d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137da:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80137dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137de:	789b      	ldrb	r3, [r3, #2]
 80137e0:	2b01      	cmp	r3, #1
 80137e2:	d005      	beq.n	80137f0 <find_volume+0x1f0>
 80137e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137e6:	789b      	ldrb	r3, [r3, #2]
 80137e8:	2b02      	cmp	r3, #2
 80137ea:	d001      	beq.n	80137f0 <find_volume+0x1f0>
 80137ec:	230d      	movs	r3, #13
 80137ee:	e145      	b.n	8013a7c <find_volume+0x47c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80137f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137f2:	789b      	ldrb	r3, [r3, #2]
 80137f4:	461a      	mov	r2, r3
 80137f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80137f8:	fb02 f303 	mul.w	r3, r2, r3
 80137fc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80137fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013800:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013804:	461a      	mov	r2, r3
 8013806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013808:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801380a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801380c:	895b      	ldrh	r3, [r3, #10]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d008      	beq.n	8013824 <find_volume+0x224>
 8013812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013814:	895b      	ldrh	r3, [r3, #10]
 8013816:	461a      	mov	r2, r3
 8013818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801381a:	895b      	ldrh	r3, [r3, #10]
 801381c:	3b01      	subs	r3, #1
 801381e:	4013      	ands	r3, r2
 8013820:	2b00      	cmp	r3, #0
 8013822:	d001      	beq.n	8013828 <find_volume+0x228>
 8013824:	230d      	movs	r3, #13
 8013826:	e129      	b.n	8013a7c <find_volume+0x47c>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801382a:	3330      	adds	r3, #48	@ 0x30
 801382c:	3311      	adds	r3, #17
 801382e:	4618      	mov	r0, r3
 8013830:	f7fe fe38 	bl	80124a4 <ld_word>
 8013834:	4603      	mov	r3, r0
 8013836:	461a      	mov	r2, r3
 8013838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801383a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801383c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801383e:	891b      	ldrh	r3, [r3, #8]
 8013840:	f003 030f 	and.w	r3, r3, #15
 8013844:	b29b      	uxth	r3, r3
 8013846:	2b00      	cmp	r3, #0
 8013848:	d001      	beq.n	801384e <find_volume+0x24e>
 801384a:	230d      	movs	r3, #13
 801384c:	e116      	b.n	8013a7c <find_volume+0x47c>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801384e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013850:	3330      	adds	r3, #48	@ 0x30
 8013852:	3313      	adds	r3, #19
 8013854:	4618      	mov	r0, r3
 8013856:	f7fe fe25 	bl	80124a4 <ld_word>
 801385a:	4603      	mov	r3, r0
 801385c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801385e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013860:	2b00      	cmp	r3, #0
 8013862:	d106      	bne.n	8013872 <find_volume+0x272>
 8013864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013866:	3330      	adds	r3, #48	@ 0x30
 8013868:	3320      	adds	r3, #32
 801386a:	4618      	mov	r0, r3
 801386c:	f7fe fe33 	bl	80124d6 <ld_dword>
 8013870:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013874:	3330      	adds	r3, #48	@ 0x30
 8013876:	330e      	adds	r3, #14
 8013878:	4618      	mov	r0, r3
 801387a:	f7fe fe13 	bl	80124a4 <ld_word>
 801387e:	4603      	mov	r3, r0
 8013880:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013882:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013884:	2b00      	cmp	r3, #0
 8013886:	d101      	bne.n	801388c <find_volume+0x28c>
 8013888:	230d      	movs	r3, #13
 801388a:	e0f7      	b.n	8013a7c <find_volume+0x47c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801388c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801388e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013890:	4413      	add	r3, r2
 8013892:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013894:	8912      	ldrh	r2, [r2, #8]
 8013896:	0912      	lsrs	r2, r2, #4
 8013898:	b292      	uxth	r2, r2
 801389a:	4413      	add	r3, r2
 801389c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801389e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80138a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138a2:	429a      	cmp	r2, r3
 80138a4:	d204      	bcs.n	80138b0 <find_volume+0x2b0>
 80138a6:	230d      	movs	r3, #13
 80138a8:	e0e8      	b.n	8013a7c <find_volume+0x47c>
 80138aa:	bf00      	nop
 80138ac:	20002b24 	.word	0x20002b24
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80138b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80138b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138b4:	1ad3      	subs	r3, r2, r3
 80138b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80138b8:	8952      	ldrh	r2, [r2, #10]
 80138ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80138be:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80138c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d101      	bne.n	80138ca <find_volume+0x2ca>
 80138c6:	230d      	movs	r3, #13
 80138c8:	e0d8      	b.n	8013a7c <find_volume+0x47c>
		fmt = FS_FAT32;
 80138ca:	2303      	movs	r3, #3
 80138cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80138d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138d2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80138d6:	4293      	cmp	r3, r2
 80138d8:	d802      	bhi.n	80138e0 <find_volume+0x2e0>
 80138da:	2302      	movs	r3, #2
 80138dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80138e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138e2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80138e6:	4293      	cmp	r3, r2
 80138e8:	d802      	bhi.n	80138f0 <find_volume+0x2f0>
 80138ea:	2301      	movs	r3, #1
 80138ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80138f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138f2:	1c9a      	adds	r2, r3, #2
 80138f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138f6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80138f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138fa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80138fc:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80138fe:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013900:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013902:	441a      	add	r2, r3
 8013904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013906:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8013908:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801390a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801390c:	441a      	add	r2, r3
 801390e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013910:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8013912:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013916:	2b03      	cmp	r3, #3
 8013918:	d11e      	bne.n	8013958 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801391a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801391c:	3330      	adds	r3, #48	@ 0x30
 801391e:	332a      	adds	r3, #42	@ 0x2a
 8013920:	4618      	mov	r0, r3
 8013922:	f7fe fdbf 	bl	80124a4 <ld_word>
 8013926:	4603      	mov	r3, r0
 8013928:	2b00      	cmp	r3, #0
 801392a:	d001      	beq.n	8013930 <find_volume+0x330>
 801392c:	230d      	movs	r3, #13
 801392e:	e0a5      	b.n	8013a7c <find_volume+0x47c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013932:	891b      	ldrh	r3, [r3, #8]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d001      	beq.n	801393c <find_volume+0x33c>
 8013938:	230d      	movs	r3, #13
 801393a:	e09f      	b.n	8013a7c <find_volume+0x47c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801393c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801393e:	3330      	adds	r3, #48	@ 0x30
 8013940:	332c      	adds	r3, #44	@ 0x2c
 8013942:	4618      	mov	r0, r3
 8013944:	f7fe fdc7 	bl	80124d6 <ld_dword>
 8013948:	4602      	mov	r2, r0
 801394a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801394c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801394e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013950:	695b      	ldr	r3, [r3, #20]
 8013952:	009b      	lsls	r3, r3, #2
 8013954:	647b      	str	r3, [r7, #68]	@ 0x44
 8013956:	e01f      	b.n	8013998 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801395a:	891b      	ldrh	r3, [r3, #8]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d101      	bne.n	8013964 <find_volume+0x364>
 8013960:	230d      	movs	r3, #13
 8013962:	e08b      	b.n	8013a7c <find_volume+0x47c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013966:	6a1a      	ldr	r2, [r3, #32]
 8013968:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801396a:	441a      	add	r2, r3
 801396c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801396e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013970:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013974:	2b02      	cmp	r3, #2
 8013976:	d103      	bne.n	8013980 <find_volume+0x380>
 8013978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801397a:	695b      	ldr	r3, [r3, #20]
 801397c:	005b      	lsls	r3, r3, #1
 801397e:	e00a      	b.n	8013996 <find_volume+0x396>
 8013980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013982:	695a      	ldr	r2, [r3, #20]
 8013984:	4613      	mov	r3, r2
 8013986:	005b      	lsls	r3, r3, #1
 8013988:	4413      	add	r3, r2
 801398a:	085a      	lsrs	r2, r3, #1
 801398c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801398e:	695b      	ldr	r3, [r3, #20]
 8013990:	f003 0301 	and.w	r3, r3, #1
 8013994:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013996:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801399a:	699a      	ldr	r2, [r3, #24]
 801399c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801399e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80139a2:	0a5b      	lsrs	r3, r3, #9
 80139a4:	429a      	cmp	r2, r3
 80139a6:	d201      	bcs.n	80139ac <find_volume+0x3ac>
 80139a8:	230d      	movs	r3, #13
 80139aa:	e067      	b.n	8013a7c <find_volume+0x47c>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80139ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139ae:	f04f 32ff 	mov.w	r2, #4294967295
 80139b2:	611a      	str	r2, [r3, #16]
 80139b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139b6:	691a      	ldr	r2, [r3, #16]
 80139b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139ba:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80139bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139be:	2280      	movs	r2, #128	@ 0x80
 80139c0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80139c2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80139c6:	2b03      	cmp	r3, #3
 80139c8:	d149      	bne.n	8013a5e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80139ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139cc:	3330      	adds	r3, #48	@ 0x30
 80139ce:	3330      	adds	r3, #48	@ 0x30
 80139d0:	4618      	mov	r0, r3
 80139d2:	f7fe fd67 	bl	80124a4 <ld_word>
 80139d6:	4603      	mov	r3, r0
 80139d8:	2b01      	cmp	r3, #1
 80139da:	d140      	bne.n	8013a5e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80139dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80139de:	3301      	adds	r3, #1
 80139e0:	4619      	mov	r1, r3
 80139e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80139e4:	f7fe fea3 	bl	801272e <move_window>
 80139e8:	4603      	mov	r3, r0
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d137      	bne.n	8013a5e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80139ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139f0:	2200      	movs	r2, #0
 80139f2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80139f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139f6:	3330      	adds	r3, #48	@ 0x30
 80139f8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80139fc:	4618      	mov	r0, r3
 80139fe:	f7fe fd51 	bl	80124a4 <ld_word>
 8013a02:	4603      	mov	r3, r0
 8013a04:	461a      	mov	r2, r3
 8013a06:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013a0a:	429a      	cmp	r2, r3
 8013a0c:	d127      	bne.n	8013a5e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a10:	3330      	adds	r3, #48	@ 0x30
 8013a12:	4618      	mov	r0, r3
 8013a14:	f7fe fd5f 	bl	80124d6 <ld_dword>
 8013a18:	4603      	mov	r3, r0
 8013a1a:	4a1a      	ldr	r2, [pc, #104]	@ (8013a84 <find_volume+0x484>)
 8013a1c:	4293      	cmp	r3, r2
 8013a1e:	d11e      	bne.n	8013a5e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a22:	3330      	adds	r3, #48	@ 0x30
 8013a24:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8013a28:	4618      	mov	r0, r3
 8013a2a:	f7fe fd54 	bl	80124d6 <ld_dword>
 8013a2e:	4603      	mov	r3, r0
 8013a30:	4a15      	ldr	r2, [pc, #84]	@ (8013a88 <find_volume+0x488>)
 8013a32:	4293      	cmp	r3, r2
 8013a34:	d113      	bne.n	8013a5e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a38:	3330      	adds	r3, #48	@ 0x30
 8013a3a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8013a3e:	4618      	mov	r0, r3
 8013a40:	f7fe fd49 	bl	80124d6 <ld_dword>
 8013a44:	4602      	mov	r2, r0
 8013a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a48:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a4c:	3330      	adds	r3, #48	@ 0x30
 8013a4e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8013a52:	4618      	mov	r0, r3
 8013a54:	f7fe fd3f 	bl	80124d6 <ld_dword>
 8013a58:	4602      	mov	r2, r0
 8013a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a5c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a60:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8013a64:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013a66:	4b09      	ldr	r3, [pc, #36]	@ (8013a8c <find_volume+0x48c>)
 8013a68:	881b      	ldrh	r3, [r3, #0]
 8013a6a:	3301      	adds	r3, #1
 8013a6c:	b29a      	uxth	r2, r3
 8013a6e:	4b07      	ldr	r3, [pc, #28]	@ (8013a8c <find_volume+0x48c>)
 8013a70:	801a      	strh	r2, [r3, #0]
 8013a72:	4b06      	ldr	r3, [pc, #24]	@ (8013a8c <find_volume+0x48c>)
 8013a74:	881a      	ldrh	r2, [r3, #0]
 8013a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a78:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8013a7a:	2300      	movs	r3, #0
}
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	3758      	adds	r7, #88	@ 0x58
 8013a80:	46bd      	mov	sp, r7
 8013a82:	bd80      	pop	{r7, pc}
 8013a84:	41615252 	.word	0x41615252
 8013a88:	61417272 	.word	0x61417272
 8013a8c:	20002b28 	.word	0x20002b28

08013a90 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b084      	sub	sp, #16
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	6078      	str	r0, [r7, #4]
 8013a98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013a9a:	2309      	movs	r3, #9
 8013a9c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d01c      	beq.n	8013ade <validate+0x4e>
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d018      	beq.n	8013ade <validate+0x4e>
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	781b      	ldrb	r3, [r3, #0]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d013      	beq.n	8013ade <validate+0x4e>
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	889a      	ldrh	r2, [r3, #4]
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	88db      	ldrh	r3, [r3, #6]
 8013ac0:	429a      	cmp	r2, r3
 8013ac2:	d10c      	bne.n	8013ade <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	785b      	ldrb	r3, [r3, #1]
 8013aca:	4618      	mov	r0, r3
 8013acc:	f7fe fc4c 	bl	8012368 <disk_status>
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	f003 0301 	and.w	r3, r3, #1
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d101      	bne.n	8013ade <validate+0x4e>
			res = FR_OK;
 8013ada:	2300      	movs	r3, #0
 8013adc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013ade:	7bfb      	ldrb	r3, [r7, #15]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d102      	bne.n	8013aea <validate+0x5a>
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	e000      	b.n	8013aec <validate+0x5c>
 8013aea:	2300      	movs	r3, #0
 8013aec:	683a      	ldr	r2, [r7, #0]
 8013aee:	6013      	str	r3, [r2, #0]
	return res;
 8013af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013af2:	4618      	mov	r0, r3
 8013af4:	3710      	adds	r7, #16
 8013af6:	46bd      	mov	sp, r7
 8013af8:	bd80      	pop	{r7, pc}
	...

08013afc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b088      	sub	sp, #32
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	60f8      	str	r0, [r7, #12]
 8013b04:	60b9      	str	r1, [r7, #8]
 8013b06:	4613      	mov	r3, r2
 8013b08:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013b0a:	68bb      	ldr	r3, [r7, #8]
 8013b0c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013b0e:	f107 0310 	add.w	r3, r7, #16
 8013b12:	4618      	mov	r0, r3
 8013b14:	f7ff fcd9 	bl	80134ca <get_ldnumber>
 8013b18:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013b1a:	69fb      	ldr	r3, [r7, #28]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	da01      	bge.n	8013b24 <f_mount+0x28>
 8013b20:	230b      	movs	r3, #11
 8013b22:	e028      	b.n	8013b76 <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013b24:	4a16      	ldr	r2, [pc, #88]	@ (8013b80 <f_mount+0x84>)
 8013b26:	69fb      	ldr	r3, [r7, #28]
 8013b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013b2c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013b2e:	69bb      	ldr	r3, [r7, #24]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d002      	beq.n	8013b3a <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013b34:	69bb      	ldr	r3, [r7, #24]
 8013b36:	2200      	movs	r2, #0
 8013b38:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d002      	beq.n	8013b46 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	2200      	movs	r2, #0
 8013b44:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013b46:	68fa      	ldr	r2, [r7, #12]
 8013b48:	490d      	ldr	r1, [pc, #52]	@ (8013b80 <f_mount+0x84>)
 8013b4a:	69fb      	ldr	r3, [r7, #28]
 8013b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d002      	beq.n	8013b5c <f_mount+0x60>
 8013b56:	79fb      	ldrb	r3, [r7, #7]
 8013b58:	2b01      	cmp	r3, #1
 8013b5a:	d001      	beq.n	8013b60 <f_mount+0x64>
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	e00a      	b.n	8013b76 <f_mount+0x7a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013b60:	f107 010c 	add.w	r1, r7, #12
 8013b64:	f107 0308 	add.w	r3, r7, #8
 8013b68:	2200      	movs	r2, #0
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	f7ff fd48 	bl	8013600 <find_volume>
 8013b70:	4603      	mov	r3, r0
 8013b72:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b76:	4618      	mov	r0, r3
 8013b78:	3720      	adds	r7, #32
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	bd80      	pop	{r7, pc}
 8013b7e:	bf00      	nop
 8013b80:	20002b24 	.word	0x20002b24

08013b84 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013b84:	b580      	push	{r7, lr}
 8013b86:	b098      	sub	sp, #96	@ 0x60
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	60f8      	str	r0, [r7, #12]
 8013b8c:	60b9      	str	r1, [r7, #8]
 8013b8e:	4613      	mov	r3, r2
 8013b90:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d101      	bne.n	8013b9c <f_open+0x18>
 8013b98:	2309      	movs	r3, #9
 8013b9a:	e17a      	b.n	8013e92 <f_open+0x30e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013b9c:	79fb      	ldrb	r3, [r7, #7]
 8013b9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013ba2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013ba4:	79fa      	ldrb	r2, [r7, #7]
 8013ba6:	f107 0114 	add.w	r1, r7, #20
 8013baa:	f107 0308 	add.w	r3, r7, #8
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f7ff fd26 	bl	8013600 <find_volume>
 8013bb4:	4603      	mov	r3, r0
 8013bb6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8013bba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	f040 815e 	bne.w	8013e80 <f_open+0x2fc>
		dj.obj.fs = fs;
 8013bc4:	697b      	ldr	r3, [r7, #20]
 8013bc6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013bc8:	68ba      	ldr	r2, [r7, #8]
 8013bca:	f107 0318 	add.w	r3, r7, #24
 8013bce:	4611      	mov	r1, r2
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	f7ff fc09 	bl	80133e8 <follow_path>
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013bdc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d107      	bne.n	8013bf4 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013be4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013be8:	b25b      	sxtb	r3, r3
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	da02      	bge.n	8013bf4 <f_open+0x70>
				res = FR_INVALID_NAME;
 8013bee:	2306      	movs	r3, #6
 8013bf0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013bf4:	79fb      	ldrb	r3, [r7, #7]
 8013bf6:	f003 031c 	and.w	r3, r3, #28
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d078      	beq.n	8013cf0 <f_open+0x16c>
			if (res != FR_OK) {					/* No file, create new */
 8013bfe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d010      	beq.n	8013c28 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013c06:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013c0a:	2b04      	cmp	r3, #4
 8013c0c:	d107      	bne.n	8013c1e <f_open+0x9a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8013c0e:	f107 0318 	add.w	r3, r7, #24
 8013c12:	4618      	mov	r0, r3
 8013c14:	f7ff fb22 	bl	801325c <dir_register>
 8013c18:	4603      	mov	r3, r0
 8013c1a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013c1e:	79fb      	ldrb	r3, [r7, #7]
 8013c20:	f043 0308 	orr.w	r3, r3, #8
 8013c24:	71fb      	strb	r3, [r7, #7]
 8013c26:	e010      	b.n	8013c4a <f_open+0xc6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013c28:	7fbb      	ldrb	r3, [r7, #30]
 8013c2a:	f003 0311 	and.w	r3, r3, #17
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d003      	beq.n	8013c3a <f_open+0xb6>
					res = FR_DENIED;
 8013c32:	2307      	movs	r3, #7
 8013c34:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013c38:	e007      	b.n	8013c4a <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013c3a:	79fb      	ldrb	r3, [r7, #7]
 8013c3c:	f003 0304 	and.w	r3, r3, #4
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d002      	beq.n	8013c4a <f_open+0xc6>
 8013c44:	2308      	movs	r3, #8
 8013c46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013c4a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d168      	bne.n	8013d24 <f_open+0x1a0>
 8013c52:	79fb      	ldrb	r3, [r7, #7]
 8013c54:	f003 0308 	and.w	r3, r3, #8
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d063      	beq.n	8013d24 <f_open+0x1a0>
				dw = GET_FATTIME();
 8013c5c:	f7fd ff9e 	bl	8011b9c <get_fattime>
 8013c60:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c64:	330e      	adds	r3, #14
 8013c66:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013c68:	4618      	mov	r0, r3
 8013c6a:	f7fe fc72 	bl	8012552 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c70:	3316      	adds	r3, #22
 8013c72:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013c74:	4618      	mov	r0, r3
 8013c76:	f7fe fc6c 	bl	8012552 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c7c:	330b      	adds	r3, #11
 8013c7e:	2220      	movs	r2, #32
 8013c80:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013c82:	697b      	ldr	r3, [r7, #20]
 8013c84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013c86:	4611      	mov	r1, r2
 8013c88:	4618      	mov	r0, r3
 8013c8a:	f7ff fa53 	bl	8013134 <ld_clust>
 8013c8e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013c90:	697b      	ldr	r3, [r7, #20]
 8013c92:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013c94:	2200      	movs	r2, #0
 8013c96:	4618      	mov	r0, r3
 8013c98:	f7ff fa6b 	bl	8013172 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c9e:	331c      	adds	r3, #28
 8013ca0:	2100      	movs	r1, #0
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	f7fe fc55 	bl	8012552 <st_dword>
					fs->wflag = 1;
 8013ca8:	697b      	ldr	r3, [r7, #20]
 8013caa:	2201      	movs	r2, #1
 8013cac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013cae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d037      	beq.n	8013d24 <f_open+0x1a0>
						dw = fs->winsect;
 8013cb4:	697b      	ldr	r3, [r7, #20]
 8013cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013cb8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013cba:	f107 0318 	add.w	r3, r7, #24
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	f7fe ff7e 	bl	8012bc4 <remove_chain>
 8013cc8:	4603      	mov	r3, r0
 8013cca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8013cce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d126      	bne.n	8013d24 <f_open+0x1a0>
							res = move_window(fs, dw);
 8013cd6:	697b      	ldr	r3, [r7, #20]
 8013cd8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013cda:	4618      	mov	r0, r3
 8013cdc:	f7fe fd27 	bl	801272e <move_window>
 8013ce0:	4603      	mov	r3, r0
 8013ce2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013ce6:	697b      	ldr	r3, [r7, #20]
 8013ce8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013cea:	3a01      	subs	r2, #1
 8013cec:	60da      	str	r2, [r3, #12]
 8013cee:	e019      	b.n	8013d24 <f_open+0x1a0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013cf0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d115      	bne.n	8013d24 <f_open+0x1a0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013cf8:	7fbb      	ldrb	r3, [r7, #30]
 8013cfa:	f003 0310 	and.w	r3, r3, #16
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d003      	beq.n	8013d0a <f_open+0x186>
					res = FR_NO_FILE;
 8013d02:	2304      	movs	r3, #4
 8013d04:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013d08:	e00c      	b.n	8013d24 <f_open+0x1a0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013d0a:	79fb      	ldrb	r3, [r7, #7]
 8013d0c:	f003 0302 	and.w	r3, r3, #2
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d007      	beq.n	8013d24 <f_open+0x1a0>
 8013d14:	7fbb      	ldrb	r3, [r7, #30]
 8013d16:	f003 0301 	and.w	r3, r3, #1
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d002      	beq.n	8013d24 <f_open+0x1a0>
						res = FR_DENIED;
 8013d1e:	2307      	movs	r3, #7
 8013d20:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013d24:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d10f      	bne.n	8013d4c <f_open+0x1c8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013d2c:	79fb      	ldrb	r3, [r7, #7]
 8013d2e:	f003 0308 	and.w	r3, r3, #8
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d003      	beq.n	8013d3e <f_open+0x1ba>
				mode |= FA_MODIFIED;
 8013d36:	79fb      	ldrb	r3, [r7, #7]
 8013d38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013d3c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013d3e:	697b      	ldr	r3, [r7, #20]
 8013d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8013d46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	625a      	str	r2, [r3, #36]	@ 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013d4c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	f040 8095 	bne.w	8013e80 <f_open+0x2fc>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013d56:	697b      	ldr	r3, [r7, #20]
 8013d58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013d5a:	4611      	mov	r1, r2
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	f7ff f9e9 	bl	8013134 <ld_clust>
 8013d62:	4602      	mov	r2, r0
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013d6a:	331c      	adds	r3, #28
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	f7fe fbb2 	bl	80124d6 <ld_dword>
 8013d72:	4602      	mov	r2, r0
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013d7e:	697a      	ldr	r2, [r7, #20]
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013d84:	697b      	ldr	r3, [r7, #20]
 8013d86:	88da      	ldrh	r2, [r3, #6]
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	79fa      	ldrb	r2, [r7, #7]
 8013d90:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	2200      	movs	r2, #0
 8013d96:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	2200      	movs	r2, #0
 8013da2:	615a      	str	r2, [r3, #20]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	332c      	adds	r3, #44	@ 0x2c
 8013da8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013dac:	2100      	movs	r1, #0
 8013dae:	4618      	mov	r0, r3
 8013db0:	f7fe fc1c 	bl	80125ec <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013db4:	79fb      	ldrb	r3, [r7, #7]
 8013db6:	f003 0320 	and.w	r3, r3, #32
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d060      	beq.n	8013e80 <f_open+0x2fc>
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	68db      	ldr	r3, [r3, #12]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d05c      	beq.n	8013e80 <f_open+0x2fc>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	68da      	ldr	r2, [r3, #12]
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013dce:	697b      	ldr	r3, [r7, #20]
 8013dd0:	895b      	ldrh	r3, [r3, #10]
 8013dd2:	025b      	lsls	r3, r3, #9
 8013dd4:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	689b      	ldr	r3, [r3, #8]
 8013dda:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	68db      	ldr	r3, [r3, #12]
 8013de0:	657b      	str	r3, [r7, #84]	@ 0x54
 8013de2:	e016      	b.n	8013e12 <f_open+0x28e>
					clst = get_fat(&fp->obj, clst);
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013de8:	4618      	mov	r0, r3
 8013dea:	f7fe fd5a 	bl	80128a2 <get_fat>
 8013dee:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013df0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013df2:	2b01      	cmp	r3, #1
 8013df4:	d802      	bhi.n	8013dfc <f_open+0x278>
 8013df6:	2302      	movs	r3, #2
 8013df8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013dfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e02:	d102      	bne.n	8013e0a <f_open+0x286>
 8013e04:	2301      	movs	r3, #1
 8013e06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013e0a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013e0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013e0e:	1ad3      	subs	r3, r2, r3
 8013e10:	657b      	str	r3, [r7, #84]	@ 0x54
 8013e12:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d103      	bne.n	8013e22 <f_open+0x29e>
 8013e1a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013e1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013e1e:	429a      	cmp	r2, r3
 8013e20:	d8e0      	bhi.n	8013de4 <f_open+0x260>
				}
				fp->clust = clst;
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013e26:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013e28:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d127      	bne.n	8013e80 <f_open+0x2fc>
 8013e30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d022      	beq.n	8013e80 <f_open+0x2fc>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013e3a:	697b      	ldr	r3, [r7, #20]
 8013e3c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013e3e:	4618      	mov	r0, r3
 8013e40:	f7fe fd10 	bl	8012864 <clust2sect>
 8013e44:	6478      	str	r0, [r7, #68]	@ 0x44
 8013e46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d103      	bne.n	8013e54 <f_open+0x2d0>
						res = FR_INT_ERR;
 8013e4c:	2302      	movs	r3, #2
 8013e4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013e52:	e015      	b.n	8013e80 <f_open+0x2fc>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013e54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e56:	0a5a      	lsrs	r2, r3, #9
 8013e58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e5a:	441a      	add	r2, r3
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	61da      	str	r2, [r3, #28]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013e60:	697b      	ldr	r3, [r7, #20]
 8013e62:	7858      	ldrb	r0, [r3, #1]
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	69da      	ldr	r2, [r3, #28]
 8013e6e:	2301      	movs	r3, #1
 8013e70:	f7fe faba 	bl	80123e8 <disk_read>
 8013e74:	4603      	mov	r3, r0
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d002      	beq.n	8013e80 <f_open+0x2fc>
 8013e7a:	2301      	movs	r3, #1
 8013e7c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013e80:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d002      	beq.n	8013e8e <f_open+0x30a>
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	2200      	movs	r2, #0
 8013e8c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013e8e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8013e92:	4618      	mov	r0, r3
 8013e94:	3760      	adds	r7, #96	@ 0x60
 8013e96:	46bd      	mov	sp, r7
 8013e98:	bd80      	pop	{r7, pc}

08013e9a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013e9a:	b580      	push	{r7, lr}
 8013e9c:	b08c      	sub	sp, #48	@ 0x30
 8013e9e:	af00      	add	r7, sp, #0
 8013ea0:	60f8      	str	r0, [r7, #12]
 8013ea2:	60b9      	str	r1, [r7, #8]
 8013ea4:	607a      	str	r2, [r7, #4]
 8013ea6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013eac:	683b      	ldr	r3, [r7, #0]
 8013eae:	2200      	movs	r2, #0
 8013eb0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	f107 0210 	add.w	r2, r7, #16
 8013eb8:	4611      	mov	r1, r2
 8013eba:	4618      	mov	r0, r3
 8013ebc:	f7ff fde8 	bl	8013a90 <validate>
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013ec6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d107      	bne.n	8013ede <f_write+0x44>
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	7c5b      	ldrb	r3, [r3, #17]
 8013ed2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8013ed6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d002      	beq.n	8013ee4 <f_write+0x4a>
 8013ede:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013ee2:	e14b      	b.n	801417c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	7c1b      	ldrb	r3, [r3, #16]
 8013ee8:	f003 0302 	and.w	r3, r3, #2
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d101      	bne.n	8013ef4 <f_write+0x5a>
 8013ef0:	2307      	movs	r3, #7
 8013ef2:	e143      	b.n	801417c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	695a      	ldr	r2, [r3, #20]
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	441a      	add	r2, r3
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	695b      	ldr	r3, [r3, #20]
 8013f00:	429a      	cmp	r2, r3
 8013f02:	f080 812d 	bcs.w	8014160 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	695b      	ldr	r3, [r3, #20]
 8013f0a:	43db      	mvns	r3, r3
 8013f0c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013f0e:	e127      	b.n	8014160 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	695b      	ldr	r3, [r3, #20]
 8013f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	f040 80e3 	bne.w	80140e4 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	695b      	ldr	r3, [r3, #20]
 8013f22:	0a5b      	lsrs	r3, r3, #9
 8013f24:	693a      	ldr	r2, [r7, #16]
 8013f26:	8952      	ldrh	r2, [r2, #10]
 8013f28:	3a01      	subs	r2, #1
 8013f2a:	4013      	ands	r3, r2
 8013f2c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013f2e:	69bb      	ldr	r3, [r7, #24]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d143      	bne.n	8013fbc <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	695b      	ldr	r3, [r3, #20]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d10c      	bne.n	8013f56 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	689b      	ldr	r3, [r3, #8]
 8013f40:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d11a      	bne.n	8013f7e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	2100      	movs	r1, #0
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	f7fe fe9e 	bl	8012c8e <create_chain>
 8013f52:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013f54:	e013      	b.n	8013f7e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d007      	beq.n	8013f6e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	695b      	ldr	r3, [r3, #20]
 8013f62:	4619      	mov	r1, r3
 8013f64:	68f8      	ldr	r0, [r7, #12]
 8013f66:	f7fe ff2a 	bl	8012dbe <clmt_clust>
 8013f6a:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013f6c:	e007      	b.n	8013f7e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013f6e:	68fa      	ldr	r2, [r7, #12]
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	699b      	ldr	r3, [r3, #24]
 8013f74:	4619      	mov	r1, r3
 8013f76:	4610      	mov	r0, r2
 8013f78:	f7fe fe89 	bl	8012c8e <create_chain>
 8013f7c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	f000 80f2 	beq.w	801416a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f88:	2b01      	cmp	r3, #1
 8013f8a:	d104      	bne.n	8013f96 <f_write+0xfc>
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	2202      	movs	r2, #2
 8013f90:	745a      	strb	r2, [r3, #17]
 8013f92:	2302      	movs	r3, #2
 8013f94:	e0f2      	b.n	801417c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f9c:	d104      	bne.n	8013fa8 <f_write+0x10e>
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	2201      	movs	r2, #1
 8013fa2:	745a      	strb	r2, [r3, #17]
 8013fa4:	2301      	movs	r3, #1
 8013fa6:	e0e9      	b.n	801417c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013fac:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	689b      	ldr	r3, [r3, #8]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d102      	bne.n	8013fbc <f_write+0x122>
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013fba:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	7c1b      	ldrb	r3, [r3, #16]
 8013fc0:	b25b      	sxtb	r3, r3
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	da18      	bge.n	8013ff8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013fc6:	693b      	ldr	r3, [r7, #16]
 8013fc8:	7858      	ldrb	r0, [r3, #1]
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	69da      	ldr	r2, [r3, #28]
 8013fd4:	2301      	movs	r3, #1
 8013fd6:	f7fe fa27 	bl	8012428 <disk_write>
 8013fda:	4603      	mov	r3, r0
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d004      	beq.n	8013fea <f_write+0x150>
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	2201      	movs	r2, #1
 8013fe4:	745a      	strb	r2, [r3, #17]
 8013fe6:	2301      	movs	r3, #1
 8013fe8:	e0c8      	b.n	801417c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	7c1b      	ldrb	r3, [r3, #16]
 8013fee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013ff2:	b2da      	uxtb	r2, r3
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013ff8:	693a      	ldr	r2, [r7, #16]
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	699b      	ldr	r3, [r3, #24]
 8013ffe:	4619      	mov	r1, r3
 8014000:	4610      	mov	r0, r2
 8014002:	f7fe fc2f 	bl	8012864 <clust2sect>
 8014006:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014008:	697b      	ldr	r3, [r7, #20]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d104      	bne.n	8014018 <f_write+0x17e>
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	2202      	movs	r2, #2
 8014012:	745a      	strb	r2, [r3, #17]
 8014014:	2302      	movs	r3, #2
 8014016:	e0b1      	b.n	801417c <f_write+0x2e2>
			sect += csect;
 8014018:	697a      	ldr	r2, [r7, #20]
 801401a:	69bb      	ldr	r3, [r7, #24]
 801401c:	4413      	add	r3, r2
 801401e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	0a5b      	lsrs	r3, r3, #9
 8014024:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8014026:	6a3b      	ldr	r3, [r7, #32]
 8014028:	2b00      	cmp	r3, #0
 801402a:	d03c      	beq.n	80140a6 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801402c:	69ba      	ldr	r2, [r7, #24]
 801402e:	6a3b      	ldr	r3, [r7, #32]
 8014030:	4413      	add	r3, r2
 8014032:	693a      	ldr	r2, [r7, #16]
 8014034:	8952      	ldrh	r2, [r2, #10]
 8014036:	4293      	cmp	r3, r2
 8014038:	d905      	bls.n	8014046 <f_write+0x1ac>
					cc = fs->csize - csect;
 801403a:	693b      	ldr	r3, [r7, #16]
 801403c:	895b      	ldrh	r3, [r3, #10]
 801403e:	461a      	mov	r2, r3
 8014040:	69bb      	ldr	r3, [r7, #24]
 8014042:	1ad3      	subs	r3, r2, r3
 8014044:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014046:	693b      	ldr	r3, [r7, #16]
 8014048:	7858      	ldrb	r0, [r3, #1]
 801404a:	6a3b      	ldr	r3, [r7, #32]
 801404c:	697a      	ldr	r2, [r7, #20]
 801404e:	69f9      	ldr	r1, [r7, #28]
 8014050:	f7fe f9ea 	bl	8012428 <disk_write>
 8014054:	4603      	mov	r3, r0
 8014056:	2b00      	cmp	r3, #0
 8014058:	d004      	beq.n	8014064 <f_write+0x1ca>
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	2201      	movs	r2, #1
 801405e:	745a      	strb	r2, [r3, #17]
 8014060:	2301      	movs	r3, #1
 8014062:	e08b      	b.n	801417c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	69da      	ldr	r2, [r3, #28]
 8014068:	697b      	ldr	r3, [r7, #20]
 801406a:	1ad3      	subs	r3, r2, r3
 801406c:	6a3a      	ldr	r2, [r7, #32]
 801406e:	429a      	cmp	r2, r3
 8014070:	d915      	bls.n	801409e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	69da      	ldr	r2, [r3, #28]
 801407c:	697b      	ldr	r3, [r7, #20]
 801407e:	1ad3      	subs	r3, r2, r3
 8014080:	025b      	lsls	r3, r3, #9
 8014082:	69fa      	ldr	r2, [r7, #28]
 8014084:	4413      	add	r3, r2
 8014086:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801408a:	4619      	mov	r1, r3
 801408c:	f7fe fa8d 	bl	80125aa <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	7c1b      	ldrb	r3, [r3, #16]
 8014094:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014098:	b2da      	uxtb	r2, r3
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801409e:	6a3b      	ldr	r3, [r7, #32]
 80140a0:	025b      	lsls	r3, r3, #9
 80140a2:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80140a4:	e03f      	b.n	8014126 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	69db      	ldr	r3, [r3, #28]
 80140aa:	697a      	ldr	r2, [r7, #20]
 80140ac:	429a      	cmp	r2, r3
 80140ae:	d016      	beq.n	80140de <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	695a      	ldr	r2, [r3, #20]
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80140b8:	429a      	cmp	r2, r3
 80140ba:	d210      	bcs.n	80140de <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80140bc:	693b      	ldr	r3, [r7, #16]
 80140be:	7858      	ldrb	r0, [r3, #1]
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 80140c6:	2301      	movs	r3, #1
 80140c8:	697a      	ldr	r2, [r7, #20]
 80140ca:	f7fe f98d 	bl	80123e8 <disk_read>
 80140ce:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d004      	beq.n	80140de <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	2201      	movs	r2, #1
 80140d8:	745a      	strb	r2, [r3, #17]
 80140da:	2301      	movs	r3, #1
 80140dc:	e04e      	b.n	801417c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	697a      	ldr	r2, [r7, #20]
 80140e2:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	695b      	ldr	r3, [r3, #20]
 80140e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140ec:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80140f0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80140f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	429a      	cmp	r2, r3
 80140f8:	d901      	bls.n	80140fe <f_write+0x264>
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	695b      	ldr	r3, [r3, #20]
 8014108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801410c:	4413      	add	r3, r2
 801410e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014110:	69f9      	ldr	r1, [r7, #28]
 8014112:	4618      	mov	r0, r3
 8014114:	f7fe fa49 	bl	80125aa <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	7c1b      	ldrb	r3, [r3, #16]
 801411c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8014120:	b2da      	uxtb	r2, r3
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	741a      	strb	r2, [r3, #16]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014126:	69fa      	ldr	r2, [r7, #28]
 8014128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801412a:	4413      	add	r3, r2
 801412c:	61fb      	str	r3, [r7, #28]
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	695a      	ldr	r2, [r3, #20]
 8014132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014134:	441a      	add	r2, r3
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	615a      	str	r2, [r3, #20]
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	68da      	ldr	r2, [r3, #12]
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	695b      	ldr	r3, [r3, #20]
 8014142:	429a      	cmp	r2, r3
 8014144:	bf38      	it	cc
 8014146:	461a      	movcc	r2, r3
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	60da      	str	r2, [r3, #12]
 801414c:	683b      	ldr	r3, [r7, #0]
 801414e:	681a      	ldr	r2, [r3, #0]
 8014150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014152:	441a      	add	r2, r3
 8014154:	683b      	ldr	r3, [r7, #0]
 8014156:	601a      	str	r2, [r3, #0]
 8014158:	687a      	ldr	r2, [r7, #4]
 801415a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801415c:	1ad3      	subs	r3, r2, r3
 801415e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	2b00      	cmp	r3, #0
 8014164:	f47f aed4 	bne.w	8013f10 <f_write+0x76>
 8014168:	e000      	b.n	801416c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801416a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	7c1b      	ldrb	r3, [r3, #16]
 8014170:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014174:	b2da      	uxtb	r2, r3
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 801417a:	2300      	movs	r3, #0
}
 801417c:	4618      	mov	r0, r3
 801417e:	3730      	adds	r7, #48	@ 0x30
 8014180:	46bd      	mov	sp, r7
 8014182:	bd80      	pop	{r7, pc}

08014184 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014184:	b580      	push	{r7, lr}
 8014186:	b086      	sub	sp, #24
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	f107 0208 	add.w	r2, r7, #8
 8014192:	4611      	mov	r1, r2
 8014194:	4618      	mov	r0, r3
 8014196:	f7ff fc7b 	bl	8013a90 <validate>
 801419a:	4603      	mov	r3, r0
 801419c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801419e:	7dfb      	ldrb	r3, [r7, #23]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d168      	bne.n	8014276 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	7c1b      	ldrb	r3, [r3, #16]
 80141a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d062      	beq.n	8014276 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	7c1b      	ldrb	r3, [r3, #16]
 80141b4:	b25b      	sxtb	r3, r3
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	da15      	bge.n	80141e6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80141ba:	68bb      	ldr	r3, [r7, #8]
 80141bc:	7858      	ldrb	r0, [r3, #1]
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	69da      	ldr	r2, [r3, #28]
 80141c8:	2301      	movs	r3, #1
 80141ca:	f7fe f92d 	bl	8012428 <disk_write>
 80141ce:	4603      	mov	r3, r0
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d001      	beq.n	80141d8 <f_sync+0x54>
 80141d4:	2301      	movs	r3, #1
 80141d6:	e04f      	b.n	8014278 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	7c1b      	ldrb	r3, [r3, #16]
 80141dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80141e0:	b2da      	uxtb	r2, r3
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80141e6:	f7fd fcd9 	bl	8011b9c <get_fattime>
 80141ea:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80141ec:	68ba      	ldr	r2, [r7, #8]
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	6a1b      	ldr	r3, [r3, #32]
 80141f2:	4619      	mov	r1, r3
 80141f4:	4610      	mov	r0, r2
 80141f6:	f7fe fa9a 	bl	801272e <move_window>
 80141fa:	4603      	mov	r3, r0
 80141fc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80141fe:	7dfb      	ldrb	r3, [r7, #23]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d138      	bne.n	8014276 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014208:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	330b      	adds	r3, #11
 801420e:	781a      	ldrb	r2, [r3, #0]
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	330b      	adds	r3, #11
 8014214:	f042 0220 	orr.w	r2, r2, #32
 8014218:	b2d2      	uxtb	r2, r2
 801421a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	6818      	ldr	r0, [r3, #0]
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	689b      	ldr	r3, [r3, #8]
 8014224:	461a      	mov	r2, r3
 8014226:	68f9      	ldr	r1, [r7, #12]
 8014228:	f7fe ffa3 	bl	8013172 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	f103 021c 	add.w	r2, r3, #28
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	68db      	ldr	r3, [r3, #12]
 8014236:	4619      	mov	r1, r3
 8014238:	4610      	mov	r0, r2
 801423a:	f7fe f98a 	bl	8012552 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	3316      	adds	r3, #22
 8014242:	6939      	ldr	r1, [r7, #16]
 8014244:	4618      	mov	r0, r3
 8014246:	f7fe f984 	bl	8012552 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	3312      	adds	r3, #18
 801424e:	2100      	movs	r1, #0
 8014250:	4618      	mov	r0, r3
 8014252:	f7fe f963 	bl	801251c <st_word>
					fs->wflag = 1;
 8014256:	68bb      	ldr	r3, [r7, #8]
 8014258:	2201      	movs	r2, #1
 801425a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801425c:	68bb      	ldr	r3, [r7, #8]
 801425e:	4618      	mov	r0, r3
 8014260:	f7fe fa92 	bl	8012788 <sync_fs>
 8014264:	4603      	mov	r3, r0
 8014266:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	7c1b      	ldrb	r3, [r3, #16]
 801426c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014270:	b2da      	uxtb	r2, r3
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014276:	7dfb      	ldrb	r3, [r7, #23]
}
 8014278:	4618      	mov	r0, r3
 801427a:	3718      	adds	r7, #24
 801427c:	46bd      	mov	sp, r7
 801427e:	bd80      	pop	{r7, pc}

08014280 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b084      	sub	sp, #16
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014288:	6878      	ldr	r0, [r7, #4]
 801428a:	f7ff ff7b 	bl	8014184 <f_sync>
 801428e:	4603      	mov	r3, r0
 8014290:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014292:	7bfb      	ldrb	r3, [r7, #15]
 8014294:	2b00      	cmp	r3, #0
 8014296:	d10e      	bne.n	80142b6 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	f107 0208 	add.w	r2, r7, #8
 801429e:	4611      	mov	r1, r2
 80142a0:	4618      	mov	r0, r3
 80142a2:	f7ff fbf5 	bl	8013a90 <validate>
 80142a6:	4603      	mov	r3, r0
 80142a8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80142aa:	7bfb      	ldrb	r3, [r7, #15]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d102      	bne.n	80142b6 <f_close+0x36>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	2200      	movs	r2, #0
 80142b4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80142b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80142b8:	4618      	mov	r0, r3
 80142ba:	3710      	adds	r7, #16
 80142bc:	46bd      	mov	sp, r7
 80142be:	bd80      	pop	{r7, pc}

080142c0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b096      	sub	sp, #88	@ 0x58
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80142c8:	f107 010c 	add.w	r1, r7, #12
 80142cc:	1d3b      	adds	r3, r7, #4
 80142ce:	2202      	movs	r2, #2
 80142d0:	4618      	mov	r0, r3
 80142d2:	f7ff f995 	bl	8013600 <find_volume>
 80142d6:	4603      	mov	r3, r0
 80142d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 80142e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	f040 80ec 	bne.w	80144c2 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80142ea:	687a      	ldr	r2, [r7, #4]
 80142ec:	f107 0310 	add.w	r3, r7, #16
 80142f0:	4611      	mov	r1, r2
 80142f2:	4618      	mov	r0, r3
 80142f4:	f7ff f878 	bl	80133e8 <follow_path>
 80142f8:	4603      	mov	r3, r0
 80142fa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80142fe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014302:	2b00      	cmp	r3, #0
 8014304:	d102      	bne.n	801430c <f_mkdir+0x4c>
 8014306:	2308      	movs	r3, #8
 8014308:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801430c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014310:	2b04      	cmp	r3, #4
 8014312:	f040 80d6 	bne.w	80144c2 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8014316:	f107 0310 	add.w	r3, r7, #16
 801431a:	2100      	movs	r1, #0
 801431c:	4618      	mov	r0, r3
 801431e:	f7fe fcb6 	bl	8012c8e <create_chain>
 8014322:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	895b      	ldrh	r3, [r3, #10]
 8014328:	025b      	lsls	r3, r3, #9
 801432a:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 801432c:	2300      	movs	r3, #0
 801432e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8014332:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014334:	2b00      	cmp	r3, #0
 8014336:	d102      	bne.n	801433e <f_mkdir+0x7e>
 8014338:	2307      	movs	r3, #7
 801433a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 801433e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014340:	2b01      	cmp	r3, #1
 8014342:	d102      	bne.n	801434a <f_mkdir+0x8a>
 8014344:	2302      	movs	r3, #2
 8014346:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801434a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801434c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014350:	d102      	bne.n	8014358 <f_mkdir+0x98>
 8014352:	2301      	movs	r3, #1
 8014354:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8014358:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801435c:	2b00      	cmp	r3, #0
 801435e:	d106      	bne.n	801436e <f_mkdir+0xae>
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	4618      	mov	r0, r3
 8014364:	f7fe f99f 	bl	80126a6 <sync_window>
 8014368:	4603      	mov	r3, r0
 801436a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 801436e:	f7fd fc15 	bl	8011b9c <get_fattime>
 8014372:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8014374:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014378:	2b00      	cmp	r3, #0
 801437a:	d16a      	bne.n	8014452 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014380:	4618      	mov	r0, r3
 8014382:	f7fe fa6f 	bl	8012864 <clust2sect>
 8014386:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	3330      	adds	r3, #48	@ 0x30
 801438c:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 801438e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014392:	2100      	movs	r1, #0
 8014394:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8014396:	f7fe f929 	bl	80125ec <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801439a:	220b      	movs	r2, #11
 801439c:	2120      	movs	r1, #32
 801439e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80143a0:	f7fe f924 	bl	80125ec <mem_set>
					dir[DIR_Name] = '.';
 80143a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143a6:	222e      	movs	r2, #46	@ 0x2e
 80143a8:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80143aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143ac:	330b      	adds	r3, #11
 80143ae:	2210      	movs	r2, #16
 80143b0:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80143b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143b4:	3316      	adds	r3, #22
 80143b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80143b8:	4618      	mov	r0, r3
 80143ba:	f7fe f8ca 	bl	8012552 <st_dword>
					st_clust(fs, dir, dcl);
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80143c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80143c4:	4618      	mov	r0, r3
 80143c6:	f7fe fed4 	bl	8013172 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80143ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143cc:	3320      	adds	r3, #32
 80143ce:	2220      	movs	r2, #32
 80143d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80143d2:	4618      	mov	r0, r3
 80143d4:	f7fe f8e9 	bl	80125aa <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80143d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143da:	3321      	adds	r3, #33	@ 0x21
 80143dc:	222e      	movs	r2, #46	@ 0x2e
 80143de:	701a      	strb	r2, [r3, #0]
 80143e0:	69bb      	ldr	r3, [r7, #24]
 80143e2:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	781b      	ldrb	r3, [r3, #0]
 80143e8:	2b03      	cmp	r3, #3
 80143ea:	d106      	bne.n	80143fa <f_mkdir+0x13a>
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80143f2:	429a      	cmp	r2, r3
 80143f4:	d101      	bne.n	80143fa <f_mkdir+0x13a>
 80143f6:	2300      	movs	r3, #0
 80143f8:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80143fa:	68f8      	ldr	r0, [r7, #12]
 80143fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143fe:	3320      	adds	r3, #32
 8014400:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014402:	4619      	mov	r1, r3
 8014404:	f7fe feb5 	bl	8013172 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	895b      	ldrh	r3, [r3, #10]
 801440c:	653b      	str	r3, [r7, #80]	@ 0x50
 801440e:	e01b      	b.n	8014448 <f_mkdir+0x188>
					fs->winsect = dsc++;
 8014410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014412:	1c5a      	adds	r2, r3, #1
 8014414:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8014416:	68fa      	ldr	r2, [r7, #12]
 8014418:	62d3      	str	r3, [r2, #44]	@ 0x2c
					fs->wflag = 1;
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	2201      	movs	r2, #1
 801441e:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	4618      	mov	r0, r3
 8014424:	f7fe f93f 	bl	80126a6 <sync_window>
 8014428:	4603      	mov	r3, r0
 801442a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 801442e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014432:	2b00      	cmp	r3, #0
 8014434:	d10c      	bne.n	8014450 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8014436:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801443a:	2100      	movs	r1, #0
 801443c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801443e:	f7fe f8d5 	bl	80125ec <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8014442:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014444:	3b01      	subs	r3, #1
 8014446:	653b      	str	r3, [r7, #80]	@ 0x50
 8014448:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801444a:	2b00      	cmp	r3, #0
 801444c:	d1e0      	bne.n	8014410 <f_mkdir+0x150>
 801444e:	e000      	b.n	8014452 <f_mkdir+0x192>
					if (res != FR_OK) break;
 8014450:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8014452:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014456:	2b00      	cmp	r3, #0
 8014458:	d107      	bne.n	801446a <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801445a:	f107 0310 	add.w	r3, r7, #16
 801445e:	4618      	mov	r0, r3
 8014460:	f7fe fefc 	bl	801325c <dir_register>
 8014464:	4603      	mov	r3, r0
 8014466:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 801446a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801446e:	2b00      	cmp	r3, #0
 8014470:	d120      	bne.n	80144b4 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8014472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014474:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8014476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014478:	3316      	adds	r3, #22
 801447a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801447c:	4618      	mov	r0, r3
 801447e:	f7fe f868 	bl	8012552 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014486:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014488:	4618      	mov	r0, r3
 801448a:	f7fe fe72 	bl	8013172 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801448e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014490:	330b      	adds	r3, #11
 8014492:	2210      	movs	r2, #16
 8014494:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	2201      	movs	r2, #1
 801449a:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 801449c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d10e      	bne.n	80144c2 <f_mkdir+0x202>
					res = sync_fs(fs);
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	4618      	mov	r0, r3
 80144a8:	f7fe f96e 	bl	8012788 <sync_fs>
 80144ac:	4603      	mov	r3, r0
 80144ae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80144b2:	e006      	b.n	80144c2 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80144b4:	f107 0310 	add.w	r3, r7, #16
 80144b8:	2200      	movs	r2, #0
 80144ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80144bc:	4618      	mov	r0, r3
 80144be:	f7fe fb81 	bl	8012bc4 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80144c2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 80144c6:	4618      	mov	r0, r3
 80144c8:	3758      	adds	r7, #88	@ 0x58
 80144ca:	46bd      	mov	sp, r7
 80144cc:	bd80      	pop	{r7, pc}
	...

080144d0 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 80144d0:	b590      	push	{r4, r7, lr}
 80144d2:	b09d      	sub	sp, #116	@ 0x74
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	60f8      	str	r0, [r7, #12]
 80144d8:	607a      	str	r2, [r7, #4]
 80144da:	603b      	str	r3, [r7, #0]
 80144dc:	460b      	mov	r3, r1
 80144de:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 80144e0:	2301      	movs	r3, #1
 80144e2:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 80144e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80144e8:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 80144ea:	f107 030c 	add.w	r3, r7, #12
 80144ee:	4618      	mov	r0, r3
 80144f0:	f7fe ffeb 	bl	80134ca <get_ldnumber>
 80144f4:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80144f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	da02      	bge.n	8014502 <f_mkfs+0x32>
 80144fc:	230b      	movs	r3, #11
 80144fe:	f000 bc0d 	b.w	8014d1c <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8014502:	4a94      	ldr	r2, [pc, #592]	@ (8014754 <f_mkfs+0x284>)
 8014504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d005      	beq.n	801451a <f_mkfs+0x4a>
 801450e:	4a91      	ldr	r2, [pc, #580]	@ (8014754 <f_mkfs+0x284>)
 8014510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014516:	2200      	movs	r2, #0
 8014518:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 801451a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801451c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8014520:	2300      	movs	r3, #0
 8014522:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8014526:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801452a:	4618      	mov	r0, r3
 801452c:	f7fd ff36 	bl	801239c <disk_initialize>
 8014530:	4603      	mov	r3, r0
 8014532:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8014536:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 801453a:	f003 0301 	and.w	r3, r3, #1
 801453e:	2b00      	cmp	r3, #0
 8014540:	d001      	beq.n	8014546 <f_mkfs+0x76>
 8014542:	2303      	movs	r3, #3
 8014544:	e3ea      	b.n	8014d1c <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8014546:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 801454a:	f003 0304 	and.w	r3, r3, #4
 801454e:	2b00      	cmp	r3, #0
 8014550:	d001      	beq.n	8014556 <f_mkfs+0x86>
 8014552:	230a      	movs	r3, #10
 8014554:	e3e2      	b.n	8014d1c <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8014556:	f107 0214 	add.w	r2, r7, #20
 801455a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801455e:	2103      	movs	r1, #3
 8014560:	4618      	mov	r0, r3
 8014562:	f7fd ff81 	bl	8012468 <disk_ioctl>
 8014566:	4603      	mov	r3, r0
 8014568:	2b00      	cmp	r3, #0
 801456a:	d10c      	bne.n	8014586 <f_mkfs+0xb6>
 801456c:	697b      	ldr	r3, [r7, #20]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d009      	beq.n	8014586 <f_mkfs+0xb6>
 8014572:	697b      	ldr	r3, [r7, #20]
 8014574:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014578:	d805      	bhi.n	8014586 <f_mkfs+0xb6>
 801457a:	697b      	ldr	r3, [r7, #20]
 801457c:	1e5a      	subs	r2, r3, #1
 801457e:	697b      	ldr	r3, [r7, #20]
 8014580:	4013      	ands	r3, r2
 8014582:	2b00      	cmp	r3, #0
 8014584:	d001      	beq.n	801458a <f_mkfs+0xba>
 8014586:	2301      	movs	r3, #1
 8014588:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 801458a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801458e:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d003      	beq.n	801459e <f_mkfs+0xce>
 8014596:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014598:	687a      	ldr	r2, [r7, #4]
 801459a:	429a      	cmp	r2, r3
 801459c:	d309      	bcc.n	80145b2 <f_mkfs+0xe2>
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80145a4:	d805      	bhi.n	80145b2 <f_mkfs+0xe2>
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	1e5a      	subs	r2, r3, #1
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	4013      	ands	r3, r2
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d001      	beq.n	80145b6 <f_mkfs+0xe6>
 80145b2:	2313      	movs	r3, #19
 80145b4:	e3b2      	b.n	8014d1c <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 80145b6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80145b8:	687a      	ldr	r2, [r7, #4]
 80145ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80145be:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 80145c0:	683b      	ldr	r3, [r7, #0]
 80145c2:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 80145c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80145c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80145ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80145ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 80145d0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80145d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145d4:	fb02 f303 	mul.w	r3, r2, r3
 80145d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 80145da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d101      	bne.n	80145e4 <f_mkfs+0x114>
 80145e0:	230e      	movs	r3, #14
 80145e2:	e39b      	b.n	8014d1c <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 80145e4:	f107 0210 	add.w	r2, r7, #16
 80145e8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80145ec:	2101      	movs	r1, #1
 80145ee:	4618      	mov	r0, r3
 80145f0:	f7fd ff3a 	bl	8012468 <disk_ioctl>
 80145f4:	4603      	mov	r3, r0
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d001      	beq.n	80145fe <f_mkfs+0x12e>
 80145fa:	2301      	movs	r3, #1
 80145fc:	e38e      	b.n	8014d1c <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80145fe:	7afb      	ldrb	r3, [r7, #11]
 8014600:	f003 0308 	and.w	r3, r3, #8
 8014604:	2b00      	cmp	r3, #0
 8014606:	d001      	beq.n	801460c <f_mkfs+0x13c>
 8014608:	2300      	movs	r3, #0
 801460a:	e000      	b.n	801460e <f_mkfs+0x13e>
 801460c:	233f      	movs	r3, #63	@ 0x3f
 801460e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8014610:	693b      	ldr	r3, [r7, #16]
 8014612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014614:	429a      	cmp	r2, r3
 8014616:	d901      	bls.n	801461c <f_mkfs+0x14c>
 8014618:	230e      	movs	r3, #14
 801461a:	e37f      	b.n	8014d1c <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 801461c:	693a      	ldr	r2, [r7, #16]
 801461e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014620:	1ad3      	subs	r3, r2, r3
 8014622:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8014624:	693b      	ldr	r3, [r7, #16]
 8014626:	2b7f      	cmp	r3, #127	@ 0x7f
 8014628:	d801      	bhi.n	801462e <f_mkfs+0x15e>
 801462a:	230e      	movs	r3, #14
 801462c:	e376      	b.n	8014d1c <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	2b80      	cmp	r3, #128	@ 0x80
 8014632:	d901      	bls.n	8014638 <f_mkfs+0x168>
 8014634:	2313      	movs	r3, #19
 8014636:	e371      	b.n	8014d1c <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8014638:	7afb      	ldrb	r3, [r7, #11]
 801463a:	f003 0302 	and.w	r3, r3, #2
 801463e:	2b00      	cmp	r3, #0
 8014640:	d00d      	beq.n	801465e <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8014642:	7afb      	ldrb	r3, [r7, #11]
 8014644:	f003 0307 	and.w	r3, r3, #7
 8014648:	2b02      	cmp	r3, #2
 801464a:	d004      	beq.n	8014656 <f_mkfs+0x186>
 801464c:	7afb      	ldrb	r3, [r7, #11]
 801464e:	f003 0301 	and.w	r3, r3, #1
 8014652:	2b00      	cmp	r3, #0
 8014654:	d103      	bne.n	801465e <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8014656:	2303      	movs	r3, #3
 8014658:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 801465c:	e009      	b.n	8014672 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 801465e:	7afb      	ldrb	r3, [r7, #11]
 8014660:	f003 0301 	and.w	r3, r3, #1
 8014664:	2b00      	cmp	r3, #0
 8014666:	d101      	bne.n	801466c <f_mkfs+0x19c>
 8014668:	2313      	movs	r3, #19
 801466a:	e357      	b.n	8014d1c <f_mkfs+0x84c>
		fmt = FS_FAT16;
 801466c:	2302      	movs	r3, #2
 801466e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8014676:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801467a:	2b03      	cmp	r3, #3
 801467c:	d13c      	bne.n	80146f8 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 801467e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014680:	2b00      	cmp	r3, #0
 8014682:	d11b      	bne.n	80146bc <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8014684:	693b      	ldr	r3, [r7, #16]
 8014686:	0c5b      	lsrs	r3, r3, #17
 8014688:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 801468a:	2300      	movs	r3, #0
 801468c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801468e:	2301      	movs	r3, #1
 8014690:	653b      	str	r3, [r7, #80]	@ 0x50
 8014692:	e005      	b.n	80146a0 <f_mkfs+0x1d0>
 8014694:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014696:	3301      	adds	r3, #1
 8014698:	64bb      	str	r3, [r7, #72]	@ 0x48
 801469a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801469c:	005b      	lsls	r3, r3, #1
 801469e:	653b      	str	r3, [r7, #80]	@ 0x50
 80146a0:	4a2d      	ldr	r2, [pc, #180]	@ (8014758 <f_mkfs+0x288>)
 80146a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80146a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d007      	beq.n	80146bc <f_mkfs+0x1ec>
 80146ac:	4a2a      	ldr	r2, [pc, #168]	@ (8014758 <f_mkfs+0x288>)
 80146ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80146b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80146b4:	461a      	mov	r2, r3
 80146b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80146b8:	4293      	cmp	r3, r2
 80146ba:	d2eb      	bcs.n	8014694 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 80146bc:	693a      	ldr	r2, [r7, #16]
 80146be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80146c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80146c4:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 80146c6:	6a3b      	ldr	r3, [r7, #32]
 80146c8:	3302      	adds	r3, #2
 80146ca:	009a      	lsls	r2, r3, #2
 80146cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80146ce:	4413      	add	r3, r2
 80146d0:	1e5a      	subs	r2, r3, #1
 80146d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80146d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80146d8:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 80146da:	2320      	movs	r3, #32
 80146dc:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 80146de:	2300      	movs	r3, #0
 80146e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 80146e2:	6a3b      	ldr	r3, [r7, #32]
 80146e4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80146e8:	4293      	cmp	r3, r2
 80146ea:	d903      	bls.n	80146f4 <f_mkfs+0x224>
 80146ec:	6a3b      	ldr	r3, [r7, #32]
 80146ee:	4a1b      	ldr	r2, [pc, #108]	@ (801475c <f_mkfs+0x28c>)
 80146f0:	4293      	cmp	r3, r2
 80146f2:	d952      	bls.n	801479a <f_mkfs+0x2ca>
 80146f4:	230e      	movs	r3, #14
 80146f6:	e311      	b.n	8014d1c <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 80146f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d11b      	bne.n	8014736 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 80146fe:	693b      	ldr	r3, [r7, #16]
 8014700:	0b1b      	lsrs	r3, r3, #12
 8014702:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8014704:	2300      	movs	r3, #0
 8014706:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014708:	2301      	movs	r3, #1
 801470a:	653b      	str	r3, [r7, #80]	@ 0x50
 801470c:	e005      	b.n	801471a <f_mkfs+0x24a>
 801470e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014710:	3301      	adds	r3, #1
 8014712:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014714:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014716:	005b      	lsls	r3, r3, #1
 8014718:	653b      	str	r3, [r7, #80]	@ 0x50
 801471a:	4a11      	ldr	r2, [pc, #68]	@ (8014760 <f_mkfs+0x290>)
 801471c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801471e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d007      	beq.n	8014736 <f_mkfs+0x266>
 8014726:	4a0e      	ldr	r2, [pc, #56]	@ (8014760 <f_mkfs+0x290>)
 8014728:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801472a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801472e:	461a      	mov	r2, r3
 8014730:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014732:	4293      	cmp	r3, r2
 8014734:	d2eb      	bcs.n	801470e <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8014736:	693a      	ldr	r2, [r7, #16]
 8014738:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801473a:	fbb2 f3f3 	udiv	r3, r2, r3
 801473e:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8014740:	6a3b      	ldr	r3, [r7, #32]
 8014742:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8014746:	4293      	cmp	r3, r2
 8014748:	d90c      	bls.n	8014764 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 801474a:	6a3b      	ldr	r3, [r7, #32]
 801474c:	3302      	adds	r3, #2
 801474e:	005b      	lsls	r3, r3, #1
 8014750:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014752:	e012      	b.n	801477a <f_mkfs+0x2aa>
 8014754:	20002b24 	.word	0x20002b24
 8014758:	0801c298 	.word	0x0801c298
 801475c:	0ffffff5 	.word	0x0ffffff5
 8014760:	0801c2a8 	.word	0x0801c2a8
				} else {
					fmt = FS_FAT12;
 8014764:	2301      	movs	r3, #1
 8014766:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 801476a:	6a3a      	ldr	r2, [r7, #32]
 801476c:	4613      	mov	r3, r2
 801476e:	005b      	lsls	r3, r3, #1
 8014770:	4413      	add	r3, r2
 8014772:	3301      	adds	r3, #1
 8014774:	085b      	lsrs	r3, r3, #1
 8014776:	3303      	adds	r3, #3
 8014778:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 801477a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801477c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801477e:	4413      	add	r3, r2
 8014780:	1e5a      	subs	r2, r3, #1
 8014782:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014784:	fbb2 f3f3 	udiv	r3, r2, r3
 8014788:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 801478a:	2301      	movs	r3, #1
 801478c:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 801478e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014790:	015a      	lsls	r2, r3, #5
 8014792:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014794:	fbb2 f3f3 	udiv	r3, r2, r3
 8014798:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 801479a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801479c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801479e:	4413      	add	r3, r2
 80147a0:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 80147a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80147a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80147a6:	fb03 f202 	mul.w	r2, r3, r2
 80147aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80147ac:	4413      	add	r3, r2
 80147ae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80147b0:	4413      	add	r3, r2
 80147b2:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 80147b4:	697a      	ldr	r2, [r7, #20]
 80147b6:	69fb      	ldr	r3, [r7, #28]
 80147b8:	4413      	add	r3, r2
 80147ba:	1e5a      	subs	r2, r3, #1
 80147bc:	697b      	ldr	r3, [r7, #20]
 80147be:	425b      	negs	r3, r3
 80147c0:	401a      	ands	r2, r3
 80147c2:	69fb      	ldr	r3, [r7, #28]
 80147c4:	1ad3      	subs	r3, r2, r3
 80147c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 80147c8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80147cc:	2b03      	cmp	r3, #3
 80147ce:	d108      	bne.n	80147e2 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 80147d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80147d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80147d4:	4413      	add	r3, r2
 80147d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80147d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80147da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80147dc:	4413      	add	r3, r2
 80147de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80147e0:	e006      	b.n	80147f0 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 80147e2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80147e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80147e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80147ea:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80147ec:	4413      	add	r3, r2
 80147ee:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 80147f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80147f2:	011a      	lsls	r2, r3, #4
 80147f4:	69fb      	ldr	r3, [r7, #28]
 80147f6:	441a      	add	r2, r3
 80147f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147fa:	1ad2      	subs	r2, r2, r3
 80147fc:	693b      	ldr	r3, [r7, #16]
 80147fe:	429a      	cmp	r2, r3
 8014800:	d901      	bls.n	8014806 <f_mkfs+0x336>
 8014802:	230e      	movs	r3, #14
 8014804:	e28a      	b.n	8014d1c <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8014806:	693a      	ldr	r2, [r7, #16]
 8014808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801480a:	1ad2      	subs	r2, r2, r3
 801480c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801480e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014810:	fb01 f303 	mul.w	r3, r1, r3
 8014814:	1ad2      	subs	r2, r2, r3
 8014816:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014818:	1ad2      	subs	r2, r2, r3
 801481a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801481c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014820:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8014822:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014826:	2b03      	cmp	r3, #3
 8014828:	d10f      	bne.n	801484a <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 801482a:	6a3b      	ldr	r3, [r7, #32]
 801482c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8014830:	4293      	cmp	r3, r2
 8014832:	d80a      	bhi.n	801484a <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d105      	bne.n	8014846 <f_mkfs+0x376>
 801483a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801483c:	085b      	lsrs	r3, r3, #1
 801483e:	607b      	str	r3, [r7, #4]
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d144      	bne.n	80148d0 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8014846:	230e      	movs	r3, #14
 8014848:	e268      	b.n	8014d1c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 801484a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801484e:	2b02      	cmp	r3, #2
 8014850:	d133      	bne.n	80148ba <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8014852:	6a3b      	ldr	r3, [r7, #32]
 8014854:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8014858:	4293      	cmp	r3, r2
 801485a:	d91e      	bls.n	801489a <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d107      	bne.n	8014872 <f_mkfs+0x3a2>
 8014862:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014864:	005b      	lsls	r3, r3, #1
 8014866:	2b40      	cmp	r3, #64	@ 0x40
 8014868:	d803      	bhi.n	8014872 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 801486a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801486c:	005b      	lsls	r3, r3, #1
 801486e:	607b      	str	r3, [r7, #4]
 8014870:	e033      	b.n	80148da <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8014872:	7afb      	ldrb	r3, [r7, #11]
 8014874:	f003 0302 	and.w	r3, r3, #2
 8014878:	2b00      	cmp	r3, #0
 801487a:	d003      	beq.n	8014884 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 801487c:	2303      	movs	r3, #3
 801487e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8014882:	e02a      	b.n	80148da <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d105      	bne.n	8014896 <f_mkfs+0x3c6>
 801488a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801488c:	005b      	lsls	r3, r3, #1
 801488e:	607b      	str	r3, [r7, #4]
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	2b80      	cmp	r3, #128	@ 0x80
 8014894:	d91e      	bls.n	80148d4 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8014896:	230e      	movs	r3, #14
 8014898:	e240      	b.n	8014d1c <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 801489a:	6a3b      	ldr	r3, [r7, #32]
 801489c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80148a0:	4293      	cmp	r3, r2
 80148a2:	d80a      	bhi.n	80148ba <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d105      	bne.n	80148b6 <f_mkfs+0x3e6>
 80148aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80148ac:	005b      	lsls	r3, r3, #1
 80148ae:	607b      	str	r3, [r7, #4]
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	2b80      	cmp	r3, #128	@ 0x80
 80148b4:	d910      	bls.n	80148d8 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 80148b6:	230e      	movs	r3, #14
 80148b8:	e230      	b.n	8014d1c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 80148ba:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80148be:	2b01      	cmp	r3, #1
 80148c0:	d10c      	bne.n	80148dc <f_mkfs+0x40c>
 80148c2:	6a3b      	ldr	r3, [r7, #32]
 80148c4:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80148c8:	4293      	cmp	r3, r2
 80148ca:	d907      	bls.n	80148dc <f_mkfs+0x40c>
 80148cc:	230e      	movs	r3, #14
 80148ce:	e225      	b.n	8014d1c <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80148d0:	bf00      	nop
 80148d2:	e6ce      	b.n	8014672 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80148d4:	bf00      	nop
 80148d6:	e6cc      	b.n	8014672 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80148d8:	bf00      	nop
			pau = au;
 80148da:	e6ca      	b.n	8014672 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 80148dc:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 80148de:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80148e0:	461a      	mov	r2, r3
 80148e2:	2100      	movs	r1, #0
 80148e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80148e6:	f7fd fe81 	bl	80125ec <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 80148ea:	220b      	movs	r2, #11
 80148ec:	49b2      	ldr	r1, [pc, #712]	@ (8014bb8 <f_mkfs+0x6e8>)
 80148ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80148f0:	f7fd fe5b 	bl	80125aa <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 80148f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148f6:	330b      	adds	r3, #11
 80148f8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80148fa:	4611      	mov	r1, r2
 80148fc:	4618      	mov	r0, r3
 80148fe:	f7fd fe0d 	bl	801251c <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8014902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014904:	330d      	adds	r3, #13
 8014906:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014908:	b2d2      	uxtb	r2, r2
 801490a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 801490c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801490e:	330e      	adds	r3, #14
 8014910:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014912:	b292      	uxth	r2, r2
 8014914:	4611      	mov	r1, r2
 8014916:	4618      	mov	r0, r3
 8014918:	f7fd fe00 	bl	801251c <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 801491c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801491e:	3310      	adds	r3, #16
 8014920:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014922:	b2d2      	uxtb	r2, r2
 8014924:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8014926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014928:	f103 0211 	add.w	r2, r3, #17
 801492c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014930:	2b03      	cmp	r3, #3
 8014932:	d002      	beq.n	801493a <f_mkfs+0x46a>
 8014934:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014936:	b29b      	uxth	r3, r3
 8014938:	e000      	b.n	801493c <f_mkfs+0x46c>
 801493a:	2300      	movs	r3, #0
 801493c:	4619      	mov	r1, r3
 801493e:	4610      	mov	r0, r2
 8014940:	f7fd fdec 	bl	801251c <st_word>
		if (sz_vol < 0x10000) {
 8014944:	693b      	ldr	r3, [r7, #16]
 8014946:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801494a:	d208      	bcs.n	801495e <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 801494c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801494e:	3313      	adds	r3, #19
 8014950:	693a      	ldr	r2, [r7, #16]
 8014952:	b292      	uxth	r2, r2
 8014954:	4611      	mov	r1, r2
 8014956:	4618      	mov	r0, r3
 8014958:	f7fd fde0 	bl	801251c <st_word>
 801495c:	e006      	b.n	801496c <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 801495e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014960:	3320      	adds	r3, #32
 8014962:	693a      	ldr	r2, [r7, #16]
 8014964:	4611      	mov	r1, r2
 8014966:	4618      	mov	r0, r3
 8014968:	f7fd fdf3 	bl	8012552 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 801496c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801496e:	3315      	adds	r3, #21
 8014970:	22f8      	movs	r2, #248	@ 0xf8
 8014972:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8014974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014976:	3318      	adds	r3, #24
 8014978:	213f      	movs	r1, #63	@ 0x3f
 801497a:	4618      	mov	r0, r3
 801497c:	f7fd fdce 	bl	801251c <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8014980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014982:	331a      	adds	r3, #26
 8014984:	21ff      	movs	r1, #255	@ 0xff
 8014986:	4618      	mov	r0, r3
 8014988:	f7fd fdc8 	bl	801251c <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 801498c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801498e:	331c      	adds	r3, #28
 8014990:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014992:	4618      	mov	r0, r3
 8014994:	f7fd fddd 	bl	8012552 <st_dword>
		if (fmt == FS_FAT32) {
 8014998:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801499c:	2b03      	cmp	r3, #3
 801499e:	d131      	bne.n	8014a04 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 80149a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149a2:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 80149a6:	f7fd f8f9 	bl	8011b9c <get_fattime>
 80149aa:	4603      	mov	r3, r0
 80149ac:	4619      	mov	r1, r3
 80149ae:	4620      	mov	r0, r4
 80149b0:	f7fd fdcf 	bl	8012552 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 80149b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149b6:	3324      	adds	r3, #36	@ 0x24
 80149b8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80149ba:	4618      	mov	r0, r3
 80149bc:	f7fd fdc9 	bl	8012552 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 80149c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149c2:	332c      	adds	r3, #44	@ 0x2c
 80149c4:	2102      	movs	r1, #2
 80149c6:	4618      	mov	r0, r3
 80149c8:	f7fd fdc3 	bl	8012552 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 80149cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149ce:	3330      	adds	r3, #48	@ 0x30
 80149d0:	2101      	movs	r1, #1
 80149d2:	4618      	mov	r0, r3
 80149d4:	f7fd fda2 	bl	801251c <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 80149d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149da:	3332      	adds	r3, #50	@ 0x32
 80149dc:	2106      	movs	r1, #6
 80149de:	4618      	mov	r0, r3
 80149e0:	f7fd fd9c 	bl	801251c <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 80149e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149e6:	3340      	adds	r3, #64	@ 0x40
 80149e8:	2280      	movs	r2, #128	@ 0x80
 80149ea:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 80149ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149ee:	3342      	adds	r3, #66	@ 0x42
 80149f0:	2229      	movs	r2, #41	@ 0x29
 80149f2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 80149f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149f6:	3347      	adds	r3, #71	@ 0x47
 80149f8:	2213      	movs	r2, #19
 80149fa:	4970      	ldr	r1, [pc, #448]	@ (8014bbc <f_mkfs+0x6ec>)
 80149fc:	4618      	mov	r0, r3
 80149fe:	f7fd fdd4 	bl	80125aa <mem_cpy>
 8014a02:	e020      	b.n	8014a46 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8014a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a06:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 8014a0a:	f7fd f8c7 	bl	8011b9c <get_fattime>
 8014a0e:	4603      	mov	r3, r0
 8014a10:	4619      	mov	r1, r3
 8014a12:	4620      	mov	r0, r4
 8014a14:	f7fd fd9d 	bl	8012552 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8014a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a1a:	3316      	adds	r3, #22
 8014a1c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8014a1e:	b292      	uxth	r2, r2
 8014a20:	4611      	mov	r1, r2
 8014a22:	4618      	mov	r0, r3
 8014a24:	f7fd fd7a 	bl	801251c <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8014a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a2a:	3324      	adds	r3, #36	@ 0x24
 8014a2c:	2280      	movs	r2, #128	@ 0x80
 8014a2e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8014a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a32:	3326      	adds	r3, #38	@ 0x26
 8014a34:	2229      	movs	r2, #41	@ 0x29
 8014a36:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8014a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a3a:	332b      	adds	r3, #43	@ 0x2b
 8014a3c:	2213      	movs	r2, #19
 8014a3e:	4960      	ldr	r1, [pc, #384]	@ (8014bc0 <f_mkfs+0x6f0>)
 8014a40:	4618      	mov	r0, r3
 8014a42:	f7fd fdb2 	bl	80125aa <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8014a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a48:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014a4c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8014a50:	4618      	mov	r0, r3
 8014a52:	f7fd fd63 	bl	801251c <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8014a56:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014a5a:	2301      	movs	r3, #1
 8014a5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014a5e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014a60:	f7fd fce2 	bl	8012428 <disk_write>
 8014a64:	4603      	mov	r3, r0
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d001      	beq.n	8014a6e <f_mkfs+0x59e>
 8014a6a:	2301      	movs	r3, #1
 8014a6c:	e156      	b.n	8014d1c <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8014a6e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014a72:	2b03      	cmp	r3, #3
 8014a74:	d140      	bne.n	8014af8 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8014a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a78:	1d9a      	adds	r2, r3, #6
 8014a7a:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014a7e:	2301      	movs	r3, #1
 8014a80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014a82:	f7fd fcd1 	bl	8012428 <disk_write>
			mem_set(buf, 0, ss);
 8014a86:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014a88:	461a      	mov	r2, r3
 8014a8a:	2100      	movs	r1, #0
 8014a8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014a8e:	f7fd fdad 	bl	80125ec <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8014a92:	494c      	ldr	r1, [pc, #304]	@ (8014bc4 <f_mkfs+0x6f4>)
 8014a94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014a96:	f7fd fd5c 	bl	8012552 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8014a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a9c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8014aa0:	4949      	ldr	r1, [pc, #292]	@ (8014bc8 <f_mkfs+0x6f8>)
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	f7fd fd55 	bl	8012552 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8014aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014aaa:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8014aae:	6a3b      	ldr	r3, [r7, #32]
 8014ab0:	3b01      	subs	r3, #1
 8014ab2:	4619      	mov	r1, r3
 8014ab4:	4610      	mov	r0, r2
 8014ab6:	f7fd fd4c 	bl	8012552 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8014aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014abc:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8014ac0:	2102      	movs	r1, #2
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	f7fd fd45 	bl	8012552 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8014ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014aca:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014ace:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	f7fd fd22 	bl	801251c <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8014ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ada:	1dda      	adds	r2, r3, #7
 8014adc:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014ae0:	2301      	movs	r3, #1
 8014ae2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014ae4:	f7fd fca0 	bl	8012428 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8014ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014aea:	1c5a      	adds	r2, r3, #1
 8014aec:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014af0:	2301      	movs	r3, #1
 8014af2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014af4:	f7fd fc98 	bl	8012428 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8014af8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014afa:	2100      	movs	r1, #0
 8014afc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014afe:	f7fd fd75 	bl	80125ec <mem_set>
		sect = b_fat;		/* FAT start sector */
 8014b02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014b04:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8014b06:	2300      	movs	r3, #0
 8014b08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014b0a:	e04b      	b.n	8014ba4 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8014b0c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014b10:	2b03      	cmp	r3, #3
 8014b12:	d113      	bne.n	8014b3c <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8014b14:	f06f 0107 	mvn.w	r1, #7
 8014b18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014b1a:	f7fd fd1a 	bl	8012552 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8014b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b20:	3304      	adds	r3, #4
 8014b22:	f04f 31ff 	mov.w	r1, #4294967295
 8014b26:	4618      	mov	r0, r3
 8014b28:	f7fd fd13 	bl	8012552 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8014b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b2e:	3308      	adds	r3, #8
 8014b30:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8014b34:	4618      	mov	r0, r3
 8014b36:	f7fd fd0c 	bl	8012552 <st_dword>
 8014b3a:	e00b      	b.n	8014b54 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8014b3c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014b40:	2b01      	cmp	r3, #1
 8014b42:	d101      	bne.n	8014b48 <f_mkfs+0x678>
 8014b44:	4b21      	ldr	r3, [pc, #132]	@ (8014bcc <f_mkfs+0x6fc>)
 8014b46:	e001      	b.n	8014b4c <f_mkfs+0x67c>
 8014b48:	f06f 0307 	mvn.w	r3, #7
 8014b4c:	4619      	mov	r1, r3
 8014b4e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014b50:	f7fd fcff 	bl	8012552 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8014b54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014b56:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8014b58:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b5c:	4293      	cmp	r3, r2
 8014b5e:	bf28      	it	cs
 8014b60:	4613      	movcs	r3, r2
 8014b62:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8014b64:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014b68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014b6a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014b6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014b6e:	f7fd fc5b 	bl	8012428 <disk_write>
 8014b72:	4603      	mov	r3, r0
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d001      	beq.n	8014b7c <f_mkfs+0x6ac>
 8014b78:	2301      	movs	r3, #1
 8014b7a:	e0cf      	b.n	8014d1c <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8014b7c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014b7e:	461a      	mov	r2, r3
 8014b80:	2100      	movs	r1, #0
 8014b82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014b84:	f7fd fd32 	bl	80125ec <mem_set>
				sect += n; nsect -= n;
 8014b88:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014b8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014b8c:	4413      	add	r3, r2
 8014b8e:	667b      	str	r3, [r7, #100]	@ 0x64
 8014b90:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014b92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014b94:	1ad3      	subs	r3, r2, r3
 8014b96:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 8014b98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d1dc      	bne.n	8014b58 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8014b9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014ba0:	3301      	adds	r3, #1
 8014ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014ba4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014ba6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014ba8:	429a      	cmp	r2, r3
 8014baa:	d3af      	bcc.n	8014b0c <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8014bac:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014bb0:	2b03      	cmp	r3, #3
 8014bb2:	d10d      	bne.n	8014bd0 <f_mkfs+0x700>
 8014bb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014bb6:	e00c      	b.n	8014bd2 <f_mkfs+0x702>
 8014bb8:	0801c1a8 	.word	0x0801c1a8
 8014bbc:	0801c1b4 	.word	0x0801c1b4
 8014bc0:	0801c1c8 	.word	0x0801c1c8
 8014bc4:	41615252 	.word	0x41615252
 8014bc8:	61417272 	.word	0x61417272
 8014bcc:	00fffff8 	.word	0x00fffff8
 8014bd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014bd2:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8014bd4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bd8:	4293      	cmp	r3, r2
 8014bda:	bf28      	it	cs
 8014bdc:	4613      	movcs	r3, r2
 8014bde:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8014be0:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014be4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014be6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014be8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014bea:	f7fd fc1d 	bl	8012428 <disk_write>
 8014bee:	4603      	mov	r3, r0
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d001      	beq.n	8014bf8 <f_mkfs+0x728>
 8014bf4:	2301      	movs	r3, #1
 8014bf6:	e091      	b.n	8014d1c <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8014bf8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014bfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014bfc:	4413      	add	r3, r2
 8014bfe:	667b      	str	r3, [r7, #100]	@ 0x64
 8014c00:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014c02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014c04:	1ad3      	subs	r3, r2, r3
 8014c06:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 8014c08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d1e2      	bne.n	8014bd4 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8014c0e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014c12:	2b03      	cmp	r3, #3
 8014c14:	d103      	bne.n	8014c1e <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8014c16:	230c      	movs	r3, #12
 8014c18:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8014c1c:	e010      	b.n	8014c40 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8014c1e:	693b      	ldr	r3, [r7, #16]
 8014c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014c24:	d303      	bcc.n	8014c2e <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8014c26:	2306      	movs	r3, #6
 8014c28:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8014c2c:	e008      	b.n	8014c40 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8014c2e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014c32:	2b02      	cmp	r3, #2
 8014c34:	d101      	bne.n	8014c3a <f_mkfs+0x76a>
 8014c36:	2304      	movs	r3, #4
 8014c38:	e000      	b.n	8014c3c <f_mkfs+0x76c>
 8014c3a:	2301      	movs	r3, #1
 8014c3c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8014c40:	7afb      	ldrb	r3, [r7, #11]
 8014c42:	f003 0308 	and.w	r3, r3, #8
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d15b      	bne.n	8014d02 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8014c4a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014c4c:	461a      	mov	r2, r3
 8014c4e:	2100      	movs	r1, #0
 8014c50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014c52:	f7fd fccb 	bl	80125ec <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8014c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c58:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014c5c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8014c60:	4618      	mov	r0, r3
 8014c62:	f7fd fc5b 	bl	801251c <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8014c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c68:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8014c6c:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8014c6e:	69bb      	ldr	r3, [r7, #24]
 8014c70:	2200      	movs	r2, #0
 8014c72:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8014c74:	69bb      	ldr	r3, [r7, #24]
 8014c76:	3301      	adds	r3, #1
 8014c78:	2201      	movs	r2, #1
 8014c7a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8014c7c:	69bb      	ldr	r3, [r7, #24]
 8014c7e:	3302      	adds	r3, #2
 8014c80:	2201      	movs	r2, #1
 8014c82:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8014c84:	69bb      	ldr	r3, [r7, #24]
 8014c86:	3303      	adds	r3, #3
 8014c88:	2200      	movs	r2, #0
 8014c8a:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8014c8c:	69bb      	ldr	r3, [r7, #24]
 8014c8e:	3304      	adds	r3, #4
 8014c90:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8014c94:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8014c96:	693a      	ldr	r2, [r7, #16]
 8014c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c9a:	441a      	add	r2, r3
 8014c9c:	4b21      	ldr	r3, [pc, #132]	@ (8014d24 <f_mkfs+0x854>)
 8014c9e:	fba3 1302 	umull	r1, r3, r3, r2
 8014ca2:	1ad2      	subs	r2, r2, r3
 8014ca4:	0852      	lsrs	r2, r2, #1
 8014ca6:	4413      	add	r3, r2
 8014ca8:	0b5b      	lsrs	r3, r3, #13
 8014caa:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8014cac:	69bb      	ldr	r3, [r7, #24]
 8014cae:	3305      	adds	r3, #5
 8014cb0:	22fe      	movs	r2, #254	@ 0xfe
 8014cb2:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8014cb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014cb6:	089b      	lsrs	r3, r3, #2
 8014cb8:	b2da      	uxtb	r2, r3
 8014cba:	69bb      	ldr	r3, [r7, #24]
 8014cbc:	3306      	adds	r3, #6
 8014cbe:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 8014cc2:	b2d2      	uxtb	r2, r2
 8014cc4:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8014cc6:	69bb      	ldr	r3, [r7, #24]
 8014cc8:	3307      	adds	r3, #7
 8014cca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014ccc:	b2d2      	uxtb	r2, r2
 8014cce:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8014cd0:	69bb      	ldr	r3, [r7, #24]
 8014cd2:	3308      	adds	r3, #8
 8014cd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	f7fd fc3b 	bl	8012552 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8014cdc:	69bb      	ldr	r3, [r7, #24]
 8014cde:	330c      	adds	r3, #12
 8014ce0:	693a      	ldr	r2, [r7, #16]
 8014ce2:	4611      	mov	r1, r2
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	f7fd fc34 	bl	8012552 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8014cea:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014cee:	2301      	movs	r3, #1
 8014cf0:	2200      	movs	r2, #0
 8014cf2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014cf4:	f7fd fb98 	bl	8012428 <disk_write>
 8014cf8:	4603      	mov	r3, r0
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d001      	beq.n	8014d02 <f_mkfs+0x832>
 8014cfe:	2301      	movs	r3, #1
 8014d00:	e00c      	b.n	8014d1c <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8014d02:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8014d06:	2200      	movs	r2, #0
 8014d08:	2100      	movs	r1, #0
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	f7fd fbac 	bl	8012468 <disk_ioctl>
 8014d10:	4603      	mov	r3, r0
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d001      	beq.n	8014d1a <f_mkfs+0x84a>
 8014d16:	2301      	movs	r3, #1
 8014d18:	e000      	b.n	8014d1c <f_mkfs+0x84c>

	return FR_OK;
 8014d1a:	2300      	movs	r3, #0
}
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	3774      	adds	r7, #116	@ 0x74
 8014d20:	46bd      	mov	sp, r7
 8014d22:	bd90      	pop	{r4, r7, pc}
 8014d24:	0515565b 	.word	0x0515565b

08014d28 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014d28:	b480      	push	{r7}
 8014d2a:	b087      	sub	sp, #28
 8014d2c:	af00      	add	r7, sp, #0
 8014d2e:	60f8      	str	r0, [r7, #12]
 8014d30:	60b9      	str	r1, [r7, #8]
 8014d32:	4613      	mov	r3, r2
 8014d34:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014d36:	2301      	movs	r3, #1
 8014d38:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014d3a:	2300      	movs	r3, #0
 8014d3c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014d3e:	4b1f      	ldr	r3, [pc, #124]	@ (8014dbc <FATFS_LinkDriverEx+0x94>)
 8014d40:	7a5b      	ldrb	r3, [r3, #9]
 8014d42:	b2db      	uxtb	r3, r3
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d131      	bne.n	8014dac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014d48:	4b1c      	ldr	r3, [pc, #112]	@ (8014dbc <FATFS_LinkDriverEx+0x94>)
 8014d4a:	7a5b      	ldrb	r3, [r3, #9]
 8014d4c:	b2db      	uxtb	r3, r3
 8014d4e:	461a      	mov	r2, r3
 8014d50:	4b1a      	ldr	r3, [pc, #104]	@ (8014dbc <FATFS_LinkDriverEx+0x94>)
 8014d52:	2100      	movs	r1, #0
 8014d54:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014d56:	4b19      	ldr	r3, [pc, #100]	@ (8014dbc <FATFS_LinkDriverEx+0x94>)
 8014d58:	7a5b      	ldrb	r3, [r3, #9]
 8014d5a:	b2db      	uxtb	r3, r3
 8014d5c:	4a17      	ldr	r2, [pc, #92]	@ (8014dbc <FATFS_LinkDriverEx+0x94>)
 8014d5e:	009b      	lsls	r3, r3, #2
 8014d60:	4413      	add	r3, r2
 8014d62:	68fa      	ldr	r2, [r7, #12]
 8014d64:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014d66:	4b15      	ldr	r3, [pc, #84]	@ (8014dbc <FATFS_LinkDriverEx+0x94>)
 8014d68:	7a5b      	ldrb	r3, [r3, #9]
 8014d6a:	b2db      	uxtb	r3, r3
 8014d6c:	461a      	mov	r2, r3
 8014d6e:	4b13      	ldr	r3, [pc, #76]	@ (8014dbc <FATFS_LinkDriverEx+0x94>)
 8014d70:	4413      	add	r3, r2
 8014d72:	79fa      	ldrb	r2, [r7, #7]
 8014d74:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014d76:	4b11      	ldr	r3, [pc, #68]	@ (8014dbc <FATFS_LinkDriverEx+0x94>)
 8014d78:	7a5b      	ldrb	r3, [r3, #9]
 8014d7a:	b2db      	uxtb	r3, r3
 8014d7c:	1c5a      	adds	r2, r3, #1
 8014d7e:	b2d1      	uxtb	r1, r2
 8014d80:	4a0e      	ldr	r2, [pc, #56]	@ (8014dbc <FATFS_LinkDriverEx+0x94>)
 8014d82:	7251      	strb	r1, [r2, #9]
 8014d84:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014d86:	7dbb      	ldrb	r3, [r7, #22]
 8014d88:	3330      	adds	r3, #48	@ 0x30
 8014d8a:	b2da      	uxtb	r2, r3
 8014d8c:	68bb      	ldr	r3, [r7, #8]
 8014d8e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014d90:	68bb      	ldr	r3, [r7, #8]
 8014d92:	3301      	adds	r3, #1
 8014d94:	223a      	movs	r2, #58	@ 0x3a
 8014d96:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014d98:	68bb      	ldr	r3, [r7, #8]
 8014d9a:	3302      	adds	r3, #2
 8014d9c:	222f      	movs	r2, #47	@ 0x2f
 8014d9e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014da0:	68bb      	ldr	r3, [r7, #8]
 8014da2:	3303      	adds	r3, #3
 8014da4:	2200      	movs	r2, #0
 8014da6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014da8:	2300      	movs	r3, #0
 8014daa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8014dae:	4618      	mov	r0, r3
 8014db0:	371c      	adds	r7, #28
 8014db2:	46bd      	mov	sp, r7
 8014db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db8:	4770      	bx	lr
 8014dba:	bf00      	nop
 8014dbc:	20002b2c 	.word	0x20002b2c

08014dc0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014dc0:	b580      	push	{r7, lr}
 8014dc2:	b082      	sub	sp, #8
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	6078      	str	r0, [r7, #4]
 8014dc8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014dca:	2200      	movs	r2, #0
 8014dcc:	6839      	ldr	r1, [r7, #0]
 8014dce:	6878      	ldr	r0, [r7, #4]
 8014dd0:	f7ff ffaa 	bl	8014d28 <FATFS_LinkDriverEx>
 8014dd4:	4603      	mov	r3, r0
}
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	3708      	adds	r7, #8
 8014dda:	46bd      	mov	sp, r7
 8014ddc:	bd80      	pop	{r7, pc}

08014dde <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8014dde:	b480      	push	{r7}
 8014de0:	b085      	sub	sp, #20
 8014de2:	af00      	add	r7, sp, #0
 8014de4:	4603      	mov	r3, r0
 8014de6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014de8:	2300      	movs	r3, #0
 8014dea:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8014dec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014df0:	2b84      	cmp	r3, #132	@ 0x84
 8014df2:	d005      	beq.n	8014e00 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8014df4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	4413      	add	r3, r2
 8014dfc:	3303      	adds	r3, #3
 8014dfe:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8014e00:	68fb      	ldr	r3, [r7, #12]
}
 8014e02:	4618      	mov	r0, r3
 8014e04:	3714      	adds	r7, #20
 8014e06:	46bd      	mov	sp, r7
 8014e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e0c:	4770      	bx	lr

08014e0e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8014e0e:	b480      	push	{r7}
 8014e10:	b083      	sub	sp, #12
 8014e12:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014e14:	f3ef 8305 	mrs	r3, IPSR
 8014e18:	607b      	str	r3, [r7, #4]
  return(result);
 8014e1a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	bf14      	ite	ne
 8014e20:	2301      	movne	r3, #1
 8014e22:	2300      	moveq	r3, #0
 8014e24:	b2db      	uxtb	r3, r3
}
 8014e26:	4618      	mov	r0, r3
 8014e28:	370c      	adds	r7, #12
 8014e2a:	46bd      	mov	sp, r7
 8014e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e30:	4770      	bx	lr

08014e32 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014e32:	b580      	push	{r7, lr}
 8014e34:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8014e36:	f001 f9cd 	bl	80161d4 <vTaskStartScheduler>
  
  return osOK;
 8014e3a:	2300      	movs	r3, #0
}
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	bd80      	pop	{r7, pc}

08014e40 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8014e40:	b580      	push	{r7, lr}
 8014e42:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8014e44:	f001 fe2e 	bl	8016aa4 <xTaskGetSchedulerState>
 8014e48:	4603      	mov	r3, r0
 8014e4a:	2b01      	cmp	r3, #1
 8014e4c:	d101      	bne.n	8014e52 <osKernelRunning+0x12>
    return 0;
 8014e4e:	2300      	movs	r3, #0
 8014e50:	e000      	b.n	8014e54 <osKernelRunning+0x14>
  else
    return 1;
 8014e52:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8014e54:	4618      	mov	r0, r3
 8014e56:	bd80      	pop	{r7, pc}

08014e58 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8014e5c:	f7ff ffd7 	bl	8014e0e <inHandlerMode>
 8014e60:	4603      	mov	r3, r0
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d003      	beq.n	8014e6e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8014e66:	f001 fad9 	bl	801641c <xTaskGetTickCountFromISR>
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	e002      	b.n	8014e74 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8014e6e:	f001 fac5 	bl	80163fc <xTaskGetTickCount>
 8014e72:	4603      	mov	r3, r0
  }
}
 8014e74:	4618      	mov	r0, r3
 8014e76:	bd80      	pop	{r7, pc}

08014e78 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e7a:	b089      	sub	sp, #36	@ 0x24
 8014e7c:	af04      	add	r7, sp, #16
 8014e7e:	6078      	str	r0, [r7, #4]
 8014e80:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	695b      	ldr	r3, [r3, #20]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d020      	beq.n	8014ecc <osThreadCreate+0x54>
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	699b      	ldr	r3, [r3, #24]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d01c      	beq.n	8014ecc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	685c      	ldr	r4, [r3, #4]
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	691e      	ldr	r6, [r3, #16]
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	f7ff ff9a 	bl	8014dde <makeFreeRtosPriority>
 8014eaa:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	695b      	ldr	r3, [r3, #20]
 8014eb0:	687a      	ldr	r2, [r7, #4]
 8014eb2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014eb4:	9202      	str	r2, [sp, #8]
 8014eb6:	9301      	str	r3, [sp, #4]
 8014eb8:	9100      	str	r1, [sp, #0]
 8014eba:	683b      	ldr	r3, [r7, #0]
 8014ebc:	4632      	mov	r2, r6
 8014ebe:	4629      	mov	r1, r5
 8014ec0:	4620      	mov	r0, r4
 8014ec2:	f000 ffa5 	bl	8015e10 <xTaskCreateStatic>
 8014ec6:	4603      	mov	r3, r0
 8014ec8:	60fb      	str	r3, [r7, #12]
 8014eca:	e01c      	b.n	8014f06 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	685c      	ldr	r4, [r3, #4]
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014ed8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014ee0:	4618      	mov	r0, r3
 8014ee2:	f7ff ff7c 	bl	8014dde <makeFreeRtosPriority>
 8014ee6:	4602      	mov	r2, r0
 8014ee8:	f107 030c 	add.w	r3, r7, #12
 8014eec:	9301      	str	r3, [sp, #4]
 8014eee:	9200      	str	r2, [sp, #0]
 8014ef0:	683b      	ldr	r3, [r7, #0]
 8014ef2:	4632      	mov	r2, r6
 8014ef4:	4629      	mov	r1, r5
 8014ef6:	4620      	mov	r0, r4
 8014ef8:	f000 fff0 	bl	8015edc <xTaskCreate>
 8014efc:	4603      	mov	r3, r0
 8014efe:	2b01      	cmp	r3, #1
 8014f00:	d001      	beq.n	8014f06 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8014f02:	2300      	movs	r3, #0
 8014f04:	e000      	b.n	8014f08 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8014f06:	68fb      	ldr	r3, [r7, #12]
}
 8014f08:	4618      	mov	r0, r3
 8014f0a:	3714      	adds	r7, #20
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014f10 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b084      	sub	sp, #16
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d001      	beq.n	8014f26 <osDelay+0x16>
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	e000      	b.n	8014f28 <osDelay+0x18>
 8014f26:	2301      	movs	r3, #1
 8014f28:	4618      	mov	r0, r3
 8014f2a:	f001 f91b 	bl	8016164 <vTaskDelay>
  
  return osOK;
 8014f2e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014f30:	4618      	mov	r0, r3
 8014f32:	3710      	adds	r7, #16
 8014f34:	46bd      	mov	sp, r7
 8014f36:	bd80      	pop	{r7, pc}

08014f38 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8014f38:	b590      	push	{r4, r7, lr}
 8014f3a:	b085      	sub	sp, #20
 8014f3c:	af02      	add	r7, sp, #8
 8014f3e:	6078      	str	r0, [r7, #4]
 8014f40:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	689b      	ldr	r3, [r3, #8]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d011      	beq.n	8014f6e <osMessageCreate+0x36>
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	68db      	ldr	r3, [r3, #12]
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d00d      	beq.n	8014f6e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	6818      	ldr	r0, [r3, #0]
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	6859      	ldr	r1, [r3, #4]
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	689a      	ldr	r2, [r3, #8]
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	68db      	ldr	r3, [r3, #12]
 8014f62:	2400      	movs	r4, #0
 8014f64:	9400      	str	r4, [sp, #0]
 8014f66:	f000 f9f9 	bl	801535c <xQueueGenericCreateStatic>
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	e008      	b.n	8014f80 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	6818      	ldr	r0, [r3, #0]
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	685b      	ldr	r3, [r3, #4]
 8014f76:	2200      	movs	r2, #0
 8014f78:	4619      	mov	r1, r3
 8014f7a:	f000 fa76 	bl	801546a <xQueueGenericCreate>
 8014f7e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8014f80:	4618      	mov	r0, r3
 8014f82:	370c      	adds	r7, #12
 8014f84:	46bd      	mov	sp, r7
 8014f86:	bd90      	pop	{r4, r7, pc}

08014f88 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	b086      	sub	sp, #24
 8014f8c:	af00      	add	r7, sp, #0
 8014f8e:	60f8      	str	r0, [r7, #12]
 8014f90:	60b9      	str	r1, [r7, #8]
 8014f92:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8014f94:	2300      	movs	r3, #0
 8014f96:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8014f9c:	697b      	ldr	r3, [r7, #20]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d101      	bne.n	8014fa6 <osMessagePut+0x1e>
    ticks = 1;
 8014fa2:	2301      	movs	r3, #1
 8014fa4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8014fa6:	f7ff ff32 	bl	8014e0e <inHandlerMode>
 8014faa:	4603      	mov	r3, r0
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d018      	beq.n	8014fe2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8014fb0:	f107 0210 	add.w	r2, r7, #16
 8014fb4:	f107 0108 	add.w	r1, r7, #8
 8014fb8:	2300      	movs	r3, #0
 8014fba:	68f8      	ldr	r0, [r7, #12]
 8014fbc:	f000 fbc2 	bl	8015744 <xQueueGenericSendFromISR>
 8014fc0:	4603      	mov	r3, r0
 8014fc2:	2b01      	cmp	r3, #1
 8014fc4:	d001      	beq.n	8014fca <osMessagePut+0x42>
      return osErrorOS;
 8014fc6:	23ff      	movs	r3, #255	@ 0xff
 8014fc8:	e018      	b.n	8014ffc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014fca:	693b      	ldr	r3, [r7, #16]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d014      	beq.n	8014ffa <osMessagePut+0x72>
 8014fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8015004 <osMessagePut+0x7c>)
 8014fd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014fd6:	601a      	str	r2, [r3, #0]
 8014fd8:	f3bf 8f4f 	dsb	sy
 8014fdc:	f3bf 8f6f 	isb	sy
 8014fe0:	e00b      	b.n	8014ffa <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8014fe2:	f107 0108 	add.w	r1, r7, #8
 8014fe6:	2300      	movs	r3, #0
 8014fe8:	697a      	ldr	r2, [r7, #20]
 8014fea:	68f8      	ldr	r0, [r7, #12]
 8014fec:	f000 faa0 	bl	8015530 <xQueueGenericSend>
 8014ff0:	4603      	mov	r3, r0
 8014ff2:	2b01      	cmp	r3, #1
 8014ff4:	d001      	beq.n	8014ffa <osMessagePut+0x72>
      return osErrorOS;
 8014ff6:	23ff      	movs	r3, #255	@ 0xff
 8014ff8:	e000      	b.n	8014ffc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8014ffa:	2300      	movs	r3, #0
}
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	3718      	adds	r7, #24
 8015000:	46bd      	mov	sp, r7
 8015002:	bd80      	pop	{r7, pc}
 8015004:	e000ed04 	.word	0xe000ed04

08015008 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8015008:	b590      	push	{r4, r7, lr}
 801500a:	b08b      	sub	sp, #44	@ 0x2c
 801500c:	af00      	add	r7, sp, #0
 801500e:	60f8      	str	r0, [r7, #12]
 8015010:	60b9      	str	r1, [r7, #8]
 8015012:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8015014:	68bb      	ldr	r3, [r7, #8]
 8015016:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8015018:	2300      	movs	r3, #0
 801501a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 801501c:	68bb      	ldr	r3, [r7, #8]
 801501e:	2b00      	cmp	r3, #0
 8015020:	d10a      	bne.n	8015038 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8015022:	2380      	movs	r3, #128	@ 0x80
 8015024:	617b      	str	r3, [r7, #20]
    return event;
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	461c      	mov	r4, r3
 801502a:	f107 0314 	add.w	r3, r7, #20
 801502e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015032:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015036:	e054      	b.n	80150e2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8015038:	2300      	movs	r3, #0
 801503a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 801503c:	2300      	movs	r3, #0
 801503e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015046:	d103      	bne.n	8015050 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8015048:	f04f 33ff 	mov.w	r3, #4294967295
 801504c:	627b      	str	r3, [r7, #36]	@ 0x24
 801504e:	e009      	b.n	8015064 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d006      	beq.n	8015064 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 801505a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801505c:	2b00      	cmp	r3, #0
 801505e:	d101      	bne.n	8015064 <osMessageGet+0x5c>
      ticks = 1;
 8015060:	2301      	movs	r3, #1
 8015062:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8015064:	f7ff fed3 	bl	8014e0e <inHandlerMode>
 8015068:	4603      	mov	r3, r0
 801506a:	2b00      	cmp	r3, #0
 801506c:	d01c      	beq.n	80150a8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801506e:	f107 0220 	add.w	r2, r7, #32
 8015072:	f107 0314 	add.w	r3, r7, #20
 8015076:	3304      	adds	r3, #4
 8015078:	4619      	mov	r1, r3
 801507a:	68b8      	ldr	r0, [r7, #8]
 801507c:	f000 fcee 	bl	8015a5c <xQueueReceiveFromISR>
 8015080:	4603      	mov	r3, r0
 8015082:	2b01      	cmp	r3, #1
 8015084:	d102      	bne.n	801508c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8015086:	2310      	movs	r3, #16
 8015088:	617b      	str	r3, [r7, #20]
 801508a:	e001      	b.n	8015090 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 801508c:	2300      	movs	r3, #0
 801508e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8015090:	6a3b      	ldr	r3, [r7, #32]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d01d      	beq.n	80150d2 <osMessageGet+0xca>
 8015096:	4b15      	ldr	r3, [pc, #84]	@ (80150ec <osMessageGet+0xe4>)
 8015098:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801509c:	601a      	str	r2, [r3, #0]
 801509e:	f3bf 8f4f 	dsb	sy
 80150a2:	f3bf 8f6f 	isb	sy
 80150a6:	e014      	b.n	80150d2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80150a8:	f107 0314 	add.w	r3, r7, #20
 80150ac:	3304      	adds	r3, #4
 80150ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80150b0:	4619      	mov	r1, r3
 80150b2:	68b8      	ldr	r0, [r7, #8]
 80150b4:	f000 fbea 	bl	801588c <xQueueReceive>
 80150b8:	4603      	mov	r3, r0
 80150ba:	2b01      	cmp	r3, #1
 80150bc:	d102      	bne.n	80150c4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80150be:	2310      	movs	r3, #16
 80150c0:	617b      	str	r3, [r7, #20]
 80150c2:	e006      	b.n	80150d2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80150c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d101      	bne.n	80150ce <osMessageGet+0xc6>
 80150ca:	2300      	movs	r3, #0
 80150cc:	e000      	b.n	80150d0 <osMessageGet+0xc8>
 80150ce:	2340      	movs	r3, #64	@ 0x40
 80150d0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	461c      	mov	r4, r3
 80150d6:	f107 0314 	add.w	r3, r7, #20
 80150da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80150de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80150e2:	68f8      	ldr	r0, [r7, #12]
 80150e4:	372c      	adds	r7, #44	@ 0x2c
 80150e6:	46bd      	mov	sp, r7
 80150e8:	bd90      	pop	{r4, r7, pc}
 80150ea:	bf00      	nop
 80150ec:	e000ed04 	.word	0xe000ed04

080150f0 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b082      	sub	sp, #8
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80150f8:	f7ff fe89 	bl	8014e0e <inHandlerMode>
 80150fc:	4603      	mov	r3, r0
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d004      	beq.n	801510c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8015102:	6878      	ldr	r0, [r7, #4]
 8015104:	f000 fd53 	bl	8015bae <uxQueueMessagesWaitingFromISR>
 8015108:	4603      	mov	r3, r0
 801510a:	e003      	b.n	8015114 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 801510c:	6878      	ldr	r0, [r7, #4]
 801510e:	f000 fd2d 	bl	8015b6c <uxQueueMessagesWaiting>
 8015112:	4603      	mov	r3, r0
  }
}
 8015114:	4618      	mov	r0, r3
 8015116:	3708      	adds	r7, #8
 8015118:	46bd      	mov	sp, r7
 801511a:	bd80      	pop	{r7, pc}

0801511c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801511c:	b480      	push	{r7}
 801511e:	b083      	sub	sp, #12
 8015120:	af00      	add	r7, sp, #0
 8015122:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	f103 0208 	add.w	r2, r3, #8
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	f04f 32ff 	mov.w	r2, #4294967295
 8015134:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	f103 0208 	add.w	r2, r3, #8
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	f103 0208 	add.w	r2, r3, #8
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	2200      	movs	r2, #0
 801514e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015150:	bf00      	nop
 8015152:	370c      	adds	r7, #12
 8015154:	46bd      	mov	sp, r7
 8015156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801515a:	4770      	bx	lr

0801515c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801515c:	b480      	push	{r7}
 801515e:	b083      	sub	sp, #12
 8015160:	af00      	add	r7, sp, #0
 8015162:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	2200      	movs	r2, #0
 8015168:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801516a:	bf00      	nop
 801516c:	370c      	adds	r7, #12
 801516e:	46bd      	mov	sp, r7
 8015170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015174:	4770      	bx	lr

08015176 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015176:	b480      	push	{r7}
 8015178:	b085      	sub	sp, #20
 801517a:	af00      	add	r7, sp, #0
 801517c:	6078      	str	r0, [r7, #4]
 801517e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	685b      	ldr	r3, [r3, #4]
 8015184:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015186:	683b      	ldr	r3, [r7, #0]
 8015188:	68fa      	ldr	r2, [r7, #12]
 801518a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	689a      	ldr	r2, [r3, #8]
 8015190:	683b      	ldr	r3, [r7, #0]
 8015192:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	689b      	ldr	r3, [r3, #8]
 8015198:	683a      	ldr	r2, [r7, #0]
 801519a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	683a      	ldr	r2, [r7, #0]
 80151a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80151a2:	683b      	ldr	r3, [r7, #0]
 80151a4:	687a      	ldr	r2, [r7, #4]
 80151a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	1c5a      	adds	r2, r3, #1
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	601a      	str	r2, [r3, #0]
}
 80151b2:	bf00      	nop
 80151b4:	3714      	adds	r7, #20
 80151b6:	46bd      	mov	sp, r7
 80151b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151bc:	4770      	bx	lr

080151be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80151be:	b480      	push	{r7}
 80151c0:	b085      	sub	sp, #20
 80151c2:	af00      	add	r7, sp, #0
 80151c4:	6078      	str	r0, [r7, #4]
 80151c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80151c8:	683b      	ldr	r3, [r7, #0]
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80151ce:	68bb      	ldr	r3, [r7, #8]
 80151d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151d4:	d103      	bne.n	80151de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	691b      	ldr	r3, [r3, #16]
 80151da:	60fb      	str	r3, [r7, #12]
 80151dc:	e00c      	b.n	80151f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	3308      	adds	r3, #8
 80151e2:	60fb      	str	r3, [r7, #12]
 80151e4:	e002      	b.n	80151ec <vListInsert+0x2e>
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	685b      	ldr	r3, [r3, #4]
 80151ea:	60fb      	str	r3, [r7, #12]
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	685b      	ldr	r3, [r3, #4]
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	68ba      	ldr	r2, [r7, #8]
 80151f4:	429a      	cmp	r2, r3
 80151f6:	d2f6      	bcs.n	80151e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	685a      	ldr	r2, [r3, #4]
 80151fc:	683b      	ldr	r3, [r7, #0]
 80151fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015200:	683b      	ldr	r3, [r7, #0]
 8015202:	685b      	ldr	r3, [r3, #4]
 8015204:	683a      	ldr	r2, [r7, #0]
 8015206:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015208:	683b      	ldr	r3, [r7, #0]
 801520a:	68fa      	ldr	r2, [r7, #12]
 801520c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	683a      	ldr	r2, [r7, #0]
 8015212:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015214:	683b      	ldr	r3, [r7, #0]
 8015216:	687a      	ldr	r2, [r7, #4]
 8015218:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	1c5a      	adds	r2, r3, #1
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	601a      	str	r2, [r3, #0]
}
 8015224:	bf00      	nop
 8015226:	3714      	adds	r7, #20
 8015228:	46bd      	mov	sp, r7
 801522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801522e:	4770      	bx	lr

08015230 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015230:	b480      	push	{r7}
 8015232:	b085      	sub	sp, #20
 8015234:	af00      	add	r7, sp, #0
 8015236:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	691b      	ldr	r3, [r3, #16]
 801523c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	685b      	ldr	r3, [r3, #4]
 8015242:	687a      	ldr	r2, [r7, #4]
 8015244:	6892      	ldr	r2, [r2, #8]
 8015246:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	689b      	ldr	r3, [r3, #8]
 801524c:	687a      	ldr	r2, [r7, #4]
 801524e:	6852      	ldr	r2, [r2, #4]
 8015250:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	685b      	ldr	r3, [r3, #4]
 8015256:	687a      	ldr	r2, [r7, #4]
 8015258:	429a      	cmp	r2, r3
 801525a:	d103      	bne.n	8015264 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	689a      	ldr	r2, [r3, #8]
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	2200      	movs	r2, #0
 8015268:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	1e5a      	subs	r2, r3, #1
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	681b      	ldr	r3, [r3, #0]
}
 8015278:	4618      	mov	r0, r3
 801527a:	3714      	adds	r7, #20
 801527c:	46bd      	mov	sp, r7
 801527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015282:	4770      	bx	lr

08015284 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015284:	b580      	push	{r7, lr}
 8015286:	b084      	sub	sp, #16
 8015288:	af00      	add	r7, sp, #0
 801528a:	6078      	str	r0, [r7, #4]
 801528c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d10d      	bne.n	80152b4 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801529c:	b672      	cpsid	i
 801529e:	f383 8811 	msr	BASEPRI, r3
 80152a2:	f3bf 8f6f 	isb	sy
 80152a6:	f3bf 8f4f 	dsb	sy
 80152aa:	b662      	cpsie	i
 80152ac:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80152ae:	bf00      	nop
 80152b0:	bf00      	nop
 80152b2:	e7fd      	b.n	80152b0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80152b4:	f001 fe12 	bl	8016edc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	681a      	ldr	r2, [r3, #0]
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80152c0:	68f9      	ldr	r1, [r7, #12]
 80152c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80152c4:	fb01 f303 	mul.w	r3, r1, r3
 80152c8:	441a      	add	r2, r3
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	2200      	movs	r2, #0
 80152d2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	681a      	ldr	r2, [r3, #0]
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	681a      	ldr	r2, [r3, #0]
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80152e4:	3b01      	subs	r3, #1
 80152e6:	68f9      	ldr	r1, [r7, #12]
 80152e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80152ea:	fb01 f303 	mul.w	r3, r1, r3
 80152ee:	441a      	add	r2, r3
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	22ff      	movs	r2, #255	@ 0xff
 80152f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	22ff      	movs	r2, #255	@ 0xff
 8015300:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8015304:	683b      	ldr	r3, [r7, #0]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d114      	bne.n	8015334 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	691b      	ldr	r3, [r3, #16]
 801530e:	2b00      	cmp	r3, #0
 8015310:	d01a      	beq.n	8015348 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	3310      	adds	r3, #16
 8015316:	4618      	mov	r0, r3
 8015318:	f001 f9fa 	bl	8016710 <xTaskRemoveFromEventList>
 801531c:	4603      	mov	r3, r0
 801531e:	2b00      	cmp	r3, #0
 8015320:	d012      	beq.n	8015348 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015322:	4b0d      	ldr	r3, [pc, #52]	@ (8015358 <xQueueGenericReset+0xd4>)
 8015324:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015328:	601a      	str	r2, [r3, #0]
 801532a:	f3bf 8f4f 	dsb	sy
 801532e:	f3bf 8f6f 	isb	sy
 8015332:	e009      	b.n	8015348 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	3310      	adds	r3, #16
 8015338:	4618      	mov	r0, r3
 801533a:	f7ff feef 	bl	801511c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	3324      	adds	r3, #36	@ 0x24
 8015342:	4618      	mov	r0, r3
 8015344:	f7ff feea 	bl	801511c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015348:	f001 fdfe 	bl	8016f48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801534c:	2301      	movs	r3, #1
}
 801534e:	4618      	mov	r0, r3
 8015350:	3710      	adds	r7, #16
 8015352:	46bd      	mov	sp, r7
 8015354:	bd80      	pop	{r7, pc}
 8015356:	bf00      	nop
 8015358:	e000ed04 	.word	0xe000ed04

0801535c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801535c:	b580      	push	{r7, lr}
 801535e:	b08e      	sub	sp, #56	@ 0x38
 8015360:	af02      	add	r7, sp, #8
 8015362:	60f8      	str	r0, [r7, #12]
 8015364:	60b9      	str	r1, [r7, #8]
 8015366:	607a      	str	r2, [r7, #4]
 8015368:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d10d      	bne.n	801538c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8015370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015374:	b672      	cpsid	i
 8015376:	f383 8811 	msr	BASEPRI, r3
 801537a:	f3bf 8f6f 	isb	sy
 801537e:	f3bf 8f4f 	dsb	sy
 8015382:	b662      	cpsie	i
 8015384:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8015386:	bf00      	nop
 8015388:	bf00      	nop
 801538a:	e7fd      	b.n	8015388 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801538c:	683b      	ldr	r3, [r7, #0]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d10d      	bne.n	80153ae <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8015392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015396:	b672      	cpsid	i
 8015398:	f383 8811 	msr	BASEPRI, r3
 801539c:	f3bf 8f6f 	isb	sy
 80153a0:	f3bf 8f4f 	dsb	sy
 80153a4:	b662      	cpsie	i
 80153a6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80153a8:	bf00      	nop
 80153aa:	bf00      	nop
 80153ac:	e7fd      	b.n	80153aa <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d002      	beq.n	80153ba <xQueueGenericCreateStatic+0x5e>
 80153b4:	68bb      	ldr	r3, [r7, #8]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d001      	beq.n	80153be <xQueueGenericCreateStatic+0x62>
 80153ba:	2301      	movs	r3, #1
 80153bc:	e000      	b.n	80153c0 <xQueueGenericCreateStatic+0x64>
 80153be:	2300      	movs	r3, #0
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d10d      	bne.n	80153e0 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80153c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153c8:	b672      	cpsid	i
 80153ca:	f383 8811 	msr	BASEPRI, r3
 80153ce:	f3bf 8f6f 	isb	sy
 80153d2:	f3bf 8f4f 	dsb	sy
 80153d6:	b662      	cpsie	i
 80153d8:	623b      	str	r3, [r7, #32]
}
 80153da:	bf00      	nop
 80153dc:	bf00      	nop
 80153de:	e7fd      	b.n	80153dc <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d102      	bne.n	80153ec <xQueueGenericCreateStatic+0x90>
 80153e6:	68bb      	ldr	r3, [r7, #8]
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d101      	bne.n	80153f0 <xQueueGenericCreateStatic+0x94>
 80153ec:	2301      	movs	r3, #1
 80153ee:	e000      	b.n	80153f2 <xQueueGenericCreateStatic+0x96>
 80153f0:	2300      	movs	r3, #0
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d10d      	bne.n	8015412 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80153f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153fa:	b672      	cpsid	i
 80153fc:	f383 8811 	msr	BASEPRI, r3
 8015400:	f3bf 8f6f 	isb	sy
 8015404:	f3bf 8f4f 	dsb	sy
 8015408:	b662      	cpsie	i
 801540a:	61fb      	str	r3, [r7, #28]
}
 801540c:	bf00      	nop
 801540e:	bf00      	nop
 8015410:	e7fd      	b.n	801540e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015412:	2348      	movs	r3, #72	@ 0x48
 8015414:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8015416:	697b      	ldr	r3, [r7, #20]
 8015418:	2b48      	cmp	r3, #72	@ 0x48
 801541a:	d00d      	beq.n	8015438 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 801541c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015420:	b672      	cpsid	i
 8015422:	f383 8811 	msr	BASEPRI, r3
 8015426:	f3bf 8f6f 	isb	sy
 801542a:	f3bf 8f4f 	dsb	sy
 801542e:	b662      	cpsie	i
 8015430:	61bb      	str	r3, [r7, #24]
}
 8015432:	bf00      	nop
 8015434:	bf00      	nop
 8015436:	e7fd      	b.n	8015434 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015438:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801543a:	683b      	ldr	r3, [r7, #0]
 801543c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 801543e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015440:	2b00      	cmp	r3, #0
 8015442:	d00d      	beq.n	8015460 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015446:	2201      	movs	r2, #1
 8015448:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801544c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8015450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015452:	9300      	str	r3, [sp, #0]
 8015454:	4613      	mov	r3, r2
 8015456:	687a      	ldr	r2, [r7, #4]
 8015458:	68b9      	ldr	r1, [r7, #8]
 801545a:	68f8      	ldr	r0, [r7, #12]
 801545c:	f000 f848 	bl	80154f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8015462:	4618      	mov	r0, r3
 8015464:	3730      	adds	r7, #48	@ 0x30
 8015466:	46bd      	mov	sp, r7
 8015468:	bd80      	pop	{r7, pc}

0801546a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801546a:	b580      	push	{r7, lr}
 801546c:	b08a      	sub	sp, #40	@ 0x28
 801546e:	af02      	add	r7, sp, #8
 8015470:	60f8      	str	r0, [r7, #12]
 8015472:	60b9      	str	r1, [r7, #8]
 8015474:	4613      	mov	r3, r2
 8015476:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	2b00      	cmp	r3, #0
 801547c:	d10d      	bne.n	801549a <xQueueGenericCreate+0x30>
	__asm volatile
 801547e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015482:	b672      	cpsid	i
 8015484:	f383 8811 	msr	BASEPRI, r3
 8015488:	f3bf 8f6f 	isb	sy
 801548c:	f3bf 8f4f 	dsb	sy
 8015490:	b662      	cpsie	i
 8015492:	613b      	str	r3, [r7, #16]
}
 8015494:	bf00      	nop
 8015496:	bf00      	nop
 8015498:	e7fd      	b.n	8015496 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801549a:	68bb      	ldr	r3, [r7, #8]
 801549c:	2b00      	cmp	r3, #0
 801549e:	d102      	bne.n	80154a6 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80154a0:	2300      	movs	r3, #0
 80154a2:	61fb      	str	r3, [r7, #28]
 80154a4:	e004      	b.n	80154b0 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	68ba      	ldr	r2, [r7, #8]
 80154aa:	fb02 f303 	mul.w	r3, r2, r3
 80154ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80154b0:	69fb      	ldr	r3, [r7, #28]
 80154b2:	3348      	adds	r3, #72	@ 0x48
 80154b4:	4618      	mov	r0, r3
 80154b6:	f001 fe3f 	bl	8017138 <pvPortMalloc>
 80154ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80154bc:	69bb      	ldr	r3, [r7, #24]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d011      	beq.n	80154e6 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80154c2:	69bb      	ldr	r3, [r7, #24]
 80154c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80154c6:	697b      	ldr	r3, [r7, #20]
 80154c8:	3348      	adds	r3, #72	@ 0x48
 80154ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80154cc:	69bb      	ldr	r3, [r7, #24]
 80154ce:	2200      	movs	r2, #0
 80154d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80154d4:	79fa      	ldrb	r2, [r7, #7]
 80154d6:	69bb      	ldr	r3, [r7, #24]
 80154d8:	9300      	str	r3, [sp, #0]
 80154da:	4613      	mov	r3, r2
 80154dc:	697a      	ldr	r2, [r7, #20]
 80154de:	68b9      	ldr	r1, [r7, #8]
 80154e0:	68f8      	ldr	r0, [r7, #12]
 80154e2:	f000 f805 	bl	80154f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80154e6:	69bb      	ldr	r3, [r7, #24]
	}
 80154e8:	4618      	mov	r0, r3
 80154ea:	3720      	adds	r7, #32
 80154ec:	46bd      	mov	sp, r7
 80154ee:	bd80      	pop	{r7, pc}

080154f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80154f0:	b580      	push	{r7, lr}
 80154f2:	b084      	sub	sp, #16
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	60f8      	str	r0, [r7, #12]
 80154f8:	60b9      	str	r1, [r7, #8]
 80154fa:	607a      	str	r2, [r7, #4]
 80154fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80154fe:	68bb      	ldr	r3, [r7, #8]
 8015500:	2b00      	cmp	r3, #0
 8015502:	d103      	bne.n	801550c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015504:	69bb      	ldr	r3, [r7, #24]
 8015506:	69ba      	ldr	r2, [r7, #24]
 8015508:	601a      	str	r2, [r3, #0]
 801550a:	e002      	b.n	8015512 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801550c:	69bb      	ldr	r3, [r7, #24]
 801550e:	687a      	ldr	r2, [r7, #4]
 8015510:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015512:	69bb      	ldr	r3, [r7, #24]
 8015514:	68fa      	ldr	r2, [r7, #12]
 8015516:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015518:	69bb      	ldr	r3, [r7, #24]
 801551a:	68ba      	ldr	r2, [r7, #8]
 801551c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801551e:	2101      	movs	r1, #1
 8015520:	69b8      	ldr	r0, [r7, #24]
 8015522:	f7ff feaf 	bl	8015284 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015526:	bf00      	nop
 8015528:	3710      	adds	r7, #16
 801552a:	46bd      	mov	sp, r7
 801552c:	bd80      	pop	{r7, pc}
	...

08015530 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015530:	b580      	push	{r7, lr}
 8015532:	b08e      	sub	sp, #56	@ 0x38
 8015534:	af00      	add	r7, sp, #0
 8015536:	60f8      	str	r0, [r7, #12]
 8015538:	60b9      	str	r1, [r7, #8]
 801553a:	607a      	str	r2, [r7, #4]
 801553c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801553e:	2300      	movs	r3, #0
 8015540:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8015546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015548:	2b00      	cmp	r3, #0
 801554a:	d10d      	bne.n	8015568 <xQueueGenericSend+0x38>
	__asm volatile
 801554c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015550:	b672      	cpsid	i
 8015552:	f383 8811 	msr	BASEPRI, r3
 8015556:	f3bf 8f6f 	isb	sy
 801555a:	f3bf 8f4f 	dsb	sy
 801555e:	b662      	cpsie	i
 8015560:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8015562:	bf00      	nop
 8015564:	bf00      	nop
 8015566:	e7fd      	b.n	8015564 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015568:	68bb      	ldr	r3, [r7, #8]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d103      	bne.n	8015576 <xQueueGenericSend+0x46>
 801556e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015572:	2b00      	cmp	r3, #0
 8015574:	d101      	bne.n	801557a <xQueueGenericSend+0x4a>
 8015576:	2301      	movs	r3, #1
 8015578:	e000      	b.n	801557c <xQueueGenericSend+0x4c>
 801557a:	2300      	movs	r3, #0
 801557c:	2b00      	cmp	r3, #0
 801557e:	d10d      	bne.n	801559c <xQueueGenericSend+0x6c>
	__asm volatile
 8015580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015584:	b672      	cpsid	i
 8015586:	f383 8811 	msr	BASEPRI, r3
 801558a:	f3bf 8f6f 	isb	sy
 801558e:	f3bf 8f4f 	dsb	sy
 8015592:	b662      	cpsie	i
 8015594:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8015596:	bf00      	nop
 8015598:	bf00      	nop
 801559a:	e7fd      	b.n	8015598 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801559c:	683b      	ldr	r3, [r7, #0]
 801559e:	2b02      	cmp	r3, #2
 80155a0:	d103      	bne.n	80155aa <xQueueGenericSend+0x7a>
 80155a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80155a6:	2b01      	cmp	r3, #1
 80155a8:	d101      	bne.n	80155ae <xQueueGenericSend+0x7e>
 80155aa:	2301      	movs	r3, #1
 80155ac:	e000      	b.n	80155b0 <xQueueGenericSend+0x80>
 80155ae:	2300      	movs	r3, #0
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d10d      	bne.n	80155d0 <xQueueGenericSend+0xa0>
	__asm volatile
 80155b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155b8:	b672      	cpsid	i
 80155ba:	f383 8811 	msr	BASEPRI, r3
 80155be:	f3bf 8f6f 	isb	sy
 80155c2:	f3bf 8f4f 	dsb	sy
 80155c6:	b662      	cpsie	i
 80155c8:	623b      	str	r3, [r7, #32]
}
 80155ca:	bf00      	nop
 80155cc:	bf00      	nop
 80155ce:	e7fd      	b.n	80155cc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80155d0:	f001 fa68 	bl	8016aa4 <xTaskGetSchedulerState>
 80155d4:	4603      	mov	r3, r0
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d102      	bne.n	80155e0 <xQueueGenericSend+0xb0>
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d101      	bne.n	80155e4 <xQueueGenericSend+0xb4>
 80155e0:	2301      	movs	r3, #1
 80155e2:	e000      	b.n	80155e6 <xQueueGenericSend+0xb6>
 80155e4:	2300      	movs	r3, #0
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d10d      	bne.n	8015606 <xQueueGenericSend+0xd6>
	__asm volatile
 80155ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155ee:	b672      	cpsid	i
 80155f0:	f383 8811 	msr	BASEPRI, r3
 80155f4:	f3bf 8f6f 	isb	sy
 80155f8:	f3bf 8f4f 	dsb	sy
 80155fc:	b662      	cpsie	i
 80155fe:	61fb      	str	r3, [r7, #28]
}
 8015600:	bf00      	nop
 8015602:	bf00      	nop
 8015604:	e7fd      	b.n	8015602 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015606:	f001 fc69 	bl	8016edc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801560a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801560c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801560e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015612:	429a      	cmp	r2, r3
 8015614:	d302      	bcc.n	801561c <xQueueGenericSend+0xec>
 8015616:	683b      	ldr	r3, [r7, #0]
 8015618:	2b02      	cmp	r3, #2
 801561a:	d129      	bne.n	8015670 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801561c:	683a      	ldr	r2, [r7, #0]
 801561e:	68b9      	ldr	r1, [r7, #8]
 8015620:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015622:	f000 fae5 	bl	8015bf0 <prvCopyDataToQueue>
 8015626:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801562a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801562c:	2b00      	cmp	r3, #0
 801562e:	d010      	beq.n	8015652 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015632:	3324      	adds	r3, #36	@ 0x24
 8015634:	4618      	mov	r0, r3
 8015636:	f001 f86b 	bl	8016710 <xTaskRemoveFromEventList>
 801563a:	4603      	mov	r3, r0
 801563c:	2b00      	cmp	r3, #0
 801563e:	d013      	beq.n	8015668 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015640:	4b3f      	ldr	r3, [pc, #252]	@ (8015740 <xQueueGenericSend+0x210>)
 8015642:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015646:	601a      	str	r2, [r3, #0]
 8015648:	f3bf 8f4f 	dsb	sy
 801564c:	f3bf 8f6f 	isb	sy
 8015650:	e00a      	b.n	8015668 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015654:	2b00      	cmp	r3, #0
 8015656:	d007      	beq.n	8015668 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015658:	4b39      	ldr	r3, [pc, #228]	@ (8015740 <xQueueGenericSend+0x210>)
 801565a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801565e:	601a      	str	r2, [r3, #0]
 8015660:	f3bf 8f4f 	dsb	sy
 8015664:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015668:	f001 fc6e 	bl	8016f48 <vPortExitCritical>
				return pdPASS;
 801566c:	2301      	movs	r3, #1
 801566e:	e063      	b.n	8015738 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d103      	bne.n	801567e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015676:	f001 fc67 	bl	8016f48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801567a:	2300      	movs	r3, #0
 801567c:	e05c      	b.n	8015738 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 801567e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015680:	2b00      	cmp	r3, #0
 8015682:	d106      	bne.n	8015692 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015684:	f107 0314 	add.w	r3, r7, #20
 8015688:	4618      	mov	r0, r3
 801568a:	f001 f8a7 	bl	80167dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801568e:	2301      	movs	r3, #1
 8015690:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015692:	f001 fc59 	bl	8016f48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015696:	f000 fe03 	bl	80162a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801569a:	f001 fc1f 	bl	8016edc <vPortEnterCritical>
 801569e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80156a4:	b25b      	sxtb	r3, r3
 80156a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156aa:	d103      	bne.n	80156b4 <xQueueGenericSend+0x184>
 80156ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156ae:	2200      	movs	r2, #0
 80156b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80156b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80156ba:	b25b      	sxtb	r3, r3
 80156bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156c0:	d103      	bne.n	80156ca <xQueueGenericSend+0x19a>
 80156c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156c4:	2200      	movs	r2, #0
 80156c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80156ca:	f001 fc3d 	bl	8016f48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80156ce:	1d3a      	adds	r2, r7, #4
 80156d0:	f107 0314 	add.w	r3, r7, #20
 80156d4:	4611      	mov	r1, r2
 80156d6:	4618      	mov	r0, r3
 80156d8:	f001 f896 	bl	8016808 <xTaskCheckForTimeOut>
 80156dc:	4603      	mov	r3, r0
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d124      	bne.n	801572c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80156e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80156e4:	f000 fb7c 	bl	8015de0 <prvIsQueueFull>
 80156e8:	4603      	mov	r3, r0
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d018      	beq.n	8015720 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80156ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156f0:	3310      	adds	r3, #16
 80156f2:	687a      	ldr	r2, [r7, #4]
 80156f4:	4611      	mov	r1, r2
 80156f6:	4618      	mov	r0, r3
 80156f8:	f000 ffe2 	bl	80166c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80156fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80156fe:	f000 fb07 	bl	8015d10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015702:	f000 fddb 	bl	80162bc <xTaskResumeAll>
 8015706:	4603      	mov	r3, r0
 8015708:	2b00      	cmp	r3, #0
 801570a:	f47f af7c 	bne.w	8015606 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 801570e:	4b0c      	ldr	r3, [pc, #48]	@ (8015740 <xQueueGenericSend+0x210>)
 8015710:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015714:	601a      	str	r2, [r3, #0]
 8015716:	f3bf 8f4f 	dsb	sy
 801571a:	f3bf 8f6f 	isb	sy
 801571e:	e772      	b.n	8015606 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015720:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015722:	f000 faf5 	bl	8015d10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015726:	f000 fdc9 	bl	80162bc <xTaskResumeAll>
 801572a:	e76c      	b.n	8015606 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801572c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801572e:	f000 faef 	bl	8015d10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015732:	f000 fdc3 	bl	80162bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015736:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015738:	4618      	mov	r0, r3
 801573a:	3738      	adds	r7, #56	@ 0x38
 801573c:	46bd      	mov	sp, r7
 801573e:	bd80      	pop	{r7, pc}
 8015740:	e000ed04 	.word	0xe000ed04

08015744 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015744:	b580      	push	{r7, lr}
 8015746:	b08e      	sub	sp, #56	@ 0x38
 8015748:	af00      	add	r7, sp, #0
 801574a:	60f8      	str	r0, [r7, #12]
 801574c:	60b9      	str	r1, [r7, #8]
 801574e:	607a      	str	r2, [r7, #4]
 8015750:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8015756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015758:	2b00      	cmp	r3, #0
 801575a:	d10d      	bne.n	8015778 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 801575c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015760:	b672      	cpsid	i
 8015762:	f383 8811 	msr	BASEPRI, r3
 8015766:	f3bf 8f6f 	isb	sy
 801576a:	f3bf 8f4f 	dsb	sy
 801576e:	b662      	cpsie	i
 8015770:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8015772:	bf00      	nop
 8015774:	bf00      	nop
 8015776:	e7fd      	b.n	8015774 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015778:	68bb      	ldr	r3, [r7, #8]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d103      	bne.n	8015786 <xQueueGenericSendFromISR+0x42>
 801577e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015782:	2b00      	cmp	r3, #0
 8015784:	d101      	bne.n	801578a <xQueueGenericSendFromISR+0x46>
 8015786:	2301      	movs	r3, #1
 8015788:	e000      	b.n	801578c <xQueueGenericSendFromISR+0x48>
 801578a:	2300      	movs	r3, #0
 801578c:	2b00      	cmp	r3, #0
 801578e:	d10d      	bne.n	80157ac <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8015790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015794:	b672      	cpsid	i
 8015796:	f383 8811 	msr	BASEPRI, r3
 801579a:	f3bf 8f6f 	isb	sy
 801579e:	f3bf 8f4f 	dsb	sy
 80157a2:	b662      	cpsie	i
 80157a4:	623b      	str	r3, [r7, #32]
}
 80157a6:	bf00      	nop
 80157a8:	bf00      	nop
 80157aa:	e7fd      	b.n	80157a8 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80157ac:	683b      	ldr	r3, [r7, #0]
 80157ae:	2b02      	cmp	r3, #2
 80157b0:	d103      	bne.n	80157ba <xQueueGenericSendFromISR+0x76>
 80157b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80157b6:	2b01      	cmp	r3, #1
 80157b8:	d101      	bne.n	80157be <xQueueGenericSendFromISR+0x7a>
 80157ba:	2301      	movs	r3, #1
 80157bc:	e000      	b.n	80157c0 <xQueueGenericSendFromISR+0x7c>
 80157be:	2300      	movs	r3, #0
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d10d      	bne.n	80157e0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80157c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157c8:	b672      	cpsid	i
 80157ca:	f383 8811 	msr	BASEPRI, r3
 80157ce:	f3bf 8f6f 	isb	sy
 80157d2:	f3bf 8f4f 	dsb	sy
 80157d6:	b662      	cpsie	i
 80157d8:	61fb      	str	r3, [r7, #28]
}
 80157da:	bf00      	nop
 80157dc:	bf00      	nop
 80157de:	e7fd      	b.n	80157dc <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80157e0:	f001 fc64 	bl	80170ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80157e4:	f3ef 8211 	mrs	r2, BASEPRI
 80157e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157ec:	b672      	cpsid	i
 80157ee:	f383 8811 	msr	BASEPRI, r3
 80157f2:	f3bf 8f6f 	isb	sy
 80157f6:	f3bf 8f4f 	dsb	sy
 80157fa:	b662      	cpsie	i
 80157fc:	61ba      	str	r2, [r7, #24]
 80157fe:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015800:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015802:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015806:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801580a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801580c:	429a      	cmp	r2, r3
 801580e:	d302      	bcc.n	8015816 <xQueueGenericSendFromISR+0xd2>
 8015810:	683b      	ldr	r3, [r7, #0]
 8015812:	2b02      	cmp	r3, #2
 8015814:	d12c      	bne.n	8015870 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015818:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801581c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015820:	683a      	ldr	r2, [r7, #0]
 8015822:	68b9      	ldr	r1, [r7, #8]
 8015824:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015826:	f000 f9e3 	bl	8015bf0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801582a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 801582e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015832:	d112      	bne.n	801585a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015838:	2b00      	cmp	r3, #0
 801583a:	d016      	beq.n	801586a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801583c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801583e:	3324      	adds	r3, #36	@ 0x24
 8015840:	4618      	mov	r0, r3
 8015842:	f000 ff65 	bl	8016710 <xTaskRemoveFromEventList>
 8015846:	4603      	mov	r3, r0
 8015848:	2b00      	cmp	r3, #0
 801584a:	d00e      	beq.n	801586a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d00b      	beq.n	801586a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	2201      	movs	r2, #1
 8015856:	601a      	str	r2, [r3, #0]
 8015858:	e007      	b.n	801586a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801585a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801585e:	3301      	adds	r3, #1
 8015860:	b2db      	uxtb	r3, r3
 8015862:	b25a      	sxtb	r2, r3
 8015864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015866:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801586a:	2301      	movs	r3, #1
 801586c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 801586e:	e001      	b.n	8015874 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015870:	2300      	movs	r3, #0
 8015872:	637b      	str	r3, [r7, #52]	@ 0x34
 8015874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015876:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015878:	693b      	ldr	r3, [r7, #16]
 801587a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801587e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8015882:	4618      	mov	r0, r3
 8015884:	3738      	adds	r7, #56	@ 0x38
 8015886:	46bd      	mov	sp, r7
 8015888:	bd80      	pop	{r7, pc}
	...

0801588c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801588c:	b580      	push	{r7, lr}
 801588e:	b08c      	sub	sp, #48	@ 0x30
 8015890:	af00      	add	r7, sp, #0
 8015892:	60f8      	str	r0, [r7, #12]
 8015894:	60b9      	str	r1, [r7, #8]
 8015896:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015898:	2300      	movs	r3, #0
 801589a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80158a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d10d      	bne.n	80158c2 <xQueueReceive+0x36>
	__asm volatile
 80158a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158aa:	b672      	cpsid	i
 80158ac:	f383 8811 	msr	BASEPRI, r3
 80158b0:	f3bf 8f6f 	isb	sy
 80158b4:	f3bf 8f4f 	dsb	sy
 80158b8:	b662      	cpsie	i
 80158ba:	623b      	str	r3, [r7, #32]
}
 80158bc:	bf00      	nop
 80158be:	bf00      	nop
 80158c0:	e7fd      	b.n	80158be <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80158c2:	68bb      	ldr	r3, [r7, #8]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d103      	bne.n	80158d0 <xQueueReceive+0x44>
 80158c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d101      	bne.n	80158d4 <xQueueReceive+0x48>
 80158d0:	2301      	movs	r3, #1
 80158d2:	e000      	b.n	80158d6 <xQueueReceive+0x4a>
 80158d4:	2300      	movs	r3, #0
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d10d      	bne.n	80158f6 <xQueueReceive+0x6a>
	__asm volatile
 80158da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158de:	b672      	cpsid	i
 80158e0:	f383 8811 	msr	BASEPRI, r3
 80158e4:	f3bf 8f6f 	isb	sy
 80158e8:	f3bf 8f4f 	dsb	sy
 80158ec:	b662      	cpsie	i
 80158ee:	61fb      	str	r3, [r7, #28]
}
 80158f0:	bf00      	nop
 80158f2:	bf00      	nop
 80158f4:	e7fd      	b.n	80158f2 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80158f6:	f001 f8d5 	bl	8016aa4 <xTaskGetSchedulerState>
 80158fa:	4603      	mov	r3, r0
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d102      	bne.n	8015906 <xQueueReceive+0x7a>
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d101      	bne.n	801590a <xQueueReceive+0x7e>
 8015906:	2301      	movs	r3, #1
 8015908:	e000      	b.n	801590c <xQueueReceive+0x80>
 801590a:	2300      	movs	r3, #0
 801590c:	2b00      	cmp	r3, #0
 801590e:	d10d      	bne.n	801592c <xQueueReceive+0xa0>
	__asm volatile
 8015910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015914:	b672      	cpsid	i
 8015916:	f383 8811 	msr	BASEPRI, r3
 801591a:	f3bf 8f6f 	isb	sy
 801591e:	f3bf 8f4f 	dsb	sy
 8015922:	b662      	cpsie	i
 8015924:	61bb      	str	r3, [r7, #24]
}
 8015926:	bf00      	nop
 8015928:	bf00      	nop
 801592a:	e7fd      	b.n	8015928 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801592c:	f001 fad6 	bl	8016edc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015934:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015938:	2b00      	cmp	r3, #0
 801593a:	d01f      	beq.n	801597c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801593c:	68b9      	ldr	r1, [r7, #8]
 801593e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015940:	f000 f9c0 	bl	8015cc4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015946:	1e5a      	subs	r2, r3, #1
 8015948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801594a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801594c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801594e:	691b      	ldr	r3, [r3, #16]
 8015950:	2b00      	cmp	r3, #0
 8015952:	d00f      	beq.n	8015974 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015956:	3310      	adds	r3, #16
 8015958:	4618      	mov	r0, r3
 801595a:	f000 fed9 	bl	8016710 <xTaskRemoveFromEventList>
 801595e:	4603      	mov	r3, r0
 8015960:	2b00      	cmp	r3, #0
 8015962:	d007      	beq.n	8015974 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015964:	4b3c      	ldr	r3, [pc, #240]	@ (8015a58 <xQueueReceive+0x1cc>)
 8015966:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801596a:	601a      	str	r2, [r3, #0]
 801596c:	f3bf 8f4f 	dsb	sy
 8015970:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015974:	f001 fae8 	bl	8016f48 <vPortExitCritical>
				return pdPASS;
 8015978:	2301      	movs	r3, #1
 801597a:	e069      	b.n	8015a50 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	2b00      	cmp	r3, #0
 8015980:	d103      	bne.n	801598a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015982:	f001 fae1 	bl	8016f48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015986:	2300      	movs	r3, #0
 8015988:	e062      	b.n	8015a50 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 801598a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801598c:	2b00      	cmp	r3, #0
 801598e:	d106      	bne.n	801599e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015990:	f107 0310 	add.w	r3, r7, #16
 8015994:	4618      	mov	r0, r3
 8015996:	f000 ff21 	bl	80167dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801599a:	2301      	movs	r3, #1
 801599c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801599e:	f001 fad3 	bl	8016f48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80159a2:	f000 fc7d 	bl	80162a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80159a6:	f001 fa99 	bl	8016edc <vPortEnterCritical>
 80159aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80159b0:	b25b      	sxtb	r3, r3
 80159b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159b6:	d103      	bne.n	80159c0 <xQueueReceive+0x134>
 80159b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159ba:	2200      	movs	r2, #0
 80159bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80159c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80159c6:	b25b      	sxtb	r3, r3
 80159c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159cc:	d103      	bne.n	80159d6 <xQueueReceive+0x14a>
 80159ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159d0:	2200      	movs	r2, #0
 80159d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80159d6:	f001 fab7 	bl	8016f48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80159da:	1d3a      	adds	r2, r7, #4
 80159dc:	f107 0310 	add.w	r3, r7, #16
 80159e0:	4611      	mov	r1, r2
 80159e2:	4618      	mov	r0, r3
 80159e4:	f000 ff10 	bl	8016808 <xTaskCheckForTimeOut>
 80159e8:	4603      	mov	r3, r0
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d123      	bne.n	8015a36 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80159ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80159f0:	f000 f9e0 	bl	8015db4 <prvIsQueueEmpty>
 80159f4:	4603      	mov	r3, r0
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d017      	beq.n	8015a2a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80159fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159fc:	3324      	adds	r3, #36	@ 0x24
 80159fe:	687a      	ldr	r2, [r7, #4]
 8015a00:	4611      	mov	r1, r2
 8015a02:	4618      	mov	r0, r3
 8015a04:	f000 fe5c 	bl	80166c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015a08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015a0a:	f000 f981 	bl	8015d10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015a0e:	f000 fc55 	bl	80162bc <xTaskResumeAll>
 8015a12:	4603      	mov	r3, r0
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d189      	bne.n	801592c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8015a18:	4b0f      	ldr	r3, [pc, #60]	@ (8015a58 <xQueueReceive+0x1cc>)
 8015a1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015a1e:	601a      	str	r2, [r3, #0]
 8015a20:	f3bf 8f4f 	dsb	sy
 8015a24:	f3bf 8f6f 	isb	sy
 8015a28:	e780      	b.n	801592c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8015a2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015a2c:	f000 f970 	bl	8015d10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015a30:	f000 fc44 	bl	80162bc <xTaskResumeAll>
 8015a34:	e77a      	b.n	801592c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8015a36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015a38:	f000 f96a 	bl	8015d10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015a3c:	f000 fc3e 	bl	80162bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015a40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015a42:	f000 f9b7 	bl	8015db4 <prvIsQueueEmpty>
 8015a46:	4603      	mov	r3, r0
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	f43f af6f 	beq.w	801592c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015a4e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015a50:	4618      	mov	r0, r3
 8015a52:	3730      	adds	r7, #48	@ 0x30
 8015a54:	46bd      	mov	sp, r7
 8015a56:	bd80      	pop	{r7, pc}
 8015a58:	e000ed04 	.word	0xe000ed04

08015a5c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b08e      	sub	sp, #56	@ 0x38
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	60f8      	str	r0, [r7, #12]
 8015a64:	60b9      	str	r1, [r7, #8]
 8015a66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8015a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d10d      	bne.n	8015a8e <xQueueReceiveFromISR+0x32>
	__asm volatile
 8015a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a76:	b672      	cpsid	i
 8015a78:	f383 8811 	msr	BASEPRI, r3
 8015a7c:	f3bf 8f6f 	isb	sy
 8015a80:	f3bf 8f4f 	dsb	sy
 8015a84:	b662      	cpsie	i
 8015a86:	623b      	str	r3, [r7, #32]
}
 8015a88:	bf00      	nop
 8015a8a:	bf00      	nop
 8015a8c:	e7fd      	b.n	8015a8a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015a8e:	68bb      	ldr	r3, [r7, #8]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d103      	bne.n	8015a9c <xQueueReceiveFromISR+0x40>
 8015a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d101      	bne.n	8015aa0 <xQueueReceiveFromISR+0x44>
 8015a9c:	2301      	movs	r3, #1
 8015a9e:	e000      	b.n	8015aa2 <xQueueReceiveFromISR+0x46>
 8015aa0:	2300      	movs	r3, #0
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d10d      	bne.n	8015ac2 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8015aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015aaa:	b672      	cpsid	i
 8015aac:	f383 8811 	msr	BASEPRI, r3
 8015ab0:	f3bf 8f6f 	isb	sy
 8015ab4:	f3bf 8f4f 	dsb	sy
 8015ab8:	b662      	cpsie	i
 8015aba:	61fb      	str	r3, [r7, #28]
}
 8015abc:	bf00      	nop
 8015abe:	bf00      	nop
 8015ac0:	e7fd      	b.n	8015abe <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015ac2:	f001 faf3 	bl	80170ac <vPortValidateInterruptPriority>
	__asm volatile
 8015ac6:	f3ef 8211 	mrs	r2, BASEPRI
 8015aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ace:	b672      	cpsid	i
 8015ad0:	f383 8811 	msr	BASEPRI, r3
 8015ad4:	f3bf 8f6f 	isb	sy
 8015ad8:	f3bf 8f4f 	dsb	sy
 8015adc:	b662      	cpsie	i
 8015ade:	61ba      	str	r2, [r7, #24]
 8015ae0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015ae2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015aea:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d02f      	beq.n	8015b52 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8015af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015af4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015af8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015afc:	68b9      	ldr	r1, [r7, #8]
 8015afe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015b00:	f000 f8e0 	bl	8015cc4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b06:	1e5a      	subs	r2, r3, #1
 8015b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b0a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015b0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8015b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b14:	d112      	bne.n	8015b3c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b18:	691b      	ldr	r3, [r3, #16]
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d016      	beq.n	8015b4c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b20:	3310      	adds	r3, #16
 8015b22:	4618      	mov	r0, r3
 8015b24:	f000 fdf4 	bl	8016710 <xTaskRemoveFromEventList>
 8015b28:	4603      	mov	r3, r0
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d00e      	beq.n	8015b4c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d00b      	beq.n	8015b4c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	2201      	movs	r2, #1
 8015b38:	601a      	str	r2, [r3, #0]
 8015b3a:	e007      	b.n	8015b4c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015b40:	3301      	adds	r3, #1
 8015b42:	b2db      	uxtb	r3, r3
 8015b44:	b25a      	sxtb	r2, r3
 8015b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8015b4c:	2301      	movs	r3, #1
 8015b4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8015b50:	e001      	b.n	8015b56 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8015b52:	2300      	movs	r3, #0
 8015b54:	637b      	str	r3, [r7, #52]	@ 0x34
 8015b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b58:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015b5a:	693b      	ldr	r3, [r7, #16]
 8015b5c:	f383 8811 	msr	BASEPRI, r3
}
 8015b60:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8015b64:	4618      	mov	r0, r3
 8015b66:	3738      	adds	r7, #56	@ 0x38
 8015b68:	46bd      	mov	sp, r7
 8015b6a:	bd80      	pop	{r7, pc}

08015b6c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8015b6c:	b580      	push	{r7, lr}
 8015b6e:	b084      	sub	sp, #16
 8015b70:	af00      	add	r7, sp, #0
 8015b72:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d10d      	bne.n	8015b96 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8015b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b7e:	b672      	cpsid	i
 8015b80:	f383 8811 	msr	BASEPRI, r3
 8015b84:	f3bf 8f6f 	isb	sy
 8015b88:	f3bf 8f4f 	dsb	sy
 8015b8c:	b662      	cpsie	i
 8015b8e:	60bb      	str	r3, [r7, #8]
}
 8015b90:	bf00      	nop
 8015b92:	bf00      	nop
 8015b94:	e7fd      	b.n	8015b92 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8015b96:	f001 f9a1 	bl	8016edc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015b9e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8015ba0:	f001 f9d2 	bl	8016f48 <vPortExitCritical>

	return uxReturn;
 8015ba4:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	3710      	adds	r7, #16
 8015baa:	46bd      	mov	sp, r7
 8015bac:	bd80      	pop	{r7, pc}

08015bae <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8015bae:	b480      	push	{r7}
 8015bb0:	b087      	sub	sp, #28
 8015bb2:	af00      	add	r7, sp, #0
 8015bb4:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8015bba:	697b      	ldr	r3, [r7, #20]
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d10d      	bne.n	8015bdc <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8015bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015bc4:	b672      	cpsid	i
 8015bc6:	f383 8811 	msr	BASEPRI, r3
 8015bca:	f3bf 8f6f 	isb	sy
 8015bce:	f3bf 8f4f 	dsb	sy
 8015bd2:	b662      	cpsie	i
 8015bd4:	60fb      	str	r3, [r7, #12]
}
 8015bd6:	bf00      	nop
 8015bd8:	bf00      	nop
 8015bda:	e7fd      	b.n	8015bd8 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8015bdc:	697b      	ldr	r3, [r7, #20]
 8015bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015be0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8015be2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8015be4:	4618      	mov	r0, r3
 8015be6:	371c      	adds	r7, #28
 8015be8:	46bd      	mov	sp, r7
 8015bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bee:	4770      	bx	lr

08015bf0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b086      	sub	sp, #24
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	60f8      	str	r0, [r7, #12]
 8015bf8:	60b9      	str	r1, [r7, #8]
 8015bfa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015c04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015c06:	68fb      	ldr	r3, [r7, #12]
 8015c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d10d      	bne.n	8015c2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d14d      	bne.n	8015cb2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	689b      	ldr	r3, [r3, #8]
 8015c1a:	4618      	mov	r0, r3
 8015c1c:	f000 ff60 	bl	8016ae0 <xTaskPriorityDisinherit>
 8015c20:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	2200      	movs	r2, #0
 8015c26:	609a      	str	r2, [r3, #8]
 8015c28:	e043      	b.n	8015cb2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d119      	bne.n	8015c64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	6858      	ldr	r0, [r3, #4]
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015c38:	461a      	mov	r2, r3
 8015c3a:	68b9      	ldr	r1, [r7, #8]
 8015c3c:	f002 f825 	bl	8017c8a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	685a      	ldr	r2, [r3, #4]
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015c48:	441a      	add	r2, r3
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	685a      	ldr	r2, [r3, #4]
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	689b      	ldr	r3, [r3, #8]
 8015c56:	429a      	cmp	r2, r3
 8015c58:	d32b      	bcc.n	8015cb2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	681a      	ldr	r2, [r3, #0]
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	605a      	str	r2, [r3, #4]
 8015c62:	e026      	b.n	8015cb2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	68d8      	ldr	r0, [r3, #12]
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015c6c:	461a      	mov	r2, r3
 8015c6e:	68b9      	ldr	r1, [r7, #8]
 8015c70:	f002 f80b 	bl	8017c8a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	68da      	ldr	r2, [r3, #12]
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015c7c:	425b      	negs	r3, r3
 8015c7e:	441a      	add	r2, r3
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	68da      	ldr	r2, [r3, #12]
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	429a      	cmp	r2, r3
 8015c8e:	d207      	bcs.n	8015ca0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	689a      	ldr	r2, [r3, #8]
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015c98:	425b      	negs	r3, r3
 8015c9a:	441a      	add	r2, r3
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	2b02      	cmp	r3, #2
 8015ca4:	d105      	bne.n	8015cb2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015ca6:	693b      	ldr	r3, [r7, #16]
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d002      	beq.n	8015cb2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015cac:	693b      	ldr	r3, [r7, #16]
 8015cae:	3b01      	subs	r3, #1
 8015cb0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015cb2:	693b      	ldr	r3, [r7, #16]
 8015cb4:	1c5a      	adds	r2, r3, #1
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8015cba:	697b      	ldr	r3, [r7, #20]
}
 8015cbc:	4618      	mov	r0, r3
 8015cbe:	3718      	adds	r7, #24
 8015cc0:	46bd      	mov	sp, r7
 8015cc2:	bd80      	pop	{r7, pc}

08015cc4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015cc4:	b580      	push	{r7, lr}
 8015cc6:	b082      	sub	sp, #8
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	6078      	str	r0, [r7, #4]
 8015ccc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d018      	beq.n	8015d08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	68da      	ldr	r2, [r3, #12]
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015cde:	441a      	add	r2, r3
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	68da      	ldr	r2, [r3, #12]
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	689b      	ldr	r3, [r3, #8]
 8015cec:	429a      	cmp	r2, r3
 8015cee:	d303      	bcc.n	8015cf8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	681a      	ldr	r2, [r3, #0]
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	68d9      	ldr	r1, [r3, #12]
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015d00:	461a      	mov	r2, r3
 8015d02:	6838      	ldr	r0, [r7, #0]
 8015d04:	f001 ffc1 	bl	8017c8a <memcpy>
	}
}
 8015d08:	bf00      	nop
 8015d0a:	3708      	adds	r7, #8
 8015d0c:	46bd      	mov	sp, r7
 8015d0e:	bd80      	pop	{r7, pc}

08015d10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b084      	sub	sp, #16
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015d18:	f001 f8e0 	bl	8016edc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015d22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015d24:	e011      	b.n	8015d4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d012      	beq.n	8015d54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	3324      	adds	r3, #36	@ 0x24
 8015d32:	4618      	mov	r0, r3
 8015d34:	f000 fcec 	bl	8016710 <xTaskRemoveFromEventList>
 8015d38:	4603      	mov	r3, r0
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d001      	beq.n	8015d42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015d3e:	f000 fdcb 	bl	80168d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015d42:	7bfb      	ldrb	r3, [r7, #15]
 8015d44:	3b01      	subs	r3, #1
 8015d46:	b2db      	uxtb	r3, r3
 8015d48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	dce9      	bgt.n	8015d26 <prvUnlockQueue+0x16>
 8015d52:	e000      	b.n	8015d56 <prvUnlockQueue+0x46>
					break;
 8015d54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	22ff      	movs	r2, #255	@ 0xff
 8015d5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8015d5e:	f001 f8f3 	bl	8016f48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015d62:	f001 f8bb 	bl	8016edc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015d6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015d6e:	e011      	b.n	8015d94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	691b      	ldr	r3, [r3, #16]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d012      	beq.n	8015d9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	3310      	adds	r3, #16
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	f000 fcc7 	bl	8016710 <xTaskRemoveFromEventList>
 8015d82:	4603      	mov	r3, r0
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d001      	beq.n	8015d8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015d88:	f000 fda6 	bl	80168d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015d8c:	7bbb      	ldrb	r3, [r7, #14]
 8015d8e:	3b01      	subs	r3, #1
 8015d90:	b2db      	uxtb	r3, r3
 8015d92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015d94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	dce9      	bgt.n	8015d70 <prvUnlockQueue+0x60>
 8015d9c:	e000      	b.n	8015da0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015d9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	22ff      	movs	r2, #255	@ 0xff
 8015da4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8015da8:	f001 f8ce 	bl	8016f48 <vPortExitCritical>
}
 8015dac:	bf00      	nop
 8015dae:	3710      	adds	r7, #16
 8015db0:	46bd      	mov	sp, r7
 8015db2:	bd80      	pop	{r7, pc}

08015db4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015db4:	b580      	push	{r7, lr}
 8015db6:	b084      	sub	sp, #16
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015dbc:	f001 f88e 	bl	8016edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d102      	bne.n	8015dce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015dc8:	2301      	movs	r3, #1
 8015dca:	60fb      	str	r3, [r7, #12]
 8015dcc:	e001      	b.n	8015dd2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015dce:	2300      	movs	r3, #0
 8015dd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015dd2:	f001 f8b9 	bl	8016f48 <vPortExitCritical>

	return xReturn;
 8015dd6:	68fb      	ldr	r3, [r7, #12]
}
 8015dd8:	4618      	mov	r0, r3
 8015dda:	3710      	adds	r7, #16
 8015ddc:	46bd      	mov	sp, r7
 8015dde:	bd80      	pop	{r7, pc}

08015de0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015de0:	b580      	push	{r7, lr}
 8015de2:	b084      	sub	sp, #16
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015de8:	f001 f878 	bl	8016edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015df4:	429a      	cmp	r2, r3
 8015df6:	d102      	bne.n	8015dfe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015df8:	2301      	movs	r3, #1
 8015dfa:	60fb      	str	r3, [r7, #12]
 8015dfc:	e001      	b.n	8015e02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015dfe:	2300      	movs	r3, #0
 8015e00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015e02:	f001 f8a1 	bl	8016f48 <vPortExitCritical>

	return xReturn;
 8015e06:	68fb      	ldr	r3, [r7, #12]
}
 8015e08:	4618      	mov	r0, r3
 8015e0a:	3710      	adds	r7, #16
 8015e0c:	46bd      	mov	sp, r7
 8015e0e:	bd80      	pop	{r7, pc}

08015e10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015e10:	b580      	push	{r7, lr}
 8015e12:	b08e      	sub	sp, #56	@ 0x38
 8015e14:	af04      	add	r7, sp, #16
 8015e16:	60f8      	str	r0, [r7, #12]
 8015e18:	60b9      	str	r1, [r7, #8]
 8015e1a:	607a      	str	r2, [r7, #4]
 8015e1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8015e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d10d      	bne.n	8015e40 <xTaskCreateStatic+0x30>
	__asm volatile
 8015e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e28:	b672      	cpsid	i
 8015e2a:	f383 8811 	msr	BASEPRI, r3
 8015e2e:	f3bf 8f6f 	isb	sy
 8015e32:	f3bf 8f4f 	dsb	sy
 8015e36:	b662      	cpsie	i
 8015e38:	623b      	str	r3, [r7, #32]
}
 8015e3a:	bf00      	nop
 8015e3c:	bf00      	nop
 8015e3e:	e7fd      	b.n	8015e3c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8015e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d10d      	bne.n	8015e62 <xTaskCreateStatic+0x52>
	__asm volatile
 8015e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e4a:	b672      	cpsid	i
 8015e4c:	f383 8811 	msr	BASEPRI, r3
 8015e50:	f3bf 8f6f 	isb	sy
 8015e54:	f3bf 8f4f 	dsb	sy
 8015e58:	b662      	cpsie	i
 8015e5a:	61fb      	str	r3, [r7, #28]
}
 8015e5c:	bf00      	nop
 8015e5e:	bf00      	nop
 8015e60:	e7fd      	b.n	8015e5e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8015e62:	2358      	movs	r3, #88	@ 0x58
 8015e64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015e66:	693b      	ldr	r3, [r7, #16]
 8015e68:	2b58      	cmp	r3, #88	@ 0x58
 8015e6a:	d00d      	beq.n	8015e88 <xTaskCreateStatic+0x78>
	__asm volatile
 8015e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e70:	b672      	cpsid	i
 8015e72:	f383 8811 	msr	BASEPRI, r3
 8015e76:	f3bf 8f6f 	isb	sy
 8015e7a:	f3bf 8f4f 	dsb	sy
 8015e7e:	b662      	cpsie	i
 8015e80:	61bb      	str	r3, [r7, #24]
}
 8015e82:	bf00      	nop
 8015e84:	bf00      	nop
 8015e86:	e7fd      	b.n	8015e84 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8015e88:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8015e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d01e      	beq.n	8015ece <xTaskCreateStatic+0xbe>
 8015e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d01b      	beq.n	8015ece <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e98:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015e9e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ea2:	2202      	movs	r2, #2
 8015ea4:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015ea8:	2300      	movs	r3, #0
 8015eaa:	9303      	str	r3, [sp, #12]
 8015eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015eae:	9302      	str	r3, [sp, #8]
 8015eb0:	f107 0314 	add.w	r3, r7, #20
 8015eb4:	9301      	str	r3, [sp, #4]
 8015eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015eb8:	9300      	str	r3, [sp, #0]
 8015eba:	683b      	ldr	r3, [r7, #0]
 8015ebc:	687a      	ldr	r2, [r7, #4]
 8015ebe:	68b9      	ldr	r1, [r7, #8]
 8015ec0:	68f8      	ldr	r0, [r7, #12]
 8015ec2:	f000 f850 	bl	8015f66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015ec6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015ec8:	f000 f8e2 	bl	8016090 <prvAddNewTaskToReadyList>
 8015ecc:	e001      	b.n	8015ed2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8015ece:	2300      	movs	r3, #0
 8015ed0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8015ed2:	697b      	ldr	r3, [r7, #20]
	}
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	3728      	adds	r7, #40	@ 0x28
 8015ed8:	46bd      	mov	sp, r7
 8015eda:	bd80      	pop	{r7, pc}

08015edc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015edc:	b580      	push	{r7, lr}
 8015ede:	b08c      	sub	sp, #48	@ 0x30
 8015ee0:	af04      	add	r7, sp, #16
 8015ee2:	60f8      	str	r0, [r7, #12]
 8015ee4:	60b9      	str	r1, [r7, #8]
 8015ee6:	603b      	str	r3, [r7, #0]
 8015ee8:	4613      	mov	r3, r2
 8015eea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015eec:	88fb      	ldrh	r3, [r7, #6]
 8015eee:	009b      	lsls	r3, r3, #2
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	f001 f921 	bl	8017138 <pvPortMalloc>
 8015ef6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8015ef8:	697b      	ldr	r3, [r7, #20]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d00e      	beq.n	8015f1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8015efe:	2058      	movs	r0, #88	@ 0x58
 8015f00:	f001 f91a 	bl	8017138 <pvPortMalloc>
 8015f04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8015f06:	69fb      	ldr	r3, [r7, #28]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d003      	beq.n	8015f14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015f0c:	69fb      	ldr	r3, [r7, #28]
 8015f0e:	697a      	ldr	r2, [r7, #20]
 8015f10:	631a      	str	r2, [r3, #48]	@ 0x30
 8015f12:	e005      	b.n	8015f20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015f14:	6978      	ldr	r0, [r7, #20]
 8015f16:	f001 f9e1 	bl	80172dc <vPortFree>
 8015f1a:	e001      	b.n	8015f20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015f20:	69fb      	ldr	r3, [r7, #28]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d017      	beq.n	8015f56 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8015f26:	69fb      	ldr	r3, [r7, #28]
 8015f28:	2200      	movs	r2, #0
 8015f2a:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015f2e:	88fa      	ldrh	r2, [r7, #6]
 8015f30:	2300      	movs	r3, #0
 8015f32:	9303      	str	r3, [sp, #12]
 8015f34:	69fb      	ldr	r3, [r7, #28]
 8015f36:	9302      	str	r3, [sp, #8]
 8015f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f3a:	9301      	str	r3, [sp, #4]
 8015f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f3e:	9300      	str	r3, [sp, #0]
 8015f40:	683b      	ldr	r3, [r7, #0]
 8015f42:	68b9      	ldr	r1, [r7, #8]
 8015f44:	68f8      	ldr	r0, [r7, #12]
 8015f46:	f000 f80e 	bl	8015f66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015f4a:	69f8      	ldr	r0, [r7, #28]
 8015f4c:	f000 f8a0 	bl	8016090 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015f50:	2301      	movs	r3, #1
 8015f52:	61bb      	str	r3, [r7, #24]
 8015f54:	e002      	b.n	8015f5c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015f56:	f04f 33ff 	mov.w	r3, #4294967295
 8015f5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015f5c:	69bb      	ldr	r3, [r7, #24]
	}
 8015f5e:	4618      	mov	r0, r3
 8015f60:	3720      	adds	r7, #32
 8015f62:	46bd      	mov	sp, r7
 8015f64:	bd80      	pop	{r7, pc}

08015f66 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015f66:	b580      	push	{r7, lr}
 8015f68:	b088      	sub	sp, #32
 8015f6a:	af00      	add	r7, sp, #0
 8015f6c:	60f8      	str	r0, [r7, #12]
 8015f6e:	60b9      	str	r1, [r7, #8]
 8015f70:	607a      	str	r2, [r7, #4]
 8015f72:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8015f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f76:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	009b      	lsls	r3, r3, #2
 8015f7c:	461a      	mov	r2, r3
 8015f7e:	21a5      	movs	r1, #165	@ 0xa5
 8015f80:	f001 fdc2 	bl	8017b08 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015f88:	6879      	ldr	r1, [r7, #4]
 8015f8a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8015f8e:	440b      	add	r3, r1
 8015f90:	009b      	lsls	r3, r3, #2
 8015f92:	4413      	add	r3, r2
 8015f94:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015f96:	69bb      	ldr	r3, [r7, #24]
 8015f98:	f023 0307 	bic.w	r3, r3, #7
 8015f9c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015f9e:	69bb      	ldr	r3, [r7, #24]
 8015fa0:	f003 0307 	and.w	r3, r3, #7
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d00d      	beq.n	8015fc4 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8015fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015fac:	b672      	cpsid	i
 8015fae:	f383 8811 	msr	BASEPRI, r3
 8015fb2:	f3bf 8f6f 	isb	sy
 8015fb6:	f3bf 8f4f 	dsb	sy
 8015fba:	b662      	cpsie	i
 8015fbc:	617b      	str	r3, [r7, #20]
}
 8015fbe:	bf00      	nop
 8015fc0:	bf00      	nop
 8015fc2:	e7fd      	b.n	8015fc0 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8015fc4:	68bb      	ldr	r3, [r7, #8]
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d01f      	beq.n	801600a <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015fca:	2300      	movs	r3, #0
 8015fcc:	61fb      	str	r3, [r7, #28]
 8015fce:	e012      	b.n	8015ff6 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015fd0:	68ba      	ldr	r2, [r7, #8]
 8015fd2:	69fb      	ldr	r3, [r7, #28]
 8015fd4:	4413      	add	r3, r2
 8015fd6:	7819      	ldrb	r1, [r3, #0]
 8015fd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015fda:	69fb      	ldr	r3, [r7, #28]
 8015fdc:	4413      	add	r3, r2
 8015fde:	3334      	adds	r3, #52	@ 0x34
 8015fe0:	460a      	mov	r2, r1
 8015fe2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8015fe4:	68ba      	ldr	r2, [r7, #8]
 8015fe6:	69fb      	ldr	r3, [r7, #28]
 8015fe8:	4413      	add	r3, r2
 8015fea:	781b      	ldrb	r3, [r3, #0]
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d006      	beq.n	8015ffe <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015ff0:	69fb      	ldr	r3, [r7, #28]
 8015ff2:	3301      	adds	r3, #1
 8015ff4:	61fb      	str	r3, [r7, #28]
 8015ff6:	69fb      	ldr	r3, [r7, #28]
 8015ff8:	2b0f      	cmp	r3, #15
 8015ffa:	d9e9      	bls.n	8015fd0 <prvInitialiseNewTask+0x6a>
 8015ffc:	e000      	b.n	8016000 <prvInitialiseNewTask+0x9a>
			{
				break;
 8015ffe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016002:	2200      	movs	r2, #0
 8016004:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8016008:	e003      	b.n	8016012 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801600a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801600c:	2200      	movs	r2, #0
 801600e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016014:	2b06      	cmp	r3, #6
 8016016:	d901      	bls.n	801601c <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016018:	2306      	movs	r3, #6
 801601a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801601c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801601e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016020:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016024:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016026:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8016028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801602a:	2200      	movs	r2, #0
 801602c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801602e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016030:	3304      	adds	r3, #4
 8016032:	4618      	mov	r0, r3
 8016034:	f7ff f892 	bl	801515c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801603a:	3318      	adds	r3, #24
 801603c:	4618      	mov	r0, r3
 801603e:	f7ff f88d 	bl	801515c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016044:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016046:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801604a:	f1c3 0207 	rsb	r2, r3, #7
 801604e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016050:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016054:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016056:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8016058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801605a:	2200      	movs	r2, #0
 801605c:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801605e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016060:	2200      	movs	r2, #0
 8016062:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016066:	2200      	movs	r2, #0
 8016068:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801606c:	683a      	ldr	r2, [r7, #0]
 801606e:	68f9      	ldr	r1, [r7, #12]
 8016070:	69b8      	ldr	r0, [r7, #24]
 8016072:	f000 fe27 	bl	8016cc4 <pxPortInitialiseStack>
 8016076:	4602      	mov	r2, r0
 8016078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801607a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801607c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801607e:	2b00      	cmp	r3, #0
 8016080:	d002      	beq.n	8016088 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016086:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016088:	bf00      	nop
 801608a:	3720      	adds	r7, #32
 801608c:	46bd      	mov	sp, r7
 801608e:	bd80      	pop	{r7, pc}

08016090 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b082      	sub	sp, #8
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016098:	f000 ff20 	bl	8016edc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801609c:	4b2a      	ldr	r3, [pc, #168]	@ (8016148 <prvAddNewTaskToReadyList+0xb8>)
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	3301      	adds	r3, #1
 80160a2:	4a29      	ldr	r2, [pc, #164]	@ (8016148 <prvAddNewTaskToReadyList+0xb8>)
 80160a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80160a6:	4b29      	ldr	r3, [pc, #164]	@ (801614c <prvAddNewTaskToReadyList+0xbc>)
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d109      	bne.n	80160c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80160ae:	4a27      	ldr	r2, [pc, #156]	@ (801614c <prvAddNewTaskToReadyList+0xbc>)
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80160b4:	4b24      	ldr	r3, [pc, #144]	@ (8016148 <prvAddNewTaskToReadyList+0xb8>)
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	2b01      	cmp	r3, #1
 80160ba:	d110      	bne.n	80160de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80160bc:	f000 fc32 	bl	8016924 <prvInitialiseTaskLists>
 80160c0:	e00d      	b.n	80160de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80160c2:	4b23      	ldr	r3, [pc, #140]	@ (8016150 <prvAddNewTaskToReadyList+0xc0>)
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d109      	bne.n	80160de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80160ca:	4b20      	ldr	r3, [pc, #128]	@ (801614c <prvAddNewTaskToReadyList+0xbc>)
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80160d4:	429a      	cmp	r2, r3
 80160d6:	d802      	bhi.n	80160de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80160d8:	4a1c      	ldr	r2, [pc, #112]	@ (801614c <prvAddNewTaskToReadyList+0xbc>)
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80160de:	4b1d      	ldr	r3, [pc, #116]	@ (8016154 <prvAddNewTaskToReadyList+0xc4>)
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	3301      	adds	r3, #1
 80160e4:	4a1b      	ldr	r2, [pc, #108]	@ (8016154 <prvAddNewTaskToReadyList+0xc4>)
 80160e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80160ec:	2201      	movs	r2, #1
 80160ee:	409a      	lsls	r2, r3
 80160f0:	4b19      	ldr	r3, [pc, #100]	@ (8016158 <prvAddNewTaskToReadyList+0xc8>)
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	4313      	orrs	r3, r2
 80160f6:	4a18      	ldr	r2, [pc, #96]	@ (8016158 <prvAddNewTaskToReadyList+0xc8>)
 80160f8:	6013      	str	r3, [r2, #0]
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80160fe:	4613      	mov	r3, r2
 8016100:	009b      	lsls	r3, r3, #2
 8016102:	4413      	add	r3, r2
 8016104:	009b      	lsls	r3, r3, #2
 8016106:	4a15      	ldr	r2, [pc, #84]	@ (801615c <prvAddNewTaskToReadyList+0xcc>)
 8016108:	441a      	add	r2, r3
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	3304      	adds	r3, #4
 801610e:	4619      	mov	r1, r3
 8016110:	4610      	mov	r0, r2
 8016112:	f7ff f830 	bl	8015176 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016116:	f000 ff17 	bl	8016f48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801611a:	4b0d      	ldr	r3, [pc, #52]	@ (8016150 <prvAddNewTaskToReadyList+0xc0>)
 801611c:	681b      	ldr	r3, [r3, #0]
 801611e:	2b00      	cmp	r3, #0
 8016120:	d00e      	beq.n	8016140 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016122:	4b0a      	ldr	r3, [pc, #40]	@ (801614c <prvAddNewTaskToReadyList+0xbc>)
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801612c:	429a      	cmp	r2, r3
 801612e:	d207      	bcs.n	8016140 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016130:	4b0b      	ldr	r3, [pc, #44]	@ (8016160 <prvAddNewTaskToReadyList+0xd0>)
 8016132:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016136:	601a      	str	r2, [r3, #0]
 8016138:	f3bf 8f4f 	dsb	sy
 801613c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016140:	bf00      	nop
 8016142:	3708      	adds	r7, #8
 8016144:	46bd      	mov	sp, r7
 8016146:	bd80      	pop	{r7, pc}
 8016148:	20002c38 	.word	0x20002c38
 801614c:	20002b38 	.word	0x20002b38
 8016150:	20002c44 	.word	0x20002c44
 8016154:	20002c54 	.word	0x20002c54
 8016158:	20002c40 	.word	0x20002c40
 801615c:	20002b3c 	.word	0x20002b3c
 8016160:	e000ed04 	.word	0xe000ed04

08016164 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016164:	b580      	push	{r7, lr}
 8016166:	b084      	sub	sp, #16
 8016168:	af00      	add	r7, sp, #0
 801616a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801616c:	2300      	movs	r3, #0
 801616e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	2b00      	cmp	r3, #0
 8016174:	d01a      	beq.n	80161ac <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8016176:	4b15      	ldr	r3, [pc, #84]	@ (80161cc <vTaskDelay+0x68>)
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	2b00      	cmp	r3, #0
 801617c:	d00d      	beq.n	801619a <vTaskDelay+0x36>
	__asm volatile
 801617e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016182:	b672      	cpsid	i
 8016184:	f383 8811 	msr	BASEPRI, r3
 8016188:	f3bf 8f6f 	isb	sy
 801618c:	f3bf 8f4f 	dsb	sy
 8016190:	b662      	cpsie	i
 8016192:	60bb      	str	r3, [r7, #8]
}
 8016194:	bf00      	nop
 8016196:	bf00      	nop
 8016198:	e7fd      	b.n	8016196 <vTaskDelay+0x32>
			vTaskSuspendAll();
 801619a:	f000 f881 	bl	80162a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801619e:	2100      	movs	r1, #0
 80161a0:	6878      	ldr	r0, [r7, #4]
 80161a2:	f000 fd29 	bl	8016bf8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80161a6:	f000 f889 	bl	80162bc <xTaskResumeAll>
 80161aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d107      	bne.n	80161c2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80161b2:	4b07      	ldr	r3, [pc, #28]	@ (80161d0 <vTaskDelay+0x6c>)
 80161b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80161b8:	601a      	str	r2, [r3, #0]
 80161ba:	f3bf 8f4f 	dsb	sy
 80161be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80161c2:	bf00      	nop
 80161c4:	3710      	adds	r7, #16
 80161c6:	46bd      	mov	sp, r7
 80161c8:	bd80      	pop	{r7, pc}
 80161ca:	bf00      	nop
 80161cc:	20002c60 	.word	0x20002c60
 80161d0:	e000ed04 	.word	0xe000ed04

080161d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80161d4:	b580      	push	{r7, lr}
 80161d6:	b08a      	sub	sp, #40	@ 0x28
 80161d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80161da:	2300      	movs	r3, #0
 80161dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80161de:	2300      	movs	r3, #0
 80161e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80161e2:	463a      	mov	r2, r7
 80161e4:	1d39      	adds	r1, r7, #4
 80161e6:	f107 0308 	add.w	r3, r7, #8
 80161ea:	4618      	mov	r0, r3
 80161ec:	f7eb ff58 	bl	80020a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80161f0:	6839      	ldr	r1, [r7, #0]
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	68ba      	ldr	r2, [r7, #8]
 80161f6:	9202      	str	r2, [sp, #8]
 80161f8:	9301      	str	r3, [sp, #4]
 80161fa:	2300      	movs	r3, #0
 80161fc:	9300      	str	r3, [sp, #0]
 80161fe:	2300      	movs	r3, #0
 8016200:	460a      	mov	r2, r1
 8016202:	4921      	ldr	r1, [pc, #132]	@ (8016288 <vTaskStartScheduler+0xb4>)
 8016204:	4821      	ldr	r0, [pc, #132]	@ (801628c <vTaskStartScheduler+0xb8>)
 8016206:	f7ff fe03 	bl	8015e10 <xTaskCreateStatic>
 801620a:	4603      	mov	r3, r0
 801620c:	4a20      	ldr	r2, [pc, #128]	@ (8016290 <vTaskStartScheduler+0xbc>)
 801620e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016210:	4b1f      	ldr	r3, [pc, #124]	@ (8016290 <vTaskStartScheduler+0xbc>)
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	2b00      	cmp	r3, #0
 8016216:	d002      	beq.n	801621e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016218:	2301      	movs	r3, #1
 801621a:	617b      	str	r3, [r7, #20]
 801621c:	e001      	b.n	8016222 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801621e:	2300      	movs	r3, #0
 8016220:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016222:	697b      	ldr	r3, [r7, #20]
 8016224:	2b01      	cmp	r3, #1
 8016226:	d118      	bne.n	801625a <vTaskStartScheduler+0x86>
	__asm volatile
 8016228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801622c:	b672      	cpsid	i
 801622e:	f383 8811 	msr	BASEPRI, r3
 8016232:	f3bf 8f6f 	isb	sy
 8016236:	f3bf 8f4f 	dsb	sy
 801623a:	b662      	cpsie	i
 801623c:	613b      	str	r3, [r7, #16]
}
 801623e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016240:	4b14      	ldr	r3, [pc, #80]	@ (8016294 <vTaskStartScheduler+0xc0>)
 8016242:	f04f 32ff 	mov.w	r2, #4294967295
 8016246:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016248:	4b13      	ldr	r3, [pc, #76]	@ (8016298 <vTaskStartScheduler+0xc4>)
 801624a:	2201      	movs	r2, #1
 801624c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801624e:	4b13      	ldr	r3, [pc, #76]	@ (801629c <vTaskStartScheduler+0xc8>)
 8016250:	2200      	movs	r2, #0
 8016252:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016254:	f000 fdc4 	bl	8016de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016258:	e011      	b.n	801627e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801625a:	697b      	ldr	r3, [r7, #20]
 801625c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016260:	d10d      	bne.n	801627e <vTaskStartScheduler+0xaa>
	__asm volatile
 8016262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016266:	b672      	cpsid	i
 8016268:	f383 8811 	msr	BASEPRI, r3
 801626c:	f3bf 8f6f 	isb	sy
 8016270:	f3bf 8f4f 	dsb	sy
 8016274:	b662      	cpsie	i
 8016276:	60fb      	str	r3, [r7, #12]
}
 8016278:	bf00      	nop
 801627a:	bf00      	nop
 801627c:	e7fd      	b.n	801627a <vTaskStartScheduler+0xa6>
}
 801627e:	bf00      	nop
 8016280:	3718      	adds	r7, #24
 8016282:	46bd      	mov	sp, r7
 8016284:	bd80      	pop	{r7, pc}
 8016286:	bf00      	nop
 8016288:	0801c1dc 	.word	0x0801c1dc
 801628c:	080168f1 	.word	0x080168f1
 8016290:	20002c5c 	.word	0x20002c5c
 8016294:	20002c58 	.word	0x20002c58
 8016298:	20002c44 	.word	0x20002c44
 801629c:	20002c3c 	.word	0x20002c3c

080162a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80162a0:	b480      	push	{r7}
 80162a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80162a4:	4b04      	ldr	r3, [pc, #16]	@ (80162b8 <vTaskSuspendAll+0x18>)
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	3301      	adds	r3, #1
 80162aa:	4a03      	ldr	r2, [pc, #12]	@ (80162b8 <vTaskSuspendAll+0x18>)
 80162ac:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80162ae:	bf00      	nop
 80162b0:	46bd      	mov	sp, r7
 80162b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162b6:	4770      	bx	lr
 80162b8:	20002c60 	.word	0x20002c60

080162bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80162bc:	b580      	push	{r7, lr}
 80162be:	b084      	sub	sp, #16
 80162c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80162c2:	2300      	movs	r3, #0
 80162c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80162c6:	2300      	movs	r3, #0
 80162c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80162ca:	4b43      	ldr	r3, [pc, #268]	@ (80163d8 <xTaskResumeAll+0x11c>)
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d10d      	bne.n	80162ee <xTaskResumeAll+0x32>
	__asm volatile
 80162d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162d6:	b672      	cpsid	i
 80162d8:	f383 8811 	msr	BASEPRI, r3
 80162dc:	f3bf 8f6f 	isb	sy
 80162e0:	f3bf 8f4f 	dsb	sy
 80162e4:	b662      	cpsie	i
 80162e6:	603b      	str	r3, [r7, #0]
}
 80162e8:	bf00      	nop
 80162ea:	bf00      	nop
 80162ec:	e7fd      	b.n	80162ea <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80162ee:	f000 fdf5 	bl	8016edc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80162f2:	4b39      	ldr	r3, [pc, #228]	@ (80163d8 <xTaskResumeAll+0x11c>)
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	3b01      	subs	r3, #1
 80162f8:	4a37      	ldr	r2, [pc, #220]	@ (80163d8 <xTaskResumeAll+0x11c>)
 80162fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80162fc:	4b36      	ldr	r3, [pc, #216]	@ (80163d8 <xTaskResumeAll+0x11c>)
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	2b00      	cmp	r3, #0
 8016302:	d161      	bne.n	80163c8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016304:	4b35      	ldr	r3, [pc, #212]	@ (80163dc <xTaskResumeAll+0x120>)
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d05d      	beq.n	80163c8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801630c:	e02e      	b.n	801636c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801630e:	4b34      	ldr	r3, [pc, #208]	@ (80163e0 <xTaskResumeAll+0x124>)
 8016310:	68db      	ldr	r3, [r3, #12]
 8016312:	68db      	ldr	r3, [r3, #12]
 8016314:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	3318      	adds	r3, #24
 801631a:	4618      	mov	r0, r3
 801631c:	f7fe ff88 	bl	8015230 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	3304      	adds	r3, #4
 8016324:	4618      	mov	r0, r3
 8016326:	f7fe ff83 	bl	8015230 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801632e:	2201      	movs	r2, #1
 8016330:	409a      	lsls	r2, r3
 8016332:	4b2c      	ldr	r3, [pc, #176]	@ (80163e4 <xTaskResumeAll+0x128>)
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	4313      	orrs	r3, r2
 8016338:	4a2a      	ldr	r2, [pc, #168]	@ (80163e4 <xTaskResumeAll+0x128>)
 801633a:	6013      	str	r3, [r2, #0]
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016340:	4613      	mov	r3, r2
 8016342:	009b      	lsls	r3, r3, #2
 8016344:	4413      	add	r3, r2
 8016346:	009b      	lsls	r3, r3, #2
 8016348:	4a27      	ldr	r2, [pc, #156]	@ (80163e8 <xTaskResumeAll+0x12c>)
 801634a:	441a      	add	r2, r3
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	3304      	adds	r3, #4
 8016350:	4619      	mov	r1, r3
 8016352:	4610      	mov	r0, r2
 8016354:	f7fe ff0f 	bl	8015176 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801635c:	4b23      	ldr	r3, [pc, #140]	@ (80163ec <xTaskResumeAll+0x130>)
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016362:	429a      	cmp	r2, r3
 8016364:	d302      	bcc.n	801636c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8016366:	4b22      	ldr	r3, [pc, #136]	@ (80163f0 <xTaskResumeAll+0x134>)
 8016368:	2201      	movs	r2, #1
 801636a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801636c:	4b1c      	ldr	r3, [pc, #112]	@ (80163e0 <xTaskResumeAll+0x124>)
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d1cc      	bne.n	801630e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d001      	beq.n	801637e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801637a:	f000 fb73 	bl	8016a64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801637e:	4b1d      	ldr	r3, [pc, #116]	@ (80163f4 <xTaskResumeAll+0x138>)
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	2b00      	cmp	r3, #0
 8016388:	d010      	beq.n	80163ac <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801638a:	f000 f859 	bl	8016440 <xTaskIncrementTick>
 801638e:	4603      	mov	r3, r0
 8016390:	2b00      	cmp	r3, #0
 8016392:	d002      	beq.n	801639a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8016394:	4b16      	ldr	r3, [pc, #88]	@ (80163f0 <xTaskResumeAll+0x134>)
 8016396:	2201      	movs	r2, #1
 8016398:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	3b01      	subs	r3, #1
 801639e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d1f1      	bne.n	801638a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80163a6:	4b13      	ldr	r3, [pc, #76]	@ (80163f4 <xTaskResumeAll+0x138>)
 80163a8:	2200      	movs	r2, #0
 80163aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80163ac:	4b10      	ldr	r3, [pc, #64]	@ (80163f0 <xTaskResumeAll+0x134>)
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d009      	beq.n	80163c8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80163b4:	2301      	movs	r3, #1
 80163b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80163b8:	4b0f      	ldr	r3, [pc, #60]	@ (80163f8 <xTaskResumeAll+0x13c>)
 80163ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80163be:	601a      	str	r2, [r3, #0]
 80163c0:	f3bf 8f4f 	dsb	sy
 80163c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80163c8:	f000 fdbe 	bl	8016f48 <vPortExitCritical>

	return xAlreadyYielded;
 80163cc:	68bb      	ldr	r3, [r7, #8]
}
 80163ce:	4618      	mov	r0, r3
 80163d0:	3710      	adds	r7, #16
 80163d2:	46bd      	mov	sp, r7
 80163d4:	bd80      	pop	{r7, pc}
 80163d6:	bf00      	nop
 80163d8:	20002c60 	.word	0x20002c60
 80163dc:	20002c38 	.word	0x20002c38
 80163e0:	20002bf8 	.word	0x20002bf8
 80163e4:	20002c40 	.word	0x20002c40
 80163e8:	20002b3c 	.word	0x20002b3c
 80163ec:	20002b38 	.word	0x20002b38
 80163f0:	20002c4c 	.word	0x20002c4c
 80163f4:	20002c48 	.word	0x20002c48
 80163f8:	e000ed04 	.word	0xe000ed04

080163fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80163fc:	b480      	push	{r7}
 80163fe:	b083      	sub	sp, #12
 8016400:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016402:	4b05      	ldr	r3, [pc, #20]	@ (8016418 <xTaskGetTickCount+0x1c>)
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016408:	687b      	ldr	r3, [r7, #4]
}
 801640a:	4618      	mov	r0, r3
 801640c:	370c      	adds	r7, #12
 801640e:	46bd      	mov	sp, r7
 8016410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016414:	4770      	bx	lr
 8016416:	bf00      	nop
 8016418:	20002c3c 	.word	0x20002c3c

0801641c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801641c:	b580      	push	{r7, lr}
 801641e:	b082      	sub	sp, #8
 8016420:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016422:	f000 fe43 	bl	80170ac <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8016426:	2300      	movs	r3, #0
 8016428:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801642a:	4b04      	ldr	r3, [pc, #16]	@ (801643c <xTaskGetTickCountFromISR+0x20>)
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016430:	683b      	ldr	r3, [r7, #0]
}
 8016432:	4618      	mov	r0, r3
 8016434:	3708      	adds	r7, #8
 8016436:	46bd      	mov	sp, r7
 8016438:	bd80      	pop	{r7, pc}
 801643a:	bf00      	nop
 801643c:	20002c3c 	.word	0x20002c3c

08016440 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016440:	b580      	push	{r7, lr}
 8016442:	b086      	sub	sp, #24
 8016444:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016446:	2300      	movs	r3, #0
 8016448:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801644a:	4b50      	ldr	r3, [pc, #320]	@ (801658c <xTaskIncrementTick+0x14c>)
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	2b00      	cmp	r3, #0
 8016450:	f040 808b 	bne.w	801656a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016454:	4b4e      	ldr	r3, [pc, #312]	@ (8016590 <xTaskIncrementTick+0x150>)
 8016456:	681b      	ldr	r3, [r3, #0]
 8016458:	3301      	adds	r3, #1
 801645a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801645c:	4a4c      	ldr	r2, [pc, #304]	@ (8016590 <xTaskIncrementTick+0x150>)
 801645e:	693b      	ldr	r3, [r7, #16]
 8016460:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016462:	693b      	ldr	r3, [r7, #16]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d123      	bne.n	80164b0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8016468:	4b4a      	ldr	r3, [pc, #296]	@ (8016594 <xTaskIncrementTick+0x154>)
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	2b00      	cmp	r3, #0
 8016470:	d00d      	beq.n	801648e <xTaskIncrementTick+0x4e>
	__asm volatile
 8016472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016476:	b672      	cpsid	i
 8016478:	f383 8811 	msr	BASEPRI, r3
 801647c:	f3bf 8f6f 	isb	sy
 8016480:	f3bf 8f4f 	dsb	sy
 8016484:	b662      	cpsie	i
 8016486:	603b      	str	r3, [r7, #0]
}
 8016488:	bf00      	nop
 801648a:	bf00      	nop
 801648c:	e7fd      	b.n	801648a <xTaskIncrementTick+0x4a>
 801648e:	4b41      	ldr	r3, [pc, #260]	@ (8016594 <xTaskIncrementTick+0x154>)
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	60fb      	str	r3, [r7, #12]
 8016494:	4b40      	ldr	r3, [pc, #256]	@ (8016598 <xTaskIncrementTick+0x158>)
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	4a3e      	ldr	r2, [pc, #248]	@ (8016594 <xTaskIncrementTick+0x154>)
 801649a:	6013      	str	r3, [r2, #0]
 801649c:	4a3e      	ldr	r2, [pc, #248]	@ (8016598 <xTaskIncrementTick+0x158>)
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	6013      	str	r3, [r2, #0]
 80164a2:	4b3e      	ldr	r3, [pc, #248]	@ (801659c <xTaskIncrementTick+0x15c>)
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	3301      	adds	r3, #1
 80164a8:	4a3c      	ldr	r2, [pc, #240]	@ (801659c <xTaskIncrementTick+0x15c>)
 80164aa:	6013      	str	r3, [r2, #0]
 80164ac:	f000 fada 	bl	8016a64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80164b0:	4b3b      	ldr	r3, [pc, #236]	@ (80165a0 <xTaskIncrementTick+0x160>)
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	693a      	ldr	r2, [r7, #16]
 80164b6:	429a      	cmp	r2, r3
 80164b8:	d348      	bcc.n	801654c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80164ba:	4b36      	ldr	r3, [pc, #216]	@ (8016594 <xTaskIncrementTick+0x154>)
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d104      	bne.n	80164ce <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80164c4:	4b36      	ldr	r3, [pc, #216]	@ (80165a0 <xTaskIncrementTick+0x160>)
 80164c6:	f04f 32ff 	mov.w	r2, #4294967295
 80164ca:	601a      	str	r2, [r3, #0]
					break;
 80164cc:	e03e      	b.n	801654c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80164ce:	4b31      	ldr	r3, [pc, #196]	@ (8016594 <xTaskIncrementTick+0x154>)
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	68db      	ldr	r3, [r3, #12]
 80164d4:	68db      	ldr	r3, [r3, #12]
 80164d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80164d8:	68bb      	ldr	r3, [r7, #8]
 80164da:	685b      	ldr	r3, [r3, #4]
 80164dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80164de:	693a      	ldr	r2, [r7, #16]
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	429a      	cmp	r2, r3
 80164e4:	d203      	bcs.n	80164ee <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80164e6:	4a2e      	ldr	r2, [pc, #184]	@ (80165a0 <xTaskIncrementTick+0x160>)
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80164ec:	e02e      	b.n	801654c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80164ee:	68bb      	ldr	r3, [r7, #8]
 80164f0:	3304      	adds	r3, #4
 80164f2:	4618      	mov	r0, r3
 80164f4:	f7fe fe9c 	bl	8015230 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80164f8:	68bb      	ldr	r3, [r7, #8]
 80164fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d004      	beq.n	801650a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016500:	68bb      	ldr	r3, [r7, #8]
 8016502:	3318      	adds	r3, #24
 8016504:	4618      	mov	r0, r3
 8016506:	f7fe fe93 	bl	8015230 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801650a:	68bb      	ldr	r3, [r7, #8]
 801650c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801650e:	2201      	movs	r2, #1
 8016510:	409a      	lsls	r2, r3
 8016512:	4b24      	ldr	r3, [pc, #144]	@ (80165a4 <xTaskIncrementTick+0x164>)
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	4313      	orrs	r3, r2
 8016518:	4a22      	ldr	r2, [pc, #136]	@ (80165a4 <xTaskIncrementTick+0x164>)
 801651a:	6013      	str	r3, [r2, #0]
 801651c:	68bb      	ldr	r3, [r7, #8]
 801651e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016520:	4613      	mov	r3, r2
 8016522:	009b      	lsls	r3, r3, #2
 8016524:	4413      	add	r3, r2
 8016526:	009b      	lsls	r3, r3, #2
 8016528:	4a1f      	ldr	r2, [pc, #124]	@ (80165a8 <xTaskIncrementTick+0x168>)
 801652a:	441a      	add	r2, r3
 801652c:	68bb      	ldr	r3, [r7, #8]
 801652e:	3304      	adds	r3, #4
 8016530:	4619      	mov	r1, r3
 8016532:	4610      	mov	r0, r2
 8016534:	f7fe fe1f 	bl	8015176 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016538:	68bb      	ldr	r3, [r7, #8]
 801653a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801653c:	4b1b      	ldr	r3, [pc, #108]	@ (80165ac <xTaskIncrementTick+0x16c>)
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016542:	429a      	cmp	r2, r3
 8016544:	d3b9      	bcc.n	80164ba <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8016546:	2301      	movs	r3, #1
 8016548:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801654a:	e7b6      	b.n	80164ba <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801654c:	4b17      	ldr	r3, [pc, #92]	@ (80165ac <xTaskIncrementTick+0x16c>)
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016552:	4915      	ldr	r1, [pc, #84]	@ (80165a8 <xTaskIncrementTick+0x168>)
 8016554:	4613      	mov	r3, r2
 8016556:	009b      	lsls	r3, r3, #2
 8016558:	4413      	add	r3, r2
 801655a:	009b      	lsls	r3, r3, #2
 801655c:	440b      	add	r3, r1
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	2b01      	cmp	r3, #1
 8016562:	d907      	bls.n	8016574 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8016564:	2301      	movs	r3, #1
 8016566:	617b      	str	r3, [r7, #20]
 8016568:	e004      	b.n	8016574 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801656a:	4b11      	ldr	r3, [pc, #68]	@ (80165b0 <xTaskIncrementTick+0x170>)
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	3301      	adds	r3, #1
 8016570:	4a0f      	ldr	r2, [pc, #60]	@ (80165b0 <xTaskIncrementTick+0x170>)
 8016572:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8016574:	4b0f      	ldr	r3, [pc, #60]	@ (80165b4 <xTaskIncrementTick+0x174>)
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	2b00      	cmp	r3, #0
 801657a:	d001      	beq.n	8016580 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 801657c:	2301      	movs	r3, #1
 801657e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8016580:	697b      	ldr	r3, [r7, #20]
}
 8016582:	4618      	mov	r0, r3
 8016584:	3718      	adds	r7, #24
 8016586:	46bd      	mov	sp, r7
 8016588:	bd80      	pop	{r7, pc}
 801658a:	bf00      	nop
 801658c:	20002c60 	.word	0x20002c60
 8016590:	20002c3c 	.word	0x20002c3c
 8016594:	20002bf0 	.word	0x20002bf0
 8016598:	20002bf4 	.word	0x20002bf4
 801659c:	20002c50 	.word	0x20002c50
 80165a0:	20002c58 	.word	0x20002c58
 80165a4:	20002c40 	.word	0x20002c40
 80165a8:	20002b3c 	.word	0x20002b3c
 80165ac:	20002b38 	.word	0x20002b38
 80165b0:	20002c48 	.word	0x20002c48
 80165b4:	20002c4c 	.word	0x20002c4c

080165b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80165b8:	b580      	push	{r7, lr}
 80165ba:	b088      	sub	sp, #32
 80165bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80165be:	4b3b      	ldr	r3, [pc, #236]	@ (80166ac <vTaskSwitchContext+0xf4>)
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d003      	beq.n	80165ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80165c6:	4b3a      	ldr	r3, [pc, #232]	@ (80166b0 <vTaskSwitchContext+0xf8>)
 80165c8:	2201      	movs	r2, #1
 80165ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80165cc:	e069      	b.n	80166a2 <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 80165ce:	4b38      	ldr	r3, [pc, #224]	@ (80166b0 <vTaskSwitchContext+0xf8>)
 80165d0:	2200      	movs	r2, #0
 80165d2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80165d4:	4b37      	ldr	r3, [pc, #220]	@ (80166b4 <vTaskSwitchContext+0xfc>)
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80165da:	61fb      	str	r3, [r7, #28]
 80165dc:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 80165e0:	61bb      	str	r3, [r7, #24]
 80165e2:	69fb      	ldr	r3, [r7, #28]
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	69ba      	ldr	r2, [r7, #24]
 80165e8:	429a      	cmp	r2, r3
 80165ea:	d111      	bne.n	8016610 <vTaskSwitchContext+0x58>
 80165ec:	69fb      	ldr	r3, [r7, #28]
 80165ee:	3304      	adds	r3, #4
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	69ba      	ldr	r2, [r7, #24]
 80165f4:	429a      	cmp	r2, r3
 80165f6:	d10b      	bne.n	8016610 <vTaskSwitchContext+0x58>
 80165f8:	69fb      	ldr	r3, [r7, #28]
 80165fa:	3308      	adds	r3, #8
 80165fc:	681b      	ldr	r3, [r3, #0]
 80165fe:	69ba      	ldr	r2, [r7, #24]
 8016600:	429a      	cmp	r2, r3
 8016602:	d105      	bne.n	8016610 <vTaskSwitchContext+0x58>
 8016604:	69fb      	ldr	r3, [r7, #28]
 8016606:	330c      	adds	r3, #12
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	69ba      	ldr	r2, [r7, #24]
 801660c:	429a      	cmp	r2, r3
 801660e:	d008      	beq.n	8016622 <vTaskSwitchContext+0x6a>
 8016610:	4b28      	ldr	r3, [pc, #160]	@ (80166b4 <vTaskSwitchContext+0xfc>)
 8016612:	681a      	ldr	r2, [r3, #0]
 8016614:	4b27      	ldr	r3, [pc, #156]	@ (80166b4 <vTaskSwitchContext+0xfc>)
 8016616:	681b      	ldr	r3, [r3, #0]
 8016618:	3334      	adds	r3, #52	@ 0x34
 801661a:	4619      	mov	r1, r3
 801661c:	4610      	mov	r0, r2
 801661e:	f7eb fd2c 	bl	800207a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016622:	4b25      	ldr	r3, [pc, #148]	@ (80166b8 <vTaskSwitchContext+0x100>)
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	fab3 f383 	clz	r3, r3
 801662e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8016630:	7afb      	ldrb	r3, [r7, #11]
 8016632:	f1c3 031f 	rsb	r3, r3, #31
 8016636:	617b      	str	r3, [r7, #20]
 8016638:	4920      	ldr	r1, [pc, #128]	@ (80166bc <vTaskSwitchContext+0x104>)
 801663a:	697a      	ldr	r2, [r7, #20]
 801663c:	4613      	mov	r3, r2
 801663e:	009b      	lsls	r3, r3, #2
 8016640:	4413      	add	r3, r2
 8016642:	009b      	lsls	r3, r3, #2
 8016644:	440b      	add	r3, r1
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d10d      	bne.n	8016668 <vTaskSwitchContext+0xb0>
	__asm volatile
 801664c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016650:	b672      	cpsid	i
 8016652:	f383 8811 	msr	BASEPRI, r3
 8016656:	f3bf 8f6f 	isb	sy
 801665a:	f3bf 8f4f 	dsb	sy
 801665e:	b662      	cpsie	i
 8016660:	607b      	str	r3, [r7, #4]
}
 8016662:	bf00      	nop
 8016664:	bf00      	nop
 8016666:	e7fd      	b.n	8016664 <vTaskSwitchContext+0xac>
 8016668:	697a      	ldr	r2, [r7, #20]
 801666a:	4613      	mov	r3, r2
 801666c:	009b      	lsls	r3, r3, #2
 801666e:	4413      	add	r3, r2
 8016670:	009b      	lsls	r3, r3, #2
 8016672:	4a12      	ldr	r2, [pc, #72]	@ (80166bc <vTaskSwitchContext+0x104>)
 8016674:	4413      	add	r3, r2
 8016676:	613b      	str	r3, [r7, #16]
 8016678:	693b      	ldr	r3, [r7, #16]
 801667a:	685b      	ldr	r3, [r3, #4]
 801667c:	685a      	ldr	r2, [r3, #4]
 801667e:	693b      	ldr	r3, [r7, #16]
 8016680:	605a      	str	r2, [r3, #4]
 8016682:	693b      	ldr	r3, [r7, #16]
 8016684:	685a      	ldr	r2, [r3, #4]
 8016686:	693b      	ldr	r3, [r7, #16]
 8016688:	3308      	adds	r3, #8
 801668a:	429a      	cmp	r2, r3
 801668c:	d104      	bne.n	8016698 <vTaskSwitchContext+0xe0>
 801668e:	693b      	ldr	r3, [r7, #16]
 8016690:	685b      	ldr	r3, [r3, #4]
 8016692:	685a      	ldr	r2, [r3, #4]
 8016694:	693b      	ldr	r3, [r7, #16]
 8016696:	605a      	str	r2, [r3, #4]
 8016698:	693b      	ldr	r3, [r7, #16]
 801669a:	685b      	ldr	r3, [r3, #4]
 801669c:	68db      	ldr	r3, [r3, #12]
 801669e:	4a05      	ldr	r2, [pc, #20]	@ (80166b4 <vTaskSwitchContext+0xfc>)
 80166a0:	6013      	str	r3, [r2, #0]
}
 80166a2:	bf00      	nop
 80166a4:	3720      	adds	r7, #32
 80166a6:	46bd      	mov	sp, r7
 80166a8:	bd80      	pop	{r7, pc}
 80166aa:	bf00      	nop
 80166ac:	20002c60 	.word	0x20002c60
 80166b0:	20002c4c 	.word	0x20002c4c
 80166b4:	20002b38 	.word	0x20002b38
 80166b8:	20002c40 	.word	0x20002c40
 80166bc:	20002b3c 	.word	0x20002b3c

080166c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b084      	sub	sp, #16
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	6078      	str	r0, [r7, #4]
 80166c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d10d      	bne.n	80166ec <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80166d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166d4:	b672      	cpsid	i
 80166d6:	f383 8811 	msr	BASEPRI, r3
 80166da:	f3bf 8f6f 	isb	sy
 80166de:	f3bf 8f4f 	dsb	sy
 80166e2:	b662      	cpsie	i
 80166e4:	60fb      	str	r3, [r7, #12]
}
 80166e6:	bf00      	nop
 80166e8:	bf00      	nop
 80166ea:	e7fd      	b.n	80166e8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80166ec:	4b07      	ldr	r3, [pc, #28]	@ (801670c <vTaskPlaceOnEventList+0x4c>)
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	3318      	adds	r3, #24
 80166f2:	4619      	mov	r1, r3
 80166f4:	6878      	ldr	r0, [r7, #4]
 80166f6:	f7fe fd62 	bl	80151be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80166fa:	2101      	movs	r1, #1
 80166fc:	6838      	ldr	r0, [r7, #0]
 80166fe:	f000 fa7b 	bl	8016bf8 <prvAddCurrentTaskToDelayedList>
}
 8016702:	bf00      	nop
 8016704:	3710      	adds	r7, #16
 8016706:	46bd      	mov	sp, r7
 8016708:	bd80      	pop	{r7, pc}
 801670a:	bf00      	nop
 801670c:	20002b38 	.word	0x20002b38

08016710 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016710:	b580      	push	{r7, lr}
 8016712:	b086      	sub	sp, #24
 8016714:	af00      	add	r7, sp, #0
 8016716:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	68db      	ldr	r3, [r3, #12]
 801671c:	68db      	ldr	r3, [r3, #12]
 801671e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016720:	693b      	ldr	r3, [r7, #16]
 8016722:	2b00      	cmp	r3, #0
 8016724:	d10d      	bne.n	8016742 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8016726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801672a:	b672      	cpsid	i
 801672c:	f383 8811 	msr	BASEPRI, r3
 8016730:	f3bf 8f6f 	isb	sy
 8016734:	f3bf 8f4f 	dsb	sy
 8016738:	b662      	cpsie	i
 801673a:	60fb      	str	r3, [r7, #12]
}
 801673c:	bf00      	nop
 801673e:	bf00      	nop
 8016740:	e7fd      	b.n	801673e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016742:	693b      	ldr	r3, [r7, #16]
 8016744:	3318      	adds	r3, #24
 8016746:	4618      	mov	r0, r3
 8016748:	f7fe fd72 	bl	8015230 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801674c:	4b1d      	ldr	r3, [pc, #116]	@ (80167c4 <xTaskRemoveFromEventList+0xb4>)
 801674e:	681b      	ldr	r3, [r3, #0]
 8016750:	2b00      	cmp	r3, #0
 8016752:	d11c      	bne.n	801678e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016754:	693b      	ldr	r3, [r7, #16]
 8016756:	3304      	adds	r3, #4
 8016758:	4618      	mov	r0, r3
 801675a:	f7fe fd69 	bl	8015230 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801675e:	693b      	ldr	r3, [r7, #16]
 8016760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016762:	2201      	movs	r2, #1
 8016764:	409a      	lsls	r2, r3
 8016766:	4b18      	ldr	r3, [pc, #96]	@ (80167c8 <xTaskRemoveFromEventList+0xb8>)
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	4313      	orrs	r3, r2
 801676c:	4a16      	ldr	r2, [pc, #88]	@ (80167c8 <xTaskRemoveFromEventList+0xb8>)
 801676e:	6013      	str	r3, [r2, #0]
 8016770:	693b      	ldr	r3, [r7, #16]
 8016772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016774:	4613      	mov	r3, r2
 8016776:	009b      	lsls	r3, r3, #2
 8016778:	4413      	add	r3, r2
 801677a:	009b      	lsls	r3, r3, #2
 801677c:	4a13      	ldr	r2, [pc, #76]	@ (80167cc <xTaskRemoveFromEventList+0xbc>)
 801677e:	441a      	add	r2, r3
 8016780:	693b      	ldr	r3, [r7, #16]
 8016782:	3304      	adds	r3, #4
 8016784:	4619      	mov	r1, r3
 8016786:	4610      	mov	r0, r2
 8016788:	f7fe fcf5 	bl	8015176 <vListInsertEnd>
 801678c:	e005      	b.n	801679a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801678e:	693b      	ldr	r3, [r7, #16]
 8016790:	3318      	adds	r3, #24
 8016792:	4619      	mov	r1, r3
 8016794:	480e      	ldr	r0, [pc, #56]	@ (80167d0 <xTaskRemoveFromEventList+0xc0>)
 8016796:	f7fe fcee 	bl	8015176 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801679a:	693b      	ldr	r3, [r7, #16]
 801679c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801679e:	4b0d      	ldr	r3, [pc, #52]	@ (80167d4 <xTaskRemoveFromEventList+0xc4>)
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80167a4:	429a      	cmp	r2, r3
 80167a6:	d905      	bls.n	80167b4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80167a8:	2301      	movs	r3, #1
 80167aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80167ac:	4b0a      	ldr	r3, [pc, #40]	@ (80167d8 <xTaskRemoveFromEventList+0xc8>)
 80167ae:	2201      	movs	r2, #1
 80167b0:	601a      	str	r2, [r3, #0]
 80167b2:	e001      	b.n	80167b8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80167b4:	2300      	movs	r3, #0
 80167b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80167b8:	697b      	ldr	r3, [r7, #20]
}
 80167ba:	4618      	mov	r0, r3
 80167bc:	3718      	adds	r7, #24
 80167be:	46bd      	mov	sp, r7
 80167c0:	bd80      	pop	{r7, pc}
 80167c2:	bf00      	nop
 80167c4:	20002c60 	.word	0x20002c60
 80167c8:	20002c40 	.word	0x20002c40
 80167cc:	20002b3c 	.word	0x20002b3c
 80167d0:	20002bf8 	.word	0x20002bf8
 80167d4:	20002b38 	.word	0x20002b38
 80167d8:	20002c4c 	.word	0x20002c4c

080167dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80167dc:	b480      	push	{r7}
 80167de:	b083      	sub	sp, #12
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80167e4:	4b06      	ldr	r3, [pc, #24]	@ (8016800 <vTaskInternalSetTimeOutState+0x24>)
 80167e6:	681a      	ldr	r2, [r3, #0]
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80167ec:	4b05      	ldr	r3, [pc, #20]	@ (8016804 <vTaskInternalSetTimeOutState+0x28>)
 80167ee:	681a      	ldr	r2, [r3, #0]
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	605a      	str	r2, [r3, #4]
}
 80167f4:	bf00      	nop
 80167f6:	370c      	adds	r7, #12
 80167f8:	46bd      	mov	sp, r7
 80167fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167fe:	4770      	bx	lr
 8016800:	20002c50 	.word	0x20002c50
 8016804:	20002c3c 	.word	0x20002c3c

08016808 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016808:	b580      	push	{r7, lr}
 801680a:	b088      	sub	sp, #32
 801680c:	af00      	add	r7, sp, #0
 801680e:	6078      	str	r0, [r7, #4]
 8016810:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	2b00      	cmp	r3, #0
 8016816:	d10d      	bne.n	8016834 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8016818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801681c:	b672      	cpsid	i
 801681e:	f383 8811 	msr	BASEPRI, r3
 8016822:	f3bf 8f6f 	isb	sy
 8016826:	f3bf 8f4f 	dsb	sy
 801682a:	b662      	cpsie	i
 801682c:	613b      	str	r3, [r7, #16]
}
 801682e:	bf00      	nop
 8016830:	bf00      	nop
 8016832:	e7fd      	b.n	8016830 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8016834:	683b      	ldr	r3, [r7, #0]
 8016836:	2b00      	cmp	r3, #0
 8016838:	d10d      	bne.n	8016856 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 801683a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801683e:	b672      	cpsid	i
 8016840:	f383 8811 	msr	BASEPRI, r3
 8016844:	f3bf 8f6f 	isb	sy
 8016848:	f3bf 8f4f 	dsb	sy
 801684c:	b662      	cpsie	i
 801684e:	60fb      	str	r3, [r7, #12]
}
 8016850:	bf00      	nop
 8016852:	bf00      	nop
 8016854:	e7fd      	b.n	8016852 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8016856:	f000 fb41 	bl	8016edc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801685a:	4b1d      	ldr	r3, [pc, #116]	@ (80168d0 <xTaskCheckForTimeOut+0xc8>)
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	685b      	ldr	r3, [r3, #4]
 8016864:	69ba      	ldr	r2, [r7, #24]
 8016866:	1ad3      	subs	r3, r2, r3
 8016868:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801686a:	683b      	ldr	r3, [r7, #0]
 801686c:	681b      	ldr	r3, [r3, #0]
 801686e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016872:	d102      	bne.n	801687a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016874:	2300      	movs	r3, #0
 8016876:	61fb      	str	r3, [r7, #28]
 8016878:	e023      	b.n	80168c2 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	681a      	ldr	r2, [r3, #0]
 801687e:	4b15      	ldr	r3, [pc, #84]	@ (80168d4 <xTaskCheckForTimeOut+0xcc>)
 8016880:	681b      	ldr	r3, [r3, #0]
 8016882:	429a      	cmp	r2, r3
 8016884:	d007      	beq.n	8016896 <xTaskCheckForTimeOut+0x8e>
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	685b      	ldr	r3, [r3, #4]
 801688a:	69ba      	ldr	r2, [r7, #24]
 801688c:	429a      	cmp	r2, r3
 801688e:	d302      	bcc.n	8016896 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016890:	2301      	movs	r3, #1
 8016892:	61fb      	str	r3, [r7, #28]
 8016894:	e015      	b.n	80168c2 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016896:	683b      	ldr	r3, [r7, #0]
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	697a      	ldr	r2, [r7, #20]
 801689c:	429a      	cmp	r2, r3
 801689e:	d20b      	bcs.n	80168b8 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80168a0:	683b      	ldr	r3, [r7, #0]
 80168a2:	681a      	ldr	r2, [r3, #0]
 80168a4:	697b      	ldr	r3, [r7, #20]
 80168a6:	1ad2      	subs	r2, r2, r3
 80168a8:	683b      	ldr	r3, [r7, #0]
 80168aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80168ac:	6878      	ldr	r0, [r7, #4]
 80168ae:	f7ff ff95 	bl	80167dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80168b2:	2300      	movs	r3, #0
 80168b4:	61fb      	str	r3, [r7, #28]
 80168b6:	e004      	b.n	80168c2 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80168b8:	683b      	ldr	r3, [r7, #0]
 80168ba:	2200      	movs	r2, #0
 80168bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80168be:	2301      	movs	r3, #1
 80168c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80168c2:	f000 fb41 	bl	8016f48 <vPortExitCritical>

	return xReturn;
 80168c6:	69fb      	ldr	r3, [r7, #28]
}
 80168c8:	4618      	mov	r0, r3
 80168ca:	3720      	adds	r7, #32
 80168cc:	46bd      	mov	sp, r7
 80168ce:	bd80      	pop	{r7, pc}
 80168d0:	20002c3c 	.word	0x20002c3c
 80168d4:	20002c50 	.word	0x20002c50

080168d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80168d8:	b480      	push	{r7}
 80168da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80168dc:	4b03      	ldr	r3, [pc, #12]	@ (80168ec <vTaskMissedYield+0x14>)
 80168de:	2201      	movs	r2, #1
 80168e0:	601a      	str	r2, [r3, #0]
}
 80168e2:	bf00      	nop
 80168e4:	46bd      	mov	sp, r7
 80168e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ea:	4770      	bx	lr
 80168ec:	20002c4c 	.word	0x20002c4c

080168f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b082      	sub	sp, #8
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80168f8:	f000 f854 	bl	80169a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80168fc:	4b07      	ldr	r3, [pc, #28]	@ (801691c <prvIdleTask+0x2c>)
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	2b01      	cmp	r3, #1
 8016902:	d907      	bls.n	8016914 <prvIdleTask+0x24>
			{
				taskYIELD();
 8016904:	4b06      	ldr	r3, [pc, #24]	@ (8016920 <prvIdleTask+0x30>)
 8016906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801690a:	601a      	str	r2, [r3, #0]
 801690c:	f3bf 8f4f 	dsb	sy
 8016910:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8016914:	f7eb fbaa 	bl	800206c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8016918:	e7ee      	b.n	80168f8 <prvIdleTask+0x8>
 801691a:	bf00      	nop
 801691c:	20002b3c 	.word	0x20002b3c
 8016920:	e000ed04 	.word	0xe000ed04

08016924 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016924:	b580      	push	{r7, lr}
 8016926:	b082      	sub	sp, #8
 8016928:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801692a:	2300      	movs	r3, #0
 801692c:	607b      	str	r3, [r7, #4]
 801692e:	e00c      	b.n	801694a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016930:	687a      	ldr	r2, [r7, #4]
 8016932:	4613      	mov	r3, r2
 8016934:	009b      	lsls	r3, r3, #2
 8016936:	4413      	add	r3, r2
 8016938:	009b      	lsls	r3, r3, #2
 801693a:	4a12      	ldr	r2, [pc, #72]	@ (8016984 <prvInitialiseTaskLists+0x60>)
 801693c:	4413      	add	r3, r2
 801693e:	4618      	mov	r0, r3
 8016940:	f7fe fbec 	bl	801511c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	3301      	adds	r3, #1
 8016948:	607b      	str	r3, [r7, #4]
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	2b06      	cmp	r3, #6
 801694e:	d9ef      	bls.n	8016930 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016950:	480d      	ldr	r0, [pc, #52]	@ (8016988 <prvInitialiseTaskLists+0x64>)
 8016952:	f7fe fbe3 	bl	801511c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016956:	480d      	ldr	r0, [pc, #52]	@ (801698c <prvInitialiseTaskLists+0x68>)
 8016958:	f7fe fbe0 	bl	801511c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801695c:	480c      	ldr	r0, [pc, #48]	@ (8016990 <prvInitialiseTaskLists+0x6c>)
 801695e:	f7fe fbdd 	bl	801511c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016962:	480c      	ldr	r0, [pc, #48]	@ (8016994 <prvInitialiseTaskLists+0x70>)
 8016964:	f7fe fbda 	bl	801511c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016968:	480b      	ldr	r0, [pc, #44]	@ (8016998 <prvInitialiseTaskLists+0x74>)
 801696a:	f7fe fbd7 	bl	801511c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801696e:	4b0b      	ldr	r3, [pc, #44]	@ (801699c <prvInitialiseTaskLists+0x78>)
 8016970:	4a05      	ldr	r2, [pc, #20]	@ (8016988 <prvInitialiseTaskLists+0x64>)
 8016972:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016974:	4b0a      	ldr	r3, [pc, #40]	@ (80169a0 <prvInitialiseTaskLists+0x7c>)
 8016976:	4a05      	ldr	r2, [pc, #20]	@ (801698c <prvInitialiseTaskLists+0x68>)
 8016978:	601a      	str	r2, [r3, #0]
}
 801697a:	bf00      	nop
 801697c:	3708      	adds	r7, #8
 801697e:	46bd      	mov	sp, r7
 8016980:	bd80      	pop	{r7, pc}
 8016982:	bf00      	nop
 8016984:	20002b3c 	.word	0x20002b3c
 8016988:	20002bc8 	.word	0x20002bc8
 801698c:	20002bdc 	.word	0x20002bdc
 8016990:	20002bf8 	.word	0x20002bf8
 8016994:	20002c0c 	.word	0x20002c0c
 8016998:	20002c24 	.word	0x20002c24
 801699c:	20002bf0 	.word	0x20002bf0
 80169a0:	20002bf4 	.word	0x20002bf4

080169a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80169a4:	b580      	push	{r7, lr}
 80169a6:	b082      	sub	sp, #8
 80169a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80169aa:	e019      	b.n	80169e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80169ac:	f000 fa96 	bl	8016edc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80169b0:	4b10      	ldr	r3, [pc, #64]	@ (80169f4 <prvCheckTasksWaitingTermination+0x50>)
 80169b2:	68db      	ldr	r3, [r3, #12]
 80169b4:	68db      	ldr	r3, [r3, #12]
 80169b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	3304      	adds	r3, #4
 80169bc:	4618      	mov	r0, r3
 80169be:	f7fe fc37 	bl	8015230 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80169c2:	4b0d      	ldr	r3, [pc, #52]	@ (80169f8 <prvCheckTasksWaitingTermination+0x54>)
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	3b01      	subs	r3, #1
 80169c8:	4a0b      	ldr	r2, [pc, #44]	@ (80169f8 <prvCheckTasksWaitingTermination+0x54>)
 80169ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80169cc:	4b0b      	ldr	r3, [pc, #44]	@ (80169fc <prvCheckTasksWaitingTermination+0x58>)
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	3b01      	subs	r3, #1
 80169d2:	4a0a      	ldr	r2, [pc, #40]	@ (80169fc <prvCheckTasksWaitingTermination+0x58>)
 80169d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80169d6:	f000 fab7 	bl	8016f48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80169da:	6878      	ldr	r0, [r7, #4]
 80169dc:	f000 f810 	bl	8016a00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80169e0:	4b06      	ldr	r3, [pc, #24]	@ (80169fc <prvCheckTasksWaitingTermination+0x58>)
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d1e1      	bne.n	80169ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80169e8:	bf00      	nop
 80169ea:	bf00      	nop
 80169ec:	3708      	adds	r7, #8
 80169ee:	46bd      	mov	sp, r7
 80169f0:	bd80      	pop	{r7, pc}
 80169f2:	bf00      	nop
 80169f4:	20002c0c 	.word	0x20002c0c
 80169f8:	20002c38 	.word	0x20002c38
 80169fc:	20002c20 	.word	0x20002c20

08016a00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016a00:	b580      	push	{r7, lr}
 8016a02:	b084      	sub	sp, #16
 8016a04:	af00      	add	r7, sp, #0
 8016a06:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d108      	bne.n	8016a24 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016a16:	4618      	mov	r0, r3
 8016a18:	f000 fc60 	bl	80172dc <vPortFree>
				vPortFree( pxTCB );
 8016a1c:	6878      	ldr	r0, [r7, #4]
 8016a1e:	f000 fc5d 	bl	80172dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016a22:	e01b      	b.n	8016a5c <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8016a2a:	2b01      	cmp	r3, #1
 8016a2c:	d103      	bne.n	8016a36 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8016a2e:	6878      	ldr	r0, [r7, #4]
 8016a30:	f000 fc54 	bl	80172dc <vPortFree>
	}
 8016a34:	e012      	b.n	8016a5c <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8016a3c:	2b02      	cmp	r3, #2
 8016a3e:	d00d      	beq.n	8016a5c <prvDeleteTCB+0x5c>
	__asm volatile
 8016a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a44:	b672      	cpsid	i
 8016a46:	f383 8811 	msr	BASEPRI, r3
 8016a4a:	f3bf 8f6f 	isb	sy
 8016a4e:	f3bf 8f4f 	dsb	sy
 8016a52:	b662      	cpsie	i
 8016a54:	60fb      	str	r3, [r7, #12]
}
 8016a56:	bf00      	nop
 8016a58:	bf00      	nop
 8016a5a:	e7fd      	b.n	8016a58 <prvDeleteTCB+0x58>
	}
 8016a5c:	bf00      	nop
 8016a5e:	3710      	adds	r7, #16
 8016a60:	46bd      	mov	sp, r7
 8016a62:	bd80      	pop	{r7, pc}

08016a64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016a64:	b480      	push	{r7}
 8016a66:	b083      	sub	sp, #12
 8016a68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8016a9c <prvResetNextTaskUnblockTime+0x38>)
 8016a6c:	681b      	ldr	r3, [r3, #0]
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d104      	bne.n	8016a7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016a74:	4b0a      	ldr	r3, [pc, #40]	@ (8016aa0 <prvResetNextTaskUnblockTime+0x3c>)
 8016a76:	f04f 32ff 	mov.w	r2, #4294967295
 8016a7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016a7c:	e008      	b.n	8016a90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016a7e:	4b07      	ldr	r3, [pc, #28]	@ (8016a9c <prvResetNextTaskUnblockTime+0x38>)
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	68db      	ldr	r3, [r3, #12]
 8016a84:	68db      	ldr	r3, [r3, #12]
 8016a86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	685b      	ldr	r3, [r3, #4]
 8016a8c:	4a04      	ldr	r2, [pc, #16]	@ (8016aa0 <prvResetNextTaskUnblockTime+0x3c>)
 8016a8e:	6013      	str	r3, [r2, #0]
}
 8016a90:	bf00      	nop
 8016a92:	370c      	adds	r7, #12
 8016a94:	46bd      	mov	sp, r7
 8016a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a9a:	4770      	bx	lr
 8016a9c:	20002bf0 	.word	0x20002bf0
 8016aa0:	20002c58 	.word	0x20002c58

08016aa4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016aa4:	b480      	push	{r7}
 8016aa6:	b083      	sub	sp, #12
 8016aa8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8016ad8 <xTaskGetSchedulerState+0x34>)
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d102      	bne.n	8016ab8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016ab2:	2301      	movs	r3, #1
 8016ab4:	607b      	str	r3, [r7, #4]
 8016ab6:	e008      	b.n	8016aca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016ab8:	4b08      	ldr	r3, [pc, #32]	@ (8016adc <xTaskGetSchedulerState+0x38>)
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d102      	bne.n	8016ac6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016ac0:	2302      	movs	r3, #2
 8016ac2:	607b      	str	r3, [r7, #4]
 8016ac4:	e001      	b.n	8016aca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016ac6:	2300      	movs	r3, #0
 8016ac8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016aca:	687b      	ldr	r3, [r7, #4]
	}
 8016acc:	4618      	mov	r0, r3
 8016ace:	370c      	adds	r7, #12
 8016ad0:	46bd      	mov	sp, r7
 8016ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ad6:	4770      	bx	lr
 8016ad8:	20002c44 	.word	0x20002c44
 8016adc:	20002c60 	.word	0x20002c60

08016ae0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016ae0:	b580      	push	{r7, lr}
 8016ae2:	b086      	sub	sp, #24
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016aec:	2300      	movs	r3, #0
 8016aee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d074      	beq.n	8016be0 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016af6:	4b3d      	ldr	r3, [pc, #244]	@ (8016bec <xTaskPriorityDisinherit+0x10c>)
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	693a      	ldr	r2, [r7, #16]
 8016afc:	429a      	cmp	r2, r3
 8016afe:	d00d      	beq.n	8016b1c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8016b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b04:	b672      	cpsid	i
 8016b06:	f383 8811 	msr	BASEPRI, r3
 8016b0a:	f3bf 8f6f 	isb	sy
 8016b0e:	f3bf 8f4f 	dsb	sy
 8016b12:	b662      	cpsie	i
 8016b14:	60fb      	str	r3, [r7, #12]
}
 8016b16:	bf00      	nop
 8016b18:	bf00      	nop
 8016b1a:	e7fd      	b.n	8016b18 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8016b1c:	693b      	ldr	r3, [r7, #16]
 8016b1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d10d      	bne.n	8016b40 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8016b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b28:	b672      	cpsid	i
 8016b2a:	f383 8811 	msr	BASEPRI, r3
 8016b2e:	f3bf 8f6f 	isb	sy
 8016b32:	f3bf 8f4f 	dsb	sy
 8016b36:	b662      	cpsie	i
 8016b38:	60bb      	str	r3, [r7, #8]
}
 8016b3a:	bf00      	nop
 8016b3c:	bf00      	nop
 8016b3e:	e7fd      	b.n	8016b3c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8016b40:	693b      	ldr	r3, [r7, #16]
 8016b42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016b44:	1e5a      	subs	r2, r3, #1
 8016b46:	693b      	ldr	r3, [r7, #16]
 8016b48:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016b4a:	693b      	ldr	r3, [r7, #16]
 8016b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016b4e:	693b      	ldr	r3, [r7, #16]
 8016b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016b52:	429a      	cmp	r2, r3
 8016b54:	d044      	beq.n	8016be0 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016b56:	693b      	ldr	r3, [r7, #16]
 8016b58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d140      	bne.n	8016be0 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016b5e:	693b      	ldr	r3, [r7, #16]
 8016b60:	3304      	adds	r3, #4
 8016b62:	4618      	mov	r0, r3
 8016b64:	f7fe fb64 	bl	8015230 <uxListRemove>
 8016b68:	4603      	mov	r3, r0
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d115      	bne.n	8016b9a <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016b6e:	693b      	ldr	r3, [r7, #16]
 8016b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016b72:	491f      	ldr	r1, [pc, #124]	@ (8016bf0 <xTaskPriorityDisinherit+0x110>)
 8016b74:	4613      	mov	r3, r2
 8016b76:	009b      	lsls	r3, r3, #2
 8016b78:	4413      	add	r3, r2
 8016b7a:	009b      	lsls	r3, r3, #2
 8016b7c:	440b      	add	r3, r1
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d10a      	bne.n	8016b9a <xTaskPriorityDisinherit+0xba>
 8016b84:	693b      	ldr	r3, [r7, #16]
 8016b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016b88:	2201      	movs	r2, #1
 8016b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8016b8e:	43da      	mvns	r2, r3
 8016b90:	4b18      	ldr	r3, [pc, #96]	@ (8016bf4 <xTaskPriorityDisinherit+0x114>)
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	4013      	ands	r3, r2
 8016b96:	4a17      	ldr	r2, [pc, #92]	@ (8016bf4 <xTaskPriorityDisinherit+0x114>)
 8016b98:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016b9a:	693b      	ldr	r3, [r7, #16]
 8016b9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016b9e:	693b      	ldr	r3, [r7, #16]
 8016ba0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016ba2:	693b      	ldr	r3, [r7, #16]
 8016ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016ba6:	f1c3 0207 	rsb	r2, r3, #7
 8016baa:	693b      	ldr	r3, [r7, #16]
 8016bac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016bae:	693b      	ldr	r3, [r7, #16]
 8016bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016bb2:	2201      	movs	r2, #1
 8016bb4:	409a      	lsls	r2, r3
 8016bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8016bf4 <xTaskPriorityDisinherit+0x114>)
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	4313      	orrs	r3, r2
 8016bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8016bf4 <xTaskPriorityDisinherit+0x114>)
 8016bbe:	6013      	str	r3, [r2, #0]
 8016bc0:	693b      	ldr	r3, [r7, #16]
 8016bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016bc4:	4613      	mov	r3, r2
 8016bc6:	009b      	lsls	r3, r3, #2
 8016bc8:	4413      	add	r3, r2
 8016bca:	009b      	lsls	r3, r3, #2
 8016bcc:	4a08      	ldr	r2, [pc, #32]	@ (8016bf0 <xTaskPriorityDisinherit+0x110>)
 8016bce:	441a      	add	r2, r3
 8016bd0:	693b      	ldr	r3, [r7, #16]
 8016bd2:	3304      	adds	r3, #4
 8016bd4:	4619      	mov	r1, r3
 8016bd6:	4610      	mov	r0, r2
 8016bd8:	f7fe facd 	bl	8015176 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016bdc:	2301      	movs	r3, #1
 8016bde:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016be0:	697b      	ldr	r3, [r7, #20]
	}
 8016be2:	4618      	mov	r0, r3
 8016be4:	3718      	adds	r7, #24
 8016be6:	46bd      	mov	sp, r7
 8016be8:	bd80      	pop	{r7, pc}
 8016bea:	bf00      	nop
 8016bec:	20002b38 	.word	0x20002b38
 8016bf0:	20002b3c 	.word	0x20002b3c
 8016bf4:	20002c40 	.word	0x20002c40

08016bf8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016bf8:	b580      	push	{r7, lr}
 8016bfa:	b084      	sub	sp, #16
 8016bfc:	af00      	add	r7, sp, #0
 8016bfe:	6078      	str	r0, [r7, #4]
 8016c00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016c02:	4b29      	ldr	r3, [pc, #164]	@ (8016ca8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016c08:	4b28      	ldr	r3, [pc, #160]	@ (8016cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	3304      	adds	r3, #4
 8016c0e:	4618      	mov	r0, r3
 8016c10:	f7fe fb0e 	bl	8015230 <uxListRemove>
 8016c14:	4603      	mov	r3, r0
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d10b      	bne.n	8016c32 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8016c1a:	4b24      	ldr	r3, [pc, #144]	@ (8016cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016c20:	2201      	movs	r2, #1
 8016c22:	fa02 f303 	lsl.w	r3, r2, r3
 8016c26:	43da      	mvns	r2, r3
 8016c28:	4b21      	ldr	r3, [pc, #132]	@ (8016cb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	4013      	ands	r3, r2
 8016c2e:	4a20      	ldr	r2, [pc, #128]	@ (8016cb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8016c30:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c38:	d10a      	bne.n	8016c50 <prvAddCurrentTaskToDelayedList+0x58>
 8016c3a:	683b      	ldr	r3, [r7, #0]
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d007      	beq.n	8016c50 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016c40:	4b1a      	ldr	r3, [pc, #104]	@ (8016cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	3304      	adds	r3, #4
 8016c46:	4619      	mov	r1, r3
 8016c48:	481a      	ldr	r0, [pc, #104]	@ (8016cb4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8016c4a:	f7fe fa94 	bl	8015176 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016c4e:	e026      	b.n	8016c9e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016c50:	68fa      	ldr	r2, [r7, #12]
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	4413      	add	r3, r2
 8016c56:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016c58:	4b14      	ldr	r3, [pc, #80]	@ (8016cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	68ba      	ldr	r2, [r7, #8]
 8016c5e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016c60:	68ba      	ldr	r2, [r7, #8]
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	429a      	cmp	r2, r3
 8016c66:	d209      	bcs.n	8016c7c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016c68:	4b13      	ldr	r3, [pc, #76]	@ (8016cb8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8016c6a:	681a      	ldr	r2, [r3, #0]
 8016c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8016cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	3304      	adds	r3, #4
 8016c72:	4619      	mov	r1, r3
 8016c74:	4610      	mov	r0, r2
 8016c76:	f7fe faa2 	bl	80151be <vListInsert>
}
 8016c7a:	e010      	b.n	8016c9e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8016cbc <prvAddCurrentTaskToDelayedList+0xc4>)
 8016c7e:	681a      	ldr	r2, [r3, #0]
 8016c80:	4b0a      	ldr	r3, [pc, #40]	@ (8016cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8016c82:	681b      	ldr	r3, [r3, #0]
 8016c84:	3304      	adds	r3, #4
 8016c86:	4619      	mov	r1, r3
 8016c88:	4610      	mov	r0, r2
 8016c8a:	f7fe fa98 	bl	80151be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8016cc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	68ba      	ldr	r2, [r7, #8]
 8016c94:	429a      	cmp	r2, r3
 8016c96:	d202      	bcs.n	8016c9e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8016c98:	4a09      	ldr	r2, [pc, #36]	@ (8016cc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8016c9a:	68bb      	ldr	r3, [r7, #8]
 8016c9c:	6013      	str	r3, [r2, #0]
}
 8016c9e:	bf00      	nop
 8016ca0:	3710      	adds	r7, #16
 8016ca2:	46bd      	mov	sp, r7
 8016ca4:	bd80      	pop	{r7, pc}
 8016ca6:	bf00      	nop
 8016ca8:	20002c3c 	.word	0x20002c3c
 8016cac:	20002b38 	.word	0x20002b38
 8016cb0:	20002c40 	.word	0x20002c40
 8016cb4:	20002c24 	.word	0x20002c24
 8016cb8:	20002bf4 	.word	0x20002bf4
 8016cbc:	20002bf0 	.word	0x20002bf0
 8016cc0:	20002c58 	.word	0x20002c58

08016cc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016cc4:	b480      	push	{r7}
 8016cc6:	b085      	sub	sp, #20
 8016cc8:	af00      	add	r7, sp, #0
 8016cca:	60f8      	str	r0, [r7, #12]
 8016ccc:	60b9      	str	r1, [r7, #8]
 8016cce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016cd0:	68fb      	ldr	r3, [r7, #12]
 8016cd2:	3b04      	subs	r3, #4
 8016cd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8016cdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016cde:	68fb      	ldr	r3, [r7, #12]
 8016ce0:	3b04      	subs	r3, #4
 8016ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016ce4:	68bb      	ldr	r3, [r7, #8]
 8016ce6:	f023 0201 	bic.w	r2, r3, #1
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	3b04      	subs	r3, #4
 8016cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016cf4:	4a0c      	ldr	r2, [pc, #48]	@ (8016d28 <pxPortInitialiseStack+0x64>)
 8016cf6:	68fb      	ldr	r3, [r7, #12]
 8016cf8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	3b14      	subs	r3, #20
 8016cfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016d00:	687a      	ldr	r2, [r7, #4]
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	3b04      	subs	r3, #4
 8016d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016d0c:	68fb      	ldr	r3, [r7, #12]
 8016d0e:	f06f 0202 	mvn.w	r2, #2
 8016d12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	3b20      	subs	r3, #32
 8016d18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016d1a:	68fb      	ldr	r3, [r7, #12]
}
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	3714      	adds	r7, #20
 8016d20:	46bd      	mov	sp, r7
 8016d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d26:	4770      	bx	lr
 8016d28:	08016d2d 	.word	0x08016d2d

08016d2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016d2c:	b480      	push	{r7}
 8016d2e:	b085      	sub	sp, #20
 8016d30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016d32:	2300      	movs	r3, #0
 8016d34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016d36:	4b15      	ldr	r3, [pc, #84]	@ (8016d8c <prvTaskExitError+0x60>)
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d3e:	d00d      	beq.n	8016d5c <prvTaskExitError+0x30>
	__asm volatile
 8016d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d44:	b672      	cpsid	i
 8016d46:	f383 8811 	msr	BASEPRI, r3
 8016d4a:	f3bf 8f6f 	isb	sy
 8016d4e:	f3bf 8f4f 	dsb	sy
 8016d52:	b662      	cpsie	i
 8016d54:	60fb      	str	r3, [r7, #12]
}
 8016d56:	bf00      	nop
 8016d58:	bf00      	nop
 8016d5a:	e7fd      	b.n	8016d58 <prvTaskExitError+0x2c>
	__asm volatile
 8016d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d60:	b672      	cpsid	i
 8016d62:	f383 8811 	msr	BASEPRI, r3
 8016d66:	f3bf 8f6f 	isb	sy
 8016d6a:	f3bf 8f4f 	dsb	sy
 8016d6e:	b662      	cpsie	i
 8016d70:	60bb      	str	r3, [r7, #8]
}
 8016d72:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016d74:	bf00      	nop
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d0fc      	beq.n	8016d76 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016d7c:	bf00      	nop
 8016d7e:	bf00      	nop
 8016d80:	3714      	adds	r7, #20
 8016d82:	46bd      	mov	sp, r7
 8016d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d88:	4770      	bx	lr
 8016d8a:	bf00      	nop
 8016d8c:	20000074 	.word	0x20000074

08016d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016d90:	4b07      	ldr	r3, [pc, #28]	@ (8016db0 <pxCurrentTCBConst2>)
 8016d92:	6819      	ldr	r1, [r3, #0]
 8016d94:	6808      	ldr	r0, [r1, #0]
 8016d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d9a:	f380 8809 	msr	PSP, r0
 8016d9e:	f3bf 8f6f 	isb	sy
 8016da2:	f04f 0000 	mov.w	r0, #0
 8016da6:	f380 8811 	msr	BASEPRI, r0
 8016daa:	4770      	bx	lr
 8016dac:	f3af 8000 	nop.w

08016db0 <pxCurrentTCBConst2>:
 8016db0:	20002b38 	.word	0x20002b38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016db4:	bf00      	nop
 8016db6:	bf00      	nop

08016db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016db8:	4808      	ldr	r0, [pc, #32]	@ (8016ddc <prvPortStartFirstTask+0x24>)
 8016dba:	6800      	ldr	r0, [r0, #0]
 8016dbc:	6800      	ldr	r0, [r0, #0]
 8016dbe:	f380 8808 	msr	MSP, r0
 8016dc2:	f04f 0000 	mov.w	r0, #0
 8016dc6:	f380 8814 	msr	CONTROL, r0
 8016dca:	b662      	cpsie	i
 8016dcc:	b661      	cpsie	f
 8016dce:	f3bf 8f4f 	dsb	sy
 8016dd2:	f3bf 8f6f 	isb	sy
 8016dd6:	df00      	svc	0
 8016dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8016dda:	bf00      	nop
 8016ddc:	e000ed08 	.word	0xe000ed08

08016de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016de0:	b580      	push	{r7, lr}
 8016de2:	b084      	sub	sp, #16
 8016de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016de6:	4b37      	ldr	r3, [pc, #220]	@ (8016ec4 <xPortStartScheduler+0xe4>)
 8016de8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	781b      	ldrb	r3, [r3, #0]
 8016dee:	b2db      	uxtb	r3, r3
 8016df0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016df2:	68fb      	ldr	r3, [r7, #12]
 8016df4:	22ff      	movs	r2, #255	@ 0xff
 8016df6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	781b      	ldrb	r3, [r3, #0]
 8016dfc:	b2db      	uxtb	r3, r3
 8016dfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016e00:	78fb      	ldrb	r3, [r7, #3]
 8016e02:	b2db      	uxtb	r3, r3
 8016e04:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8016e08:	b2da      	uxtb	r2, r3
 8016e0a:	4b2f      	ldr	r3, [pc, #188]	@ (8016ec8 <xPortStartScheduler+0xe8>)
 8016e0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016e0e:	4b2f      	ldr	r3, [pc, #188]	@ (8016ecc <xPortStartScheduler+0xec>)
 8016e10:	2207      	movs	r2, #7
 8016e12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016e14:	e009      	b.n	8016e2a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8016e16:	4b2d      	ldr	r3, [pc, #180]	@ (8016ecc <xPortStartScheduler+0xec>)
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	3b01      	subs	r3, #1
 8016e1c:	4a2b      	ldr	r2, [pc, #172]	@ (8016ecc <xPortStartScheduler+0xec>)
 8016e1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016e20:	78fb      	ldrb	r3, [r7, #3]
 8016e22:	b2db      	uxtb	r3, r3
 8016e24:	005b      	lsls	r3, r3, #1
 8016e26:	b2db      	uxtb	r3, r3
 8016e28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016e2a:	78fb      	ldrb	r3, [r7, #3]
 8016e2c:	b2db      	uxtb	r3, r3
 8016e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016e32:	2b80      	cmp	r3, #128	@ 0x80
 8016e34:	d0ef      	beq.n	8016e16 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016e36:	4b25      	ldr	r3, [pc, #148]	@ (8016ecc <xPortStartScheduler+0xec>)
 8016e38:	681b      	ldr	r3, [r3, #0]
 8016e3a:	f1c3 0307 	rsb	r3, r3, #7
 8016e3e:	2b04      	cmp	r3, #4
 8016e40:	d00d      	beq.n	8016e5e <xPortStartScheduler+0x7e>
	__asm volatile
 8016e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e46:	b672      	cpsid	i
 8016e48:	f383 8811 	msr	BASEPRI, r3
 8016e4c:	f3bf 8f6f 	isb	sy
 8016e50:	f3bf 8f4f 	dsb	sy
 8016e54:	b662      	cpsie	i
 8016e56:	60bb      	str	r3, [r7, #8]
}
 8016e58:	bf00      	nop
 8016e5a:	bf00      	nop
 8016e5c:	e7fd      	b.n	8016e5a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8016ecc <xPortStartScheduler+0xec>)
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	021b      	lsls	r3, r3, #8
 8016e64:	4a19      	ldr	r2, [pc, #100]	@ (8016ecc <xPortStartScheduler+0xec>)
 8016e66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016e68:	4b18      	ldr	r3, [pc, #96]	@ (8016ecc <xPortStartScheduler+0xec>)
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8016e70:	4a16      	ldr	r2, [pc, #88]	@ (8016ecc <xPortStartScheduler+0xec>)
 8016e72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	b2da      	uxtb	r2, r3
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016e7c:	4b14      	ldr	r3, [pc, #80]	@ (8016ed0 <xPortStartScheduler+0xf0>)
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	4a13      	ldr	r2, [pc, #76]	@ (8016ed0 <xPortStartScheduler+0xf0>)
 8016e82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8016e86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016e88:	4b11      	ldr	r3, [pc, #68]	@ (8016ed0 <xPortStartScheduler+0xf0>)
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	4a10      	ldr	r2, [pc, #64]	@ (8016ed0 <xPortStartScheduler+0xf0>)
 8016e8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8016e92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016e94:	f000 f8dc 	bl	8017050 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016e98:	4b0e      	ldr	r3, [pc, #56]	@ (8016ed4 <xPortStartScheduler+0xf4>)
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016e9e:	f000 f8fb 	bl	8017098 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8016ed8 <xPortStartScheduler+0xf8>)
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	4a0c      	ldr	r2, [pc, #48]	@ (8016ed8 <xPortStartScheduler+0xf8>)
 8016ea8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8016eac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016eae:	f7ff ff83 	bl	8016db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016eb2:	f7ff fb81 	bl	80165b8 <vTaskSwitchContext>
	prvTaskExitError();
 8016eb6:	f7ff ff39 	bl	8016d2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016eba:	2300      	movs	r3, #0
}
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	3710      	adds	r7, #16
 8016ec0:	46bd      	mov	sp, r7
 8016ec2:	bd80      	pop	{r7, pc}
 8016ec4:	e000e400 	.word	0xe000e400
 8016ec8:	20002c64 	.word	0x20002c64
 8016ecc:	20002c68 	.word	0x20002c68
 8016ed0:	e000ed20 	.word	0xe000ed20
 8016ed4:	20000074 	.word	0x20000074
 8016ed8:	e000ef34 	.word	0xe000ef34

08016edc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016edc:	b480      	push	{r7}
 8016ede:	b083      	sub	sp, #12
 8016ee0:	af00      	add	r7, sp, #0
	__asm volatile
 8016ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ee6:	b672      	cpsid	i
 8016ee8:	f383 8811 	msr	BASEPRI, r3
 8016eec:	f3bf 8f6f 	isb	sy
 8016ef0:	f3bf 8f4f 	dsb	sy
 8016ef4:	b662      	cpsie	i
 8016ef6:	607b      	str	r3, [r7, #4]
}
 8016ef8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016efa:	4b11      	ldr	r3, [pc, #68]	@ (8016f40 <vPortEnterCritical+0x64>)
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	3301      	adds	r3, #1
 8016f00:	4a0f      	ldr	r2, [pc, #60]	@ (8016f40 <vPortEnterCritical+0x64>)
 8016f02:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016f04:	4b0e      	ldr	r3, [pc, #56]	@ (8016f40 <vPortEnterCritical+0x64>)
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	2b01      	cmp	r3, #1
 8016f0a:	d112      	bne.n	8016f32 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8016f44 <vPortEnterCritical+0x68>)
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	b2db      	uxtb	r3, r3
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d00d      	beq.n	8016f32 <vPortEnterCritical+0x56>
	__asm volatile
 8016f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f1a:	b672      	cpsid	i
 8016f1c:	f383 8811 	msr	BASEPRI, r3
 8016f20:	f3bf 8f6f 	isb	sy
 8016f24:	f3bf 8f4f 	dsb	sy
 8016f28:	b662      	cpsie	i
 8016f2a:	603b      	str	r3, [r7, #0]
}
 8016f2c:	bf00      	nop
 8016f2e:	bf00      	nop
 8016f30:	e7fd      	b.n	8016f2e <vPortEnterCritical+0x52>
	}
}
 8016f32:	bf00      	nop
 8016f34:	370c      	adds	r7, #12
 8016f36:	46bd      	mov	sp, r7
 8016f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f3c:	4770      	bx	lr
 8016f3e:	bf00      	nop
 8016f40:	20000074 	.word	0x20000074
 8016f44:	e000ed04 	.word	0xe000ed04

08016f48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016f48:	b480      	push	{r7}
 8016f4a:	b083      	sub	sp, #12
 8016f4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016f4e:	4b13      	ldr	r3, [pc, #76]	@ (8016f9c <vPortExitCritical+0x54>)
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d10d      	bne.n	8016f72 <vPortExitCritical+0x2a>
	__asm volatile
 8016f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f5a:	b672      	cpsid	i
 8016f5c:	f383 8811 	msr	BASEPRI, r3
 8016f60:	f3bf 8f6f 	isb	sy
 8016f64:	f3bf 8f4f 	dsb	sy
 8016f68:	b662      	cpsie	i
 8016f6a:	607b      	str	r3, [r7, #4]
}
 8016f6c:	bf00      	nop
 8016f6e:	bf00      	nop
 8016f70:	e7fd      	b.n	8016f6e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8016f72:	4b0a      	ldr	r3, [pc, #40]	@ (8016f9c <vPortExitCritical+0x54>)
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	3b01      	subs	r3, #1
 8016f78:	4a08      	ldr	r2, [pc, #32]	@ (8016f9c <vPortExitCritical+0x54>)
 8016f7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016f7c:	4b07      	ldr	r3, [pc, #28]	@ (8016f9c <vPortExitCritical+0x54>)
 8016f7e:	681b      	ldr	r3, [r3, #0]
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d105      	bne.n	8016f90 <vPortExitCritical+0x48>
 8016f84:	2300      	movs	r3, #0
 8016f86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016f88:	683b      	ldr	r3, [r7, #0]
 8016f8a:	f383 8811 	msr	BASEPRI, r3
}
 8016f8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016f90:	bf00      	nop
 8016f92:	370c      	adds	r7, #12
 8016f94:	46bd      	mov	sp, r7
 8016f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f9a:	4770      	bx	lr
 8016f9c:	20000074 	.word	0x20000074

08016fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016fa0:	f3ef 8009 	mrs	r0, PSP
 8016fa4:	f3bf 8f6f 	isb	sy
 8016fa8:	4b15      	ldr	r3, [pc, #84]	@ (8017000 <pxCurrentTCBConst>)
 8016faa:	681a      	ldr	r2, [r3, #0]
 8016fac:	f01e 0f10 	tst.w	lr, #16
 8016fb0:	bf08      	it	eq
 8016fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fba:	6010      	str	r0, [r2, #0]
 8016fbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016fc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8016fc4:	b672      	cpsid	i
 8016fc6:	f380 8811 	msr	BASEPRI, r0
 8016fca:	f3bf 8f4f 	dsb	sy
 8016fce:	f3bf 8f6f 	isb	sy
 8016fd2:	b662      	cpsie	i
 8016fd4:	f7ff faf0 	bl	80165b8 <vTaskSwitchContext>
 8016fd8:	f04f 0000 	mov.w	r0, #0
 8016fdc:	f380 8811 	msr	BASEPRI, r0
 8016fe0:	bc09      	pop	{r0, r3}
 8016fe2:	6819      	ldr	r1, [r3, #0]
 8016fe4:	6808      	ldr	r0, [r1, #0]
 8016fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fea:	f01e 0f10 	tst.w	lr, #16
 8016fee:	bf08      	it	eq
 8016ff0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016ff4:	f380 8809 	msr	PSP, r0
 8016ff8:	f3bf 8f6f 	isb	sy
 8016ffc:	4770      	bx	lr
 8016ffe:	bf00      	nop

08017000 <pxCurrentTCBConst>:
 8017000:	20002b38 	.word	0x20002b38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017004:	bf00      	nop
 8017006:	bf00      	nop

08017008 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017008:	b580      	push	{r7, lr}
 801700a:	b082      	sub	sp, #8
 801700c:	af00      	add	r7, sp, #0
	__asm volatile
 801700e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017012:	b672      	cpsid	i
 8017014:	f383 8811 	msr	BASEPRI, r3
 8017018:	f3bf 8f6f 	isb	sy
 801701c:	f3bf 8f4f 	dsb	sy
 8017020:	b662      	cpsie	i
 8017022:	607b      	str	r3, [r7, #4]
}
 8017024:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8017026:	f7ff fa0b 	bl	8016440 <xTaskIncrementTick>
 801702a:	4603      	mov	r3, r0
 801702c:	2b00      	cmp	r3, #0
 801702e:	d003      	beq.n	8017038 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8017030:	4b06      	ldr	r3, [pc, #24]	@ (801704c <SysTick_Handler+0x44>)
 8017032:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017036:	601a      	str	r2, [r3, #0]
 8017038:	2300      	movs	r3, #0
 801703a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801703c:	683b      	ldr	r3, [r7, #0]
 801703e:	f383 8811 	msr	BASEPRI, r3
}
 8017042:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8017044:	bf00      	nop
 8017046:	3708      	adds	r7, #8
 8017048:	46bd      	mov	sp, r7
 801704a:	bd80      	pop	{r7, pc}
 801704c:	e000ed04 	.word	0xe000ed04

08017050 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8017050:	b480      	push	{r7}
 8017052:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017054:	4b0b      	ldr	r3, [pc, #44]	@ (8017084 <vPortSetupTimerInterrupt+0x34>)
 8017056:	2200      	movs	r2, #0
 8017058:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801705a:	4b0b      	ldr	r3, [pc, #44]	@ (8017088 <vPortSetupTimerInterrupt+0x38>)
 801705c:	2200      	movs	r2, #0
 801705e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8017060:	4b0a      	ldr	r3, [pc, #40]	@ (801708c <vPortSetupTimerInterrupt+0x3c>)
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	4a0a      	ldr	r2, [pc, #40]	@ (8017090 <vPortSetupTimerInterrupt+0x40>)
 8017066:	fba2 2303 	umull	r2, r3, r2, r3
 801706a:	099b      	lsrs	r3, r3, #6
 801706c:	4a09      	ldr	r2, [pc, #36]	@ (8017094 <vPortSetupTimerInterrupt+0x44>)
 801706e:	3b01      	subs	r3, #1
 8017070:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017072:	4b04      	ldr	r3, [pc, #16]	@ (8017084 <vPortSetupTimerInterrupt+0x34>)
 8017074:	2207      	movs	r2, #7
 8017076:	601a      	str	r2, [r3, #0]
}
 8017078:	bf00      	nop
 801707a:	46bd      	mov	sp, r7
 801707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017080:	4770      	bx	lr
 8017082:	bf00      	nop
 8017084:	e000e010 	.word	0xe000e010
 8017088:	e000e018 	.word	0xe000e018
 801708c:	2000001c 	.word	0x2000001c
 8017090:	10624dd3 	.word	0x10624dd3
 8017094:	e000e014 	.word	0xe000e014

08017098 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8017098:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80170a8 <vPortEnableVFP+0x10>
 801709c:	6801      	ldr	r1, [r0, #0]
 801709e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80170a2:	6001      	str	r1, [r0, #0]
 80170a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80170a6:	bf00      	nop
 80170a8:	e000ed88 	.word	0xe000ed88

080170ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80170ac:	b480      	push	{r7}
 80170ae:	b085      	sub	sp, #20
 80170b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80170b2:	f3ef 8305 	mrs	r3, IPSR
 80170b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	2b0f      	cmp	r3, #15
 80170bc:	d917      	bls.n	80170ee <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80170be:	4a1a      	ldr	r2, [pc, #104]	@ (8017128 <vPortValidateInterruptPriority+0x7c>)
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	4413      	add	r3, r2
 80170c4:	781b      	ldrb	r3, [r3, #0]
 80170c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80170c8:	4b18      	ldr	r3, [pc, #96]	@ (801712c <vPortValidateInterruptPriority+0x80>)
 80170ca:	781b      	ldrb	r3, [r3, #0]
 80170cc:	7afa      	ldrb	r2, [r7, #11]
 80170ce:	429a      	cmp	r2, r3
 80170d0:	d20d      	bcs.n	80170ee <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80170d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80170d6:	b672      	cpsid	i
 80170d8:	f383 8811 	msr	BASEPRI, r3
 80170dc:	f3bf 8f6f 	isb	sy
 80170e0:	f3bf 8f4f 	dsb	sy
 80170e4:	b662      	cpsie	i
 80170e6:	607b      	str	r3, [r7, #4]
}
 80170e8:	bf00      	nop
 80170ea:	bf00      	nop
 80170ec:	e7fd      	b.n	80170ea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80170ee:	4b10      	ldr	r3, [pc, #64]	@ (8017130 <vPortValidateInterruptPriority+0x84>)
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80170f6:	4b0f      	ldr	r3, [pc, #60]	@ (8017134 <vPortValidateInterruptPriority+0x88>)
 80170f8:	681b      	ldr	r3, [r3, #0]
 80170fa:	429a      	cmp	r2, r3
 80170fc:	d90d      	bls.n	801711a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80170fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017102:	b672      	cpsid	i
 8017104:	f383 8811 	msr	BASEPRI, r3
 8017108:	f3bf 8f6f 	isb	sy
 801710c:	f3bf 8f4f 	dsb	sy
 8017110:	b662      	cpsie	i
 8017112:	603b      	str	r3, [r7, #0]
}
 8017114:	bf00      	nop
 8017116:	bf00      	nop
 8017118:	e7fd      	b.n	8017116 <vPortValidateInterruptPriority+0x6a>
	}
 801711a:	bf00      	nop
 801711c:	3714      	adds	r7, #20
 801711e:	46bd      	mov	sp, r7
 8017120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017124:	4770      	bx	lr
 8017126:	bf00      	nop
 8017128:	e000e3f0 	.word	0xe000e3f0
 801712c:	20002c64 	.word	0x20002c64
 8017130:	e000ed0c 	.word	0xe000ed0c
 8017134:	20002c68 	.word	0x20002c68

08017138 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8017138:	b580      	push	{r7, lr}
 801713a:	b08a      	sub	sp, #40	@ 0x28
 801713c:	af00      	add	r7, sp, #0
 801713e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017140:	2300      	movs	r3, #0
 8017142:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017144:	f7ff f8ac 	bl	80162a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8017148:	4b5f      	ldr	r3, [pc, #380]	@ (80172c8 <pvPortMalloc+0x190>)
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	2b00      	cmp	r3, #0
 801714e:	d101      	bne.n	8017154 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017150:	f000 f924 	bl	801739c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017154:	4b5d      	ldr	r3, [pc, #372]	@ (80172cc <pvPortMalloc+0x194>)
 8017156:	681a      	ldr	r2, [r3, #0]
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	4013      	ands	r3, r2
 801715c:	2b00      	cmp	r3, #0
 801715e:	f040 8094 	bne.w	801728a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	2b00      	cmp	r3, #0
 8017166:	d020      	beq.n	80171aa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8017168:	2208      	movs	r2, #8
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	4413      	add	r3, r2
 801716e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	f003 0307 	and.w	r3, r3, #7
 8017176:	2b00      	cmp	r3, #0
 8017178:	d017      	beq.n	80171aa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	f023 0307 	bic.w	r3, r3, #7
 8017180:	3308      	adds	r3, #8
 8017182:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	f003 0307 	and.w	r3, r3, #7
 801718a:	2b00      	cmp	r3, #0
 801718c:	d00d      	beq.n	80171aa <pvPortMalloc+0x72>
	__asm volatile
 801718e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017192:	b672      	cpsid	i
 8017194:	f383 8811 	msr	BASEPRI, r3
 8017198:	f3bf 8f6f 	isb	sy
 801719c:	f3bf 8f4f 	dsb	sy
 80171a0:	b662      	cpsie	i
 80171a2:	617b      	str	r3, [r7, #20]
}
 80171a4:	bf00      	nop
 80171a6:	bf00      	nop
 80171a8:	e7fd      	b.n	80171a6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d06c      	beq.n	801728a <pvPortMalloc+0x152>
 80171b0:	4b47      	ldr	r3, [pc, #284]	@ (80172d0 <pvPortMalloc+0x198>)
 80171b2:	681b      	ldr	r3, [r3, #0]
 80171b4:	687a      	ldr	r2, [r7, #4]
 80171b6:	429a      	cmp	r2, r3
 80171b8:	d867      	bhi.n	801728a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80171ba:	4b46      	ldr	r3, [pc, #280]	@ (80172d4 <pvPortMalloc+0x19c>)
 80171bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80171be:	4b45      	ldr	r3, [pc, #276]	@ (80172d4 <pvPortMalloc+0x19c>)
 80171c0:	681b      	ldr	r3, [r3, #0]
 80171c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80171c4:	e004      	b.n	80171d0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80171c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80171ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171cc:	681b      	ldr	r3, [r3, #0]
 80171ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80171d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171d2:	685b      	ldr	r3, [r3, #4]
 80171d4:	687a      	ldr	r2, [r7, #4]
 80171d6:	429a      	cmp	r2, r3
 80171d8:	d903      	bls.n	80171e2 <pvPortMalloc+0xaa>
 80171da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171dc:	681b      	ldr	r3, [r3, #0]
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d1f1      	bne.n	80171c6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80171e2:	4b39      	ldr	r3, [pc, #228]	@ (80172c8 <pvPortMalloc+0x190>)
 80171e4:	681b      	ldr	r3, [r3, #0]
 80171e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80171e8:	429a      	cmp	r2, r3
 80171ea:	d04e      	beq.n	801728a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80171ec:	6a3b      	ldr	r3, [r7, #32]
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	2208      	movs	r2, #8
 80171f2:	4413      	add	r3, r2
 80171f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80171f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171f8:	681a      	ldr	r2, [r3, #0]
 80171fa:	6a3b      	ldr	r3, [r7, #32]
 80171fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80171fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017200:	685a      	ldr	r2, [r3, #4]
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	1ad2      	subs	r2, r2, r3
 8017206:	2308      	movs	r3, #8
 8017208:	005b      	lsls	r3, r3, #1
 801720a:	429a      	cmp	r2, r3
 801720c:	d922      	bls.n	8017254 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801720e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	4413      	add	r3, r2
 8017214:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017216:	69bb      	ldr	r3, [r7, #24]
 8017218:	f003 0307 	and.w	r3, r3, #7
 801721c:	2b00      	cmp	r3, #0
 801721e:	d00d      	beq.n	801723c <pvPortMalloc+0x104>
	__asm volatile
 8017220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017224:	b672      	cpsid	i
 8017226:	f383 8811 	msr	BASEPRI, r3
 801722a:	f3bf 8f6f 	isb	sy
 801722e:	f3bf 8f4f 	dsb	sy
 8017232:	b662      	cpsie	i
 8017234:	613b      	str	r3, [r7, #16]
}
 8017236:	bf00      	nop
 8017238:	bf00      	nop
 801723a:	e7fd      	b.n	8017238 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801723c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801723e:	685a      	ldr	r2, [r3, #4]
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	1ad2      	subs	r2, r2, r3
 8017244:	69bb      	ldr	r3, [r7, #24]
 8017246:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801724a:	687a      	ldr	r2, [r7, #4]
 801724c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801724e:	69b8      	ldr	r0, [r7, #24]
 8017250:	f000 f906 	bl	8017460 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017254:	4b1e      	ldr	r3, [pc, #120]	@ (80172d0 <pvPortMalloc+0x198>)
 8017256:	681a      	ldr	r2, [r3, #0]
 8017258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801725a:	685b      	ldr	r3, [r3, #4]
 801725c:	1ad3      	subs	r3, r2, r3
 801725e:	4a1c      	ldr	r2, [pc, #112]	@ (80172d0 <pvPortMalloc+0x198>)
 8017260:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017262:	4b1b      	ldr	r3, [pc, #108]	@ (80172d0 <pvPortMalloc+0x198>)
 8017264:	681a      	ldr	r2, [r3, #0]
 8017266:	4b1c      	ldr	r3, [pc, #112]	@ (80172d8 <pvPortMalloc+0x1a0>)
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	429a      	cmp	r2, r3
 801726c:	d203      	bcs.n	8017276 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801726e:	4b18      	ldr	r3, [pc, #96]	@ (80172d0 <pvPortMalloc+0x198>)
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	4a19      	ldr	r2, [pc, #100]	@ (80172d8 <pvPortMalloc+0x1a0>)
 8017274:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017278:	685a      	ldr	r2, [r3, #4]
 801727a:	4b14      	ldr	r3, [pc, #80]	@ (80172cc <pvPortMalloc+0x194>)
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	431a      	orrs	r2, r3
 8017280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017282:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017286:	2200      	movs	r2, #0
 8017288:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801728a:	f7ff f817 	bl	80162bc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801728e:	69fb      	ldr	r3, [r7, #28]
 8017290:	2b00      	cmp	r3, #0
 8017292:	d101      	bne.n	8017298 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8017294:	f7ea fefc 	bl	8002090 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017298:	69fb      	ldr	r3, [r7, #28]
 801729a:	f003 0307 	and.w	r3, r3, #7
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d00d      	beq.n	80172be <pvPortMalloc+0x186>
	__asm volatile
 80172a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172a6:	b672      	cpsid	i
 80172a8:	f383 8811 	msr	BASEPRI, r3
 80172ac:	f3bf 8f6f 	isb	sy
 80172b0:	f3bf 8f4f 	dsb	sy
 80172b4:	b662      	cpsie	i
 80172b6:	60fb      	str	r3, [r7, #12]
}
 80172b8:	bf00      	nop
 80172ba:	bf00      	nop
 80172bc:	e7fd      	b.n	80172ba <pvPortMalloc+0x182>
	return pvReturn;
 80172be:	69fb      	ldr	r3, [r7, #28]
}
 80172c0:	4618      	mov	r0, r3
 80172c2:	3728      	adds	r7, #40	@ 0x28
 80172c4:	46bd      	mov	sp, r7
 80172c6:	bd80      	pop	{r7, pc}
 80172c8:	20012c74 	.word	0x20012c74
 80172cc:	20012c80 	.word	0x20012c80
 80172d0:	20012c78 	.word	0x20012c78
 80172d4:	20012c6c 	.word	0x20012c6c
 80172d8:	20012c7c 	.word	0x20012c7c

080172dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80172dc:	b580      	push	{r7, lr}
 80172de:	b086      	sub	sp, #24
 80172e0:	af00      	add	r7, sp, #0
 80172e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d04e      	beq.n	801738c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80172ee:	2308      	movs	r3, #8
 80172f0:	425b      	negs	r3, r3
 80172f2:	697a      	ldr	r2, [r7, #20]
 80172f4:	4413      	add	r3, r2
 80172f6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80172f8:	697b      	ldr	r3, [r7, #20]
 80172fa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80172fc:	693b      	ldr	r3, [r7, #16]
 80172fe:	685a      	ldr	r2, [r3, #4]
 8017300:	4b24      	ldr	r3, [pc, #144]	@ (8017394 <vPortFree+0xb8>)
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	4013      	ands	r3, r2
 8017306:	2b00      	cmp	r3, #0
 8017308:	d10d      	bne.n	8017326 <vPortFree+0x4a>
	__asm volatile
 801730a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801730e:	b672      	cpsid	i
 8017310:	f383 8811 	msr	BASEPRI, r3
 8017314:	f3bf 8f6f 	isb	sy
 8017318:	f3bf 8f4f 	dsb	sy
 801731c:	b662      	cpsie	i
 801731e:	60fb      	str	r3, [r7, #12]
}
 8017320:	bf00      	nop
 8017322:	bf00      	nop
 8017324:	e7fd      	b.n	8017322 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017326:	693b      	ldr	r3, [r7, #16]
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	2b00      	cmp	r3, #0
 801732c:	d00d      	beq.n	801734a <vPortFree+0x6e>
	__asm volatile
 801732e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017332:	b672      	cpsid	i
 8017334:	f383 8811 	msr	BASEPRI, r3
 8017338:	f3bf 8f6f 	isb	sy
 801733c:	f3bf 8f4f 	dsb	sy
 8017340:	b662      	cpsie	i
 8017342:	60bb      	str	r3, [r7, #8]
}
 8017344:	bf00      	nop
 8017346:	bf00      	nop
 8017348:	e7fd      	b.n	8017346 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801734a:	693b      	ldr	r3, [r7, #16]
 801734c:	685a      	ldr	r2, [r3, #4]
 801734e:	4b11      	ldr	r3, [pc, #68]	@ (8017394 <vPortFree+0xb8>)
 8017350:	681b      	ldr	r3, [r3, #0]
 8017352:	4013      	ands	r3, r2
 8017354:	2b00      	cmp	r3, #0
 8017356:	d019      	beq.n	801738c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8017358:	693b      	ldr	r3, [r7, #16]
 801735a:	681b      	ldr	r3, [r3, #0]
 801735c:	2b00      	cmp	r3, #0
 801735e:	d115      	bne.n	801738c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017360:	693b      	ldr	r3, [r7, #16]
 8017362:	685a      	ldr	r2, [r3, #4]
 8017364:	4b0b      	ldr	r3, [pc, #44]	@ (8017394 <vPortFree+0xb8>)
 8017366:	681b      	ldr	r3, [r3, #0]
 8017368:	43db      	mvns	r3, r3
 801736a:	401a      	ands	r2, r3
 801736c:	693b      	ldr	r3, [r7, #16]
 801736e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017370:	f7fe ff96 	bl	80162a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017374:	693b      	ldr	r3, [r7, #16]
 8017376:	685a      	ldr	r2, [r3, #4]
 8017378:	4b07      	ldr	r3, [pc, #28]	@ (8017398 <vPortFree+0xbc>)
 801737a:	681b      	ldr	r3, [r3, #0]
 801737c:	4413      	add	r3, r2
 801737e:	4a06      	ldr	r2, [pc, #24]	@ (8017398 <vPortFree+0xbc>)
 8017380:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017382:	6938      	ldr	r0, [r7, #16]
 8017384:	f000 f86c 	bl	8017460 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8017388:	f7fe ff98 	bl	80162bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801738c:	bf00      	nop
 801738e:	3718      	adds	r7, #24
 8017390:	46bd      	mov	sp, r7
 8017392:	bd80      	pop	{r7, pc}
 8017394:	20012c80 	.word	0x20012c80
 8017398:	20012c78 	.word	0x20012c78

0801739c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801739c:	b480      	push	{r7}
 801739e:	b085      	sub	sp, #20
 80173a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80173a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80173a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80173a8:	4b27      	ldr	r3, [pc, #156]	@ (8017448 <prvHeapInit+0xac>)
 80173aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	f003 0307 	and.w	r3, r3, #7
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d00c      	beq.n	80173d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80173b6:	68fb      	ldr	r3, [r7, #12]
 80173b8:	3307      	adds	r3, #7
 80173ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	f023 0307 	bic.w	r3, r3, #7
 80173c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80173c4:	68ba      	ldr	r2, [r7, #8]
 80173c6:	68fb      	ldr	r3, [r7, #12]
 80173c8:	1ad3      	subs	r3, r2, r3
 80173ca:	4a1f      	ldr	r2, [pc, #124]	@ (8017448 <prvHeapInit+0xac>)
 80173cc:	4413      	add	r3, r2
 80173ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80173d4:	4a1d      	ldr	r2, [pc, #116]	@ (801744c <prvHeapInit+0xb0>)
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80173da:	4b1c      	ldr	r3, [pc, #112]	@ (801744c <prvHeapInit+0xb0>)
 80173dc:	2200      	movs	r2, #0
 80173de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	68ba      	ldr	r2, [r7, #8]
 80173e4:	4413      	add	r3, r2
 80173e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80173e8:	2208      	movs	r2, #8
 80173ea:	68fb      	ldr	r3, [r7, #12]
 80173ec:	1a9b      	subs	r3, r3, r2
 80173ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	f023 0307 	bic.w	r3, r3, #7
 80173f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	4a15      	ldr	r2, [pc, #84]	@ (8017450 <prvHeapInit+0xb4>)
 80173fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80173fe:	4b14      	ldr	r3, [pc, #80]	@ (8017450 <prvHeapInit+0xb4>)
 8017400:	681b      	ldr	r3, [r3, #0]
 8017402:	2200      	movs	r2, #0
 8017404:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8017406:	4b12      	ldr	r3, [pc, #72]	@ (8017450 <prvHeapInit+0xb4>)
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	2200      	movs	r2, #0
 801740c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017412:	683b      	ldr	r3, [r7, #0]
 8017414:	68fa      	ldr	r2, [r7, #12]
 8017416:	1ad2      	subs	r2, r2, r3
 8017418:	683b      	ldr	r3, [r7, #0]
 801741a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801741c:	4b0c      	ldr	r3, [pc, #48]	@ (8017450 <prvHeapInit+0xb4>)
 801741e:	681a      	ldr	r2, [r3, #0]
 8017420:	683b      	ldr	r3, [r7, #0]
 8017422:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017424:	683b      	ldr	r3, [r7, #0]
 8017426:	685b      	ldr	r3, [r3, #4]
 8017428:	4a0a      	ldr	r2, [pc, #40]	@ (8017454 <prvHeapInit+0xb8>)
 801742a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801742c:	683b      	ldr	r3, [r7, #0]
 801742e:	685b      	ldr	r3, [r3, #4]
 8017430:	4a09      	ldr	r2, [pc, #36]	@ (8017458 <prvHeapInit+0xbc>)
 8017432:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017434:	4b09      	ldr	r3, [pc, #36]	@ (801745c <prvHeapInit+0xc0>)
 8017436:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801743a:	601a      	str	r2, [r3, #0]
}
 801743c:	bf00      	nop
 801743e:	3714      	adds	r7, #20
 8017440:	46bd      	mov	sp, r7
 8017442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017446:	4770      	bx	lr
 8017448:	20002c6c 	.word	0x20002c6c
 801744c:	20012c6c 	.word	0x20012c6c
 8017450:	20012c74 	.word	0x20012c74
 8017454:	20012c7c 	.word	0x20012c7c
 8017458:	20012c78 	.word	0x20012c78
 801745c:	20012c80 	.word	0x20012c80

08017460 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017460:	b480      	push	{r7}
 8017462:	b085      	sub	sp, #20
 8017464:	af00      	add	r7, sp, #0
 8017466:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017468:	4b28      	ldr	r3, [pc, #160]	@ (801750c <prvInsertBlockIntoFreeList+0xac>)
 801746a:	60fb      	str	r3, [r7, #12]
 801746c:	e002      	b.n	8017474 <prvInsertBlockIntoFreeList+0x14>
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	681b      	ldr	r3, [r3, #0]
 8017472:	60fb      	str	r3, [r7, #12]
 8017474:	68fb      	ldr	r3, [r7, #12]
 8017476:	681b      	ldr	r3, [r3, #0]
 8017478:	687a      	ldr	r2, [r7, #4]
 801747a:	429a      	cmp	r2, r3
 801747c:	d8f7      	bhi.n	801746e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	685b      	ldr	r3, [r3, #4]
 8017486:	68ba      	ldr	r2, [r7, #8]
 8017488:	4413      	add	r3, r2
 801748a:	687a      	ldr	r2, [r7, #4]
 801748c:	429a      	cmp	r2, r3
 801748e:	d108      	bne.n	80174a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	685a      	ldr	r2, [r3, #4]
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	685b      	ldr	r3, [r3, #4]
 8017498:	441a      	add	r2, r3
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	685b      	ldr	r3, [r3, #4]
 80174aa:	68ba      	ldr	r2, [r7, #8]
 80174ac:	441a      	add	r2, r3
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	681b      	ldr	r3, [r3, #0]
 80174b2:	429a      	cmp	r2, r3
 80174b4:	d118      	bne.n	80174e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80174b6:	68fb      	ldr	r3, [r7, #12]
 80174b8:	681a      	ldr	r2, [r3, #0]
 80174ba:	4b15      	ldr	r3, [pc, #84]	@ (8017510 <prvInsertBlockIntoFreeList+0xb0>)
 80174bc:	681b      	ldr	r3, [r3, #0]
 80174be:	429a      	cmp	r2, r3
 80174c0:	d00d      	beq.n	80174de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	685a      	ldr	r2, [r3, #4]
 80174c6:	68fb      	ldr	r3, [r7, #12]
 80174c8:	681b      	ldr	r3, [r3, #0]
 80174ca:	685b      	ldr	r3, [r3, #4]
 80174cc:	441a      	add	r2, r3
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	681b      	ldr	r3, [r3, #0]
 80174d6:	681a      	ldr	r2, [r3, #0]
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	601a      	str	r2, [r3, #0]
 80174dc:	e008      	b.n	80174f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80174de:	4b0c      	ldr	r3, [pc, #48]	@ (8017510 <prvInsertBlockIntoFreeList+0xb0>)
 80174e0:	681a      	ldr	r2, [r3, #0]
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	601a      	str	r2, [r3, #0]
 80174e6:	e003      	b.n	80174f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80174e8:	68fb      	ldr	r3, [r7, #12]
 80174ea:	681a      	ldr	r2, [r3, #0]
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80174f0:	68fa      	ldr	r2, [r7, #12]
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	429a      	cmp	r2, r3
 80174f6:	d002      	beq.n	80174fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	687a      	ldr	r2, [r7, #4]
 80174fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80174fe:	bf00      	nop
 8017500:	3714      	adds	r7, #20
 8017502:	46bd      	mov	sp, r7
 8017504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017508:	4770      	bx	lr
 801750a:	bf00      	nop
 801750c:	20012c6c 	.word	0x20012c6c
 8017510:	20012c74 	.word	0x20012c74

08017514 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8017514:	b580      	push	{r7, lr}
 8017516:	b082      	sub	sp, #8
 8017518:	af00      	add	r7, sp, #0
 801751a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8017522:	4618      	mov	r0, r3
 8017524:	f7fa fe38 	bl	8012198 <USBH_LL_IncTimer>
}
 8017528:	bf00      	nop
 801752a:	3708      	adds	r7, #8
 801752c:	46bd      	mov	sp, r7
 801752e:	bd80      	pop	{r7, pc}

08017530 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8017530:	b580      	push	{r7, lr}
 8017532:	b082      	sub	sp, #8
 8017534:	af00      	add	r7, sp, #0
 8017536:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801753e:	4618      	mov	r0, r3
 8017540:	f7fa fe78 	bl	8012234 <USBH_LL_Connect>
}
 8017544:	bf00      	nop
 8017546:	3708      	adds	r7, #8
 8017548:	46bd      	mov	sp, r7
 801754a:	bd80      	pop	{r7, pc}

0801754c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801754c:	b580      	push	{r7, lr}
 801754e:	b082      	sub	sp, #8
 8017550:	af00      	add	r7, sp, #0
 8017552:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801755a:	4618      	mov	r0, r3
 801755c:	f7fa fe85 	bl	801226a <USBH_LL_Disconnect>
}
 8017560:	bf00      	nop
 8017562:	3708      	adds	r7, #8
 8017564:	46bd      	mov	sp, r7
 8017566:	bd80      	pop	{r7, pc}

08017568 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8017568:	b580      	push	{r7, lr}
 801756a:	b082      	sub	sp, #8
 801756c:	af00      	add	r7, sp, #0
 801756e:	6078      	str	r0, [r7, #4]
 8017570:	460b      	mov	r3, r1
 8017572:	70fb      	strb	r3, [r7, #3]
 8017574:	4613      	mov	r3, r2
 8017576:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801757e:	4618      	mov	r0, r3
 8017580:	f7fa fec4 	bl	801230c <USBH_LL_NotifyURBChange>
#endif
}
 8017584:	bf00      	nop
 8017586:	3708      	adds	r7, #8
 8017588:	46bd      	mov	sp, r7
 801758a:	bd80      	pop	{r7, pc}

0801758c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801758c:	b580      	push	{r7, lr}
 801758e:	b082      	sub	sp, #8
 8017590:	af00      	add	r7, sp, #0
 8017592:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801759a:	4618      	mov	r0, r3
 801759c:	f7fa fe26 	bl	80121ec <USBH_LL_PortEnabled>
}
 80175a0:	bf00      	nop
 80175a2:	3708      	adds	r7, #8
 80175a4:	46bd      	mov	sp, r7
 80175a6:	bd80      	pop	{r7, pc}

080175a8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80175a8:	b580      	push	{r7, lr}
 80175aa:	b082      	sub	sp, #8
 80175ac:	af00      	add	r7, sp, #0
 80175ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80175b6:	4618      	mov	r0, r3
 80175b8:	f7fa fe2a 	bl	8012210 <USBH_LL_PortDisabled>
}
 80175bc:	bf00      	nop
 80175be:	3708      	adds	r7, #8
 80175c0:	46bd      	mov	sp, r7
 80175c2:	bd80      	pop	{r7, pc}

080175c4 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80175c4:	b580      	push	{r7, lr}
 80175c6:	b084      	sub	sp, #16
 80175c8:	af00      	add	r7, sp, #0
 80175ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80175cc:	2300      	movs	r3, #0
 80175ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80175d0:	2300      	movs	r3, #0
 80175d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80175da:	4618      	mov	r0, r3
 80175dc:	f7f1 f86f 	bl	80086be <HAL_HCD_Stop>
 80175e0:	4603      	mov	r3, r0
 80175e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80175e4:	7bfb      	ldrb	r3, [r7, #15]
 80175e6:	4618      	mov	r0, r3
 80175e8:	f000 f808 	bl	80175fc <USBH_Get_USB_Status>
 80175ec:	4603      	mov	r3, r0
 80175ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80175f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80175f2:	4618      	mov	r0, r3
 80175f4:	3710      	adds	r7, #16
 80175f6:	46bd      	mov	sp, r7
 80175f8:	bd80      	pop	{r7, pc}
	...

080175fc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80175fc:	b480      	push	{r7}
 80175fe:	b085      	sub	sp, #20
 8017600:	af00      	add	r7, sp, #0
 8017602:	4603      	mov	r3, r0
 8017604:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017606:	2300      	movs	r3, #0
 8017608:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801760a:	79fb      	ldrb	r3, [r7, #7]
 801760c:	2b03      	cmp	r3, #3
 801760e:	d817      	bhi.n	8017640 <USBH_Get_USB_Status+0x44>
 8017610:	a201      	add	r2, pc, #4	@ (adr r2, 8017618 <USBH_Get_USB_Status+0x1c>)
 8017612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017616:	bf00      	nop
 8017618:	08017629 	.word	0x08017629
 801761c:	0801762f 	.word	0x0801762f
 8017620:	08017635 	.word	0x08017635
 8017624:	0801763b 	.word	0x0801763b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8017628:	2300      	movs	r3, #0
 801762a:	73fb      	strb	r3, [r7, #15]
    break;
 801762c:	e00b      	b.n	8017646 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801762e:	2302      	movs	r3, #2
 8017630:	73fb      	strb	r3, [r7, #15]
    break;
 8017632:	e008      	b.n	8017646 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8017634:	2301      	movs	r3, #1
 8017636:	73fb      	strb	r3, [r7, #15]
    break;
 8017638:	e005      	b.n	8017646 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801763a:	2302      	movs	r3, #2
 801763c:	73fb      	strb	r3, [r7, #15]
    break;
 801763e:	e002      	b.n	8017646 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8017640:	2302      	movs	r3, #2
 8017642:	73fb      	strb	r3, [r7, #15]
    break;
 8017644:	bf00      	nop
  }
  return usb_status;
 8017646:	7bfb      	ldrb	r3, [r7, #15]
}
 8017648:	4618      	mov	r0, r3
 801764a:	3714      	adds	r7, #20
 801764c:	46bd      	mov	sp, r7
 801764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017652:	4770      	bx	lr

08017654 <sbrk_aligned>:
 8017654:	b570      	push	{r4, r5, r6, lr}
 8017656:	4e0f      	ldr	r6, [pc, #60]	@ (8017694 <sbrk_aligned+0x40>)
 8017658:	460c      	mov	r4, r1
 801765a:	6831      	ldr	r1, [r6, #0]
 801765c:	4605      	mov	r5, r0
 801765e:	b911      	cbnz	r1, 8017666 <sbrk_aligned+0x12>
 8017660:	f000 fac4 	bl	8017bec <_sbrk_r>
 8017664:	6030      	str	r0, [r6, #0]
 8017666:	4621      	mov	r1, r4
 8017668:	4628      	mov	r0, r5
 801766a:	f000 fabf 	bl	8017bec <_sbrk_r>
 801766e:	1c43      	adds	r3, r0, #1
 8017670:	d103      	bne.n	801767a <sbrk_aligned+0x26>
 8017672:	f04f 34ff 	mov.w	r4, #4294967295
 8017676:	4620      	mov	r0, r4
 8017678:	bd70      	pop	{r4, r5, r6, pc}
 801767a:	1cc4      	adds	r4, r0, #3
 801767c:	f024 0403 	bic.w	r4, r4, #3
 8017680:	42a0      	cmp	r0, r4
 8017682:	d0f8      	beq.n	8017676 <sbrk_aligned+0x22>
 8017684:	1a21      	subs	r1, r4, r0
 8017686:	4628      	mov	r0, r5
 8017688:	f000 fab0 	bl	8017bec <_sbrk_r>
 801768c:	3001      	adds	r0, #1
 801768e:	d1f2      	bne.n	8017676 <sbrk_aligned+0x22>
 8017690:	e7ef      	b.n	8017672 <sbrk_aligned+0x1e>
 8017692:	bf00      	nop
 8017694:	20013064 	.word	0x20013064

08017698 <_malloc_r>:
 8017698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801769c:	1ccd      	adds	r5, r1, #3
 801769e:	f025 0503 	bic.w	r5, r5, #3
 80176a2:	3508      	adds	r5, #8
 80176a4:	2d0c      	cmp	r5, #12
 80176a6:	bf38      	it	cc
 80176a8:	250c      	movcc	r5, #12
 80176aa:	2d00      	cmp	r5, #0
 80176ac:	4606      	mov	r6, r0
 80176ae:	db01      	blt.n	80176b4 <_malloc_r+0x1c>
 80176b0:	42a9      	cmp	r1, r5
 80176b2:	d904      	bls.n	80176be <_malloc_r+0x26>
 80176b4:	230c      	movs	r3, #12
 80176b6:	6033      	str	r3, [r6, #0]
 80176b8:	2000      	movs	r0, #0
 80176ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80176be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017794 <_malloc_r+0xfc>
 80176c2:	f000 f869 	bl	8017798 <__malloc_lock>
 80176c6:	f8d8 3000 	ldr.w	r3, [r8]
 80176ca:	461c      	mov	r4, r3
 80176cc:	bb44      	cbnz	r4, 8017720 <_malloc_r+0x88>
 80176ce:	4629      	mov	r1, r5
 80176d0:	4630      	mov	r0, r6
 80176d2:	f7ff ffbf 	bl	8017654 <sbrk_aligned>
 80176d6:	1c43      	adds	r3, r0, #1
 80176d8:	4604      	mov	r4, r0
 80176da:	d158      	bne.n	801778e <_malloc_r+0xf6>
 80176dc:	f8d8 4000 	ldr.w	r4, [r8]
 80176e0:	4627      	mov	r7, r4
 80176e2:	2f00      	cmp	r7, #0
 80176e4:	d143      	bne.n	801776e <_malloc_r+0xd6>
 80176e6:	2c00      	cmp	r4, #0
 80176e8:	d04b      	beq.n	8017782 <_malloc_r+0xea>
 80176ea:	6823      	ldr	r3, [r4, #0]
 80176ec:	4639      	mov	r1, r7
 80176ee:	4630      	mov	r0, r6
 80176f0:	eb04 0903 	add.w	r9, r4, r3
 80176f4:	f000 fa7a 	bl	8017bec <_sbrk_r>
 80176f8:	4581      	cmp	r9, r0
 80176fa:	d142      	bne.n	8017782 <_malloc_r+0xea>
 80176fc:	6821      	ldr	r1, [r4, #0]
 80176fe:	1a6d      	subs	r5, r5, r1
 8017700:	4629      	mov	r1, r5
 8017702:	4630      	mov	r0, r6
 8017704:	f7ff ffa6 	bl	8017654 <sbrk_aligned>
 8017708:	3001      	adds	r0, #1
 801770a:	d03a      	beq.n	8017782 <_malloc_r+0xea>
 801770c:	6823      	ldr	r3, [r4, #0]
 801770e:	442b      	add	r3, r5
 8017710:	6023      	str	r3, [r4, #0]
 8017712:	f8d8 3000 	ldr.w	r3, [r8]
 8017716:	685a      	ldr	r2, [r3, #4]
 8017718:	bb62      	cbnz	r2, 8017774 <_malloc_r+0xdc>
 801771a:	f8c8 7000 	str.w	r7, [r8]
 801771e:	e00f      	b.n	8017740 <_malloc_r+0xa8>
 8017720:	6822      	ldr	r2, [r4, #0]
 8017722:	1b52      	subs	r2, r2, r5
 8017724:	d420      	bmi.n	8017768 <_malloc_r+0xd0>
 8017726:	2a0b      	cmp	r2, #11
 8017728:	d917      	bls.n	801775a <_malloc_r+0xc2>
 801772a:	1961      	adds	r1, r4, r5
 801772c:	42a3      	cmp	r3, r4
 801772e:	6025      	str	r5, [r4, #0]
 8017730:	bf18      	it	ne
 8017732:	6059      	strne	r1, [r3, #4]
 8017734:	6863      	ldr	r3, [r4, #4]
 8017736:	bf08      	it	eq
 8017738:	f8c8 1000 	streq.w	r1, [r8]
 801773c:	5162      	str	r2, [r4, r5]
 801773e:	604b      	str	r3, [r1, #4]
 8017740:	4630      	mov	r0, r6
 8017742:	f000 f82f 	bl	80177a4 <__malloc_unlock>
 8017746:	f104 000b 	add.w	r0, r4, #11
 801774a:	1d23      	adds	r3, r4, #4
 801774c:	f020 0007 	bic.w	r0, r0, #7
 8017750:	1ac2      	subs	r2, r0, r3
 8017752:	bf1c      	itt	ne
 8017754:	1a1b      	subne	r3, r3, r0
 8017756:	50a3      	strne	r3, [r4, r2]
 8017758:	e7af      	b.n	80176ba <_malloc_r+0x22>
 801775a:	6862      	ldr	r2, [r4, #4]
 801775c:	42a3      	cmp	r3, r4
 801775e:	bf0c      	ite	eq
 8017760:	f8c8 2000 	streq.w	r2, [r8]
 8017764:	605a      	strne	r2, [r3, #4]
 8017766:	e7eb      	b.n	8017740 <_malloc_r+0xa8>
 8017768:	4623      	mov	r3, r4
 801776a:	6864      	ldr	r4, [r4, #4]
 801776c:	e7ae      	b.n	80176cc <_malloc_r+0x34>
 801776e:	463c      	mov	r4, r7
 8017770:	687f      	ldr	r7, [r7, #4]
 8017772:	e7b6      	b.n	80176e2 <_malloc_r+0x4a>
 8017774:	461a      	mov	r2, r3
 8017776:	685b      	ldr	r3, [r3, #4]
 8017778:	42a3      	cmp	r3, r4
 801777a:	d1fb      	bne.n	8017774 <_malloc_r+0xdc>
 801777c:	2300      	movs	r3, #0
 801777e:	6053      	str	r3, [r2, #4]
 8017780:	e7de      	b.n	8017740 <_malloc_r+0xa8>
 8017782:	230c      	movs	r3, #12
 8017784:	6033      	str	r3, [r6, #0]
 8017786:	4630      	mov	r0, r6
 8017788:	f000 f80c 	bl	80177a4 <__malloc_unlock>
 801778c:	e794      	b.n	80176b8 <_malloc_r+0x20>
 801778e:	6005      	str	r5, [r0, #0]
 8017790:	e7d6      	b.n	8017740 <_malloc_r+0xa8>
 8017792:	bf00      	nop
 8017794:	20013068 	.word	0x20013068

08017798 <__malloc_lock>:
 8017798:	4801      	ldr	r0, [pc, #4]	@ (80177a0 <__malloc_lock+0x8>)
 801779a:	f000 ba74 	b.w	8017c86 <__retarget_lock_acquire_recursive>
 801779e:	bf00      	nop
 80177a0:	200131ac 	.word	0x200131ac

080177a4 <__malloc_unlock>:
 80177a4:	4801      	ldr	r0, [pc, #4]	@ (80177ac <__malloc_unlock+0x8>)
 80177a6:	f000 ba6f 	b.w	8017c88 <__retarget_lock_release_recursive>
 80177aa:	bf00      	nop
 80177ac:	200131ac 	.word	0x200131ac

080177b0 <std>:
 80177b0:	2300      	movs	r3, #0
 80177b2:	b510      	push	{r4, lr}
 80177b4:	4604      	mov	r4, r0
 80177b6:	e9c0 3300 	strd	r3, r3, [r0]
 80177ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80177be:	6083      	str	r3, [r0, #8]
 80177c0:	8181      	strh	r1, [r0, #12]
 80177c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80177c4:	81c2      	strh	r2, [r0, #14]
 80177c6:	6183      	str	r3, [r0, #24]
 80177c8:	4619      	mov	r1, r3
 80177ca:	2208      	movs	r2, #8
 80177cc:	305c      	adds	r0, #92	@ 0x5c
 80177ce:	f000 f99b 	bl	8017b08 <memset>
 80177d2:	4b0d      	ldr	r3, [pc, #52]	@ (8017808 <std+0x58>)
 80177d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80177d6:	4b0d      	ldr	r3, [pc, #52]	@ (801780c <std+0x5c>)
 80177d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80177da:	4b0d      	ldr	r3, [pc, #52]	@ (8017810 <std+0x60>)
 80177dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80177de:	4b0d      	ldr	r3, [pc, #52]	@ (8017814 <std+0x64>)
 80177e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80177e2:	4b0d      	ldr	r3, [pc, #52]	@ (8017818 <std+0x68>)
 80177e4:	6224      	str	r4, [r4, #32]
 80177e6:	429c      	cmp	r4, r3
 80177e8:	d006      	beq.n	80177f8 <std+0x48>
 80177ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80177ee:	4294      	cmp	r4, r2
 80177f0:	d002      	beq.n	80177f8 <std+0x48>
 80177f2:	33d0      	adds	r3, #208	@ 0xd0
 80177f4:	429c      	cmp	r4, r3
 80177f6:	d105      	bne.n	8017804 <std+0x54>
 80177f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80177fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017800:	f000 ba40 	b.w	8017c84 <__retarget_lock_init_recursive>
 8017804:	bd10      	pop	{r4, pc}
 8017806:	bf00      	nop
 8017808:	08017a09 	.word	0x08017a09
 801780c:	08017a2b 	.word	0x08017a2b
 8017810:	08017a63 	.word	0x08017a63
 8017814:	08017a87 	.word	0x08017a87
 8017818:	2001306c 	.word	0x2001306c

0801781c <stdio_exit_handler>:
 801781c:	4a02      	ldr	r2, [pc, #8]	@ (8017828 <stdio_exit_handler+0xc>)
 801781e:	4903      	ldr	r1, [pc, #12]	@ (801782c <stdio_exit_handler+0x10>)
 8017820:	4803      	ldr	r0, [pc, #12]	@ (8017830 <stdio_exit_handler+0x14>)
 8017822:	f000 b869 	b.w	80178f8 <_fwalk_sglue>
 8017826:	bf00      	nop
 8017828:	20000078 	.word	0x20000078
 801782c:	08018691 	.word	0x08018691
 8017830:	20000088 	.word	0x20000088

08017834 <cleanup_stdio>:
 8017834:	6841      	ldr	r1, [r0, #4]
 8017836:	4b0c      	ldr	r3, [pc, #48]	@ (8017868 <cleanup_stdio+0x34>)
 8017838:	4299      	cmp	r1, r3
 801783a:	b510      	push	{r4, lr}
 801783c:	4604      	mov	r4, r0
 801783e:	d001      	beq.n	8017844 <cleanup_stdio+0x10>
 8017840:	f000 ff26 	bl	8018690 <_fflush_r>
 8017844:	68a1      	ldr	r1, [r4, #8]
 8017846:	4b09      	ldr	r3, [pc, #36]	@ (801786c <cleanup_stdio+0x38>)
 8017848:	4299      	cmp	r1, r3
 801784a:	d002      	beq.n	8017852 <cleanup_stdio+0x1e>
 801784c:	4620      	mov	r0, r4
 801784e:	f000 ff1f 	bl	8018690 <_fflush_r>
 8017852:	68e1      	ldr	r1, [r4, #12]
 8017854:	4b06      	ldr	r3, [pc, #24]	@ (8017870 <cleanup_stdio+0x3c>)
 8017856:	4299      	cmp	r1, r3
 8017858:	d004      	beq.n	8017864 <cleanup_stdio+0x30>
 801785a:	4620      	mov	r0, r4
 801785c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017860:	f000 bf16 	b.w	8018690 <_fflush_r>
 8017864:	bd10      	pop	{r4, pc}
 8017866:	bf00      	nop
 8017868:	2001306c 	.word	0x2001306c
 801786c:	200130d4 	.word	0x200130d4
 8017870:	2001313c 	.word	0x2001313c

08017874 <global_stdio_init.part.0>:
 8017874:	b510      	push	{r4, lr}
 8017876:	4b0b      	ldr	r3, [pc, #44]	@ (80178a4 <global_stdio_init.part.0+0x30>)
 8017878:	4c0b      	ldr	r4, [pc, #44]	@ (80178a8 <global_stdio_init.part.0+0x34>)
 801787a:	4a0c      	ldr	r2, [pc, #48]	@ (80178ac <global_stdio_init.part.0+0x38>)
 801787c:	601a      	str	r2, [r3, #0]
 801787e:	4620      	mov	r0, r4
 8017880:	2200      	movs	r2, #0
 8017882:	2104      	movs	r1, #4
 8017884:	f7ff ff94 	bl	80177b0 <std>
 8017888:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801788c:	2201      	movs	r2, #1
 801788e:	2109      	movs	r1, #9
 8017890:	f7ff ff8e 	bl	80177b0 <std>
 8017894:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017898:	2202      	movs	r2, #2
 801789a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801789e:	2112      	movs	r1, #18
 80178a0:	f7ff bf86 	b.w	80177b0 <std>
 80178a4:	200131a4 	.word	0x200131a4
 80178a8:	2001306c 	.word	0x2001306c
 80178ac:	0801781d 	.word	0x0801781d

080178b0 <__sfp_lock_acquire>:
 80178b0:	4801      	ldr	r0, [pc, #4]	@ (80178b8 <__sfp_lock_acquire+0x8>)
 80178b2:	f000 b9e8 	b.w	8017c86 <__retarget_lock_acquire_recursive>
 80178b6:	bf00      	nop
 80178b8:	200131ad 	.word	0x200131ad

080178bc <__sfp_lock_release>:
 80178bc:	4801      	ldr	r0, [pc, #4]	@ (80178c4 <__sfp_lock_release+0x8>)
 80178be:	f000 b9e3 	b.w	8017c88 <__retarget_lock_release_recursive>
 80178c2:	bf00      	nop
 80178c4:	200131ad 	.word	0x200131ad

080178c8 <__sinit>:
 80178c8:	b510      	push	{r4, lr}
 80178ca:	4604      	mov	r4, r0
 80178cc:	f7ff fff0 	bl	80178b0 <__sfp_lock_acquire>
 80178d0:	6a23      	ldr	r3, [r4, #32]
 80178d2:	b11b      	cbz	r3, 80178dc <__sinit+0x14>
 80178d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178d8:	f7ff bff0 	b.w	80178bc <__sfp_lock_release>
 80178dc:	4b04      	ldr	r3, [pc, #16]	@ (80178f0 <__sinit+0x28>)
 80178de:	6223      	str	r3, [r4, #32]
 80178e0:	4b04      	ldr	r3, [pc, #16]	@ (80178f4 <__sinit+0x2c>)
 80178e2:	681b      	ldr	r3, [r3, #0]
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d1f5      	bne.n	80178d4 <__sinit+0xc>
 80178e8:	f7ff ffc4 	bl	8017874 <global_stdio_init.part.0>
 80178ec:	e7f2      	b.n	80178d4 <__sinit+0xc>
 80178ee:	bf00      	nop
 80178f0:	08017835 	.word	0x08017835
 80178f4:	200131a4 	.word	0x200131a4

080178f8 <_fwalk_sglue>:
 80178f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80178fc:	4607      	mov	r7, r0
 80178fe:	4688      	mov	r8, r1
 8017900:	4614      	mov	r4, r2
 8017902:	2600      	movs	r6, #0
 8017904:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017908:	f1b9 0901 	subs.w	r9, r9, #1
 801790c:	d505      	bpl.n	801791a <_fwalk_sglue+0x22>
 801790e:	6824      	ldr	r4, [r4, #0]
 8017910:	2c00      	cmp	r4, #0
 8017912:	d1f7      	bne.n	8017904 <_fwalk_sglue+0xc>
 8017914:	4630      	mov	r0, r6
 8017916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801791a:	89ab      	ldrh	r3, [r5, #12]
 801791c:	2b01      	cmp	r3, #1
 801791e:	d907      	bls.n	8017930 <_fwalk_sglue+0x38>
 8017920:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017924:	3301      	adds	r3, #1
 8017926:	d003      	beq.n	8017930 <_fwalk_sglue+0x38>
 8017928:	4629      	mov	r1, r5
 801792a:	4638      	mov	r0, r7
 801792c:	47c0      	blx	r8
 801792e:	4306      	orrs	r6, r0
 8017930:	3568      	adds	r5, #104	@ 0x68
 8017932:	e7e9      	b.n	8017908 <_fwalk_sglue+0x10>

08017934 <iprintf>:
 8017934:	b40f      	push	{r0, r1, r2, r3}
 8017936:	b507      	push	{r0, r1, r2, lr}
 8017938:	4906      	ldr	r1, [pc, #24]	@ (8017954 <iprintf+0x20>)
 801793a:	ab04      	add	r3, sp, #16
 801793c:	6808      	ldr	r0, [r1, #0]
 801793e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017942:	6881      	ldr	r1, [r0, #8]
 8017944:	9301      	str	r3, [sp, #4]
 8017946:	f000 fb7b 	bl	8018040 <_vfiprintf_r>
 801794a:	b003      	add	sp, #12
 801794c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017950:	b004      	add	sp, #16
 8017952:	4770      	bx	lr
 8017954:	20000084 	.word	0x20000084

08017958 <sniprintf>:
 8017958:	b40c      	push	{r2, r3}
 801795a:	b530      	push	{r4, r5, lr}
 801795c:	4b18      	ldr	r3, [pc, #96]	@ (80179c0 <sniprintf+0x68>)
 801795e:	1e0c      	subs	r4, r1, #0
 8017960:	681d      	ldr	r5, [r3, #0]
 8017962:	b09d      	sub	sp, #116	@ 0x74
 8017964:	da08      	bge.n	8017978 <sniprintf+0x20>
 8017966:	238b      	movs	r3, #139	@ 0x8b
 8017968:	602b      	str	r3, [r5, #0]
 801796a:	f04f 30ff 	mov.w	r0, #4294967295
 801796e:	b01d      	add	sp, #116	@ 0x74
 8017970:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017974:	b002      	add	sp, #8
 8017976:	4770      	bx	lr
 8017978:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801797c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017980:	f04f 0300 	mov.w	r3, #0
 8017984:	931b      	str	r3, [sp, #108]	@ 0x6c
 8017986:	bf14      	ite	ne
 8017988:	f104 33ff 	addne.w	r3, r4, #4294967295
 801798c:	4623      	moveq	r3, r4
 801798e:	9304      	str	r3, [sp, #16]
 8017990:	9307      	str	r3, [sp, #28]
 8017992:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017996:	9002      	str	r0, [sp, #8]
 8017998:	9006      	str	r0, [sp, #24]
 801799a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801799e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80179a0:	ab21      	add	r3, sp, #132	@ 0x84
 80179a2:	a902      	add	r1, sp, #8
 80179a4:	4628      	mov	r0, r5
 80179a6:	9301      	str	r3, [sp, #4]
 80179a8:	f000 fa24 	bl	8017df4 <_svfiprintf_r>
 80179ac:	1c43      	adds	r3, r0, #1
 80179ae:	bfbc      	itt	lt
 80179b0:	238b      	movlt	r3, #139	@ 0x8b
 80179b2:	602b      	strlt	r3, [r5, #0]
 80179b4:	2c00      	cmp	r4, #0
 80179b6:	d0da      	beq.n	801796e <sniprintf+0x16>
 80179b8:	9b02      	ldr	r3, [sp, #8]
 80179ba:	2200      	movs	r2, #0
 80179bc:	701a      	strb	r2, [r3, #0]
 80179be:	e7d6      	b.n	801796e <sniprintf+0x16>
 80179c0:	20000084 	.word	0x20000084

080179c4 <siprintf>:
 80179c4:	b40e      	push	{r1, r2, r3}
 80179c6:	b510      	push	{r4, lr}
 80179c8:	b09d      	sub	sp, #116	@ 0x74
 80179ca:	ab1f      	add	r3, sp, #124	@ 0x7c
 80179cc:	9002      	str	r0, [sp, #8]
 80179ce:	9006      	str	r0, [sp, #24]
 80179d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80179d4:	480a      	ldr	r0, [pc, #40]	@ (8017a00 <siprintf+0x3c>)
 80179d6:	9107      	str	r1, [sp, #28]
 80179d8:	9104      	str	r1, [sp, #16]
 80179da:	490a      	ldr	r1, [pc, #40]	@ (8017a04 <siprintf+0x40>)
 80179dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80179e0:	9105      	str	r1, [sp, #20]
 80179e2:	2400      	movs	r4, #0
 80179e4:	a902      	add	r1, sp, #8
 80179e6:	6800      	ldr	r0, [r0, #0]
 80179e8:	9301      	str	r3, [sp, #4]
 80179ea:	941b      	str	r4, [sp, #108]	@ 0x6c
 80179ec:	f000 fa02 	bl	8017df4 <_svfiprintf_r>
 80179f0:	9b02      	ldr	r3, [sp, #8]
 80179f2:	701c      	strb	r4, [r3, #0]
 80179f4:	b01d      	add	sp, #116	@ 0x74
 80179f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80179fa:	b003      	add	sp, #12
 80179fc:	4770      	bx	lr
 80179fe:	bf00      	nop
 8017a00:	20000084 	.word	0x20000084
 8017a04:	ffff0208 	.word	0xffff0208

08017a08 <__sread>:
 8017a08:	b510      	push	{r4, lr}
 8017a0a:	460c      	mov	r4, r1
 8017a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a10:	f000 f8da 	bl	8017bc8 <_read_r>
 8017a14:	2800      	cmp	r0, #0
 8017a16:	bfab      	itete	ge
 8017a18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017a1a:	89a3      	ldrhlt	r3, [r4, #12]
 8017a1c:	181b      	addge	r3, r3, r0
 8017a1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017a22:	bfac      	ite	ge
 8017a24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017a26:	81a3      	strhlt	r3, [r4, #12]
 8017a28:	bd10      	pop	{r4, pc}

08017a2a <__swrite>:
 8017a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a2e:	461f      	mov	r7, r3
 8017a30:	898b      	ldrh	r3, [r1, #12]
 8017a32:	05db      	lsls	r3, r3, #23
 8017a34:	4605      	mov	r5, r0
 8017a36:	460c      	mov	r4, r1
 8017a38:	4616      	mov	r6, r2
 8017a3a:	d505      	bpl.n	8017a48 <__swrite+0x1e>
 8017a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a40:	2302      	movs	r3, #2
 8017a42:	2200      	movs	r2, #0
 8017a44:	f000 f8ae 	bl	8017ba4 <_lseek_r>
 8017a48:	89a3      	ldrh	r3, [r4, #12]
 8017a4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017a4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017a52:	81a3      	strh	r3, [r4, #12]
 8017a54:	4632      	mov	r2, r6
 8017a56:	463b      	mov	r3, r7
 8017a58:	4628      	mov	r0, r5
 8017a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017a5e:	f000 b8d5 	b.w	8017c0c <_write_r>

08017a62 <__sseek>:
 8017a62:	b510      	push	{r4, lr}
 8017a64:	460c      	mov	r4, r1
 8017a66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a6a:	f000 f89b 	bl	8017ba4 <_lseek_r>
 8017a6e:	1c43      	adds	r3, r0, #1
 8017a70:	89a3      	ldrh	r3, [r4, #12]
 8017a72:	bf15      	itete	ne
 8017a74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017a76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017a7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017a7e:	81a3      	strheq	r3, [r4, #12]
 8017a80:	bf18      	it	ne
 8017a82:	81a3      	strhne	r3, [r4, #12]
 8017a84:	bd10      	pop	{r4, pc}

08017a86 <__sclose>:
 8017a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a8a:	f000 b87b 	b.w	8017b84 <_close_r>

08017a8e <_vsniprintf_r>:
 8017a8e:	b530      	push	{r4, r5, lr}
 8017a90:	4614      	mov	r4, r2
 8017a92:	2c00      	cmp	r4, #0
 8017a94:	b09b      	sub	sp, #108	@ 0x6c
 8017a96:	4605      	mov	r5, r0
 8017a98:	461a      	mov	r2, r3
 8017a9a:	da05      	bge.n	8017aa8 <_vsniprintf_r+0x1a>
 8017a9c:	238b      	movs	r3, #139	@ 0x8b
 8017a9e:	6003      	str	r3, [r0, #0]
 8017aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8017aa4:	b01b      	add	sp, #108	@ 0x6c
 8017aa6:	bd30      	pop	{r4, r5, pc}
 8017aa8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017aac:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017ab0:	f04f 0300 	mov.w	r3, #0
 8017ab4:	9319      	str	r3, [sp, #100]	@ 0x64
 8017ab6:	bf14      	ite	ne
 8017ab8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017abc:	4623      	moveq	r3, r4
 8017abe:	9302      	str	r3, [sp, #8]
 8017ac0:	9305      	str	r3, [sp, #20]
 8017ac2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017ac6:	9100      	str	r1, [sp, #0]
 8017ac8:	9104      	str	r1, [sp, #16]
 8017aca:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017ace:	4669      	mov	r1, sp
 8017ad0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017ad2:	f000 f98f 	bl	8017df4 <_svfiprintf_r>
 8017ad6:	1c43      	adds	r3, r0, #1
 8017ad8:	bfbc      	itt	lt
 8017ada:	238b      	movlt	r3, #139	@ 0x8b
 8017adc:	602b      	strlt	r3, [r5, #0]
 8017ade:	2c00      	cmp	r4, #0
 8017ae0:	d0e0      	beq.n	8017aa4 <_vsniprintf_r+0x16>
 8017ae2:	9b00      	ldr	r3, [sp, #0]
 8017ae4:	2200      	movs	r2, #0
 8017ae6:	701a      	strb	r2, [r3, #0]
 8017ae8:	e7dc      	b.n	8017aa4 <_vsniprintf_r+0x16>
	...

08017aec <vsniprintf>:
 8017aec:	b507      	push	{r0, r1, r2, lr}
 8017aee:	9300      	str	r3, [sp, #0]
 8017af0:	4613      	mov	r3, r2
 8017af2:	460a      	mov	r2, r1
 8017af4:	4601      	mov	r1, r0
 8017af6:	4803      	ldr	r0, [pc, #12]	@ (8017b04 <vsniprintf+0x18>)
 8017af8:	6800      	ldr	r0, [r0, #0]
 8017afa:	f7ff ffc8 	bl	8017a8e <_vsniprintf_r>
 8017afe:	b003      	add	sp, #12
 8017b00:	f85d fb04 	ldr.w	pc, [sp], #4
 8017b04:	20000084 	.word	0x20000084

08017b08 <memset>:
 8017b08:	4402      	add	r2, r0
 8017b0a:	4603      	mov	r3, r0
 8017b0c:	4293      	cmp	r3, r2
 8017b0e:	d100      	bne.n	8017b12 <memset+0xa>
 8017b10:	4770      	bx	lr
 8017b12:	f803 1b01 	strb.w	r1, [r3], #1
 8017b16:	e7f9      	b.n	8017b0c <memset+0x4>

08017b18 <strchr>:
 8017b18:	b2c9      	uxtb	r1, r1
 8017b1a:	4603      	mov	r3, r0
 8017b1c:	4618      	mov	r0, r3
 8017b1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b22:	b112      	cbz	r2, 8017b2a <strchr+0x12>
 8017b24:	428a      	cmp	r2, r1
 8017b26:	d1f9      	bne.n	8017b1c <strchr+0x4>
 8017b28:	4770      	bx	lr
 8017b2a:	2900      	cmp	r1, #0
 8017b2c:	bf18      	it	ne
 8017b2e:	2000      	movne	r0, #0
 8017b30:	4770      	bx	lr

08017b32 <strncpy>:
 8017b32:	b510      	push	{r4, lr}
 8017b34:	3901      	subs	r1, #1
 8017b36:	4603      	mov	r3, r0
 8017b38:	b132      	cbz	r2, 8017b48 <strncpy+0x16>
 8017b3a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017b3e:	f803 4b01 	strb.w	r4, [r3], #1
 8017b42:	3a01      	subs	r2, #1
 8017b44:	2c00      	cmp	r4, #0
 8017b46:	d1f7      	bne.n	8017b38 <strncpy+0x6>
 8017b48:	441a      	add	r2, r3
 8017b4a:	2100      	movs	r1, #0
 8017b4c:	4293      	cmp	r3, r2
 8017b4e:	d100      	bne.n	8017b52 <strncpy+0x20>
 8017b50:	bd10      	pop	{r4, pc}
 8017b52:	f803 1b01 	strb.w	r1, [r3], #1
 8017b56:	e7f9      	b.n	8017b4c <strncpy+0x1a>

08017b58 <strstr>:
 8017b58:	780a      	ldrb	r2, [r1, #0]
 8017b5a:	b570      	push	{r4, r5, r6, lr}
 8017b5c:	b96a      	cbnz	r2, 8017b7a <strstr+0x22>
 8017b5e:	bd70      	pop	{r4, r5, r6, pc}
 8017b60:	429a      	cmp	r2, r3
 8017b62:	d109      	bne.n	8017b78 <strstr+0x20>
 8017b64:	460c      	mov	r4, r1
 8017b66:	4605      	mov	r5, r0
 8017b68:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d0f6      	beq.n	8017b5e <strstr+0x6>
 8017b70:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017b74:	429e      	cmp	r6, r3
 8017b76:	d0f7      	beq.n	8017b68 <strstr+0x10>
 8017b78:	3001      	adds	r0, #1
 8017b7a:	7803      	ldrb	r3, [r0, #0]
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d1ef      	bne.n	8017b60 <strstr+0x8>
 8017b80:	4618      	mov	r0, r3
 8017b82:	e7ec      	b.n	8017b5e <strstr+0x6>

08017b84 <_close_r>:
 8017b84:	b538      	push	{r3, r4, r5, lr}
 8017b86:	4d06      	ldr	r5, [pc, #24]	@ (8017ba0 <_close_r+0x1c>)
 8017b88:	2300      	movs	r3, #0
 8017b8a:	4604      	mov	r4, r0
 8017b8c:	4608      	mov	r0, r1
 8017b8e:	602b      	str	r3, [r5, #0]
 8017b90:	f7ed fcb9 	bl	8005506 <_close>
 8017b94:	1c43      	adds	r3, r0, #1
 8017b96:	d102      	bne.n	8017b9e <_close_r+0x1a>
 8017b98:	682b      	ldr	r3, [r5, #0]
 8017b9a:	b103      	cbz	r3, 8017b9e <_close_r+0x1a>
 8017b9c:	6023      	str	r3, [r4, #0]
 8017b9e:	bd38      	pop	{r3, r4, r5, pc}
 8017ba0:	200131a8 	.word	0x200131a8

08017ba4 <_lseek_r>:
 8017ba4:	b538      	push	{r3, r4, r5, lr}
 8017ba6:	4d07      	ldr	r5, [pc, #28]	@ (8017bc4 <_lseek_r+0x20>)
 8017ba8:	4604      	mov	r4, r0
 8017baa:	4608      	mov	r0, r1
 8017bac:	4611      	mov	r1, r2
 8017bae:	2200      	movs	r2, #0
 8017bb0:	602a      	str	r2, [r5, #0]
 8017bb2:	461a      	mov	r2, r3
 8017bb4:	f7ed fcce 	bl	8005554 <_lseek>
 8017bb8:	1c43      	adds	r3, r0, #1
 8017bba:	d102      	bne.n	8017bc2 <_lseek_r+0x1e>
 8017bbc:	682b      	ldr	r3, [r5, #0]
 8017bbe:	b103      	cbz	r3, 8017bc2 <_lseek_r+0x1e>
 8017bc0:	6023      	str	r3, [r4, #0]
 8017bc2:	bd38      	pop	{r3, r4, r5, pc}
 8017bc4:	200131a8 	.word	0x200131a8

08017bc8 <_read_r>:
 8017bc8:	b538      	push	{r3, r4, r5, lr}
 8017bca:	4d07      	ldr	r5, [pc, #28]	@ (8017be8 <_read_r+0x20>)
 8017bcc:	4604      	mov	r4, r0
 8017bce:	4608      	mov	r0, r1
 8017bd0:	4611      	mov	r1, r2
 8017bd2:	2200      	movs	r2, #0
 8017bd4:	602a      	str	r2, [r5, #0]
 8017bd6:	461a      	mov	r2, r3
 8017bd8:	f7ed fc5c 	bl	8005494 <_read>
 8017bdc:	1c43      	adds	r3, r0, #1
 8017bde:	d102      	bne.n	8017be6 <_read_r+0x1e>
 8017be0:	682b      	ldr	r3, [r5, #0]
 8017be2:	b103      	cbz	r3, 8017be6 <_read_r+0x1e>
 8017be4:	6023      	str	r3, [r4, #0]
 8017be6:	bd38      	pop	{r3, r4, r5, pc}
 8017be8:	200131a8 	.word	0x200131a8

08017bec <_sbrk_r>:
 8017bec:	b538      	push	{r3, r4, r5, lr}
 8017bee:	4d06      	ldr	r5, [pc, #24]	@ (8017c08 <_sbrk_r+0x1c>)
 8017bf0:	2300      	movs	r3, #0
 8017bf2:	4604      	mov	r4, r0
 8017bf4:	4608      	mov	r0, r1
 8017bf6:	602b      	str	r3, [r5, #0]
 8017bf8:	f7ed fcba 	bl	8005570 <_sbrk>
 8017bfc:	1c43      	adds	r3, r0, #1
 8017bfe:	d102      	bne.n	8017c06 <_sbrk_r+0x1a>
 8017c00:	682b      	ldr	r3, [r5, #0]
 8017c02:	b103      	cbz	r3, 8017c06 <_sbrk_r+0x1a>
 8017c04:	6023      	str	r3, [r4, #0]
 8017c06:	bd38      	pop	{r3, r4, r5, pc}
 8017c08:	200131a8 	.word	0x200131a8

08017c0c <_write_r>:
 8017c0c:	b538      	push	{r3, r4, r5, lr}
 8017c0e:	4d07      	ldr	r5, [pc, #28]	@ (8017c2c <_write_r+0x20>)
 8017c10:	4604      	mov	r4, r0
 8017c12:	4608      	mov	r0, r1
 8017c14:	4611      	mov	r1, r2
 8017c16:	2200      	movs	r2, #0
 8017c18:	602a      	str	r2, [r5, #0]
 8017c1a:	461a      	mov	r2, r3
 8017c1c:	f7ed fc57 	bl	80054ce <_write>
 8017c20:	1c43      	adds	r3, r0, #1
 8017c22:	d102      	bne.n	8017c2a <_write_r+0x1e>
 8017c24:	682b      	ldr	r3, [r5, #0]
 8017c26:	b103      	cbz	r3, 8017c2a <_write_r+0x1e>
 8017c28:	6023      	str	r3, [r4, #0]
 8017c2a:	bd38      	pop	{r3, r4, r5, pc}
 8017c2c:	200131a8 	.word	0x200131a8

08017c30 <__errno>:
 8017c30:	4b01      	ldr	r3, [pc, #4]	@ (8017c38 <__errno+0x8>)
 8017c32:	6818      	ldr	r0, [r3, #0]
 8017c34:	4770      	bx	lr
 8017c36:	bf00      	nop
 8017c38:	20000084 	.word	0x20000084

08017c3c <__libc_init_array>:
 8017c3c:	b570      	push	{r4, r5, r6, lr}
 8017c3e:	4d0d      	ldr	r5, [pc, #52]	@ (8017c74 <__libc_init_array+0x38>)
 8017c40:	4c0d      	ldr	r4, [pc, #52]	@ (8017c78 <__libc_init_array+0x3c>)
 8017c42:	1b64      	subs	r4, r4, r5
 8017c44:	10a4      	asrs	r4, r4, #2
 8017c46:	2600      	movs	r6, #0
 8017c48:	42a6      	cmp	r6, r4
 8017c4a:	d109      	bne.n	8017c60 <__libc_init_array+0x24>
 8017c4c:	4d0b      	ldr	r5, [pc, #44]	@ (8017c7c <__libc_init_array+0x40>)
 8017c4e:	4c0c      	ldr	r4, [pc, #48]	@ (8017c80 <__libc_init_array+0x44>)
 8017c50:	f000 feae 	bl	80189b0 <_init>
 8017c54:	1b64      	subs	r4, r4, r5
 8017c56:	10a4      	asrs	r4, r4, #2
 8017c58:	2600      	movs	r6, #0
 8017c5a:	42a6      	cmp	r6, r4
 8017c5c:	d105      	bne.n	8017c6a <__libc_init_array+0x2e>
 8017c5e:	bd70      	pop	{r4, r5, r6, pc}
 8017c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8017c64:	4798      	blx	r3
 8017c66:	3601      	adds	r6, #1
 8017c68:	e7ee      	b.n	8017c48 <__libc_init_array+0xc>
 8017c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8017c6e:	4798      	blx	r3
 8017c70:	3601      	adds	r6, #1
 8017c72:	e7f2      	b.n	8017c5a <__libc_init_array+0x1e>
 8017c74:	0801c2f4 	.word	0x0801c2f4
 8017c78:	0801c2f4 	.word	0x0801c2f4
 8017c7c:	0801c2f4 	.word	0x0801c2f4
 8017c80:	0801c2f8 	.word	0x0801c2f8

08017c84 <__retarget_lock_init_recursive>:
 8017c84:	4770      	bx	lr

08017c86 <__retarget_lock_acquire_recursive>:
 8017c86:	4770      	bx	lr

08017c88 <__retarget_lock_release_recursive>:
 8017c88:	4770      	bx	lr

08017c8a <memcpy>:
 8017c8a:	440a      	add	r2, r1
 8017c8c:	4291      	cmp	r1, r2
 8017c8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8017c92:	d100      	bne.n	8017c96 <memcpy+0xc>
 8017c94:	4770      	bx	lr
 8017c96:	b510      	push	{r4, lr}
 8017c98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017c9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017ca0:	4291      	cmp	r1, r2
 8017ca2:	d1f9      	bne.n	8017c98 <memcpy+0xe>
 8017ca4:	bd10      	pop	{r4, pc}
	...

08017ca8 <_free_r>:
 8017ca8:	b538      	push	{r3, r4, r5, lr}
 8017caa:	4605      	mov	r5, r0
 8017cac:	2900      	cmp	r1, #0
 8017cae:	d041      	beq.n	8017d34 <_free_r+0x8c>
 8017cb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017cb4:	1f0c      	subs	r4, r1, #4
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	bfb8      	it	lt
 8017cba:	18e4      	addlt	r4, r4, r3
 8017cbc:	f7ff fd6c 	bl	8017798 <__malloc_lock>
 8017cc0:	4a1d      	ldr	r2, [pc, #116]	@ (8017d38 <_free_r+0x90>)
 8017cc2:	6813      	ldr	r3, [r2, #0]
 8017cc4:	b933      	cbnz	r3, 8017cd4 <_free_r+0x2c>
 8017cc6:	6063      	str	r3, [r4, #4]
 8017cc8:	6014      	str	r4, [r2, #0]
 8017cca:	4628      	mov	r0, r5
 8017ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017cd0:	f7ff bd68 	b.w	80177a4 <__malloc_unlock>
 8017cd4:	42a3      	cmp	r3, r4
 8017cd6:	d908      	bls.n	8017cea <_free_r+0x42>
 8017cd8:	6820      	ldr	r0, [r4, #0]
 8017cda:	1821      	adds	r1, r4, r0
 8017cdc:	428b      	cmp	r3, r1
 8017cde:	bf01      	itttt	eq
 8017ce0:	6819      	ldreq	r1, [r3, #0]
 8017ce2:	685b      	ldreq	r3, [r3, #4]
 8017ce4:	1809      	addeq	r1, r1, r0
 8017ce6:	6021      	streq	r1, [r4, #0]
 8017ce8:	e7ed      	b.n	8017cc6 <_free_r+0x1e>
 8017cea:	461a      	mov	r2, r3
 8017cec:	685b      	ldr	r3, [r3, #4]
 8017cee:	b10b      	cbz	r3, 8017cf4 <_free_r+0x4c>
 8017cf0:	42a3      	cmp	r3, r4
 8017cf2:	d9fa      	bls.n	8017cea <_free_r+0x42>
 8017cf4:	6811      	ldr	r1, [r2, #0]
 8017cf6:	1850      	adds	r0, r2, r1
 8017cf8:	42a0      	cmp	r0, r4
 8017cfa:	d10b      	bne.n	8017d14 <_free_r+0x6c>
 8017cfc:	6820      	ldr	r0, [r4, #0]
 8017cfe:	4401      	add	r1, r0
 8017d00:	1850      	adds	r0, r2, r1
 8017d02:	4283      	cmp	r3, r0
 8017d04:	6011      	str	r1, [r2, #0]
 8017d06:	d1e0      	bne.n	8017cca <_free_r+0x22>
 8017d08:	6818      	ldr	r0, [r3, #0]
 8017d0a:	685b      	ldr	r3, [r3, #4]
 8017d0c:	6053      	str	r3, [r2, #4]
 8017d0e:	4408      	add	r0, r1
 8017d10:	6010      	str	r0, [r2, #0]
 8017d12:	e7da      	b.n	8017cca <_free_r+0x22>
 8017d14:	d902      	bls.n	8017d1c <_free_r+0x74>
 8017d16:	230c      	movs	r3, #12
 8017d18:	602b      	str	r3, [r5, #0]
 8017d1a:	e7d6      	b.n	8017cca <_free_r+0x22>
 8017d1c:	6820      	ldr	r0, [r4, #0]
 8017d1e:	1821      	adds	r1, r4, r0
 8017d20:	428b      	cmp	r3, r1
 8017d22:	bf04      	itt	eq
 8017d24:	6819      	ldreq	r1, [r3, #0]
 8017d26:	685b      	ldreq	r3, [r3, #4]
 8017d28:	6063      	str	r3, [r4, #4]
 8017d2a:	bf04      	itt	eq
 8017d2c:	1809      	addeq	r1, r1, r0
 8017d2e:	6021      	streq	r1, [r4, #0]
 8017d30:	6054      	str	r4, [r2, #4]
 8017d32:	e7ca      	b.n	8017cca <_free_r+0x22>
 8017d34:	bd38      	pop	{r3, r4, r5, pc}
 8017d36:	bf00      	nop
 8017d38:	20013068 	.word	0x20013068

08017d3c <__ssputs_r>:
 8017d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d40:	688e      	ldr	r6, [r1, #8]
 8017d42:	461f      	mov	r7, r3
 8017d44:	42be      	cmp	r6, r7
 8017d46:	680b      	ldr	r3, [r1, #0]
 8017d48:	4682      	mov	sl, r0
 8017d4a:	460c      	mov	r4, r1
 8017d4c:	4690      	mov	r8, r2
 8017d4e:	d82d      	bhi.n	8017dac <__ssputs_r+0x70>
 8017d50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017d54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017d58:	d026      	beq.n	8017da8 <__ssputs_r+0x6c>
 8017d5a:	6965      	ldr	r5, [r4, #20]
 8017d5c:	6909      	ldr	r1, [r1, #16]
 8017d5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017d62:	eba3 0901 	sub.w	r9, r3, r1
 8017d66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017d6a:	1c7b      	adds	r3, r7, #1
 8017d6c:	444b      	add	r3, r9
 8017d6e:	106d      	asrs	r5, r5, #1
 8017d70:	429d      	cmp	r5, r3
 8017d72:	bf38      	it	cc
 8017d74:	461d      	movcc	r5, r3
 8017d76:	0553      	lsls	r3, r2, #21
 8017d78:	d527      	bpl.n	8017dca <__ssputs_r+0x8e>
 8017d7a:	4629      	mov	r1, r5
 8017d7c:	f7ff fc8c 	bl	8017698 <_malloc_r>
 8017d80:	4606      	mov	r6, r0
 8017d82:	b360      	cbz	r0, 8017dde <__ssputs_r+0xa2>
 8017d84:	6921      	ldr	r1, [r4, #16]
 8017d86:	464a      	mov	r2, r9
 8017d88:	f7ff ff7f 	bl	8017c8a <memcpy>
 8017d8c:	89a3      	ldrh	r3, [r4, #12]
 8017d8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017d92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017d96:	81a3      	strh	r3, [r4, #12]
 8017d98:	6126      	str	r6, [r4, #16]
 8017d9a:	6165      	str	r5, [r4, #20]
 8017d9c:	444e      	add	r6, r9
 8017d9e:	eba5 0509 	sub.w	r5, r5, r9
 8017da2:	6026      	str	r6, [r4, #0]
 8017da4:	60a5      	str	r5, [r4, #8]
 8017da6:	463e      	mov	r6, r7
 8017da8:	42be      	cmp	r6, r7
 8017daa:	d900      	bls.n	8017dae <__ssputs_r+0x72>
 8017dac:	463e      	mov	r6, r7
 8017dae:	6820      	ldr	r0, [r4, #0]
 8017db0:	4632      	mov	r2, r6
 8017db2:	4641      	mov	r1, r8
 8017db4:	f000 fd28 	bl	8018808 <memmove>
 8017db8:	68a3      	ldr	r3, [r4, #8]
 8017dba:	1b9b      	subs	r3, r3, r6
 8017dbc:	60a3      	str	r3, [r4, #8]
 8017dbe:	6823      	ldr	r3, [r4, #0]
 8017dc0:	4433      	add	r3, r6
 8017dc2:	6023      	str	r3, [r4, #0]
 8017dc4:	2000      	movs	r0, #0
 8017dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017dca:	462a      	mov	r2, r5
 8017dcc:	f000 fd36 	bl	801883c <_realloc_r>
 8017dd0:	4606      	mov	r6, r0
 8017dd2:	2800      	cmp	r0, #0
 8017dd4:	d1e0      	bne.n	8017d98 <__ssputs_r+0x5c>
 8017dd6:	6921      	ldr	r1, [r4, #16]
 8017dd8:	4650      	mov	r0, sl
 8017dda:	f7ff ff65 	bl	8017ca8 <_free_r>
 8017dde:	230c      	movs	r3, #12
 8017de0:	f8ca 3000 	str.w	r3, [sl]
 8017de4:	89a3      	ldrh	r3, [r4, #12]
 8017de6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017dea:	81a3      	strh	r3, [r4, #12]
 8017dec:	f04f 30ff 	mov.w	r0, #4294967295
 8017df0:	e7e9      	b.n	8017dc6 <__ssputs_r+0x8a>
	...

08017df4 <_svfiprintf_r>:
 8017df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017df8:	4698      	mov	r8, r3
 8017dfa:	898b      	ldrh	r3, [r1, #12]
 8017dfc:	061b      	lsls	r3, r3, #24
 8017dfe:	b09d      	sub	sp, #116	@ 0x74
 8017e00:	4607      	mov	r7, r0
 8017e02:	460d      	mov	r5, r1
 8017e04:	4614      	mov	r4, r2
 8017e06:	d510      	bpl.n	8017e2a <_svfiprintf_r+0x36>
 8017e08:	690b      	ldr	r3, [r1, #16]
 8017e0a:	b973      	cbnz	r3, 8017e2a <_svfiprintf_r+0x36>
 8017e0c:	2140      	movs	r1, #64	@ 0x40
 8017e0e:	f7ff fc43 	bl	8017698 <_malloc_r>
 8017e12:	6028      	str	r0, [r5, #0]
 8017e14:	6128      	str	r0, [r5, #16]
 8017e16:	b930      	cbnz	r0, 8017e26 <_svfiprintf_r+0x32>
 8017e18:	230c      	movs	r3, #12
 8017e1a:	603b      	str	r3, [r7, #0]
 8017e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8017e20:	b01d      	add	sp, #116	@ 0x74
 8017e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e26:	2340      	movs	r3, #64	@ 0x40
 8017e28:	616b      	str	r3, [r5, #20]
 8017e2a:	2300      	movs	r3, #0
 8017e2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8017e2e:	2320      	movs	r3, #32
 8017e30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017e34:	f8cd 800c 	str.w	r8, [sp, #12]
 8017e38:	2330      	movs	r3, #48	@ 0x30
 8017e3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017fd8 <_svfiprintf_r+0x1e4>
 8017e3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017e42:	f04f 0901 	mov.w	r9, #1
 8017e46:	4623      	mov	r3, r4
 8017e48:	469a      	mov	sl, r3
 8017e4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017e4e:	b10a      	cbz	r2, 8017e54 <_svfiprintf_r+0x60>
 8017e50:	2a25      	cmp	r2, #37	@ 0x25
 8017e52:	d1f9      	bne.n	8017e48 <_svfiprintf_r+0x54>
 8017e54:	ebba 0b04 	subs.w	fp, sl, r4
 8017e58:	d00b      	beq.n	8017e72 <_svfiprintf_r+0x7e>
 8017e5a:	465b      	mov	r3, fp
 8017e5c:	4622      	mov	r2, r4
 8017e5e:	4629      	mov	r1, r5
 8017e60:	4638      	mov	r0, r7
 8017e62:	f7ff ff6b 	bl	8017d3c <__ssputs_r>
 8017e66:	3001      	adds	r0, #1
 8017e68:	f000 80a7 	beq.w	8017fba <_svfiprintf_r+0x1c6>
 8017e6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017e6e:	445a      	add	r2, fp
 8017e70:	9209      	str	r2, [sp, #36]	@ 0x24
 8017e72:	f89a 3000 	ldrb.w	r3, [sl]
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	f000 809f 	beq.w	8017fba <_svfiprintf_r+0x1c6>
 8017e7c:	2300      	movs	r3, #0
 8017e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8017e82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017e86:	f10a 0a01 	add.w	sl, sl, #1
 8017e8a:	9304      	str	r3, [sp, #16]
 8017e8c:	9307      	str	r3, [sp, #28]
 8017e8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017e92:	931a      	str	r3, [sp, #104]	@ 0x68
 8017e94:	4654      	mov	r4, sl
 8017e96:	2205      	movs	r2, #5
 8017e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e9c:	484e      	ldr	r0, [pc, #312]	@ (8017fd8 <_svfiprintf_r+0x1e4>)
 8017e9e:	f7e8 f9cf 	bl	8000240 <memchr>
 8017ea2:	9a04      	ldr	r2, [sp, #16]
 8017ea4:	b9d8      	cbnz	r0, 8017ede <_svfiprintf_r+0xea>
 8017ea6:	06d0      	lsls	r0, r2, #27
 8017ea8:	bf44      	itt	mi
 8017eaa:	2320      	movmi	r3, #32
 8017eac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017eb0:	0711      	lsls	r1, r2, #28
 8017eb2:	bf44      	itt	mi
 8017eb4:	232b      	movmi	r3, #43	@ 0x2b
 8017eb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017eba:	f89a 3000 	ldrb.w	r3, [sl]
 8017ebe:	2b2a      	cmp	r3, #42	@ 0x2a
 8017ec0:	d015      	beq.n	8017eee <_svfiprintf_r+0xfa>
 8017ec2:	9a07      	ldr	r2, [sp, #28]
 8017ec4:	4654      	mov	r4, sl
 8017ec6:	2000      	movs	r0, #0
 8017ec8:	f04f 0c0a 	mov.w	ip, #10
 8017ecc:	4621      	mov	r1, r4
 8017ece:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017ed2:	3b30      	subs	r3, #48	@ 0x30
 8017ed4:	2b09      	cmp	r3, #9
 8017ed6:	d94b      	bls.n	8017f70 <_svfiprintf_r+0x17c>
 8017ed8:	b1b0      	cbz	r0, 8017f08 <_svfiprintf_r+0x114>
 8017eda:	9207      	str	r2, [sp, #28]
 8017edc:	e014      	b.n	8017f08 <_svfiprintf_r+0x114>
 8017ede:	eba0 0308 	sub.w	r3, r0, r8
 8017ee2:	fa09 f303 	lsl.w	r3, r9, r3
 8017ee6:	4313      	orrs	r3, r2
 8017ee8:	9304      	str	r3, [sp, #16]
 8017eea:	46a2      	mov	sl, r4
 8017eec:	e7d2      	b.n	8017e94 <_svfiprintf_r+0xa0>
 8017eee:	9b03      	ldr	r3, [sp, #12]
 8017ef0:	1d19      	adds	r1, r3, #4
 8017ef2:	681b      	ldr	r3, [r3, #0]
 8017ef4:	9103      	str	r1, [sp, #12]
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	bfbb      	ittet	lt
 8017efa:	425b      	neglt	r3, r3
 8017efc:	f042 0202 	orrlt.w	r2, r2, #2
 8017f00:	9307      	strge	r3, [sp, #28]
 8017f02:	9307      	strlt	r3, [sp, #28]
 8017f04:	bfb8      	it	lt
 8017f06:	9204      	strlt	r2, [sp, #16]
 8017f08:	7823      	ldrb	r3, [r4, #0]
 8017f0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8017f0c:	d10a      	bne.n	8017f24 <_svfiprintf_r+0x130>
 8017f0e:	7863      	ldrb	r3, [r4, #1]
 8017f10:	2b2a      	cmp	r3, #42	@ 0x2a
 8017f12:	d132      	bne.n	8017f7a <_svfiprintf_r+0x186>
 8017f14:	9b03      	ldr	r3, [sp, #12]
 8017f16:	1d1a      	adds	r2, r3, #4
 8017f18:	681b      	ldr	r3, [r3, #0]
 8017f1a:	9203      	str	r2, [sp, #12]
 8017f1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017f20:	3402      	adds	r4, #2
 8017f22:	9305      	str	r3, [sp, #20]
 8017f24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017fe8 <_svfiprintf_r+0x1f4>
 8017f28:	7821      	ldrb	r1, [r4, #0]
 8017f2a:	2203      	movs	r2, #3
 8017f2c:	4650      	mov	r0, sl
 8017f2e:	f7e8 f987 	bl	8000240 <memchr>
 8017f32:	b138      	cbz	r0, 8017f44 <_svfiprintf_r+0x150>
 8017f34:	9b04      	ldr	r3, [sp, #16]
 8017f36:	eba0 000a 	sub.w	r0, r0, sl
 8017f3a:	2240      	movs	r2, #64	@ 0x40
 8017f3c:	4082      	lsls	r2, r0
 8017f3e:	4313      	orrs	r3, r2
 8017f40:	3401      	adds	r4, #1
 8017f42:	9304      	str	r3, [sp, #16]
 8017f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f48:	4824      	ldr	r0, [pc, #144]	@ (8017fdc <_svfiprintf_r+0x1e8>)
 8017f4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017f4e:	2206      	movs	r2, #6
 8017f50:	f7e8 f976 	bl	8000240 <memchr>
 8017f54:	2800      	cmp	r0, #0
 8017f56:	d036      	beq.n	8017fc6 <_svfiprintf_r+0x1d2>
 8017f58:	4b21      	ldr	r3, [pc, #132]	@ (8017fe0 <_svfiprintf_r+0x1ec>)
 8017f5a:	bb1b      	cbnz	r3, 8017fa4 <_svfiprintf_r+0x1b0>
 8017f5c:	9b03      	ldr	r3, [sp, #12]
 8017f5e:	3307      	adds	r3, #7
 8017f60:	f023 0307 	bic.w	r3, r3, #7
 8017f64:	3308      	adds	r3, #8
 8017f66:	9303      	str	r3, [sp, #12]
 8017f68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017f6a:	4433      	add	r3, r6
 8017f6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8017f6e:	e76a      	b.n	8017e46 <_svfiprintf_r+0x52>
 8017f70:	fb0c 3202 	mla	r2, ip, r2, r3
 8017f74:	460c      	mov	r4, r1
 8017f76:	2001      	movs	r0, #1
 8017f78:	e7a8      	b.n	8017ecc <_svfiprintf_r+0xd8>
 8017f7a:	2300      	movs	r3, #0
 8017f7c:	3401      	adds	r4, #1
 8017f7e:	9305      	str	r3, [sp, #20]
 8017f80:	4619      	mov	r1, r3
 8017f82:	f04f 0c0a 	mov.w	ip, #10
 8017f86:	4620      	mov	r0, r4
 8017f88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017f8c:	3a30      	subs	r2, #48	@ 0x30
 8017f8e:	2a09      	cmp	r2, #9
 8017f90:	d903      	bls.n	8017f9a <_svfiprintf_r+0x1a6>
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d0c6      	beq.n	8017f24 <_svfiprintf_r+0x130>
 8017f96:	9105      	str	r1, [sp, #20]
 8017f98:	e7c4      	b.n	8017f24 <_svfiprintf_r+0x130>
 8017f9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8017f9e:	4604      	mov	r4, r0
 8017fa0:	2301      	movs	r3, #1
 8017fa2:	e7f0      	b.n	8017f86 <_svfiprintf_r+0x192>
 8017fa4:	ab03      	add	r3, sp, #12
 8017fa6:	9300      	str	r3, [sp, #0]
 8017fa8:	462a      	mov	r2, r5
 8017faa:	4b0e      	ldr	r3, [pc, #56]	@ (8017fe4 <_svfiprintf_r+0x1f0>)
 8017fac:	a904      	add	r1, sp, #16
 8017fae:	4638      	mov	r0, r7
 8017fb0:	f3af 8000 	nop.w
 8017fb4:	1c42      	adds	r2, r0, #1
 8017fb6:	4606      	mov	r6, r0
 8017fb8:	d1d6      	bne.n	8017f68 <_svfiprintf_r+0x174>
 8017fba:	89ab      	ldrh	r3, [r5, #12]
 8017fbc:	065b      	lsls	r3, r3, #25
 8017fbe:	f53f af2d 	bmi.w	8017e1c <_svfiprintf_r+0x28>
 8017fc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017fc4:	e72c      	b.n	8017e20 <_svfiprintf_r+0x2c>
 8017fc6:	ab03      	add	r3, sp, #12
 8017fc8:	9300      	str	r3, [sp, #0]
 8017fca:	462a      	mov	r2, r5
 8017fcc:	4b05      	ldr	r3, [pc, #20]	@ (8017fe4 <_svfiprintf_r+0x1f0>)
 8017fce:	a904      	add	r1, sp, #16
 8017fd0:	4638      	mov	r0, r7
 8017fd2:	f000 f9bb 	bl	801834c <_printf_i>
 8017fd6:	e7ed      	b.n	8017fb4 <_svfiprintf_r+0x1c0>
 8017fd8:	0801c2b6 	.word	0x0801c2b6
 8017fdc:	0801c2c0 	.word	0x0801c2c0
 8017fe0:	00000000 	.word	0x00000000
 8017fe4:	08017d3d 	.word	0x08017d3d
 8017fe8:	0801c2bc 	.word	0x0801c2bc

08017fec <__sfputc_r>:
 8017fec:	6893      	ldr	r3, [r2, #8]
 8017fee:	3b01      	subs	r3, #1
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	b410      	push	{r4}
 8017ff4:	6093      	str	r3, [r2, #8]
 8017ff6:	da08      	bge.n	801800a <__sfputc_r+0x1e>
 8017ff8:	6994      	ldr	r4, [r2, #24]
 8017ffa:	42a3      	cmp	r3, r4
 8017ffc:	db01      	blt.n	8018002 <__sfputc_r+0x16>
 8017ffe:	290a      	cmp	r1, #10
 8018000:	d103      	bne.n	801800a <__sfputc_r+0x1e>
 8018002:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018006:	f000 bb6b 	b.w	80186e0 <__swbuf_r>
 801800a:	6813      	ldr	r3, [r2, #0]
 801800c:	1c58      	adds	r0, r3, #1
 801800e:	6010      	str	r0, [r2, #0]
 8018010:	7019      	strb	r1, [r3, #0]
 8018012:	4608      	mov	r0, r1
 8018014:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018018:	4770      	bx	lr

0801801a <__sfputs_r>:
 801801a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801801c:	4606      	mov	r6, r0
 801801e:	460f      	mov	r7, r1
 8018020:	4614      	mov	r4, r2
 8018022:	18d5      	adds	r5, r2, r3
 8018024:	42ac      	cmp	r4, r5
 8018026:	d101      	bne.n	801802c <__sfputs_r+0x12>
 8018028:	2000      	movs	r0, #0
 801802a:	e007      	b.n	801803c <__sfputs_r+0x22>
 801802c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018030:	463a      	mov	r2, r7
 8018032:	4630      	mov	r0, r6
 8018034:	f7ff ffda 	bl	8017fec <__sfputc_r>
 8018038:	1c43      	adds	r3, r0, #1
 801803a:	d1f3      	bne.n	8018024 <__sfputs_r+0xa>
 801803c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018040 <_vfiprintf_r>:
 8018040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018044:	460d      	mov	r5, r1
 8018046:	b09d      	sub	sp, #116	@ 0x74
 8018048:	4614      	mov	r4, r2
 801804a:	4698      	mov	r8, r3
 801804c:	4606      	mov	r6, r0
 801804e:	b118      	cbz	r0, 8018058 <_vfiprintf_r+0x18>
 8018050:	6a03      	ldr	r3, [r0, #32]
 8018052:	b90b      	cbnz	r3, 8018058 <_vfiprintf_r+0x18>
 8018054:	f7ff fc38 	bl	80178c8 <__sinit>
 8018058:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801805a:	07d9      	lsls	r1, r3, #31
 801805c:	d405      	bmi.n	801806a <_vfiprintf_r+0x2a>
 801805e:	89ab      	ldrh	r3, [r5, #12]
 8018060:	059a      	lsls	r2, r3, #22
 8018062:	d402      	bmi.n	801806a <_vfiprintf_r+0x2a>
 8018064:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018066:	f7ff fe0e 	bl	8017c86 <__retarget_lock_acquire_recursive>
 801806a:	89ab      	ldrh	r3, [r5, #12]
 801806c:	071b      	lsls	r3, r3, #28
 801806e:	d501      	bpl.n	8018074 <_vfiprintf_r+0x34>
 8018070:	692b      	ldr	r3, [r5, #16]
 8018072:	b99b      	cbnz	r3, 801809c <_vfiprintf_r+0x5c>
 8018074:	4629      	mov	r1, r5
 8018076:	4630      	mov	r0, r6
 8018078:	f000 fb70 	bl	801875c <__swsetup_r>
 801807c:	b170      	cbz	r0, 801809c <_vfiprintf_r+0x5c>
 801807e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018080:	07dc      	lsls	r4, r3, #31
 8018082:	d504      	bpl.n	801808e <_vfiprintf_r+0x4e>
 8018084:	f04f 30ff 	mov.w	r0, #4294967295
 8018088:	b01d      	add	sp, #116	@ 0x74
 801808a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801808e:	89ab      	ldrh	r3, [r5, #12]
 8018090:	0598      	lsls	r0, r3, #22
 8018092:	d4f7      	bmi.n	8018084 <_vfiprintf_r+0x44>
 8018094:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018096:	f7ff fdf7 	bl	8017c88 <__retarget_lock_release_recursive>
 801809a:	e7f3      	b.n	8018084 <_vfiprintf_r+0x44>
 801809c:	2300      	movs	r3, #0
 801809e:	9309      	str	r3, [sp, #36]	@ 0x24
 80180a0:	2320      	movs	r3, #32
 80180a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80180a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80180aa:	2330      	movs	r3, #48	@ 0x30
 80180ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801825c <_vfiprintf_r+0x21c>
 80180b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80180b4:	f04f 0901 	mov.w	r9, #1
 80180b8:	4623      	mov	r3, r4
 80180ba:	469a      	mov	sl, r3
 80180bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80180c0:	b10a      	cbz	r2, 80180c6 <_vfiprintf_r+0x86>
 80180c2:	2a25      	cmp	r2, #37	@ 0x25
 80180c4:	d1f9      	bne.n	80180ba <_vfiprintf_r+0x7a>
 80180c6:	ebba 0b04 	subs.w	fp, sl, r4
 80180ca:	d00b      	beq.n	80180e4 <_vfiprintf_r+0xa4>
 80180cc:	465b      	mov	r3, fp
 80180ce:	4622      	mov	r2, r4
 80180d0:	4629      	mov	r1, r5
 80180d2:	4630      	mov	r0, r6
 80180d4:	f7ff ffa1 	bl	801801a <__sfputs_r>
 80180d8:	3001      	adds	r0, #1
 80180da:	f000 80a7 	beq.w	801822c <_vfiprintf_r+0x1ec>
 80180de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80180e0:	445a      	add	r2, fp
 80180e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80180e4:	f89a 3000 	ldrb.w	r3, [sl]
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	f000 809f 	beq.w	801822c <_vfiprintf_r+0x1ec>
 80180ee:	2300      	movs	r3, #0
 80180f0:	f04f 32ff 	mov.w	r2, #4294967295
 80180f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80180f8:	f10a 0a01 	add.w	sl, sl, #1
 80180fc:	9304      	str	r3, [sp, #16]
 80180fe:	9307      	str	r3, [sp, #28]
 8018100:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018104:	931a      	str	r3, [sp, #104]	@ 0x68
 8018106:	4654      	mov	r4, sl
 8018108:	2205      	movs	r2, #5
 801810a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801810e:	4853      	ldr	r0, [pc, #332]	@ (801825c <_vfiprintf_r+0x21c>)
 8018110:	f7e8 f896 	bl	8000240 <memchr>
 8018114:	9a04      	ldr	r2, [sp, #16]
 8018116:	b9d8      	cbnz	r0, 8018150 <_vfiprintf_r+0x110>
 8018118:	06d1      	lsls	r1, r2, #27
 801811a:	bf44      	itt	mi
 801811c:	2320      	movmi	r3, #32
 801811e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018122:	0713      	lsls	r3, r2, #28
 8018124:	bf44      	itt	mi
 8018126:	232b      	movmi	r3, #43	@ 0x2b
 8018128:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801812c:	f89a 3000 	ldrb.w	r3, [sl]
 8018130:	2b2a      	cmp	r3, #42	@ 0x2a
 8018132:	d015      	beq.n	8018160 <_vfiprintf_r+0x120>
 8018134:	9a07      	ldr	r2, [sp, #28]
 8018136:	4654      	mov	r4, sl
 8018138:	2000      	movs	r0, #0
 801813a:	f04f 0c0a 	mov.w	ip, #10
 801813e:	4621      	mov	r1, r4
 8018140:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018144:	3b30      	subs	r3, #48	@ 0x30
 8018146:	2b09      	cmp	r3, #9
 8018148:	d94b      	bls.n	80181e2 <_vfiprintf_r+0x1a2>
 801814a:	b1b0      	cbz	r0, 801817a <_vfiprintf_r+0x13a>
 801814c:	9207      	str	r2, [sp, #28]
 801814e:	e014      	b.n	801817a <_vfiprintf_r+0x13a>
 8018150:	eba0 0308 	sub.w	r3, r0, r8
 8018154:	fa09 f303 	lsl.w	r3, r9, r3
 8018158:	4313      	orrs	r3, r2
 801815a:	9304      	str	r3, [sp, #16]
 801815c:	46a2      	mov	sl, r4
 801815e:	e7d2      	b.n	8018106 <_vfiprintf_r+0xc6>
 8018160:	9b03      	ldr	r3, [sp, #12]
 8018162:	1d19      	adds	r1, r3, #4
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	9103      	str	r1, [sp, #12]
 8018168:	2b00      	cmp	r3, #0
 801816a:	bfbb      	ittet	lt
 801816c:	425b      	neglt	r3, r3
 801816e:	f042 0202 	orrlt.w	r2, r2, #2
 8018172:	9307      	strge	r3, [sp, #28]
 8018174:	9307      	strlt	r3, [sp, #28]
 8018176:	bfb8      	it	lt
 8018178:	9204      	strlt	r2, [sp, #16]
 801817a:	7823      	ldrb	r3, [r4, #0]
 801817c:	2b2e      	cmp	r3, #46	@ 0x2e
 801817e:	d10a      	bne.n	8018196 <_vfiprintf_r+0x156>
 8018180:	7863      	ldrb	r3, [r4, #1]
 8018182:	2b2a      	cmp	r3, #42	@ 0x2a
 8018184:	d132      	bne.n	80181ec <_vfiprintf_r+0x1ac>
 8018186:	9b03      	ldr	r3, [sp, #12]
 8018188:	1d1a      	adds	r2, r3, #4
 801818a:	681b      	ldr	r3, [r3, #0]
 801818c:	9203      	str	r2, [sp, #12]
 801818e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018192:	3402      	adds	r4, #2
 8018194:	9305      	str	r3, [sp, #20]
 8018196:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801826c <_vfiprintf_r+0x22c>
 801819a:	7821      	ldrb	r1, [r4, #0]
 801819c:	2203      	movs	r2, #3
 801819e:	4650      	mov	r0, sl
 80181a0:	f7e8 f84e 	bl	8000240 <memchr>
 80181a4:	b138      	cbz	r0, 80181b6 <_vfiprintf_r+0x176>
 80181a6:	9b04      	ldr	r3, [sp, #16]
 80181a8:	eba0 000a 	sub.w	r0, r0, sl
 80181ac:	2240      	movs	r2, #64	@ 0x40
 80181ae:	4082      	lsls	r2, r0
 80181b0:	4313      	orrs	r3, r2
 80181b2:	3401      	adds	r4, #1
 80181b4:	9304      	str	r3, [sp, #16]
 80181b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80181ba:	4829      	ldr	r0, [pc, #164]	@ (8018260 <_vfiprintf_r+0x220>)
 80181bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80181c0:	2206      	movs	r2, #6
 80181c2:	f7e8 f83d 	bl	8000240 <memchr>
 80181c6:	2800      	cmp	r0, #0
 80181c8:	d03f      	beq.n	801824a <_vfiprintf_r+0x20a>
 80181ca:	4b26      	ldr	r3, [pc, #152]	@ (8018264 <_vfiprintf_r+0x224>)
 80181cc:	bb1b      	cbnz	r3, 8018216 <_vfiprintf_r+0x1d6>
 80181ce:	9b03      	ldr	r3, [sp, #12]
 80181d0:	3307      	adds	r3, #7
 80181d2:	f023 0307 	bic.w	r3, r3, #7
 80181d6:	3308      	adds	r3, #8
 80181d8:	9303      	str	r3, [sp, #12]
 80181da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80181dc:	443b      	add	r3, r7
 80181de:	9309      	str	r3, [sp, #36]	@ 0x24
 80181e0:	e76a      	b.n	80180b8 <_vfiprintf_r+0x78>
 80181e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80181e6:	460c      	mov	r4, r1
 80181e8:	2001      	movs	r0, #1
 80181ea:	e7a8      	b.n	801813e <_vfiprintf_r+0xfe>
 80181ec:	2300      	movs	r3, #0
 80181ee:	3401      	adds	r4, #1
 80181f0:	9305      	str	r3, [sp, #20]
 80181f2:	4619      	mov	r1, r3
 80181f4:	f04f 0c0a 	mov.w	ip, #10
 80181f8:	4620      	mov	r0, r4
 80181fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80181fe:	3a30      	subs	r2, #48	@ 0x30
 8018200:	2a09      	cmp	r2, #9
 8018202:	d903      	bls.n	801820c <_vfiprintf_r+0x1cc>
 8018204:	2b00      	cmp	r3, #0
 8018206:	d0c6      	beq.n	8018196 <_vfiprintf_r+0x156>
 8018208:	9105      	str	r1, [sp, #20]
 801820a:	e7c4      	b.n	8018196 <_vfiprintf_r+0x156>
 801820c:	fb0c 2101 	mla	r1, ip, r1, r2
 8018210:	4604      	mov	r4, r0
 8018212:	2301      	movs	r3, #1
 8018214:	e7f0      	b.n	80181f8 <_vfiprintf_r+0x1b8>
 8018216:	ab03      	add	r3, sp, #12
 8018218:	9300      	str	r3, [sp, #0]
 801821a:	462a      	mov	r2, r5
 801821c:	4b12      	ldr	r3, [pc, #72]	@ (8018268 <_vfiprintf_r+0x228>)
 801821e:	a904      	add	r1, sp, #16
 8018220:	4630      	mov	r0, r6
 8018222:	f3af 8000 	nop.w
 8018226:	4607      	mov	r7, r0
 8018228:	1c78      	adds	r0, r7, #1
 801822a:	d1d6      	bne.n	80181da <_vfiprintf_r+0x19a>
 801822c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801822e:	07d9      	lsls	r1, r3, #31
 8018230:	d405      	bmi.n	801823e <_vfiprintf_r+0x1fe>
 8018232:	89ab      	ldrh	r3, [r5, #12]
 8018234:	059a      	lsls	r2, r3, #22
 8018236:	d402      	bmi.n	801823e <_vfiprintf_r+0x1fe>
 8018238:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801823a:	f7ff fd25 	bl	8017c88 <__retarget_lock_release_recursive>
 801823e:	89ab      	ldrh	r3, [r5, #12]
 8018240:	065b      	lsls	r3, r3, #25
 8018242:	f53f af1f 	bmi.w	8018084 <_vfiprintf_r+0x44>
 8018246:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018248:	e71e      	b.n	8018088 <_vfiprintf_r+0x48>
 801824a:	ab03      	add	r3, sp, #12
 801824c:	9300      	str	r3, [sp, #0]
 801824e:	462a      	mov	r2, r5
 8018250:	4b05      	ldr	r3, [pc, #20]	@ (8018268 <_vfiprintf_r+0x228>)
 8018252:	a904      	add	r1, sp, #16
 8018254:	4630      	mov	r0, r6
 8018256:	f000 f879 	bl	801834c <_printf_i>
 801825a:	e7e4      	b.n	8018226 <_vfiprintf_r+0x1e6>
 801825c:	0801c2b6 	.word	0x0801c2b6
 8018260:	0801c2c0 	.word	0x0801c2c0
 8018264:	00000000 	.word	0x00000000
 8018268:	0801801b 	.word	0x0801801b
 801826c:	0801c2bc 	.word	0x0801c2bc

08018270 <_printf_common>:
 8018270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018274:	4616      	mov	r6, r2
 8018276:	4698      	mov	r8, r3
 8018278:	688a      	ldr	r2, [r1, #8]
 801827a:	690b      	ldr	r3, [r1, #16]
 801827c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018280:	4293      	cmp	r3, r2
 8018282:	bfb8      	it	lt
 8018284:	4613      	movlt	r3, r2
 8018286:	6033      	str	r3, [r6, #0]
 8018288:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801828c:	4607      	mov	r7, r0
 801828e:	460c      	mov	r4, r1
 8018290:	b10a      	cbz	r2, 8018296 <_printf_common+0x26>
 8018292:	3301      	adds	r3, #1
 8018294:	6033      	str	r3, [r6, #0]
 8018296:	6823      	ldr	r3, [r4, #0]
 8018298:	0699      	lsls	r1, r3, #26
 801829a:	bf42      	ittt	mi
 801829c:	6833      	ldrmi	r3, [r6, #0]
 801829e:	3302      	addmi	r3, #2
 80182a0:	6033      	strmi	r3, [r6, #0]
 80182a2:	6825      	ldr	r5, [r4, #0]
 80182a4:	f015 0506 	ands.w	r5, r5, #6
 80182a8:	d106      	bne.n	80182b8 <_printf_common+0x48>
 80182aa:	f104 0a19 	add.w	sl, r4, #25
 80182ae:	68e3      	ldr	r3, [r4, #12]
 80182b0:	6832      	ldr	r2, [r6, #0]
 80182b2:	1a9b      	subs	r3, r3, r2
 80182b4:	42ab      	cmp	r3, r5
 80182b6:	dc26      	bgt.n	8018306 <_printf_common+0x96>
 80182b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80182bc:	6822      	ldr	r2, [r4, #0]
 80182be:	3b00      	subs	r3, #0
 80182c0:	bf18      	it	ne
 80182c2:	2301      	movne	r3, #1
 80182c4:	0692      	lsls	r2, r2, #26
 80182c6:	d42b      	bmi.n	8018320 <_printf_common+0xb0>
 80182c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80182cc:	4641      	mov	r1, r8
 80182ce:	4638      	mov	r0, r7
 80182d0:	47c8      	blx	r9
 80182d2:	3001      	adds	r0, #1
 80182d4:	d01e      	beq.n	8018314 <_printf_common+0xa4>
 80182d6:	6823      	ldr	r3, [r4, #0]
 80182d8:	6922      	ldr	r2, [r4, #16]
 80182da:	f003 0306 	and.w	r3, r3, #6
 80182de:	2b04      	cmp	r3, #4
 80182e0:	bf02      	ittt	eq
 80182e2:	68e5      	ldreq	r5, [r4, #12]
 80182e4:	6833      	ldreq	r3, [r6, #0]
 80182e6:	1aed      	subeq	r5, r5, r3
 80182e8:	68a3      	ldr	r3, [r4, #8]
 80182ea:	bf0c      	ite	eq
 80182ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80182f0:	2500      	movne	r5, #0
 80182f2:	4293      	cmp	r3, r2
 80182f4:	bfc4      	itt	gt
 80182f6:	1a9b      	subgt	r3, r3, r2
 80182f8:	18ed      	addgt	r5, r5, r3
 80182fa:	2600      	movs	r6, #0
 80182fc:	341a      	adds	r4, #26
 80182fe:	42b5      	cmp	r5, r6
 8018300:	d11a      	bne.n	8018338 <_printf_common+0xc8>
 8018302:	2000      	movs	r0, #0
 8018304:	e008      	b.n	8018318 <_printf_common+0xa8>
 8018306:	2301      	movs	r3, #1
 8018308:	4652      	mov	r2, sl
 801830a:	4641      	mov	r1, r8
 801830c:	4638      	mov	r0, r7
 801830e:	47c8      	blx	r9
 8018310:	3001      	adds	r0, #1
 8018312:	d103      	bne.n	801831c <_printf_common+0xac>
 8018314:	f04f 30ff 	mov.w	r0, #4294967295
 8018318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801831c:	3501      	adds	r5, #1
 801831e:	e7c6      	b.n	80182ae <_printf_common+0x3e>
 8018320:	18e1      	adds	r1, r4, r3
 8018322:	1c5a      	adds	r2, r3, #1
 8018324:	2030      	movs	r0, #48	@ 0x30
 8018326:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801832a:	4422      	add	r2, r4
 801832c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018330:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018334:	3302      	adds	r3, #2
 8018336:	e7c7      	b.n	80182c8 <_printf_common+0x58>
 8018338:	2301      	movs	r3, #1
 801833a:	4622      	mov	r2, r4
 801833c:	4641      	mov	r1, r8
 801833e:	4638      	mov	r0, r7
 8018340:	47c8      	blx	r9
 8018342:	3001      	adds	r0, #1
 8018344:	d0e6      	beq.n	8018314 <_printf_common+0xa4>
 8018346:	3601      	adds	r6, #1
 8018348:	e7d9      	b.n	80182fe <_printf_common+0x8e>
	...

0801834c <_printf_i>:
 801834c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018350:	7e0f      	ldrb	r7, [r1, #24]
 8018352:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018354:	2f78      	cmp	r7, #120	@ 0x78
 8018356:	4691      	mov	r9, r2
 8018358:	4680      	mov	r8, r0
 801835a:	460c      	mov	r4, r1
 801835c:	469a      	mov	sl, r3
 801835e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018362:	d807      	bhi.n	8018374 <_printf_i+0x28>
 8018364:	2f62      	cmp	r7, #98	@ 0x62
 8018366:	d80a      	bhi.n	801837e <_printf_i+0x32>
 8018368:	2f00      	cmp	r7, #0
 801836a:	f000 80d1 	beq.w	8018510 <_printf_i+0x1c4>
 801836e:	2f58      	cmp	r7, #88	@ 0x58
 8018370:	f000 80b8 	beq.w	80184e4 <_printf_i+0x198>
 8018374:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018378:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801837c:	e03a      	b.n	80183f4 <_printf_i+0xa8>
 801837e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018382:	2b15      	cmp	r3, #21
 8018384:	d8f6      	bhi.n	8018374 <_printf_i+0x28>
 8018386:	a101      	add	r1, pc, #4	@ (adr r1, 801838c <_printf_i+0x40>)
 8018388:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801838c:	080183e5 	.word	0x080183e5
 8018390:	080183f9 	.word	0x080183f9
 8018394:	08018375 	.word	0x08018375
 8018398:	08018375 	.word	0x08018375
 801839c:	08018375 	.word	0x08018375
 80183a0:	08018375 	.word	0x08018375
 80183a4:	080183f9 	.word	0x080183f9
 80183a8:	08018375 	.word	0x08018375
 80183ac:	08018375 	.word	0x08018375
 80183b0:	08018375 	.word	0x08018375
 80183b4:	08018375 	.word	0x08018375
 80183b8:	080184f7 	.word	0x080184f7
 80183bc:	08018423 	.word	0x08018423
 80183c0:	080184b1 	.word	0x080184b1
 80183c4:	08018375 	.word	0x08018375
 80183c8:	08018375 	.word	0x08018375
 80183cc:	08018519 	.word	0x08018519
 80183d0:	08018375 	.word	0x08018375
 80183d4:	08018423 	.word	0x08018423
 80183d8:	08018375 	.word	0x08018375
 80183dc:	08018375 	.word	0x08018375
 80183e0:	080184b9 	.word	0x080184b9
 80183e4:	6833      	ldr	r3, [r6, #0]
 80183e6:	1d1a      	adds	r2, r3, #4
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	6032      	str	r2, [r6, #0]
 80183ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80183f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80183f4:	2301      	movs	r3, #1
 80183f6:	e09c      	b.n	8018532 <_printf_i+0x1e6>
 80183f8:	6833      	ldr	r3, [r6, #0]
 80183fa:	6820      	ldr	r0, [r4, #0]
 80183fc:	1d19      	adds	r1, r3, #4
 80183fe:	6031      	str	r1, [r6, #0]
 8018400:	0606      	lsls	r6, r0, #24
 8018402:	d501      	bpl.n	8018408 <_printf_i+0xbc>
 8018404:	681d      	ldr	r5, [r3, #0]
 8018406:	e003      	b.n	8018410 <_printf_i+0xc4>
 8018408:	0645      	lsls	r5, r0, #25
 801840a:	d5fb      	bpl.n	8018404 <_printf_i+0xb8>
 801840c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018410:	2d00      	cmp	r5, #0
 8018412:	da03      	bge.n	801841c <_printf_i+0xd0>
 8018414:	232d      	movs	r3, #45	@ 0x2d
 8018416:	426d      	negs	r5, r5
 8018418:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801841c:	4858      	ldr	r0, [pc, #352]	@ (8018580 <_printf_i+0x234>)
 801841e:	230a      	movs	r3, #10
 8018420:	e011      	b.n	8018446 <_printf_i+0xfa>
 8018422:	6821      	ldr	r1, [r4, #0]
 8018424:	6833      	ldr	r3, [r6, #0]
 8018426:	0608      	lsls	r0, r1, #24
 8018428:	f853 5b04 	ldr.w	r5, [r3], #4
 801842c:	d402      	bmi.n	8018434 <_printf_i+0xe8>
 801842e:	0649      	lsls	r1, r1, #25
 8018430:	bf48      	it	mi
 8018432:	b2ad      	uxthmi	r5, r5
 8018434:	2f6f      	cmp	r7, #111	@ 0x6f
 8018436:	4852      	ldr	r0, [pc, #328]	@ (8018580 <_printf_i+0x234>)
 8018438:	6033      	str	r3, [r6, #0]
 801843a:	bf14      	ite	ne
 801843c:	230a      	movne	r3, #10
 801843e:	2308      	moveq	r3, #8
 8018440:	2100      	movs	r1, #0
 8018442:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018446:	6866      	ldr	r6, [r4, #4]
 8018448:	60a6      	str	r6, [r4, #8]
 801844a:	2e00      	cmp	r6, #0
 801844c:	db05      	blt.n	801845a <_printf_i+0x10e>
 801844e:	6821      	ldr	r1, [r4, #0]
 8018450:	432e      	orrs	r6, r5
 8018452:	f021 0104 	bic.w	r1, r1, #4
 8018456:	6021      	str	r1, [r4, #0]
 8018458:	d04b      	beq.n	80184f2 <_printf_i+0x1a6>
 801845a:	4616      	mov	r6, r2
 801845c:	fbb5 f1f3 	udiv	r1, r5, r3
 8018460:	fb03 5711 	mls	r7, r3, r1, r5
 8018464:	5dc7      	ldrb	r7, [r0, r7]
 8018466:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801846a:	462f      	mov	r7, r5
 801846c:	42bb      	cmp	r3, r7
 801846e:	460d      	mov	r5, r1
 8018470:	d9f4      	bls.n	801845c <_printf_i+0x110>
 8018472:	2b08      	cmp	r3, #8
 8018474:	d10b      	bne.n	801848e <_printf_i+0x142>
 8018476:	6823      	ldr	r3, [r4, #0]
 8018478:	07df      	lsls	r7, r3, #31
 801847a:	d508      	bpl.n	801848e <_printf_i+0x142>
 801847c:	6923      	ldr	r3, [r4, #16]
 801847e:	6861      	ldr	r1, [r4, #4]
 8018480:	4299      	cmp	r1, r3
 8018482:	bfde      	ittt	le
 8018484:	2330      	movle	r3, #48	@ 0x30
 8018486:	f806 3c01 	strble.w	r3, [r6, #-1]
 801848a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801848e:	1b92      	subs	r2, r2, r6
 8018490:	6122      	str	r2, [r4, #16]
 8018492:	f8cd a000 	str.w	sl, [sp]
 8018496:	464b      	mov	r3, r9
 8018498:	aa03      	add	r2, sp, #12
 801849a:	4621      	mov	r1, r4
 801849c:	4640      	mov	r0, r8
 801849e:	f7ff fee7 	bl	8018270 <_printf_common>
 80184a2:	3001      	adds	r0, #1
 80184a4:	d14a      	bne.n	801853c <_printf_i+0x1f0>
 80184a6:	f04f 30ff 	mov.w	r0, #4294967295
 80184aa:	b004      	add	sp, #16
 80184ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80184b0:	6823      	ldr	r3, [r4, #0]
 80184b2:	f043 0320 	orr.w	r3, r3, #32
 80184b6:	6023      	str	r3, [r4, #0]
 80184b8:	4832      	ldr	r0, [pc, #200]	@ (8018584 <_printf_i+0x238>)
 80184ba:	2778      	movs	r7, #120	@ 0x78
 80184bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80184c0:	6823      	ldr	r3, [r4, #0]
 80184c2:	6831      	ldr	r1, [r6, #0]
 80184c4:	061f      	lsls	r7, r3, #24
 80184c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80184ca:	d402      	bmi.n	80184d2 <_printf_i+0x186>
 80184cc:	065f      	lsls	r7, r3, #25
 80184ce:	bf48      	it	mi
 80184d0:	b2ad      	uxthmi	r5, r5
 80184d2:	6031      	str	r1, [r6, #0]
 80184d4:	07d9      	lsls	r1, r3, #31
 80184d6:	bf44      	itt	mi
 80184d8:	f043 0320 	orrmi.w	r3, r3, #32
 80184dc:	6023      	strmi	r3, [r4, #0]
 80184de:	b11d      	cbz	r5, 80184e8 <_printf_i+0x19c>
 80184e0:	2310      	movs	r3, #16
 80184e2:	e7ad      	b.n	8018440 <_printf_i+0xf4>
 80184e4:	4826      	ldr	r0, [pc, #152]	@ (8018580 <_printf_i+0x234>)
 80184e6:	e7e9      	b.n	80184bc <_printf_i+0x170>
 80184e8:	6823      	ldr	r3, [r4, #0]
 80184ea:	f023 0320 	bic.w	r3, r3, #32
 80184ee:	6023      	str	r3, [r4, #0]
 80184f0:	e7f6      	b.n	80184e0 <_printf_i+0x194>
 80184f2:	4616      	mov	r6, r2
 80184f4:	e7bd      	b.n	8018472 <_printf_i+0x126>
 80184f6:	6833      	ldr	r3, [r6, #0]
 80184f8:	6825      	ldr	r5, [r4, #0]
 80184fa:	6961      	ldr	r1, [r4, #20]
 80184fc:	1d18      	adds	r0, r3, #4
 80184fe:	6030      	str	r0, [r6, #0]
 8018500:	062e      	lsls	r6, r5, #24
 8018502:	681b      	ldr	r3, [r3, #0]
 8018504:	d501      	bpl.n	801850a <_printf_i+0x1be>
 8018506:	6019      	str	r1, [r3, #0]
 8018508:	e002      	b.n	8018510 <_printf_i+0x1c4>
 801850a:	0668      	lsls	r0, r5, #25
 801850c:	d5fb      	bpl.n	8018506 <_printf_i+0x1ba>
 801850e:	8019      	strh	r1, [r3, #0]
 8018510:	2300      	movs	r3, #0
 8018512:	6123      	str	r3, [r4, #16]
 8018514:	4616      	mov	r6, r2
 8018516:	e7bc      	b.n	8018492 <_printf_i+0x146>
 8018518:	6833      	ldr	r3, [r6, #0]
 801851a:	1d1a      	adds	r2, r3, #4
 801851c:	6032      	str	r2, [r6, #0]
 801851e:	681e      	ldr	r6, [r3, #0]
 8018520:	6862      	ldr	r2, [r4, #4]
 8018522:	2100      	movs	r1, #0
 8018524:	4630      	mov	r0, r6
 8018526:	f7e7 fe8b 	bl	8000240 <memchr>
 801852a:	b108      	cbz	r0, 8018530 <_printf_i+0x1e4>
 801852c:	1b80      	subs	r0, r0, r6
 801852e:	6060      	str	r0, [r4, #4]
 8018530:	6863      	ldr	r3, [r4, #4]
 8018532:	6123      	str	r3, [r4, #16]
 8018534:	2300      	movs	r3, #0
 8018536:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801853a:	e7aa      	b.n	8018492 <_printf_i+0x146>
 801853c:	6923      	ldr	r3, [r4, #16]
 801853e:	4632      	mov	r2, r6
 8018540:	4649      	mov	r1, r9
 8018542:	4640      	mov	r0, r8
 8018544:	47d0      	blx	sl
 8018546:	3001      	adds	r0, #1
 8018548:	d0ad      	beq.n	80184a6 <_printf_i+0x15a>
 801854a:	6823      	ldr	r3, [r4, #0]
 801854c:	079b      	lsls	r3, r3, #30
 801854e:	d413      	bmi.n	8018578 <_printf_i+0x22c>
 8018550:	68e0      	ldr	r0, [r4, #12]
 8018552:	9b03      	ldr	r3, [sp, #12]
 8018554:	4298      	cmp	r0, r3
 8018556:	bfb8      	it	lt
 8018558:	4618      	movlt	r0, r3
 801855a:	e7a6      	b.n	80184aa <_printf_i+0x15e>
 801855c:	2301      	movs	r3, #1
 801855e:	4632      	mov	r2, r6
 8018560:	4649      	mov	r1, r9
 8018562:	4640      	mov	r0, r8
 8018564:	47d0      	blx	sl
 8018566:	3001      	adds	r0, #1
 8018568:	d09d      	beq.n	80184a6 <_printf_i+0x15a>
 801856a:	3501      	adds	r5, #1
 801856c:	68e3      	ldr	r3, [r4, #12]
 801856e:	9903      	ldr	r1, [sp, #12]
 8018570:	1a5b      	subs	r3, r3, r1
 8018572:	42ab      	cmp	r3, r5
 8018574:	dcf2      	bgt.n	801855c <_printf_i+0x210>
 8018576:	e7eb      	b.n	8018550 <_printf_i+0x204>
 8018578:	2500      	movs	r5, #0
 801857a:	f104 0619 	add.w	r6, r4, #25
 801857e:	e7f5      	b.n	801856c <_printf_i+0x220>
 8018580:	0801c2c7 	.word	0x0801c2c7
 8018584:	0801c2d8 	.word	0x0801c2d8

08018588 <__sflush_r>:
 8018588:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801858c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018590:	0716      	lsls	r6, r2, #28
 8018592:	4605      	mov	r5, r0
 8018594:	460c      	mov	r4, r1
 8018596:	d454      	bmi.n	8018642 <__sflush_r+0xba>
 8018598:	684b      	ldr	r3, [r1, #4]
 801859a:	2b00      	cmp	r3, #0
 801859c:	dc02      	bgt.n	80185a4 <__sflush_r+0x1c>
 801859e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	dd48      	ble.n	8018636 <__sflush_r+0xae>
 80185a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80185a6:	2e00      	cmp	r6, #0
 80185a8:	d045      	beq.n	8018636 <__sflush_r+0xae>
 80185aa:	2300      	movs	r3, #0
 80185ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80185b0:	682f      	ldr	r7, [r5, #0]
 80185b2:	6a21      	ldr	r1, [r4, #32]
 80185b4:	602b      	str	r3, [r5, #0]
 80185b6:	d030      	beq.n	801861a <__sflush_r+0x92>
 80185b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80185ba:	89a3      	ldrh	r3, [r4, #12]
 80185bc:	0759      	lsls	r1, r3, #29
 80185be:	d505      	bpl.n	80185cc <__sflush_r+0x44>
 80185c0:	6863      	ldr	r3, [r4, #4]
 80185c2:	1ad2      	subs	r2, r2, r3
 80185c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80185c6:	b10b      	cbz	r3, 80185cc <__sflush_r+0x44>
 80185c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80185ca:	1ad2      	subs	r2, r2, r3
 80185cc:	2300      	movs	r3, #0
 80185ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80185d0:	6a21      	ldr	r1, [r4, #32]
 80185d2:	4628      	mov	r0, r5
 80185d4:	47b0      	blx	r6
 80185d6:	1c43      	adds	r3, r0, #1
 80185d8:	89a3      	ldrh	r3, [r4, #12]
 80185da:	d106      	bne.n	80185ea <__sflush_r+0x62>
 80185dc:	6829      	ldr	r1, [r5, #0]
 80185de:	291d      	cmp	r1, #29
 80185e0:	d82b      	bhi.n	801863a <__sflush_r+0xb2>
 80185e2:	4a2a      	ldr	r2, [pc, #168]	@ (801868c <__sflush_r+0x104>)
 80185e4:	40ca      	lsrs	r2, r1
 80185e6:	07d6      	lsls	r6, r2, #31
 80185e8:	d527      	bpl.n	801863a <__sflush_r+0xb2>
 80185ea:	2200      	movs	r2, #0
 80185ec:	6062      	str	r2, [r4, #4]
 80185ee:	04d9      	lsls	r1, r3, #19
 80185f0:	6922      	ldr	r2, [r4, #16]
 80185f2:	6022      	str	r2, [r4, #0]
 80185f4:	d504      	bpl.n	8018600 <__sflush_r+0x78>
 80185f6:	1c42      	adds	r2, r0, #1
 80185f8:	d101      	bne.n	80185fe <__sflush_r+0x76>
 80185fa:	682b      	ldr	r3, [r5, #0]
 80185fc:	b903      	cbnz	r3, 8018600 <__sflush_r+0x78>
 80185fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8018600:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018602:	602f      	str	r7, [r5, #0]
 8018604:	b1b9      	cbz	r1, 8018636 <__sflush_r+0xae>
 8018606:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801860a:	4299      	cmp	r1, r3
 801860c:	d002      	beq.n	8018614 <__sflush_r+0x8c>
 801860e:	4628      	mov	r0, r5
 8018610:	f7ff fb4a 	bl	8017ca8 <_free_r>
 8018614:	2300      	movs	r3, #0
 8018616:	6363      	str	r3, [r4, #52]	@ 0x34
 8018618:	e00d      	b.n	8018636 <__sflush_r+0xae>
 801861a:	2301      	movs	r3, #1
 801861c:	4628      	mov	r0, r5
 801861e:	47b0      	blx	r6
 8018620:	4602      	mov	r2, r0
 8018622:	1c50      	adds	r0, r2, #1
 8018624:	d1c9      	bne.n	80185ba <__sflush_r+0x32>
 8018626:	682b      	ldr	r3, [r5, #0]
 8018628:	2b00      	cmp	r3, #0
 801862a:	d0c6      	beq.n	80185ba <__sflush_r+0x32>
 801862c:	2b1d      	cmp	r3, #29
 801862e:	d001      	beq.n	8018634 <__sflush_r+0xac>
 8018630:	2b16      	cmp	r3, #22
 8018632:	d11e      	bne.n	8018672 <__sflush_r+0xea>
 8018634:	602f      	str	r7, [r5, #0]
 8018636:	2000      	movs	r0, #0
 8018638:	e022      	b.n	8018680 <__sflush_r+0xf8>
 801863a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801863e:	b21b      	sxth	r3, r3
 8018640:	e01b      	b.n	801867a <__sflush_r+0xf2>
 8018642:	690f      	ldr	r7, [r1, #16]
 8018644:	2f00      	cmp	r7, #0
 8018646:	d0f6      	beq.n	8018636 <__sflush_r+0xae>
 8018648:	0793      	lsls	r3, r2, #30
 801864a:	680e      	ldr	r6, [r1, #0]
 801864c:	bf08      	it	eq
 801864e:	694b      	ldreq	r3, [r1, #20]
 8018650:	600f      	str	r7, [r1, #0]
 8018652:	bf18      	it	ne
 8018654:	2300      	movne	r3, #0
 8018656:	eba6 0807 	sub.w	r8, r6, r7
 801865a:	608b      	str	r3, [r1, #8]
 801865c:	f1b8 0f00 	cmp.w	r8, #0
 8018660:	dde9      	ble.n	8018636 <__sflush_r+0xae>
 8018662:	6a21      	ldr	r1, [r4, #32]
 8018664:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018666:	4643      	mov	r3, r8
 8018668:	463a      	mov	r2, r7
 801866a:	4628      	mov	r0, r5
 801866c:	47b0      	blx	r6
 801866e:	2800      	cmp	r0, #0
 8018670:	dc08      	bgt.n	8018684 <__sflush_r+0xfc>
 8018672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801867a:	81a3      	strh	r3, [r4, #12]
 801867c:	f04f 30ff 	mov.w	r0, #4294967295
 8018680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018684:	4407      	add	r7, r0
 8018686:	eba8 0800 	sub.w	r8, r8, r0
 801868a:	e7e7      	b.n	801865c <__sflush_r+0xd4>
 801868c:	20400001 	.word	0x20400001

08018690 <_fflush_r>:
 8018690:	b538      	push	{r3, r4, r5, lr}
 8018692:	690b      	ldr	r3, [r1, #16]
 8018694:	4605      	mov	r5, r0
 8018696:	460c      	mov	r4, r1
 8018698:	b913      	cbnz	r3, 80186a0 <_fflush_r+0x10>
 801869a:	2500      	movs	r5, #0
 801869c:	4628      	mov	r0, r5
 801869e:	bd38      	pop	{r3, r4, r5, pc}
 80186a0:	b118      	cbz	r0, 80186aa <_fflush_r+0x1a>
 80186a2:	6a03      	ldr	r3, [r0, #32]
 80186a4:	b90b      	cbnz	r3, 80186aa <_fflush_r+0x1a>
 80186a6:	f7ff f90f 	bl	80178c8 <__sinit>
 80186aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	d0f3      	beq.n	801869a <_fflush_r+0xa>
 80186b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80186b4:	07d0      	lsls	r0, r2, #31
 80186b6:	d404      	bmi.n	80186c2 <_fflush_r+0x32>
 80186b8:	0599      	lsls	r1, r3, #22
 80186ba:	d402      	bmi.n	80186c2 <_fflush_r+0x32>
 80186bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80186be:	f7ff fae2 	bl	8017c86 <__retarget_lock_acquire_recursive>
 80186c2:	4628      	mov	r0, r5
 80186c4:	4621      	mov	r1, r4
 80186c6:	f7ff ff5f 	bl	8018588 <__sflush_r>
 80186ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80186cc:	07da      	lsls	r2, r3, #31
 80186ce:	4605      	mov	r5, r0
 80186d0:	d4e4      	bmi.n	801869c <_fflush_r+0xc>
 80186d2:	89a3      	ldrh	r3, [r4, #12]
 80186d4:	059b      	lsls	r3, r3, #22
 80186d6:	d4e1      	bmi.n	801869c <_fflush_r+0xc>
 80186d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80186da:	f7ff fad5 	bl	8017c88 <__retarget_lock_release_recursive>
 80186de:	e7dd      	b.n	801869c <_fflush_r+0xc>

080186e0 <__swbuf_r>:
 80186e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186e2:	460e      	mov	r6, r1
 80186e4:	4614      	mov	r4, r2
 80186e6:	4605      	mov	r5, r0
 80186e8:	b118      	cbz	r0, 80186f2 <__swbuf_r+0x12>
 80186ea:	6a03      	ldr	r3, [r0, #32]
 80186ec:	b90b      	cbnz	r3, 80186f2 <__swbuf_r+0x12>
 80186ee:	f7ff f8eb 	bl	80178c8 <__sinit>
 80186f2:	69a3      	ldr	r3, [r4, #24]
 80186f4:	60a3      	str	r3, [r4, #8]
 80186f6:	89a3      	ldrh	r3, [r4, #12]
 80186f8:	071a      	lsls	r2, r3, #28
 80186fa:	d501      	bpl.n	8018700 <__swbuf_r+0x20>
 80186fc:	6923      	ldr	r3, [r4, #16]
 80186fe:	b943      	cbnz	r3, 8018712 <__swbuf_r+0x32>
 8018700:	4621      	mov	r1, r4
 8018702:	4628      	mov	r0, r5
 8018704:	f000 f82a 	bl	801875c <__swsetup_r>
 8018708:	b118      	cbz	r0, 8018712 <__swbuf_r+0x32>
 801870a:	f04f 37ff 	mov.w	r7, #4294967295
 801870e:	4638      	mov	r0, r7
 8018710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018712:	6823      	ldr	r3, [r4, #0]
 8018714:	6922      	ldr	r2, [r4, #16]
 8018716:	1a98      	subs	r0, r3, r2
 8018718:	6963      	ldr	r3, [r4, #20]
 801871a:	b2f6      	uxtb	r6, r6
 801871c:	4283      	cmp	r3, r0
 801871e:	4637      	mov	r7, r6
 8018720:	dc05      	bgt.n	801872e <__swbuf_r+0x4e>
 8018722:	4621      	mov	r1, r4
 8018724:	4628      	mov	r0, r5
 8018726:	f7ff ffb3 	bl	8018690 <_fflush_r>
 801872a:	2800      	cmp	r0, #0
 801872c:	d1ed      	bne.n	801870a <__swbuf_r+0x2a>
 801872e:	68a3      	ldr	r3, [r4, #8]
 8018730:	3b01      	subs	r3, #1
 8018732:	60a3      	str	r3, [r4, #8]
 8018734:	6823      	ldr	r3, [r4, #0]
 8018736:	1c5a      	adds	r2, r3, #1
 8018738:	6022      	str	r2, [r4, #0]
 801873a:	701e      	strb	r6, [r3, #0]
 801873c:	6962      	ldr	r2, [r4, #20]
 801873e:	1c43      	adds	r3, r0, #1
 8018740:	429a      	cmp	r2, r3
 8018742:	d004      	beq.n	801874e <__swbuf_r+0x6e>
 8018744:	89a3      	ldrh	r3, [r4, #12]
 8018746:	07db      	lsls	r3, r3, #31
 8018748:	d5e1      	bpl.n	801870e <__swbuf_r+0x2e>
 801874a:	2e0a      	cmp	r6, #10
 801874c:	d1df      	bne.n	801870e <__swbuf_r+0x2e>
 801874e:	4621      	mov	r1, r4
 8018750:	4628      	mov	r0, r5
 8018752:	f7ff ff9d 	bl	8018690 <_fflush_r>
 8018756:	2800      	cmp	r0, #0
 8018758:	d0d9      	beq.n	801870e <__swbuf_r+0x2e>
 801875a:	e7d6      	b.n	801870a <__swbuf_r+0x2a>

0801875c <__swsetup_r>:
 801875c:	b538      	push	{r3, r4, r5, lr}
 801875e:	4b29      	ldr	r3, [pc, #164]	@ (8018804 <__swsetup_r+0xa8>)
 8018760:	4605      	mov	r5, r0
 8018762:	6818      	ldr	r0, [r3, #0]
 8018764:	460c      	mov	r4, r1
 8018766:	b118      	cbz	r0, 8018770 <__swsetup_r+0x14>
 8018768:	6a03      	ldr	r3, [r0, #32]
 801876a:	b90b      	cbnz	r3, 8018770 <__swsetup_r+0x14>
 801876c:	f7ff f8ac 	bl	80178c8 <__sinit>
 8018770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018774:	0719      	lsls	r1, r3, #28
 8018776:	d422      	bmi.n	80187be <__swsetup_r+0x62>
 8018778:	06da      	lsls	r2, r3, #27
 801877a:	d407      	bmi.n	801878c <__swsetup_r+0x30>
 801877c:	2209      	movs	r2, #9
 801877e:	602a      	str	r2, [r5, #0]
 8018780:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018784:	81a3      	strh	r3, [r4, #12]
 8018786:	f04f 30ff 	mov.w	r0, #4294967295
 801878a:	e033      	b.n	80187f4 <__swsetup_r+0x98>
 801878c:	0758      	lsls	r0, r3, #29
 801878e:	d512      	bpl.n	80187b6 <__swsetup_r+0x5a>
 8018790:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018792:	b141      	cbz	r1, 80187a6 <__swsetup_r+0x4a>
 8018794:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018798:	4299      	cmp	r1, r3
 801879a:	d002      	beq.n	80187a2 <__swsetup_r+0x46>
 801879c:	4628      	mov	r0, r5
 801879e:	f7ff fa83 	bl	8017ca8 <_free_r>
 80187a2:	2300      	movs	r3, #0
 80187a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80187a6:	89a3      	ldrh	r3, [r4, #12]
 80187a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80187ac:	81a3      	strh	r3, [r4, #12]
 80187ae:	2300      	movs	r3, #0
 80187b0:	6063      	str	r3, [r4, #4]
 80187b2:	6923      	ldr	r3, [r4, #16]
 80187b4:	6023      	str	r3, [r4, #0]
 80187b6:	89a3      	ldrh	r3, [r4, #12]
 80187b8:	f043 0308 	orr.w	r3, r3, #8
 80187bc:	81a3      	strh	r3, [r4, #12]
 80187be:	6923      	ldr	r3, [r4, #16]
 80187c0:	b94b      	cbnz	r3, 80187d6 <__swsetup_r+0x7a>
 80187c2:	89a3      	ldrh	r3, [r4, #12]
 80187c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80187c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80187cc:	d003      	beq.n	80187d6 <__swsetup_r+0x7a>
 80187ce:	4621      	mov	r1, r4
 80187d0:	4628      	mov	r0, r5
 80187d2:	f000 f887 	bl	80188e4 <__smakebuf_r>
 80187d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80187da:	f013 0201 	ands.w	r2, r3, #1
 80187de:	d00a      	beq.n	80187f6 <__swsetup_r+0x9a>
 80187e0:	2200      	movs	r2, #0
 80187e2:	60a2      	str	r2, [r4, #8]
 80187e4:	6962      	ldr	r2, [r4, #20]
 80187e6:	4252      	negs	r2, r2
 80187e8:	61a2      	str	r2, [r4, #24]
 80187ea:	6922      	ldr	r2, [r4, #16]
 80187ec:	b942      	cbnz	r2, 8018800 <__swsetup_r+0xa4>
 80187ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80187f2:	d1c5      	bne.n	8018780 <__swsetup_r+0x24>
 80187f4:	bd38      	pop	{r3, r4, r5, pc}
 80187f6:	0799      	lsls	r1, r3, #30
 80187f8:	bf58      	it	pl
 80187fa:	6962      	ldrpl	r2, [r4, #20]
 80187fc:	60a2      	str	r2, [r4, #8]
 80187fe:	e7f4      	b.n	80187ea <__swsetup_r+0x8e>
 8018800:	2000      	movs	r0, #0
 8018802:	e7f7      	b.n	80187f4 <__swsetup_r+0x98>
 8018804:	20000084 	.word	0x20000084

08018808 <memmove>:
 8018808:	4288      	cmp	r0, r1
 801880a:	b510      	push	{r4, lr}
 801880c:	eb01 0402 	add.w	r4, r1, r2
 8018810:	d902      	bls.n	8018818 <memmove+0x10>
 8018812:	4284      	cmp	r4, r0
 8018814:	4623      	mov	r3, r4
 8018816:	d807      	bhi.n	8018828 <memmove+0x20>
 8018818:	1e43      	subs	r3, r0, #1
 801881a:	42a1      	cmp	r1, r4
 801881c:	d008      	beq.n	8018830 <memmove+0x28>
 801881e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018822:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018826:	e7f8      	b.n	801881a <memmove+0x12>
 8018828:	4402      	add	r2, r0
 801882a:	4601      	mov	r1, r0
 801882c:	428a      	cmp	r2, r1
 801882e:	d100      	bne.n	8018832 <memmove+0x2a>
 8018830:	bd10      	pop	{r4, pc}
 8018832:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018836:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801883a:	e7f7      	b.n	801882c <memmove+0x24>

0801883c <_realloc_r>:
 801883c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018840:	4607      	mov	r7, r0
 8018842:	4614      	mov	r4, r2
 8018844:	460d      	mov	r5, r1
 8018846:	b921      	cbnz	r1, 8018852 <_realloc_r+0x16>
 8018848:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801884c:	4611      	mov	r1, r2
 801884e:	f7fe bf23 	b.w	8017698 <_malloc_r>
 8018852:	b92a      	cbnz	r2, 8018860 <_realloc_r+0x24>
 8018854:	f7ff fa28 	bl	8017ca8 <_free_r>
 8018858:	4625      	mov	r5, r4
 801885a:	4628      	mov	r0, r5
 801885c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018860:	f000 f89e 	bl	80189a0 <_malloc_usable_size_r>
 8018864:	4284      	cmp	r4, r0
 8018866:	4606      	mov	r6, r0
 8018868:	d802      	bhi.n	8018870 <_realloc_r+0x34>
 801886a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801886e:	d8f4      	bhi.n	801885a <_realloc_r+0x1e>
 8018870:	4621      	mov	r1, r4
 8018872:	4638      	mov	r0, r7
 8018874:	f7fe ff10 	bl	8017698 <_malloc_r>
 8018878:	4680      	mov	r8, r0
 801887a:	b908      	cbnz	r0, 8018880 <_realloc_r+0x44>
 801887c:	4645      	mov	r5, r8
 801887e:	e7ec      	b.n	801885a <_realloc_r+0x1e>
 8018880:	42b4      	cmp	r4, r6
 8018882:	4622      	mov	r2, r4
 8018884:	4629      	mov	r1, r5
 8018886:	bf28      	it	cs
 8018888:	4632      	movcs	r2, r6
 801888a:	f7ff f9fe 	bl	8017c8a <memcpy>
 801888e:	4629      	mov	r1, r5
 8018890:	4638      	mov	r0, r7
 8018892:	f7ff fa09 	bl	8017ca8 <_free_r>
 8018896:	e7f1      	b.n	801887c <_realloc_r+0x40>

08018898 <__swhatbuf_r>:
 8018898:	b570      	push	{r4, r5, r6, lr}
 801889a:	460c      	mov	r4, r1
 801889c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80188a0:	2900      	cmp	r1, #0
 80188a2:	b096      	sub	sp, #88	@ 0x58
 80188a4:	4615      	mov	r5, r2
 80188a6:	461e      	mov	r6, r3
 80188a8:	da0d      	bge.n	80188c6 <__swhatbuf_r+0x2e>
 80188aa:	89a3      	ldrh	r3, [r4, #12]
 80188ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80188b0:	f04f 0100 	mov.w	r1, #0
 80188b4:	bf14      	ite	ne
 80188b6:	2340      	movne	r3, #64	@ 0x40
 80188b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80188bc:	2000      	movs	r0, #0
 80188be:	6031      	str	r1, [r6, #0]
 80188c0:	602b      	str	r3, [r5, #0]
 80188c2:	b016      	add	sp, #88	@ 0x58
 80188c4:	bd70      	pop	{r4, r5, r6, pc}
 80188c6:	466a      	mov	r2, sp
 80188c8:	f000 f848 	bl	801895c <_fstat_r>
 80188cc:	2800      	cmp	r0, #0
 80188ce:	dbec      	blt.n	80188aa <__swhatbuf_r+0x12>
 80188d0:	9901      	ldr	r1, [sp, #4]
 80188d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80188d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80188da:	4259      	negs	r1, r3
 80188dc:	4159      	adcs	r1, r3
 80188de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80188e2:	e7eb      	b.n	80188bc <__swhatbuf_r+0x24>

080188e4 <__smakebuf_r>:
 80188e4:	898b      	ldrh	r3, [r1, #12]
 80188e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80188e8:	079d      	lsls	r5, r3, #30
 80188ea:	4606      	mov	r6, r0
 80188ec:	460c      	mov	r4, r1
 80188ee:	d507      	bpl.n	8018900 <__smakebuf_r+0x1c>
 80188f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80188f4:	6023      	str	r3, [r4, #0]
 80188f6:	6123      	str	r3, [r4, #16]
 80188f8:	2301      	movs	r3, #1
 80188fa:	6163      	str	r3, [r4, #20]
 80188fc:	b003      	add	sp, #12
 80188fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018900:	ab01      	add	r3, sp, #4
 8018902:	466a      	mov	r2, sp
 8018904:	f7ff ffc8 	bl	8018898 <__swhatbuf_r>
 8018908:	9f00      	ldr	r7, [sp, #0]
 801890a:	4605      	mov	r5, r0
 801890c:	4639      	mov	r1, r7
 801890e:	4630      	mov	r0, r6
 8018910:	f7fe fec2 	bl	8017698 <_malloc_r>
 8018914:	b948      	cbnz	r0, 801892a <__smakebuf_r+0x46>
 8018916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801891a:	059a      	lsls	r2, r3, #22
 801891c:	d4ee      	bmi.n	80188fc <__smakebuf_r+0x18>
 801891e:	f023 0303 	bic.w	r3, r3, #3
 8018922:	f043 0302 	orr.w	r3, r3, #2
 8018926:	81a3      	strh	r3, [r4, #12]
 8018928:	e7e2      	b.n	80188f0 <__smakebuf_r+0xc>
 801892a:	89a3      	ldrh	r3, [r4, #12]
 801892c:	6020      	str	r0, [r4, #0]
 801892e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018932:	81a3      	strh	r3, [r4, #12]
 8018934:	9b01      	ldr	r3, [sp, #4]
 8018936:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801893a:	b15b      	cbz	r3, 8018954 <__smakebuf_r+0x70>
 801893c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018940:	4630      	mov	r0, r6
 8018942:	f000 f81d 	bl	8018980 <_isatty_r>
 8018946:	b128      	cbz	r0, 8018954 <__smakebuf_r+0x70>
 8018948:	89a3      	ldrh	r3, [r4, #12]
 801894a:	f023 0303 	bic.w	r3, r3, #3
 801894e:	f043 0301 	orr.w	r3, r3, #1
 8018952:	81a3      	strh	r3, [r4, #12]
 8018954:	89a3      	ldrh	r3, [r4, #12]
 8018956:	431d      	orrs	r5, r3
 8018958:	81a5      	strh	r5, [r4, #12]
 801895a:	e7cf      	b.n	80188fc <__smakebuf_r+0x18>

0801895c <_fstat_r>:
 801895c:	b538      	push	{r3, r4, r5, lr}
 801895e:	4d07      	ldr	r5, [pc, #28]	@ (801897c <_fstat_r+0x20>)
 8018960:	2300      	movs	r3, #0
 8018962:	4604      	mov	r4, r0
 8018964:	4608      	mov	r0, r1
 8018966:	4611      	mov	r1, r2
 8018968:	602b      	str	r3, [r5, #0]
 801896a:	f7ec fdd8 	bl	800551e <_fstat>
 801896e:	1c43      	adds	r3, r0, #1
 8018970:	d102      	bne.n	8018978 <_fstat_r+0x1c>
 8018972:	682b      	ldr	r3, [r5, #0]
 8018974:	b103      	cbz	r3, 8018978 <_fstat_r+0x1c>
 8018976:	6023      	str	r3, [r4, #0]
 8018978:	bd38      	pop	{r3, r4, r5, pc}
 801897a:	bf00      	nop
 801897c:	200131a8 	.word	0x200131a8

08018980 <_isatty_r>:
 8018980:	b538      	push	{r3, r4, r5, lr}
 8018982:	4d06      	ldr	r5, [pc, #24]	@ (801899c <_isatty_r+0x1c>)
 8018984:	2300      	movs	r3, #0
 8018986:	4604      	mov	r4, r0
 8018988:	4608      	mov	r0, r1
 801898a:	602b      	str	r3, [r5, #0]
 801898c:	f7ec fdd7 	bl	800553e <_isatty>
 8018990:	1c43      	adds	r3, r0, #1
 8018992:	d102      	bne.n	801899a <_isatty_r+0x1a>
 8018994:	682b      	ldr	r3, [r5, #0]
 8018996:	b103      	cbz	r3, 801899a <_isatty_r+0x1a>
 8018998:	6023      	str	r3, [r4, #0]
 801899a:	bd38      	pop	{r3, r4, r5, pc}
 801899c:	200131a8 	.word	0x200131a8

080189a0 <_malloc_usable_size_r>:
 80189a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80189a4:	1f18      	subs	r0, r3, #4
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	bfbc      	itt	lt
 80189aa:	580b      	ldrlt	r3, [r1, r0]
 80189ac:	18c0      	addlt	r0, r0, r3
 80189ae:	4770      	bx	lr

080189b0 <_init>:
 80189b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189b2:	bf00      	nop
 80189b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80189b6:	bc08      	pop	{r3}
 80189b8:	469e      	mov	lr, r3
 80189ba:	4770      	bx	lr

080189bc <_fini>:
 80189bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189be:	bf00      	nop
 80189c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80189c2:	bc08      	pop	{r3}
 80189c4:	469e      	mov	lr, r3
 80189c6:	4770      	bx	lr
