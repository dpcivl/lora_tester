
lora_tester_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000198a0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003bfc  08019a70  08019a70  0001aa70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d66c  0801d66c  0001f218  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801d66c  0801d66c  0001e66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d674  0801d674  0001f218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d674  0801d674  0001e674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801d678  0801d678  0001e678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d8  20000000  0801d67c  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000d8  0801d754  0001f0d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000178  0801d7f4  0001f178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000121d0  20000220  0801d894  0001f220  2**5
                  ALLOC
 12 ._user_heap_stack 00000600  200123f0  0801d894  0001f3f0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001f218  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004377d  00000000  00000000  0001f248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000093f1  00000000  00000000  000629c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003900  00000000  00000000  0006bdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002c79  00000000  00000000  0006f6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00038513  00000000  00000000  00072331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004ca76  00000000  00000000  000aa844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012fa3d  00000000  00000000  000f72ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00226cf7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000fe50  00000000  00000000  00226d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000082  00000000  00000000  00236b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08019a58 	.word	0x08019a58

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	08019a58 	.word	0x08019a58

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <CommandSender_Send>:
#include <stddef.h>
#include <string.h>
#include <stdio.h>

void CommandSender_Send(const char* command)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	@ 0x58
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    if (command != NULL) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d04c      	beq.n	80006b4 <CommandSender_Send+0xa8>
        int len = strlen(command);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fe02 	bl	8000224 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	653b      	str	r3, [r7, #80]	@ 0x50
        
        // 전송할 명령어를 명확히 로깅 (특수 문자도 표시)
        LOG_INFO("📤 TX: '%s' (%d bytes)", command, len);
 8000624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	4926      	ldr	r1, [pc, #152]	@ (80006c4 <CommandSender_Send+0xb8>)
 800062a:	2001      	movs	r0, #1
 800062c:	f005 fb86 	bl	8005d3c <LOGGER_SendFormatted>
        
        // 헥스 덤프도 표시 (처음 20바이트까지)
        if (len > 0) {
 8000630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000632:	2b00      	cmp	r3, #0
 8000634:	dd2c      	ble.n	8000690 <CommandSender_Send+0x84>
            char hex_dump[64] = {0};
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	2240      	movs	r2, #64	@ 0x40
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f017 fe38 	bl	80182b4 <memset>
            int dump_len = (len > 20) ? 20 : len;
 8000644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000646:	2b14      	cmp	r3, #20
 8000648:	bfa8      	it	ge
 800064a:	2314      	movge	r3, #20
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (int i = 0; i < dump_len; i++) {
 800064e:	2300      	movs	r3, #0
 8000650:	657b      	str	r3, [r7, #84]	@ 0x54
 8000652:	e012      	b.n	800067a <CommandSender_Send+0x6e>
                snprintf(hex_dump + i*3, 4, "%02X ", (unsigned char)command[i]);
 8000654:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	461a      	mov	r2, r3
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	1898      	adds	r0, r3, r2
 8000664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4a16      	ldr	r2, [pc, #88]	@ (80006c8 <CommandSender_Send+0xbc>)
 800066e:	2104      	movs	r1, #4
 8000670:	f017 fd1a 	bl	80180a8 <sniprintf>
            for (int i = 0; i < dump_len; i++) {
 8000674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000676:	3301      	adds	r3, #1
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
 800067a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800067c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800067e:	429a      	cmp	r2, r3
 8000680:	dbe8      	blt.n	8000654 <CommandSender_Send+0x48>
            }
            LOG_DEBUG("[CommandSender] Hex: %s", hex_dump);
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	461a      	mov	r2, r3
 8000688:	4910      	ldr	r1, [pc, #64]	@ (80006cc <CommandSender_Send+0xc0>)
 800068a:	2000      	movs	r0, #0
 800068c:	f005 fb56 	bl	8005d3c <LOGGER_SendFormatted>
        }
        
        UartStatus status = UART_Send(command);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f005 fd4b 	bl	800612c <UART_Send>
 8000696:	64b8      	str	r0, [r7, #72]	@ 0x48
        
        if (status == UART_STATUS_OK) {
 8000698:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800069a:	2b00      	cmp	r3, #0
 800069c:	d104      	bne.n	80006a8 <CommandSender_Send+0x9c>
            LOG_DEBUG("[CommandSender] ✓ Command sent successfully");
 800069e:	490c      	ldr	r1, [pc, #48]	@ (80006d0 <CommandSender_Send+0xc4>)
 80006a0:	2000      	movs	r0, #0
 80006a2:	f005 fb4b 	bl	8005d3c <LOGGER_SendFormatted>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
        }
    } else {
        LOG_WARN("[CommandSender] Attempted to send NULL command");
    }
}
 80006a6:	e009      	b.n	80006bc <CommandSender_Send+0xb0>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
 80006a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80006aa:	490a      	ldr	r1, [pc, #40]	@ (80006d4 <CommandSender_Send+0xc8>)
 80006ac:	2003      	movs	r0, #3
 80006ae:	f005 fb45 	bl	8005d3c <LOGGER_SendFormatted>
}
 80006b2:	e003      	b.n	80006bc <CommandSender_Send+0xb0>
        LOG_WARN("[CommandSender] Attempted to send NULL command");
 80006b4:	4908      	ldr	r1, [pc, #32]	@ (80006d8 <CommandSender_Send+0xcc>)
 80006b6:	2002      	movs	r0, #2
 80006b8:	f005 fb40 	bl	8005d3c <LOGGER_SendFormatted>
}
 80006bc:	bf00      	nop
 80006be:	3758      	adds	r7, #88	@ 0x58
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	08019a70 	.word	0x08019a70
 80006c8:	08019a8c 	.word	0x08019a8c
 80006cc:	08019a94 	.word	0x08019a94
 80006d0:	08019aac 	.word	0x08019aac
 80006d4:	08019adc 	.word	0x08019adc
 80006d8:	08019b14 	.word	0x08019b14

080006dc <get_state_name>:

// 순차 메시지 번호 (JOIN마다 리셋됨)
static int g_message_number = 1;

// 상태 이름을 문자열로 변환하는 헬퍼 함수
static const char* get_state_name(LoraState state) {
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	2b0f      	cmp	r3, #15
 80006ea:	d843      	bhi.n	8000774 <get_state_name+0x98>
 80006ec:	a201      	add	r2, pc, #4	@ (adr r2, 80006f4 <get_state_name+0x18>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	08000735 	.word	0x08000735
 80006f8:	08000739 	.word	0x08000739
 80006fc:	0800073d 	.word	0x0800073d
 8000700:	08000741 	.word	0x08000741
 8000704:	08000745 	.word	0x08000745
 8000708:	08000749 	.word	0x08000749
 800070c:	0800074d 	.word	0x0800074d
 8000710:	08000751 	.word	0x08000751
 8000714:	08000755 	.word	0x08000755
 8000718:	08000759 	.word	0x08000759
 800071c:	0800075d 	.word	0x0800075d
 8000720:	08000761 	.word	0x08000761
 8000724:	08000765 	.word	0x08000765
 8000728:	08000769 	.word	0x08000769
 800072c:	0800076d 	.word	0x0800076d
 8000730:	08000771 	.word	0x08000771
        case LORA_STATE_INIT: return "INIT";
 8000734:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <get_state_name+0xa8>)
 8000736:	e01e      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_SEND_CMD: return "SEND_CMD";
 8000738:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <get_state_name+0xac>)
 800073a:	e01c      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_WAIT_OK: return "WAIT_OK";
 800073c:	4b13      	ldr	r3, [pc, #76]	@ (800078c <get_state_name+0xb0>)
 800073e:	e01a      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_SEND_JOIN: return "SEND_JOIN";
 8000740:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <get_state_name+0xb4>)
 8000742:	e018      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_WAIT_JOIN_OK: return "WAIT_JOIN_OK";
 8000744:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <get_state_name+0xb8>)
 8000746:	e016      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_SEND_TIMEREQ: return "SEND_TIMEREQ";
 8000748:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <get_state_name+0xbc>)
 800074a:	e014      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_WAIT_TIMEREQ_OK: return "WAIT_TIMEREQ_OK";
 800074c:	4b13      	ldr	r3, [pc, #76]	@ (800079c <get_state_name+0xc0>)
 800074e:	e012      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_WAIT_TIME_SYNC: return "WAIT_TIME_SYNC";
 8000750:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <get_state_name+0xc4>)
 8000752:	e010      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_SEND_LTIME: return "SEND_LTIME";
 8000754:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <get_state_name+0xc8>)
 8000756:	e00e      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_WAIT_LTIME_RESPONSE: return "WAIT_LTIME_RESPONSE";
 8000758:	4b13      	ldr	r3, [pc, #76]	@ (80007a8 <get_state_name+0xcc>)
 800075a:	e00c      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_SEND_PERIODIC: return "SEND_PERIODIC";
 800075c:	4b13      	ldr	r3, [pc, #76]	@ (80007ac <get_state_name+0xd0>)
 800075e:	e00a      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_WAIT_SEND_RESPONSE: return "WAIT_SEND_RESPONSE";
 8000760:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <get_state_name+0xd4>)
 8000762:	e008      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_WAIT_SEND_INTERVAL: return "WAIT_SEND_INTERVAL";
 8000764:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <get_state_name+0xd8>)
 8000766:	e006      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_JOIN_RETRY: return "JOIN_RETRY";
 8000768:	4b13      	ldr	r3, [pc, #76]	@ (80007b8 <get_state_name+0xdc>)
 800076a:	e004      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_DONE: return "DONE";
 800076c:	4b13      	ldr	r3, [pc, #76]	@ (80007bc <get_state_name+0xe0>)
 800076e:	e002      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_ERROR: return "ERROR";
 8000770:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <get_state_name+0xe4>)
 8000772:	e000      	b.n	8000776 <get_state_name+0x9a>
        default: return "UNKNOWN";
 8000774:	4b13      	ldr	r3, [pc, #76]	@ (80007c4 <get_state_name+0xe8>)
    }
}
 8000776:	4618      	mov	r0, r3
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	08019b80 	.word	0x08019b80
 8000788:	08019b88 	.word	0x08019b88
 800078c:	08019b94 	.word	0x08019b94
 8000790:	08019b9c 	.word	0x08019b9c
 8000794:	08019ba8 	.word	0x08019ba8
 8000798:	08019bb8 	.word	0x08019bb8
 800079c:	08019bc8 	.word	0x08019bc8
 80007a0:	08019bd8 	.word	0x08019bd8
 80007a4:	08019be8 	.word	0x08019be8
 80007a8:	08019bf4 	.word	0x08019bf4
 80007ac:	08019c08 	.word	0x08019c08
 80007b0:	08019c18 	.word	0x08019c18
 80007b4:	08019c2c 	.word	0x08019c2c
 80007b8:	08019c40 	.word	0x08019c40
 80007bc:	08019c4c 	.word	0x08019c4c
 80007c0:	08019c54 	.word	0x08019c54
 80007c4:	08019c5c 	.word	0x08019c5c

080007c8 <LoraStarter_InitWithDefaults>:
    UART_Connect(port);
    LOG_INFO("[LoRa] UART connected to %s", port);
}

void LoraStarter_InitWithDefaults(LoraStarterContext* ctx, const char* send_message)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d032      	beq.n	800083e <LoraStarter_InitWithDefaults+0x76>
    
    ctx->state = LORA_STATE_INIT;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
    ctx->cmd_index = 0;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2200      	movs	r2, #0
 80007e2:	605a      	str	r2, [r3, #4]
    ctx->commands = LORA_DEFAULT_INIT_COMMANDS;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a18      	ldr	r2, [pc, #96]	@ (8000848 <LoraStarter_InitWithDefaults+0x80>)
 80007e8:	609a      	str	r2, [r3, #8]
    ctx->num_commands = LORA_DEFAULT_INIT_COMMANDS_COUNT;
 80007ea:	2205      	movs	r2, #5
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	60da      	str	r2, [r3, #12]
    ctx->send_message = (send_message != NULL) ? send_message : "TEST";
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <LoraStarter_InitWithDefaults+0x32>
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	e000      	b.n	80007fc <LoraStarter_InitWithDefaults+0x34>
 80007fa:	4b14      	ldr	r3, [pc, #80]	@ (800084c <LoraStarter_InitWithDefaults+0x84>)
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	61d3      	str	r3, [r2, #28]
    ctx->max_retry_count = LORA_MAX_RETRY_COUNT;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	@ 0x24
    ctx->send_interval_ms = LORA_SEND_INTERVAL_MS;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4a11      	ldr	r2, [pc, #68]	@ (8000850 <LoraStarter_InitWithDefaults+0x88>)
 800080a:	615a      	str	r2, [r3, #20]
    ctx->last_send_time = 0;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
    ctx->send_count = 0;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
    ctx->error_count = 0;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
    ctx->last_retry_time = 0;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	@ 0x28
    ctx->retry_delay_ms = LORA_RETRY_DELAY_MS;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800082a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    LOG_INFO("[LoRa] Initialized with defaults - Commands: %d, Message: %s", 
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	68da      	ldr	r2, [r3, #12]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	69db      	ldr	r3, [r3, #28]
 8000834:	4907      	ldr	r1, [pc, #28]	@ (8000854 <LoraStarter_InitWithDefaults+0x8c>)
 8000836:	2001      	movs	r0, #1
 8000838:	f005 fa80 	bl	8005d3c <LOGGER_SendFormatted>
 800083c:	e000      	b.n	8000840 <LoraStarter_InitWithDefaults+0x78>
    if (ctx == NULL) return;
 800083e:	bf00      	nop
             ctx->num_commands, ctx->send_message);
}
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000000 	.word	0x20000000
 800084c:	08019c80 	.word	0x08019c80
 8000850:	000493e0 	.word	0x000493e0
 8000854:	08019c88 	.word	0x08019c88

08000858 <LoraStarter_Process>:

void LoraStarter_Process(LoraStarterContext* ctx, const char* uart_rx)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b0c3      	sub	sp, #268	@ 0x10c
 800085c:	af02      	add	r7, sp, #8
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000864:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000868:	6019      	str	r1, [r3, #0]
    if (ctx == NULL) return;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2b00      	cmp	r3, #0
 800086e:	f000 83a8 	beq.w	8000fc2 <LoraStarter_Process+0x76a>

    LoraState old_state = ctx->state;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb

    switch(ctx->state) {
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b0d      	cmp	r3, #13
 8000880:	f200 837c 	bhi.w	8000f7c <LoraStarter_Process+0x724>
 8000884:	a201      	add	r2, pc, #4	@ (adr r2, 800088c <LoraStarter_Process+0x34>)
 8000886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088a:	bf00      	nop
 800088c:	080008c5 	.word	0x080008c5
 8000890:	08000913 	.word	0x08000913
 8000894:	08000969 	.word	0x08000969
 8000898:	08000a4b 	.word	0x08000a4b
 800089c:	08000a61 	.word	0x08000a61
 80008a0:	08000ab7 	.word	0x08000ab7
 80008a4:	08000acd 	.word	0x08000acd
 80008a8:	08000b0d 	.word	0x08000b0d
 80008ac:	08000b61 	.word	0x08000b61
 80008b0:	08000bc9 	.word	0x08000bc9
 80008b4:	08000c5f 	.word	0x08000c5f
 80008b8:	08000d3b 	.word	0x08000d3b
 80008bc:	08000e43 	.word	0x08000e43
 80008c0:	08000f09 	.word	0x08000f09
        case LORA_STATE_INIT:
            ctx->cmd_index = 0;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2200      	movs	r2, #0
 80008c8:	605a      	str	r2, [r3, #4]
            ctx->error_count = 0;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
            ctx->state = LORA_STATE_SEND_CMD;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2201      	movs	r2, #1
 80008d4:	701a      	strb	r2, [r3, #0]
            // 기본값 설정
            if (ctx->max_retry_count == 0) ctx->max_retry_count = 0; // 0이면 무제한
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d102      	bne.n	80008e4 <LoraStarter_Process+0x8c>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2200      	movs	r2, #0
 80008e2:	625a      	str	r2, [r3, #36]	@ 0x24
            if (ctx->send_message == NULL) ctx->send_message = "Hello";
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	69db      	ldr	r3, [r3, #28]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d102      	bne.n	80008f2 <LoraStarter_Process+0x9a>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4aa2      	ldr	r2, [pc, #648]	@ (8000b78 <LoraStarter_Process+0x320>)
 80008f0:	61da      	str	r2, [r3, #28]
            ctx->last_retry_time = 0;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2200      	movs	r2, #0
 80008f6:	629a      	str	r2, [r3, #40]	@ 0x28
            ctx->retry_delay_ms = 1000; // 초기 재시도 지연: 1초
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008fe:	62da      	str	r2, [r3, #44]	@ 0x2c
            LOG_INFO("[LoRa] Initialized with message: %s, max_retries: %d", 
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	69da      	ldr	r2, [r3, #28]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000908:	499c      	ldr	r1, [pc, #624]	@ (8000b7c <LoraStarter_Process+0x324>)
 800090a:	2001      	movs	r0, #1
 800090c:	f005 fa16 	bl	8005d3c <LOGGER_SendFormatted>
                    ctx->send_message, ctx->max_retry_count);
            break;
 8000910:	e33f      	b.n	8000f92 <LoraStarter_Process+0x73a>
        case LORA_STATE_SEND_CMD:
            if (ctx->cmd_index < ctx->num_commands) {
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	685a      	ldr	r2, [r3, #4]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	68db      	ldr	r3, [r3, #12]
 800091a:	429a      	cmp	r2, r3
 800091c:	da20      	bge.n	8000960 <LoraStarter_Process+0x108>
                LOG_DEBUG("[LoRa] Sending command %d/%d: %s", 
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	1c59      	adds	r1, r3, #1
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	68d8      	ldr	r0, [r3, #12]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	689a      	ldr	r2, [r3, #8]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	4413      	add	r3, r2
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	4603      	mov	r3, r0
 800093a:	460a      	mov	r2, r1
 800093c:	4990      	ldr	r1, [pc, #576]	@ (8000b80 <LoraStarter_Process+0x328>)
 800093e:	2000      	movs	r0, #0
 8000940:	f005 f9fc 	bl	8005d3c <LOGGER_SendFormatted>
                         ctx->cmd_index + 1, ctx->num_commands, ctx->commands[ctx->cmd_index]);
                CommandSender_Send(ctx->commands[ctx->cmd_index]);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	689a      	ldr	r2, [r3, #8]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	4413      	add	r3, r2
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fe5a 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_OK;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2202      	movs	r2, #2
 800095c:	701a      	strb	r2, [r3, #0]
            } else {
                ctx->state = LORA_STATE_SEND_JOIN;
            }
            break;
 800095e:	e318      	b.n	8000f92 <LoraStarter_Process+0x73a>
                ctx->state = LORA_STATE_SEND_JOIN;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2203      	movs	r2, #3
 8000964:	701a      	strb	r2, [r3, #0]
            break;
 8000966:	e314      	b.n	8000f92 <LoraStarter_Process+0x73a>
        case LORA_STATE_WAIT_OK:
            if (uart_rx) {
 8000968:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800096c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	f000 8304 	beq.w	8000f80 <LoraStarter_Process+0x728>
                if (is_response_ok(uart_rx)) {
 8000978:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800097c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000980:	6818      	ldr	r0, [r3, #0]
 8000982:	f000 fb2b 	bl	8000fdc <is_response_ok>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d010      	beq.n	80009ae <LoraStarter_Process+0x156>
                    LOG_DEBUG("[LoRa] Command %d OK received", ctx->cmd_index + 1);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	3301      	adds	r3, #1
 8000992:	461a      	mov	r2, r3
 8000994:	497b      	ldr	r1, [pc, #492]	@ (8000b84 <LoraStarter_Process+0x32c>)
 8000996:	2000      	movs	r0, #0
 8000998:	f005 f9d0 	bl	8005d3c <LOGGER_SendFormatted>
                    ctx->cmd_index++;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	1c5a      	adds	r2, r3, #1
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	605a      	str	r2, [r3, #4]
                    ctx->state = LORA_STATE_SEND_CMD;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 에러 카운터 리셋
                        ctx->state = LORA_STATE_SEND_CMD;
                    }
                }
            }
            break;
 80009ac:	e2e8      	b.n	8000f80 <LoraStarter_Process+0x728>
                } else if (strstr(uart_rx, "ERROR") || strstr(uart_rx, "AT_COMMAND_NOT_FOUND")) {
 80009ae:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80009b2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80009b6:	4974      	ldr	r1, [pc, #464]	@ (8000b88 <LoraStarter_Process+0x330>)
 80009b8:	6818      	ldr	r0, [r3, #0]
 80009ba:	f017 fca3 	bl	8018304 <strstr>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d10b      	bne.n	80009dc <LoraStarter_Process+0x184>
 80009c4:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80009c8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80009cc:	496f      	ldr	r1, [pc, #444]	@ (8000b8c <LoraStarter_Process+0x334>)
 80009ce:	6818      	ldr	r0, [r3, #0]
 80009d0:	f017 fc98 	bl	8018304 <strstr>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f000 82d2 	beq.w	8000f80 <LoraStarter_Process+0x728>
                    LOG_WARN("[LoRa] Command %d failed: %s", ctx->cmd_index + 1, uart_rx);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	1c5a      	adds	r2, r3, #1
 80009e2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80009e6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4968      	ldr	r1, [pc, #416]	@ (8000b90 <LoraStarter_Process+0x338>)
 80009ee:	2002      	movs	r0, #2
 80009f0:	f005 f9a4 	bl	8005d3c <LOGGER_SendFormatted>
                    ctx->error_count++;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6a1b      	ldr	r3, [r3, #32]
 80009f8:	1c5a      	adds	r2, r3, #1
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	621a      	str	r2, [r3, #32]
                    if (ctx->error_count < 3) {
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6a1b      	ldr	r3, [r3, #32]
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	dc0d      	bgt.n	8000a22 <LoraStarter_Process+0x1ca>
                        LOG_INFO("[LoRa] Retrying command %d (attempt %d/3)", ctx->cmd_index + 1, ctx->error_count + 1);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	1c5a      	adds	r2, r3, #1
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6a1b      	ldr	r3, [r3, #32]
 8000a10:	3301      	adds	r3, #1
 8000a12:	4960      	ldr	r1, [pc, #384]	@ (8000b94 <LoraStarter_Process+0x33c>)
 8000a14:	2001      	movs	r0, #1
 8000a16:	f005 f991 	bl	8005d3c <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_CMD; // 같은 명령 재시도
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	701a      	strb	r2, [r3, #0]
            break;
 8000a20:	e2ae      	b.n	8000f80 <LoraStarter_Process+0x728>
                        LOG_WARN("[LoRa] Command %d failed after 3 attempts, skipping to next", ctx->cmd_index + 1);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	3301      	adds	r3, #1
 8000a28:	461a      	mov	r2, r3
 8000a2a:	495b      	ldr	r1, [pc, #364]	@ (8000b98 <LoraStarter_Process+0x340>)
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	f005 f985 	bl	8005d3c <LOGGER_SendFormatted>
                        ctx->cmd_index++; // 다음 명령으로 건너뛰기
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	1c5a      	adds	r2, r3, #1
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	605a      	str	r2, [r3, #4]
                        ctx->error_count = 0; // 에러 카운터 리셋
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	621a      	str	r2, [r3, #32]
                        ctx->state = LORA_STATE_SEND_CMD;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2201      	movs	r2, #1
 8000a46:	701a      	strb	r2, [r3, #0]
            break;
 8000a48:	e29a      	b.n	8000f80 <LoraStarter_Process+0x728>
        case LORA_STATE_SEND_JOIN:
            LOG_INFO("[LoRa] 🌐 JOIN ATTEMPT started");
 8000a4a:	4954      	ldr	r1, [pc, #336]	@ (8000b9c <LoraStarter_Process+0x344>)
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f005 f975 	bl	8005d3c <LOGGER_SendFormatted>
            CommandSender_Send("AT+JOIN\r\n");
 8000a52:	4853      	ldr	r0, [pc, #332]	@ (8000ba0 <LoraStarter_Process+0x348>)
 8000a54:	f7ff fdda 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_JOIN_OK;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2204      	movs	r2, #4
 8000a5c:	701a      	strb	r2, [r3, #0]
            break;
 8000a5e:	e298      	b.n	8000f92 <LoraStarter_Process+0x73a>
        case LORA_STATE_WAIT_JOIN_OK:
            if (uart_rx && is_join_response_ok(uart_rx)) {
 8000a60:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000a64:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f000 828a 	beq.w	8000f84 <LoraStarter_Process+0x72c>
 8000a70:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000a74:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000a78:	6818      	ldr	r0, [r3, #0]
 8000a7a:	f000 fb17 	bl	80010ac <is_join_response_ok>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	f000 827f 	beq.w	8000f84 <LoraStarter_Process+0x72c>
                // JOIN SUCCESS는 ResponseHandler에서 이미 로그 출력됨
                ctx->state = LORA_STATE_SEND_TIMEREQ; // JOIN 후 시간 동기화 활성화로 전환
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2205      	movs	r2, #5
 8000a8a:	701a      	strb	r2, [r3, #0]
                ctx->send_count = 0;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
                ctx->error_count = 0; // JOIN 성공 시 에러 카운터 리셋
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
                ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a9e:	62da      	str	r2, [r3, #44]	@ 0x2c
                ctx->last_retry_time = 0; // 재시도 시간 리셋
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	629a      	str	r2, [r3, #40]	@ 0x28
                g_message_number = 1; // JOIN 성공 시 메시지 번호 리셋
 8000aa6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ba4 <LoraStarter_Process+0x34c>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	601a      	str	r2, [r3, #0]
                LOG_INFO("[LoRa] JOIN successful, requesting time synchronization...");
 8000aac:	493e      	ldr	r1, [pc, #248]	@ (8000ba8 <LoraStarter_Process+0x350>)
 8000aae:	2001      	movs	r0, #1
 8000ab0:	f005 f944 	bl	8005d3c <LOGGER_SendFormatted>
            }
            break;
 8000ab4:	e266      	b.n	8000f84 <LoraStarter_Process+0x72c>
        case LORA_STATE_SEND_TIMEREQ:
            LOG_INFO("[LoRa] Sending time synchronization request...");
 8000ab6:	493d      	ldr	r1, [pc, #244]	@ (8000bac <LoraStarter_Process+0x354>)
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f005 f93f 	bl	8005d3c <LOGGER_SendFormatted>
            CommandSender_Send("AT+TIMEREQ=1\r\n");
 8000abe:	483c      	ldr	r0, [pc, #240]	@ (8000bb0 <LoraStarter_Process+0x358>)
 8000ac0:	f7ff fda4 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_TIMEREQ_OK;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2206      	movs	r2, #6
 8000ac8:	701a      	strb	r2, [r3, #0]
            break;
 8000aca:	e262      	b.n	8000f92 <LoraStarter_Process+0x73a>
        case LORA_STATE_WAIT_TIMEREQ_OK:
            if (uart_rx && is_response_ok(uart_rx)) {
 8000acc:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000ad0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f000 8256 	beq.w	8000f88 <LoraStarter_Process+0x730>
 8000adc:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000ae0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000ae4:	6818      	ldr	r0, [r3, #0]
 8000ae6:	f000 fa79 	bl	8000fdc <is_response_ok>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	f000 824b 	beq.w	8000f88 <LoraStarter_Process+0x730>
                LOG_INFO("[LoRa] ✅ Time synchronization enabled");
 8000af2:	4930      	ldr	r1, [pc, #192]	@ (8000bb4 <LoraStarter_Process+0x35c>)
 8000af4:	2001      	movs	r0, #1
 8000af6:	f005 f921 	bl	8005d3c <LOGGER_SendFormatted>
                ctx->state = LORA_STATE_WAIT_TIME_SYNC;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2207      	movs	r2, #7
 8000afe:	701a      	strb	r2, [r3, #0]
                ctx->last_retry_time = TIME_GetCurrentMs(); // 5초 지연 시작 시점 기록
 8000b00:	f005 f884 	bl	8005c0c <TIME_GetCurrentMs>
 8000b04:	4602      	mov	r2, r0
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	629a      	str	r2, [r3, #40]	@ 0x28
            }
            break;
 8000b0a:	e23d      	b.n	8000f88 <LoraStarter_Process+0x730>
        case LORA_STATE_WAIT_TIME_SYNC:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000b0c:	f005 f87e 	bl	8005c0c <TIME_GetCurrentMs>
 8000b10:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                const uint32_t TIME_SYNC_DELAY_MS = LORA_TIME_SYNC_DELAY_MS;
 8000b14:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000b18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
                
                if (ctx->last_retry_time == 0) {
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d108      	bne.n	8000b36 <LoraStarter_Process+0x2de>
                    // 처음 진입 시 시작 시간 기록
                    ctx->last_retry_time = current_time;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000b2a:	629a      	str	r2, [r3, #40]	@ 0x28
                    LOG_INFO("[LoRa] ⏳ Waiting 5 seconds for time synchronization...");
 8000b2c:	4922      	ldr	r1, [pc, #136]	@ (8000bb8 <LoraStarter_Process+0x360>)
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f005 f904 	bl	8005d3c <LOGGER_SendFormatted>
                    LOG_INFO("[LoRa] ✅ Time sync delay completed, requesting network time");
                    ctx->state = LORA_STATE_SEND_LTIME;
                    ctx->last_retry_time = 0; // 타이머 리셋
                }
            }
            break;
 8000b34:	e22a      	b.n	8000f8c <LoraStarter_Process+0x734>
                } else if ((current_time - ctx->last_retry_time) >= TIME_SYNC_DELAY_MS) {
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b3a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000b3e:	1ad3      	subs	r3, r2, r3
 8000b40:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000b44:	429a      	cmp	r2, r3
 8000b46:	f200 8221 	bhi.w	8000f8c <LoraStarter_Process+0x734>
                    LOG_INFO("[LoRa] ✅ Time sync delay completed, requesting network time");
 8000b4a:	491c      	ldr	r1, [pc, #112]	@ (8000bbc <LoraStarter_Process+0x364>)
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f005 f8f5 	bl	8005d3c <LOGGER_SendFormatted>
                    ctx->state = LORA_STATE_SEND_LTIME;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2208      	movs	r2, #8
 8000b56:	701a      	strb	r2, [r3, #0]
                    ctx->last_retry_time = 0; // 타이머 리셋
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8000b5e:	e215      	b.n	8000f8c <LoraStarter_Process+0x734>
        case LORA_STATE_SEND_LTIME:
            LOG_INFO("[LoRa] Requesting network time...");
 8000b60:	4917      	ldr	r1, [pc, #92]	@ (8000bc0 <LoraStarter_Process+0x368>)
 8000b62:	2001      	movs	r0, #1
 8000b64:	f005 f8ea 	bl	8005d3c <LOGGER_SendFormatted>
            CommandSender_Send("AT+LTIME=?\r\n");
 8000b68:	4816      	ldr	r0, [pc, #88]	@ (8000bc4 <LoraStarter_Process+0x36c>)
 8000b6a:	f7ff fd4f 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_LTIME_RESPONSE;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2209      	movs	r2, #9
 8000b72:	701a      	strb	r2, [r3, #0]
            break;
 8000b74:	e20d      	b.n	8000f92 <LoraStarter_Process+0x73a>
 8000b76:	bf00      	nop
 8000b78:	08019cc8 	.word	0x08019cc8
 8000b7c:	08019cd0 	.word	0x08019cd0
 8000b80:	08019d08 	.word	0x08019d08
 8000b84:	08019d2c 	.word	0x08019d2c
 8000b88:	08019c54 	.word	0x08019c54
 8000b8c:	08019d4c 	.word	0x08019d4c
 8000b90:	08019d64 	.word	0x08019d64
 8000b94:	08019d84 	.word	0x08019d84
 8000b98:	08019db0 	.word	0x08019db0
 8000b9c:	08019dec 	.word	0x08019dec
 8000ba0:	08019e10 	.word	0x08019e10
 8000ba4:	20000014 	.word	0x20000014
 8000ba8:	08019e1c 	.word	0x08019e1c
 8000bac:	08019e58 	.word	0x08019e58
 8000bb0:	08019e88 	.word	0x08019e88
 8000bb4:	08019e98 	.word	0x08019e98
 8000bb8:	08019ec0 	.word	0x08019ec0
 8000bbc:	08019efc 	.word	0x08019efc
 8000bc0:	08019f3c 	.word	0x08019f3c
 8000bc4:	08019f60 	.word	0x08019f60
        case LORA_STATE_WAIT_LTIME_RESPONSE:
            if (uart_rx) {
 8000bc8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000bcc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d03e      	beq.n	8000c54 <LoraStarter_Process+0x3fc>
                LOG_DEBUG("[LoRa] LTIME response received: '%s'", uart_rx);
 8000bd6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000bda:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	49b1      	ldr	r1, [pc, #708]	@ (8000ea8 <LoraStarter_Process+0x650>)
 8000be2:	2000      	movs	r0, #0
 8000be4:	f005 f8aa 	bl	8005d3c <LOGGER_SendFormatted>
                
                // ResponseHandler에서 시간 응답 파싱 처리
                if (ResponseHandler_IsTimeResponse(uart_rx)) {
 8000be8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000bec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000bf0:	6818      	ldr	r0, [r3, #0]
 8000bf2:	f000 fb37 	bl	8001264 <ResponseHandler_IsTimeResponse>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d021      	beq.n	8000c40 <LoraStarter_Process+0x3e8>
                    ResponseHandler_ParseTimeResponse(uart_rx);
 8000bfc:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000c00:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000c04:	6818      	ldr	r0, [r3, #0]
 8000c06:	f000 fbdd 	bl	80013c4 <ResponseHandler_ParseTimeResponse>
                    
                    // 현재 상태에 따라 다른 동작
                    if (ctx->send_count == 0) {
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d10e      	bne.n	8000c30 <LoraStarter_Process+0x3d8>
                        // 첫 번째 시간 동기화 (JOIN 후) - 주기적 전송 시작
                        LOG_INFO("[LoRa] 🕐 Initial time synchronized, starting periodic transmission");
 8000c12:	49a6      	ldr	r1, [pc, #664]	@ (8000eac <LoraStarter_Process+0x654>)
 8000c14:	2001      	movs	r0, #1
 8000c16:	f005 f891 	bl	8005d3c <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_PERIODIC;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	220a      	movs	r2, #10
 8000c1e:	701a      	strb	r2, [r3, #0]
                        LOG_INFO("[LoRa] 🚀 PERIODIC SEND STARTED with message: %s", ctx->send_message);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69db      	ldr	r3, [r3, #28]
 8000c24:	461a      	mov	r2, r3
 8000c26:	49a2      	ldr	r1, [pc, #648]	@ (8000eb0 <LoraStarter_Process+0x658>)
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f005 f887 	bl	8005d3c <LOGGER_SendFormatted>
                    LOG_DEBUG("[LoRa] Waiting for LTIME response, got: '%s'", uart_rx);
                }
            } else {
                LOG_DEBUG("[LoRa] WAIT_LTIME_RESPONSE: No uart_rx data received");
            }
            break;
 8000c2e:	e1b0      	b.n	8000f92 <LoraStarter_Process+0x73a>
                        LOG_INFO("[LoRa] 🕐 Time synchronized, proceeding to SEND");
 8000c30:	49a0      	ldr	r1, [pc, #640]	@ (8000eb4 <LoraStarter_Process+0x65c>)
 8000c32:	2001      	movs	r0, #1
 8000c34:	f005 f882 	bl	8005d3c <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_PERIODIC;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	220a      	movs	r2, #10
 8000c3c:	701a      	strb	r2, [r3, #0]
            break;
 8000c3e:	e1a8      	b.n	8000f92 <LoraStarter_Process+0x73a>
                    LOG_DEBUG("[LoRa] Waiting for LTIME response, got: '%s'", uart_rx);
 8000c40:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000c44:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	499b      	ldr	r1, [pc, #620]	@ (8000eb8 <LoraStarter_Process+0x660>)
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f005 f875 	bl	8005d3c <LOGGER_SendFormatted>
            break;
 8000c52:	e19e      	b.n	8000f92 <LoraStarter_Process+0x73a>
                LOG_DEBUG("[LoRa] WAIT_LTIME_RESPONSE: No uart_rx data received");
 8000c54:	4999      	ldr	r1, [pc, #612]	@ (8000ebc <LoraStarter_Process+0x664>)
 8000c56:	2000      	movs	r0, #0
 8000c58:	f005 f870 	bl	8005d3c <LOGGER_SendFormatted>
            break;
 8000c5c:	e199      	b.n	8000f92 <LoraStarter_Process+0x73a>
                char send_cmd[128];
                char hex_data[64];
                char sequential_message[16];
                
                // 순차 번호 메시지 생성 (0001~9999, JOIN마다 리셋)
                snprintf(sequential_message, sizeof(sequential_message), "%04d", g_message_number);
 8000c5e:	4b98      	ldr	r3, [pc, #608]	@ (8000ec0 <LoraStarter_Process+0x668>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f107 00c8 	add.w	r0, r7, #200	@ 0xc8
 8000c66:	4a97      	ldr	r2, [pc, #604]	@ (8000ec4 <LoraStarter_Process+0x66c>)
 8000c68:	2110      	movs	r1, #16
 8000c6a:	f017 fa1d 	bl	80180a8 <sniprintf>
                
                // 최대값 다음에는 0001로 다시 시작
                g_message_number++;
 8000c6e:	4b94      	ldr	r3, [pc, #592]	@ (8000ec0 <LoraStarter_Process+0x668>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	3301      	adds	r3, #1
 8000c74:	4a92      	ldr	r2, [pc, #584]	@ (8000ec0 <LoraStarter_Process+0x668>)
 8000c76:	6013      	str	r3, [r2, #0]
                if (g_message_number > LORA_MESSAGE_NUMBER_MAX) {
 8000c78:	4b91      	ldr	r3, [pc, #580]	@ (8000ec0 <LoraStarter_Process+0x668>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000c80:	4293      	cmp	r3, r2
 8000c82:	dd02      	ble.n	8000c8a <LoraStarter_Process+0x432>
                    g_message_number = 1;
 8000c84:	4b8e      	ldr	r3, [pc, #568]	@ (8000ec0 <LoraStarter_Process+0x668>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	601a      	str	r2, [r3, #0]
                }
                
                // 문자열을 헥사 문자열로 변환
                int len = strlen(sequential_message);
 8000c8a:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fac8 	bl	8000224 <strlen>
 8000c94:	4603      	mov	r3, r0
 8000c96:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000ca0:	e014      	b.n	8000ccc <LoraStarter_Process+0x474>
                    sprintf(&hex_data[i*2], "%02X", (unsigned char)sequential_message[i]);
 8000ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	f107 0208 	add.w	r2, r7, #8
 8000cac:	18d0      	adds	r0, r2, r3
 8000cae:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 8000cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000cb6:	4413      	add	r3, r2
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	4982      	ldr	r1, [pc, #520]	@ (8000ec8 <LoraStarter_Process+0x670>)
 8000cbe:	f017 fa29 	bl	8018114 <siprintf>
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000ccc:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8000cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	da03      	bge.n	8000ce0 <LoraStarter_Process+0x488>
 8000cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000cdc:	2b1e      	cmp	r3, #30
 8000cde:	dde0      	ble.n	8000ca2 <LoraStarter_Process+0x44a>
                }
                hex_data[len*2] = '\0';
 8000ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000cea:	443b      	add	r3, r7
 8000cec:	2200      	movs	r2, #0
 8000cee:	f803 2cf8 	strb.w	r2, [r3, #-248]
                
                snprintf(send_cmd, sizeof(send_cmd), "AT+SEND=1:%s\r\n", hex_data);
 8000cf2:	f107 0308 	add.w	r3, r7, #8
 8000cf6:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8000cfa:	4a74      	ldr	r2, [pc, #464]	@ (8000ecc <LoraStarter_Process+0x674>)
 8000cfc:	2180      	movs	r1, #128	@ 0x80
 8000cfe:	f017 f9d3 	bl	80180a8 <sniprintf>
                LOG_WARN("[LoRa] 📤 SEND ATTEMPT: %s", sequential_message);
 8000d02:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000d06:	461a      	mov	r2, r3
 8000d08:	4971      	ldr	r1, [pc, #452]	@ (8000ed0 <LoraStarter_Process+0x678>)
 8000d0a:	2002      	movs	r0, #2
 8000d0c:	f005 f816 	bl	8005d3c <LOGGER_SendFormatted>
                CommandSender_Send(send_cmd);
 8000d10:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fc79 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_SEND_RESPONSE;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	220b      	movs	r2, #11
 8000d1e:	701a      	strb	r2, [r3, #0]
                ctx->send_count++;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	1c5a      	adds	r2, r3, #1
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	619a      	str	r2, [r3, #24]
                LOG_DEBUG("[LoRa] Send count: %d", ctx->send_count);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	4968      	ldr	r1, [pc, #416]	@ (8000ed4 <LoraStarter_Process+0x67c>)
 8000d32:	2000      	movs	r0, #0
 8000d34:	f005 f802 	bl	8005d3c <LOGGER_SendFormatted>
            }
            break;
 8000d38:	e12b      	b.n	8000f92 <LoraStarter_Process+0x73a>
        case LORA_STATE_WAIT_SEND_RESPONSE:
            if (uart_rx) {
 8000d3a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000d3e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	f000 8123 	beq.w	8000f90 <LoraStarter_Process+0x738>
                ResponseType response_type = ResponseHandler_ParseSendResponse(uart_rx);
 8000d4a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000d4e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000d52:	6818      	ldr	r0, [r3, #0]
 8000d54:	f000 fa30 	bl	80011b8 <ResponseHandler_ParseSendResponse>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
                switch(response_type) {
 8000d5e:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d01a      	beq.n	8000d9c <LoraStarter_Process+0x544>
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	dc60      	bgt.n	8000e2c <LoraStarter_Process+0x5d4>
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d002      	beq.n	8000d74 <LoraStarter_Process+0x51c>
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d028      	beq.n	8000dc4 <LoraStarter_Process+0x56c>
 8000d72:	e05b      	b.n	8000e2c <LoraStarter_Process+0x5d4>
                    case RESPONSE_OK:
                        // SEND SUCCESS는 ResponseHandler에서 이미 로그 출력됨
                        // SEND 성공 후 다음 전송 대기 상태로 전환
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	220c      	movs	r2, #12
 8000d78:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = LORA_RETRY_DELAY_MS; // 재시도 지연 시간 리셋
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d86:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 송신 완료 시간 저장
 8000d88:	f004 ff40 	bl	8005c0c <TIME_GetCurrentMs>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	611a      	str	r2, [r3, #16]
                        LOG_INFO("[LoRa] SEND successful, waiting for next interval...");
 8000d92:	4951      	ldr	r1, [pc, #324]	@ (8000ed8 <LoraStarter_Process+0x680>)
 8000d94:	2001      	movs	r0, #1
 8000d96:	f004 ffd1 	bl	8005d3c <LOGGER_SendFormatted>
                        break;
 8000d9a:	e051      	b.n	8000e40 <LoraStarter_Process+0x5e8>
                    case RESPONSE_TIMEOUT:
                        LOG_WARN("[LoRa] SEND timeout - waiting for next interval");
 8000d9c:	494f      	ldr	r1, [pc, #316]	@ (8000edc <LoraStarter_Process+0x684>)
 8000d9e:	2002      	movs	r0, #2
 8000da0:	f004 ffcc 	bl	8005d3c <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 타임아웃 시 대기 상태로 전환
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	220c      	movs	r2, #12
 8000da8:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; 
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000db6:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 타임아웃 시간 저장
 8000db8:	f004 ff28 	bl	8005c0c <TIME_GetCurrentMs>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	611a      	str	r2, [r3, #16]
                        break;
 8000dc2:	e03d      	b.n	8000e40 <LoraStarter_Process+0x5e8>
                    case RESPONSE_ERROR:
                        LORA_LOG_SEND_FAILED("Network error");
 8000dc4:	4a46      	ldr	r2, [pc, #280]	@ (8000ee0 <LoraStarter_Process+0x688>)
 8000dc6:	4947      	ldr	r1, [pc, #284]	@ (8000ee4 <LoraStarter_Process+0x68c>)
 8000dc8:	2002      	movs	r0, #2
 8000dca:	f004 ffb7 	bl	8005d3c <LOGGER_SendFormatted>
                        ctx->error_count++;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6a1b      	ldr	r3, [r3, #32]
 8000dd2:	1c5a      	adds	r2, r3, #1
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	621a      	str	r2, [r3, #32]
                        LORA_LOG_ERROR_COUNT(ctx->error_count);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6a1b      	ldr	r3, [r3, #32]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4942      	ldr	r1, [pc, #264]	@ (8000ee8 <LoraStarter_Process+0x690>)
 8000de0:	2002      	movs	r0, #2
 8000de2:	f004 ffab 	bl	8005d3c <LOGGER_SendFormatted>
                        // 무제한 재시도 (max_retry_count가 0이거나 아직 제한에 도달하지 않은 경우)
                        if (ctx->max_retry_count == 0 || ctx->error_count < ctx->max_retry_count) {
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d005      	beq.n	8000dfa <LoraStarter_Process+0x5a2>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a1a      	ldr	r2, [r3, #32]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000df6:	429a      	cmp	r2, r3
 8000df8:	da10      	bge.n	8000e1c <LoraStarter_Process+0x5c4>
                            LORA_LOG_RETRY_ATTEMPT(ctx->error_count, ctx->max_retry_count);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6a1a      	ldr	r2, [r3, #32]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <LoraStarter_Process+0x5b2>
 8000e06:	4b39      	ldr	r3, [pc, #228]	@ (8000eec <LoraStarter_Process+0x694>)
 8000e08:	e000      	b.n	8000e0c <LoraStarter_Process+0x5b4>
 8000e0a:	4b39      	ldr	r3, [pc, #228]	@ (8000ef0 <LoraStarter_Process+0x698>)
 8000e0c:	4939      	ldr	r1, [pc, #228]	@ (8000ef4 <LoraStarter_Process+0x69c>)
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f004 ff94 	bl	8005d3c <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_JOIN_RETRY; // JOIN 재시도
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	220d      	movs	r2, #13
 8000e18:	701a      	strb	r2, [r3, #0]
                        } else {
                            LORA_LOG_MAX_RETRIES_REACHED();
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
                        }
                        break;
 8000e1a:	e011      	b.n	8000e40 <LoraStarter_Process+0x5e8>
                            LORA_LOG_MAX_RETRIES_REACHED();
 8000e1c:	4936      	ldr	r1, [pc, #216]	@ (8000ef8 <LoraStarter_Process+0x6a0>)
 8000e1e:	2003      	movs	r0, #3
 8000e20:	f004 ff8c 	bl	8005d3c <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	220f      	movs	r2, #15
 8000e28:	701a      	strb	r2, [r3, #0]
                        break;
 8000e2a:	e009      	b.n	8000e40 <LoraStarter_Process+0x5e8>
                    default:
                        // 알 수 없는 응답은 무시하고 계속 대기
                        LOG_DEBUG("[LoRa] Unknown response: %s", uart_rx);
 8000e2c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000e30:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	4931      	ldr	r1, [pc, #196]	@ (8000efc <LoraStarter_Process+0x6a4>)
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f004 ff7f 	bl	8005d3c <LOGGER_SendFormatted>
                        break;
 8000e3e:	bf00      	nop
                }
            }
            break;
 8000e40:	e0a6      	b.n	8000f90 <LoraStarter_Process+0x738>
        case LORA_STATE_WAIT_SEND_INTERVAL:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000e42:	f004 fee3 	bl	8005c0c <TIME_GetCurrentMs>
 8000e46:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
                uint32_t interval_ms = (ctx->send_interval_ms > 0) ? ctx->send_interval_ms : 30000; // 기본값 30초
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d002      	beq.n	8000e58 <LoraStarter_Process+0x600>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	e001      	b.n	8000e5c <LoraStarter_Process+0x604>
 8000e58:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000e5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
                
                if ((current_time - ctx->last_send_time) >= interval_ms) {
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	691b      	ldr	r3, [r3, #16]
 8000e64:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d809      	bhi.n	8000e86 <LoraStarter_Process+0x62e>
                    LOG_DEBUG("[LoRa] Send interval passed (%u ms), requesting time before next send", interval_ms);
 8000e72:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000e76:	4922      	ldr	r1, [pc, #136]	@ (8000f00 <LoraStarter_Process+0x6a8>)
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f004 ff5f 	bl	8005d3c <LOGGER_SendFormatted>
                    // 다음 주기적 전송 전 시간 동기화 실행 (LTIME → SEND 순서)
                    ctx->state = LORA_STATE_SEND_LTIME;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2208      	movs	r2, #8
 8000e82:	701a      	strb	r2, [r3, #0]
                    // 아직 대기 시간이 남았으므로 상태 유지
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
                }
            }
            break;
 8000e84:	e085      	b.n	8000f92 <LoraStarter_Process+0x73a>
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	691a      	ldr	r2, [r3, #16]
 8000e8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000e94:	4413      	add	r3, r2
 8000e96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
 8000e9a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8000e9e:	4919      	ldr	r1, [pc, #100]	@ (8000f04 <LoraStarter_Process+0x6ac>)
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f004 ff4b 	bl	8005d3c <LOGGER_SendFormatted>
            break;
 8000ea6:	e074      	b.n	8000f92 <LoraStarter_Process+0x73a>
 8000ea8:	08019f70 	.word	0x08019f70
 8000eac:	08019f98 	.word	0x08019f98
 8000eb0:	08019fe0 	.word	0x08019fe0
 8000eb4:	0801a014 	.word	0x0801a014
 8000eb8:	0801a048 	.word	0x0801a048
 8000ebc:	0801a078 	.word	0x0801a078
 8000ec0:	20000014 	.word	0x20000014
 8000ec4:	0801a0b0 	.word	0x0801a0b0
 8000ec8:	0801a0b8 	.word	0x0801a0b8
 8000ecc:	0801a0c0 	.word	0x0801a0c0
 8000ed0:	0801a0d0 	.word	0x0801a0d0
 8000ed4:	0801a0f0 	.word	0x0801a0f0
 8000ed8:	0801a108 	.word	0x0801a108
 8000edc:	0801a140 	.word	0x0801a140
 8000ee0:	0801a170 	.word	0x0801a170
 8000ee4:	0801a180 	.word	0x0801a180
 8000ee8:	0801a198 	.word	0x0801a198
 8000eec:	0801a1b0 	.word	0x0801a1b0
 8000ef0:	0801a1c0 	.word	0x0801a1c0
 8000ef4:	0801a1c4 	.word	0x0801a1c4
 8000ef8:	0801a1e0 	.word	0x0801a1e0
 8000efc:	0801a204 	.word	0x0801a204
 8000f00:	0801a220 	.word	0x0801a220
 8000f04:	0801a268 	.word	0x0801a268
        case LORA_STATE_JOIN_RETRY:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000f08:	f004 fe80 	bl	8005c0c <TIME_GetCurrentMs>
 8000f0c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
                
                if (ctx->last_retry_time == 0) {
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d10b      	bne.n	8000f30 <LoraStarter_Process+0x6d8>
                    // 첫 재시도: 바로 SEND_JOIN
                    LOG_DEBUG("[LoRa] First JOIN retry");
 8000f18:	492c      	ldr	r1, [pc, #176]	@ (8000fcc <LoraStarter_Process+0x774>)
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f004 ff0e 	bl	8005d3c <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000f26:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	701a      	strb	r2, [r3, #0]
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
                             ctx->retry_delay_ms - (current_time - ctx->last_retry_time));
                    // 아무것도 하지 않음
                }
            }
            break;
 8000f2e:	e030      	b.n	8000f92 <LoraStarter_Process+0x73a>
                } else if ((current_time - ctx->last_retry_time) >= ctx->retry_delay_ms) {
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f34:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000f38:	1ad2      	subs	r2, r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d30e      	bcc.n	8000f60 <LoraStarter_Process+0x708>
                    LOG_DEBUG("[LoRa] JOIN retry after %lu ms delay", ctx->retry_delay_ms);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f46:	461a      	mov	r2, r3
 8000f48:	4921      	ldr	r1, [pc, #132]	@ (8000fd0 <LoraStarter_Process+0x778>)
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f004 fef6 	bl	8005d3c <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000f56:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	701a      	strb	r2, [r3, #0]
            break;
 8000f5e:	e018      	b.n	8000f92 <LoraStarter_Process+0x73a>
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000f6c:	1acb      	subs	r3, r1, r3
 8000f6e:	4413      	add	r3, r2
 8000f70:	461a      	mov	r2, r3
 8000f72:	4918      	ldr	r1, [pc, #96]	@ (8000fd4 <LoraStarter_Process+0x77c>)
 8000f74:	2000      	movs	r0, #0
 8000f76:	f004 fee1 	bl	8005d3c <LOGGER_SendFormatted>
            break;
 8000f7a:	e00a      	b.n	8000f92 <LoraStarter_Process+0x73a>
        case LORA_STATE_DONE:
        case LORA_STATE_ERROR:
        default:
            // 이미 완료된 상태이므로 아무것도 하지 않음
            break;
 8000f7c:	bf00      	nop
 8000f7e:	e008      	b.n	8000f92 <LoraStarter_Process+0x73a>
            break;
 8000f80:	bf00      	nop
 8000f82:	e006      	b.n	8000f92 <LoraStarter_Process+0x73a>
            break;
 8000f84:	bf00      	nop
 8000f86:	e004      	b.n	8000f92 <LoraStarter_Process+0x73a>
            break;
 8000f88:	bf00      	nop
 8000f8a:	e002      	b.n	8000f92 <LoraStarter_Process+0x73a>
            break;
 8000f8c:	bf00      	nop
 8000f8e:	e000      	b.n	8000f92 <LoraStarter_Process+0x73a>
            break;
 8000f90:	bf00      	nop
    }

    // 상태 변경 로깅
    if (old_state != ctx->state) {
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	f897 20fb 	ldrb.w	r2, [r7, #251]	@ 0xfb
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d012      	beq.n	8000fc4 <LoraStarter_Process+0x76c>
        LORA_LOG_STATE_CHANGE(get_state_name(old_state), get_state_name(ctx->state));
 8000f9e:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fb9a 	bl	80006dc <get_state_name>
 8000fa8:	4604      	mov	r4, r0
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fb94 	bl	80006dc <get_state_name>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	4622      	mov	r2, r4
 8000fb8:	4907      	ldr	r1, [pc, #28]	@ (8000fd8 <LoraStarter_Process+0x780>)
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f004 febe 	bl	8005d3c <LOGGER_SendFormatted>
 8000fc0:	e000      	b.n	8000fc4 <LoraStarter_Process+0x76c>
    if (ctx == NULL) return;
 8000fc2:	bf00      	nop
    }
}
 8000fc4:	f507 7782 	add.w	r7, r7, #260	@ 0x104
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd90      	pop	{r4, r7, pc}
 8000fcc:	0801a29c 	.word	0x0801a29c
 8000fd0:	0801a2b4 	.word	0x0801a2b4
 8000fd4:	0801a2dc 	.word	0x0801a2dc
 8000fd8:	0801a310 	.word	0x0801a310

08000fdc <is_response_ok>:
// 전역 변수: 네트워크에서 수신한 시간 정보 저장
static char g_network_time[64] = {0};
static bool g_time_synchronized = false;

bool is_response_ok(const char* response)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d105      	bne.n	8000ff6 <is_response_ok+0x1a>
        LOG_DEBUG("[ResponseHandler] is_response_ok: NULL response");
 8000fea:	4925      	ldr	r1, [pc, #148]	@ (8001080 <is_response_ok+0xa4>)
 8000fec:	2000      	movs	r0, #0
 8000fee:	f004 fea5 	bl	8005d3c <LOGGER_SendFormatted>
        return false;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e03f      	b.n	8001076 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking OK response: '%s'", response);
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	4922      	ldr	r1, [pc, #136]	@ (8001084 <is_response_ok+0xa8>)
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f004 fe9e 	bl	8005d3c <LOGGER_SendFormatted>
    
    // OK 또는 OK\r\n, OK\n 등 허용
    if (strcmp(response, "OK") == 0) {
 8001000:	4921      	ldr	r1, [pc, #132]	@ (8001088 <is_response_ok+0xac>)
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff f904 	bl	8000210 <strcmp>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d105      	bne.n	800101a <is_response_ok+0x3e>
        LOG_DEBUG("[ResponseHandler] OK response confirmed");
 800100e:	491f      	ldr	r1, [pc, #124]	@ (800108c <is_response_ok+0xb0>)
 8001010:	2000      	movs	r0, #0
 8001012:	f004 fe93 	bl	8005d3c <LOGGER_SendFormatted>
        return true;
 8001016:	2301      	movs	r3, #1
 8001018:	e02d      	b.n	8001076 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\r\n") == 0) {
 800101a:	491d      	ldr	r1, [pc, #116]	@ (8001090 <is_response_ok+0xb4>)
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff f8f7 	bl	8000210 <strcmp>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d105      	bne.n	8001034 <is_response_ok+0x58>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with CRLF)");
 8001028:	491a      	ldr	r1, [pc, #104]	@ (8001094 <is_response_ok+0xb8>)
 800102a:	2000      	movs	r0, #0
 800102c:	f004 fe86 	bl	8005d3c <LOGGER_SendFormatted>
        return true;
 8001030:	2301      	movs	r3, #1
 8001032:	e020      	b.n	8001076 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\n") == 0) {
 8001034:	4918      	ldr	r1, [pc, #96]	@ (8001098 <is_response_ok+0xbc>)
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff f8ea 	bl	8000210 <strcmp>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d105      	bne.n	800104e <is_response_ok+0x72>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with LF)");
 8001042:	4916      	ldr	r1, [pc, #88]	@ (800109c <is_response_ok+0xc0>)
 8001044:	2000      	movs	r0, #0
 8001046:	f004 fe79 	bl	8005d3c <LOGGER_SendFormatted>
        return true;
 800104a:	2301      	movs	r3, #1
 800104c:	e013      	b.n	8001076 <is_response_ok+0x9a>
    }
    
    // AT+VER 버전 응답도 성공으로 간주 (RUI_로 시작하는 응답)
    if (strstr(response, "RUI_") != NULL) {
 800104e:	4914      	ldr	r1, [pc, #80]	@ (80010a0 <is_response_ok+0xc4>)
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f017 f957 	bl	8018304 <strstr>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d006      	beq.n	800106a <is_response_ok+0x8e>
        LOG_DEBUG("[ResponseHandler] Version response confirmed: %s", response);
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	4911      	ldr	r1, [pc, #68]	@ (80010a4 <is_response_ok+0xc8>)
 8001060:	2000      	movs	r0, #0
 8001062:	f004 fe6b 	bl	8005d3c <LOGGER_SendFormatted>
        return true;
 8001066:	2301      	movs	r3, #1
 8001068:	e005      	b.n	8001076 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Not an OK response: '%s'", response);
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	490e      	ldr	r1, [pc, #56]	@ (80010a8 <is_response_ok+0xcc>)
 800106e:	2000      	movs	r0, #0
 8001070:	f004 fe64 	bl	8005d3c <LOGGER_SendFormatted>
    return false;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	0801a330 	.word	0x0801a330
 8001084:	0801a360 	.word	0x0801a360
 8001088:	0801a390 	.word	0x0801a390
 800108c:	0801a394 	.word	0x0801a394
 8001090:	0801a3bc 	.word	0x0801a3bc
 8001094:	0801a3c4 	.word	0x0801a3c4
 8001098:	0801a3f8 	.word	0x0801a3f8
 800109c:	0801a3fc 	.word	0x0801a3fc
 80010a0:	0801a430 	.word	0x0801a430
 80010a4:	0801a438 	.word	0x0801a438
 80010a8:	0801a46c 	.word	0x0801a46c

080010ac <is_join_response_ok>:

bool is_join_response_ok(const char* response)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80010b8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80010bc:	6018      	str	r0, [r3, #0]
    if (response == NULL) {
 80010be:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80010c2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d105      	bne.n	80010d8 <is_join_response_ok+0x2c>
        LOG_DEBUG("[ResponseHandler] is_join_response_ok: NULL response");
 80010cc:	4934      	ldr	r1, [pc, #208]	@ (80011a0 <is_join_response_ok+0xf4>)
 80010ce:	2000      	movs	r0, #0
 80010d0:	f004 fe34 	bl	8005d3c <LOGGER_SendFormatted>
        return false;
 80010d4:	2300      	movs	r3, #0
 80010d6:	e05d      	b.n	8001194 <is_join_response_ok+0xe8>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking JOIN response: '%s'", response);
 80010d8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80010dc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4930      	ldr	r1, [pc, #192]	@ (80011a4 <is_join_response_ok+0xf8>)
 80010e4:	2000      	movs	r0, #0
 80010e6:	f004 fe29 	bl	8005d3c <LOGGER_SendFormatted>
    
    // 개행 문자 제거하여 비교
    char clean_response[512];
    strncpy(clean_response, response, sizeof(clean_response) - 1);
 80010ea:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80010ee:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80010f2:	f107 0008 	add.w	r0, r7, #8
 80010f6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80010fa:	6819      	ldr	r1, [r3, #0]
 80010fc:	f017 f8ef 	bl	80182de <strncpy>
    clean_response[sizeof(clean_response) - 1] = '\0';
 8001100:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001104:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8001108:	2200      	movs	r2, #0
 800110a:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
    
    // 개행 문자 제거
    char* pos = clean_response;
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8001116:	e013      	b.n	8001140 <is_join_response_ok+0x94>
        if (*pos == '\r' || *pos == '\n') {
 8001118:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b0d      	cmp	r3, #13
 8001120:	d004      	beq.n	800112c <is_join_response_ok+0x80>
 8001122:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b0a      	cmp	r3, #10
 800112a:	d104      	bne.n	8001136 <is_join_response_ok+0x8a>
            *pos = '\0';
 800112c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
            break;
 8001134:	e009      	b.n	800114a <is_join_response_ok+0x9e>
        }
        pos++;
 8001136:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800113a:	3301      	adds	r3, #1
 800113c:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8001140:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1e6      	bne.n	8001118 <is_join_response_ok+0x6c>
    }
    
    bool result = (strcmp(clean_response, "+EVT:JOINED") == 0);
 800114a:	f107 0308 	add.w	r3, r7, #8
 800114e:	4916      	ldr	r1, [pc, #88]	@ (80011a8 <is_join_response_ok+0xfc>)
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f85d 	bl	8000210 <strcmp>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	bf0c      	ite	eq
 800115c:	2301      	moveq	r3, #1
 800115e:	2300      	movne	r3, #0
 8001160:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    
    if (result) {
 8001164:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8001168:	2b00      	cmp	r3, #0
 800116a:	d008      	beq.n	800117e <is_join_response_ok+0xd2>
        LOG_WARN("✅ JOIN CONFIRMED - Network joined successfully");
 800116c:	490f      	ldr	r1, [pc, #60]	@ (80011ac <is_join_response_ok+0x100>)
 800116e:	2002      	movs	r0, #2
 8001170:	f004 fde4 	bl	8005d3c <LOGGER_SendFormatted>
        
        // JOIN 성공 후 시간 조회 요청 (네트워크 동기화 대기 후)
        LOG_INFO("[ResponseHandler] Requesting network time after JOIN success...");
 8001174:	490e      	ldr	r1, [pc, #56]	@ (80011b0 <is_join_response_ok+0x104>)
 8001176:	2001      	movs	r0, #1
 8001178:	f004 fde0 	bl	8005d3c <LOGGER_SendFormatted>
 800117c:	e008      	b.n	8001190 <is_join_response_ok+0xe4>
        // 짧은 대기 후 시간 조회 (메인 루프에서 처리될 예정)
    } else {
        LOG_DEBUG("[ResponseHandler] Not a JOIN response: '%s'", response);
 800117e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001182:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	490a      	ldr	r1, [pc, #40]	@ (80011b4 <is_join_response_ok+0x108>)
 800118a:	2000      	movs	r0, #0
 800118c:	f004 fdd6 	bl	8005d3c <LOGGER_SendFormatted>
    }
    
    return result;
 8001190:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
}
 8001194:	4618      	mov	r0, r3
 8001196:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	0801a498 	.word	0x0801a498
 80011a4:	0801a4d0 	.word	0x0801a4d0
 80011a8:	0801a500 	.word	0x0801a500
 80011ac:	0801a50c 	.word	0x0801a50c
 80011b0:	0801a540 	.word	0x0801a540
 80011b4:	0801a580 	.word	0x0801a580

080011b8 <ResponseHandler_ParseSendResponse>:

ResponseType ResponseHandler_ParseSendResponse(const char* response)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d105      	bne.n	80011d2 <ResponseHandler_ParseSendResponse+0x1a>
        LOG_DEBUG("[ResponseHandler] ParseSendResponse: NULL response");
 80011c6:	491e      	ldr	r1, [pc, #120]	@ (8001240 <ResponseHandler_ParseSendResponse+0x88>)
 80011c8:	2000      	movs	r0, #0
 80011ca:	f004 fdb7 	bl	8005d3c <LOGGER_SendFormatted>
        return RESPONSE_UNKNOWN;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e031      	b.n	8001236 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Parsing SEND response: '%s'", response);
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	491b      	ldr	r1, [pc, #108]	@ (8001244 <ResponseHandler_ParseSendResponse+0x8c>)
 80011d6:	2000      	movs	r0, #0
 80011d8:	f004 fdb0 	bl	8005d3c <LOGGER_SendFormatted>
    
    if (strstr(response, "+EVT:SEND_CONFIRMED_OK") != NULL) {
 80011dc:	491a      	ldr	r1, [pc, #104]	@ (8001248 <ResponseHandler_ParseSendResponse+0x90>)
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f017 f890 	bl	8018304 <strstr>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d005      	beq.n	80011f6 <ResponseHandler_ParseSendResponse+0x3e>
        LOG_WARN("✅ SEND SUCCESS - Data transmitted successfully");
 80011ea:	4918      	ldr	r1, [pc, #96]	@ (800124c <ResponseHandler_ParseSendResponse+0x94>)
 80011ec:	2002      	movs	r0, #2
 80011ee:	f004 fda5 	bl	8005d3c <LOGGER_SendFormatted>
        return RESPONSE_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	e01f      	b.n	8001236 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strstr(response, "+EVT:SEND_CONFIRMED_FAILED") != NULL) {
 80011f6:	4916      	ldr	r1, [pc, #88]	@ (8001250 <ResponseHandler_ParseSendResponse+0x98>)
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f017 f883 	bl	8018304 <strstr>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d005      	beq.n	8001210 <ResponseHandler_ParseSendResponse+0x58>
        LOG_WARN("[ResponseHandler] SEND response: CONFIRMED_FAILED");
 8001204:	4913      	ldr	r1, [pc, #76]	@ (8001254 <ResponseHandler_ParseSendResponse+0x9c>)
 8001206:	2002      	movs	r0, #2
 8001208:	f004 fd98 	bl	8005d3c <LOGGER_SendFormatted>
        return RESPONSE_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e012      	b.n	8001236 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strcmp(response, "TIMEOUT") == 0) {
 8001210:	4911      	ldr	r1, [pc, #68]	@ (8001258 <ResponseHandler_ParseSendResponse+0xa0>)
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7fe fffc 	bl	8000210 <strcmp>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d105      	bne.n	800122a <ResponseHandler_ParseSendResponse+0x72>
        LOG_WARN("[ResponseHandler] SEND response: TIMEOUT");
 800121e:	490f      	ldr	r1, [pc, #60]	@ (800125c <ResponseHandler_ParseSendResponse+0xa4>)
 8001220:	2002      	movs	r0, #2
 8001222:	f004 fd8b 	bl	8005d3c <LOGGER_SendFormatted>
        return RESPONSE_TIMEOUT;
 8001226:	2302      	movs	r3, #2
 8001228:	e005      	b.n	8001236 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Unknown SEND response: '%s'", response);
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	490c      	ldr	r1, [pc, #48]	@ (8001260 <ResponseHandler_ParseSendResponse+0xa8>)
 800122e:	2000      	movs	r0, #0
 8001230:	f004 fd84 	bl	8005d3c <LOGGER_SendFormatted>
    return RESPONSE_UNKNOWN;
 8001234:	2303      	movs	r3, #3
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	0801a5ac 	.word	0x0801a5ac
 8001244:	0801a5e0 	.word	0x0801a5e0
 8001248:	0801a610 	.word	0x0801a610
 800124c:	0801a628 	.word	0x0801a628
 8001250:	0801a65c 	.word	0x0801a65c
 8001254:	0801a678 	.word	0x0801a678
 8001258:	0801a6ac 	.word	0x0801a6ac
 800125c:	0801a6b4 	.word	0x0801a6b4
 8001260:	0801a6e0 	.word	0x0801a6e0

08001264 <ResponseHandler_IsTimeResponse>:

// 시간 응답 확인 함수
bool ResponseHandler_IsTimeResponse(const char* response)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <ResponseHandler_IsTimeResponse+0x12>
        return false;
 8001272:	2300      	movs	r3, #0
 8001274:	e013      	b.n	800129e <ResponseHandler_IsTimeResponse+0x3a>
    }
    
    return (strstr(response, "LTIME:") != NULL || strstr(response, "LTIME=") != NULL);
 8001276:	490c      	ldr	r1, [pc, #48]	@ (80012a8 <ResponseHandler_IsTimeResponse+0x44>)
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f017 f843 	bl	8018304 <strstr>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d106      	bne.n	8001292 <ResponseHandler_IsTimeResponse+0x2e>
 8001284:	4909      	ldr	r1, [pc, #36]	@ (80012ac <ResponseHandler_IsTimeResponse+0x48>)
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f017 f83c 	bl	8018304 <strstr>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <ResponseHandler_IsTimeResponse+0x32>
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <ResponseHandler_IsTimeResponse+0x34>
 8001296:	2300      	movs	r3, #0
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	b2db      	uxtb	r3, r3
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	0801a710 	.word	0x0801a710
 80012ac:	0801a718 	.word	0x0801a718

080012b0 <ConvertUTCToKST>:

// 한국 시간대(UTC+9) 보정 함수
static void ConvertUTCToKST(char* time_str) {
 80012b0:	b5b0      	push	{r4, r5, r7, lr}
 80012b2:	b09a      	sub	sp, #104	@ 0x68
 80012b4:	af06      	add	r7, sp, #24
 80012b6:	6078      	str	r0, [r7, #4]
    int hour, min, sec, month, day, year;
    
    // "01h51m37s on 07/29/2025" 형식에서 시간 추출
    if (sscanf(time_str, "%dh%dm%ds on %d/%d/%d", 
 80012b8:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80012bc:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80012c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012c4:	9303      	str	r3, [sp, #12]
 80012c6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	460b      	mov	r3, r1
 80012da:	4936      	ldr	r1, [pc, #216]	@ (80013b4 <ConvertUTCToKST+0x104>)
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f016 ff3b 	bl	8018158 <siscanf>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b06      	cmp	r3, #6
 80012e6:	d161      	bne.n	80013ac <ConvertUTCToKST+0xfc>
               &hour, &min, &sec, &month, &day, &year) == 6) {
        
        // 한국 시간대로 보정 (UTC+9)
        hour += 9;
 80012e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012ea:	3309      	adds	r3, #9
 80012ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
        
        // 날짜 넘어가는 경우 처리
        if (hour >= 24) {
 80012ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012f0:	2b17      	cmp	r3, #23
 80012f2:	dd4a      	ble.n	800138a <ConvertUTCToKST+0xda>
            hour -= 24;
 80012f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012f6:	3b18      	subs	r3, #24
 80012f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
            day += 1;
 80012fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012fc:	3301      	adds	r3, #1
 80012fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
            
            // 월말 처리 (간단한 버전)
            int days_in_month[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 8001300:	4b2d      	ldr	r3, [pc, #180]	@ (80013b8 <ConvertUTCToKST+0x108>)
 8001302:	f107 0408 	add.w	r4, r7, #8
 8001306:	461d      	mov	r5, r3
 8001308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800130a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800130c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800130e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001310:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001314:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) {
 8001318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d11c      	bne.n	800135c <ConvertUTCToKST+0xac>
 8001322:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001324:	4b25      	ldr	r3, [pc, #148]	@ (80013bc <ConvertUTCToKST+0x10c>)
 8001326:	fb83 1302 	smull	r1, r3, r3, r2
 800132a:	1159      	asrs	r1, r3, #5
 800132c:	17d3      	asrs	r3, r2, #31
 800132e:	1acb      	subs	r3, r1, r3
 8001330:	2164      	movs	r1, #100	@ 0x64
 8001332:	fb01 f303 	mul.w	r3, r1, r3
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	d10d      	bne.n	8001358 <ConvertUTCToKST+0xa8>
 800133c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800133e:	4b1f      	ldr	r3, [pc, #124]	@ (80013bc <ConvertUTCToKST+0x10c>)
 8001340:	fb83 1302 	smull	r1, r3, r3, r2
 8001344:	11d9      	asrs	r1, r3, #7
 8001346:	17d3      	asrs	r3, r2, #31
 8001348:	1acb      	subs	r3, r1, r3
 800134a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800134e:	fb01 f303 	mul.w	r3, r1, r3
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <ConvertUTCToKST+0xac>
                days_in_month[1] = 29; // 윤년
 8001358:	231d      	movs	r3, #29
 800135a:	60fb      	str	r3, [r7, #12]
            }
            
            if (day > days_in_month[month - 1]) {
 800135c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800135e:	3b01      	subs	r3, #1
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	3350      	adds	r3, #80	@ 0x50
 8001364:	443b      	add	r3, r7
 8001366:	f853 2c48 	ldr.w	r2, [r3, #-72]
 800136a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800136c:	429a      	cmp	r2, r3
 800136e:	da0c      	bge.n	800138a <ConvertUTCToKST+0xda>
                day = 1;
 8001370:	2301      	movs	r3, #1
 8001372:	63fb      	str	r3, [r7, #60]	@ 0x3c
                month += 1;
 8001374:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001376:	3301      	adds	r3, #1
 8001378:	643b      	str	r3, [r7, #64]	@ 0x40
                if (month > 12) {
 800137a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800137c:	2b0c      	cmp	r3, #12
 800137e:	dd04      	ble.n	800138a <ConvertUTCToKST+0xda>
                    month = 1;
 8001380:	2301      	movs	r3, #1
 8001382:	643b      	str	r3, [r7, #64]	@ 0x40
                    year += 1;
 8001384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001386:	3301      	adds	r3, #1
 8001388:	63bb      	str	r3, [r7, #56]	@ 0x38
                }
            }
        }
        
        // 한국 시간으로 수정된 시간 문자열 재구성
        snprintf(time_str, 64, "%02dh%02dm%02ds on %02d/%02d/%d (KST)", 
 800138a:	6cfd      	ldr	r5, [r7, #76]	@ 0x4c
 800138c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800138e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001390:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001392:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001394:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8001396:	9404      	str	r4, [sp, #16]
 8001398:	9003      	str	r0, [sp, #12]
 800139a:	9102      	str	r1, [sp, #8]
 800139c:	9201      	str	r2, [sp, #4]
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	462b      	mov	r3, r5
 80013a2:	4a07      	ldr	r2, [pc, #28]	@ (80013c0 <ConvertUTCToKST+0x110>)
 80013a4:	2140      	movs	r1, #64	@ 0x40
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f016 fe7e 	bl	80180a8 <sniprintf>
                 hour, min, sec, month, day, year);
    }
}
 80013ac:	bf00      	nop
 80013ae:	3750      	adds	r7, #80	@ 0x50
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bdb0      	pop	{r4, r5, r7, pc}
 80013b4:	0801a720 	.word	0x0801a720
 80013b8:	0801a760 	.word	0x0801a760
 80013bc:	51eb851f 	.word	0x51eb851f
 80013c0:	0801a738 	.word	0x0801a738

080013c4 <ResponseHandler_ParseTimeResponse>:

// 시간 응답 파싱 및 저장 함수
void ResponseHandler_ParseTimeResponse(const char* response)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
    if (response == NULL || !ResponseHandler_IsTimeResponse(response)) {
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d05a      	beq.n	8001488 <ResponseHandler_ParseTimeResponse+0xc4>
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ff46 	bl	8001264 <ResponseHandler_IsTimeResponse>
 80013d8:	4603      	mov	r3, r0
 80013da:	f083 0301 	eor.w	r3, r3, #1
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d151      	bne.n	8001488 <ResponseHandler_ParseTimeResponse+0xc4>
        return;
    }
    
    LOG_DEBUG("[ResponseHandler] Parsing time response: '%s'", response);
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	492a      	ldr	r1, [pc, #168]	@ (8001490 <ResponseHandler_ParseTimeResponse+0xcc>)
 80013e8:	2000      	movs	r0, #0
 80013ea:	f004 fca7 	bl	8005d3c <LOGGER_SendFormatted>
    
    // LTIME 응답에서 시간 정보 추출 (LTIME: 또는 LTIME= 형식 모두 지원)
    const char* time_start = strstr(response, "LTIME:");
 80013ee:	4929      	ldr	r1, [pc, #164]	@ (8001494 <ResponseHandler_ParseTimeResponse+0xd0>)
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f016 ff87 	bl	8018304 <strstr>
 80013f6:	60f8      	str	r0, [r7, #12]
    if (time_start != NULL) {
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <ResponseHandler_ParseTimeResponse+0x42>
        // "LTIME: 14h25m30s on 01/29/2025" 형태에서 시간 부분 추출
        time_start += 6; // "LTIME:" 부분 건너뛰기
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	3306      	adds	r3, #6
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	e00a      	b.n	800141c <ResponseHandler_ParseTimeResponse+0x58>
    } else {
        time_start = strstr(response, "LTIME=");
 8001406:	4924      	ldr	r1, [pc, #144]	@ (8001498 <ResponseHandler_ParseTimeResponse+0xd4>)
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f016 ff7b 	bl	8018304 <strstr>
 800140e:	60f8      	str	r0, [r7, #12]
        if (time_start != NULL) {
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d002      	beq.n	800141c <ResponseHandler_ParseTimeResponse+0x58>
            // "AT+LTIME=00h00m28s on 01/01/19" 형태에서 시간 부분 추출
            time_start += 6; // "LTIME=" 부분 건너뛰기
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	3306      	adds	r3, #6
 800141a:	60fb      	str	r3, [r7, #12]
        }
    }
    
    if (time_start != NULL) {
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d033      	beq.n	800148a <ResponseHandler_ParseTimeResponse+0xc6>
        
        // 앞쪽 공백 제거
        while (*time_start == ' ') {
 8001422:	e002      	b.n	800142a <ResponseHandler_ParseTimeResponse+0x66>
            time_start++;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	3301      	adds	r3, #1
 8001428:	60fb      	str	r3, [r7, #12]
        while (*time_start == ' ') {
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b20      	cmp	r3, #32
 8001430:	d0f8      	beq.n	8001424 <ResponseHandler_ParseTimeResponse+0x60>
        }
        
        // 전역 변수에 시간 정보 저장 (개행 문자 제거)
        strncpy(g_network_time, time_start, sizeof(g_network_time) - 1);
 8001432:	223f      	movs	r2, #63	@ 0x3f
 8001434:	68f9      	ldr	r1, [r7, #12]
 8001436:	4819      	ldr	r0, [pc, #100]	@ (800149c <ResponseHandler_ParseTimeResponse+0xd8>)
 8001438:	f016 ff51 	bl	80182de <strncpy>
        g_network_time[sizeof(g_network_time) - 1] = '\0';
 800143c:	4b17      	ldr	r3, [pc, #92]	@ (800149c <ResponseHandler_ParseTimeResponse+0xd8>)
 800143e:	2200      	movs	r2, #0
 8001440:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        
        // 개행 문자 제거
        char* newline = strchr(g_network_time, '\r');
 8001444:	210d      	movs	r1, #13
 8001446:	4815      	ldr	r0, [pc, #84]	@ (800149c <ResponseHandler_ParseTimeResponse+0xd8>)
 8001448:	f016 ff3c 	bl	80182c4 <strchr>
 800144c:	60b8      	str	r0, [r7, #8]
        if (newline) *newline = '\0';
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d002      	beq.n	800145a <ResponseHandler_ParseTimeResponse+0x96>
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
        newline = strchr(g_network_time, '\n');
 800145a:	210a      	movs	r1, #10
 800145c:	480f      	ldr	r0, [pc, #60]	@ (800149c <ResponseHandler_ParseTimeResponse+0xd8>)
 800145e:	f016 ff31 	bl	80182c4 <strchr>
 8001462:	60b8      	str	r0, [r7, #8]
        if (newline) *newline = '\0';
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d002      	beq.n	8001470 <ResponseHandler_ParseTimeResponse+0xac>
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
        
        // 한국 시간대로 보정
        ConvertUTCToKST(g_network_time);
 8001470:	480a      	ldr	r0, [pc, #40]	@ (800149c <ResponseHandler_ParseTimeResponse+0xd8>)
 8001472:	f7ff ff1d 	bl	80012b0 <ConvertUTCToKST>
        
        g_time_synchronized = true;
 8001476:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <ResponseHandler_ParseTimeResponse+0xdc>)
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]
        
        LOG_INFO("[LoRa] 🕐 Network time synchronized (KST): %s", g_network_time);
 800147c:	4a07      	ldr	r2, [pc, #28]	@ (800149c <ResponseHandler_ParseTimeResponse+0xd8>)
 800147e:	4909      	ldr	r1, [pc, #36]	@ (80014a4 <ResponseHandler_ParseTimeResponse+0xe0>)
 8001480:	2001      	movs	r0, #1
 8001482:	f004 fc5b 	bl	8005d3c <LOGGER_SendFormatted>
 8001486:	e000      	b.n	800148a <ResponseHandler_ParseTimeResponse+0xc6>
        return;
 8001488:	bf00      	nop
    }
}
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	0801a790 	.word	0x0801a790
 8001494:	0801a710 	.word	0x0801a710
 8001498:	0801a718 	.word	0x0801a718
 800149c:	2000023c 	.word	0x2000023c
 80014a0:	2000027c 	.word	0x2000027c
 80014a4:	0801a7c0 	.word	0x0801a7c0

080014a8 <ResponseHandler_GetNetworkTime>:

// 현재 저장된 네트워크 시간 반환
const char* ResponseHandler_GetNetworkTime(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
    if (g_time_synchronized) {
 80014ac:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <ResponseHandler_GetNetworkTime+0x1c>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <ResponseHandler_GetNetworkTime+0x10>
        return g_network_time;
 80014b4:	4b04      	ldr	r3, [pc, #16]	@ (80014c8 <ResponseHandler_GetNetworkTime+0x20>)
 80014b6:	e000      	b.n	80014ba <ResponseHandler_GetNetworkTime+0x12>
    }
    return NULL;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	2000027c 	.word	0x2000027c
 80014c8:	2000023c 	.word	0x2000023c

080014cc <ResponseHandler_IsTimeSynchronized>:

// 시간 동기화 상태 확인
bool ResponseHandler_IsTimeSynchronized(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
    return g_time_synchronized;
 80014d0:	4b03      	ldr	r3, [pc, #12]	@ (80014e0 <ResponseHandler_IsTimeSynchronized+0x14>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	2000027c 	.word	0x2000027c

080014e4 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80014ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001558 <SCB_CleanInvalidateDCache+0x74>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014f2:	f3bf 8f4f 	dsb	sy
}
 80014f6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80014f8:	4b17      	ldr	r3, [pc, #92]	@ (8001558 <SCB_CleanInvalidateDCache+0x74>)
 80014fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014fe:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	0b5b      	lsrs	r3, r3, #13
 8001504:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001508:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	08db      	lsrs	r3, r3, #3
 800150e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001512:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	015a      	lsls	r2, r3, #5
 8001518:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800151c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001522:	490d      	ldr	r1, [pc, #52]	@ (8001558 <SCB_CleanInvalidateDCache+0x74>)
 8001524:	4313      	orrs	r3, r2
 8001526:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	1e5a      	subs	r2, r3, #1
 800152e:	60ba      	str	r2, [r7, #8]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1ef      	bne.n	8001514 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	1e5a      	subs	r2, r3, #1
 8001538:	60fa      	str	r2, [r7, #12]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1e5      	bne.n	800150a <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800153e:	f3bf 8f4f 	dsb	sy
}
 8001542:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001544:	f3bf 8f6f 	isb	sy
}
 8001548:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <_generate_log_filename>:
#endif

// 내부 함수 구현 - 함수 호출 순서에 맞게 배치
#ifdef STM32F746xx
static int _generate_log_filename(char* filename, size_t max_len)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	f5ad 7d50 	sub.w	sp, sp, #832	@ 0x340
 8001562:	af00      	add	r7, sp, #0
 8001564:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001568:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 800156c:	6018      	str	r0, [r3, #0]
 800156e:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001572:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8001576:	6019      	str	r1, [r3, #0]
    // 8.3 형식 파일명 생성 - 기존 파일 확인하여 중복 방지
    static int file_counter = 0;  // 0부터 시작하여 첫 번째 호출에서 1로 설정
    
    // 첫 번째 호출에서만 기존 파일 확인
    if (file_counter == 0) {
 8001578:	4b48      	ldr	r3, [pc, #288]	@ (800169c <_generate_log_filename+0x140>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d14a      	bne.n	8001616 <_generate_log_filename+0xba>
        file_counter = 1;
 8001580:	4b46      	ldr	r3, [pc, #280]	@ (800169c <_generate_log_filename+0x140>)
 8001582:	2201      	movs	r2, #1
 8001584:	601a      	str	r2, [r3, #0]
        
        // 기존 파일들 확인하여 다음 번호 찾기
        for (int i = 1; i <= 9999; i++) {
 8001586:	2301      	movs	r3, #1
 8001588:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 800158c:	e034      	b.n	80015f8 <_generate_log_filename+0x9c>
            char test_filename[256];
            FIL test_file;
            
            if (g_directory_available) {
 800158e:	4b44      	ldr	r3, [pc, #272]	@ (80016a0 <_generate_log_filename+0x144>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d009      	beq.n	80015aa <_generate_log_filename+0x4e>
                snprintf(test_filename, sizeof(test_filename), "lora_logs/LORA%04d.TXT", i);
 8001596:	f107 0008 	add.w	r0, r7, #8
 800159a:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 800159e:	4a41      	ldr	r2, [pc, #260]	@ (80016a4 <_generate_log_filename+0x148>)
 80015a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015a4:	f016 fd80 	bl	80180a8 <sniprintf>
 80015a8:	e008      	b.n	80015bc <_generate_log_filename+0x60>
            } else {
                snprintf(test_filename, sizeof(test_filename), "LORA%04d.TXT", i);
 80015aa:	f107 0008 	add.w	r0, r7, #8
 80015ae:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80015b2:	4a3d      	ldr	r2, [pc, #244]	@ (80016a8 <_generate_log_filename+0x14c>)
 80015b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015b8:	f016 fd76 	bl	80180a8 <sniprintf>
            }
            
            // 파일이 존재하는지 확인
            FRESULT test_result = f_open(&test_file, test_filename, FA_READ);
 80015bc:	f107 0108 	add.w	r1, r7, #8
 80015c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80015c4:	2201      	movs	r2, #1
 80015c6:	4618      	mov	r0, r3
 80015c8:	f012 fe82 	bl	80142d0 <f_open>
 80015cc:	4603      	mov	r3, r0
 80015ce:	f887 3337 	strb.w	r3, [r7, #823]	@ 0x337
            if (test_result == FR_OK) {
 80015d2:	f897 3337 	ldrb.w	r3, [r7, #823]	@ 0x337
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d115      	bne.n	8001606 <_generate_log_filename+0xaa>
                f_close(&test_file);
 80015da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80015de:	4618      	mov	r0, r3
 80015e0:	f013 f9f4 	bl	80149cc <f_close>
                file_counter = i + 1;  // 다음 번호로 설정
 80015e4:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80015e8:	3301      	adds	r3, #1
 80015ea:	4a2c      	ldr	r2, [pc, #176]	@ (800169c <_generate_log_filename+0x140>)
 80015ec:	6013      	str	r3, [r2, #0]
        for (int i = 1; i <= 9999; i++) {
 80015ee:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80015f2:	3301      	adds	r3, #1
 80015f4:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 80015f8:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80015fc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001600:	4293      	cmp	r3, r2
 8001602:	ddc4      	ble.n	800158e <_generate_log_filename+0x32>
 8001604:	e000      	b.n	8001608 <_generate_log_filename+0xac>
            } else {
                break;  // 파일이 없으면 현재 번호 사용
 8001606:	bf00      	nop
            }
        }
        
        LOG_DEBUG("[SDStorage] Auto-detected next log file number: %d", file_counter);
 8001608:	4b24      	ldr	r3, [pc, #144]	@ (800169c <_generate_log_filename+0x140>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	4927      	ldr	r1, [pc, #156]	@ (80016ac <_generate_log_filename+0x150>)
 8001610:	2000      	movs	r0, #0
 8001612:	f004 fb93 	bl	8005d3c <LOGGER_SendFormatted>
    }
    
    // 디렉토리 사용 가능 여부에 따라 경로 결정
    int result;
    if (g_directory_available) {
 8001616:	4b22      	ldr	r3, [pc, #136]	@ (80016a0 <_generate_log_filename+0x144>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d011      	beq.n	8001642 <_generate_log_filename+0xe6>
        // lora_logs 디렉토리에 파일 생성 (TXT 형식)
        result = snprintf(filename, max_len, "lora_logs/LORA%04d.TXT", file_counter);
 800161e:	4b1f      	ldr	r3, [pc, #124]	@ (800169c <_generate_log_filename+0x140>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 8001626:	f5a2 7150 	sub.w	r1, r2, #832	@ 0x340
 800162a:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 800162e:	f5a2 704f 	sub.w	r0, r2, #828	@ 0x33c
 8001632:	4a1c      	ldr	r2, [pc, #112]	@ (80016a4 <_generate_log_filename+0x148>)
 8001634:	6809      	ldr	r1, [r1, #0]
 8001636:	6800      	ldr	r0, [r0, #0]
 8001638:	f016 fd36 	bl	80180a8 <sniprintf>
 800163c:	f8c7 0338 	str.w	r0, [r7, #824]	@ 0x338
 8001640:	e010      	b.n	8001664 <_generate_log_filename+0x108>
    } else {
        // 루트 디렉토리에 파일 생성 (TXT 형식)
        result = snprintf(filename, max_len, "LORA%04d.TXT", file_counter);
 8001642:	4b16      	ldr	r3, [pc, #88]	@ (800169c <_generate_log_filename+0x140>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 800164a:	f5a2 7150 	sub.w	r1, r2, #832	@ 0x340
 800164e:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 8001652:	f5a2 704f 	sub.w	r0, r2, #828	@ 0x33c
 8001656:	4a14      	ldr	r2, [pc, #80]	@ (80016a8 <_generate_log_filename+0x14c>)
 8001658:	6809      	ldr	r1, [r1, #0]
 800165a:	6800      	ldr	r0, [r0, #0]
 800165c:	f016 fd24 	bl	80180a8 <sniprintf>
 8001660:	f8c7 0338 	str.w	r0, [r7, #824]	@ 0x338
    }
    
    file_counter++;
 8001664:	4b0d      	ldr	r3, [pc, #52]	@ (800169c <_generate_log_filename+0x140>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	3301      	adds	r3, #1
 800166a:	4a0c      	ldr	r2, [pc, #48]	@ (800169c <_generate_log_filename+0x140>)
 800166c:	6013      	str	r3, [r2, #0]
    
    if (result < 0 || (size_t)result >= max_len) {
 800166e:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001672:	2b00      	cmp	r3, #0
 8001674:	db08      	blt.n	8001688 <_generate_log_filename+0x12c>
 8001676:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 800167a:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 800167e:	f5a2 7250 	sub.w	r2, r2, #832	@ 0x340
 8001682:	6812      	ldr	r2, [r2, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d802      	bhi.n	800168e <_generate_log_filename+0x132>
        return SDSTORAGE_ERROR;
 8001688:	f06f 03c9 	mvn.w	r3, #201	@ 0xc9
 800168c:	e000      	b.n	8001690 <_generate_log_filename+0x134>
    }
    
    return SDSTORAGE_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	f507 7750 	add.w	r7, r7, #832	@ 0x340
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200005b8 	.word	0x200005b8
 80016a0:	20000384 	.word	0x20000384
 80016a4:	0801a7f0 	.word	0x0801a7f0
 80016a8:	0801a808 	.word	0x0801a808
 80016ac:	0801a818 	.word	0x0801a818

080016b0 <_ensure_persistent_file_open>:

// 지속적 파일 핸들 관리 함수들
static void _ensure_persistent_file_open(void) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
    if (!g_file_is_open || strlen(g_current_log_file) == 0) {
 80016b6:	4b22      	ldr	r3, [pc, #136]	@ (8001740 <_ensure_persistent_file_open+0x90>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	f083 0301 	eor.w	r3, r3, #1
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d103      	bne.n	80016cc <_ensure_persistent_file_open+0x1c>
 80016c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001744 <_ensure_persistent_file_open+0x94>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d135      	bne.n	8001738 <_ensure_persistent_file_open+0x88>
        // 파일이 열려있지 않거나 파일명이 없으면 새로 열기
        if (g_file_is_open) {
 80016cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001740 <_ensure_persistent_file_open+0x90>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <_ensure_persistent_file_open+0x30>
            f_close(&g_persistent_log_file);
 80016d4:	481c      	ldr	r0, [pc, #112]	@ (8001748 <_ensure_persistent_file_open+0x98>)
 80016d6:	f013 f979 	bl	80149cc <f_close>
            g_file_is_open = false;
 80016da:	4b19      	ldr	r3, [pc, #100]	@ (8001740 <_ensure_persistent_file_open+0x90>)
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
        }
        
        // 파일명 생성 (필요시)
        if (strlen(g_current_log_file) == 0) {
 80016e0:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <_ensure_persistent_file_open+0x94>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d104      	bne.n	80016f2 <_ensure_persistent_file_open+0x42>
            _generate_log_filename(g_current_log_file, sizeof(g_current_log_file));
 80016e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016ec:	4815      	ldr	r0, [pc, #84]	@ (8001744 <_ensure_persistent_file_open+0x94>)
 80016ee:	f7ff ff35 	bl	800155c <_generate_log_filename>
        }
        
        // 파일 열기 (append 모드)
        FRESULT open_result = f_open(&g_persistent_log_file, g_current_log_file, FA_OPEN_APPEND | FA_WRITE);
 80016f2:	2232      	movs	r2, #50	@ 0x32
 80016f4:	4913      	ldr	r1, [pc, #76]	@ (8001744 <_ensure_persistent_file_open+0x94>)
 80016f6:	4814      	ldr	r0, [pc, #80]	@ (8001748 <_ensure_persistent_file_open+0x98>)
 80016f8:	f012 fdea 	bl	80142d0 <f_open>
 80016fc:	4603      	mov	r3, r0
 80016fe:	71fb      	strb	r3, [r7, #7]
        if (open_result != FR_OK) {
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d006      	beq.n	8001714 <_ensure_persistent_file_open+0x64>
            // 파일이 없으면 생성
            open_result = f_open(&g_persistent_log_file, g_current_log_file, FA_CREATE_ALWAYS | FA_WRITE);
 8001706:	220a      	movs	r2, #10
 8001708:	490e      	ldr	r1, [pc, #56]	@ (8001744 <_ensure_persistent_file_open+0x94>)
 800170a:	480f      	ldr	r0, [pc, #60]	@ (8001748 <_ensure_persistent_file_open+0x98>)
 800170c:	f012 fde0 	bl	80142d0 <f_open>
 8001710:	4603      	mov	r3, r0
 8001712:	71fb      	strb	r3, [r7, #7]
        }
        
        if (open_result == FR_OK) {
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d108      	bne.n	800172c <_ensure_persistent_file_open+0x7c>
            g_file_is_open = true;
 800171a:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <_ensure_persistent_file_open+0x90>)
 800171c:	2201      	movs	r2, #1
 800171e:	701a      	strb	r2, [r3, #0]
            LOG_DEBUG("[SDStorage] Persistent file opened: %s", g_current_log_file);
 8001720:	4a08      	ldr	r2, [pc, #32]	@ (8001744 <_ensure_persistent_file_open+0x94>)
 8001722:	490a      	ldr	r1, [pc, #40]	@ (800174c <_ensure_persistent_file_open+0x9c>)
 8001724:	2000      	movs	r0, #0
 8001726:	f004 fb09 	bl	8005d3c <LOGGER_SendFormatted>
        } else {
            LOG_ERROR("[SDStorage] Failed to open persistent file: %d", open_result);
        }
    }
}
 800172a:	e005      	b.n	8001738 <_ensure_persistent_file_open+0x88>
            LOG_ERROR("[SDStorage] Failed to open persistent file: %d", open_result);
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	461a      	mov	r2, r3
 8001730:	4907      	ldr	r1, [pc, #28]	@ (8001750 <_ensure_persistent_file_open+0xa0>)
 8001732:	2003      	movs	r0, #3
 8001734:	f004 fb02 	bl	8005d3c <LOGGER_SendFormatted>
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200005b4 	.word	0x200005b4
 8001744:	20000280 	.word	0x20000280
 8001748:	20000388 	.word	0x20000388
 800174c:	0801a84c 	.word	0x0801a84c
 8001750:	0801a874 	.word	0x0801a874

08001754 <_close_persistent_file>:

static void _close_persistent_file(void) {
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
    if (g_file_is_open) {
 8001758:	4b08      	ldr	r3, [pc, #32]	@ (800177c <_close_persistent_file+0x28>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00a      	beq.n	8001776 <_close_persistent_file+0x22>
        f_close(&g_persistent_log_file);
 8001760:	4807      	ldr	r0, [pc, #28]	@ (8001780 <_close_persistent_file+0x2c>)
 8001762:	f013 f933 	bl	80149cc <f_close>
        g_file_is_open = false;
 8001766:	4b05      	ldr	r3, [pc, #20]	@ (800177c <_close_persistent_file+0x28>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
        LOG_DEBUG("[SDStorage] Persistent file closed: %s", g_current_log_file);
 800176c:	4a05      	ldr	r2, [pc, #20]	@ (8001784 <_close_persistent_file+0x30>)
 800176e:	4906      	ldr	r1, [pc, #24]	@ (8001788 <_close_persistent_file+0x34>)
 8001770:	2000      	movs	r0, #0
 8001772:	f004 fae3 	bl	8005d3c <LOGGER_SendFormatted>
    }
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200005b4 	.word	0x200005b4
 8001780:	20000388 	.word	0x20000388
 8001784:	20000280 	.word	0x20000280
 8001788:	0801a8a4 	.word	0x0801a8a4

0800178c <SDStorage_Init>:
static ResultCode _initialize_sd_hardware(void);
static ResultCode _mount_filesystem_with_retry(void);
// static uint32_t _get_current_timestamp(void); - unused function removed

ResultCode SDStorage_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
    LOG_INFO("[SDStorage] Starting SD card initialization...");
 8001792:	4927      	ldr	r1, [pc, #156]	@ (8001830 <SDStorage_Init+0xa4>)
 8001794:	2001      	movs	r0, #1
 8001796:	f004 fad1 	bl	8005d3c <LOGGER_SendFormatted>
    
    // 초기화 시 지속적 파일 닫기
    _close_persistent_file();
 800179a:	f7ff ffdb 	bl	8001754 <_close_persistent_file>
    
    // 1. SD 하드웨어 초기화 및 상태 확인
    ResultCode hw_result = _initialize_sd_hardware();
 800179e:	f000 fa57 	bl	8001c50 <_initialize_sd_hardware>
 80017a2:	60f8      	str	r0, [r7, #12]
    if (hw_result != SDSTORAGE_OK) {
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <SDStorage_Init+0x22>
        return hw_result;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	e03b      	b.n	8001826 <SDStorage_Init+0x9a>
    }
    
    // 2. 파일시스템 마운트 (재시도 로직 포함)
    ResultCode mount_result = _mount_filesystem_with_retry();
 80017ae:	f000 fae5 	bl	8001d7c <_mount_filesystem_with_retry>
 80017b2:	60b8      	str	r0, [r7, #8]
    if (mount_result != SDSTORAGE_OK) {
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <SDStorage_Init+0x32>
        return mount_result;
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	e033      	b.n	8001826 <SDStorage_Init+0x9a>
    }
    
    LOG_INFO("[SDStorage] File system mount successful");
 80017be:	491d      	ldr	r1, [pc, #116]	@ (8001834 <SDStorage_Init+0xa8>)
 80017c0:	2001      	movs	r0, #1
 80017c2:	f004 fabb 	bl	8005d3c <LOGGER_SendFormatted>
    
    // 3. 디렉토리 생성 시도
    LOG_INFO("[SDStorage] Creating log directory...");
 80017c6:	491c      	ldr	r1, [pc, #112]	@ (8001838 <SDStorage_Init+0xac>)
 80017c8:	2001      	movs	r0, #1
 80017ca:	f004 fab7 	bl	8005d3c <LOGGER_SendFormatted>
    ResultCode dir_result = _create_log_directory();
 80017ce:	f000 f9dd 	bl	8001b8c <_create_log_directory>
 80017d2:	6078      	str	r0, [r7, #4]
    g_directory_available = (dir_result == SDSTORAGE_OK);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	bf0c      	ite	eq
 80017da:	2301      	moveq	r3, #1
 80017dc:	2300      	movne	r3, #0
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	4b16      	ldr	r3, [pc, #88]	@ (800183c <SDStorage_Init+0xb0>)
 80017e2:	701a      	strb	r2, [r3, #0]
    
    // 4. 최종 상태 설정
    g_sd_ready = true;
 80017e4:	4b16      	ldr	r3, [pc, #88]	@ (8001840 <SDStorage_Init+0xb4>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	701a      	strb	r2, [r3, #0]
    
    // 기존 로그 파일명이 있으면 보존, 크기는 리셋하지 않음
    if (strlen(g_current_log_file) > 0) {
 80017ea:	4b16      	ldr	r3, [pc, #88]	@ (8001844 <SDStorage_Init+0xb8>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d007      	beq.n	8001802 <SDStorage_Init+0x76>
        LOG_INFO("[SDStorage] Preserving existing log file: %s (size: %d bytes)", 
 80017f2:	4b15      	ldr	r3, [pc, #84]	@ (8001848 <SDStorage_Init+0xbc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a13      	ldr	r2, [pc, #76]	@ (8001844 <SDStorage_Init+0xb8>)
 80017f8:	4914      	ldr	r1, [pc, #80]	@ (800184c <SDStorage_Init+0xc0>)
 80017fa:	2001      	movs	r0, #1
 80017fc:	f004 fa9e 	bl	8005d3c <LOGGER_SendFormatted>
 8001800:	e00c      	b.n	800181c <SDStorage_Init+0x90>
                 g_current_log_file, g_current_log_size);
    } else {
        // 첫 초기화인 경우에만 크기와 파일명 초기화
        g_current_log_size = 0;
 8001802:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <SDStorage_Init+0xbc>)
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
        memset(g_current_log_file, 0, sizeof(g_current_log_file));
 8001808:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800180c:	2100      	movs	r1, #0
 800180e:	480d      	ldr	r0, [pc, #52]	@ (8001844 <SDStorage_Init+0xb8>)
 8001810:	f016 fd50 	bl	80182b4 <memset>
        LOG_INFO("[SDStorage] First initialization - log file will be created on first write");
 8001814:	490e      	ldr	r1, [pc, #56]	@ (8001850 <SDStorage_Init+0xc4>)
 8001816:	2001      	movs	r0, #1
 8001818:	f004 fa90 	bl	8005d3c <LOGGER_SendFormatted>
    }
    
    LOG_INFO("[SDStorage] Initialization completed successfully");
 800181c:	490d      	ldr	r1, [pc, #52]	@ (8001854 <SDStorage_Init+0xc8>)
 800181e:	2001      	movs	r0, #1
 8001820:	f004 fa8c 	bl	8005d3c <LOGGER_SendFormatted>
    return SDSTORAGE_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	0801a8cc 	.word	0x0801a8cc
 8001834:	0801a8fc 	.word	0x0801a8fc
 8001838:	0801a928 	.word	0x0801a928
 800183c:	20000384 	.word	0x20000384
 8001840:	2000027d 	.word	0x2000027d
 8001844:	20000280 	.word	0x20000280
 8001848:	20000380 	.word	0x20000380
 800184c:	0801a950 	.word	0x0801a950
 8001850:	0801a990 	.word	0x0801a990
 8001854:	0801a9dc 	.word	0x0801a9dc

08001858 <SDStorage_WriteLog>:

ResultCode SDStorage_WriteLog(const void* data, size_t size)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 800185e:	af02      	add	r7, sp, #8
 8001860:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001864:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8001868:	6018      	str	r0, [r3, #0]
 800186a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800186e:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001872:	6019      	str	r1, [r3, #0]
    if (!g_sd_ready) {
 8001874:	4b63      	ldr	r3, [pc, #396]	@ (8001a04 <SDStorage_WriteLog+0x1ac>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	f083 0301 	eor.w	r3, r3, #1
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d002      	beq.n	8001888 <SDStorage_WriteLog+0x30>
        return SDSTORAGE_NOT_READY;
 8001882:	f06f 03c8 	mvn.w	r3, #200	@ 0xc8
 8001886:	e0b8      	b.n	80019fa <SDStorage_WriteLog+0x1a2>
    }
    
    if (data == NULL || size == 0) {
 8001888:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800188c:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d006      	beq.n	80018a4 <SDStorage_WriteLog+0x4c>
 8001896:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800189a:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d102      	bne.n	80018aa <SDStorage_WriteLog+0x52>
        return SDSTORAGE_INVALID_PARAM;
 80018a4:	f06f 0301 	mvn.w	r3, #1
 80018a8:	e0a7      	b.n	80019fa <SDStorage_WriteLog+0x1a2>
    }
    
    // 새 로그 파일이 필요한 경우 생성 (파일 크기 체크는 일단 생략)
    if (strlen(g_current_log_file) == 0) {
 80018aa:	4b57      	ldr	r3, [pc, #348]	@ (8001a08 <SDStorage_WriteLog+0x1b0>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d107      	bne.n	80018c2 <SDStorage_WriteLog+0x6a>
        if (SDStorage_CreateNewLogFile() != SDSTORAGE_OK) {
 80018b2:	f000 f8c5 	bl	8001a40 <SDStorage_CreateNewLogFile>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d002      	beq.n	80018c2 <SDStorage_WriteLog+0x6a>
            return SDSTORAGE_FILE_ERROR;
 80018bc:	f06f 03c9 	mvn.w	r3, #201	@ 0xc9
 80018c0:	e09b      	b.n	80019fa <SDStorage_WriteLog+0x1a2>
        }
    }

#ifdef STM32F746xx
    // 새로운 방식: 지속적 파일 핸들 사용 (한 번 열어두고 계속 쓰기)
    _ensure_persistent_file_open();
 80018c2:	f7ff fef5 	bl	80016b0 <_ensure_persistent_file_open>
    
    if (!g_file_is_open) {
 80018c6:	4b51      	ldr	r3, [pc, #324]	@ (8001a0c <SDStorage_WriteLog+0x1b4>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	f083 0301 	eor.w	r3, r3, #1
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d006      	beq.n	80018e2 <SDStorage_WriteLog+0x8a>
        LOG_ERROR("[SDStorage] Cannot open persistent file");
 80018d4:	494e      	ldr	r1, [pc, #312]	@ (8001a10 <SDStorage_WriteLog+0x1b8>)
 80018d6:	2003      	movs	r0, #3
 80018d8:	f004 fa30 	bl	8005d3c <LOGGER_SendFormatted>
        return SDSTORAGE_FILE_ERROR;
 80018dc:	f06f 03c9 	mvn.w	r3, #201	@ 0xc9
 80018e0:	e08b      	b.n	80019fa <SDStorage_WriteLog+0x1a2>
    }
    
    // 데이터 + 줄바꿈 추가하여 쓰기
    char write_buffer[LOGGER_WRITE_BUFFER_SIZE];
    if (size + 2 < sizeof(write_buffer)) {
 80018e2:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80018e6:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	3302      	adds	r3, #2
 80018ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018f2:	d277      	bcs.n	80019e4 <SDStorage_WriteLog+0x18c>
        // 원본 데이터 복사
        memcpy(write_buffer, data, size);
 80018f4:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80018f8:	f5a3 6282 	sub.w	r2, r3, #1040	@ 0x410
 80018fc:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001900:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8001904:	f107 000c 	add.w	r0, r7, #12
 8001908:	6812      	ldr	r2, [r2, #0]
 800190a:	6819      	ldr	r1, [r3, #0]
 800190c:	f016 fd93 	bl	8018436 <memcpy>
        // 줄바꿈 추가
        write_buffer[size] = '\r';
 8001910:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001914:	f2a3 4204 	subw	r2, r3, #1028	@ 0x404
 8001918:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800191c:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4413      	add	r3, r2
 8001924:	220d      	movs	r2, #13
 8001926:	701a      	strb	r2, [r3, #0]
        write_buffer[size + 1] = '\n';
 8001928:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800192c:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	3301      	adds	r3, #1
 8001934:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 8001938:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 800193c:	210a      	movs	r1, #10
 800193e:	54d1      	strb	r1, [r2, r3]
        
        // 파일에 쓰기 (파일은 이미 열려있음)
        UINT bytes_written;
        FRESULT write_result = f_write(&g_persistent_log_file, write_buffer, size + 2, &bytes_written);
 8001940:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001944:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	1c9a      	adds	r2, r3, #2
 800194c:	f107 0308 	add.w	r3, r7, #8
 8001950:	f107 010c 	add.w	r1, r7, #12
 8001954:	482f      	ldr	r0, [pc, #188]	@ (8001a14 <SDStorage_WriteLog+0x1bc>)
 8001956:	f012 fe46 	bl	80145e6 <f_write>
 800195a:	4603      	mov	r3, r0
 800195c:	f887 340f 	strb.w	r3, [r7, #1039]	@ 0x40f
        
        if (write_result == FR_OK && bytes_written == size + 2) {
 8001960:	f897 340f 	ldrb.w	r3, [r7, #1039]	@ 0x40f
 8001964:	2b00      	cmp	r3, #0
 8001966:	d125      	bne.n	80019b4 <SDStorage_WriteLog+0x15c>
 8001968:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800196c:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	1c9a      	adds	r2, r3, #2
 8001974:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001978:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d118      	bne.n	80019b4 <SDStorage_WriteLog+0x15c>
            // 즉시 동기화 (파일은 열린 상태로 유지)
            f_sync(&g_persistent_log_file);
 8001982:	4824      	ldr	r0, [pc, #144]	@ (8001a14 <SDStorage_WriteLog+0x1bc>)
 8001984:	f012 ffa4 	bl	80148d0 <f_sync>
            g_current_log_size += bytes_written;
 8001988:	4b23      	ldr	r3, [pc, #140]	@ (8001a18 <SDStorage_WriteLog+0x1c0>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001990:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4413      	add	r3, r2
 8001998:	4a1f      	ldr	r2, [pc, #124]	@ (8001a18 <SDStorage_WriteLog+0x1c0>)
 800199a:	6013      	str	r3, [r2, #0]
            LOG_DEBUG("[SDStorage] Persistent write successful: %d bytes", bytes_written);
 800199c:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80019a0:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	491c      	ldr	r1, [pc, #112]	@ (8001a1c <SDStorage_WriteLog+0x1c4>)
 80019aa:	2000      	movs	r0, #0
 80019ac:	f004 f9c6 	bl	8005d3c <LOGGER_SendFormatted>
            return SDSTORAGE_OK;
 80019b0:	2300      	movs	r3, #0
 80019b2:	e022      	b.n	80019fa <SDStorage_WriteLog+0x1a2>
        } else {
            LOG_ERROR("[SDStorage] Persistent write failed: %d, written: %d/%d", write_result, bytes_written, size + 2);
 80019b4:	f897 240f 	ldrb.w	r2, [r7, #1039]	@ 0x40f
 80019b8:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80019bc:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80019c0:	6819      	ldr	r1, [r3, #0]
 80019c2:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80019c6:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	3302      	adds	r3, #2
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	460b      	mov	r3, r1
 80019d2:	4913      	ldr	r1, [pc, #76]	@ (8001a20 <SDStorage_WriteLog+0x1c8>)
 80019d4:	2003      	movs	r0, #3
 80019d6:	f004 f9b1 	bl	8005d3c <LOGGER_SendFormatted>
            // 쓰기 실패 시 파일 다시 열기 시도
            _close_persistent_file();
 80019da:	f7ff febb 	bl	8001754 <_close_persistent_file>
            return SDSTORAGE_FILE_ERROR;
 80019de:	f06f 03c9 	mvn.w	r3, #201	@ 0xc9
 80019e2:	e00a      	b.n	80019fa <SDStorage_WriteLog+0x1a2>
        }
    } else {
        LOG_ERROR("[SDStorage] Data too large for write buffer: %d bytes", size);
 80019e4:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80019e8:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	490d      	ldr	r1, [pc, #52]	@ (8001a24 <SDStorage_WriteLog+0x1cc>)
 80019f0:	2003      	movs	r0, #3
 80019f2:	f004 f9a3 	bl	8005d3c <LOGGER_SendFormatted>
        return SDSTORAGE_INVALID_PARAM;
 80019f6:	f06f 0301 	mvn.w	r3, #1
    // 실제 파일 쓰기 없이 성공으로 처리
#endif

    g_current_log_size += size;
    return SDSTORAGE_OK;
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	f507 6782 	add.w	r7, r7, #1040	@ 0x410
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	2000027d 	.word	0x2000027d
 8001a08:	20000280 	.word	0x20000280
 8001a0c:	200005b4 	.word	0x200005b4
 8001a10:	0801aa10 	.word	0x0801aa10
 8001a14:	20000388 	.word	0x20000388
 8001a18:	20000380 	.word	0x20000380
 8001a1c:	0801aa38 	.word	0x0801aa38
 8001a20:	0801aa6c 	.word	0x0801aa6c
 8001a24:	0801aaa4 	.word	0x0801aaa4

08001a28 <SDStorage_IsReady>:

bool SDStorage_IsReady(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
    return g_sd_ready;
 8001a2c:	4b03      	ldr	r3, [pc, #12]	@ (8001a3c <SDStorage_IsReady+0x14>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	2000027d 	.word	0x2000027d

08001a40 <SDStorage_CreateNewLogFile>:
        memset(g_current_log_file, 0, sizeof(g_current_log_file));
    }
}

ResultCode SDStorage_CreateNewLogFile(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 8001a46:	af00      	add	r7, sp, #0
    if (!g_sd_ready) {
 8001a48:	4b43      	ldr	r3, [pc, #268]	@ (8001b58 <SDStorage_CreateNewLogFile+0x118>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	f083 0301 	eor.w	r3, r3, #1
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d002      	beq.n	8001a5c <SDStorage_CreateNewLogFile+0x1c>
        return SDSTORAGE_NOT_READY;
 8001a56:	f06f 03c8 	mvn.w	r3, #200	@ 0xc8
 8001a5a:	e077      	b.n	8001b4c <SDStorage_CreateNewLogFile+0x10c>
    }
    
    // 전역 파일 객체 제거됨 - 별도 처리 불필요
    
    // 새 파일명 생성
    if (_generate_log_filename(g_current_log_file, sizeof(g_current_log_file)) != SDSTORAGE_OK) {
 8001a5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a60:	483e      	ldr	r0, [pc, #248]	@ (8001b5c <SDStorage_CreateNewLogFile+0x11c>)
 8001a62:	f7ff fd7b 	bl	800155c <_generate_log_filename>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <SDStorage_CreateNewLogFile+0x32>
        return SDSTORAGE_ERROR;
 8001a6c:	f06f 03c9 	mvn.w	r3, #201	@ 0xc9
 8001a70:	e06c      	b.n	8001b4c <SDStorage_CreateNewLogFile+0x10c>
    }
    
    // 파일 생성 테스트 (간단한 방식)
#ifdef STM32F746xx
    LOG_INFO("[SDStorage] Testing file creation: %s", g_current_log_file);
 8001a72:	4a3a      	ldr	r2, [pc, #232]	@ (8001b5c <SDStorage_CreateNewLogFile+0x11c>)
 8001a74:	493a      	ldr	r1, [pc, #232]	@ (8001b60 <SDStorage_CreateNewLogFile+0x120>)
 8001a76:	2001      	movs	r0, #1
 8001a78:	f004 f960 	bl	8005d3c <LOGGER_SendFormatted>
    
    // 지역 변수로 파일 객체 생성
    FIL test_file;
    memset(&test_file, 0, sizeof(test_file));
 8001a7c:	463b      	mov	r3, r7
 8001a7e:	f44f 720b 	mov.w	r2, #556	@ 0x22c
 8001a82:	2100      	movs	r1, #0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f016 fc15 	bl	80182b4 <memset>
    
    // SD 카드 상태 재확인
    DSTATUS current_disk_status = disk_status(0);
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f011 f812 	bl	8012ab4 <disk_status>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
    LOG_INFO("[SDStorage] Current disk status: 0x%02X", current_disk_status);
 8001a96:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4931      	ldr	r1, [pc, #196]	@ (8001b64 <SDStorage_CreateNewLogFile+0x124>)
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f004 f94c 	bl	8005d3c <LOGGER_SendFormatted>
    
    // 파일 생성 테스트
    FRESULT open_result = f_open(&test_file, g_current_log_file, FA_CREATE_ALWAYS | FA_WRITE);
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	220a      	movs	r2, #10
 8001aa8:	492c      	ldr	r1, [pc, #176]	@ (8001b5c <SDStorage_CreateNewLogFile+0x11c>)
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f012 fc10 	bl	80142d0 <f_open>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f887 322e 	strb.w	r3, [r7, #558]	@ 0x22e
    LOG_INFO("[SDStorage] f_open result: %d", open_result);
 8001ab6:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001aba:	461a      	mov	r2, r3
 8001abc:	492a      	ldr	r1, [pc, #168]	@ (8001b68 <SDStorage_CreateNewLogFile+0x128>)
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f004 f93c 	bl	8005d3c <LOGGER_SendFormatted>
    
    if (open_result != FR_OK) {
 8001ac4:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d032      	beq.n	8001b32 <SDStorage_CreateNewLogFile+0xf2>
        LOG_ERROR("[SDStorage] f_open failed: %d", open_result);
 8001acc:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4926      	ldr	r1, [pc, #152]	@ (8001b6c <SDStorage_CreateNewLogFile+0x12c>)
 8001ad4:	2003      	movs	r0, #3
 8001ad6:	f004 f931 	bl	8005d3c <LOGGER_SendFormatted>
        
        // 상세 에러 분석
        switch (open_result) {
 8001ada:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001ade:	2b10      	cmp	r3, #16
 8001ae0:	d006      	beq.n	8001af0 <SDStorage_CreateNewLogFile+0xb0>
 8001ae2:	2b10      	cmp	r3, #16
 8001ae4:	dc13      	bgt.n	8001b0e <SDStorage_CreateNewLogFile+0xce>
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	d00c      	beq.n	8001b04 <SDStorage_CreateNewLogFile+0xc4>
 8001aea:	2b09      	cmp	r3, #9
 8001aec:	d005      	beq.n	8001afa <SDStorage_CreateNewLogFile+0xba>
 8001aee:	e00e      	b.n	8001b0e <SDStorage_CreateNewLogFile+0xce>
            case 16: // FR_INVALID_OBJECT
                LOG_ERROR("[SDStorage] FR_INVALID_OBJECT - File object initialization issue");
 8001af0:	491f      	ldr	r1, [pc, #124]	@ (8001b70 <SDStorage_CreateNewLogFile+0x130>)
 8001af2:	2003      	movs	r0, #3
 8001af4:	f004 f922 	bl	8005d3c <LOGGER_SendFormatted>
                break;
 8001af8:	e011      	b.n	8001b1e <SDStorage_CreateNewLogFile+0xde>
            case 9: // FR_WRITE_PROTECTED  
                LOG_ERROR("[SDStorage] FR_WRITE_PROTECTED - SD card is write protected");
 8001afa:	491e      	ldr	r1, [pc, #120]	@ (8001b74 <SDStorage_CreateNewLogFile+0x134>)
 8001afc:	2003      	movs	r0, #3
 8001afe:	f004 f91d 	bl	8005d3c <LOGGER_SendFormatted>
                break;
 8001b02:	e00c      	b.n	8001b1e <SDStorage_CreateNewLogFile+0xde>
            case 3: // FR_NOT_READY
                LOG_ERROR("[SDStorage] FR_NOT_READY - Disk not ready");
 8001b04:	491c      	ldr	r1, [pc, #112]	@ (8001b78 <SDStorage_CreateNewLogFile+0x138>)
 8001b06:	2003      	movs	r0, #3
 8001b08:	f004 f918 	bl	8005d3c <LOGGER_SendFormatted>
                break;
 8001b0c:	e007      	b.n	8001b1e <SDStorage_CreateNewLogFile+0xde>
            default:
                LOG_ERROR("[SDStorage] Unknown f_open error: %d", open_result);
 8001b0e:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001b12:	461a      	mov	r2, r3
 8001b14:	4919      	ldr	r1, [pc, #100]	@ (8001b7c <SDStorage_CreateNewLogFile+0x13c>)
 8001b16:	2003      	movs	r0, #3
 8001b18:	f004 f910 	bl	8005d3c <LOGGER_SendFormatted>
                break;
 8001b1c:	bf00      	nop
        }
        
        LOG_WARN("[SDStorage] Disabling SD logging due to file creation failure");
 8001b1e:	4918      	ldr	r1, [pc, #96]	@ (8001b80 <SDStorage_CreateNewLogFile+0x140>)
 8001b20:	2002      	movs	r0, #2
 8001b22:	f004 f90b 	bl	8005d3c <LOGGER_SendFormatted>
        g_sd_ready = false;  // SD 로깅 비활성화
 8001b26:	4b0c      	ldr	r3, [pc, #48]	@ (8001b58 <SDStorage_CreateNewLogFile+0x118>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]
        return SDSTORAGE_FILE_ERROR;
 8001b2c:	f06f 03c9 	mvn.w	r3, #201	@ 0xc9
 8001b30:	e00c      	b.n	8001b4c <SDStorage_CreateNewLogFile+0x10c>
    }
    
    // 파일 생성 확인 후 즉시 닫기 (추적 등록 없이)
    f_close(&test_file);
 8001b32:	463b      	mov	r3, r7
 8001b34:	4618      	mov	r0, r3
 8001b36:	f012 ff49 	bl	80149cc <f_close>
    LOG_INFO("[SDStorage] File created and ready for logging: %s", g_current_log_file);
 8001b3a:	4a08      	ldr	r2, [pc, #32]	@ (8001b5c <SDStorage_CreateNewLogFile+0x11c>)
 8001b3c:	4911      	ldr	r1, [pc, #68]	@ (8001b84 <SDStorage_CreateNewLogFile+0x144>)
 8001b3e:	2001      	movs	r0, #1
 8001b40:	f004 f8fc 	bl	8005d3c <LOGGER_SendFormatted>
#else
    // PC/테스트 환경: 파일 생성 시뮬레이션 (항상 성공)
    LOG_INFO("[SDStorage] Test environment - file creation simulated");
#endif
    
    g_current_log_size = 0;
 8001b44:	4b10      	ldr	r3, [pc, #64]	@ (8001b88 <SDStorage_CreateNewLogFile+0x148>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
    return SDSTORAGE_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f507 770c 	add.w	r7, r7, #560	@ 0x230
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	2000027d 	.word	0x2000027d
 8001b5c:	20000280 	.word	0x20000280
 8001b60:	0801aadc 	.word	0x0801aadc
 8001b64:	0801ab04 	.word	0x0801ab04
 8001b68:	0801ab2c 	.word	0x0801ab2c
 8001b6c:	0801ab4c 	.word	0x0801ab4c
 8001b70:	0801ab6c 	.word	0x0801ab6c
 8001b74:	0801abb0 	.word	0x0801abb0
 8001b78:	0801abec 	.word	0x0801abec
 8001b7c:	0801ac18 	.word	0x0801ac18
 8001b80:	0801ac40 	.word	0x0801ac40
 8001b84:	0801ac80 	.word	0x0801ac80
 8001b88:	20000380 	.word	0x20000380

08001b8c <_create_log_directory>:
    return g_current_log_size;
}

// 내부 함수 구현
static ResultCode _create_log_directory(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    // FatFs가 이미 정상 동작하므로 HAL 테스트 불필요
    
    // f_mkdir 전에 볼륨 상태 재확인 (에러 6 방지)
    LOG_INFO("[SDStorage] Verifying volume state before f_mkdir...");
 8001b92:	4924      	ldr	r1, [pc, #144]	@ (8001c24 <_create_log_directory+0x98>)
 8001b94:	2001      	movs	r0, #1
 8001b96:	f004 f8d1 	bl	8005d3c <LOGGER_SendFormatted>
    
    // 볼륨 재마운트 시도 (상태 안정화)
    FRESULT remount_result = f_mount(&SDFatFS, SDPath, 1);
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	4922      	ldr	r1, [pc, #136]	@ (8001c28 <_create_log_directory+0x9c>)
 8001b9e:	4823      	ldr	r0, [pc, #140]	@ (8001c2c <_create_log_directory+0xa0>)
 8001ba0:	f012 fb52 	bl	8014248 <f_mount>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	71bb      	strb	r3, [r7, #6]
    LOG_INFO("[SDStorage] Volume re-mount result: %d", remount_result);
 8001ba8:	79bb      	ldrb	r3, [r7, #6]
 8001baa:	461a      	mov	r2, r3
 8001bac:	4920      	ldr	r1, [pc, #128]	@ (8001c30 <_create_log_directory+0xa4>)
 8001bae:	2001      	movs	r0, #1
 8001bb0:	f004 f8c4 	bl	8005d3c <LOGGER_SendFormatted>
    
    FRESULT mkdir_result = FR_NOT_ENABLED;  // 초기값 설정
 8001bb4:	230c      	movs	r3, #12
 8001bb6:	71fb      	strb	r3, [r7, #7]
    
    if (remount_result == FR_OK) {
 8001bb8:	79bb      	ldrb	r3, [r7, #6]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10f      	bne.n	8001bde <_create_log_directory+0x52>
        LOG_INFO("[SDStorage] Volume ready - attempting f_mkdir...");
 8001bbe:	491d      	ldr	r1, [pc, #116]	@ (8001c34 <_create_log_directory+0xa8>)
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f004 f8bb 	bl	8005d3c <LOGGER_SendFormatted>
        mkdir_result = f_mkdir("lora_logs");
 8001bc6:	481c      	ldr	r0, [pc, #112]	@ (8001c38 <_create_log_directory+0xac>)
 8001bc8:	f012 ff20 	bl	8014a0c <f_mkdir>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	71fb      	strb	r3, [r7, #7]
        LOG_INFO("[SDStorage] f_mkdir result: %d", mkdir_result);
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	4919      	ldr	r1, [pc, #100]	@ (8001c3c <_create_log_directory+0xb0>)
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f004 f8b0 	bl	8005d3c <LOGGER_SendFormatted>
 8001bdc:	e005      	b.n	8001bea <_create_log_directory+0x5e>
    } else {
        LOG_ERROR("[SDStorage] Volume re-mount failed: %d", remount_result);
 8001bde:	79bb      	ldrb	r3, [r7, #6]
 8001be0:	461a      	mov	r2, r3
 8001be2:	4917      	ldr	r1, [pc, #92]	@ (8001c40 <_create_log_directory+0xb4>)
 8001be4:	2003      	movs	r0, #3
 8001be6:	f004 f8a9 	bl	8005d3c <LOGGER_SendFormatted>
    }
    
    // FR_EXIST(9)는 이미 존재함을 의미하므로 성공으로 처리
    if (mkdir_result == FR_OK || mkdir_result == FR_EXIST) {
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <_create_log_directory+0x6a>
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	2b08      	cmp	r3, #8
 8001bf4:	d105      	bne.n	8001c02 <_create_log_directory+0x76>
        LOG_INFO("[SDStorage] Directory ready (created or already exists)");
 8001bf6:	4913      	ldr	r1, [pc, #76]	@ (8001c44 <_create_log_directory+0xb8>)
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	f004 f89f 	bl	8005d3c <LOGGER_SendFormatted>
        return SDSTORAGE_OK;  // 디렉토리 성공
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e00b      	b.n	8001c1a <_create_log_directory+0x8e>
    } else {
        LOG_ERROR("[SDStorage] f_mkdir failed: %d - FatFs level problem", mkdir_result);
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4910      	ldr	r1, [pc, #64]	@ (8001c48 <_create_log_directory+0xbc>)
 8001c08:	2003      	movs	r0, #3
 8001c0a:	f004 f897 	bl	8005d3c <LOGGER_SendFormatted>
        LOG_INFO("[SDStorage] Will try direct file creation without directory");
 8001c0e:	490f      	ldr	r1, [pc, #60]	@ (8001c4c <_create_log_directory+0xc0>)
 8001c10:	2001      	movs	r0, #1
 8001c12:	f004 f893 	bl	8005d3c <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;  // 디렉토리 실패
 8001c16:	f06f 03c9 	mvn.w	r3, #201	@ 0xc9
#else
    // PC: mkdir 시뮬레이션 (테스트에서는 성공으로 가정)
    LOG_INFO("[SDStorage] Test environment - directory creation simulated");
    return SDSTORAGE_OK;
#endif
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	0801acb4 	.word	0x0801acb4
 8001c28:	2000192c 	.word	0x2000192c
 8001c2c:	20001930 	.word	0x20001930
 8001c30:	0801acec 	.word	0x0801acec
 8001c34:	0801ad14 	.word	0x0801ad14
 8001c38:	0801ad48 	.word	0x0801ad48
 8001c3c:	0801ad54 	.word	0x0801ad54
 8001c40:	0801ad74 	.word	0x0801ad74
 8001c44:	0801ad9c 	.word	0x0801ad9c
 8001c48:	0801add4 	.word	0x0801add4
 8001c4c:	0801ae0c 	.word	0x0801ae0c

08001c50 <_initialize_sd_hardware>:

// SD 하드웨어 초기화 및 상태 확인
static ResultCode _initialize_sd_hardware(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    extern SD_HandleTypeDef hsd1;
    HAL_SD_CardStateTypeDef card_state = HAL_SD_GetCardState(&hsd1);
 8001c56:	483d      	ldr	r0, [pc, #244]	@ (8001d4c <_initialize_sd_hardware+0xfc>)
 8001c58:	f00c f8c8 	bl	800ddec <HAL_SD_GetCardState>
 8001c5c:	60f8      	str	r0, [r7, #12]
    LOG_INFO("[SDStorage] Initial SD card state: %d", card_state);
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	493b      	ldr	r1, [pc, #236]	@ (8001d50 <_initialize_sd_hardware+0x100>)
 8001c62:	2001      	movs	r0, #1
 8001c64:	f004 f86a 	bl	8005d3c <LOGGER_SendFormatted>
    
    // SD 카드가 TRANSFER 상태가 될 때까지 대기
    int wait_count = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60bb      	str	r3, [r7, #8]
    while (card_state != HAL_SD_CARD_TRANSFER && wait_count < SD_TRANSFER_WAIT_MAX_COUNT) {
 8001c6c:	e010      	b.n	8001c90 <_initialize_sd_hardware+0x40>
        LOG_INFO("[SDStorage] Waiting for SD card TRANSFER state... (attempt %d)", wait_count + 1);
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	3301      	adds	r3, #1
 8001c72:	461a      	mov	r2, r3
 8001c74:	4937      	ldr	r1, [pc, #220]	@ (8001d54 <_initialize_sd_hardware+0x104>)
 8001c76:	2001      	movs	r0, #1
 8001c78:	f004 f860 	bl	8005d3c <LOGGER_SendFormatted>
        HAL_Delay(SD_TRANSFER_CHECK_INTERVAL_MS);
 8001c7c:	2064      	movs	r0, #100	@ 0x64
 8001c7e:	f004 ff1f 	bl	8006ac0 <HAL_Delay>
        card_state = HAL_SD_GetCardState(&hsd1);
 8001c82:	4832      	ldr	r0, [pc, #200]	@ (8001d4c <_initialize_sd_hardware+0xfc>)
 8001c84:	f00c f8b2 	bl	800ddec <HAL_SD_GetCardState>
 8001c88:	60f8      	str	r0, [r7, #12]
        wait_count++;
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	60bb      	str	r3, [r7, #8]
    while (card_state != HAL_SD_CARD_TRANSFER && wait_count < SD_TRANSFER_WAIT_MAX_COUNT) {
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d002      	beq.n	8001c9c <_initialize_sd_hardware+0x4c>
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	2b31      	cmp	r3, #49	@ 0x31
 8001c9a:	dde8      	ble.n	8001c6e <_initialize_sd_hardware+0x1e>
    }
    
    if (card_state == HAL_SD_CARD_TRANSFER) {
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d142      	bne.n	8001d28 <_initialize_sd_hardware+0xd8>
        LOG_INFO("[SDStorage] ✅ SD card reached TRANSFER state successfully");
 8001ca2:	492d      	ldr	r1, [pc, #180]	@ (8001d58 <_initialize_sd_hardware+0x108>)
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f004 f849 	bl	8005d3c <LOGGER_SendFormatted>
        
        // SDMMC 에러 코드 상세 체크
        if (hsd1.ErrorCode != HAL_SD_ERROR_NONE) {
 8001caa:	4b28      	ldr	r3, [pc, #160]	@ (8001d4c <_initialize_sd_hardware+0xfc>)
 8001cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d01f      	beq.n	8001cf2 <_initialize_sd_hardware+0xa2>
            LOG_WARN("[SDStorage] SDMMC ErrorCode detected: 0x%08X", hsd1.ErrorCode);
 8001cb2:	4b26      	ldr	r3, [pc, #152]	@ (8001d4c <_initialize_sd_hardware+0xfc>)
 8001cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4928      	ldr	r1, [pc, #160]	@ (8001d5c <_initialize_sd_hardware+0x10c>)
 8001cba:	2002      	movs	r0, #2
 8001cbc:	f004 f83e 	bl	8005d3c <LOGGER_SendFormatted>
            
            if (hsd1.ErrorCode & SDMMC_ERROR_TX_UNDERRUN) {
 8001cc0:	4b22      	ldr	r3, [pc, #136]	@ (8001d4c <_initialize_sd_hardware+0xfc>)
 8001cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cc4:	f003 0310 	and.w	r3, r3, #16
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <_initialize_sd_hardware+0x84>
                LOG_WARN("[SDStorage] TX_UNDERRUN detected - clock may be too fast");
 8001ccc:	4924      	ldr	r1, [pc, #144]	@ (8001d60 <_initialize_sd_hardware+0x110>)
 8001cce:	2002      	movs	r0, #2
 8001cd0:	f004 f834 	bl	8005d3c <LOGGER_SendFormatted>
            }
            if (hsd1.ErrorCode & SDMMC_ERROR_DATA_CRC_FAIL) {
 8001cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d4c <_initialize_sd_hardware+0xfc>)
 8001cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <_initialize_sd_hardware+0x9c>
                LOG_WARN("[SDStorage] CRC_FAIL detected - cache issue possible");
 8001ce0:	4920      	ldr	r1, [pc, #128]	@ (8001d64 <_initialize_sd_hardware+0x114>)
 8001ce2:	2002      	movs	r0, #2
 8001ce4:	f004 f82a 	bl	8005d3c <LOGGER_SendFormatted>
                SCB_CleanInvalidateDCache();
 8001ce8:	f7ff fbfc 	bl	80014e4 <SCB_CleanInvalidateDCache>
            }
            
            // 에러 코드 클리어
            hsd1.ErrorCode = HAL_SD_ERROR_NONE;
 8001cec:	4b17      	ldr	r3, [pc, #92]	@ (8001d4c <_initialize_sd_hardware+0xfc>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        
        // disk_initialize 호출
        DSTATUS disk_status = disk_initialize(0);
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f010 fef8 	bl	8012ae8 <disk_initialize>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	71fb      	strb	r3, [r7, #7]
        LOG_INFO("[SDStorage] disk_initialize result: 0x%02X", disk_status);
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4919      	ldr	r1, [pc, #100]	@ (8001d68 <_initialize_sd_hardware+0x118>)
 8001d02:	2001      	movs	r0, #1
 8001d04:	f004 f81a 	bl	8005d3c <LOGGER_SendFormatted>
        
        if (disk_status != 0) {
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00a      	beq.n	8001d24 <_initialize_sd_hardware+0xd4>
            LOG_ERROR("[SDStorage] disk_initialize failed - SD card not ready");
 8001d0e:	4917      	ldr	r1, [pc, #92]	@ (8001d6c <_initialize_sd_hardware+0x11c>)
 8001d10:	2003      	movs	r0, #3
 8001d12:	f004 f813 	bl	8005d3c <LOGGER_SendFormatted>
            LOG_ERROR("[SDStorage] Possible causes: write-protected, bad card, or BSP/HAL conflict");
 8001d16:	4916      	ldr	r1, [pc, #88]	@ (8001d70 <_initialize_sd_hardware+0x120>)
 8001d18:	2003      	movs	r0, #3
 8001d1a:	f004 f80f 	bl	8005d3c <LOGGER_SendFormatted>
            return SDSTORAGE_ERROR;
 8001d1e:	f06f 03c9 	mvn.w	r3, #201	@ 0xc9
 8001d22:	e00f      	b.n	8001d44 <_initialize_sd_hardware+0xf4>
        }
        
        return SDSTORAGE_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	e00d      	b.n	8001d44 <_initialize_sd_hardware+0xf4>
    } else {
        LOG_ERROR("[SDStorage] ❌ SD card failed to reach TRANSFER state (state: %d)", card_state);
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	4912      	ldr	r1, [pc, #72]	@ (8001d74 <_initialize_sd_hardware+0x124>)
 8001d2c:	2003      	movs	r0, #3
 8001d2e:	f004 f805 	bl	8005d3c <LOGGER_SendFormatted>
        LOG_ERROR("[SDStorage] SDMMC ErrorCode: 0x%08X", hsd1.ErrorCode);
 8001d32:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <_initialize_sd_hardware+0xfc>)
 8001d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d36:	461a      	mov	r2, r3
 8001d38:	490f      	ldr	r1, [pc, #60]	@ (8001d78 <_initialize_sd_hardware+0x128>)
 8001d3a:	2003      	movs	r0, #3
 8001d3c:	f003 fffe 	bl	8005d3c <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 8001d40:	f06f 03c9 	mvn.w	r3, #201	@ 0xc9
    }
#else
    return SDSTORAGE_OK;  // PC 환경에서는 성공으로 처리
#endif
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000ebc 	.word	0x20000ebc
 8001d50:	0801ae48 	.word	0x0801ae48
 8001d54:	0801ae70 	.word	0x0801ae70
 8001d58:	0801aeb0 	.word	0x0801aeb0
 8001d5c:	0801aeec 	.word	0x0801aeec
 8001d60:	0801af1c 	.word	0x0801af1c
 8001d64:	0801af58 	.word	0x0801af58
 8001d68:	0801af90 	.word	0x0801af90
 8001d6c:	0801afbc 	.word	0x0801afbc
 8001d70:	0801aff4 	.word	0x0801aff4
 8001d74:	0801b040 	.word	0x0801b040
 8001d78:	0801b084 	.word	0x0801b084

08001d7c <_mount_filesystem_with_retry>:

// 파일시스템 마운트 (재시도 로직 포함)
static ResultCode _mount_filesystem_with_retry(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af02      	add	r7, sp, #8
#ifdef STM32F746xx
    // SD 카드 안정화 대기
    LOG_INFO("[SDStorage] Waiting for SD card stabilization (%dms)...", SD_CARD_STABILIZE_DELAY_MS);
 8001d82:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001d86:	4961      	ldr	r1, [pc, #388]	@ (8001f0c <_mount_filesystem_with_retry+0x190>)
 8001d88:	2001      	movs	r0, #1
 8001d8a:	f003 ffd7 	bl	8005d3c <LOGGER_SendFormatted>
    HAL_Delay(SD_CARD_STABILIZE_DELAY_MS);
 8001d8e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d92:	f004 fe95 	bl	8006ac0 <HAL_Delay>
    
    // f_mount 여러 번 재시도
    LOG_INFO("[SDStorage] Attempting f_mount with retry logic...");
 8001d96:	495e      	ldr	r1, [pc, #376]	@ (8001f10 <_mount_filesystem_with_retry+0x194>)
 8001d98:	2001      	movs	r0, #1
 8001d9a:	f003 ffcf 	bl	8005d3c <LOGGER_SendFormatted>
    FRESULT mount_result = FR_DISK_ERR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	73fb      	strb	r3, [r7, #15]
    
    for (int retry = 0; retry < SD_MOUNT_RETRY_COUNT; retry++) {
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	e037      	b.n	8001e18 <_mount_filesystem_with_retry+0x9c>
        LOG_INFO("[SDStorage] f_mount attempt %d/%d...", retry + 1, SD_MOUNT_RETRY_COUNT);
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	2303      	movs	r3, #3
 8001dae:	4959      	ldr	r1, [pc, #356]	@ (8001f14 <_mount_filesystem_with_retry+0x198>)
 8001db0:	2001      	movs	r0, #1
 8001db2:	f003 ffc3 	bl	8005d3c <LOGGER_SendFormatted>
        mount_result = f_mount(&SDFatFS, SDPath, 1);  // 즉시 마운트
 8001db6:	2201      	movs	r2, #1
 8001db8:	4957      	ldr	r1, [pc, #348]	@ (8001f18 <_mount_filesystem_with_retry+0x19c>)
 8001dba:	4858      	ldr	r0, [pc, #352]	@ (8001f1c <_mount_filesystem_with_retry+0x1a0>)
 8001dbc:	f012 fa44 	bl	8014248 <f_mount>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	73fb      	strb	r3, [r7, #15]
        LOG_INFO("[SDStorage] f_mount result: %d", mount_result);
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4955      	ldr	r1, [pc, #340]	@ (8001f20 <_mount_filesystem_with_retry+0x1a4>)
 8001dca:	2001      	movs	r0, #1
 8001dcc:	f003 ffb6 	bl	8005d3c <LOGGER_SendFormatted>
        
        if (mount_result == FR_OK) {
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d108      	bne.n	8001de8 <_mount_filesystem_with_retry+0x6c>
            LOG_INFO("[SDStorage] ✅ f_mount successful on attempt %d", retry + 1);
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4951      	ldr	r1, [pc, #324]	@ (8001f24 <_mount_filesystem_with_retry+0x1a8>)
 8001dde:	2001      	movs	r0, #1
 8001de0:	f003 ffac 	bl	8005d3c <LOGGER_SendFormatted>
            return SDSTORAGE_OK;
 8001de4:	2300      	movs	r3, #0
 8001de6:	e08d      	b.n	8001f04 <_mount_filesystem_with_retry+0x188>
        } else {
            LOG_WARN("[SDStorage] f_mount failed on attempt %d, retrying in %dms...", retry + 1, SD_MOUNT_RETRY_DELAY_MS);
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001df0:	494d      	ldr	r1, [pc, #308]	@ (8001f28 <_mount_filesystem_with_retry+0x1ac>)
 8001df2:	2002      	movs	r0, #2
 8001df4:	f003 ffa2 	bl	8005d3c <LOGGER_SendFormatted>
            if (retry < SD_MOUNT_RETRY_COUNT - 1) {  // 마지막 시도가 아니면 대기
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	dc09      	bgt.n	8001e12 <_mount_filesystem_with_retry+0x96>
                // STM32F7 D-Cache 클리어
                LOG_INFO("[SDStorage] Clearing D-Cache for STM32F7 compatibility...");
 8001dfe:	494b      	ldr	r1, [pc, #300]	@ (8001f2c <_mount_filesystem_with_retry+0x1b0>)
 8001e00:	2001      	movs	r0, #1
 8001e02:	f003 ff9b 	bl	8005d3c <LOGGER_SendFormatted>
                SCB_CleanInvalidateDCache();
 8001e06:	f7ff fb6d 	bl	80014e4 <SCB_CleanInvalidateDCache>
                HAL_Delay(SD_MOUNT_RETRY_DELAY_MS);
 8001e0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e0e:	f004 fe57 	bl	8006ac0 <HAL_Delay>
    for (int retry = 0; retry < SD_MOUNT_RETRY_COUNT; retry++) {
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	3301      	adds	r3, #1
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	ddc4      	ble.n	8001da8 <_mount_filesystem_with_retry+0x2c>
            }
        }
    }
    
    // 모든 재시도 실패 시 추가 복구 시도
    if (mount_result != FR_OK) {
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d06e      	beq.n	8001f02 <_mount_filesystem_with_retry+0x186>
        LOG_WARN("[SDStorage] f_mount failed with result: %d", mount_result);
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	461a      	mov	r2, r3
 8001e28:	4941      	ldr	r1, [pc, #260]	@ (8001f30 <_mount_filesystem_with_retry+0x1b4>)
 8001e2a:	2002      	movs	r0, #2
 8001e2c:	f003 ff86 	bl	8005d3c <LOGGER_SendFormatted>
        
        if (mount_result == FR_DISK_ERR) {
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d119      	bne.n	8001e6a <_mount_filesystem_with_retry+0xee>
            LOG_WARN("[SDStorage] FR_DISK_ERR detected - trying deferred mount...");
 8001e36:	493f      	ldr	r1, [pc, #252]	@ (8001f34 <_mount_filesystem_with_retry+0x1b8>)
 8001e38:	2002      	movs	r0, #2
 8001e3a:	f003 ff7f 	bl	8005d3c <LOGGER_SendFormatted>
            mount_result = f_mount(&SDFatFS, SDPath, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	4935      	ldr	r1, [pc, #212]	@ (8001f18 <_mount_filesystem_with_retry+0x19c>)
 8001e42:	4836      	ldr	r0, [pc, #216]	@ (8001f1c <_mount_filesystem_with_retry+0x1a0>)
 8001e44:	f012 fa00 	bl	8014248 <f_mount>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	73fb      	strb	r3, [r7, #15]
            LOG_INFO("[SDStorage] Deferred mount result: %d", mount_result);
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	4939      	ldr	r1, [pc, #228]	@ (8001f38 <_mount_filesystem_with_retry+0x1bc>)
 8001e52:	2001      	movs	r0, #1
 8001e54:	f003 ff72 	bl	8005d3c <LOGGER_SendFormatted>
            
            if (mount_result == FR_OK) {
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d14a      	bne.n	8001ef4 <_mount_filesystem_with_retry+0x178>
                LOG_INFO("[SDStorage] Deferred mount successful!");
 8001e5e:	4937      	ldr	r1, [pc, #220]	@ (8001f3c <_mount_filesystem_with_retry+0x1c0>)
 8001e60:	2001      	movs	r0, #1
 8001e62:	f003 ff6b 	bl	8005d3c <LOGGER_SendFormatted>
                return SDSTORAGE_OK;
 8001e66:	2300      	movs	r3, #0
 8001e68:	e04c      	b.n	8001f04 <_mount_filesystem_with_retry+0x188>
            }
        }
        else if (mount_result == FR_NOT_READY || mount_result == FR_NO_FILESYSTEM) {
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d002      	beq.n	8001e76 <_mount_filesystem_with_retry+0xfa>
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	2b0d      	cmp	r3, #13
 8001e74:	d13e      	bne.n	8001ef4 <_mount_filesystem_with_retry+0x178>
            // 파일시스템 생성 시도
            static BYTE work[_MAX_SS];
            LOG_INFO("[SDStorage] Attempting to create filesystem with f_mkfs...");
 8001e76:	4932      	ldr	r1, [pc, #200]	@ (8001f40 <_mount_filesystem_with_retry+0x1c4>)
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f003 ff5f 	bl	8005d3c <LOGGER_SendFormatted>
            FRESULT mkfs_result = f_mkfs(SDPath, FM_ANY, 0, work, sizeof(work));
 8001e7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	4b2f      	ldr	r3, [pc, #188]	@ (8001f44 <_mount_filesystem_with_retry+0x1c8>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	2107      	movs	r1, #7
 8001e8a:	4823      	ldr	r0, [pc, #140]	@ (8001f18 <_mount_filesystem_with_retry+0x19c>)
 8001e8c:	f012 fec6 	bl	8014c1c <f_mkfs>
 8001e90:	4603      	mov	r3, r0
 8001e92:	71fb      	strb	r3, [r7, #7]
            LOG_INFO("[SDStorage] f_mkfs(FM_ANY) result: %d", mkfs_result);
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	461a      	mov	r2, r3
 8001e98:	492b      	ldr	r1, [pc, #172]	@ (8001f48 <_mount_filesystem_with_retry+0x1cc>)
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	f003 ff4e 	bl	8005d3c <LOGGER_SendFormatted>
            
            if (mkfs_result != FR_OK) {
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d011      	beq.n	8001eca <_mount_filesystem_with_retry+0x14e>
                mkfs_result = f_mkfs(SDPath, FM_FAT32, 4096, work, sizeof(work));
 8001ea6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	4b25      	ldr	r3, [pc, #148]	@ (8001f44 <_mount_filesystem_with_retry+0x1c8>)
 8001eae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001eb2:	2102      	movs	r1, #2
 8001eb4:	4818      	ldr	r0, [pc, #96]	@ (8001f18 <_mount_filesystem_with_retry+0x19c>)
 8001eb6:	f012 feb1 	bl	8014c1c <f_mkfs>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	71fb      	strb	r3, [r7, #7]
                LOG_INFO("[SDStorage] f_mkfs(FM_FAT32) result: %d", mkfs_result);
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4922      	ldr	r1, [pc, #136]	@ (8001f4c <_mount_filesystem_with_retry+0x1d0>)
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f003 ff39 	bl	8005d3c <LOGGER_SendFormatted>
            }
            
            if (mkfs_result == FR_OK) {
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d111      	bne.n	8001ef4 <_mount_filesystem_with_retry+0x178>
                // 파일시스템 생성 후 재마운트
                mount_result = f_mount(&SDFatFS, SDPath, 1);
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	4911      	ldr	r1, [pc, #68]	@ (8001f18 <_mount_filesystem_with_retry+0x19c>)
 8001ed4:	4811      	ldr	r0, [pc, #68]	@ (8001f1c <_mount_filesystem_with_retry+0x1a0>)
 8001ed6:	f012 f9b7 	bl	8014248 <f_mount>
 8001eda:	4603      	mov	r3, r0
 8001edc:	73fb      	strb	r3, [r7, #15]
                LOG_INFO("[SDStorage] Re-mount after mkfs result: %d", mount_result);
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	491b      	ldr	r1, [pc, #108]	@ (8001f50 <_mount_filesystem_with_retry+0x1d4>)
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	f003 ff29 	bl	8005d3c <LOGGER_SendFormatted>
                
                if (mount_result == FR_OK) {
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <_mount_filesystem_with_retry+0x178>
                    return SDSTORAGE_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	e007      	b.n	8001f04 <_mount_filesystem_with_retry+0x188>
                }
            }
        }
        
        LOG_ERROR("[SDStorage] All mount attempts failed");
 8001ef4:	4917      	ldr	r1, [pc, #92]	@ (8001f54 <_mount_filesystem_with_retry+0x1d8>)
 8001ef6:	2003      	movs	r0, #3
 8001ef8:	f003 ff20 	bl	8005d3c <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 8001efc:	f06f 03c9 	mvn.w	r3, #201	@ 0xc9
 8001f00:	e000      	b.n	8001f04 <_mount_filesystem_with_retry+0x188>
    }
    
    return SDSTORAGE_OK;
 8001f02:	2300      	movs	r3, #0
#else
    return SDSTORAGE_OK;  // PC 환경에서는 성공으로 처리
#endif
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	0801b0a8 	.word	0x0801b0a8
 8001f10:	0801b0e0 	.word	0x0801b0e0
 8001f14:	0801b114 	.word	0x0801b114
 8001f18:	2000192c 	.word	0x2000192c
 8001f1c:	20001930 	.word	0x20001930
 8001f20:	0801b13c 	.word	0x0801b13c
 8001f24:	0801b15c 	.word	0x0801b15c
 8001f28:	0801b190 	.word	0x0801b190
 8001f2c:	0801b1d0 	.word	0x0801b1d0
 8001f30:	0801b20c 	.word	0x0801b20c
 8001f34:	0801b238 	.word	0x0801b238
 8001f38:	0801b274 	.word	0x0801b274
 8001f3c:	0801b29c 	.word	0x0801b29c
 8001f40:	0801b2c4 	.word	0x0801b2c4
 8001f44:	200005bc 	.word	0x200005bc
 8001f48:	0801b300 	.word	0x0801b300
 8001f4c:	0801b328 	.word	0x0801b328
 8001f50:	0801b350 	.word	0x0801b350
 8001f54:	0801b37c 	.word	0x0801b37c

08001f58 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4a07      	ldr	r2, [pc, #28]	@ (8001fb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8001f9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	4a06      	ldr	r2, [pc, #24]	@ (8001fbc <vApplicationGetIdleTaskMemory+0x30>)
 8001fa2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2280      	movs	r2, #128	@ 0x80
 8001fa8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001faa:	bf00      	nop
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	200007bc 	.word	0x200007bc
 8001fbc:	20000814 	.word	0x20000814

08001fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fc0:	b5b0      	push	{r4, r5, r7, lr}
 8001fc2:	b09a      	sub	sp, #104	@ 0x68
 8001fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // 리셋 카운터 추가
  static uint32_t reset_count = 0;
  reset_count++;
 8001fc6:	4b96      	ldr	r3, [pc, #600]	@ (8002220 <main+0x260>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	4a94      	ldr	r2, [pc, #592]	@ (8002220 <main+0x260>)
 8001fce:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fd0:	f004 fd49 	bl	8006a66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fd4:	f000 f966 	bl	80022a4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001fd8:	f000 f9d6 	bl	8002388 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fdc:	f001 f9a0 	bl	8003320 <MX_GPIO_Init>
  MX_DMA_Init();  // DMA는 UART보다 먼저 초기화
 8001fe0:	f002 f8aa 	bl	8004138 <MX_DMA_Init>
  MX_USART6_DMA_Init();  // USART6 DMA 초기화 (UART보다 먼저)
 8001fe4:	f002 f8ce 	bl	8004184 <MX_USART6_DMA_Init>
  MX_ADC3_Init();
 8001fe8:	f000 fa00 	bl	80023ec <MX_ADC3_Init>
  MX_CRC_Init();
 8001fec:	f000 fa50 	bl	8002490 <MX_CRC_Init>
  MX_DCMI_Init();
 8001ff0:	f000 fa70 	bl	80024d4 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001ff4:	f000 faa2 	bl	800253c <MX_DMA2D_Init>
  MX_ETH_Init();
 8001ff8:	f000 fad2 	bl	80025a0 <MX_ETH_Init>
  MX_FMC_Init();
 8001ffc:	f001 f940 	bl	8003280 <MX_FMC_Init>
  MX_I2C1_Init();
 8002000:	f000 fb1c 	bl	800263c <MX_I2C1_Init>
  MX_I2C3_Init();
 8002004:	f000 fb5a 	bl	80026bc <MX_I2C3_Init>
  MX_LTDC_Init();
 8002008:	f000 fb98 	bl	800273c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800200c:	f000 fc18 	bl	8002840 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8002010:	f000 fc42 	bl	8002898 <MX_RTC_Init>
  MX_SAI2_Init();
 8002014:	f000 fce4 	bl	80029e0 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8002018:	f000 fd8a 	bl	8002b30 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 800201c:	f000 fdb6 	bl	8002b8c <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8002020:	f000 fde4 	bl	8002bec <MX_SPI2_Init>
  MX_TIM1_Init();
 8002024:	f000 fe20 	bl	8002c68 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002028:	f000 feca 	bl	8002dc0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800202c:	f000 ff3e 	bl	8002eac <MX_TIM3_Init>
  MX_TIM5_Init();
 8002030:	f000 ffb4 	bl	8002f9c <MX_TIM5_Init>
  MX_TIM8_Init();
 8002034:	f001 f82a 	bl	800308c <MX_TIM8_Init>
  MX_TIM12_Init();
 8002038:	f001 f87c 	bl	8003134 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800203c:	f001 f8c0 	bl	80031c0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002040:	f001 f8ee 	bl	8003220 <MX_USART6_UART_Init>
  
  // UART 초기화 후 DMA 핸들 다시 연결 (HAL_UART_Init에서 리셋될 수 있음)
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8002044:	4b77      	ldr	r3, [pc, #476]	@ (8002224 <main+0x264>)
 8002046:	4a78      	ldr	r2, [pc, #480]	@ (8002228 <main+0x268>)
 8002048:	675a      	str	r2, [r3, #116]	@ 0x74
 800204a:	4b77      	ldr	r3, [pc, #476]	@ (8002228 <main+0x268>)
 800204c:	4a75      	ldr	r2, [pc, #468]	@ (8002224 <main+0x264>)
 800204e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  // UART IDLE 인터럽트 활성화 (DMA 기반 수신을 위해)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8002050:	4b74      	ldr	r3, [pc, #464]	@ (8002224 <main+0x264>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	4b73      	ldr	r3, [pc, #460]	@ (8002224 <main+0x264>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0210 	orr.w	r2, r2, #16
 800205e:	601a      	str	r2, [r3, #0]
  MX_FATFS_Init();
 8002060:	f010 f930 	bl	80122c4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  
  // Logger 초기화 (터미널 출력만 사용)
  LOGGER_Connect("STM32", 0);
 8002064:	2100      	movs	r1, #0
 8002066:	4871      	ldr	r0, [pc, #452]	@ (800222c <main+0x26c>)
 8002068:	f003 fdde 	bl	8005c28 <LOGGER_Connect>
  
  // 리셋 원인 확인
  LOG_INFO("=== SYSTEM START (Reset #%lu) ===", reset_count);
 800206c:	4b6c      	ldr	r3, [pc, #432]	@ (8002220 <main+0x260>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	496f      	ldr	r1, [pc, #444]	@ (8002230 <main+0x270>)
 8002074:	2001      	movs	r0, #1
 8002076:	f003 fe61 	bl	8005d3c <LOGGER_SendFormatted>
  
  // RCC 리셋 플래그 확인
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST)) LOG_WARN("Reset: BOR (Brown-out)");
 800207a:	4b6e      	ldr	r3, [pc, #440]	@ (8002234 <main+0x274>)
 800207c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800207e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <main+0xce>
 8002086:	496c      	ldr	r1, [pc, #432]	@ (8002238 <main+0x278>)
 8002088:	2002      	movs	r0, #2
 800208a:	f003 fe57 	bl	8005d3c <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) LOG_WARN("Reset: PIN (External)");
 800208e:	4b69      	ldr	r3, [pc, #420]	@ (8002234 <main+0x274>)
 8002090:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002092:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <main+0xe2>
 800209a:	4968      	ldr	r1, [pc, #416]	@ (800223c <main+0x27c>)
 800209c:	2002      	movs	r0, #2
 800209e:	f003 fe4d 	bl	8005d3c <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)) LOG_WARN("Reset: POR (Power-on)");
 80020a2:	4b64      	ldr	r3, [pc, #400]	@ (8002234 <main+0x274>)
 80020a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <main+0xf6>
 80020ae:	4964      	ldr	r1, [pc, #400]	@ (8002240 <main+0x280>)
 80020b0:	2002      	movs	r0, #2
 80020b2:	f003 fe43 	bl	8005d3c <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) LOG_WARN("Reset: SOFTWARE");
 80020b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002234 <main+0x274>)
 80020b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <main+0x10a>
 80020c2:	4960      	ldr	r1, [pc, #384]	@ (8002244 <main+0x284>)
 80020c4:	2002      	movs	r0, #2
 80020c6:	f003 fe39 	bl	8005d3c <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) LOG_WARN("Reset: IWDG (Watchdog)");
 80020ca:	4b5a      	ldr	r3, [pc, #360]	@ (8002234 <main+0x274>)
 80020cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <main+0x11e>
 80020d6:	495c      	ldr	r1, [pc, #368]	@ (8002248 <main+0x288>)
 80020d8:	2002      	movs	r0, #2
 80020da:	f003 fe2f 	bl	8005d3c <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) LOG_WARN("Reset: WWDG (Window Watchdog)");
 80020de:	4b55      	ldr	r3, [pc, #340]	@ (8002234 <main+0x274>)
 80020e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020e2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <main+0x132>
 80020ea:	4958      	ldr	r1, [pc, #352]	@ (800224c <main+0x28c>)
 80020ec:	2002      	movs	r0, #2
 80020ee:	f003 fe25 	bl	8005d3c <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST)) LOG_WARN("Reset: LPWR (Low Power)");
 80020f2:	4b50      	ldr	r3, [pc, #320]	@ (8002234 <main+0x274>)
 80020f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	da03      	bge.n	8002102 <main+0x142>
 80020fa:	4955      	ldr	r1, [pc, #340]	@ (8002250 <main+0x290>)
 80020fc:	2002      	movs	r0, #2
 80020fe:	f003 fe1d 	bl	8005d3c <LOGGER_SendFormatted>
  
  // 플래그 클리어
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8002102:	4b4c      	ldr	r3, [pc, #304]	@ (8002234 <main+0x274>)
 8002104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002106:	4a4b      	ldr	r2, [pc, #300]	@ (8002234 <main+0x274>)
 8002108:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800210c:	6753      	str	r3, [r2, #116]	@ 0x74
  
  // ===== 하드웨어 초기화만 main()에서 수행 =====
  
  // SD카드 초기화는 FreeRTOS 태스크에서 수행 (커널 시작 후)
  LOG_INFO("🔄 SD card initialization will be performed in FreeRTOS task");
 800210e:	4951      	ldr	r1, [pc, #324]	@ (8002254 <main+0x294>)
 8002110:	2001      	movs	r0, #1
 8002112:	f003 fe13 	bl	8005d3c <LOGGER_SendFormatted>
  g_sd_initialization_result = -1;  // 초기화 안됨 상태
 8002116:	4b50      	ldr	r3, [pc, #320]	@ (8002258 <main+0x298>)
 8002118:	f04f 32ff 	mov.w	r2, #4294967295
 800211c:	601a      	str	r2, [r3, #0]
  
  // UART6 DMA 초기화 건너뛰기 (이미 main 초기화에서 완료됨)
  LOG_INFO("📤 UART DMA already initialized in main() - skipping");
 800211e:	494f      	ldr	r1, [pc, #316]	@ (800225c <main+0x29c>)
 8002120:	2001      	movs	r0, #1
 8002122:	f003 fe0b 	bl	8005d3c <LOGGER_SendFormatted>
  
  // IDLE 인터럽트만 활성화 (메시지 끝 감지용)
  LOG_INFO("📤 Enabling UART IDLE interrupt...");
 8002126:	494e      	ldr	r1, [pc, #312]	@ (8002260 <main+0x2a0>)
 8002128:	2001      	movs	r0, #1
 800212a:	f003 fe07 	bl	8005d3c <LOGGER_SendFormatted>
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 800212e:	4b3d      	ldr	r3, [pc, #244]	@ (8002224 <main+0x264>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b3b      	ldr	r3, [pc, #236]	@ (8002224 <main+0x264>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 0210 	orr.w	r2, r2, #16
 800213c:	601a      	str	r2, [r3, #0]
  LOG_INFO("✅ UART setup completed");
 800213e:	4949      	ldr	r1, [pc, #292]	@ (8002264 <main+0x2a4>)
 8002140:	2001      	movs	r0, #1
 8002142:	f003 fdfb 	bl	8005d3c <LOGGER_SendFormatted>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  // SD 로깅 큐 생성 (안전성 체크 포함)
  LOG_INFO("📤 Creating SD logging queue (size: %d, item: %d bytes)", 
 8002146:	2388      	movs	r3, #136	@ 0x88
 8002148:	220a      	movs	r2, #10
 800214a:	4947      	ldr	r1, [pc, #284]	@ (8002268 <main+0x2a8>)
 800214c:	2001      	movs	r0, #1
 800214e:	f003 fdf5 	bl	8005d3c <LOGGER_SendFormatted>
           SD_LOG_QUEUE_SIZE, sizeof(SDLogEntry_t));
  
  osMessageQDef(sdLogQueue, SD_LOG_QUEUE_SIZE, SDLogEntry_t);
 8002152:	4b46      	ldr	r3, [pc, #280]	@ (800226c <main+0x2ac>)
 8002154:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8002158:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800215a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  sdLogQueueHandle = osMessageCreate(osMessageQ(sdLogQueue), NULL);
 800215e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002162:	2100      	movs	r1, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f013 fa8d 	bl	8015684 <osMessageCreate>
 800216a:	4603      	mov	r3, r0
 800216c:	4a40      	ldr	r2, [pc, #256]	@ (8002270 <main+0x2b0>)
 800216e:	6013      	str	r3, [r2, #0]
  
  if (sdLogQueueHandle == NULL) {
 8002170:	4b3f      	ldr	r3, [pc, #252]	@ (8002270 <main+0x2b0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d104      	bne.n	8002182 <main+0x1c2>
    LOG_ERROR("❌ SD logging queue creation FAILED - insufficient memory");
 8002178:	493e      	ldr	r1, [pc, #248]	@ (8002274 <main+0x2b4>)
 800217a:	2003      	movs	r0, #3
 800217c:	f003 fdde 	bl	8005d3c <LOGGER_SendFormatted>
 8002180:	e003      	b.n	800218a <main+0x1ca>
  } else {
    LOG_INFO("✅ SD logging queue created successfully");
 8002182:	493d      	ldr	r1, [pc, #244]	@ (8002278 <main+0x2b8>)
 8002184:	2001      	movs	r0, #1
 8002186:	f003 fdd9 	bl	8005d3c <LOGGER_SendFormatted>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 8192);
 800218a:	4b3c      	ldr	r3, [pc, #240]	@ (800227c <main+0x2bc>)
 800218c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8002190:	461d      	mov	r5, r3
 8002192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002196:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800219a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800219e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f013 fa0d 	bl	80155c4 <osThreadCreate>
 80021aa:	4603      	mov	r3, r0
 80021ac:	4a34      	ldr	r2, [pc, #208]	@ (8002280 <main+0x2c0>)
 80021ae:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* 수신 태스크 활성화 - LoRa 통신을 위해 필수 */
  osThreadDef(receiveTask, StartReceiveTask, osPriorityNormal, 0, 4096);
 80021b0:	4b34      	ldr	r3, [pc, #208]	@ (8002284 <main+0x2c4>)
 80021b2:	f107 0420 	add.w	r4, r7, #32
 80021b6:	461d      	mov	r5, r3
 80021b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 80021c4:	f107 0320 	add.w	r3, r7, #32
 80021c8:	2100      	movs	r1, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f013 f9fa 	bl	80155c4 <osThreadCreate>
 80021d0:	4603      	mov	r3, r0
 80021d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002288 <main+0x2c8>)
 80021d4:	6013      	str	r3, [r2, #0]
  LOG_INFO("📤 Receive Task enabled for LoRa communication");
 80021d6:	492d      	ldr	r1, [pc, #180]	@ (800228c <main+0x2cc>)
 80021d8:	2001      	movs	r0, #1
 80021da:	f003 fdaf 	bl	8005d3c <LOGGER_SendFormatted>
  
  /* SD 로깅 태스크 활성화 - SD 카드 로깅을 위해 */
  osThreadDef(sdLoggingTask, StartSDLoggingTask, osPriorityLow, 0, 4096);
 80021de:	4b2c      	ldr	r3, [pc, #176]	@ (8002290 <main+0x2d0>)
 80021e0:	1d3c      	adds	r4, r7, #4
 80021e2:	461d      	mov	r5, r3
 80021e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sdLoggingTaskHandle = osThreadCreate(osThread(sdLoggingTask), NULL);
 80021f0:	1d3b      	adds	r3, r7, #4
 80021f2:	2100      	movs	r1, #0
 80021f4:	4618      	mov	r0, r3
 80021f6:	f013 f9e5 	bl	80155c4 <osThreadCreate>
 80021fa:	4603      	mov	r3, r0
 80021fc:	4a25      	ldr	r2, [pc, #148]	@ (8002294 <main+0x2d4>)
 80021fe:	6013      	str	r3, [r2, #0]
  LOG_INFO("📤 SD Logging Task enabled");
 8002200:	4925      	ldr	r1, [pc, #148]	@ (8002298 <main+0x2d8>)
 8002202:	2001      	movs	r0, #1
 8002204:	f003 fd9a 	bl	8005d3c <LOGGER_SendFormatted>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  LOG_INFO("🚀 Starting FreeRTOS scheduler...");
 8002208:	4924      	ldr	r1, [pc, #144]	@ (800229c <main+0x2dc>)
 800220a:	2001      	movs	r0, #1
 800220c:	f003 fd96 	bl	8005d3c <LOGGER_SendFormatted>
  osKernelStart();
 8002210:	f013 f9b5 	bl	801557e <osKernelStart>
  
  // 이 부분은 절대 실행되면 안됨 (스케줄러가 제어를 가져가야 함)
  LOG_ERROR("❌ FATAL: Scheduler failed to start - system halted");
 8002214:	4922      	ldr	r1, [pc, #136]	@ (80022a0 <main+0x2e0>)
 8002216:	2003      	movs	r0, #3
 8002218:	f003 fd90 	bl	8005d3c <LOGGER_SendFormatted>

  /* We should never get here as control is now taken by the scheduler */
  
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800221c:	bf00      	nop
 800221e:	e7fd      	b.n	800221c <main+0x25c>
 8002220:	2000157c 	.word	0x2000157c
 8002224:	20001240 	.word	0x20001240
 8002228:	20001518 	.word	0x20001518
 800222c:	0801b3a4 	.word	0x0801b3a4
 8002230:	0801b3ac 	.word	0x0801b3ac
 8002234:	40023800 	.word	0x40023800
 8002238:	0801b3d0 	.word	0x0801b3d0
 800223c:	0801b3e8 	.word	0x0801b3e8
 8002240:	0801b400 	.word	0x0801b400
 8002244:	0801b418 	.word	0x0801b418
 8002248:	0801b428 	.word	0x0801b428
 800224c:	0801b440 	.word	0x0801b440
 8002250:	0801b460 	.word	0x0801b460
 8002254:	0801b478 	.word	0x0801b478
 8002258:	20000018 	.word	0x20000018
 800225c:	0801b4b8 	.word	0x0801b4b8
 8002260:	0801b4f0 	.word	0x0801b4f0
 8002264:	0801b518 	.word	0x0801b518
 8002268:	0801b534 	.word	0x0801b534
 800226c:	0801b688 	.word	0x0801b688
 8002270:	20001308 	.word	0x20001308
 8002274:	0801b570 	.word	0x0801b570
 8002278:	0801b5ac 	.word	0x0801b5ac
 800227c:	0801b6a4 	.word	0x0801b6a4
 8002280:	200012fc 	.word	0x200012fc
 8002284:	0801b6cc 	.word	0x0801b6cc
 8002288:	20001300 	.word	0x20001300
 800228c:	0801b5d8 	.word	0x0801b5d8
 8002290:	0801b6f8 	.word	0x0801b6f8
 8002294:	20001304 	.word	0x20001304
 8002298:	0801b60c 	.word	0x0801b60c
 800229c:	0801b62c 	.word	0x0801b62c
 80022a0:	0801b650 	.word	0x0801b650

080022a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b094      	sub	sp, #80	@ 0x50
 80022a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022aa:	f107 0320 	add.w	r3, r7, #32
 80022ae:	2230      	movs	r2, #48	@ 0x30
 80022b0:	2100      	movs	r1, #0
 80022b2:	4618      	mov	r0, r3
 80022b4:	f015 fffe 	bl	80182b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80022c8:	f008 fe7c 	bl	800afc4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002380 <SystemClock_Config+0xdc>)
 80022ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002380 <SystemClock_Config+0xdc>)
 80022d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80022d8:	4b29      	ldr	r3, [pc, #164]	@ (8002380 <SystemClock_Config+0xdc>)
 80022da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022e4:	4b27      	ldr	r3, [pc, #156]	@ (8002384 <SystemClock_Config+0xe0>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a26      	ldr	r2, [pc, #152]	@ (8002384 <SystemClock_Config+0xe0>)
 80022ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	4b24      	ldr	r3, [pc, #144]	@ (8002384 <SystemClock_Config+0xe0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80022f8:	607b      	str	r3, [r7, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80022fc:	2309      	movs	r3, #9
 80022fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002300:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002304:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002306:	2301      	movs	r3, #1
 8002308:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800230a:	2302      	movs	r3, #2
 800230c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800230e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002312:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002314:	2319      	movs	r3, #25
 8002316:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002318:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800231c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800231e:	2302      	movs	r3, #2
 8002320:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002322:	2309      	movs	r3, #9
 8002324:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002326:	f107 0320 	add.w	r3, r7, #32
 800232a:	4618      	mov	r0, r3
 800232c:	f008 ff6c 	bl	800b208 <HAL_RCC_OscConfig>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002336:	f001 fef9 	bl	800412c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800233a:	f008 fe53 	bl	800afe4 <HAL_PWREx_EnableOverDrive>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002344:	f001 fef2 	bl	800412c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002348:	230f      	movs	r3, #15
 800234a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800234c:	2302      	movs	r3, #2
 800234e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002354:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002358:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800235a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800235e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002360:	f107 030c 	add.w	r3, r7, #12
 8002364:	2106      	movs	r1, #6
 8002366:	4618      	mov	r0, r3
 8002368:	f009 f9f2 	bl	800b750 <HAL_RCC_ClockConfig>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002372:	f001 fedb 	bl	800412c <Error_Handler>
  }
}
 8002376:	bf00      	nop
 8002378:	3750      	adds	r7, #80	@ 0x50
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
 8002384:	40007000 	.word	0x40007000

08002388 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b0a2      	sub	sp, #136	@ 0x88
 800238c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800238e:	1d3b      	adds	r3, r7, #4
 8002390:	2284      	movs	r2, #132	@ 0x84
 8002392:	2100      	movs	r1, #0
 8002394:	4618      	mov	r0, r3
 8002396:	f015 ff8d 	bl	80182b4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 800239a:	4b13      	ldr	r3, [pc, #76]	@ (80023e8 <PeriphCommonClock_Config+0x60>)
 800239c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800239e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80023a2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80023a4:	2305      	movs	r3, #5
 80023a6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80023a8:	2302      	movs	r3, #2
 80023aa:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80023ac:	2303      	movs	r3, #3
 80023ae:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80023b0:	2301      	movs	r3, #1
 80023b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80023b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023b8:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80023ba:	2300      	movs	r3, #0
 80023bc:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80023be:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80023c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80023c6:	2300      	movs	r3, #0
 80023c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023cc:	1d3b      	adds	r3, r7, #4
 80023ce:	4618      	mov	r0, r3
 80023d0:	f009 fbd6 	bl	800bb80 <HAL_RCCEx_PeriphCLKConfig>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80023da:	f001 fea7 	bl	800412c <Error_Handler>
  }
}
 80023de:	bf00      	nop
 80023e0:	3788      	adds	r7, #136	@ 0x88
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	00b00008 	.word	0x00b00008

080023ec <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023f2:	463b      	mov	r3, r7
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80023fe:	4b21      	ldr	r3, [pc, #132]	@ (8002484 <MX_ADC3_Init+0x98>)
 8002400:	4a21      	ldr	r2, [pc, #132]	@ (8002488 <MX_ADC3_Init+0x9c>)
 8002402:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002404:	4b1f      	ldr	r3, [pc, #124]	@ (8002484 <MX_ADC3_Init+0x98>)
 8002406:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800240a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800240c:	4b1d      	ldr	r3, [pc, #116]	@ (8002484 <MX_ADC3_Init+0x98>)
 800240e:	2200      	movs	r2, #0
 8002410:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002412:	4b1c      	ldr	r3, [pc, #112]	@ (8002484 <MX_ADC3_Init+0x98>)
 8002414:	2200      	movs	r2, #0
 8002416:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002418:	4b1a      	ldr	r3, [pc, #104]	@ (8002484 <MX_ADC3_Init+0x98>)
 800241a:	2200      	movs	r2, #0
 800241c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800241e:	4b19      	ldr	r3, [pc, #100]	@ (8002484 <MX_ADC3_Init+0x98>)
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002426:	4b17      	ldr	r3, [pc, #92]	@ (8002484 <MX_ADC3_Init+0x98>)
 8002428:	2200      	movs	r2, #0
 800242a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800242c:	4b15      	ldr	r3, [pc, #84]	@ (8002484 <MX_ADC3_Init+0x98>)
 800242e:	4a17      	ldr	r2, [pc, #92]	@ (800248c <MX_ADC3_Init+0xa0>)
 8002430:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002432:	4b14      	ldr	r3, [pc, #80]	@ (8002484 <MX_ADC3_Init+0x98>)
 8002434:	2200      	movs	r2, #0
 8002436:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002438:	4b12      	ldr	r3, [pc, #72]	@ (8002484 <MX_ADC3_Init+0x98>)
 800243a:	2201      	movs	r2, #1
 800243c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800243e:	4b11      	ldr	r3, [pc, #68]	@ (8002484 <MX_ADC3_Init+0x98>)
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002446:	4b0f      	ldr	r3, [pc, #60]	@ (8002484 <MX_ADC3_Init+0x98>)
 8002448:	2201      	movs	r2, #1
 800244a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800244c:	480d      	ldr	r0, [pc, #52]	@ (8002484 <MX_ADC3_Init+0x98>)
 800244e:	f004 fb5b 	bl	8006b08 <HAL_ADC_Init>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8002458:	f001 fe68 	bl	800412c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800245c:	2304      	movs	r3, #4
 800245e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002460:	2301      	movs	r3, #1
 8002462:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002464:	2300      	movs	r3, #0
 8002466:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002468:	463b      	mov	r3, r7
 800246a:	4619      	mov	r1, r3
 800246c:	4805      	ldr	r0, [pc, #20]	@ (8002484 <MX_ADC3_Init+0x98>)
 800246e:	f004 fb8f 	bl	8006b90 <HAL_ADC_ConfigChannel>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8002478:	f001 fe58 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000a4c 	.word	0x20000a4c
 8002488:	40012200 	.word	0x40012200
 800248c:	0f000001 	.word	0x0f000001

08002490 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002494:	4b0d      	ldr	r3, [pc, #52]	@ (80024cc <MX_CRC_Init+0x3c>)
 8002496:	4a0e      	ldr	r2, [pc, #56]	@ (80024d0 <MX_CRC_Init+0x40>)
 8002498:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800249a:	4b0c      	ldr	r3, [pc, #48]	@ (80024cc <MX_CRC_Init+0x3c>)
 800249c:	2200      	movs	r2, #0
 800249e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80024a0:	4b0a      	ldr	r3, [pc, #40]	@ (80024cc <MX_CRC_Init+0x3c>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80024a6:	4b09      	ldr	r3, [pc, #36]	@ (80024cc <MX_CRC_Init+0x3c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80024ac:	4b07      	ldr	r3, [pc, #28]	@ (80024cc <MX_CRC_Init+0x3c>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80024b2:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <MX_CRC_Init+0x3c>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80024b8:	4804      	ldr	r0, [pc, #16]	@ (80024cc <MX_CRC_Init+0x3c>)
 80024ba:	f004 fe9f 	bl	80071fc <HAL_CRC_Init>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80024c4:	f001 fe32 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000a94 	.word	0x20000a94
 80024d0:	40023000 	.word	0x40023000

080024d4 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80024d8:	4b16      	ldr	r3, [pc, #88]	@ (8002534 <MX_DCMI_Init+0x60>)
 80024da:	4a17      	ldr	r2, [pc, #92]	@ (8002538 <MX_DCMI_Init+0x64>)
 80024dc:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80024de:	4b15      	ldr	r3, [pc, #84]	@ (8002534 <MX_DCMI_Init+0x60>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80024e4:	4b13      	ldr	r3, [pc, #76]	@ (8002534 <MX_DCMI_Init+0x60>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80024ea:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <MX_DCMI_Init+0x60>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80024f0:	4b10      	ldr	r3, [pc, #64]	@ (8002534 <MX_DCMI_Init+0x60>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80024f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002534 <MX_DCMI_Init+0x60>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80024fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002534 <MX_DCMI_Init+0x60>)
 80024fe:	2200      	movs	r2, #0
 8002500:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8002502:	4b0c      	ldr	r3, [pc, #48]	@ (8002534 <MX_DCMI_Init+0x60>)
 8002504:	2200      	movs	r2, #0
 8002506:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8002508:	4b0a      	ldr	r3, [pc, #40]	@ (8002534 <MX_DCMI_Init+0x60>)
 800250a:	2200      	movs	r2, #0
 800250c:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800250e:	4b09      	ldr	r3, [pc, #36]	@ (8002534 <MX_DCMI_Init+0x60>)
 8002510:	2200      	movs	r2, #0
 8002512:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8002514:	4b07      	ldr	r3, [pc, #28]	@ (8002534 <MX_DCMI_Init+0x60>)
 8002516:	2200      	movs	r2, #0
 8002518:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800251a:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <MX_DCMI_Init+0x60>)
 800251c:	2200      	movs	r2, #0
 800251e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8002520:	4804      	ldr	r0, [pc, #16]	@ (8002534 <MX_DCMI_Init+0x60>)
 8002522:	f004 ff5d 	bl	80073e0 <HAL_DCMI_Init>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 800252c:	f001 fdfe 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8002530:	bf00      	nop
 8002532:	bd80      	pop	{r7, pc}
 8002534:	20000ab8 	.word	0x20000ab8
 8002538:	50050000 	.word	0x50050000

0800253c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8002540:	4b15      	ldr	r3, [pc, #84]	@ (8002598 <MX_DMA2D_Init+0x5c>)
 8002542:	4a16      	ldr	r2, [pc, #88]	@ (800259c <MX_DMA2D_Init+0x60>)
 8002544:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8002546:	4b14      	ldr	r3, [pc, #80]	@ (8002598 <MX_DMA2D_Init+0x5c>)
 8002548:	2200      	movs	r2, #0
 800254a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800254c:	4b12      	ldr	r3, [pc, #72]	@ (8002598 <MX_DMA2D_Init+0x5c>)
 800254e:	2200      	movs	r2, #0
 8002550:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8002552:	4b11      	ldr	r3, [pc, #68]	@ (8002598 <MX_DMA2D_Init+0x5c>)
 8002554:	2200      	movs	r2, #0
 8002556:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8002558:	4b0f      	ldr	r3, [pc, #60]	@ (8002598 <MX_DMA2D_Init+0x5c>)
 800255a:	2200      	movs	r2, #0
 800255c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800255e:	4b0e      	ldr	r3, [pc, #56]	@ (8002598 <MX_DMA2D_Init+0x5c>)
 8002560:	2200      	movs	r2, #0
 8002562:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002564:	4b0c      	ldr	r3, [pc, #48]	@ (8002598 <MX_DMA2D_Init+0x5c>)
 8002566:	2200      	movs	r2, #0
 8002568:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800256a:	4b0b      	ldr	r3, [pc, #44]	@ (8002598 <MX_DMA2D_Init+0x5c>)
 800256c:	2200      	movs	r2, #0
 800256e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002570:	4809      	ldr	r0, [pc, #36]	@ (8002598 <MX_DMA2D_Init+0x5c>)
 8002572:	f005 fc23 	bl	8007dbc <HAL_DMA2D_Init>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800257c:	f001 fdd6 	bl	800412c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8002580:	2101      	movs	r1, #1
 8002582:	4805      	ldr	r0, [pc, #20]	@ (8002598 <MX_DMA2D_Init+0x5c>)
 8002584:	f005 fd74 	bl	8008070 <HAL_DMA2D_ConfigLayer>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800258e:	f001 fdcd 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000b08 	.word	0x20000b08
 800259c:	4002b000 	.word	0x4002b000

080025a0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80025a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002624 <MX_ETH_Init+0x84>)
 80025a6:	4a20      	ldr	r2, [pc, #128]	@ (8002628 <MX_ETH_Init+0x88>)
 80025a8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80025aa:	4b20      	ldr	r3, [pc, #128]	@ (800262c <MX_ETH_Init+0x8c>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80025b0:	4b1e      	ldr	r3, [pc, #120]	@ (800262c <MX_ETH_Init+0x8c>)
 80025b2:	2280      	movs	r2, #128	@ 0x80
 80025b4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80025b6:	4b1d      	ldr	r3, [pc, #116]	@ (800262c <MX_ETH_Init+0x8c>)
 80025b8:	22e1      	movs	r2, #225	@ 0xe1
 80025ba:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80025bc:	4b1b      	ldr	r3, [pc, #108]	@ (800262c <MX_ETH_Init+0x8c>)
 80025be:	2200      	movs	r2, #0
 80025c0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80025c2:	4b1a      	ldr	r3, [pc, #104]	@ (800262c <MX_ETH_Init+0x8c>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80025c8:	4b18      	ldr	r3, [pc, #96]	@ (800262c <MX_ETH_Init+0x8c>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80025ce:	4b15      	ldr	r3, [pc, #84]	@ (8002624 <MX_ETH_Init+0x84>)
 80025d0:	4a16      	ldr	r2, [pc, #88]	@ (800262c <MX_ETH_Init+0x8c>)
 80025d2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80025d4:	4b13      	ldr	r3, [pc, #76]	@ (8002624 <MX_ETH_Init+0x84>)
 80025d6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80025da:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80025dc:	4b11      	ldr	r3, [pc, #68]	@ (8002624 <MX_ETH_Init+0x84>)
 80025de:	4a14      	ldr	r2, [pc, #80]	@ (8002630 <MX_ETH_Init+0x90>)
 80025e0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80025e2:	4b10      	ldr	r3, [pc, #64]	@ (8002624 <MX_ETH_Init+0x84>)
 80025e4:	4a13      	ldr	r2, [pc, #76]	@ (8002634 <MX_ETH_Init+0x94>)
 80025e6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80025e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002624 <MX_ETH_Init+0x84>)
 80025ea:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80025ee:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80025f0:	480c      	ldr	r0, [pc, #48]	@ (8002624 <MX_ETH_Init+0x84>)
 80025f2:	f005 fdcf 	bl	8008194 <HAL_ETH_Init>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80025fc:	f001 fd96 	bl	800412c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002600:	2238      	movs	r2, #56	@ 0x38
 8002602:	2100      	movs	r1, #0
 8002604:	480c      	ldr	r0, [pc, #48]	@ (8002638 <MX_ETH_Init+0x98>)
 8002606:	f015 fe55 	bl	80182b4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800260a:	4b0b      	ldr	r3, [pc, #44]	@ (8002638 <MX_ETH_Init+0x98>)
 800260c:	2221      	movs	r2, #33	@ 0x21
 800260e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002610:	4b09      	ldr	r3, [pc, #36]	@ (8002638 <MX_ETH_Init+0x98>)
 8002612:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8002616:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002618:	4b07      	ldr	r3, [pc, #28]	@ (8002638 <MX_ETH_Init+0x98>)
 800261a:	2200      	movs	r2, #0
 800261c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000b48 	.word	0x20000b48
 8002628:	40028000 	.word	0x40028000
 800262c:	20001580 	.word	0x20001580
 8002630:	20000178 	.word	0x20000178
 8002634:	200000d8 	.word	0x200000d8
 8002638:	20000a14 	.word	0x20000a14

0800263c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002640:	4b1b      	ldr	r3, [pc, #108]	@ (80026b0 <MX_I2C1_Init+0x74>)
 8002642:	4a1c      	ldr	r2, [pc, #112]	@ (80026b4 <MX_I2C1_Init+0x78>)
 8002644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8002646:	4b1a      	ldr	r3, [pc, #104]	@ (80026b0 <MX_I2C1_Init+0x74>)
 8002648:	4a1b      	ldr	r2, [pc, #108]	@ (80026b8 <MX_I2C1_Init+0x7c>)
 800264a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800264c:	4b18      	ldr	r3, [pc, #96]	@ (80026b0 <MX_I2C1_Init+0x74>)
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002652:	4b17      	ldr	r3, [pc, #92]	@ (80026b0 <MX_I2C1_Init+0x74>)
 8002654:	2201      	movs	r2, #1
 8002656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002658:	4b15      	ldr	r3, [pc, #84]	@ (80026b0 <MX_I2C1_Init+0x74>)
 800265a:	2200      	movs	r2, #0
 800265c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800265e:	4b14      	ldr	r3, [pc, #80]	@ (80026b0 <MX_I2C1_Init+0x74>)
 8002660:	2200      	movs	r2, #0
 8002662:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002664:	4b12      	ldr	r3, [pc, #72]	@ (80026b0 <MX_I2C1_Init+0x74>)
 8002666:	2200      	movs	r2, #0
 8002668:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800266a:	4b11      	ldr	r3, [pc, #68]	@ (80026b0 <MX_I2C1_Init+0x74>)
 800266c:	2200      	movs	r2, #0
 800266e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002670:	4b0f      	ldr	r3, [pc, #60]	@ (80026b0 <MX_I2C1_Init+0x74>)
 8002672:	2200      	movs	r2, #0
 8002674:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002676:	480e      	ldr	r0, [pc, #56]	@ (80026b0 <MX_I2C1_Init+0x74>)
 8002678:	f008 f85e 	bl	800a738 <HAL_I2C_Init>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002682:	f001 fd53 	bl	800412c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002686:	2100      	movs	r1, #0
 8002688:	4809      	ldr	r0, [pc, #36]	@ (80026b0 <MX_I2C1_Init+0x74>)
 800268a:	f008 f8f1 	bl	800a870 <HAL_I2CEx_ConfigAnalogFilter>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002694:	f001 fd4a 	bl	800412c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002698:	2100      	movs	r1, #0
 800269a:	4805      	ldr	r0, [pc, #20]	@ (80026b0 <MX_I2C1_Init+0x74>)
 800269c:	f008 f933 	bl	800a906 <HAL_I2CEx_ConfigDigitalFilter>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80026a6:	f001 fd41 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20000bf8 	.word	0x20000bf8
 80026b4:	40005400 	.word	0x40005400
 80026b8:	00c0eaff 	.word	0x00c0eaff

080026bc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80026c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002730 <MX_I2C3_Init+0x74>)
 80026c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002734 <MX_I2C3_Init+0x78>)
 80026c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80026c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002730 <MX_I2C3_Init+0x74>)
 80026c8:	4a1b      	ldr	r2, [pc, #108]	@ (8002738 <MX_I2C3_Init+0x7c>)
 80026ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80026cc:	4b18      	ldr	r3, [pc, #96]	@ (8002730 <MX_I2C3_Init+0x74>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026d2:	4b17      	ldr	r3, [pc, #92]	@ (8002730 <MX_I2C3_Init+0x74>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026d8:	4b15      	ldr	r3, [pc, #84]	@ (8002730 <MX_I2C3_Init+0x74>)
 80026da:	2200      	movs	r2, #0
 80026dc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80026de:	4b14      	ldr	r3, [pc, #80]	@ (8002730 <MX_I2C3_Init+0x74>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026e4:	4b12      	ldr	r3, [pc, #72]	@ (8002730 <MX_I2C3_Init+0x74>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026ea:	4b11      	ldr	r3, [pc, #68]	@ (8002730 <MX_I2C3_Init+0x74>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002730 <MX_I2C3_Init+0x74>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80026f6:	480e      	ldr	r0, [pc, #56]	@ (8002730 <MX_I2C3_Init+0x74>)
 80026f8:	f008 f81e 	bl	800a738 <HAL_I2C_Init>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002702:	f001 fd13 	bl	800412c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002706:	2100      	movs	r1, #0
 8002708:	4809      	ldr	r0, [pc, #36]	@ (8002730 <MX_I2C3_Init+0x74>)
 800270a:	f008 f8b1 	bl	800a870 <HAL_I2CEx_ConfigAnalogFilter>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002714:	f001 fd0a 	bl	800412c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002718:	2100      	movs	r1, #0
 800271a:	4805      	ldr	r0, [pc, #20]	@ (8002730 <MX_I2C3_Init+0x74>)
 800271c:	f008 f8f3 	bl	800a906 <HAL_I2CEx_ConfigDigitalFilter>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002726:	f001 fd01 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20000c4c 	.word	0x20000c4c
 8002734:	40005c00 	.word	0x40005c00
 8002738:	00c0eaff 	.word	0x00c0eaff

0800273c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08e      	sub	sp, #56	@ 0x38
 8002740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002742:	1d3b      	adds	r3, r7, #4
 8002744:	2234      	movs	r2, #52	@ 0x34
 8002746:	2100      	movs	r1, #0
 8002748:	4618      	mov	r0, r3
 800274a:	f015 fdb3 	bl	80182b4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800274e:	4b3a      	ldr	r3, [pc, #232]	@ (8002838 <MX_LTDC_Init+0xfc>)
 8002750:	4a3a      	ldr	r2, [pc, #232]	@ (800283c <MX_LTDC_Init+0x100>)
 8002752:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002754:	4b38      	ldr	r3, [pc, #224]	@ (8002838 <MX_LTDC_Init+0xfc>)
 8002756:	2200      	movs	r2, #0
 8002758:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800275a:	4b37      	ldr	r3, [pc, #220]	@ (8002838 <MX_LTDC_Init+0xfc>)
 800275c:	2200      	movs	r2, #0
 800275e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002760:	4b35      	ldr	r3, [pc, #212]	@ (8002838 <MX_LTDC_Init+0xfc>)
 8002762:	2200      	movs	r2, #0
 8002764:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002766:	4b34      	ldr	r3, [pc, #208]	@ (8002838 <MX_LTDC_Init+0xfc>)
 8002768:	2200      	movs	r2, #0
 800276a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800276c:	4b32      	ldr	r3, [pc, #200]	@ (8002838 <MX_LTDC_Init+0xfc>)
 800276e:	2228      	movs	r2, #40	@ 0x28
 8002770:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8002772:	4b31      	ldr	r3, [pc, #196]	@ (8002838 <MX_LTDC_Init+0xfc>)
 8002774:	2209      	movs	r2, #9
 8002776:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8002778:	4b2f      	ldr	r3, [pc, #188]	@ (8002838 <MX_LTDC_Init+0xfc>)
 800277a:	2235      	movs	r2, #53	@ 0x35
 800277c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800277e:	4b2e      	ldr	r3, [pc, #184]	@ (8002838 <MX_LTDC_Init+0xfc>)
 8002780:	220b      	movs	r2, #11
 8002782:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8002784:	4b2c      	ldr	r3, [pc, #176]	@ (8002838 <MX_LTDC_Init+0xfc>)
 8002786:	f240 2215 	movw	r2, #533	@ 0x215
 800278a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800278c:	4b2a      	ldr	r3, [pc, #168]	@ (8002838 <MX_LTDC_Init+0xfc>)
 800278e:	f240 121b 	movw	r2, #283	@ 0x11b
 8002792:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8002794:	4b28      	ldr	r3, [pc, #160]	@ (8002838 <MX_LTDC_Init+0xfc>)
 8002796:	f240 2235 	movw	r2, #565	@ 0x235
 800279a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 800279c:	4b26      	ldr	r3, [pc, #152]	@ (8002838 <MX_LTDC_Init+0xfc>)
 800279e:	f240 121d 	movw	r2, #285	@ 0x11d
 80027a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80027a4:	4b24      	ldr	r3, [pc, #144]	@ (8002838 <MX_LTDC_Init+0xfc>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80027ac:	4b22      	ldr	r3, [pc, #136]	@ (8002838 <MX_LTDC_Init+0xfc>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80027b4:	4b20      	ldr	r3, [pc, #128]	@ (8002838 <MX_LTDC_Init+0xfc>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80027bc:	481e      	ldr	r0, [pc, #120]	@ (8002838 <MX_LTDC_Init+0xfc>)
 80027be:	f008 f8ee 	bl	800a99e <HAL_LTDC_Init>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80027c8:	f001 fcb0 	bl	800412c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80027d0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80027d4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80027da:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80027de:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80027e0:	2302      	movs	r3, #2
 80027e2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80027e4:	23ff      	movs	r3, #255	@ 0xff
 80027e6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80027ec:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80027f0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80027f2:	2307      	movs	r3, #7
 80027f4:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80027f6:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80027fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 80027fc:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002800:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8002802:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002806:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800281a:	1d3b      	adds	r3, r7, #4
 800281c:	2200      	movs	r2, #0
 800281e:	4619      	mov	r1, r3
 8002820:	4805      	ldr	r0, [pc, #20]	@ (8002838 <MX_LTDC_Init+0xfc>)
 8002822:	f008 fa1b 	bl	800ac5c <HAL_LTDC_ConfigLayer>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800282c:	f001 fc7e 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002830:	bf00      	nop
 8002832:	3738      	adds	r7, #56	@ 0x38
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20000ca0 	.word	0x20000ca0
 800283c:	40016800 	.word	0x40016800

08002840 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002844:	4b12      	ldr	r3, [pc, #72]	@ (8002890 <MX_QUADSPI_Init+0x50>)
 8002846:	4a13      	ldr	r2, [pc, #76]	@ (8002894 <MX_QUADSPI_Init+0x54>)
 8002848:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800284a:	4b11      	ldr	r3, [pc, #68]	@ (8002890 <MX_QUADSPI_Init+0x50>)
 800284c:	2201      	movs	r2, #1
 800284e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8002850:	4b0f      	ldr	r3, [pc, #60]	@ (8002890 <MX_QUADSPI_Init+0x50>)
 8002852:	2204      	movs	r2, #4
 8002854:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002856:	4b0e      	ldr	r3, [pc, #56]	@ (8002890 <MX_QUADSPI_Init+0x50>)
 8002858:	2210      	movs	r2, #16
 800285a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 800285c:	4b0c      	ldr	r3, [pc, #48]	@ (8002890 <MX_QUADSPI_Init+0x50>)
 800285e:	2218      	movs	r2, #24
 8002860:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8002862:	4b0b      	ldr	r3, [pc, #44]	@ (8002890 <MX_QUADSPI_Init+0x50>)
 8002864:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8002868:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800286a:	4b09      	ldr	r3, [pc, #36]	@ (8002890 <MX_QUADSPI_Init+0x50>)
 800286c:	2200      	movs	r2, #0
 800286e:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8002870:	4b07      	ldr	r3, [pc, #28]	@ (8002890 <MX_QUADSPI_Init+0x50>)
 8002872:	2200      	movs	r2, #0
 8002874:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002876:	4b06      	ldr	r3, [pc, #24]	@ (8002890 <MX_QUADSPI_Init+0x50>)
 8002878:	2200      	movs	r2, #0
 800287a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800287c:	4804      	ldr	r0, [pc, #16]	@ (8002890 <MX_QUADSPI_Init+0x50>)
 800287e:	f008 fc01 	bl	800b084 <HAL_QSPI_Init>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8002888:	f001 fc50 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800288c:	bf00      	nop
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000d48 	.word	0x20000d48
 8002894:	a0001000 	.word	0xa0001000

08002898 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b090      	sub	sp, #64	@ 0x40
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800289e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]
 80028a8:	609a      	str	r2, [r3, #8]
 80028aa:	60da      	str	r2, [r3, #12]
 80028ac:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80028ae:	2300      	movs	r3, #0
 80028b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80028b2:	463b      	mov	r3, r7
 80028b4:	2228      	movs	r2, #40	@ 0x28
 80028b6:	2100      	movs	r1, #0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f015 fcfb 	bl	80182b4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80028be:	4b46      	ldr	r3, [pc, #280]	@ (80029d8 <MX_RTC_Init+0x140>)
 80028c0:	4a46      	ldr	r2, [pc, #280]	@ (80029dc <MX_RTC_Init+0x144>)
 80028c2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80028c4:	4b44      	ldr	r3, [pc, #272]	@ (80029d8 <MX_RTC_Init+0x140>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80028ca:	4b43      	ldr	r3, [pc, #268]	@ (80029d8 <MX_RTC_Init+0x140>)
 80028cc:	227f      	movs	r2, #127	@ 0x7f
 80028ce:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80028d0:	4b41      	ldr	r3, [pc, #260]	@ (80029d8 <MX_RTC_Init+0x140>)
 80028d2:	22ff      	movs	r2, #255	@ 0xff
 80028d4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80028d6:	4b40      	ldr	r3, [pc, #256]	@ (80029d8 <MX_RTC_Init+0x140>)
 80028d8:	2200      	movs	r2, #0
 80028da:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80028dc:	4b3e      	ldr	r3, [pc, #248]	@ (80029d8 <MX_RTC_Init+0x140>)
 80028de:	2200      	movs	r2, #0
 80028e0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80028e2:	4b3d      	ldr	r3, [pc, #244]	@ (80029d8 <MX_RTC_Init+0x140>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028e8:	483b      	ldr	r0, [pc, #236]	@ (80029d8 <MX_RTC_Init+0x140>)
 80028ea:	f009 fe79 	bl	800c5e0 <HAL_RTC_Init>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80028f4:	f001 fc1a 	bl	800412c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 80028fe:	2300      	movs	r3, #0
 8002900:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8002904:	2300      	movs	r3, #0
 8002906:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800290a:	2300      	movs	r3, #0
 800290c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800290e:	2300      	movs	r3, #0
 8002910:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002912:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002916:	2201      	movs	r2, #1
 8002918:	4619      	mov	r1, r3
 800291a:	482f      	ldr	r0, [pc, #188]	@ (80029d8 <MX_RTC_Init+0x140>)
 800291c:	f009 fee2 	bl	800c6e4 <HAL_RTC_SetTime>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002926:	f001 fc01 	bl	800412c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800292a:	2301      	movs	r3, #1
 800292c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002930:	2301      	movs	r3, #1
 8002932:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8002936:	2301      	movs	r3, #1
 8002938:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 800293c:	2300      	movs	r3, #0
 800293e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002942:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002946:	2201      	movs	r2, #1
 8002948:	4619      	mov	r1, r3
 800294a:	4823      	ldr	r0, [pc, #140]	@ (80029d8 <MX_RTC_Init+0x140>)
 800294c:	f009 ff64 	bl	800c818 <HAL_RTC_SetDate>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8002956:	f001 fbe9 	bl	800412c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800295a:	2300      	movs	r3, #0
 800295c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800295e:	2300      	movs	r3, #0
 8002960:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002962:	2300      	movs	r3, #0
 8002964:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002966:	2300      	movs	r3, #0
 8002968:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800296e:	2300      	movs	r3, #0
 8002970:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002976:	2300      	movs	r3, #0
 8002978:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800297e:	2301      	movs	r3, #1
 8002980:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002984:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002988:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800298a:	463b      	mov	r3, r7
 800298c:	2201      	movs	r2, #1
 800298e:	4619      	mov	r1, r3
 8002990:	4811      	ldr	r0, [pc, #68]	@ (80029d8 <MX_RTC_Init+0x140>)
 8002992:	f009 ffc5 	bl	800c920 <HAL_RTC_SetAlarm>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 800299c:	f001 fbc6 	bl	800412c <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80029a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80029a6:	463b      	mov	r3, r7
 80029a8:	2201      	movs	r2, #1
 80029aa:	4619      	mov	r1, r3
 80029ac:	480a      	ldr	r0, [pc, #40]	@ (80029d8 <MX_RTC_Init+0x140>)
 80029ae:	f009 ffb7 	bl	800c920 <HAL_RTC_SetAlarm>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <MX_RTC_Init+0x124>
  {
    Error_Handler();
 80029b8:	f001 fbb8 	bl	800412c <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80029bc:	2202      	movs	r2, #2
 80029be:	2100      	movs	r1, #0
 80029c0:	4805      	ldr	r0, [pc, #20]	@ (80029d8 <MX_RTC_Init+0x140>)
 80029c2:	f00a f977 	bl	800ccb4 <HAL_RTCEx_SetTimeStamp>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 80029cc:	f001 fbae 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80029d0:	bf00      	nop
 80029d2:	3740      	adds	r7, #64	@ 0x40
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20000d94 	.word	0x20000d94
 80029dc:	40002800 	.word	0x40002800

080029e0 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80029e4:	4b4d      	ldr	r3, [pc, #308]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 80029e6:	4a4e      	ldr	r2, [pc, #312]	@ (8002b20 <MX_SAI2_Init+0x140>)
 80029e8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80029ea:	4b4c      	ldr	r3, [pc, #304]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80029f0:	4b4a      	ldr	r3, [pc, #296]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80029f6:	4b49      	ldr	r3, [pc, #292]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 80029f8:	2240      	movs	r2, #64	@ 0x40
 80029fa:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80029fc:	4b47      	ldr	r3, [pc, #284]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002a02:	4b46      	ldr	r3, [pc, #280]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8002a08:	4b44      	ldr	r3, [pc, #272]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002a0e:	4b43      	ldr	r3, [pc, #268]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002a14:	4b41      	ldr	r3, [pc, #260]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002a1a:	4b40      	ldr	r3, [pc, #256]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002a20:	4b3e      	ldr	r3, [pc, #248]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a22:	4a40      	ldr	r2, [pc, #256]	@ (8002b24 <MX_SAI2_Init+0x144>)
 8002a24:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002a26:	4b3d      	ldr	r3, [pc, #244]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002a2c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002a32:	4b3a      	ldr	r3, [pc, #232]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002a38:	4b38      	ldr	r3, [pc, #224]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8002a3e:	4b37      	ldr	r3, [pc, #220]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a40:	2208      	movs	r2, #8
 8002a42:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8002a44:	4b35      	ldr	r3, [pc, #212]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002a4a:	4b34      	ldr	r3, [pc, #208]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002a50:	4b32      	ldr	r3, [pc, #200]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002a56:	4b31      	ldr	r3, [pc, #196]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8002a5c:	4b2f      	ldr	r3, [pc, #188]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002a62:	4b2e      	ldr	r3, [pc, #184]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8002a68:	4b2c      	ldr	r3, [pc, #176]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8002a6e:	4b2b      	ldr	r3, [pc, #172]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8002a74:	4829      	ldr	r0, [pc, #164]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a76:	f00a f985 	bl	800cd84 <HAL_SAI_Init>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8002a80:	f001 fb54 	bl	800412c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8002a84:	4b28      	ldr	r3, [pc, #160]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002a86:	4a29      	ldr	r2, [pc, #164]	@ (8002b2c <MX_SAI2_Init+0x14c>)
 8002a88:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8002a8a:	4b27      	ldr	r3, [pc, #156]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8002a90:	4b25      	ldr	r3, [pc, #148]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002a92:	2203      	movs	r2, #3
 8002a94:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8002a96:	4b24      	ldr	r3, [pc, #144]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002a98:	2240      	movs	r2, #64	@ 0x40
 8002a9a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002a9c:	4b22      	ldr	r3, [pc, #136]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002aa2:	4b21      	ldr	r3, [pc, #132]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8002aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002aae:	4b1e      	ldr	r3, [pc, #120]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002aba:	4b1b      	ldr	r3, [pc, #108]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002ac0:	4b19      	ldr	r3, [pc, #100]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002ac6:	4b18      	ldr	r3, [pc, #96]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002acc:	4b16      	ldr	r3, [pc, #88]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8002ad2:	4b15      	ldr	r3, [pc, #84]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002ad4:	2208      	movs	r2, #8
 8002ad6:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8002ad8:	4b13      	ldr	r3, [pc, #76]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002ade:	4b12      	ldr	r3, [pc, #72]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002ae4:	4b10      	ldr	r3, [pc, #64]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002aea:	4b0f      	ldr	r3, [pc, #60]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8002af0:	4b0d      	ldr	r3, [pc, #52]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002af6:	4b0c      	ldr	r3, [pc, #48]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8002afc:	4b0a      	ldr	r3, [pc, #40]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8002b02:	4b09      	ldr	r3, [pc, #36]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8002b08:	4807      	ldr	r0, [pc, #28]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002b0a:	f00a f93b 	bl	800cd84 <HAL_SAI_Init>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8002b14:	f001 fb0a 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8002b18:	bf00      	nop
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	20000db4 	.word	0x20000db4
 8002b20:	40015c04 	.word	0x40015c04
 8002b24:	0002ee00 	.word	0x0002ee00
 8002b28:	20000e38 	.word	0x20000e38
 8002b2c:	40015c24 	.word	0x40015c24

08002b30 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002b36:	4b13      	ldr	r3, [pc, #76]	@ (8002b84 <MX_SDMMC1_SD_Init+0x54>)
 8002b38:	4a13      	ldr	r2, [pc, #76]	@ (8002b88 <MX_SDMMC1_SD_Init+0x58>)
 8002b3a:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002b3c:	4b11      	ldr	r3, [pc, #68]	@ (8002b84 <MX_SDMMC1_SD_Init+0x54>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002b42:	4b10      	ldr	r3, [pc, #64]	@ (8002b84 <MX_SDMMC1_SD_Init+0x54>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002b48:	4b0e      	ldr	r3, [pc, #56]	@ (8002b84 <MX_SDMMC1_SD_Init+0x54>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;  // ST 커뮤니티 가이드: 1-bit 모드로 변경
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b84 <MX_SDMMC1_SD_Init+0x54>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;  // 하드웨어 플로우 컨트롤 활성화 (안정성 향상)
 8002b54:	4b0b      	ldr	r3, [pc, #44]	@ (8002b84 <MX_SDMMC1_SD_Init+0x54>)
 8002b56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b5a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 8;  // 클럭 분주비 증가 (2→8, STM32F7 안정화 권장값)
 8002b5c:	4b09      	ldr	r3, [pc, #36]	@ (8002b84 <MX_SDMMC1_SD_Init+0x54>)
 8002b5e:	2208      	movs	r2, #8
 8002b60:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  
  // Initialize SD card with HAL
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8002b62:	4808      	ldr	r0, [pc, #32]	@ (8002b84 <MX_SDMMC1_SD_Init+0x54>)
 8002b64:	f00a fac4 	bl	800d0f0 <HAL_SD_Init>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <MX_SDMMC1_SD_Init+0x42>
  {
    Error_Handler();
 8002b6e:	f001 fadd 	bl	800412c <Error_Handler>
  }
  
  // BSP 초기화도 호출 (FatFs 호환성을 위해)
  uint8_t bsp_result = BSP_SD_Init();
 8002b72:	f00f fbc1 	bl	80122f8 <BSP_SD_Init>
 8002b76:	4603      	mov	r3, r0
 8002b78:	71fb      	strb	r3, [r7, #7]
    // Error_Handler() 호출하지 않음
  }

  /* USER CODE END SDMMC1_Init 2 */

}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000ebc 	.word	0x20000ebc
 8002b88:	40012c00 	.word	0x40012c00

08002b8c <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8002b90:	4b15      	ldr	r3, [pc, #84]	@ (8002be8 <MX_SPDIFRX_Init+0x5c>)
 8002b92:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002b96:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8002b98:	4b13      	ldr	r3, [pc, #76]	@ (8002be8 <MX_SPDIFRX_Init+0x5c>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8002b9e:	4b12      	ldr	r3, [pc, #72]	@ (8002be8 <MX_SPDIFRX_Init+0x5c>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8002ba4:	4b10      	ldr	r3, [pc, #64]	@ (8002be8 <MX_SPDIFRX_Init+0x5c>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8002baa:	4b0f      	ldr	r3, [pc, #60]	@ (8002be8 <MX_SPDIFRX_Init+0x5c>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8002bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8002be8 <MX_SPDIFRX_Init+0x5c>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8002bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8002be8 <MX_SPDIFRX_Init+0x5c>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8002bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002be8 <MX_SPDIFRX_Init+0x5c>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8002bc2:	4b09      	ldr	r3, [pc, #36]	@ (8002be8 <MX_SPDIFRX_Init+0x5c>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8002bc8:	4b07      	ldr	r3, [pc, #28]	@ (8002be8 <MX_SPDIFRX_Init+0x5c>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8002bce:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <MX_SPDIFRX_Init+0x5c>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8002bd4:	4804      	ldr	r0, [pc, #16]	@ (8002be8 <MX_SPDIFRX_Init+0x5c>)
 8002bd6:	f00b fc4b 	bl	800e470 <HAL_SPDIFRX_Init>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8002be0:	f001 faa4 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8002be4:	bf00      	nop
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	20000f40 	.word	0x20000f40

08002bec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8002c64 <MX_SPI2_Init+0x78>)
 8002bf4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002bf8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002bfc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002bfe:	4b18      	ldr	r3, [pc, #96]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002c04:	4b16      	ldr	r3, [pc, #88]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002c06:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002c0a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c0c:	4b14      	ldr	r3, [pc, #80]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c12:	4b13      	ldr	r3, [pc, #76]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002c18:	4b11      	ldr	r3, [pc, #68]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002c1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c1e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c20:	4b0f      	ldr	r3, [pc, #60]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c26:	4b0e      	ldr	r3, [pc, #56]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c32:	4b0b      	ldr	r3, [pc, #44]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002c38:	4b09      	ldr	r3, [pc, #36]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002c3a:	2207      	movs	r2, #7
 8002c3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c3e:	4b08      	ldr	r3, [pc, #32]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c44:	4b06      	ldr	r3, [pc, #24]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002c46:	2208      	movs	r2, #8
 8002c48:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c4a:	4805      	ldr	r0, [pc, #20]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002c4c:	f00b fc6c 	bl	800e528 <HAL_SPI_Init>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002c56:	f001 fa69 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000f8c 	.word	0x20000f8c
 8002c64:	40003800 	.word	0x40003800

08002c68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b09a      	sub	sp, #104	@ 0x68
 8002c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c6e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	605a      	str	r2, [r3, #4]
 8002c78:	609a      	str	r2, [r3, #8]
 8002c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c7c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c88:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	611a      	str	r2, [r3, #16]
 8002c98:	615a      	str	r2, [r3, #20]
 8002c9a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c9c:	1d3b      	adds	r3, r7, #4
 8002c9e:	222c      	movs	r2, #44	@ 0x2c
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f015 fb06 	bl	80182b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ca8:	4b43      	ldr	r3, [pc, #268]	@ (8002db8 <MX_TIM1_Init+0x150>)
 8002caa:	4a44      	ldr	r2, [pc, #272]	@ (8002dbc <MX_TIM1_Init+0x154>)
 8002cac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002cae:	4b42      	ldr	r3, [pc, #264]	@ (8002db8 <MX_TIM1_Init+0x150>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb4:	4b40      	ldr	r3, [pc, #256]	@ (8002db8 <MX_TIM1_Init+0x150>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002cba:	4b3f      	ldr	r3, [pc, #252]	@ (8002db8 <MX_TIM1_Init+0x150>)
 8002cbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cc0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cc2:	4b3d      	ldr	r3, [pc, #244]	@ (8002db8 <MX_TIM1_Init+0x150>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002cc8:	4b3b      	ldr	r3, [pc, #236]	@ (8002db8 <MX_TIM1_Init+0x150>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cce:	4b3a      	ldr	r3, [pc, #232]	@ (8002db8 <MX_TIM1_Init+0x150>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002cd4:	4838      	ldr	r0, [pc, #224]	@ (8002db8 <MX_TIM1_Init+0x150>)
 8002cd6:	f00b fcd2 	bl	800e67e <HAL_TIM_Base_Init>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002ce0:	f001 fa24 	bl	800412c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ce4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ce8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002cea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4831      	ldr	r0, [pc, #196]	@ (8002db8 <MX_TIM1_Init+0x150>)
 8002cf2:	f00c f805 	bl	800ed00 <HAL_TIM_ConfigClockSource>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002cfc:	f001 fa16 	bl	800412c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002d00:	482d      	ldr	r0, [pc, #180]	@ (8002db8 <MX_TIM1_Init+0x150>)
 8002d02:	f00b fd8b 	bl	800e81c <HAL_TIM_PWM_Init>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002d0c:	f001 fa0e 	bl	800412c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d10:	2300      	movs	r3, #0
 8002d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002d14:	2300      	movs	r3, #0
 8002d16:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d1c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002d20:	4619      	mov	r1, r3
 8002d22:	4825      	ldr	r0, [pc, #148]	@ (8002db8 <MX_TIM1_Init+0x150>)
 8002d24:	f00c fc7c 	bl	800f620 <HAL_TIMEx_MasterConfigSynchronization>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002d2e:	f001 f9fd 	bl	800412c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d32:	2360      	movs	r3, #96	@ 0x60
 8002d34:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002d36:	2300      	movs	r3, #0
 8002d38:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d42:	2300      	movs	r3, #0
 8002d44:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d46:	2300      	movs	r3, #0
 8002d48:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d4e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d52:	2200      	movs	r2, #0
 8002d54:	4619      	mov	r1, r3
 8002d56:	4818      	ldr	r0, [pc, #96]	@ (8002db8 <MX_TIM1_Init+0x150>)
 8002d58:	f00b febe 	bl	800ead8 <HAL_TIM_PWM_ConfigChannel>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002d62:	f001 f9e3 	bl	800412c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d66:	2300      	movs	r3, #0
 8002d68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002d80:	2300      	movs	r3, #0
 8002d82:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002d84:	2300      	movs	r3, #0
 8002d86:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002d88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d92:	2300      	movs	r3, #0
 8002d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002d96:	1d3b      	adds	r3, r7, #4
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4807      	ldr	r0, [pc, #28]	@ (8002db8 <MX_TIM1_Init+0x150>)
 8002d9c:	f00c fcce 	bl	800f73c <HAL_TIMEx_ConfigBreakDeadTime>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002da6:	f001 f9c1 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002daa:	4803      	ldr	r0, [pc, #12]	@ (8002db8 <MX_TIM1_Init+0x150>)
 8002dac:	f002 f832 	bl	8004e14 <HAL_TIM_MspPostInit>

}
 8002db0:	bf00      	nop
 8002db2:	3768      	adds	r7, #104	@ 0x68
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	20000ff0 	.word	0x20000ff0
 8002dbc:	40010000 	.word	0x40010000

08002dc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08e      	sub	sp, #56	@ 0x38
 8002dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	605a      	str	r2, [r3, #4]
 8002dd0:	609a      	str	r2, [r3, #8]
 8002dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dd4:	f107 031c 	add.w	r3, r7, #28
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002de0:	463b      	mov	r3, r7
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	605a      	str	r2, [r3, #4]
 8002de8:	609a      	str	r2, [r3, #8]
 8002dea:	60da      	str	r2, [r3, #12]
 8002dec:	611a      	str	r2, [r3, #16]
 8002dee:	615a      	str	r2, [r3, #20]
 8002df0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002df2:	4b2d      	ldr	r3, [pc, #180]	@ (8002ea8 <MX_TIM2_Init+0xe8>)
 8002df4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002df8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002dfa:	4b2b      	ldr	r3, [pc, #172]	@ (8002ea8 <MX_TIM2_Init+0xe8>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e00:	4b29      	ldr	r3, [pc, #164]	@ (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002e06:	4b28      	ldr	r3, [pc, #160]	@ (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e08:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e0e:	4b26      	ldr	r3, [pc, #152]	@ (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e14:	4b24      	ldr	r3, [pc, #144]	@ (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e1a:	4823      	ldr	r0, [pc, #140]	@ (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e1c:	f00b fc2f 	bl	800e67e <HAL_TIM_Base_Init>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002e26:	f001 f981 	bl	800412c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e30:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e34:	4619      	mov	r1, r3
 8002e36:	481c      	ldr	r0, [pc, #112]	@ (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e38:	f00b ff62 	bl	800ed00 <HAL_TIM_ConfigClockSource>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002e42:	f001 f973 	bl	800412c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002e46:	4818      	ldr	r0, [pc, #96]	@ (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e48:	f00b fce8 	bl	800e81c <HAL_TIM_PWM_Init>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002e52:	f001 f96b 	bl	800412c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e5e:	f107 031c 	add.w	r3, r7, #28
 8002e62:	4619      	mov	r1, r3
 8002e64:	4810      	ldr	r0, [pc, #64]	@ (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e66:	f00c fbdb 	bl	800f620 <HAL_TIMEx_MasterConfigSynchronization>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002e70:	f001 f95c 	bl	800412c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e74:	2360      	movs	r3, #96	@ 0x60
 8002e76:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e80:	2300      	movs	r3, #0
 8002e82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e84:	463b      	mov	r3, r7
 8002e86:	2200      	movs	r2, #0
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4807      	ldr	r0, [pc, #28]	@ (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e8c:	f00b fe24 	bl	800ead8 <HAL_TIM_PWM_ConfigChannel>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002e96:	f001 f949 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002e9a:	4803      	ldr	r0, [pc, #12]	@ (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e9c:	f001 ffba 	bl	8004e14 <HAL_TIM_MspPostInit>

}
 8002ea0:	bf00      	nop
 8002ea2:	3738      	adds	r7, #56	@ 0x38
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	2000103c 	.word	0x2000103c

08002eac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08e      	sub	sp, #56	@ 0x38
 8002eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	605a      	str	r2, [r3, #4]
 8002ebc:	609a      	str	r2, [r3, #8]
 8002ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec0:	f107 031c 	add.w	r3, r7, #28
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ecc:	463b      	mov	r3, r7
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	605a      	str	r2, [r3, #4]
 8002ed4:	609a      	str	r2, [r3, #8]
 8002ed6:	60da      	str	r2, [r3, #12]
 8002ed8:	611a      	str	r2, [r3, #16]
 8002eda:	615a      	str	r2, [r3, #20]
 8002edc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ede:	4b2d      	ldr	r3, [pc, #180]	@ (8002f94 <MX_TIM3_Init+0xe8>)
 8002ee0:	4a2d      	ldr	r2, [pc, #180]	@ (8002f98 <MX_TIM3_Init+0xec>)
 8002ee2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8002f94 <MX_TIM3_Init+0xe8>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eea:	4b2a      	ldr	r3, [pc, #168]	@ (8002f94 <MX_TIM3_Init+0xe8>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002ef0:	4b28      	ldr	r3, [pc, #160]	@ (8002f94 <MX_TIM3_Init+0xe8>)
 8002ef2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ef6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ef8:	4b26      	ldr	r3, [pc, #152]	@ (8002f94 <MX_TIM3_Init+0xe8>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002efe:	4b25      	ldr	r3, [pc, #148]	@ (8002f94 <MX_TIM3_Init+0xe8>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f04:	4823      	ldr	r0, [pc, #140]	@ (8002f94 <MX_TIM3_Init+0xe8>)
 8002f06:	f00b fbba 	bl	800e67e <HAL_TIM_Base_Init>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002f10:	f001 f90c 	bl	800412c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f18:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f1e:	4619      	mov	r1, r3
 8002f20:	481c      	ldr	r0, [pc, #112]	@ (8002f94 <MX_TIM3_Init+0xe8>)
 8002f22:	f00b feed 	bl	800ed00 <HAL_TIM_ConfigClockSource>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002f2c:	f001 f8fe 	bl	800412c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f30:	4818      	ldr	r0, [pc, #96]	@ (8002f94 <MX_TIM3_Init+0xe8>)
 8002f32:	f00b fc73 	bl	800e81c <HAL_TIM_PWM_Init>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002f3c:	f001 f8f6 	bl	800412c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f44:	2300      	movs	r3, #0
 8002f46:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f48:	f107 031c 	add.w	r3, r7, #28
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4811      	ldr	r0, [pc, #68]	@ (8002f94 <MX_TIM3_Init+0xe8>)
 8002f50:	f00c fb66 	bl	800f620 <HAL_TIMEx_MasterConfigSynchronization>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002f5a:	f001 f8e7 	bl	800412c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f5e:	2360      	movs	r3, #96	@ 0x60
 8002f60:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f6e:	463b      	mov	r3, r7
 8002f70:	2200      	movs	r2, #0
 8002f72:	4619      	mov	r1, r3
 8002f74:	4807      	ldr	r0, [pc, #28]	@ (8002f94 <MX_TIM3_Init+0xe8>)
 8002f76:	f00b fdaf 	bl	800ead8 <HAL_TIM_PWM_ConfigChannel>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002f80:	f001 f8d4 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002f84:	4803      	ldr	r0, [pc, #12]	@ (8002f94 <MX_TIM3_Init+0xe8>)
 8002f86:	f001 ff45 	bl	8004e14 <HAL_TIM_MspPostInit>

}
 8002f8a:	bf00      	nop
 8002f8c:	3738      	adds	r7, #56	@ 0x38
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20001088 	.word	0x20001088
 8002f98:	40000400 	.word	0x40000400

08002f9c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08e      	sub	sp, #56	@ 0x38
 8002fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fa2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	605a      	str	r2, [r3, #4]
 8002fac:	609a      	str	r2, [r3, #8]
 8002fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fb0:	f107 031c 	add.w	r3, r7, #28
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	605a      	str	r2, [r3, #4]
 8002fba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fbc:	463b      	mov	r3, r7
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	605a      	str	r2, [r3, #4]
 8002fc4:	609a      	str	r2, [r3, #8]
 8002fc6:	60da      	str	r2, [r3, #12]
 8002fc8:	611a      	str	r2, [r3, #16]
 8002fca:	615a      	str	r2, [r3, #20]
 8002fcc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002fce:	4b2d      	ldr	r3, [pc, #180]	@ (8003084 <MX_TIM5_Init+0xe8>)
 8002fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8003088 <MX_TIM5_Init+0xec>)
 8002fd2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8003084 <MX_TIM5_Init+0xe8>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fda:	4b2a      	ldr	r3, [pc, #168]	@ (8003084 <MX_TIM5_Init+0xe8>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002fe0:	4b28      	ldr	r3, [pc, #160]	@ (8003084 <MX_TIM5_Init+0xe8>)
 8002fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fe8:	4b26      	ldr	r3, [pc, #152]	@ (8003084 <MX_TIM5_Init+0xe8>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fee:	4b25      	ldr	r3, [pc, #148]	@ (8003084 <MX_TIM5_Init+0xe8>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002ff4:	4823      	ldr	r0, [pc, #140]	@ (8003084 <MX_TIM5_Init+0xe8>)
 8002ff6:	f00b fb42 	bl	800e67e <HAL_TIM_Base_Init>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8003000:	f001 f894 	bl	800412c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003004:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003008:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800300a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800300e:	4619      	mov	r1, r3
 8003010:	481c      	ldr	r0, [pc, #112]	@ (8003084 <MX_TIM5_Init+0xe8>)
 8003012:	f00b fe75 	bl	800ed00 <HAL_TIM_ConfigClockSource>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800301c:	f001 f886 	bl	800412c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003020:	4818      	ldr	r0, [pc, #96]	@ (8003084 <MX_TIM5_Init+0xe8>)
 8003022:	f00b fbfb 	bl	800e81c <HAL_TIM_PWM_Init>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800302c:	f001 f87e 	bl	800412c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003030:	2300      	movs	r3, #0
 8003032:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003034:	2300      	movs	r3, #0
 8003036:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003038:	f107 031c 	add.w	r3, r7, #28
 800303c:	4619      	mov	r1, r3
 800303e:	4811      	ldr	r0, [pc, #68]	@ (8003084 <MX_TIM5_Init+0xe8>)
 8003040:	f00c faee 	bl	800f620 <HAL_TIMEx_MasterConfigSynchronization>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800304a:	f001 f86f 	bl	800412c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800304e:	2360      	movs	r3, #96	@ 0x60
 8003050:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003052:	2300      	movs	r3, #0
 8003054:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003056:	2300      	movs	r3, #0
 8003058:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800305a:	2300      	movs	r3, #0
 800305c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800305e:	463b      	mov	r3, r7
 8003060:	220c      	movs	r2, #12
 8003062:	4619      	mov	r1, r3
 8003064:	4807      	ldr	r0, [pc, #28]	@ (8003084 <MX_TIM5_Init+0xe8>)
 8003066:	f00b fd37 	bl	800ead8 <HAL_TIM_PWM_ConfigChannel>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8003070:	f001 f85c 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003074:	4803      	ldr	r0, [pc, #12]	@ (8003084 <MX_TIM5_Init+0xe8>)
 8003076:	f001 fecd 	bl	8004e14 <HAL_TIM_MspPostInit>

}
 800307a:	bf00      	nop
 800307c:	3738      	adds	r7, #56	@ 0x38
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	200010d4 	.word	0x200010d4
 8003088:	40000c00 	.word	0x40000c00

0800308c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003092:	f107 0310 	add.w	r3, r7, #16
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	605a      	str	r2, [r3, #4]
 800309c:	609a      	str	r2, [r3, #8]
 800309e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030a0:	1d3b      	adds	r3, r7, #4
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	605a      	str	r2, [r3, #4]
 80030a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80030aa:	4b20      	ldr	r3, [pc, #128]	@ (800312c <MX_TIM8_Init+0xa0>)
 80030ac:	4a20      	ldr	r2, [pc, #128]	@ (8003130 <MX_TIM8_Init+0xa4>)
 80030ae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80030b0:	4b1e      	ldr	r3, [pc, #120]	@ (800312c <MX_TIM8_Init+0xa0>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030b6:	4b1d      	ldr	r3, [pc, #116]	@ (800312c <MX_TIM8_Init+0xa0>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80030bc:	4b1b      	ldr	r3, [pc, #108]	@ (800312c <MX_TIM8_Init+0xa0>)
 80030be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030c2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030c4:	4b19      	ldr	r3, [pc, #100]	@ (800312c <MX_TIM8_Init+0xa0>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80030ca:	4b18      	ldr	r3, [pc, #96]	@ (800312c <MX_TIM8_Init+0xa0>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030d0:	4b16      	ldr	r3, [pc, #88]	@ (800312c <MX_TIM8_Init+0xa0>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80030d6:	4815      	ldr	r0, [pc, #84]	@ (800312c <MX_TIM8_Init+0xa0>)
 80030d8:	f00b fad1 	bl	800e67e <HAL_TIM_Base_Init>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80030e2:	f001 f823 	bl	800412c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80030ec:	f107 0310 	add.w	r3, r7, #16
 80030f0:	4619      	mov	r1, r3
 80030f2:	480e      	ldr	r0, [pc, #56]	@ (800312c <MX_TIM8_Init+0xa0>)
 80030f4:	f00b fe04 	bl	800ed00 <HAL_TIM_ConfigClockSource>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80030fe:	f001 f815 	bl	800412c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003102:	2300      	movs	r3, #0
 8003104:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003106:	2300      	movs	r3, #0
 8003108:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800310e:	1d3b      	adds	r3, r7, #4
 8003110:	4619      	mov	r1, r3
 8003112:	4806      	ldr	r0, [pc, #24]	@ (800312c <MX_TIM8_Init+0xa0>)
 8003114:	f00c fa84 	bl	800f620 <HAL_TIMEx_MasterConfigSynchronization>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800311e:	f001 f805 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003122:	bf00      	nop
 8003124:	3720      	adds	r7, #32
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20001120 	.word	0x20001120
 8003130:	40010400 	.word	0x40010400

08003134 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800313a:	1d3b      	adds	r3, r7, #4
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	60da      	str	r2, [r3, #12]
 8003146:	611a      	str	r2, [r3, #16]
 8003148:	615a      	str	r2, [r3, #20]
 800314a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800314c:	4b1a      	ldr	r3, [pc, #104]	@ (80031b8 <MX_TIM12_Init+0x84>)
 800314e:	4a1b      	ldr	r2, [pc, #108]	@ (80031bc <MX_TIM12_Init+0x88>)
 8003150:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8003152:	4b19      	ldr	r3, [pc, #100]	@ (80031b8 <MX_TIM12_Init+0x84>)
 8003154:	2200      	movs	r2, #0
 8003156:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003158:	4b17      	ldr	r3, [pc, #92]	@ (80031b8 <MX_TIM12_Init+0x84>)
 800315a:	2200      	movs	r2, #0
 800315c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800315e:	4b16      	ldr	r3, [pc, #88]	@ (80031b8 <MX_TIM12_Init+0x84>)
 8003160:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003164:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003166:	4b14      	ldr	r3, [pc, #80]	@ (80031b8 <MX_TIM12_Init+0x84>)
 8003168:	2200      	movs	r2, #0
 800316a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800316c:	4b12      	ldr	r3, [pc, #72]	@ (80031b8 <MX_TIM12_Init+0x84>)
 800316e:	2200      	movs	r2, #0
 8003170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8003172:	4811      	ldr	r0, [pc, #68]	@ (80031b8 <MX_TIM12_Init+0x84>)
 8003174:	f00b fb52 	bl	800e81c <HAL_TIM_PWM_Init>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800317e:	f000 ffd5 	bl	800412c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003182:	2360      	movs	r3, #96	@ 0x60
 8003184:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003186:	2300      	movs	r3, #0
 8003188:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800318a:	2300      	movs	r3, #0
 800318c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003192:	1d3b      	adds	r3, r7, #4
 8003194:	2200      	movs	r2, #0
 8003196:	4619      	mov	r1, r3
 8003198:	4807      	ldr	r0, [pc, #28]	@ (80031b8 <MX_TIM12_Init+0x84>)
 800319a:	f00b fc9d 	bl	800ead8 <HAL_TIM_PWM_ConfigChannel>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80031a4:	f000 ffc2 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80031a8:	4803      	ldr	r0, [pc, #12]	@ (80031b8 <MX_TIM12_Init+0x84>)
 80031aa:	f001 fe33 	bl	8004e14 <HAL_TIM_MspPostInit>

}
 80031ae:	bf00      	nop
 80031b0:	3720      	adds	r7, #32
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	2000116c 	.word	0x2000116c
 80031bc:	40001800 	.word	0x40001800

080031c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031c4:	4b14      	ldr	r3, [pc, #80]	@ (8003218 <MX_USART1_UART_Init+0x58>)
 80031c6:	4a15      	ldr	r2, [pc, #84]	@ (800321c <MX_USART1_UART_Init+0x5c>)
 80031c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80031ca:	4b13      	ldr	r3, [pc, #76]	@ (8003218 <MX_USART1_UART_Init+0x58>)
 80031cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80031d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031d2:	4b11      	ldr	r3, [pc, #68]	@ (8003218 <MX_USART1_UART_Init+0x58>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003218 <MX_USART1_UART_Init+0x58>)
 80031da:	2200      	movs	r2, #0
 80031dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031de:	4b0e      	ldr	r3, [pc, #56]	@ (8003218 <MX_USART1_UART_Init+0x58>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003218 <MX_USART1_UART_Init+0x58>)
 80031e6:	220c      	movs	r2, #12
 80031e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003218 <MX_USART1_UART_Init+0x58>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031f0:	4b09      	ldr	r3, [pc, #36]	@ (8003218 <MX_USART1_UART_Init+0x58>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031f6:	4b08      	ldr	r3, [pc, #32]	@ (8003218 <MX_USART1_UART_Init+0x58>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031fc:	4b06      	ldr	r3, [pc, #24]	@ (8003218 <MX_USART1_UART_Init+0x58>)
 80031fe:	2200      	movs	r2, #0
 8003200:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003202:	4805      	ldr	r0, [pc, #20]	@ (8003218 <MX_USART1_UART_Init+0x58>)
 8003204:	f00c fb36 	bl	800f874 <HAL_UART_Init>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800320e:	f000 ff8d 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003212:	bf00      	nop
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	200011b8 	.word	0x200011b8
 800321c:	40011000 	.word	0x40011000

08003220 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003224:	4b14      	ldr	r3, [pc, #80]	@ (8003278 <MX_USART6_UART_Init+0x58>)
 8003226:	4a15      	ldr	r2, [pc, #84]	@ (800327c <MX_USART6_UART_Init+0x5c>)
 8003228:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800322a:	4b13      	ldr	r3, [pc, #76]	@ (8003278 <MX_USART6_UART_Init+0x58>)
 800322c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003230:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003232:	4b11      	ldr	r3, [pc, #68]	@ (8003278 <MX_USART6_UART_Init+0x58>)
 8003234:	2200      	movs	r2, #0
 8003236:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003238:	4b0f      	ldr	r3, [pc, #60]	@ (8003278 <MX_USART6_UART_Init+0x58>)
 800323a:	2200      	movs	r2, #0
 800323c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800323e:	4b0e      	ldr	r3, [pc, #56]	@ (8003278 <MX_USART6_UART_Init+0x58>)
 8003240:	2200      	movs	r2, #0
 8003242:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003244:	4b0c      	ldr	r3, [pc, #48]	@ (8003278 <MX_USART6_UART_Init+0x58>)
 8003246:	220c      	movs	r2, #12
 8003248:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800324a:	4b0b      	ldr	r3, [pc, #44]	@ (8003278 <MX_USART6_UART_Init+0x58>)
 800324c:	2200      	movs	r2, #0
 800324e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003250:	4b09      	ldr	r3, [pc, #36]	@ (8003278 <MX_USART6_UART_Init+0x58>)
 8003252:	2200      	movs	r2, #0
 8003254:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003256:	4b08      	ldr	r3, [pc, #32]	@ (8003278 <MX_USART6_UART_Init+0x58>)
 8003258:	2200      	movs	r2, #0
 800325a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800325c:	4b06      	ldr	r3, [pc, #24]	@ (8003278 <MX_USART6_UART_Init+0x58>)
 800325e:	2200      	movs	r2, #0
 8003260:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003262:	4805      	ldr	r0, [pc, #20]	@ (8003278 <MX_USART6_UART_Init+0x58>)
 8003264:	f00c fb06 	bl	800f874 <HAL_UART_Init>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800326e:	f000 ff5d 	bl	800412c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003272:	bf00      	nop
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	20001240 	.word	0x20001240
 800327c:	40011400 	.word	0x40011400

08003280 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8003286:	1d3b      	adds	r3, r7, #4
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	611a      	str	r2, [r3, #16]
 8003294:	615a      	str	r2, [r3, #20]
 8003296:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003298:	4b1f      	ldr	r3, [pc, #124]	@ (8003318 <MX_FMC_Init+0x98>)
 800329a:	4a20      	ldr	r2, [pc, #128]	@ (800331c <MX_FMC_Init+0x9c>)
 800329c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800329e:	4b1e      	ldr	r3, [pc, #120]	@ (8003318 <MX_FMC_Init+0x98>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80032a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003318 <MX_FMC_Init+0x98>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80032aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003318 <MX_FMC_Init+0x98>)
 80032ac:	2204      	movs	r2, #4
 80032ae:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80032b0:	4b19      	ldr	r3, [pc, #100]	@ (8003318 <MX_FMC_Init+0x98>)
 80032b2:	2210      	movs	r2, #16
 80032b4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80032b6:	4b18      	ldr	r3, [pc, #96]	@ (8003318 <MX_FMC_Init+0x98>)
 80032b8:	2240      	movs	r2, #64	@ 0x40
 80032ba:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80032bc:	4b16      	ldr	r3, [pc, #88]	@ (8003318 <MX_FMC_Init+0x98>)
 80032be:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80032c2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80032c4:	4b14      	ldr	r3, [pc, #80]	@ (8003318 <MX_FMC_Init+0x98>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80032ca:	4b13      	ldr	r3, [pc, #76]	@ (8003318 <MX_FMC_Init+0x98>)
 80032cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80032d0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80032d2:	4b11      	ldr	r3, [pc, #68]	@ (8003318 <MX_FMC_Init+0x98>)
 80032d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80032d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80032da:	4b0f      	ldr	r3, [pc, #60]	@ (8003318 <MX_FMC_Init+0x98>)
 80032dc:	2200      	movs	r2, #0
 80032de:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80032e0:	2302      	movs	r3, #2
 80032e2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80032e4:	2307      	movs	r3, #7
 80032e6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80032e8:	2304      	movs	r3, #4
 80032ea:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80032ec:	2307      	movs	r3, #7
 80032ee:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80032f0:	2303      	movs	r3, #3
 80032f2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80032f4:	2302      	movs	r3, #2
 80032f6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80032f8:	2302      	movs	r3, #2
 80032fa:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80032fc:	1d3b      	adds	r3, r7, #4
 80032fe:	4619      	mov	r1, r3
 8003300:	4805      	ldr	r0, [pc, #20]	@ (8003318 <MX_FMC_Init+0x98>)
 8003302:	f00b f880 	bl	800e406 <HAL_SDRAM_Init>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800330c:	f000 ff0e 	bl	800412c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8003310:	bf00      	nop
 8003312:	3720      	adds	r7, #32
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	200012c8 	.word	0x200012c8
 800331c:	a0000140 	.word	0xa0000140

08003320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b090      	sub	sp, #64	@ 0x40
 8003324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003326:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	605a      	str	r2, [r3, #4]
 8003330:	609a      	str	r2, [r3, #8]
 8003332:	60da      	str	r2, [r3, #12]
 8003334:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003336:	4bb0      	ldr	r3, [pc, #704]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333a:	4aaf      	ldr	r2, [pc, #700]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 800333c:	f043 0310 	orr.w	r3, r3, #16
 8003340:	6313      	str	r3, [r2, #48]	@ 0x30
 8003342:	4bad      	ldr	r3, [pc, #692]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003346:	f003 0310 	and.w	r3, r3, #16
 800334a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800334c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800334e:	4baa      	ldr	r3, [pc, #680]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003352:	4aa9      	ldr	r2, [pc, #676]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 8003354:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003358:	6313      	str	r3, [r2, #48]	@ 0x30
 800335a:	4ba7      	ldr	r3, [pc, #668]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003362:	627b      	str	r3, [r7, #36]	@ 0x24
 8003364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003366:	4ba4      	ldr	r3, [pc, #656]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336a:	4aa3      	ldr	r2, [pc, #652]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 800336c:	f043 0302 	orr.w	r3, r3, #2
 8003370:	6313      	str	r3, [r2, #48]	@ 0x30
 8003372:	4ba1      	ldr	r3, [pc, #644]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	623b      	str	r3, [r7, #32]
 800337c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800337e:	4b9e      	ldr	r3, [pc, #632]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	4a9d      	ldr	r2, [pc, #628]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 8003384:	f043 0308 	orr.w	r3, r3, #8
 8003388:	6313      	str	r3, [r2, #48]	@ 0x30
 800338a:	4b9b      	ldr	r3, [pc, #620]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	61fb      	str	r3, [r7, #28]
 8003394:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003396:	4b98      	ldr	r3, [pc, #608]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339a:	4a97      	ldr	r2, [pc, #604]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 800339c:	f043 0304 	orr.w	r3, r3, #4
 80033a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033a2:	4b95      	ldr	r3, [pc, #596]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	61bb      	str	r3, [r7, #24]
 80033ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ae:	4b92      	ldr	r3, [pc, #584]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b2:	4a91      	ldr	r2, [pc, #580]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ba:	4b8f      	ldr	r3, [pc, #572]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80033c6:	4b8c      	ldr	r3, [pc, #560]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ca:	4a8b      	ldr	r2, [pc, #556]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 80033cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033d2:	4b89      	ldr	r3, [pc, #548]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80033de:	4b86      	ldr	r3, [pc, #536]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e2:	4a85      	ldr	r2, [pc, #532]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 80033e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ea:	4b83      	ldr	r3, [pc, #524]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80033f6:	4b80      	ldr	r3, [pc, #512]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fa:	4a7f      	ldr	r2, [pc, #508]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 80033fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003400:	6313      	str	r3, [r2, #48]	@ 0x30
 8003402:	4b7d      	ldr	r3, [pc, #500]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003406:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800340a:	60bb      	str	r3, [r7, #8]
 800340c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800340e:	4b7a      	ldr	r3, [pc, #488]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003412:	4a79      	ldr	r2, [pc, #484]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 8003414:	f043 0320 	orr.w	r3, r3, #32
 8003418:	6313      	str	r3, [r2, #48]	@ 0x30
 800341a:	4b77      	ldr	r3, [pc, #476]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	607b      	str	r3, [r7, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003426:	4b74      	ldr	r3, [pc, #464]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342a:	4a73      	ldr	r2, [pc, #460]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 800342c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003430:	6313      	str	r3, [r2, #48]	@ 0x30
 8003432:	4b71      	ldr	r3, [pc, #452]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800343e:	2201      	movs	r2, #1
 8003440:	2120      	movs	r1, #32
 8003442:	486e      	ldr	r0, [pc, #440]	@ (80035fc <MX_GPIO_Init+0x2dc>)
 8003444:	f005 fbb8 	bl	8008bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8003448:	2200      	movs	r2, #0
 800344a:	210c      	movs	r1, #12
 800344c:	486c      	ldr	r0, [pc, #432]	@ (8003600 <MX_GPIO_Init+0x2e0>)
 800344e:	f005 fbb3 	bl	8008bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8003452:	2201      	movs	r2, #1
 8003454:	2108      	movs	r1, #8
 8003456:	486b      	ldr	r0, [pc, #428]	@ (8003604 <MX_GPIO_Init+0x2e4>)
 8003458:	f005 fbae 	bl	8008bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800345c:	2201      	movs	r2, #1
 800345e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003462:	4867      	ldr	r0, [pc, #412]	@ (8003600 <MX_GPIO_Init+0x2e0>)
 8003464:	f005 fba8 	bl	8008bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8003468:	2200      	movs	r2, #0
 800346a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800346e:	4866      	ldr	r0, [pc, #408]	@ (8003608 <MX_GPIO_Init+0x2e8>)
 8003470:	f005 fba2 	bl	8008bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8003474:	2200      	movs	r2, #0
 8003476:	21c8      	movs	r1, #200	@ 0xc8
 8003478:	4864      	ldr	r0, [pc, #400]	@ (800360c <MX_GPIO_Init+0x2ec>)
 800347a:	f005 fb9d 	bl	8008bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800347e:	2308      	movs	r3, #8
 8003480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003482:	2300      	movs	r3, #0
 8003484:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003486:	2300      	movs	r3, #0
 8003488:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800348a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800348e:	4619      	mov	r1, r3
 8003490:	485f      	ldr	r0, [pc, #380]	@ (8003610 <MX_GPIO_Init+0x2f0>)
 8003492:	f005 f9cd 	bl	8008830 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8003496:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800349a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349c:	2302      	movs	r3, #2
 800349e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a0:	2300      	movs	r3, #0
 80034a2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a4:	2303      	movs	r3, #3
 80034a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80034a8:	230a      	movs	r3, #10
 80034aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034b0:	4619      	mov	r1, r3
 80034b2:	4858      	ldr	r0, [pc, #352]	@ (8003614 <MX_GPIO_Init+0x2f4>)
 80034b4:	f005 f9bc 	bl	8008830 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80034b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034be:	2300      	movs	r3, #0
 80034c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80034c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034ca:	4619      	mov	r1, r3
 80034cc:	4852      	ldr	r0, [pc, #328]	@ (8003618 <MX_GPIO_Init+0x2f8>)
 80034ce:	f005 f9af 	bl	8008830 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80034d2:	2340      	movs	r3, #64	@ 0x40
 80034d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80034d6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80034da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80034e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034e4:	4619      	mov	r1, r3
 80034e6:	4845      	ldr	r0, [pc, #276]	@ (80035fc <MX_GPIO_Init+0x2dc>)
 80034e8:	f005 f9a2 	bl	8008830 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80034ec:	2320      	movs	r3, #32
 80034ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034f0:	2301      	movs	r3, #1
 80034f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f8:	2300      	movs	r3, #0
 80034fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80034fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003500:	4619      	mov	r1, r3
 8003502:	483e      	ldr	r0, [pc, #248]	@ (80035fc <MX_GPIO_Init+0x2dc>)
 8003504:	f005 f994 	bl	8008830 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8003508:	f241 030c 	movw	r3, #4108	@ 0x100c
 800350c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800350e:	2301      	movs	r3, #1
 8003510:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003512:	2300      	movs	r3, #0
 8003514:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003516:	2300      	movs	r3, #0
 8003518:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800351a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800351e:	4619      	mov	r1, r3
 8003520:	4837      	ldr	r0, [pc, #220]	@ (8003600 <MX_GPIO_Init+0x2e0>)
 8003522:	f005 f985 	bl	8008830 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8003526:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800352a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800352c:	2300      	movs	r3, #0
 800352e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003530:	2300      	movs	r3, #0
 8003532:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8003534:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003538:	4619      	mov	r1, r3
 800353a:	4838      	ldr	r0, [pc, #224]	@ (800361c <MX_GPIO_Init+0x2fc>)
 800353c:	f005 f978 	bl	8008830 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8003540:	2308      	movs	r3, #8
 8003542:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003544:	2301      	movs	r3, #1
 8003546:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003548:	2300      	movs	r3, #0
 800354a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800354c:	2300      	movs	r3, #0
 800354e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8003550:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003554:	4619      	mov	r1, r3
 8003556:	482b      	ldr	r0, [pc, #172]	@ (8003604 <MX_GPIO_Init+0x2e4>)
 8003558:	f005 f96a 	bl	8008830 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800355c:	2310      	movs	r3, #16
 800355e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003560:	2300      	movs	r3, #0
 8003562:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003564:	2300      	movs	r3, #0
 8003566:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003568:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800356c:	4619      	mov	r1, r3
 800356e:	4823      	ldr	r0, [pc, #140]	@ (80035fc <MX_GPIO_Init+0x2dc>)
 8003570:	f005 f95e 	bl	8008830 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8003574:	f248 0304 	movw	r3, #32772	@ 0x8004
 8003578:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800357a:	2300      	movs	r3, #0
 800357c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357e:	2300      	movs	r3, #0
 8003580:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003582:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003586:	4619      	mov	r1, r3
 8003588:	481f      	ldr	r0, [pc, #124]	@ (8003608 <MX_GPIO_Init+0x2e8>)
 800358a:	f005 f951 	bl	8008830 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800358e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003594:	2301      	movs	r3, #1
 8003596:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003598:	2300      	movs	r3, #0
 800359a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800359c:	2300      	movs	r3, #0
 800359e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80035a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035a4:	4619      	mov	r1, r3
 80035a6:	4818      	ldr	r0, [pc, #96]	@ (8003608 <MX_GPIO_Init+0x2e8>)
 80035a8:	f005 f942 	bl	8008830 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80035ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80035b2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80035b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80035bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035c0:	4619      	mov	r1, r3
 80035c2:	480f      	ldr	r0, [pc, #60]	@ (8003600 <MX_GPIO_Init+0x2e0>)
 80035c4:	f005 f934 	bl	8008830 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80035c8:	2310      	movs	r3, #16
 80035ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035cc:	2302      	movs	r3, #2
 80035ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d4:	2303      	movs	r3, #3
 80035d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80035d8:	230a      	movs	r3, #10
 80035da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80035dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035e0:	4619      	mov	r1, r3
 80035e2:	4809      	ldr	r0, [pc, #36]	@ (8003608 <MX_GPIO_Init+0x2e8>)
 80035e4:	f005 f924 	bl	8008830 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80035e8:	23c8      	movs	r3, #200	@ 0xc8
 80035ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ec:	2301      	movs	r3, #1
 80035ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80035f4:	e014      	b.n	8003620 <MX_GPIO_Init+0x300>
 80035f6:	bf00      	nop
 80035f8:	40023800 	.word	0x40023800
 80035fc:	40020c00 	.word	0x40020c00
 8003600:	40022000 	.word	0x40022000
 8003604:	40022800 	.word	0x40022800
 8003608:	40021c00 	.word	0x40021c00
 800360c:	40021800 	.word	0x40021800
 8003610:	40021000 	.word	0x40021000
 8003614:	40020400 	.word	0x40020400
 8003618:	40022400 	.word	0x40022400
 800361c:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003620:	2300      	movs	r3, #0
 8003622:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003624:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003628:	4619      	mov	r1, r3
 800362a:	4819      	ldr	r0, [pc, #100]	@ (8003690 <MX_GPIO_Init+0x370>)
 800362c:	f005 f900 	bl	8008830 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8003630:	2305      	movs	r3, #5
 8003632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003634:	2302      	movs	r3, #2
 8003636:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003638:	2300      	movs	r3, #0
 800363a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800363c:	2303      	movs	r3, #3
 800363e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003640:	230a      	movs	r3, #10
 8003642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003644:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003648:	4619      	mov	r1, r3
 800364a:	4812      	ldr	r0, [pc, #72]	@ (8003694 <MX_GPIO_Init+0x374>)
 800364c:	f005 f8f0 	bl	8008830 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8003650:	2304      	movs	r3, #4
 8003652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003654:	2300      	movs	r3, #0
 8003656:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003658:	2300      	movs	r3, #0
 800365a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800365c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003660:	4619      	mov	r1, r3
 8003662:	480b      	ldr	r0, [pc, #44]	@ (8003690 <MX_GPIO_Init+0x370>)
 8003664:	f005 f8e4 	bl	8008830 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8003668:	2328      	movs	r3, #40	@ 0x28
 800366a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366c:	2302      	movs	r3, #2
 800366e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003670:	2300      	movs	r3, #0
 8003672:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003674:	2303      	movs	r3, #3
 8003676:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003678:	230a      	movs	r3, #10
 800367a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800367c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003680:	4619      	mov	r1, r3
 8003682:	4805      	ldr	r0, [pc, #20]	@ (8003698 <MX_GPIO_Init+0x378>)
 8003684:	f005 f8d4 	bl	8008830 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003688:	bf00      	nop
 800368a:	3740      	adds	r7, #64	@ 0x40
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40021800 	.word	0x40021800
 8003694:	40020800 	.word	0x40020800
 8003698:	40020000 	.word	0x40020000

0800369c <_initialize_sd_card_and_test>:
/**
 * @brief SD 카드 초기화 및 기본 기능 테스트
 * @return SD 초기화 결과 (SDSTORAGE_OK: 성공, 기타: 실패)
 */
static int _initialize_sd_card_and_test(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
    LOG_INFO("📤 [TX_TASK] Starting SD card basic functionality test...");
 80036a2:	4920      	ldr	r1, [pc, #128]	@ (8003724 <_initialize_sd_card_and_test+0x88>)
 80036a4:	2001      	movs	r0, #1
 80036a6:	f002 fb49 	bl	8005d3c <LOGGER_SendFormatted>
    
    // SD 초기화 시도
    LOG_INFO("📤 [TX_TASK] Attempting SD card initialization...");
 80036aa:	491f      	ldr	r1, [pc, #124]	@ (8003728 <_initialize_sd_card_and_test+0x8c>)
 80036ac:	2001      	movs	r0, #1
 80036ae:	f002 fb45 	bl	8005d3c <LOGGER_SendFormatted>
    int sd_result = SDStorage_Init();
 80036b2:	f7fe f86b 	bl	800178c <SDStorage_Init>
 80036b6:	60f8      	str	r0, [r7, #12]
    
    if (sd_result == SDSTORAGE_OK) {
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d124      	bne.n	8003708 <_initialize_sd_card_and_test+0x6c>
        LOG_INFO("✅ [TX_TASK] SD card initialization SUCCESS");
 80036be:	491b      	ldr	r1, [pc, #108]	@ (800372c <_initialize_sd_card_and_test+0x90>)
 80036c0:	2001      	movs	r0, #1
 80036c2:	f002 fb3b 	bl	8005d3c <LOGGER_SendFormatted>
        
        // 기본 쓰기 테스트
        LOG_INFO("📤 [TX_TASK] Testing SD card write operation...");
 80036c6:	491a      	ldr	r1, [pc, #104]	@ (8003730 <_initialize_sd_card_and_test+0x94>)
 80036c8:	2001      	movs	r0, #1
 80036ca:	f002 fb37 	bl	8005d3c <LOGGER_SendFormatted>
        const char* test_message = "SD Card Test - Hello World from FreeRTOS!\n";
 80036ce:	4b19      	ldr	r3, [pc, #100]	@ (8003734 <_initialize_sd_card_and_test+0x98>)
 80036d0:	60bb      	str	r3, [r7, #8]
        int write_result = SDStorage_WriteLog(test_message, strlen(test_message));
 80036d2:	68b8      	ldr	r0, [r7, #8]
 80036d4:	f7fc fda6 	bl	8000224 <strlen>
 80036d8:	4603      	mov	r3, r0
 80036da:	4619      	mov	r1, r3
 80036dc:	68b8      	ldr	r0, [r7, #8]
 80036de:	f7fe f8bb 	bl	8001858 <SDStorage_WriteLog>
 80036e2:	6078      	str	r0, [r7, #4]
        
        if (write_result == SDSTORAGE_OK) {
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d108      	bne.n	80036fc <_initialize_sd_card_and_test+0x60>
            LOG_INFO("✅ [TX_TASK] SD card write operation SUCCESS");
 80036ea:	4913      	ldr	r1, [pc, #76]	@ (8003738 <_initialize_sd_card_and_test+0x9c>)
 80036ec:	2001      	movs	r0, #1
 80036ee:	f002 fb25 	bl	8005d3c <LOGGER_SendFormatted>
            LOG_INFO("🎉 [TX_TASK] SD card functionality confirmed - ready for long-term logging");
 80036f2:	4912      	ldr	r1, [pc, #72]	@ (800373c <_initialize_sd_card_and_test+0xa0>)
 80036f4:	2001      	movs	r0, #1
 80036f6:	f002 fb21 	bl	8005d3c <LOGGER_SendFormatted>
 80036fa:	e00e      	b.n	800371a <_initialize_sd_card_and_test+0x7e>
        } else {
            LOG_ERROR("❌ [TX_TASK] SD card write operation FAILED (code: %d)", write_result);
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	4910      	ldr	r1, [pc, #64]	@ (8003740 <_initialize_sd_card_and_test+0xa4>)
 8003700:	2003      	movs	r0, #3
 8003702:	f002 fb1b 	bl	8005d3c <LOGGER_SendFormatted>
 8003706:	e008      	b.n	800371a <_initialize_sd_card_and_test+0x7e>
        }
    } else {
        LOG_ERROR("❌ [TX_TASK] SD card initialization FAILED (code: %d)", sd_result);
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	490e      	ldr	r1, [pc, #56]	@ (8003744 <_initialize_sd_card_and_test+0xa8>)
 800370c:	2003      	movs	r0, #3
 800370e:	f002 fb15 	bl	8005d3c <LOGGER_SendFormatted>
        LOG_INFO("📺 [TX_TASK] Continuing with terminal-only logging");
 8003712:	490d      	ldr	r1, [pc, #52]	@ (8003748 <_initialize_sd_card_and_test+0xac>)
 8003714:	2001      	movs	r0, #1
 8003716:	f002 fb11 	bl	8005d3c <LOGGER_SendFormatted>
    }
    
    return sd_result;
 800371a:	68fb      	ldr	r3, [r7, #12]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	0801b714 	.word	0x0801b714
 8003728:	0801b750 	.word	0x0801b750
 800372c:	0801b784 	.word	0x0801b784
 8003730:	0801b7b4 	.word	0x0801b7b4
 8003734:	0801b7e8 	.word	0x0801b7e8
 8003738:	0801b814 	.word	0x0801b814
 800373c:	0801b844 	.word	0x0801b844
 8003740:	0801b894 	.word	0x0801b894
 8003744:	0801b8cc 	.word	0x0801b8cc
 8003748:	0801b904 	.word	0x0801b904

0800374c <_setup_lora_uart_connection>:
/**
 * @brief LoRa UART 연결 설정
 * @return UART 연결 결과 (UART_STATUS_OK: 성공, 기타: 실패)
 */
static int _setup_lora_uart_connection(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
    LOG_INFO("📤 [TX_TASK] Connecting to UART for LoRa communication...");
 8003752:	490d      	ldr	r1, [pc, #52]	@ (8003788 <_setup_lora_uart_connection+0x3c>)
 8003754:	2001      	movs	r0, #1
 8003756:	f002 faf1 	bl	8005d3c <LOGGER_SendFormatted>
    UartStatus uart_status = UART_Connect("UART6");
 800375a:	480c      	ldr	r0, [pc, #48]	@ (800378c <_setup_lora_uart_connection+0x40>)
 800375c:	f002 fcae 	bl	80060bc <UART_Connect>
 8003760:	6078      	str	r0, [r7, #4]
    
    if (uart_status == UART_STATUS_OK) {
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d104      	bne.n	8003772 <_setup_lora_uart_connection+0x26>
        LOG_INFO("✅ [TX_TASK] UART connection successful");
 8003768:	4909      	ldr	r1, [pc, #36]	@ (8003790 <_setup_lora_uart_connection+0x44>)
 800376a:	2001      	movs	r0, #1
 800376c:	f002 fae6 	bl	8005d3c <LOGGER_SendFormatted>
 8003770:	e004      	b.n	800377c <_setup_lora_uart_connection+0x30>
    } else {
        LOG_ERROR("❌ [TX_TASK] UART connection failed (status: %d)", uart_status);
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	4907      	ldr	r1, [pc, #28]	@ (8003794 <_setup_lora_uart_connection+0x48>)
 8003776:	2003      	movs	r0, #3
 8003778:	f002 fae0 	bl	8005d3c <LOGGER_SendFormatted>
    }
    
    return uart_status;
 800377c:	687b      	ldr	r3, [r7, #4]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	0801b93c 	.word	0x0801b93c
 800378c:	0801b978 	.word	0x0801b978
 8003790:	0801b980 	.word	0x0801b980
 8003794:	0801b9ac 	.word	0x0801b9ac

08003798 <_initialize_lora_context>:
/**
 * @brief LoRa 컨텍스트 초기화
 * @param lora_ctx LoRa 컨텍스트 포인터
 */
static void _initialize_lora_context(LoraStarterContext* lora_ctx)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af02      	add	r7, sp, #8
 800379e:	6078      	str	r0, [r7, #4]
    LOG_INFO("📤 [TX_TASK] Waiting for LoRa module boot-up (5 seconds - optimized for long-term test)...");
 80037a0:	490f      	ldr	r1, [pc, #60]	@ (80037e0 <_initialize_lora_context+0x48>)
 80037a2:	2001      	movs	r0, #1
 80037a4:	f002 faca 	bl	8005d3c <LOGGER_SendFormatted>
    osDelay(5000); // 5초 대기 (장기 테스트를 위해 단축)
 80037a8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80037ac:	f011 ff56 	bl	801565c <osDelay>
    
    // LoraStarter 컨텍스트 초기화 (TDD 검증된 기본 설정 사용)
    LoraStarter_InitWithDefaults(lora_ctx, "TEST");
 80037b0:	490c      	ldr	r1, [pc, #48]	@ (80037e4 <_initialize_lora_context+0x4c>)
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7fd f808 	bl	80007c8 <LoraStarter_InitWithDefaults>
    
    LOG_INFO("=== LoRa Initialization ===");
 80037b8:	490b      	ldr	r1, [pc, #44]	@ (80037e8 <_initialize_lora_context+0x50>)
 80037ba:	2001      	movs	r0, #1
 80037bc:	f002 fabe 	bl	8005d3c <LOGGER_SendFormatted>
    LOG_INFO("📤 Commands: %d, Message: %s, Max retries: %d", 
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	69d9      	ldr	r1, [r3, #28]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	460b      	mov	r3, r1
 80037d0:	4906      	ldr	r1, [pc, #24]	@ (80037ec <_initialize_lora_context+0x54>)
 80037d2:	2001      	movs	r0, #1
 80037d4:	f002 fab2 	bl	8005d3c <LOGGER_SendFormatted>
             lora_ctx->num_commands, lora_ctx->send_message, lora_ctx->max_retry_count);
}
 80037d8:	bf00      	nop
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	0801b9e0 	.word	0x0801b9e0
 80037e4:	0801ba40 	.word	0x0801ba40
 80037e8:	0801ba48 	.word	0x0801ba48
 80037ec:	0801ba64 	.word	0x0801ba64

080037f0 <_configure_logging_mode>:
/**
 * @brief SD 초기화 결과에 따른 로깅 모드 설정
 * @param sd_result SD 초기화 결과
 */
static void _configure_logging_mode(int sd_result)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
    // SD 카드 로깅 설정 (간단한 방식)
    if (sd_result == SDSTORAGE_OK) {
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d114      	bne.n	8003828 <_configure_logging_mode+0x38>
        LOG_INFO("🗂️ LoRa logs will be saved to SD card: lora_logs/");
 80037fe:	4913      	ldr	r1, [pc, #76]	@ (800384c <_configure_logging_mode+0x5c>)
 8003800:	2001      	movs	r0, #1
 8003802:	f002 fa9b 	bl	8005d3c <LOGGER_SendFormatted>
        
        // LoRa 로깅 모드 설정 - 초기화 단계에서는 터미널만 사용
        LOGGER_SetMode(LOGGER_MODE_DUAL);  // 터미널 + SD 동시 출력
 8003806:	2002      	movs	r0, #2
 8003808:	f002 fa74 	bl	8005cf4 <LOGGER_SetMode>
        LOGGER_SetFilterLevel(LOG_LEVEL_INFO);  // 터미널에서 모든 로그 확인 가능
 800380c:	2001      	movs	r0, #1
 800380e:	f002 fa35 	bl	8005c7c <LOGGER_SetFilterLevel>
        LOGGER_SetSDFilterLevel(LOG_LEVEL_WARN);  // SD 카드에는 WARN 이상만 저장
 8003812:	2002      	movs	r0, #2
 8003814:	f002 fa42 	bl	8005c9c <LOGGER_SetSDFilterLevel>
        LOGGER_EnableSDLogging(false);  // 초기화 완료 전까지 SD 로깅 비활성화
 8003818:	2000      	movs	r0, #0
 800381a:	f002 fa4f 	bl	8005cbc <LOGGER_EnableSDLogging>
        LOG_WARN("✅ LoRa logging mode: DUAL (Terminal + SD), SD logging will start from JOIN attempts");
 800381e:	490c      	ldr	r1, [pc, #48]	@ (8003850 <_configure_logging_mode+0x60>)
 8003820:	2002      	movs	r0, #2
 8003822:	f002 fa8b 	bl	8005d3c <LOGGER_SendFormatted>
        
        LOGGER_SetMode(LOGGER_MODE_TERMINAL_ONLY);
        LOGGER_SetFilterLevel(LOG_LEVEL_INFO);
        LOG_INFO("📺 LoRa logging mode: Terminal only");
    }
}
 8003826:	e00d      	b.n	8003844 <_configure_logging_mode+0x54>
        LOG_INFO("📺 LoRa logs will be displayed on terminal only (SD not available)");
 8003828:	490a      	ldr	r1, [pc, #40]	@ (8003854 <_configure_logging_mode+0x64>)
 800382a:	2001      	movs	r0, #1
 800382c:	f002 fa86 	bl	8005d3c <LOGGER_SendFormatted>
        LOGGER_SetMode(LOGGER_MODE_TERMINAL_ONLY);
 8003830:	2000      	movs	r0, #0
 8003832:	f002 fa5f 	bl	8005cf4 <LOGGER_SetMode>
        LOGGER_SetFilterLevel(LOG_LEVEL_INFO);
 8003836:	2001      	movs	r0, #1
 8003838:	f002 fa20 	bl	8005c7c <LOGGER_SetFilterLevel>
        LOG_INFO("📺 LoRa logging mode: Terminal only");
 800383c:	4906      	ldr	r1, [pc, #24]	@ (8003858 <_configure_logging_mode+0x68>)
 800383e:	2001      	movs	r0, #1
 8003840:	f002 fa7c 	bl	8005d3c <LOGGER_SendFormatted>
}
 8003844:	bf00      	nop
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	0801ba94 	.word	0x0801ba94
 8003850:	0801bacc 	.word	0x0801bacc
 8003854:	0801bb24 	.word	0x0801bb24
 8003858:	0801bb6c 	.word	0x0801bb6c

0800385c <_run_lora_process_loop>:
/**
 * @brief LoRa 프로세스 메인 루프 실행
 * @param lora_ctx LoRa 컨텍스트 포인터
 */
static void _run_lora_process_loop(LoraStarterContext* lora_ctx)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af02      	add	r7, sp, #8
 8003862:	6078      	str	r0, [r7, #4]
    LOG_INFO("📤 [TX_TASK] Starting LoRa process loop...");
 8003864:	497c      	ldr	r1, [pc, #496]	@ (8003a58 <_run_lora_process_loop+0x1fc>)
 8003866:	2001      	movs	r0, #1
 8003868:	f002 fa68 	bl	8005d3c <LOGGER_SendFormatted>
    
    for(;;)
    {
        // 수신된 응답이 있으면 LoraStarter에 전달
        const char* rx_data = NULL;
 800386c:	2300      	movs	r3, #0
 800386e:	60fb      	str	r3, [r7, #12]
        if (lora_new_response) {
 8003870:	4b7a      	ldr	r3, [pc, #488]	@ (8003a5c <_run_lora_process_loop+0x200>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d004      	beq.n	8003884 <_run_lora_process_loop+0x28>
            rx_data = lora_rx_response;
 800387a:	4b79      	ldr	r3, [pc, #484]	@ (8003a60 <_run_lora_process_loop+0x204>)
 800387c:	60fb      	str	r3, [r7, #12]
            lora_new_response = false; // 플래그 클리어
 800387e:	4b77      	ldr	r3, [pc, #476]	@ (8003a5c <_run_lora_process_loop+0x200>)
 8003880:	2200      	movs	r2, #0
 8003882:	701a      	strb	r2, [r3, #0]
            // 응답 처리 - 로그는 ResponseHandler에서 이미 출력됨
        }
        
        // LoraStarter 프로세스 실행
        LoraStarter_Process(lora_ctx, rx_data);
 8003884:	68f9      	ldr	r1, [r7, #12]
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fc ffe6 	bl	8000858 <LoraStarter_Process>
        
        // JOIN 성공 후 시간 조회는 LoRa 상태 머신에서 자동 처리됨 (TIMEREQ → LTIME)
        
        // 상태별 처리 간격 및 디버깅 (중요한 상태만)
        static int last_state = -1;
        if (lora_ctx->state != last_state) {
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	461a      	mov	r2, r3
 8003892:	4b74      	ldr	r3, [pc, #464]	@ (8003a64 <_run_lora_process_loop+0x208>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d022      	beq.n	80038e0 <_run_lora_process_loop+0x84>
            // JOIN, SEND, ERROR 등 중요한 상태 변경만 로그 출력
            if (lora_ctx->state == LORA_STATE_SEND_JOIN || 
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d00b      	beq.n	80038ba <_run_lora_process_loop+0x5e>
                lora_ctx->state == LORA_STATE_SEND_PERIODIC ||
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	781b      	ldrb	r3, [r3, #0]
            if (lora_ctx->state == LORA_STATE_SEND_JOIN || 
 80038a6:	2b0a      	cmp	r3, #10
 80038a8:	d007      	beq.n	80038ba <_run_lora_process_loop+0x5e>
                lora_ctx->state == LORA_STATE_DONE ||
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	781b      	ldrb	r3, [r3, #0]
                lora_ctx->state == LORA_STATE_SEND_PERIODIC ||
 80038ae:	2b0e      	cmp	r3, #14
 80038b0:	d003      	beq.n	80038ba <_run_lora_process_loop+0x5e>
                lora_ctx->state == LORA_STATE_ERROR) {
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	781b      	ldrb	r3, [r3, #0]
                lora_ctx->state == LORA_STATE_DONE ||
 80038b6:	2b0f      	cmp	r3, #15
 80038b8:	d10d      	bne.n	80038d6 <_run_lora_process_loop+0x7a>
                LOG_INFO("[TX_TASK] ⚙️ LoRa State: %d, cmd_index: %d/%d", 
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	4619      	mov	r1, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	4613      	mov	r3, r2
 80038cc:	460a      	mov	r2, r1
 80038ce:	4966      	ldr	r1, [pc, #408]	@ (8003a68 <_run_lora_process_loop+0x20c>)
 80038d0:	2001      	movs	r0, #1
 80038d2:	f002 fa33 	bl	8005d3c <LOGGER_SendFormatted>
                          lora_ctx->state, lora_ctx->cmd_index, lora_ctx->num_commands);
            }
            last_state = lora_ctx->state;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	461a      	mov	r2, r3
 80038dc:	4b61      	ldr	r3, [pc, #388]	@ (8003a64 <_run_lora_process_loop+0x208>)
 80038de:	601a      	str	r2, [r3, #0]
        }
        
        switch(lora_ctx->state) {
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b0f      	cmp	r3, #15
 80038e6:	f200 80ae 	bhi.w	8003a46 <_run_lora_process_loop+0x1ea>
 80038ea:	a201      	add	r2, pc, #4	@ (adr r2, 80038f0 <_run_lora_process_loop+0x94>)
 80038ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f0:	08003931 	.word	0x08003931
 80038f4:	0800393b 	.word	0x0800393b
 80038f8:	08003957 	.word	0x08003957
 80038fc:	08003961 	.word	0x08003961
 8003900:	08003991 	.word	0x08003991
 8003904:	080039c1 	.word	0x080039c1
 8003908:	08003a05 	.word	0x08003a05
 800390c:	08003a0f 	.word	0x08003a0f
 8003910:	080039cb 	.word	0x080039cb
 8003914:	08003a05 	.word	0x08003a05
 8003918:	080039d5 	.word	0x080039d5
 800391c:	08003a05 	.word	0x08003a05
 8003920:	08003a19 	.word	0x08003a19
 8003924:	08003a23 	.word	0x08003a23
 8003928:	08003a2d 	.word	0x08003a2d
 800392c:	08003a2d 	.word	0x08003a2d
            case LORA_STATE_INIT:
                osDelay(500); // 초기화 상태는 빠르게
 8003930:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003934:	f011 fe92 	bl	801565c <osDelay>
                break;
 8003938:	e08a      	b.n	8003a50 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_SEND_CMD:
                LOG_INFO("[TX_TASK] 📤 Sending command %d/%d", 
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	4949      	ldr	r1, [pc, #292]	@ (8003a6c <_run_lora_process_loop+0x210>)
 8003946:	2001      	movs	r0, #1
 8003948:	f002 f9f8 	bl	8005d3c <LOGGER_SendFormatted>
                        lora_ctx->cmd_index + 1, lora_ctx->num_commands);
                osDelay(1000); // 명령어 전송 후 1초 대기
 800394c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003950:	f011 fe84 	bl	801565c <osDelay>
                break;
 8003954:	e07c      	b.n	8003a50 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_WAIT_OK:
                // OK 응답 대기 중 - 조용히 대기
                osDelay(2000); // OK 응답 대기 중 2초 간격
 8003956:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800395a:	f011 fe7f 	bl	801565c <osDelay>
                break;
 800395e:	e077      	b.n	8003a50 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_SEND_JOIN:
                // JOIN 시도 시작 - SD 로깅 활성화 (영구적)
                if (g_sd_initialization_result == SDSTORAGE_OK && !LOGGER_IsSDLoggingEnabled()) {
 8003960:	4b43      	ldr	r3, [pc, #268]	@ (8003a70 <_run_lora_process_loop+0x214>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10e      	bne.n	8003986 <_run_lora_process_loop+0x12a>
 8003968:	f002 f9b8 	bl	8005cdc <LOGGER_IsSDLoggingEnabled>
 800396c:	4603      	mov	r3, r0
 800396e:	f083 0301 	eor.w	r3, r3, #1
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d006      	beq.n	8003986 <_run_lora_process_loop+0x12a>
                    LOGGER_EnableSDLogging(true);
 8003978:	2001      	movs	r0, #1
 800397a:	f002 f99f 	bl	8005cbc <LOGGER_EnableSDLogging>
                    LOG_WARN("🗂️ SD logging enabled from JOIN attempts (WARN+ levels only)");
 800397e:	493d      	ldr	r1, [pc, #244]	@ (8003a74 <_run_lora_process_loop+0x218>)
 8003980:	2002      	movs	r0, #2
 8003982:	f002 f9db 	bl	8005d3c <LOGGER_SendFormatted>
                }
                osDelay(2000); // JOIN 명령어 전송 후 2초 대기
 8003986:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800398a:	f011 fe67 	bl	801565c <osDelay>
                break;
 800398e:	e05f      	b.n	8003a50 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_WAIT_JOIN_OK:
                // JOIN 성공 확인 시 SD 로깅 영구 활성화 보장
                if (g_sd_initialization_result == SDSTORAGE_OK && !LOGGER_IsSDLoggingEnabled()) {
 8003990:	4b37      	ldr	r3, [pc, #220]	@ (8003a70 <_run_lora_process_loop+0x214>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10e      	bne.n	80039b6 <_run_lora_process_loop+0x15a>
 8003998:	f002 f9a0 	bl	8005cdc <LOGGER_IsSDLoggingEnabled>
 800399c:	4603      	mov	r3, r0
 800399e:	f083 0301 	eor.w	r3, r3, #1
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d006      	beq.n	80039b6 <_run_lora_process_loop+0x15a>
                    LOGGER_EnableSDLogging(true);
 80039a8:	2001      	movs	r0, #1
 80039aa:	f002 f987 	bl	8005cbc <LOGGER_EnableSDLogging>
                    LOG_WARN("🗂️ SD logging permanently enabled after JOIN success");
 80039ae:	4932      	ldr	r1, [pc, #200]	@ (8003a78 <_run_lora_process_loop+0x21c>)
 80039b0:	2002      	movs	r0, #2
 80039b2:	f002 f9c3 	bl	8005d3c <LOGGER_SendFormatted>
                }
                osDelay(3000); // JOIN 응답 대기 중 3초 간격
 80039b6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80039ba:	f011 fe4f 	bl	801565c <osDelay>
                break;
 80039be:	e047      	b.n	8003a50 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_SEND_TIMEREQ:
                osDelay(1000); // TIMEREQ 명령어 전송 후 1초 대기
 80039c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80039c4:	f011 fe4a 	bl	801565c <osDelay>
                break;
 80039c8:	e042      	b.n	8003a50 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_SEND_LTIME:
                osDelay(1000); // LTIME 명령어 전송 후 1초 대기
 80039ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80039ce:	f011 fe45 	bl	801565c <osDelay>
                break;
 80039d2:	e03d      	b.n	8003a50 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_SEND_PERIODIC:
                // 주기적 SEND 시 SD 로깅 상태 확인 및 활성화
                if (g_sd_initialization_result == SDSTORAGE_OK && !LOGGER_IsSDLoggingEnabled()) {
 80039d4:	4b26      	ldr	r3, [pc, #152]	@ (8003a70 <_run_lora_process_loop+0x214>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10e      	bne.n	80039fa <_run_lora_process_loop+0x19e>
 80039dc:	f002 f97e 	bl	8005cdc <LOGGER_IsSDLoggingEnabled>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f083 0301 	eor.w	r3, r3, #1
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d006      	beq.n	80039fa <_run_lora_process_loop+0x19e>
                    LOGGER_EnableSDLogging(true);
 80039ec:	2001      	movs	r0, #1
 80039ee:	f002 f965 	bl	8005cbc <LOGGER_EnableSDLogging>
                    LOG_WARN("🗂️ SD logging re-enabled for periodic SEND");
 80039f2:	4922      	ldr	r1, [pc, #136]	@ (8003a7c <_run_lora_process_loop+0x220>)
 80039f4:	2002      	movs	r0, #2
 80039f6:	f002 f9a1 	bl	8005d3c <LOGGER_SendFormatted>
                }
                osDelay(2000); // SEND 명령어 전송 후 2초 대기
 80039fa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80039fe:	f011 fe2d 	bl	801565c <osDelay>
                break;
 8003a02:	e025      	b.n	8003a50 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_WAIT_TIMEREQ_OK:
            case LORA_STATE_WAIT_LTIME_RESPONSE:
            case LORA_STATE_WAIT_SEND_RESPONSE:
                osDelay(3000); // 응답 대기 중 3초 간격
 8003a04:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003a08:	f011 fe28 	bl	801565c <osDelay>
                break;
 8003a0c:	e020      	b.n	8003a50 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_WAIT_TIME_SYNC:
                osDelay(1000); // 시간 동기화 대기 중 1초 간격으로 체크
 8003a0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003a12:	f011 fe23 	bl	801565c <osDelay>
                break;
 8003a16:	e01b      	b.n	8003a50 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_WAIT_SEND_INTERVAL:
                // 주기적 전송 대기 중 - 로그 출력 없이 조용히 대기
                osDelay(5000); // 주기적 전송 대기 중 5초 간격으로 체크
 8003a18:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003a1c:	f011 fe1e 	bl	801565c <osDelay>
                break;
 8003a20:	e016      	b.n	8003a50 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_JOIN_RETRY:
                osDelay(5000); // 재시도 대기 5초
 8003a22:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003a26:	f011 fe19 	bl	801565c <osDelay>
                break;
 8003a2a:	e011      	b.n	8003a50 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_DONE:
            case LORA_STATE_ERROR:
                LOG_INFO("📤 [TX_TASK] LoRa process completed with state: %s", 
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b0e      	cmp	r3, #14
 8003a32:	d101      	bne.n	8003a38 <_run_lora_process_loop+0x1dc>
 8003a34:	4b12      	ldr	r3, [pc, #72]	@ (8003a80 <_run_lora_process_loop+0x224>)
 8003a36:	e000      	b.n	8003a3a <_run_lora_process_loop+0x1de>
 8003a38:	4b12      	ldr	r3, [pc, #72]	@ (8003a84 <_run_lora_process_loop+0x228>)
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	4912      	ldr	r1, [pc, #72]	@ (8003a88 <_run_lora_process_loop+0x22c>)
 8003a3e:	2001      	movs	r0, #1
 8003a40:	f002 f97c 	bl	8005d3c <LOGGER_SendFormatted>
                        lora_ctx->state == LORA_STATE_DONE ? "DONE" : "ERROR");
                return; // 루프 종료하고 idle로 이동
 8003a44:	e005      	b.n	8003a52 <_run_lora_process_loop+0x1f6>
            default:
                osDelay(1000);
 8003a46:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003a4a:	f011 fe07 	bl	801565c <osDelay>
                break;
 8003a4e:	bf00      	nop
    {
 8003a50:	e70c      	b.n	800386c <_run_lora_process_loop+0x10>
        }
    }
}
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	0801bb94 	.word	0x0801bb94
 8003a5c:	20001514 	.word	0x20001514
 8003a60:	20001314 	.word	0x20001314
 8003a64:	2000001c 	.word	0x2000001c
 8003a68:	0801bbc4 	.word	0x0801bbc4
 8003a6c:	0801bbf8 	.word	0x0801bbf8
 8003a70:	20000018 	.word	0x20000018
 8003a74:	0801bc20 	.word	0x0801bc20
 8003a78:	0801bc64 	.word	0x0801bc64
 8003a7c:	0801bca0 	.word	0x0801bca0
 8003a80:	0801bcd0 	.word	0x0801bcd0
 8003a84:	0801bcd8 	.word	0x0801bcd8
 8003a88:	0801bce0 	.word	0x0801bce0

08003a8c <_enter_idle_loop>:

/**
 * @brief Idle 모드 진입 및 처리
 */
static void _enter_idle_loop(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
    LOG_INFO("📤 [TX_TASK] Entering idle mode...");
 8003a92:	490b      	ldr	r1, [pc, #44]	@ (8003ac0 <_enter_idle_loop+0x34>)
 8003a94:	2001      	movs	r0, #1
 8003a96:	f002 f951 	bl	8005d3c <LOGGER_SendFormatted>
    uint32_t idle_counter = 0;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	607b      	str	r3, [r7, #4]
    
    for(;;)
    {
        // 30초마다 idle 상태 표시
        osDelay(30000);
 8003a9e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8003aa2:	f011 fddb 	bl	801565c <osDelay>
        idle_counter++;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	607b      	str	r3, [r7, #4]
        LOG_INFO("📤 [TX_TASK] Idle mode: %lu minutes elapsed", idle_counter / 2);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	085b      	lsrs	r3, r3, #1
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4904      	ldr	r1, [pc, #16]	@ (8003ac4 <_enter_idle_loop+0x38>)
 8003ab4:	2001      	movs	r0, #1
 8003ab6:	f002 f941 	bl	8005d3c <LOGGER_SendFormatted>
        osDelay(30000);
 8003aba:	bf00      	nop
 8003abc:	e7ef      	b.n	8003a9e <_enter_idle_loop+0x12>
 8003abe:	bf00      	nop
 8003ac0:	0801bd18 	.word	0x0801bd18
 8003ac4:	0801bd40 	.word	0x0801bd40

08003ac8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b090      	sub	sp, #64	@ 0x40
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST - 임시 비활성화 (SD 카드 테스트용) */
  LOG_WARN("USB Host initialization temporarily disabled to avoid RTOS task conflicts");
 8003ad0:	4933      	ldr	r1, [pc, #204]	@ (8003ba0 <StartDefaultTask+0xd8>)
 8003ad2:	2002      	movs	r0, #2
 8003ad4:	f002 f932 	bl	8005d3c <LOGGER_SendFormatted>
  LOG_INFO("This eliminates USBH_Thread vs defaultTask priority conflicts");
 8003ad8:	4932      	ldr	r1, [pc, #200]	@ (8003ba4 <StartDefaultTask+0xdc>)
 8003ada:	2001      	movs	r0, #1
 8003adc:	f002 f92e 	bl	8005d3c <LOGGER_SendFormatted>
  // MX_USB_HOST_Init();  // SD 카드 테스트 완료 후 재활성화 예정
  /* USER CODE BEGIN 5 */
  
  // SD Card 초기화는 이미 main()에서 우선 완료됨
  LOG_INFO("📋 SD card initialization completed in main() - checking status...");
 8003ae0:	4931      	ldr	r1, [pc, #196]	@ (8003ba8 <StartDefaultTask+0xe0>)
 8003ae2:	2001      	movs	r0, #1
 8003ae4:	f002 f92a 	bl	8005d3c <LOGGER_SendFormatted>
  
  LOG_INFO("=== STM32F746G-DISCO UART6 Test Started ===");
 8003ae8:	4930      	ldr	r1, [pc, #192]	@ (8003bac <StartDefaultTask+0xe4>)
 8003aea:	2001      	movs	r0, #1
 8003aec:	f002 f926 	bl	8005d3c <LOGGER_SendFormatted>
  LOG_INFO("System Clock: %lu MHz", SystemCoreClock / 1000000);
 8003af0:	4b2f      	ldr	r3, [pc, #188]	@ (8003bb0 <StartDefaultTask+0xe8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a2f      	ldr	r2, [pc, #188]	@ (8003bb4 <StartDefaultTask+0xec>)
 8003af6:	fba2 2303 	umull	r2, r3, r2, r3
 8003afa:	0c9b      	lsrs	r3, r3, #18
 8003afc:	461a      	mov	r2, r3
 8003afe:	492e      	ldr	r1, [pc, #184]	@ (8003bb8 <StartDefaultTask+0xf0>)
 8003b00:	2001      	movs	r0, #1
 8003b02:	f002 f91b 	bl	8005d3c <LOGGER_SendFormatted>
  
  // 런타임 설정 시스템 초기화
  SystemConfig_InitializeSystem();
 8003b06:	f002 f855 	bl	8005bb4 <SystemConfig_InitializeSystem>
  
  // 런타임 설정에서 값 가져오기
  LOG_INFO("UART6 Configuration: %lu baud, 8N1", GET_UART_BAUDRATE());
 8003b0a:	f002 f842 	bl	8005b92 <SystemConfig_GetUart>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	4929      	ldr	r1, [pc, #164]	@ (8003bbc <StartDefaultTask+0xf4>)
 8003b16:	2001      	movs	r0, #1
 8003b18:	f002 f910 	bl	8005d3c <LOGGER_SendFormatted>
  LOG_INFO("LoRa Send Interval: %lu ms", GET_LORA_SEND_INTERVAL());
 8003b1c:	f002 f832 	bl	8005b84 <SystemConfig_GetLoRa>
 8003b20:	4603      	mov	r3, r0
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	461a      	mov	r2, r3
 8003b26:	4926      	ldr	r1, [pc, #152]	@ (8003bc0 <StartDefaultTask+0xf8>)
 8003b28:	2001      	movs	r0, #1
 8003b2a:	f002 f907 	bl	8005d3c <LOGGER_SendFormatted>
  LOG_INFO("SD Log File Max Size: %lu bytes", GET_SD_LOG_FILE_MAX_SIZE());
 8003b2e:	f002 f838 	bl	8005ba2 <SystemConfig_GetSDCard>
 8003b32:	4603      	mov	r3, r0
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	461a      	mov	r2, r3
 8003b38:	4922      	ldr	r1, [pc, #136]	@ (8003bc4 <StartDefaultTask+0xfc>)
 8003b3a:	2001      	movs	r0, #1
 8003b3c:	f002 f8fe 	bl	8005d3c <LOGGER_SendFormatted>
  LOG_INFO("📌 CRITICAL: For loopback test, connect PC6(TX) to PC7(RX) with a wire!");
 8003b40:	4921      	ldr	r1, [pc, #132]	@ (8003bc8 <StartDefaultTask+0x100>)
 8003b42:	2001      	movs	r0, #1
 8003b44:	f002 f8fa 	bl	8005d3c <LOGGER_SendFormatted>
  LOG_INFO("📌 UART6 Pins: PC6(TX) = Arduino D1, PC7(RX) = Arduino D0");
 8003b48:	4920      	ldr	r1, [pc, #128]	@ (8003bcc <StartDefaultTask+0x104>)
 8003b4a:	2001      	movs	r0, #1
 8003b4c:	f002 f8f6 	bl	8005d3c <LOGGER_SendFormatted>
  
  // 1. SD 카드 초기화 및 기본 기능 테스트
  g_sd_initialization_result = _initialize_sd_card_and_test();
 8003b50:	f7ff fda4 	bl	800369c <_initialize_sd_card_and_test>
 8003b54:	4603      	mov	r3, r0
 8003b56:	4a1e      	ldr	r2, [pc, #120]	@ (8003bd0 <StartDefaultTask+0x108>)
 8003b58:	6013      	str	r3, [r2, #0]
  
  // 2. LoRa UART 연결 설정
  LOG_INFO("📤 [TX_TASK] Starting LoRa initialization and JOIN...");
 8003b5a:	491e      	ldr	r1, [pc, #120]	@ (8003bd4 <StartDefaultTask+0x10c>)
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	f002 f8ed 	bl	8005d3c <LOGGER_SendFormatted>
  int uart_result = _setup_lora_uart_connection();
 8003b62:	f7ff fdf3 	bl	800374c <_setup_lora_uart_connection>
 8003b66:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (uart_result != UART_STATUS_OK) {
 8003b68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <StartDefaultTask+0xae>
    LOG_ERROR("❌ [TX_TASK] UART setup failed, continuing anyway...");
 8003b6e:	491a      	ldr	r1, [pc, #104]	@ (8003bd8 <StartDefaultTask+0x110>)
 8003b70:	2003      	movs	r0, #3
 8003b72:	f002 f8e3 	bl	8005d3c <LOGGER_SendFormatted>
  }
  
  // 3. LoRa 컨텍스트 초기화
  LoraStarterContext lora_ctx;
  _initialize_lora_context(&lora_ctx);
 8003b76:	f107 030c 	add.w	r3, r7, #12
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff fe0c 	bl	8003798 <_initialize_lora_context>
  
  // 4. 로깅 모드 설정
  _configure_logging_mode(g_sd_initialization_result);
 8003b80:	4b13      	ldr	r3, [pc, #76]	@ (8003bd0 <StartDefaultTask+0x108>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff fe33 	bl	80037f0 <_configure_logging_mode>
  
  // 5. LoRa 프로세스 메인 루프 실행
  _run_lora_process_loop(&lora_ctx);
 8003b8a:	f107 030c 	add.w	r3, r7, #12
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff fe64 	bl	800385c <_run_lora_process_loop>
  
  // 6. Idle 모드 진입
  _enter_idle_loop();
 8003b94:	f7ff ff7a 	bl	8003a8c <_enter_idle_loop>
  
  /* USER CODE END 5 */
}
 8003b98:	bf00      	nop
 8003b9a:	3740      	adds	r7, #64	@ 0x40
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	0801bd70 	.word	0x0801bd70
 8003ba4:	0801bdbc 	.word	0x0801bdbc
 8003ba8:	0801bdfc 	.word	0x0801bdfc
 8003bac:	0801be44 	.word	0x0801be44
 8003bb0:	20000020 	.word	0x20000020
 8003bb4:	431bde83 	.word	0x431bde83
 8003bb8:	0801be70 	.word	0x0801be70
 8003bbc:	0801be88 	.word	0x0801be88
 8003bc0:	0801beac 	.word	0x0801beac
 8003bc4:	0801bec8 	.word	0x0801bec8
 8003bc8:	0801bee8 	.word	0x0801bee8
 8003bcc:	0801bf34 	.word	0x0801bf34
 8003bd0:	20000018 	.word	0x20000018
 8003bd4:	0801bf70 	.word	0x0801bf70
 8003bd8:	0801bfa8 	.word	0x0801bfa8

08003bdc <StartSDLoggingTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSDLoggingTask */
void StartSDLoggingTask(void const * argument)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b0b4      	sub	sp, #208	@ 0xd0
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSDLoggingTask */
  LOG_INFO("=== SD Logging Task Started ===");
 8003be4:	4982      	ldr	r1, [pc, #520]	@ (8003df0 <StartSDLoggingTask+0x214>)
 8003be6:	2001      	movs	r0, #1
 8003be8:	f002 f8a8 	bl	8005d3c <LOGGER_SendFormatted>
  
  // 시스템 안정화 대기 (다른 태스크들 먼저 시작)
  osDelay(3000);
 8003bec:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003bf0:	f011 fd34 	bl	801565c <osDelay>
  
  // SD 초기화 시도 (이미 정상이면 스킵)
  bool sd_init_needed = !SDStorage_IsReady();
 8003bf4:	f7fd ff18 	bl	8001a28 <SDStorage_IsReady>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	bf14      	ite	ne
 8003bfe:	2301      	movne	r3, #1
 8003c00:	2300      	moveq	r3, #0
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	f083 0301 	eor.w	r3, r3, #1
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 8003c0e:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
  int init_result = SDSTORAGE_OK; // 기본값: 성공
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  
  if (sd_init_needed) {
 8003c20:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d069      	beq.n	8003cfc <StartSDLoggingTask+0x120>
    LOG_INFO("[SD_TASK] 🔄 Attempting SD card initialization...");
 8003c28:	4972      	ldr	r1, [pc, #456]	@ (8003df4 <StartSDLoggingTask+0x218>)
 8003c2a:	2001      	movs	r0, #1
 8003c2c:	f002 f886 	bl	8005d3c <LOGGER_SendFormatted>
    
    // 단계별 안전한 SD 초기화
    int init_attempts = 0;
 8003c30:	2300      	movs	r3, #0
 8003c32:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    const int MAX_INIT_ATTEMPTS = 3;
 8003c36:	2303      	movs	r3, #3
 8003c38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    
    for (init_attempts = 0; init_attempts < MAX_INIT_ATTEMPTS; init_attempts++) {
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c42:	e054      	b.n	8003cee <StartSDLoggingTask+0x112>
    LOG_INFO("[SD_TASK] Initialization attempt %d/%d", init_attempts + 1, MAX_INIT_ATTEMPTS);
 8003c44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c48:	1c5a      	adds	r2, r3, #1
 8003c4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003c4e:	496a      	ldr	r1, [pc, #424]	@ (8003df8 <StartSDLoggingTask+0x21c>)
 8003c50:	2001      	movs	r0, #1
 8003c52:	f002 f873 	bl	8005d3c <LOGGER_SendFormatted>
    
    // SDStorage_Init을 타임아웃과 함께 호출
    uint32_t init_start_time = HAL_GetTick();
 8003c56:	f002 ff27 	bl	8006aa8 <HAL_GetTick>
 8003c5a:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
    const uint32_t INIT_TIMEOUT_MS = 10000;  // 10초 타임아웃
 8003c5e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8003c62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    
    // TODO: 실제로는 별도 태스크에서 SDStorage_Init 호출하고 여기서는 폴링
    // 현재는 간단히 직접 호출하되 타임아웃 체크
    init_result = SDStorage_Init();
 8003c66:	f7fd fd91 	bl	800178c <SDStorage_Init>
 8003c6a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
    uint32_t init_duration = HAL_GetTick() - init_start_time;
 8003c6e:	f002 ff1b 	bl	8006aa8 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    
    LOG_INFO("[SD_TASK] Init attempt %d took %lu ms, result: %d", 
 8003c7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c8e:	495b      	ldr	r1, [pc, #364]	@ (8003dfc <StartSDLoggingTask+0x220>)
 8003c90:	2001      	movs	r0, #1
 8003c92:	f002 f853 	bl	8005d3c <LOGGER_SendFormatted>
             init_attempts + 1, init_duration, init_result);
    
    if (init_result == SDSTORAGE_OK) {
 8003c96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10a      	bne.n	8003cb4 <StartSDLoggingTask+0xd8>
      LOG_INFO("[SD_TASK] ✅ SD initialization successful!");
 8003c9e:	4958      	ldr	r1, [pc, #352]	@ (8003e00 <StartSDLoggingTask+0x224>)
 8003ca0:	2001      	movs	r0, #1
 8003ca2:	f002 f84b 	bl	8005d3c <LOGGER_SendFormatted>
      g_sd_initialization_result = SDSTORAGE_OK;
 8003ca6:	4b57      	ldr	r3, [pc, #348]	@ (8003e04 <StartSDLoggingTask+0x228>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]
      g_sd_logging_active = true;
 8003cac:	4b56      	ldr	r3, [pc, #344]	@ (8003e08 <StartSDLoggingTask+0x22c>)
 8003cae:	2201      	movs	r2, #1
 8003cb0:	701a      	strb	r2, [r3, #0]
      break;
 8003cb2:	e02d      	b.n	8003d10 <StartSDLoggingTask+0x134>
    } else {
      LOG_WARN("[SD_TASK] ⚠️ SD init attempt %d failed (code: %d)", 
 8003cb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003cbe:	4953      	ldr	r1, [pc, #332]	@ (8003e0c <StartSDLoggingTask+0x230>)
 8003cc0:	2002      	movs	r0, #2
 8003cc2:	f002 f83b 	bl	8005d3c <LOGGER_SendFormatted>
               init_attempts + 1, init_result);
      
      if (init_attempts < MAX_INIT_ATTEMPTS - 1) {
 8003cc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	da07      	bge.n	8003ce4 <StartSDLoggingTask+0x108>
        LOG_INFO("[SD_TASK] Waiting 5 seconds before retry...");
 8003cd4:	494e      	ldr	r1, [pc, #312]	@ (8003e10 <StartSDLoggingTask+0x234>)
 8003cd6:	2001      	movs	r0, #1
 8003cd8:	f002 f830 	bl	8005d3c <LOGGER_SendFormatted>
        osDelay(5000);
 8003cdc:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003ce0:	f011 fcbc 	bl	801565c <osDelay>
    for (init_attempts = 0; init_attempts < MAX_INIT_ATTEMPTS; init_attempts++) {
 8003ce4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ce8:	3301      	adds	r3, #1
 8003cea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cee:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003cf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	dba4      	blt.n	8003c44 <StartSDLoggingTask+0x68>
 8003cfa:	e009      	b.n	8003d10 <StartSDLoggingTask+0x134>
      }
    }
    } // for loop 종료
  } else {
    // 이미 SD가 준비된 경우
    LOG_INFO("[SD_TASK] 📝 SD card already ready, skipping initialization");
 8003cfc:	4945      	ldr	r1, [pc, #276]	@ (8003e14 <StartSDLoggingTask+0x238>)
 8003cfe:	2001      	movs	r0, #1
 8003d00:	f002 f81c 	bl	8005d3c <LOGGER_SendFormatted>
    g_sd_initialization_result = SDSTORAGE_OK;
 8003d04:	4b3f      	ldr	r3, [pc, #252]	@ (8003e04 <StartSDLoggingTask+0x228>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
    g_sd_logging_active = true;
 8003d0a:	4b3f      	ldr	r3, [pc, #252]	@ (8003e08 <StartSDLoggingTask+0x22c>)
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	701a      	strb	r2, [r3, #0]
  }
  
  // 초기화 결과에 따른 후속 처리
  if (init_result != SDSTORAGE_OK) {
 8003d10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00c      	beq.n	8003d32 <StartSDLoggingTask+0x156>
    LOG_ERROR("[SD_TASK] ❌ All SD initialization attempts failed");
 8003d18:	493f      	ldr	r1, [pc, #252]	@ (8003e18 <StartSDLoggingTask+0x23c>)
 8003d1a:	2003      	movs	r0, #3
 8003d1c:	f002 f80e 	bl	8005d3c <LOGGER_SendFormatted>
    LOG_INFO("[SD_TASK] Continuing with terminal-only logging");
 8003d20:	493e      	ldr	r1, [pc, #248]	@ (8003e1c <StartSDLoggingTask+0x240>)
 8003d22:	2001      	movs	r0, #1
 8003d24:	f002 f80a 	bl	8005d3c <LOGGER_SendFormatted>
    
    // SD 실패해도 태스크는 계속 실행 (나중에 재시도 가능)
    for(;;) {
      osDelay(60000);  // 1분마다 재시도 체크 (향후 확장)
 8003d28:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8003d2c:	f011 fc96 	bl	801565c <osDelay>
 8003d30:	e7fa      	b.n	8003d28 <StartSDLoggingTask+0x14c>
    }
  }
  
  LOG_INFO("[SD_TASK] 🗂️ SD logging queue processing started");
 8003d32:	493b      	ldr	r1, [pc, #236]	@ (8003e20 <StartSDLoggingTask+0x244>)
 8003d34:	2001      	movs	r0, #1
 8003d36:	f002 f801 	bl	8005d3c <LOGGER_SendFormatted>
  
  // SD 로그 큐 처리 메인 루프
  for(;;)
  {
    SDLogEntry_t log_entry;
    osEvent event = osMessageGet(sdLogQueueHandle, 1000);  // 1초 타임아웃
 8003d3a:	4b3a      	ldr	r3, [pc, #232]	@ (8003e24 <StartSDLoggingTask+0x248>)
 8003d3c:	6819      	ldr	r1, [r3, #0]
 8003d3e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003d42:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d46:	4618      	mov	r0, r3
 8003d48:	f011 fd04 	bl	8015754 <osMessageGet>
    
    if (event.status == osEventMessage) {
 8003d4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d50:	2b10      	cmp	r3, #16
 8003d52:	d12d      	bne.n	8003db0 <StartSDLoggingTask+0x1d4>
      // 큐에서 로그 엔트리 수신
      log_entry = *((SDLogEntry_t*)event.value.p);
 8003d54:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8003d58:	f107 030c 	add.w	r3, r7, #12
 8003d5c:	4611      	mov	r1, r2
 8003d5e:	2288      	movs	r2, #136	@ 0x88
 8003d60:	4618      	mov	r0, r3
 8003d62:	f014 fb68 	bl	8018436 <memcpy>
      
      // SD에 안전하게 쓰기 (타임아웃 포함)
      uint32_t write_start = HAL_GetTick();
 8003d66:	f002 fe9f 	bl	8006aa8 <HAL_GetTick>
 8003d6a:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
      int write_result = SDStorage_WriteLog(log_entry.message, log_entry.length);
 8003d6e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003d72:	f107 030c 	add.w	r3, r7, #12
 8003d76:	4611      	mov	r1, r2
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7fd fd6d 	bl	8001858 <SDStorage_WriteLog>
 8003d7e:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
      uint32_t write_duration = HAL_GetTick() - write_start;
 8003d82:	f002 fe91 	bl	8006aa8 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      
      if (write_result != SDSTORAGE_OK) {
 8003d92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <StartSDLoggingTask+0x1d4>
        // SD 쓰기 실패 - 터미널에만 에러 출력 (무한루프 방지)
        printf("[SD_TASK] Write failed (duration: %lu ms, result: %d)\n", 
 8003d9a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003d9e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8003da2:	4821      	ldr	r0, [pc, #132]	@ (8003e28 <StartSDLoggingTask+0x24c>)
 8003da4:	f014 f96e 	bl	8018084 <iprintf>
               write_duration, write_result);
        
        // SD 쓰기 실패 시 잠시 대기 후 재시도 여부 결정
        osDelay(1000);
 8003da8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003dac:	f011 fc56 	bl	801565c <osDelay>
      }
    }
    
    // 주기적으로 SD 상태 체크 (1분마다)
    static uint32_t status_check_counter = 0;
    status_check_counter++;
 8003db0:	4b1e      	ldr	r3, [pc, #120]	@ (8003e2c <StartSDLoggingTask+0x250>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3301      	adds	r3, #1
 8003db6:	4a1d      	ldr	r2, [pc, #116]	@ (8003e2c <StartSDLoggingTask+0x250>)
 8003db8:	6013      	str	r3, [r2, #0]
    if (status_check_counter % 60 == 0) {  // 60초마다
 8003dba:	4b1c      	ldr	r3, [pc, #112]	@ (8003e2c <StartSDLoggingTask+0x250>)
 8003dbc:	6819      	ldr	r1, [r3, #0]
 8003dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8003e30 <StartSDLoggingTask+0x254>)
 8003dc0:	fba3 2301 	umull	r2, r3, r3, r1
 8003dc4:	095a      	lsrs	r2, r3, #5
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	1a9b      	subs	r3, r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	1aca      	subs	r2, r1, r3
 8003dd0:	2a00      	cmp	r2, #0
 8003dd2:	d108      	bne.n	8003de6 <StartSDLoggingTask+0x20a>
      if (SDStorage_IsReady()) {
 8003dd4:	f7fd fe28 	bl	8001a28 <SDStorage_IsReady>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d103      	bne.n	8003de6 <StartSDLoggingTask+0x20a>
        // SD 상태 정상
      } else {
        // SD 상태 이상 - 재초기화 시도 (향후 확장)
        LOG_WARN("[SD_TASK] SD card appears disconnected - monitoring");
 8003dde:	4915      	ldr	r1, [pc, #84]	@ (8003e34 <StartSDLoggingTask+0x258>)
 8003de0:	2002      	movs	r0, #2
 8003de2:	f001 ffab 	bl	8005d3c <LOGGER_SendFormatted>
      }
    }
    
    osDelay(50);  // CPU 부하 방지
 8003de6:	2032      	movs	r0, #50	@ 0x32
 8003de8:	f011 fc38 	bl	801565c <osDelay>
  {
 8003dec:	e7a5      	b.n	8003d3a <StartSDLoggingTask+0x15e>
 8003dee:	bf00      	nop
 8003df0:	0801bfe0 	.word	0x0801bfe0
 8003df4:	0801c000 	.word	0x0801c000
 8003df8:	0801c034 	.word	0x0801c034
 8003dfc:	0801c05c 	.word	0x0801c05c
 8003e00:	0801c090 	.word	0x0801c090
 8003e04:	20000018 	.word	0x20000018
 8003e08:	2000130c 	.word	0x2000130c
 8003e0c:	0801c0bc 	.word	0x0801c0bc
 8003e10:	0801c0f4 	.word	0x0801c0f4
 8003e14:	0801c120 	.word	0x0801c120
 8003e18:	0801c160 	.word	0x0801c160
 8003e1c:	0801c194 	.word	0x0801c194
 8003e20:	0801c1c4 	.word	0x0801c1c4
 8003e24:	20001308 	.word	0x20001308
 8003e28:	0801c1fc 	.word	0x0801c1fc
 8003e2c:	20001588 	.word	0x20001588
 8003e30:	88888889 	.word	0x88888889
 8003e34:	0801c234 	.word	0x0801c234

08003e38 <StartReceiveTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void const * argument)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8003e3e:	af02      	add	r7, sp, #8
 8003e40:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e44:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003e48:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartReceiveTask */
  LOG_INFO("=== DMA-based Receive Task Started ===");
 8003e4a:	499b      	ldr	r1, [pc, #620]	@ (80040b8 <StartReceiveTask+0x280>)
 8003e4c:	2001      	movs	r0, #1
 8003e4e:	f001 ff75 	bl	8005d3c <LOGGER_SendFormatted>
  
  // UART 초기화 대기
  osDelay(2000);
 8003e52:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003e56:	f011 fc01 	bl	801565c <osDelay>
  
  // TDD 모듈들을 사용한 DMA 기반 수신 태스크
  char local_buffer[512];
  int local_bytes_received = 0;
 8003e5a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e5e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
  
  for(;;)
  {
    // TDD UART 모듈을 통한 DMA 기반 수신 체크
    UartStatus status = UART_Receive(local_buffer, sizeof(local_buffer), &local_bytes_received);
 8003e66:	f107 0208 	add.w	r2, r7, #8
 8003e6a:	f107 030c 	add.w	r3, r7, #12
 8003e6e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003e72:	4618      	mov	r0, r3
 8003e74:	f002 f9a0 	bl	80061b8 <UART_Receive>
 8003e78:	f8c7 0210 	str.w	r0, [r7, #528]	@ 0x210
    
    // 디버깅용: 수신 상태 체크 (에러 상태일 때만)
    static uint32_t debug_counter = 0;
    debug_counter++;
 8003e7c:	4b8f      	ldr	r3, [pc, #572]	@ (80040bc <StartReceiveTask+0x284>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3301      	adds	r3, #1
 8003e82:	4a8e      	ldr	r2, [pc, #568]	@ (80040bc <StartReceiveTask+0x284>)
 8003e84:	6013      	str	r3, [r2, #0]
    if (debug_counter % 1200 == 0 && status != UART_STATUS_TIMEOUT) {  // 1분마다, 타임아웃 제외
 8003e86:	4b8d      	ldr	r3, [pc, #564]	@ (80040bc <StartReceiveTask+0x284>)
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	4b8d      	ldr	r3, [pc, #564]	@ (80040c0 <StartReceiveTask+0x288>)
 8003e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e90:	09db      	lsrs	r3, r3, #7
 8003e92:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8003e96:	fb01 f303 	mul.w	r3, r1, r3
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d116      	bne.n	8003ece <StartReceiveTask+0x96>
 8003ea0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003ea4:	f113 0f05 	cmn.w	r3, #5
 8003ea8:	d011      	beq.n	8003ece <StartReceiveTask+0x96>
      LOG_DEBUG("[RX_TASK] Status check #%lu: status=%d, bytes=%d", 
 8003eaa:	4b84      	ldr	r3, [pc, #528]	@ (80040bc <StartReceiveTask+0x284>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a84      	ldr	r2, [pc, #528]	@ (80040c0 <StartReceiveTask+0x288>)
 8003eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb4:	09da      	lsrs	r2, r3, #7
 8003eb6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003eba:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003ec6:	497f      	ldr	r1, [pc, #508]	@ (80040c4 <StartReceiveTask+0x28c>)
 8003ec8:	2000      	movs	r0, #0
 8003eca:	f001 ff37 	bl	8005d3c <LOGGER_SendFormatted>
               debug_counter / 1200, status, local_bytes_received);
    }
    
    if (status == UART_STATUS_OK && local_bytes_received > 0) {
 8003ece:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f040 80eb 	bne.w	80040ae <StartReceiveTask+0x276>
 8003ed8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003edc:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f340 80e3 	ble.w	80040ae <StartReceiveTask+0x276>
      // 수신 완료 - 간단한 수신 로그 + ResponseHandler 분석
      LOG_INFO("📥 RECV: '%.30s%s' (%d bytes)", 
 8003ee8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003eec:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b1e      	cmp	r3, #30
 8003ef4:	dd01      	ble.n	8003efa <StartReceiveTask+0xc2>
 8003ef6:	4974      	ldr	r1, [pc, #464]	@ (80040c8 <StartReceiveTask+0x290>)
 8003ef8:	e000      	b.n	8003efc <StartReceiveTask+0xc4>
 8003efa:	4974      	ldr	r1, [pc, #464]	@ (80040cc <StartReceiveTask+0x294>)
 8003efc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f00:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f107 020c 	add.w	r2, r7, #12
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	4970      	ldr	r1, [pc, #448]	@ (80040d0 <StartReceiveTask+0x298>)
 8003f10:	2001      	movs	r0, #1
 8003f12:	f001 ff13 	bl	8005d3c <LOGGER_SendFormatted>
               local_buffer, 
               (local_bytes_received > 30) ? "..." : "", 
               local_bytes_received);
      
      // 기본적인 응답 타입 체크 (ResponseHandler에서 상세 로그 출력)
      if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 8003f16:	f107 030c 	add.w	r3, r7, #12
 8003f1a:	496e      	ldr	r1, [pc, #440]	@ (80040d4 <StartReceiveTask+0x29c>)
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f014 f9f1 	bl	8018304 <strstr>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d009      	beq.n	8003f3c <StartReceiveTask+0x104>
        LOG_INFO("✅ JOIN CONFIRMED - Network joined successfully");
 8003f28:	496b      	ldr	r1, [pc, #428]	@ (80040d8 <StartReceiveTask+0x2a0>)
 8003f2a:	2001      	movs	r0, #1
 8003f2c:	f001 ff06 	bl	8005d3c <LOGGER_SendFormatted>
        g_join_success_time = HAL_GetTick();  // JOIN 성공 시간 기록
 8003f30:	f002 fdba 	bl	8006aa8 <HAL_GetTick>
 8003f34:	4603      	mov	r3, r0
 8003f36:	4a69      	ldr	r2, [pc, #420]	@ (80040dc <StartReceiveTask+0x2a4>)
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	e01a      	b.n	8003f72 <StartReceiveTask+0x13a>
      } else if (strstr(local_buffer, "RAKwireless") != NULL) {
 8003f3c:	f107 030c 	add.w	r3, r7, #12
 8003f40:	4967      	ldr	r1, [pc, #412]	@ (80040e0 <StartReceiveTask+0x2a8>)
 8003f42:	4618      	mov	r0, r3
 8003f44:	f014 f9de 	bl	8018304 <strstr>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d004      	beq.n	8003f58 <StartReceiveTask+0x120>
        LOG_DEBUG("📡 LoRa module boot message (ignored)");
 8003f4e:	4965      	ldr	r1, [pc, #404]	@ (80040e4 <StartReceiveTask+0x2ac>)
 8003f50:	2000      	movs	r0, #0
 8003f52:	f001 fef3 	bl	8005d3c <LOGGER_SendFormatted>
 8003f56:	e00c      	b.n	8003f72 <StartReceiveTask+0x13a>
      } else if (ResponseHandler_IsTimeResponse(local_buffer)) {
 8003f58:	f107 030c 	add.w	r3, r7, #12
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fd f981 	bl	8001264 <ResponseHandler_IsTimeResponse>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d004      	beq.n	8003f72 <StartReceiveTask+0x13a>
        // 시간 응답 처리
        ResponseHandler_ParseTimeResponse(local_buffer);
 8003f68:	f107 030c 	add.w	r3, r7, #12
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fd fa29 	bl	80013c4 <ResponseHandler_ParseTimeResponse>
      }
      // 나머지 응답 분석은 아래 필터링 로직에서 한 번만 처리
      
      // 전역 변수에 복사 (다른 태스크에서 사용 가능)
      memcpy(rx_buffer, local_buffer, local_bytes_received);
 8003f72:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f76:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	f107 030c 	add.w	r3, r7, #12
 8003f82:	4619      	mov	r1, r3
 8003f84:	4858      	ldr	r0, [pc, #352]	@ (80040e8 <StartReceiveTask+0x2b0>)
 8003f86:	f014 fa56 	bl	8018436 <memcpy>
      rx_bytes_received = local_bytes_received;
 8003f8a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f8e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a55      	ldr	r2, [pc, #340]	@ (80040ec <StartReceiveTask+0x2b4>)
 8003f96:	6013      	str	r3, [r2, #0]
      
      // LoRa 상태 머신에 전달할 응답만 필터링
      bool is_lora_command_response = false;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
      
      if (is_response_ok(local_buffer)) {
 8003f9e:	f107 030c 	add.w	r3, r7, #12
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fd f81a 	bl	8000fdc <is_response_ok>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <StartReceiveTask+0x17e>
        // OK 응답 - LoRa 명령에 대한 응답
        is_lora_command_response = true;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8003fb4:	e04b      	b.n	800404e <StartReceiveTask+0x216>
      } else if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 8003fb6:	f107 030c 	add.w	r3, r7, #12
 8003fba:	4946      	ldr	r1, [pc, #280]	@ (80040d4 <StartReceiveTask+0x29c>)
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f014 f9a1 	bl	8018304 <strstr>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <StartReceiveTask+0x198>
        // JOIN 성공 응답
        is_lora_command_response = true;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8003fce:	e03e      	b.n	800404e <StartReceiveTask+0x216>
      } else if (ResponseHandler_IsTimeResponse(local_buffer)) {
 8003fd0:	f107 030c 	add.w	r3, r7, #12
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fd f945 	bl	8001264 <ResponseHandler_IsTimeResponse>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <StartReceiveTask+0x1b0>
        // 시간 응답 - LoRa 상태 머신에도 전달해야 함 (상태 전환을 위해)
        is_lora_command_response = true;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8003fe6:	e032      	b.n	800404e <StartReceiveTask+0x216>
      } else if (strstr(local_buffer, "+EVT:") != NULL) {
 8003fe8:	f107 030c 	add.w	r3, r7, #12
 8003fec:	4940      	ldr	r1, [pc, #256]	@ (80040f0 <StartReceiveTask+0x2b8>)
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f014 f988 	bl	8018304 <strstr>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <StartReceiveTask+0x1ca>
        // 기타 LoRa 이벤트 응답들
        is_lora_command_response = true;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8004000:	e025      	b.n	800404e <StartReceiveTask+0x216>
      } else if (strstr(local_buffer, "RAKwireless") != NULL || strstr(local_buffer, "ORAKwireless") != NULL) {
 8004002:	f107 030c 	add.w	r3, r7, #12
 8004006:	4936      	ldr	r1, [pc, #216]	@ (80040e0 <StartReceiveTask+0x2a8>)
 8004008:	4618      	mov	r0, r3
 800400a:	f014 f97b 	bl	8018304 <strstr>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d108      	bne.n	8004026 <StartReceiveTask+0x1ee>
 8004014:	f107 030c 	add.w	r3, r7, #12
 8004018:	4936      	ldr	r1, [pc, #216]	@ (80040f4 <StartReceiveTask+0x2bc>)
 800401a:	4618      	mov	r0, r3
 800401c:	f014 f972 	bl	8018304 <strstr>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d004      	beq.n	8004030 <StartReceiveTask+0x1f8>
        // 부트 메시지 - LoRa 상태 머신에 전달하지 않음
        LOG_DEBUG("[RX_TASK] Boot message filtered out from LoRa state machine");
 8004026:	4934      	ldr	r1, [pc, #208]	@ (80040f8 <StartReceiveTask+0x2c0>)
 8004028:	2000      	movs	r0, #0
 800402a:	f001 fe87 	bl	8005d3c <LOGGER_SendFormatted>
 800402e:	e00e      	b.n	800404e <StartReceiveTask+0x216>
      } else {
        // 기타 응답들 (ERROR, TIMEOUT 등)
        ResponseType response_type = ResponseHandler_ParseSendResponse(local_buffer);
 8004030:	f107 030c 	add.w	r3, r7, #12
 8004034:	4618      	mov	r0, r3
 8004036:	f7fd f8bf 	bl	80011b8 <ResponseHandler_ParseSendResponse>
 800403a:	4603      	mov	r3, r0
 800403c:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
        if (response_type != RESPONSE_UNKNOWN) {
 8004040:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8004044:	2b03      	cmp	r3, #3
 8004046:	d002      	beq.n	800404e <StartReceiveTask+0x216>
          is_lora_command_response = true;
 8004048:	2301      	movs	r3, #1
 800404a:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
        }
      }
      
      // LoRa 명령 응답만 전역 변수에 복사
      if (is_lora_command_response) {
 800404e:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8004052:	2b00      	cmp	r3, #0
 8004054:	d01d      	beq.n	8004092 <StartReceiveTask+0x25a>
        memcpy(lora_rx_response, local_buffer, local_bytes_received);
 8004056:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800405a:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	461a      	mov	r2, r3
 8004062:	f107 030c 	add.w	r3, r7, #12
 8004066:	4619      	mov	r1, r3
 8004068:	4824      	ldr	r0, [pc, #144]	@ (80040fc <StartReceiveTask+0x2c4>)
 800406a:	f014 f9e4 	bl	8018436 <memcpy>
        lora_rx_response[local_bytes_received] = '\0';
 800406e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004072:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a20      	ldr	r2, [pc, #128]	@ (80040fc <StartReceiveTask+0x2c4>)
 800407a:	2100      	movs	r1, #0
 800407c:	54d1      	strb	r1, [r2, r3]
        lora_new_response = true;
 800407e:	4b20      	ldr	r3, [pc, #128]	@ (8004100 <StartReceiveTask+0x2c8>)
 8004080:	2201      	movs	r2, #1
 8004082:	701a      	strb	r2, [r3, #0]
        LOG_DEBUG("[RX_TASK] LoRa response forwarded to state machine: %.20s...", local_buffer);
 8004084:	f107 030c 	add.w	r3, r7, #12
 8004088:	461a      	mov	r2, r3
 800408a:	491e      	ldr	r1, [pc, #120]	@ (8004104 <StartReceiveTask+0x2cc>)
 800408c:	2000      	movs	r0, #0
 800408e:	f001 fe55 	bl	8005d3c <LOGGER_SendFormatted>
      }
      
      // 버퍼 클리어
      memset(local_buffer, 0, sizeof(local_buffer));
 8004092:	f107 030c 	add.w	r3, r7, #12
 8004096:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800409a:	2100      	movs	r1, #0
 800409c:	4618      	mov	r0, r3
 800409e:	f014 f909 	bl	80182b4 <memset>
      local_bytes_received = 0;
 80040a2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80040a6:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
    }
    
    // DMA 기반이므로 긴 지연으로 CPU 사용률 감소
    osDelay(50);  // 50ms 지연 (DMA가 백그라운드에서 처리하므로 빠른 폴링 불필요)
 80040ae:	2032      	movs	r0, #50	@ 0x32
 80040b0:	f011 fad4 	bl	801565c <osDelay>
  {
 80040b4:	e6d7      	b.n	8003e66 <StartReceiveTask+0x2e>
 80040b6:	bf00      	nop
 80040b8:	0801c268 	.word	0x0801c268
 80040bc:	2000158c 	.word	0x2000158c
 80040c0:	1b4e81b5 	.word	0x1b4e81b5
 80040c4:	0801c290 	.word	0x0801c290
 80040c8:	0801c2c4 	.word	0x0801c2c4
 80040cc:	0801c2c8 	.word	0x0801c2c8
 80040d0:	0801c2cc 	.word	0x0801c2cc
 80040d4:	0801c2ec 	.word	0x0801c2ec
 80040d8:	0801c2f8 	.word	0x0801c2f8
 80040dc:	20001578 	.word	0x20001578
 80040e0:	0801c32c 	.word	0x0801c32c
 80040e4:	0801c338 	.word	0x0801c338
 80040e8:	20001720 	.word	0x20001720
 80040ec:	20001310 	.word	0x20001310
 80040f0:	0801c360 	.word	0x0801c360
 80040f4:	0801c368 	.word	0x0801c368
 80040f8:	0801c378 	.word	0x0801c378
 80040fc:	20001314 	.word	0x20001314
 8004100:	20001514 	.word	0x20001514
 8004104:	0801c3b4 	.word	0x0801c3b4

08004108 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a04      	ldr	r2, [pc, #16]	@ (8004128 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d101      	bne.n	800411e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800411a:	f002 fcb1 	bl	8006a80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800411e:	bf00      	nop
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40001000 	.word	0x40001000

0800412c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004130:	b672      	cpsid	i
}
 8004132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004134:	bf00      	nop
 8004136:	e7fd      	b.n	8004134 <Error_Handler+0x8>

08004138 <MX_DMA_Init>:
  * @brief DMA Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA_Init(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800413e:	4b10      	ldr	r3, [pc, #64]	@ (8004180 <MX_DMA_Init+0x48>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004142:	4a0f      	ldr	r2, [pc, #60]	@ (8004180 <MX_DMA_Init+0x48>)
 8004144:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004148:	6313      	str	r3, [r2, #48]	@ 0x30
 800414a:	4b0d      	ldr	r3, [pc, #52]	@ (8004180 <MX_DMA_Init+0x48>)
 800414c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004152:	607b      	str	r3, [r7, #4]
 8004154:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration - USART6_RX */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8004156:	2200      	movs	r2, #0
 8004158:	2105      	movs	r1, #5
 800415a:	2039      	movs	r0, #57	@ 0x39
 800415c:	f003 f824 	bl	80071a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8004160:	2039      	movs	r0, #57	@ 0x39
 8004162:	f003 f83d 	bl	80071e0 <HAL_NVIC_EnableIRQ>
  
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004166:	2200      	movs	r2, #0
 8004168:	2105      	movs	r1, #5
 800416a:	2047      	movs	r0, #71	@ 0x47
 800416c:	f003 f81c 	bl	80071a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004170:	2047      	movs	r0, #71	@ 0x47
 8004172:	f003 f835 	bl	80071e0 <HAL_NVIC_EnableIRQ>
}
 8004176:	bf00      	nop
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40023800 	.word	0x40023800

08004184 <MX_USART6_DMA_Init>:
  * @brief DMA2 Stream1 DMA configuration for USART6 RX
  * @param None
  * @retval None
  */
void MX_USART6_DMA_Init(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
  // DMA 이미 초기화되었는지 체크
  if (hdma_usart6_rx.Instance != NULL) {
 800418a:	4b1e      	ldr	r3, [pc, #120]	@ (8004204 <MX_USART6_DMA_Init+0x80>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d133      	bne.n	80041fa <MX_USART6_DMA_Init+0x76>
    return; // 이미 초기화됨
  }
  
  /* Configure DMA for USART6 RX */
  hdma_usart6_rx.Instance = DMA2_Stream1;
 8004192:	4b1c      	ldr	r3, [pc, #112]	@ (8004204 <MX_USART6_DMA_Init+0x80>)
 8004194:	4a1c      	ldr	r2, [pc, #112]	@ (8004208 <MX_USART6_DMA_Init+0x84>)
 8004196:	601a      	str	r2, [r3, #0]
  hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004198:	4b1a      	ldr	r3, [pc, #104]	@ (8004204 <MX_USART6_DMA_Init+0x80>)
 800419a:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800419e:	605a      	str	r2, [r3, #4]
  hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041a0:	4b18      	ldr	r3, [pc, #96]	@ (8004204 <MX_USART6_DMA_Init+0x80>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	609a      	str	r2, [r3, #8]
  hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041a6:	4b17      	ldr	r3, [pc, #92]	@ (8004204 <MX_USART6_DMA_Init+0x80>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	60da      	str	r2, [r3, #12]
  hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041ac:	4b15      	ldr	r3, [pc, #84]	@ (8004204 <MX_USART6_DMA_Init+0x80>)
 80041ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041b2:	611a      	str	r2, [r3, #16]
  hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041b4:	4b13      	ldr	r3, [pc, #76]	@ (8004204 <MX_USART6_DMA_Init+0x80>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	615a      	str	r2, [r3, #20]
  hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041ba:	4b12      	ldr	r3, [pc, #72]	@ (8004204 <MX_USART6_DMA_Init+0x80>)
 80041bc:	2200      	movs	r2, #0
 80041be:	619a      	str	r2, [r3, #24]
  hdma_usart6_rx.Init.Mode = DMA_NORMAL;    // 일반 모드로 변경
 80041c0:	4b10      	ldr	r3, [pc, #64]	@ (8004204 <MX_USART6_DMA_Init+0x80>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	61da      	str	r2, [r3, #28]
  hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80041c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004204 <MX_USART6_DMA_Init+0x80>)
 80041c8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80041cc:	621a      	str	r2, [r3, #32]
  hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004204 <MX_USART6_DMA_Init+0x80>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	625a      	str	r2, [r3, #36]	@ 0x24
  
  HAL_StatusTypeDef dma_result = HAL_DMA_Init(&hdma_usart6_rx);
 80041d4:	480b      	ldr	r0, [pc, #44]	@ (8004204 <MX_USART6_DMA_Init+0x80>)
 80041d6:	f003 f97d 	bl	80074d4 <HAL_DMA_Init>
 80041da:	4603      	mov	r3, r0
 80041dc:	71fb      	strb	r3, [r7, #7]
  if (dma_result != HAL_OK)
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <MX_USART6_DMA_Init+0x68>
  {
    // 에러 처리하되 Error_Handler() 호출하지 않음 (시스템 중단 방지)
    hdma_usart6_rx.Instance = NULL; // 실패 표시
 80041e4:	4b07      	ldr	r3, [pc, #28]	@ (8004204 <MX_USART6_DMA_Init+0x80>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]
    return;
 80041ea:	e007      	b.n	80041fc <MX_USART6_DMA_Init+0x78>
  }

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 80041ec:	4b07      	ldr	r3, [pc, #28]	@ (800420c <MX_USART6_DMA_Init+0x88>)
 80041ee:	4a05      	ldr	r2, [pc, #20]	@ (8004204 <MX_USART6_DMA_Init+0x80>)
 80041f0:	675a      	str	r2, [r3, #116]	@ 0x74
 80041f2:	4b04      	ldr	r3, [pc, #16]	@ (8004204 <MX_USART6_DMA_Init+0x80>)
 80041f4:	4a05      	ldr	r2, [pc, #20]	@ (800420c <MX_USART6_DMA_Init+0x88>)
 80041f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80041f8:	e000      	b.n	80041fc <MX_USART6_DMA_Init+0x78>
    return; // 이미 초기화됨
 80041fa:	bf00      	nop
}
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20001518 	.word	0x20001518
 8004208:	40026428 	.word	0x40026428
 800420c:	20001240 	.word	0x20001240

08004210 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004216:	4b11      	ldr	r3, [pc, #68]	@ (800425c <HAL_MspInit+0x4c>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421a:	4a10      	ldr	r2, [pc, #64]	@ (800425c <HAL_MspInit+0x4c>)
 800421c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004220:	6413      	str	r3, [r2, #64]	@ 0x40
 8004222:	4b0e      	ldr	r3, [pc, #56]	@ (800425c <HAL_MspInit+0x4c>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800422a:	607b      	str	r3, [r7, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800422e:	4b0b      	ldr	r3, [pc, #44]	@ (800425c <HAL_MspInit+0x4c>)
 8004230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004232:	4a0a      	ldr	r2, [pc, #40]	@ (800425c <HAL_MspInit+0x4c>)
 8004234:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004238:	6453      	str	r3, [r2, #68]	@ 0x44
 800423a:	4b08      	ldr	r3, [pc, #32]	@ (800425c <HAL_MspInit+0x4c>)
 800423c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004246:	2200      	movs	r2, #0
 8004248:	210f      	movs	r1, #15
 800424a:	f06f 0001 	mvn.w	r0, #1
 800424e:	f002 ffab 	bl	80071a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004252:	bf00      	nop
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40023800 	.word	0x40023800

08004260 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08a      	sub	sp, #40	@ 0x28
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004268:	f107 0314 	add.w	r3, r7, #20
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	605a      	str	r2, [r3, #4]
 8004272:	609a      	str	r2, [r3, #8]
 8004274:	60da      	str	r2, [r3, #12]
 8004276:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a21      	ldr	r2, [pc, #132]	@ (8004304 <HAL_ADC_MspInit+0xa4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d13c      	bne.n	80042fc <HAL_ADC_MspInit+0x9c>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004282:	4b21      	ldr	r3, [pc, #132]	@ (8004308 <HAL_ADC_MspInit+0xa8>)
 8004284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004286:	4a20      	ldr	r2, [pc, #128]	@ (8004308 <HAL_ADC_MspInit+0xa8>)
 8004288:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800428c:	6453      	str	r3, [r2, #68]	@ 0x44
 800428e:	4b1e      	ldr	r3, [pc, #120]	@ (8004308 <HAL_ADC_MspInit+0xa8>)
 8004290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004296:	613b      	str	r3, [r7, #16]
 8004298:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800429a:	4b1b      	ldr	r3, [pc, #108]	@ (8004308 <HAL_ADC_MspInit+0xa8>)
 800429c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429e:	4a1a      	ldr	r2, [pc, #104]	@ (8004308 <HAL_ADC_MspInit+0xa8>)
 80042a0:	f043 0320 	orr.w	r3, r3, #32
 80042a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80042a6:	4b18      	ldr	r3, [pc, #96]	@ (8004308 <HAL_ADC_MspInit+0xa8>)
 80042a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042b2:	4b15      	ldr	r3, [pc, #84]	@ (8004308 <HAL_ADC_MspInit+0xa8>)
 80042b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b6:	4a14      	ldr	r2, [pc, #80]	@ (8004308 <HAL_ADC_MspInit+0xa8>)
 80042b8:	f043 0301 	orr.w	r3, r3, #1
 80042bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80042be:	4b12      	ldr	r3, [pc, #72]	@ (8004308 <HAL_ADC_MspInit+0xa8>)
 80042c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	60bb      	str	r3, [r7, #8]
 80042c8:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80042ca:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 80042ce:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042d0:	2303      	movs	r3, #3
 80042d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80042d8:	f107 0314 	add.w	r3, r7, #20
 80042dc:	4619      	mov	r1, r3
 80042de:	480b      	ldr	r0, [pc, #44]	@ (800430c <HAL_ADC_MspInit+0xac>)
 80042e0:	f004 faa6 	bl	8008830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80042e4:	2301      	movs	r3, #1
 80042e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042e8:	2303      	movs	r3, #3
 80042ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ec:	2300      	movs	r3, #0
 80042ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80042f0:	f107 0314 	add.w	r3, r7, #20
 80042f4:	4619      	mov	r1, r3
 80042f6:	4806      	ldr	r0, [pc, #24]	@ (8004310 <HAL_ADC_MspInit+0xb0>)
 80042f8:	f004 fa9a 	bl	8008830 <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 80042fc:	bf00      	nop
 80042fe:	3728      	adds	r7, #40	@ 0x28
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40012200 	.word	0x40012200
 8004308:	40023800 	.word	0x40023800
 800430c:	40021400 	.word	0x40021400
 8004310:	40020000 	.word	0x40020000

08004314 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a0a      	ldr	r2, [pc, #40]	@ (800434c <HAL_CRC_MspInit+0x38>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d10b      	bne.n	800433e <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004326:	4b0a      	ldr	r3, [pc, #40]	@ (8004350 <HAL_CRC_MspInit+0x3c>)
 8004328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432a:	4a09      	ldr	r2, [pc, #36]	@ (8004350 <HAL_CRC_MspInit+0x3c>)
 800432c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004330:	6313      	str	r3, [r2, #48]	@ 0x30
 8004332:	4b07      	ldr	r3, [pc, #28]	@ (8004350 <HAL_CRC_MspInit+0x3c>)
 8004334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004336:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 800433e:	bf00      	nop
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40023000 	.word	0x40023000
 8004350:	40023800 	.word	0x40023800

08004354 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b08e      	sub	sp, #56	@ 0x38
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800435c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	605a      	str	r2, [r3, #4]
 8004366:	609a      	str	r2, [r3, #8]
 8004368:	60da      	str	r2, [r3, #12]
 800436a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a50      	ldr	r2, [pc, #320]	@ (80044b4 <HAL_DCMI_MspInit+0x160>)
 8004372:	4293      	cmp	r3, r2
 8004374:	f040 809a 	bne.w	80044ac <HAL_DCMI_MspInit+0x158>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8004378:	4b4f      	ldr	r3, [pc, #316]	@ (80044b8 <HAL_DCMI_MspInit+0x164>)
 800437a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800437c:	4a4e      	ldr	r2, [pc, #312]	@ (80044b8 <HAL_DCMI_MspInit+0x164>)
 800437e:	f043 0301 	orr.w	r3, r3, #1
 8004382:	6353      	str	r3, [r2, #52]	@ 0x34
 8004384:	4b4c      	ldr	r3, [pc, #304]	@ (80044b8 <HAL_DCMI_MspInit+0x164>)
 8004386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	623b      	str	r3, [r7, #32]
 800438e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004390:	4b49      	ldr	r3, [pc, #292]	@ (80044b8 <HAL_DCMI_MspInit+0x164>)
 8004392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004394:	4a48      	ldr	r2, [pc, #288]	@ (80044b8 <HAL_DCMI_MspInit+0x164>)
 8004396:	f043 0310 	orr.w	r3, r3, #16
 800439a:	6313      	str	r3, [r2, #48]	@ 0x30
 800439c:	4b46      	ldr	r3, [pc, #280]	@ (80044b8 <HAL_DCMI_MspInit+0x164>)
 800439e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	61fb      	str	r3, [r7, #28]
 80043a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80043a8:	4b43      	ldr	r3, [pc, #268]	@ (80044b8 <HAL_DCMI_MspInit+0x164>)
 80043aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ac:	4a42      	ldr	r2, [pc, #264]	@ (80044b8 <HAL_DCMI_MspInit+0x164>)
 80043ae:	f043 0308 	orr.w	r3, r3, #8
 80043b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80043b4:	4b40      	ldr	r3, [pc, #256]	@ (80044b8 <HAL_DCMI_MspInit+0x164>)
 80043b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b8:	f003 0308 	and.w	r3, r3, #8
 80043bc:	61bb      	str	r3, [r7, #24]
 80043be:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80043c0:	4b3d      	ldr	r3, [pc, #244]	@ (80044b8 <HAL_DCMI_MspInit+0x164>)
 80043c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c4:	4a3c      	ldr	r2, [pc, #240]	@ (80044b8 <HAL_DCMI_MspInit+0x164>)
 80043c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80043cc:	4b3a      	ldr	r3, [pc, #232]	@ (80044b8 <HAL_DCMI_MspInit+0x164>)
 80043ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80043d8:	4b37      	ldr	r3, [pc, #220]	@ (80044b8 <HAL_DCMI_MspInit+0x164>)
 80043da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043dc:	4a36      	ldr	r2, [pc, #216]	@ (80044b8 <HAL_DCMI_MspInit+0x164>)
 80043de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80043e4:	4b34      	ldr	r3, [pc, #208]	@ (80044b8 <HAL_DCMI_MspInit+0x164>)
 80043e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ec:	613b      	str	r3, [r7, #16]
 80043ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043f0:	4b31      	ldr	r3, [pc, #196]	@ (80044b8 <HAL_DCMI_MspInit+0x164>)
 80043f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f4:	4a30      	ldr	r2, [pc, #192]	@ (80044b8 <HAL_DCMI_MspInit+0x164>)
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80043fc:	4b2e      	ldr	r3, [pc, #184]	@ (80044b8 <HAL_DCMI_MspInit+0x164>)
 80043fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8004408:	2360      	movs	r3, #96	@ 0x60
 800440a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800440c:	2302      	movs	r3, #2
 800440e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004410:	2300      	movs	r3, #0
 8004412:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004414:	2300      	movs	r3, #0
 8004416:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004418:	230d      	movs	r3, #13
 800441a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800441c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004420:	4619      	mov	r1, r3
 8004422:	4826      	ldr	r0, [pc, #152]	@ (80044bc <HAL_DCMI_MspInit+0x168>)
 8004424:	f004 fa04 	bl	8008830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8004428:	2308      	movs	r3, #8
 800442a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800442c:	2302      	movs	r3, #2
 800442e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004430:	2300      	movs	r3, #0
 8004432:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004434:	2300      	movs	r3, #0
 8004436:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004438:	230d      	movs	r3, #13
 800443a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800443c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004440:	4619      	mov	r1, r3
 8004442:	481f      	ldr	r0, [pc, #124]	@ (80044c0 <HAL_DCMI_MspInit+0x16c>)
 8004444:	f004 f9f4 	bl	8008830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8004448:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800444c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800444e:	2302      	movs	r3, #2
 8004450:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004452:	2300      	movs	r3, #0
 8004454:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004456:	2300      	movs	r3, #0
 8004458:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800445a:	230d      	movs	r3, #13
 800445c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800445e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004462:	4619      	mov	r1, r3
 8004464:	4817      	ldr	r0, [pc, #92]	@ (80044c4 <HAL_DCMI_MspInit+0x170>)
 8004466:	f004 f9e3 	bl	8008830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800446a:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 800446e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004470:	2302      	movs	r3, #2
 8004472:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004474:	2300      	movs	r3, #0
 8004476:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004478:	2300      	movs	r3, #0
 800447a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800447c:	230d      	movs	r3, #13
 800447e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004480:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004484:	4619      	mov	r1, r3
 8004486:	4810      	ldr	r0, [pc, #64]	@ (80044c8 <HAL_DCMI_MspInit+0x174>)
 8004488:	f004 f9d2 	bl	8008830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800448c:	2350      	movs	r3, #80	@ 0x50
 800448e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004490:	2302      	movs	r3, #2
 8004492:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004494:	2300      	movs	r3, #0
 8004496:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004498:	2300      	movs	r3, #0
 800449a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800449c:	230d      	movs	r3, #13
 800449e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044a4:	4619      	mov	r1, r3
 80044a6:	4809      	ldr	r0, [pc, #36]	@ (80044cc <HAL_DCMI_MspInit+0x178>)
 80044a8:	f004 f9c2 	bl	8008830 <HAL_GPIO_Init>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 80044ac:	bf00      	nop
 80044ae:	3738      	adds	r7, #56	@ 0x38
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	50050000 	.word	0x50050000
 80044b8:	40023800 	.word	0x40023800
 80044bc:	40021000 	.word	0x40021000
 80044c0:	40020c00 	.word	0x40020c00
 80044c4:	40021800 	.word	0x40021800
 80044c8:	40021c00 	.word	0x40021c00
 80044cc:	40020000 	.word	0x40020000

080044d0 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004514 <HAL_DMA2D_MspInit+0x44>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d113      	bne.n	800450a <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80044e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004518 <HAL_DMA2D_MspInit+0x48>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e6:	4a0c      	ldr	r2, [pc, #48]	@ (8004518 <HAL_DMA2D_MspInit+0x48>)
 80044e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80044ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80044ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004518 <HAL_DMA2D_MspInit+0x48>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80044fa:	2200      	movs	r2, #0
 80044fc:	2105      	movs	r1, #5
 80044fe:	205a      	movs	r0, #90	@ 0x5a
 8004500:	f002 fe52 	bl	80071a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8004504:	205a      	movs	r0, #90	@ 0x5a
 8004506:	f002 fe6b 	bl	80071e0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800450a:	bf00      	nop
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	4002b000 	.word	0x4002b000
 8004518:	40023800 	.word	0x40023800

0800451c <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08e      	sub	sp, #56	@ 0x38
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	605a      	str	r2, [r3, #4]
 800452e:	609a      	str	r2, [r3, #8]
 8004530:	60da      	str	r2, [r3, #12]
 8004532:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a3f      	ldr	r2, [pc, #252]	@ (8004638 <HAL_ETH_MspInit+0x11c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d178      	bne.n	8004630 <HAL_ETH_MspInit+0x114>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800453e:	4b3f      	ldr	r3, [pc, #252]	@ (800463c <HAL_ETH_MspInit+0x120>)
 8004540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004542:	4a3e      	ldr	r2, [pc, #248]	@ (800463c <HAL_ETH_MspInit+0x120>)
 8004544:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004548:	6313      	str	r3, [r2, #48]	@ 0x30
 800454a:	4b3c      	ldr	r3, [pc, #240]	@ (800463c <HAL_ETH_MspInit+0x120>)
 800454c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004552:	623b      	str	r3, [r7, #32]
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	4b39      	ldr	r3, [pc, #228]	@ (800463c <HAL_ETH_MspInit+0x120>)
 8004558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455a:	4a38      	ldr	r2, [pc, #224]	@ (800463c <HAL_ETH_MspInit+0x120>)
 800455c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004560:	6313      	str	r3, [r2, #48]	@ 0x30
 8004562:	4b36      	ldr	r3, [pc, #216]	@ (800463c <HAL_ETH_MspInit+0x120>)
 8004564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004566:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800456a:	61fb      	str	r3, [r7, #28]
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	4b33      	ldr	r3, [pc, #204]	@ (800463c <HAL_ETH_MspInit+0x120>)
 8004570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004572:	4a32      	ldr	r2, [pc, #200]	@ (800463c <HAL_ETH_MspInit+0x120>)
 8004574:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004578:	6313      	str	r3, [r2, #48]	@ 0x30
 800457a:	4b30      	ldr	r3, [pc, #192]	@ (800463c <HAL_ETH_MspInit+0x120>)
 800457c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004582:	61bb      	str	r3, [r7, #24]
 8004584:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004586:	4b2d      	ldr	r3, [pc, #180]	@ (800463c <HAL_ETH_MspInit+0x120>)
 8004588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458a:	4a2c      	ldr	r2, [pc, #176]	@ (800463c <HAL_ETH_MspInit+0x120>)
 800458c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004590:	6313      	str	r3, [r2, #48]	@ 0x30
 8004592:	4b2a      	ldr	r3, [pc, #168]	@ (800463c <HAL_ETH_MspInit+0x120>)
 8004594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800459e:	4b27      	ldr	r3, [pc, #156]	@ (800463c <HAL_ETH_MspInit+0x120>)
 80045a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a2:	4a26      	ldr	r2, [pc, #152]	@ (800463c <HAL_ETH_MspInit+0x120>)
 80045a4:	f043 0304 	orr.w	r3, r3, #4
 80045a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80045aa:	4b24      	ldr	r3, [pc, #144]	@ (800463c <HAL_ETH_MspInit+0x120>)
 80045ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	613b      	str	r3, [r7, #16]
 80045b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045b6:	4b21      	ldr	r3, [pc, #132]	@ (800463c <HAL_ETH_MspInit+0x120>)
 80045b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ba:	4a20      	ldr	r2, [pc, #128]	@ (800463c <HAL_ETH_MspInit+0x120>)
 80045bc:	f043 0301 	orr.w	r3, r3, #1
 80045c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80045c2:	4b1e      	ldr	r3, [pc, #120]	@ (800463c <HAL_ETH_MspInit+0x120>)
 80045c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80045ce:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80045d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d4:	2302      	movs	r3, #2
 80045d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d8:	2300      	movs	r3, #0
 80045da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045dc:	2303      	movs	r3, #3
 80045de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80045e0:	230b      	movs	r3, #11
 80045e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80045e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045e8:	4619      	mov	r1, r3
 80045ea:	4815      	ldr	r0, [pc, #84]	@ (8004640 <HAL_ETH_MspInit+0x124>)
 80045ec:	f004 f920 	bl	8008830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80045f0:	2332      	movs	r3, #50	@ 0x32
 80045f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f4:	2302      	movs	r3, #2
 80045f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045fc:	2303      	movs	r3, #3
 80045fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004600:	230b      	movs	r3, #11
 8004602:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004604:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004608:	4619      	mov	r1, r3
 800460a:	480e      	ldr	r0, [pc, #56]	@ (8004644 <HAL_ETH_MspInit+0x128>)
 800460c:	f004 f910 	bl	8008830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004610:	2386      	movs	r3, #134	@ 0x86
 8004612:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004614:	2302      	movs	r3, #2
 8004616:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004618:	2300      	movs	r3, #0
 800461a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800461c:	2303      	movs	r3, #3
 800461e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004620:	230b      	movs	r3, #11
 8004622:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004624:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004628:	4619      	mov	r1, r3
 800462a:	4807      	ldr	r0, [pc, #28]	@ (8004648 <HAL_ETH_MspInit+0x12c>)
 800462c:	f004 f900 	bl	8008830 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8004630:	bf00      	nop
 8004632:	3738      	adds	r7, #56	@ 0x38
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40028000 	.word	0x40028000
 800463c:	40023800 	.word	0x40023800
 8004640:	40021800 	.word	0x40021800
 8004644:	40020800 	.word	0x40020800
 8004648:	40020000 	.word	0x40020000

0800464c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b0ac      	sub	sp, #176	@ 0xb0
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004654:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	605a      	str	r2, [r3, #4]
 800465e:	609a      	str	r2, [r3, #8]
 8004660:	60da      	str	r2, [r3, #12]
 8004662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004664:	f107 0318 	add.w	r3, r7, #24
 8004668:	2284      	movs	r2, #132	@ 0x84
 800466a:	2100      	movs	r1, #0
 800466c:	4618      	mov	r0, r3
 800466e:	f013 fe21 	bl	80182b4 <memset>
  if(hi2c->Instance==I2C1)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a44      	ldr	r2, [pc, #272]	@ (8004788 <HAL_I2C_MspInit+0x13c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d13d      	bne.n	80046f8 <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800467c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004680:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004682:	2300      	movs	r3, #0
 8004684:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004686:	f107 0318 	add.w	r3, r7, #24
 800468a:	4618      	mov	r0, r3
 800468c:	f007 fa78 	bl	800bb80 <HAL_RCCEx_PeriphCLKConfig>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004696:	f7ff fd49 	bl	800412c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800469a:	4b3c      	ldr	r3, [pc, #240]	@ (800478c <HAL_I2C_MspInit+0x140>)
 800469c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469e:	4a3b      	ldr	r2, [pc, #236]	@ (800478c <HAL_I2C_MspInit+0x140>)
 80046a0:	f043 0302 	orr.w	r3, r3, #2
 80046a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80046a6:	4b39      	ldr	r3, [pc, #228]	@ (800478c <HAL_I2C_MspInit+0x140>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	617b      	str	r3, [r7, #20]
 80046b0:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80046b2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80046b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046ba:	2312      	movs	r3, #18
 80046bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046c0:	2301      	movs	r3, #1
 80046c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046c6:	2300      	movs	r3, #0
 80046c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80046cc:	2304      	movs	r3, #4
 80046ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046d2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80046d6:	4619      	mov	r1, r3
 80046d8:	482d      	ldr	r0, [pc, #180]	@ (8004790 <HAL_I2C_MspInit+0x144>)
 80046da:	f004 f8a9 	bl	8008830 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80046de:	4b2b      	ldr	r3, [pc, #172]	@ (800478c <HAL_I2C_MspInit+0x140>)
 80046e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e2:	4a2a      	ldr	r2, [pc, #168]	@ (800478c <HAL_I2C_MspInit+0x140>)
 80046e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80046e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80046ea:	4b28      	ldr	r3, [pc, #160]	@ (800478c <HAL_I2C_MspInit+0x140>)
 80046ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046f2:	613b      	str	r3, [r7, #16]
 80046f4:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 80046f6:	e042      	b.n	800477e <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a25      	ldr	r2, [pc, #148]	@ (8004794 <HAL_I2C_MspInit+0x148>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d13d      	bne.n	800477e <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8004702:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004706:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8004708:	2300      	movs	r3, #0
 800470a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800470e:	f107 0318 	add.w	r3, r7, #24
 8004712:	4618      	mov	r0, r3
 8004714:	f007 fa34 	bl	800bb80 <HAL_RCCEx_PeriphCLKConfig>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800471e:	f7ff fd05 	bl	800412c <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004722:	4b1a      	ldr	r3, [pc, #104]	@ (800478c <HAL_I2C_MspInit+0x140>)
 8004724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004726:	4a19      	ldr	r2, [pc, #100]	@ (800478c <HAL_I2C_MspInit+0x140>)
 8004728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800472c:	6313      	str	r3, [r2, #48]	@ 0x30
 800472e:	4b17      	ldr	r3, [pc, #92]	@ (800478c <HAL_I2C_MspInit+0x140>)
 8004730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800473a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800473e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004742:	2312      	movs	r3, #18
 8004744:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004748:	2301      	movs	r3, #1
 800474a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800474e:	2303      	movs	r3, #3
 8004750:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004754:	2304      	movs	r3, #4
 8004756:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800475a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800475e:	4619      	mov	r1, r3
 8004760:	480d      	ldr	r0, [pc, #52]	@ (8004798 <HAL_I2C_MspInit+0x14c>)
 8004762:	f004 f865 	bl	8008830 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004766:	4b09      	ldr	r3, [pc, #36]	@ (800478c <HAL_I2C_MspInit+0x140>)
 8004768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476a:	4a08      	ldr	r2, [pc, #32]	@ (800478c <HAL_I2C_MspInit+0x140>)
 800476c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004770:	6413      	str	r3, [r2, #64]	@ 0x40
 8004772:	4b06      	ldr	r3, [pc, #24]	@ (800478c <HAL_I2C_MspInit+0x140>)
 8004774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004776:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800477a:	60bb      	str	r3, [r7, #8]
 800477c:	68bb      	ldr	r3, [r7, #8]
}
 800477e:	bf00      	nop
 8004780:	37b0      	adds	r7, #176	@ 0xb0
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	40005400 	.word	0x40005400
 800478c:	40023800 	.word	0x40023800
 8004790:	40020400 	.word	0x40020400
 8004794:	40005c00 	.word	0x40005c00
 8004798:	40021c00 	.word	0x40021c00

0800479c <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b08e      	sub	sp, #56	@ 0x38
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	605a      	str	r2, [r3, #4]
 80047ae:	609a      	str	r2, [r3, #8]
 80047b0:	60da      	str	r2, [r3, #12]
 80047b2:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a55      	ldr	r2, [pc, #340]	@ (8004910 <HAL_LTDC_MspInit+0x174>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	f040 80a3 	bne.w	8004906 <HAL_LTDC_MspInit+0x16a>
  {
    /* USER CODE BEGIN LTDC_MspInit 0 */

    /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80047c0:	4b54      	ldr	r3, [pc, #336]	@ (8004914 <HAL_LTDC_MspInit+0x178>)
 80047c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c4:	4a53      	ldr	r2, [pc, #332]	@ (8004914 <HAL_LTDC_MspInit+0x178>)
 80047c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80047ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80047cc:	4b51      	ldr	r3, [pc, #324]	@ (8004914 <HAL_LTDC_MspInit+0x178>)
 80047ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80047d4:	623b      	str	r3, [r7, #32]
 80047d6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80047d8:	4b4e      	ldr	r3, [pc, #312]	@ (8004914 <HAL_LTDC_MspInit+0x178>)
 80047da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047dc:	4a4d      	ldr	r2, [pc, #308]	@ (8004914 <HAL_LTDC_MspInit+0x178>)
 80047de:	f043 0310 	orr.w	r3, r3, #16
 80047e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80047e4:	4b4b      	ldr	r3, [pc, #300]	@ (8004914 <HAL_LTDC_MspInit+0x178>)
 80047e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e8:	f003 0310 	and.w	r3, r3, #16
 80047ec:	61fb      	str	r3, [r7, #28]
 80047ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80047f0:	4b48      	ldr	r3, [pc, #288]	@ (8004914 <HAL_LTDC_MspInit+0x178>)
 80047f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f4:	4a47      	ldr	r2, [pc, #284]	@ (8004914 <HAL_LTDC_MspInit+0x178>)
 80047f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80047fc:	4b45      	ldr	r3, [pc, #276]	@ (8004914 <HAL_LTDC_MspInit+0x178>)
 80047fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004800:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004804:	61bb      	str	r3, [r7, #24]
 8004806:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8004808:	4b42      	ldr	r3, [pc, #264]	@ (8004914 <HAL_LTDC_MspInit+0x178>)
 800480a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480c:	4a41      	ldr	r2, [pc, #260]	@ (8004914 <HAL_LTDC_MspInit+0x178>)
 800480e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004812:	6313      	str	r3, [r2, #48]	@ 0x30
 8004814:	4b3f      	ldr	r3, [pc, #252]	@ (8004914 <HAL_LTDC_MspInit+0x178>)
 8004816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800481c:	617b      	str	r3, [r7, #20]
 800481e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004820:	4b3c      	ldr	r3, [pc, #240]	@ (8004914 <HAL_LTDC_MspInit+0x178>)
 8004822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004824:	4a3b      	ldr	r2, [pc, #236]	@ (8004914 <HAL_LTDC_MspInit+0x178>)
 8004826:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800482a:	6313      	str	r3, [r2, #48]	@ 0x30
 800482c:	4b39      	ldr	r3, [pc, #228]	@ (8004914 <HAL_LTDC_MspInit+0x178>)
 800482e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004834:	613b      	str	r3, [r7, #16]
 8004836:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004838:	4b36      	ldr	r3, [pc, #216]	@ (8004914 <HAL_LTDC_MspInit+0x178>)
 800483a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483c:	4a35      	ldr	r2, [pc, #212]	@ (8004914 <HAL_LTDC_MspInit+0x178>)
 800483e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004842:	6313      	str	r3, [r2, #48]	@ 0x30
 8004844:	4b33      	ldr	r3, [pc, #204]	@ (8004914 <HAL_LTDC_MspInit+0x178>)
 8004846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800484c:	60fb      	str	r3, [r7, #12]
 800484e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8004850:	2310      	movs	r3, #16
 8004852:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004854:	2302      	movs	r3, #2
 8004856:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004858:	2300      	movs	r3, #0
 800485a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800485c:	2300      	movs	r3, #0
 800485e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004860:	230e      	movs	r3, #14
 8004862:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8004864:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004868:	4619      	mov	r1, r3
 800486a:	482b      	ldr	r0, [pc, #172]	@ (8004918 <HAL_LTDC_MspInit+0x17c>)
 800486c:	f003 ffe0 	bl	8008830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8004870:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8004874:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004876:	2302      	movs	r3, #2
 8004878:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800487a:	2300      	movs	r3, #0
 800487c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800487e:	2300      	movs	r3, #0
 8004880:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004882:	230e      	movs	r3, #14
 8004884:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004886:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800488a:	4619      	mov	r1, r3
 800488c:	4823      	ldr	r0, [pc, #140]	@ (800491c <HAL_LTDC_MspInit+0x180>)
 800488e:	f003 ffcf 	bl	8008830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8004892:	23f7      	movs	r3, #247	@ 0xf7
 8004894:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004896:	2302      	movs	r3, #2
 8004898:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800489a:	2300      	movs	r3, #0
 800489c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800489e:	2300      	movs	r3, #0
 80048a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80048a2:	230e      	movs	r3, #14
 80048a4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80048a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048aa:	4619      	mov	r1, r3
 80048ac:	481c      	ldr	r0, [pc, #112]	@ (8004920 <HAL_LTDC_MspInit+0x184>)
 80048ae:	f003 ffbf 	bl	8008830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80048b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80048b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048b8:	2302      	movs	r3, #2
 80048ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048bc:	2300      	movs	r3, #0
 80048be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048c0:	2300      	movs	r3, #0
 80048c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80048c4:	2309      	movs	r3, #9
 80048c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80048c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048cc:	4619      	mov	r1, r3
 80048ce:	4815      	ldr	r0, [pc, #84]	@ (8004924 <HAL_LTDC_MspInit+0x188>)
 80048d0:	f003 ffae 	bl	8008830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80048d4:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80048d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048da:	2302      	movs	r3, #2
 80048dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048de:	2300      	movs	r3, #0
 80048e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048e2:	2300      	movs	r3, #0
 80048e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80048e6:	230e      	movs	r3, #14
 80048e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80048ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048ee:	4619      	mov	r1, r3
 80048f0:	480d      	ldr	r0, [pc, #52]	@ (8004928 <HAL_LTDC_MspInit+0x18c>)
 80048f2:	f003 ff9d 	bl	8008830 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80048f6:	2200      	movs	r2, #0
 80048f8:	2105      	movs	r1, #5
 80048fa:	2058      	movs	r0, #88	@ 0x58
 80048fc:	f002 fc54 	bl	80071a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004900:	2058      	movs	r0, #88	@ 0x58
 8004902:	f002 fc6d 	bl	80071e0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 8004906:	bf00      	nop
 8004908:	3738      	adds	r7, #56	@ 0x38
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	40016800 	.word	0x40016800
 8004914:	40023800 	.word	0x40023800
 8004918:	40021000 	.word	0x40021000
 800491c:	40022400 	.word	0x40022400
 8004920:	40022800 	.word	0x40022800
 8004924:	40021800 	.word	0x40021800
 8004928:	40022000 	.word	0x40022000

0800492c <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08c      	sub	sp, #48	@ 0x30
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004934:	f107 031c 	add.w	r3, r7, #28
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	605a      	str	r2, [r3, #4]
 800493e:	609a      	str	r2, [r3, #8]
 8004940:	60da      	str	r2, [r3, #12]
 8004942:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a3b      	ldr	r2, [pc, #236]	@ (8004a38 <HAL_QSPI_MspInit+0x10c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d170      	bne.n	8004a30 <HAL_QSPI_MspInit+0x104>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800494e:	4b3b      	ldr	r3, [pc, #236]	@ (8004a3c <HAL_QSPI_MspInit+0x110>)
 8004950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004952:	4a3a      	ldr	r2, [pc, #232]	@ (8004a3c <HAL_QSPI_MspInit+0x110>)
 8004954:	f043 0302 	orr.w	r3, r3, #2
 8004958:	6393      	str	r3, [r2, #56]	@ 0x38
 800495a:	4b38      	ldr	r3, [pc, #224]	@ (8004a3c <HAL_QSPI_MspInit+0x110>)
 800495c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	61bb      	str	r3, [r7, #24]
 8004964:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004966:	4b35      	ldr	r3, [pc, #212]	@ (8004a3c <HAL_QSPI_MspInit+0x110>)
 8004968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496a:	4a34      	ldr	r2, [pc, #208]	@ (8004a3c <HAL_QSPI_MspInit+0x110>)
 800496c:	f043 0310 	orr.w	r3, r3, #16
 8004970:	6313      	str	r3, [r2, #48]	@ 0x30
 8004972:	4b32      	ldr	r3, [pc, #200]	@ (8004a3c <HAL_QSPI_MspInit+0x110>)
 8004974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004976:	f003 0310 	and.w	r3, r3, #16
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800497e:	4b2f      	ldr	r3, [pc, #188]	@ (8004a3c <HAL_QSPI_MspInit+0x110>)
 8004980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004982:	4a2e      	ldr	r2, [pc, #184]	@ (8004a3c <HAL_QSPI_MspInit+0x110>)
 8004984:	f043 0302 	orr.w	r3, r3, #2
 8004988:	6313      	str	r3, [r2, #48]	@ 0x30
 800498a:	4b2c      	ldr	r3, [pc, #176]	@ (8004a3c <HAL_QSPI_MspInit+0x110>)
 800498c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	613b      	str	r3, [r7, #16]
 8004994:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004996:	4b29      	ldr	r3, [pc, #164]	@ (8004a3c <HAL_QSPI_MspInit+0x110>)
 8004998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499a:	4a28      	ldr	r2, [pc, #160]	@ (8004a3c <HAL_QSPI_MspInit+0x110>)
 800499c:	f043 0308 	orr.w	r3, r3, #8
 80049a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80049a2:	4b26      	ldr	r3, [pc, #152]	@ (8004a3c <HAL_QSPI_MspInit+0x110>)
 80049a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80049ae:	2304      	movs	r3, #4
 80049b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049b2:	2302      	movs	r3, #2
 80049b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b6:	2300      	movs	r3, #0
 80049b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049ba:	2303      	movs	r3, #3
 80049bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80049be:	2309      	movs	r3, #9
 80049c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80049c2:	f107 031c 	add.w	r3, r7, #28
 80049c6:	4619      	mov	r1, r3
 80049c8:	481d      	ldr	r0, [pc, #116]	@ (8004a40 <HAL_QSPI_MspInit+0x114>)
 80049ca:	f003 ff31 	bl	8008830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80049ce:	2340      	movs	r3, #64	@ 0x40
 80049d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049d2:	2302      	movs	r3, #2
 80049d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d6:	2300      	movs	r3, #0
 80049d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049da:	2303      	movs	r3, #3
 80049dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80049de:	230a      	movs	r3, #10
 80049e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80049e2:	f107 031c 	add.w	r3, r7, #28
 80049e6:	4619      	mov	r1, r3
 80049e8:	4816      	ldr	r0, [pc, #88]	@ (8004a44 <HAL_QSPI_MspInit+0x118>)
 80049ea:	f003 ff21 	bl	8008830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80049ee:	2304      	movs	r3, #4
 80049f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049f2:	2302      	movs	r3, #2
 80049f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049f6:	2300      	movs	r3, #0
 80049f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049fa:	2303      	movs	r3, #3
 80049fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80049fe:	2309      	movs	r3, #9
 8004a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a02:	f107 031c 	add.w	r3, r7, #28
 8004a06:	4619      	mov	r1, r3
 8004a08:	480e      	ldr	r0, [pc, #56]	@ (8004a44 <HAL_QSPI_MspInit+0x118>)
 8004a0a:	f003 ff11 	bl	8008830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8004a0e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8004a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a14:	2302      	movs	r3, #2
 8004a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004a20:	2309      	movs	r3, #9
 8004a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a24:	f107 031c 	add.w	r3, r7, #28
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4807      	ldr	r0, [pc, #28]	@ (8004a48 <HAL_QSPI_MspInit+0x11c>)
 8004a2c:	f003 ff00 	bl	8008830 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8004a30:	bf00      	nop
 8004a32:	3730      	adds	r7, #48	@ 0x30
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	a0001000 	.word	0xa0001000
 8004a3c:	40023800 	.word	0x40023800
 8004a40:	40021000 	.word	0x40021000
 8004a44:	40020400 	.word	0x40020400
 8004a48:	40020c00 	.word	0x40020c00

08004a4c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b0a4      	sub	sp, #144	@ 0x90
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a54:	f107 030c 	add.w	r3, r7, #12
 8004a58:	2284      	movs	r2, #132	@ 0x84
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f013 fc29 	bl	80182b4 <memset>
  if(hrtc->Instance==RTC)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a0e      	ldr	r2, [pc, #56]	@ (8004aa0 <HAL_RTC_MspInit+0x54>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d114      	bne.n	8004a96 <HAL_RTC_MspInit+0x4a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004a6c:	2320      	movs	r3, #32
 8004a6e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004a70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a76:	f107 030c 	add.w	r3, r7, #12
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f007 f880 	bl	800bb80 <HAL_RCCEx_PeriphCLKConfig>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004a86:	f7ff fb51 	bl	800412c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004a8a:	4b06      	ldr	r3, [pc, #24]	@ (8004aa4 <HAL_RTC_MspInit+0x58>)
 8004a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a8e:	4a05      	ldr	r2, [pc, #20]	@ (8004aa4 <HAL_RTC_MspInit+0x58>)
 8004a90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a94:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8004a96:	bf00      	nop
 8004a98:	3790      	adds	r7, #144	@ 0x90
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40002800 	.word	0x40002800
 8004aa4:	40023800 	.word	0x40023800

08004aa8 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08a      	sub	sp, #40	@ 0x28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ab0:	f107 0314 	add.w	r3, r7, #20
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	605a      	str	r2, [r3, #4]
 8004aba:	609a      	str	r2, [r3, #8]
 8004abc:	60da      	str	r2, [r3, #12]
 8004abe:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a25      	ldr	r2, [pc, #148]	@ (8004b5c <HAL_SD_MspInit+0xb4>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d144      	bne.n	8004b54 <HAL_SD_MspInit+0xac>
  {
    /* USER CODE BEGIN SDMMC1_MspInit 0 */

    /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004aca:	4b25      	ldr	r3, [pc, #148]	@ (8004b60 <HAL_SD_MspInit+0xb8>)
 8004acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ace:	4a24      	ldr	r2, [pc, #144]	@ (8004b60 <HAL_SD_MspInit+0xb8>)
 8004ad0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004ad4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ad6:	4b22      	ldr	r3, [pc, #136]	@ (8004b60 <HAL_SD_MspInit+0xb8>)
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ada:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8004b60 <HAL_SD_MspInit+0xb8>)
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae6:	4a1e      	ldr	r2, [pc, #120]	@ (8004b60 <HAL_SD_MspInit+0xb8>)
 8004ae8:	f043 0304 	orr.w	r3, r3, #4
 8004aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8004aee:	4b1c      	ldr	r3, [pc, #112]	@ (8004b60 <HAL_SD_MspInit+0xb8>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af2:	f003 0304 	and.w	r3, r3, #4
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004afa:	4b19      	ldr	r3, [pc, #100]	@ (8004b60 <HAL_SD_MspInit+0xb8>)
 8004afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004afe:	4a18      	ldr	r2, [pc, #96]	@ (8004b60 <HAL_SD_MspInit+0xb8>)
 8004b00:	f043 0308 	orr.w	r3, r3, #8
 8004b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b06:	4b16      	ldr	r3, [pc, #88]	@ (8004b60 <HAL_SD_MspInit+0xb8>)
 8004b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	60bb      	str	r3, [r7, #8]
 8004b10:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8004b12:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8004b16:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b18:	2302      	movs	r3, #2
 8004b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b20:	2303      	movs	r3, #3
 8004b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004b24:	230c      	movs	r3, #12
 8004b26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b28:	f107 0314 	add.w	r3, r7, #20
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	480d      	ldr	r0, [pc, #52]	@ (8004b64 <HAL_SD_MspInit+0xbc>)
 8004b30:	f003 fe7e 	bl	8008830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8004b34:	2304      	movs	r3, #4
 8004b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b38:	2302      	movs	r3, #2
 8004b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b40:	2303      	movs	r3, #3
 8004b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004b44:	230c      	movs	r3, #12
 8004b46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8004b48:	f107 0314 	add.w	r3, r7, #20
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4806      	ldr	r0, [pc, #24]	@ (8004b68 <HAL_SD_MspInit+0xc0>)
 8004b50:	f003 fe6e 	bl	8008830 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8004b54:	bf00      	nop
 8004b56:	3728      	adds	r7, #40	@ 0x28
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	40012c00 	.word	0x40012c00
 8004b60:	40023800 	.word	0x40023800
 8004b64:	40020800 	.word	0x40020800
 8004b68:	40020c00 	.word	0x40020c00

08004b6c <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b0aa      	sub	sp, #168	@ 0xa8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b74:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	605a      	str	r2, [r3, #4]
 8004b7e:	609a      	str	r2, [r3, #8]
 8004b80:	60da      	str	r2, [r3, #12]
 8004b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004b84:	f107 0310 	add.w	r3, r7, #16
 8004b88:	2284      	movs	r2, #132	@ 0x84
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f013 fb91 	bl	80182b4 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8004b9a:	d143      	bne.n	8004c24 <HAL_SPDIFRX_MspInit+0xb8>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8004b9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ba0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8004ba2:	2364      	movs	r3, #100	@ 0x64
 8004ba4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8004baa:	2302      	movs	r3, #2
 8004bac:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8004bae:	2302      	movs	r3, #2
 8004bb0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004bb6:	f107 0310 	add.w	r3, r7, #16
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f006 ffe0 	bl	800bb80 <HAL_RCCEx_PeriphCLKConfig>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8004bc6:	f7ff fab1 	bl	800412c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8004bca:	4b18      	ldr	r3, [pc, #96]	@ (8004c2c <HAL_SPDIFRX_MspInit+0xc0>)
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bce:	4a17      	ldr	r2, [pc, #92]	@ (8004c2c <HAL_SPDIFRX_MspInit+0xc0>)
 8004bd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bd6:	4b15      	ldr	r3, [pc, #84]	@ (8004c2c <HAL_SPDIFRX_MspInit+0xc0>)
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004be2:	4b12      	ldr	r3, [pc, #72]	@ (8004c2c <HAL_SPDIFRX_MspInit+0xc0>)
 8004be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be6:	4a11      	ldr	r2, [pc, #68]	@ (8004c2c <HAL_SPDIFRX_MspInit+0xc0>)
 8004be8:	f043 0308 	orr.w	r3, r3, #8
 8004bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bee:	4b0f      	ldr	r3, [pc, #60]	@ (8004c2c <HAL_SPDIFRX_MspInit+0xc0>)
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf2:	f003 0308 	and.w	r3, r3, #8
 8004bf6:	60bb      	str	r3, [r7, #8]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8004bfa:	2380      	movs	r3, #128	@ 0x80
 8004bfc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c00:	2302      	movs	r3, #2
 8004c02:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c06:	2300      	movs	r3, #0
 8004c08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8004c12:	2308      	movs	r3, #8
 8004c14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8004c18:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4804      	ldr	r0, [pc, #16]	@ (8004c30 <HAL_SPDIFRX_MspInit+0xc4>)
 8004c20:	f003 fe06 	bl	8008830 <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 8004c24:	bf00      	nop
 8004c26:	37a8      	adds	r7, #168	@ 0xa8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	40020c00 	.word	0x40020c00

08004c34 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08a      	sub	sp, #40	@ 0x28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c3c:	f107 0314 	add.w	r3, r7, #20
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	605a      	str	r2, [r3, #4]
 8004c46:	609a      	str	r2, [r3, #8]
 8004c48:	60da      	str	r2, [r3, #12]
 8004c4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a25      	ldr	r2, [pc, #148]	@ (8004ce8 <HAL_SPI_MspInit+0xb4>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d144      	bne.n	8004ce0 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004c56:	4b25      	ldr	r3, [pc, #148]	@ (8004cec <HAL_SPI_MspInit+0xb8>)
 8004c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5a:	4a24      	ldr	r2, [pc, #144]	@ (8004cec <HAL_SPI_MspInit+0xb8>)
 8004c5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c62:	4b22      	ldr	r3, [pc, #136]	@ (8004cec <HAL_SPI_MspInit+0xb8>)
 8004c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c6a:	613b      	str	r3, [r7, #16]
 8004c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004c6e:	4b1f      	ldr	r3, [pc, #124]	@ (8004cec <HAL_SPI_MspInit+0xb8>)
 8004c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c72:	4a1e      	ldr	r2, [pc, #120]	@ (8004cec <HAL_SPI_MspInit+0xb8>)
 8004c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8004cec <HAL_SPI_MspInit+0xb8>)
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c86:	4b19      	ldr	r3, [pc, #100]	@ (8004cec <HAL_SPI_MspInit+0xb8>)
 8004c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8a:	4a18      	ldr	r2, [pc, #96]	@ (8004cec <HAL_SPI_MspInit+0xb8>)
 8004c8c:	f043 0302 	orr.w	r3, r3, #2
 8004c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c92:	4b16      	ldr	r3, [pc, #88]	@ (8004cec <HAL_SPI_MspInit+0xb8>)
 8004c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	60bb      	str	r3, [r7, #8]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004caa:	2300      	movs	r3, #0
 8004cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004cae:	2305      	movs	r3, #5
 8004cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8004cb2:	f107 0314 	add.w	r3, r7, #20
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	480d      	ldr	r0, [pc, #52]	@ (8004cf0 <HAL_SPI_MspInit+0xbc>)
 8004cba:	f003 fdb9 	bl	8008830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8004cbe:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8004cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004cd0:	2305      	movs	r3, #5
 8004cd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cd4:	f107 0314 	add.w	r3, r7, #20
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4806      	ldr	r0, [pc, #24]	@ (8004cf4 <HAL_SPI_MspInit+0xc0>)
 8004cdc:	f003 fda8 	bl	8008830 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004ce0:	bf00      	nop
 8004ce2:	3728      	adds	r7, #40	@ 0x28
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40003800 	.word	0x40003800
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	40022000 	.word	0x40022000
 8004cf4:	40020400 	.word	0x40020400

08004cf8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b089      	sub	sp, #36	@ 0x24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a2e      	ldr	r2, [pc, #184]	@ (8004dc0 <HAL_TIM_Base_MspInit+0xc8>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d10c      	bne.n	8004d24 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004d0a:	4b2e      	ldr	r3, [pc, #184]	@ (8004dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8004d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d0e:	4a2d      	ldr	r2, [pc, #180]	@ (8004dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8004d10:	f043 0301 	orr.w	r3, r3, #1
 8004d14:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d16:	4b2b      	ldr	r3, [pc, #172]	@ (8004dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8004d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	61fb      	str	r3, [r7, #28]
 8004d20:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004d22:	e046      	b.n	8004db2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d2c:	d10c      	bne.n	8004d48 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d2e:	4b25      	ldr	r3, [pc, #148]	@ (8004dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8004d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d32:	4a24      	ldr	r2, [pc, #144]	@ (8004dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8004d34:	f043 0301 	orr.w	r3, r3, #1
 8004d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d3a:	4b22      	ldr	r3, [pc, #136]	@ (8004dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	61bb      	str	r3, [r7, #24]
 8004d44:	69bb      	ldr	r3, [r7, #24]
}
 8004d46:	e034      	b.n	8004db2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a1e      	ldr	r2, [pc, #120]	@ (8004dc8 <HAL_TIM_Base_MspInit+0xd0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d10c      	bne.n	8004d6c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004d52:	4b1c      	ldr	r3, [pc, #112]	@ (8004dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8004d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d56:	4a1b      	ldr	r2, [pc, #108]	@ (8004dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8004d58:	f043 0302 	orr.w	r3, r3, #2
 8004d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d5e:	4b19      	ldr	r3, [pc, #100]	@ (8004dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8004d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	697b      	ldr	r3, [r7, #20]
}
 8004d6a:	e022      	b.n	8004db2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a16      	ldr	r2, [pc, #88]	@ (8004dcc <HAL_TIM_Base_MspInit+0xd4>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d10c      	bne.n	8004d90 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004d76:	4b13      	ldr	r3, [pc, #76]	@ (8004dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8004d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7a:	4a12      	ldr	r2, [pc, #72]	@ (8004dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8004d7c:	f043 0308 	orr.w	r3, r3, #8
 8004d80:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d82:	4b10      	ldr	r3, [pc, #64]	@ (8004dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8004d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d86:	f003 0308 	and.w	r3, r3, #8
 8004d8a:	613b      	str	r3, [r7, #16]
 8004d8c:	693b      	ldr	r3, [r7, #16]
}
 8004d8e:	e010      	b.n	8004db2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a0e      	ldr	r2, [pc, #56]	@ (8004dd0 <HAL_TIM_Base_MspInit+0xd8>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d10b      	bne.n	8004db2 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8004dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9e:	4a09      	ldr	r2, [pc, #36]	@ (8004dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8004da0:	f043 0302 	orr.w	r3, r3, #2
 8004da4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004da6:	4b07      	ldr	r3, [pc, #28]	@ (8004dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8004da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	68fb      	ldr	r3, [r7, #12]
}
 8004db2:	bf00      	nop
 8004db4:	3724      	adds	r7, #36	@ 0x24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	40010000 	.word	0x40010000
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	40000400 	.word	0x40000400
 8004dcc:	40000c00 	.word	0x40000c00
 8004dd0:	40010400 	.word	0x40010400

08004dd4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a0a      	ldr	r2, [pc, #40]	@ (8004e0c <HAL_TIM_PWM_MspInit+0x38>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d10b      	bne.n	8004dfe <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM12_MspInit 0 */

    /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004de6:	4b0a      	ldr	r3, [pc, #40]	@ (8004e10 <HAL_TIM_PWM_MspInit+0x3c>)
 8004de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dea:	4a09      	ldr	r2, [pc, #36]	@ (8004e10 <HAL_TIM_PWM_MspInit+0x3c>)
 8004dec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004df0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004df2:	4b07      	ldr	r3, [pc, #28]	@ (8004e10 <HAL_TIM_PWM_MspInit+0x3c>)
 8004df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM12_MspInit 1 */

  }

}
 8004dfe:	bf00      	nop
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	40001800 	.word	0x40001800
 8004e10:	40023800 	.word	0x40023800

08004e14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08c      	sub	sp, #48	@ 0x30
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e1c:	f107 031c 	add.w	r3, r7, #28
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	605a      	str	r2, [r3, #4]
 8004e26:	609a      	str	r2, [r3, #8]
 8004e28:	60da      	str	r2, [r3, #12]
 8004e2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a56      	ldr	r2, [pc, #344]	@ (8004f8c <HAL_TIM_MspPostInit+0x178>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d11d      	bne.n	8004e72 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e36:	4b56      	ldr	r3, [pc, #344]	@ (8004f90 <HAL_TIM_MspPostInit+0x17c>)
 8004e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e3a:	4a55      	ldr	r2, [pc, #340]	@ (8004f90 <HAL_TIM_MspPostInit+0x17c>)
 8004e3c:	f043 0301 	orr.w	r3, r3, #1
 8004e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e42:	4b53      	ldr	r3, [pc, #332]	@ (8004f90 <HAL_TIM_MspPostInit+0x17c>)
 8004e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	61bb      	str	r3, [r7, #24]
 8004e4c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8004e4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e54:	2302      	movs	r3, #2
 8004e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004e60:	2301      	movs	r3, #1
 8004e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8004e64:	f107 031c 	add.w	r3, r7, #28
 8004e68:	4619      	mov	r1, r3
 8004e6a:	484a      	ldr	r0, [pc, #296]	@ (8004f94 <HAL_TIM_MspPostInit+0x180>)
 8004e6c:	f003 fce0 	bl	8008830 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004e70:	e087      	b.n	8004f82 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e7a:	d11d      	bne.n	8004eb8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e7c:	4b44      	ldr	r3, [pc, #272]	@ (8004f90 <HAL_TIM_MspPostInit+0x17c>)
 8004e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e80:	4a43      	ldr	r2, [pc, #268]	@ (8004f90 <HAL_TIM_MspPostInit+0x17c>)
 8004e82:	f043 0301 	orr.w	r3, r3, #1
 8004e86:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e88:	4b41      	ldr	r3, [pc, #260]	@ (8004f90 <HAL_TIM_MspPostInit+0x17c>)
 8004e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	617b      	str	r3, [r7, #20]
 8004e92:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8004e94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8004eaa:	f107 031c 	add.w	r3, r7, #28
 8004eae:	4619      	mov	r1, r3
 8004eb0:	4838      	ldr	r0, [pc, #224]	@ (8004f94 <HAL_TIM_MspPostInit+0x180>)
 8004eb2:	f003 fcbd 	bl	8008830 <HAL_GPIO_Init>
}
 8004eb6:	e064      	b.n	8004f82 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a36      	ldr	r2, [pc, #216]	@ (8004f98 <HAL_TIM_MspPostInit+0x184>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d11c      	bne.n	8004efc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ec2:	4b33      	ldr	r3, [pc, #204]	@ (8004f90 <HAL_TIM_MspPostInit+0x17c>)
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec6:	4a32      	ldr	r2, [pc, #200]	@ (8004f90 <HAL_TIM_MspPostInit+0x17c>)
 8004ec8:	f043 0302 	orr.w	r3, r3, #2
 8004ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ece:	4b30      	ldr	r3, [pc, #192]	@ (8004f90 <HAL_TIM_MspPostInit+0x17c>)
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	613b      	str	r3, [r7, #16]
 8004ed8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8004eda:	2310      	movs	r3, #16
 8004edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ede:	2302      	movs	r3, #2
 8004ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004eea:	2302      	movs	r3, #2
 8004eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8004eee:	f107 031c 	add.w	r3, r7, #28
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	4829      	ldr	r0, [pc, #164]	@ (8004f9c <HAL_TIM_MspPostInit+0x188>)
 8004ef6:	f003 fc9b 	bl	8008830 <HAL_GPIO_Init>
}
 8004efa:	e042      	b.n	8004f82 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a27      	ldr	r2, [pc, #156]	@ (8004fa0 <HAL_TIM_MspPostInit+0x18c>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d11c      	bne.n	8004f40 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004f06:	4b22      	ldr	r3, [pc, #136]	@ (8004f90 <HAL_TIM_MspPostInit+0x17c>)
 8004f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0a:	4a21      	ldr	r2, [pc, #132]	@ (8004f90 <HAL_TIM_MspPostInit+0x17c>)
 8004f0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f12:	4b1f      	ldr	r3, [pc, #124]	@ (8004f90 <HAL_TIM_MspPostInit+0x17c>)
 8004f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f22:	2302      	movs	r3, #2
 8004f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f26:	2300      	movs	r3, #0
 8004f28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004f2e:	2302      	movs	r3, #2
 8004f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8004f32:	f107 031c 	add.w	r3, r7, #28
 8004f36:	4619      	mov	r1, r3
 8004f38:	481a      	ldr	r0, [pc, #104]	@ (8004fa4 <HAL_TIM_MspPostInit+0x190>)
 8004f3a:	f003 fc79 	bl	8008830 <HAL_GPIO_Init>
}
 8004f3e:	e020      	b.n	8004f82 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a18      	ldr	r2, [pc, #96]	@ (8004fa8 <HAL_TIM_MspPostInit+0x194>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d11b      	bne.n	8004f82 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004f4a:	4b11      	ldr	r3, [pc, #68]	@ (8004f90 <HAL_TIM_MspPostInit+0x17c>)
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4e:	4a10      	ldr	r2, [pc, #64]	@ (8004f90 <HAL_TIM_MspPostInit+0x17c>)
 8004f50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f56:	4b0e      	ldr	r3, [pc, #56]	@ (8004f90 <HAL_TIM_MspPostInit+0x17c>)
 8004f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f5e:	60bb      	str	r3, [r7, #8]
 8004f60:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8004f62:	2340      	movs	r3, #64	@ 0x40
 8004f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f66:	2302      	movs	r3, #2
 8004f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004f72:	2309      	movs	r3, #9
 8004f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8004f76:	f107 031c 	add.w	r3, r7, #28
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	480b      	ldr	r0, [pc, #44]	@ (8004fac <HAL_TIM_MspPostInit+0x198>)
 8004f7e:	f003 fc57 	bl	8008830 <HAL_GPIO_Init>
}
 8004f82:	bf00      	nop
 8004f84:	3730      	adds	r7, #48	@ 0x30
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	40010000 	.word	0x40010000
 8004f90:	40023800 	.word	0x40023800
 8004f94:	40020000 	.word	0x40020000
 8004f98:	40000400 	.word	0x40000400
 8004f9c:	40020400 	.word	0x40020400
 8004fa0:	40000c00 	.word	0x40000c00
 8004fa4:	40022000 	.word	0x40022000
 8004fa8:	40001800 	.word	0x40001800
 8004fac:	40021c00 	.word	0x40021c00

08004fb0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b0ae      	sub	sp, #184	@ 0xb8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fb8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	605a      	str	r2, [r3, #4]
 8004fc2:	609a      	str	r2, [r3, #8]
 8004fc4:	60da      	str	r2, [r3, #12]
 8004fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004fc8:	f107 0320 	add.w	r3, r7, #32
 8004fcc:	2284      	movs	r2, #132	@ 0x84
 8004fce:	2100      	movs	r1, #0
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f013 f96f 	bl	80182b4 <memset>
  if(huart->Instance==USART1)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a53      	ldr	r2, [pc, #332]	@ (8005128 <HAL_UART_MspInit+0x178>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d15d      	bne.n	800509c <HAL_UART_MspInit+0xec>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004fe0:	2340      	movs	r3, #64	@ 0x40
 8004fe2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004fe8:	f107 0320 	add.w	r3, r7, #32
 8004fec:	4618      	mov	r0, r3
 8004fee:	f006 fdc7 	bl	800bb80 <HAL_RCCEx_PeriphCLKConfig>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004ff8:	f7ff f898 	bl	800412c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004ffc:	4b4b      	ldr	r3, [pc, #300]	@ (800512c <HAL_UART_MspInit+0x17c>)
 8004ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005000:	4a4a      	ldr	r2, [pc, #296]	@ (800512c <HAL_UART_MspInit+0x17c>)
 8005002:	f043 0310 	orr.w	r3, r3, #16
 8005006:	6453      	str	r3, [r2, #68]	@ 0x44
 8005008:	4b48      	ldr	r3, [pc, #288]	@ (800512c <HAL_UART_MspInit+0x17c>)
 800500a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800500c:	f003 0310 	and.w	r3, r3, #16
 8005010:	61fb      	str	r3, [r7, #28]
 8005012:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005014:	4b45      	ldr	r3, [pc, #276]	@ (800512c <HAL_UART_MspInit+0x17c>)
 8005016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005018:	4a44      	ldr	r2, [pc, #272]	@ (800512c <HAL_UART_MspInit+0x17c>)
 800501a:	f043 0302 	orr.w	r3, r3, #2
 800501e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005020:	4b42      	ldr	r3, [pc, #264]	@ (800512c <HAL_UART_MspInit+0x17c>)
 8005022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	61bb      	str	r3, [r7, #24]
 800502a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800502c:	4b3f      	ldr	r3, [pc, #252]	@ (800512c <HAL_UART_MspInit+0x17c>)
 800502e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005030:	4a3e      	ldr	r2, [pc, #248]	@ (800512c <HAL_UART_MspInit+0x17c>)
 8005032:	f043 0301 	orr.w	r3, r3, #1
 8005036:	6313      	str	r3, [r2, #48]	@ 0x30
 8005038:	4b3c      	ldr	r3, [pc, #240]	@ (800512c <HAL_UART_MspInit+0x17c>)
 800503a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	617b      	str	r3, [r7, #20]
 8005042:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8005044:	2380      	movs	r3, #128	@ 0x80
 8005046:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800504a:	2302      	movs	r3, #2
 800504c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005050:	2300      	movs	r3, #0
 8005052:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005056:	2300      	movs	r3, #0
 8005058:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800505c:	2307      	movs	r3, #7
 800505e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8005062:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8005066:	4619      	mov	r1, r3
 8005068:	4831      	ldr	r0, [pc, #196]	@ (8005130 <HAL_UART_MspInit+0x180>)
 800506a:	f003 fbe1 	bl	8008830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800506e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005072:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005076:	2302      	movs	r3, #2
 8005078:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507c:	2300      	movs	r3, #0
 800507e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005082:	2300      	movs	r3, #0
 8005084:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005088:	2307      	movs	r3, #7
 800508a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800508e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8005092:	4619      	mov	r1, r3
 8005094:	4827      	ldr	r0, [pc, #156]	@ (8005134 <HAL_UART_MspInit+0x184>)
 8005096:	f003 fbcb 	bl	8008830 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 800509a:	e040      	b.n	800511e <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a25      	ldr	r2, [pc, #148]	@ (8005138 <HAL_UART_MspInit+0x188>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d13b      	bne.n	800511e <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80050a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80050aa:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80050ac:	2300      	movs	r3, #0
 80050ae:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80050b0:	f107 0320 	add.w	r3, r7, #32
 80050b4:	4618      	mov	r0, r3
 80050b6:	f006 fd63 	bl	800bb80 <HAL_RCCEx_PeriphCLKConfig>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <HAL_UART_MspInit+0x114>
      Error_Handler();
 80050c0:	f7ff f834 	bl	800412c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80050c4:	4b19      	ldr	r3, [pc, #100]	@ (800512c <HAL_UART_MspInit+0x17c>)
 80050c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050c8:	4a18      	ldr	r2, [pc, #96]	@ (800512c <HAL_UART_MspInit+0x17c>)
 80050ca:	f043 0320 	orr.w	r3, r3, #32
 80050ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80050d0:	4b16      	ldr	r3, [pc, #88]	@ (800512c <HAL_UART_MspInit+0x17c>)
 80050d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d4:	f003 0320 	and.w	r3, r3, #32
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050dc:	4b13      	ldr	r3, [pc, #76]	@ (800512c <HAL_UART_MspInit+0x17c>)
 80050de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e0:	4a12      	ldr	r2, [pc, #72]	@ (800512c <HAL_UART_MspInit+0x17c>)
 80050e2:	f043 0304 	orr.w	r3, r3, #4
 80050e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80050e8:	4b10      	ldr	r3, [pc, #64]	@ (800512c <HAL_UART_MspInit+0x17c>)
 80050ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80050f4:	23c0      	movs	r3, #192	@ 0xc0
 80050f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050fa:	2302      	movs	r3, #2
 80050fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005100:	2300      	movs	r3, #0
 8005102:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005106:	2303      	movs	r3, #3
 8005108:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800510c:	2308      	movs	r3, #8
 800510e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005112:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8005116:	4619      	mov	r1, r3
 8005118:	4808      	ldr	r0, [pc, #32]	@ (800513c <HAL_UART_MspInit+0x18c>)
 800511a:	f003 fb89 	bl	8008830 <HAL_GPIO_Init>
}
 800511e:	bf00      	nop
 8005120:	37b8      	adds	r7, #184	@ 0xb8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	40011000 	.word	0x40011000
 800512c:	40023800 	.word	0x40023800
 8005130:	40020400 	.word	0x40020400
 8005134:	40020000 	.word	0x40020000
 8005138:	40011400 	.word	0x40011400
 800513c:	40020800 	.word	0x40020800

08005140 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005146:	1d3b      	adds	r3, r7, #4
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	605a      	str	r2, [r3, #4]
 800514e:	609a      	str	r2, [r3, #8]
 8005150:	60da      	str	r2, [r3, #12]
 8005152:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8005154:	4b3a      	ldr	r3, [pc, #232]	@ (8005240 <HAL_FMC_MspInit+0x100>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d16d      	bne.n	8005238 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800515c:	4b38      	ldr	r3, [pc, #224]	@ (8005240 <HAL_FMC_MspInit+0x100>)
 800515e:	2201      	movs	r2, #1
 8005160:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005162:	4b38      	ldr	r3, [pc, #224]	@ (8005244 <HAL_FMC_MspInit+0x104>)
 8005164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005166:	4a37      	ldr	r2, [pc, #220]	@ (8005244 <HAL_FMC_MspInit+0x104>)
 8005168:	f043 0301 	orr.w	r3, r3, #1
 800516c:	6393      	str	r3, [r2, #56]	@ 0x38
 800516e:	4b35      	ldr	r3, [pc, #212]	@ (8005244 <HAL_FMC_MspInit+0x104>)
 8005170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800517a:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800517e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005180:	2302      	movs	r3, #2
 8005182:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005184:	2300      	movs	r3, #0
 8005186:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005188:	2303      	movs	r3, #3
 800518a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800518c:	230c      	movs	r3, #12
 800518e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005190:	1d3b      	adds	r3, r7, #4
 8005192:	4619      	mov	r1, r3
 8005194:	482c      	ldr	r0, [pc, #176]	@ (8005248 <HAL_FMC_MspInit+0x108>)
 8005196:	f003 fb4b 	bl	8008830 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800519a:	f248 1333 	movw	r3, #33075	@ 0x8133
 800519e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a0:	2302      	movs	r3, #2
 80051a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a4:	2300      	movs	r3, #0
 80051a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051a8:	2303      	movs	r3, #3
 80051aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80051ac:	230c      	movs	r3, #12
 80051ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80051b0:	1d3b      	adds	r3, r7, #4
 80051b2:	4619      	mov	r1, r3
 80051b4:	4825      	ldr	r0, [pc, #148]	@ (800524c <HAL_FMC_MspInit+0x10c>)
 80051b6:	f003 fb3b 	bl	8008830 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80051ba:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80051be:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051c0:	2302      	movs	r3, #2
 80051c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051c4:	2300      	movs	r3, #0
 80051c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051c8:	2303      	movs	r3, #3
 80051ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80051cc:	230c      	movs	r3, #12
 80051ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051d0:	1d3b      	adds	r3, r7, #4
 80051d2:	4619      	mov	r1, r3
 80051d4:	481e      	ldr	r0, [pc, #120]	@ (8005250 <HAL_FMC_MspInit+0x110>)
 80051d6:	f003 fb2b 	bl	8008830 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80051da:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80051de:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051e0:	2302      	movs	r3, #2
 80051e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e4:	2300      	movs	r3, #0
 80051e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051e8:	2303      	movs	r3, #3
 80051ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80051ec:	230c      	movs	r3, #12
 80051ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80051f0:	1d3b      	adds	r3, r7, #4
 80051f2:	4619      	mov	r1, r3
 80051f4:	4817      	ldr	r0, [pc, #92]	@ (8005254 <HAL_FMC_MspInit+0x114>)
 80051f6:	f003 fb1b 	bl	8008830 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80051fa:	2328      	movs	r3, #40	@ 0x28
 80051fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051fe:	2302      	movs	r3, #2
 8005200:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005202:	2300      	movs	r3, #0
 8005204:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005206:	2303      	movs	r3, #3
 8005208:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800520a:	230c      	movs	r3, #12
 800520c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800520e:	1d3b      	adds	r3, r7, #4
 8005210:	4619      	mov	r1, r3
 8005212:	4811      	ldr	r0, [pc, #68]	@ (8005258 <HAL_FMC_MspInit+0x118>)
 8005214:	f003 fb0c 	bl	8008830 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8005218:	2308      	movs	r3, #8
 800521a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800521c:	2302      	movs	r3, #2
 800521e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005220:	2300      	movs	r3, #0
 8005222:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005224:	2303      	movs	r3, #3
 8005226:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005228:	230c      	movs	r3, #12
 800522a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800522c:	1d3b      	adds	r3, r7, #4
 800522e:	4619      	mov	r1, r3
 8005230:	480a      	ldr	r0, [pc, #40]	@ (800525c <HAL_FMC_MspInit+0x11c>)
 8005232:	f003 fafd 	bl	8008830 <HAL_GPIO_Init>
 8005236:	e000      	b.n	800523a <HAL_FMC_MspInit+0xfa>
    return;
 8005238:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	20001590 	.word	0x20001590
 8005244:	40023800 	.word	0x40023800
 8005248:	40021000 	.word	0x40021000
 800524c:	40021800 	.word	0x40021800
 8005250:	40020c00 	.word	0x40020c00
 8005254:	40021400 	.word	0x40021400
 8005258:	40021c00 	.word	0x40021c00
 800525c:	40020800 	.word	0x40020800

08005260 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8005268:	f7ff ff6a 	bl	8005140 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800526c:	bf00      	nop
 800526e:	3708      	adds	r7, #8
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b08a      	sub	sp, #40	@ 0x28
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a2b      	ldr	r2, [pc, #172]	@ (8005330 <HAL_SAI_MspInit+0xbc>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d124      	bne.n	80052d0 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8005286:	4b2b      	ldr	r3, [pc, #172]	@ (8005334 <HAL_SAI_MspInit+0xc0>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10b      	bne.n	80052a6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800528e:	4b2a      	ldr	r3, [pc, #168]	@ (8005338 <HAL_SAI_MspInit+0xc4>)
 8005290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005292:	4a29      	ldr	r2, [pc, #164]	@ (8005338 <HAL_SAI_MspInit+0xc4>)
 8005294:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005298:	6453      	str	r3, [r2, #68]	@ 0x44
 800529a:	4b27      	ldr	r3, [pc, #156]	@ (8005338 <HAL_SAI_MspInit+0xc4>)
 800529c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800529e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052a2:	613b      	str	r3, [r7, #16]
 80052a4:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80052a6:	4b23      	ldr	r3, [pc, #140]	@ (8005334 <HAL_SAI_MspInit+0xc0>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3301      	adds	r3, #1
 80052ac:	4a21      	ldr	r2, [pc, #132]	@ (8005334 <HAL_SAI_MspInit+0xc0>)
 80052ae:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80052b0:	23f0      	movs	r3, #240	@ 0xf0
 80052b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052b4:	2302      	movs	r3, #2
 80052b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b8:	2300      	movs	r3, #0
 80052ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052bc:	2300      	movs	r3, #0
 80052be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80052c0:	230a      	movs	r3, #10
 80052c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80052c4:	f107 0314 	add.w	r3, r7, #20
 80052c8:	4619      	mov	r1, r3
 80052ca:	481c      	ldr	r0, [pc, #112]	@ (800533c <HAL_SAI_MspInit+0xc8>)
 80052cc:	f003 fab0 	bl	8008830 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a1a      	ldr	r2, [pc, #104]	@ (8005340 <HAL_SAI_MspInit+0xcc>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d125      	bne.n	8005326 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80052da:	4b16      	ldr	r3, [pc, #88]	@ (8005334 <HAL_SAI_MspInit+0xc0>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10b      	bne.n	80052fa <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80052e2:	4b15      	ldr	r3, [pc, #84]	@ (8005338 <HAL_SAI_MspInit+0xc4>)
 80052e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052e6:	4a14      	ldr	r2, [pc, #80]	@ (8005338 <HAL_SAI_MspInit+0xc4>)
 80052e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80052ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80052ee:	4b12      	ldr	r3, [pc, #72]	@ (8005338 <HAL_SAI_MspInit+0xc4>)
 80052f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80052fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005334 <HAL_SAI_MspInit+0xc0>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3301      	adds	r3, #1
 8005300:	4a0c      	ldr	r2, [pc, #48]	@ (8005334 <HAL_SAI_MspInit+0xc0>)
 8005302:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8005304:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800530a:	2302      	movs	r3, #2
 800530c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800530e:	2300      	movs	r3, #0
 8005310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005312:	2300      	movs	r3, #0
 8005314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8005316:	230a      	movs	r3, #10
 8005318:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800531a:	f107 0314 	add.w	r3, r7, #20
 800531e:	4619      	mov	r1, r3
 8005320:	4808      	ldr	r0, [pc, #32]	@ (8005344 <HAL_SAI_MspInit+0xd0>)
 8005322:	f003 fa85 	bl	8008830 <HAL_GPIO_Init>

    }
}
 8005326:	bf00      	nop
 8005328:	3728      	adds	r7, #40	@ 0x28
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	40015c04 	.word	0x40015c04
 8005334:	20001594 	.word	0x20001594
 8005338:	40023800 	.word	0x40023800
 800533c:	40022000 	.word	0x40022000
 8005340:	40015c24 	.word	0x40015c24
 8005344:	40021800 	.word	0x40021800

08005348 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b08e      	sub	sp, #56	@ 0x38
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005358:	4b33      	ldr	r3, [pc, #204]	@ (8005428 <HAL_InitTick+0xe0>)
 800535a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535c:	4a32      	ldr	r2, [pc, #200]	@ (8005428 <HAL_InitTick+0xe0>)
 800535e:	f043 0310 	orr.w	r3, r3, #16
 8005362:	6413      	str	r3, [r2, #64]	@ 0x40
 8005364:	4b30      	ldr	r3, [pc, #192]	@ (8005428 <HAL_InitTick+0xe0>)
 8005366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005368:	f003 0310 	and.w	r3, r3, #16
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005370:	f107 0210 	add.w	r2, r7, #16
 8005374:	f107 0314 	add.w	r3, r7, #20
 8005378:	4611      	mov	r1, r2
 800537a:	4618      	mov	r0, r3
 800537c:	f006 fbce 	bl	800bb1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005386:	2b00      	cmp	r3, #0
 8005388:	d103      	bne.n	8005392 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800538a:	f006 fb9f 	bl	800bacc <HAL_RCC_GetPCLK1Freq>
 800538e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005390:	e004      	b.n	800539c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005392:	f006 fb9b 	bl	800bacc <HAL_RCC_GetPCLK1Freq>
 8005396:	4603      	mov	r3, r0
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800539c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800539e:	4a23      	ldr	r2, [pc, #140]	@ (800542c <HAL_InitTick+0xe4>)
 80053a0:	fba2 2303 	umull	r2, r3, r2, r3
 80053a4:	0c9b      	lsrs	r3, r3, #18
 80053a6:	3b01      	subs	r3, #1
 80053a8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80053aa:	4b21      	ldr	r3, [pc, #132]	@ (8005430 <HAL_InitTick+0xe8>)
 80053ac:	4a21      	ldr	r2, [pc, #132]	@ (8005434 <HAL_InitTick+0xec>)
 80053ae:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80053b0:	4b1f      	ldr	r3, [pc, #124]	@ (8005430 <HAL_InitTick+0xe8>)
 80053b2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80053b6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80053b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005430 <HAL_InitTick+0xe8>)
 80053ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053bc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80053be:	4b1c      	ldr	r3, [pc, #112]	@ (8005430 <HAL_InitTick+0xe8>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053c4:	4b1a      	ldr	r3, [pc, #104]	@ (8005430 <HAL_InitTick+0xe8>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053ca:	4b19      	ldr	r3, [pc, #100]	@ (8005430 <HAL_InitTick+0xe8>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80053d0:	4817      	ldr	r0, [pc, #92]	@ (8005430 <HAL_InitTick+0xe8>)
 80053d2:	f009 f954 	bl	800e67e <HAL_TIM_Base_Init>
 80053d6:	4603      	mov	r3, r0
 80053d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80053dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d11b      	bne.n	800541c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80053e4:	4812      	ldr	r0, [pc, #72]	@ (8005430 <HAL_InitTick+0xe8>)
 80053e6:	f009 f9a1 	bl	800e72c <HAL_TIM_Base_Start_IT>
 80053ea:	4603      	mov	r3, r0
 80053ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80053f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d111      	bne.n	800541c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80053f8:	2036      	movs	r0, #54	@ 0x36
 80053fa:	f001 fef1 	bl	80071e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2b0f      	cmp	r3, #15
 8005402:	d808      	bhi.n	8005416 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8005404:	2200      	movs	r2, #0
 8005406:	6879      	ldr	r1, [r7, #4]
 8005408:	2036      	movs	r0, #54	@ 0x36
 800540a:	f001 fecd 	bl	80071a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800540e:	4a0a      	ldr	r2, [pc, #40]	@ (8005438 <HAL_InitTick+0xf0>)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	e002      	b.n	800541c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800541c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8005420:	4618      	mov	r0, r3
 8005422:	3738      	adds	r7, #56	@ 0x38
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	40023800 	.word	0x40023800
 800542c:	431bde83 	.word	0x431bde83
 8005430:	20001598 	.word	0x20001598
 8005434:	40001000 	.word	0x40001000
 8005438:	20000070 	.word	0x20000070

0800543c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005440:	bf00      	nop
 8005442:	e7fd      	b.n	8005440 <NMI_Handler+0x4>

08005444 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005448:	bf00      	nop
 800544a:	e7fd      	b.n	8005448 <HardFault_Handler+0x4>

0800544c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005450:	bf00      	nop
 8005452:	e7fd      	b.n	8005450 <MemManage_Handler+0x4>

08005454 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005454:	b480      	push	{r7}
 8005456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005458:	bf00      	nop
 800545a:	e7fd      	b.n	8005458 <BusFault_Handler+0x4>

0800545c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005460:	bf00      	nop
 8005462:	e7fd      	b.n	8005460 <UsageFault_Handler+0x4>

08005464 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005464:	b480      	push	{r7}
 8005466:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005468:	bf00      	nop
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
	...

08005474 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005478:	4802      	ldr	r0, [pc, #8]	@ (8005484 <TIM6_DAC_IRQHandler+0x10>)
 800547a:	f009 fa26 	bl	800e8ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800547e:	bf00      	nop
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	20001598 	.word	0x20001598

08005488 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800548c:	4802      	ldr	r0, [pc, #8]	@ (8005498 <OTG_FS_IRQHandler+0x10>)
 800548e:	f003 fbac 	bl	8008bea <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005492:	bf00      	nop
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	20011ec4 	.word	0x20011ec4

0800549c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80054a0:	4802      	ldr	r0, [pc, #8]	@ (80054ac <LTDC_IRQHandler+0x10>)
 80054a2:	f005 fb19 	bl	800aad8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80054a6:	bf00      	nop
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000ca0 	.word	0x20000ca0

080054b0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80054b4:	4802      	ldr	r0, [pc, #8]	@ (80054c0 <DMA2D_IRQHandler+0x10>)
 80054b6:	f002 fccb 	bl	8007e50 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80054ba:	bf00      	nop
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	20000b08 	.word	0x20000b08

080054c4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt (USART6_RX).
  */
void DMA2_Stream1_IRQHandler(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80054c8:	4802      	ldr	r0, [pc, #8]	@ (80054d4 <DMA2_Stream1_IRQHandler+0x10>)
 80054ca:	f002 fa01 	bl	80078d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80054ce:	bf00      	nop
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	20001518 	.word	0x20001518

080054d8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  
  // IDLE 인터럽트 체크 (메시지 끝 감지)
  if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
 80054dc:	4b09      	ldr	r3, [pc, #36]	@ (8005504 <USART6_IRQHandler+0x2c>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f003 0310 	and.w	r3, r3, #16
 80054e6:	2b10      	cmp	r3, #16
 80054e8:	d106      	bne.n	80054f8 <USART6_IRQHandler+0x20>
    __HAL_UART_CLEAR_IDLEFLAG(&huart6);  // IDLE 플래그 클리어
 80054ea:	4b06      	ldr	r3, [pc, #24]	@ (8005504 <USART6_IRQHandler+0x2c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2210      	movs	r2, #16
 80054f0:	621a      	str	r2, [r3, #32]
    
    // 외부 함수 호출
    extern void USER_UART_IDLECallback(UART_HandleTypeDef *huart);
    USER_UART_IDLECallback(&huart6);
 80054f2:	4804      	ldr	r0, [pc, #16]	@ (8005504 <USART6_IRQHandler+0x2c>)
 80054f4:	f001 f9fa 	bl	80068ec <USER_UART_IDLECallback>
  }

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80054f8:	4802      	ldr	r0, [pc, #8]	@ (8005504 <USART6_IRQHandler+0x2c>)
 80054fa:	f00a fc31 	bl	800fd60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80054fe:	bf00      	nop
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	20001240 	.word	0x20001240

08005508 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005514:	2300      	movs	r3, #0
 8005516:	617b      	str	r3, [r7, #20]
 8005518:	e00a      	b.n	8005530 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800551a:	f3af 8000 	nop.w
 800551e:	4601      	mov	r1, r0
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	1c5a      	adds	r2, r3, #1
 8005524:	60ba      	str	r2, [r7, #8]
 8005526:	b2ca      	uxtb	r2, r1
 8005528:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	3301      	adds	r3, #1
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	429a      	cmp	r2, r3
 8005536:	dbf0      	blt.n	800551a <_read+0x12>
  }

  return len;
 8005538:	687b      	ldr	r3, [r7, #4]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3718      	adds	r7, #24
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b086      	sub	sp, #24
 8005546:	af00      	add	r7, sp, #0
 8005548:	60f8      	str	r0, [r7, #12]
 800554a:	60b9      	str	r1, [r7, #8]
 800554c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800554e:	2300      	movs	r3, #0
 8005550:	617b      	str	r3, [r7, #20]
 8005552:	e009      	b.n	8005568 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	60ba      	str	r2, [r7, #8]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	4618      	mov	r0, r3
 800555e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	3301      	adds	r3, #1
 8005566:	617b      	str	r3, [r7, #20]
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	429a      	cmp	r2, r3
 800556e:	dbf1      	blt.n	8005554 <_write+0x12>
  }
  return len;
 8005570:	687b      	ldr	r3, [r7, #4]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3718      	adds	r7, #24
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <_close>:

int _close(int file)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005582:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005586:	4618      	mov	r0, r3
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80055a2:	605a      	str	r2, [r3, #4]
  return 0;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <_isatty>:

int _isatty(int file)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b083      	sub	sp, #12
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80055ba:	2301      	movs	r3, #1
}
 80055bc:	4618      	mov	r0, r3
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
	...

080055e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80055ec:	4a14      	ldr	r2, [pc, #80]	@ (8005640 <_sbrk+0x5c>)
 80055ee:	4b15      	ldr	r3, [pc, #84]	@ (8005644 <_sbrk+0x60>)
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80055f8:	4b13      	ldr	r3, [pc, #76]	@ (8005648 <_sbrk+0x64>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d102      	bne.n	8005606 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005600:	4b11      	ldr	r3, [pc, #68]	@ (8005648 <_sbrk+0x64>)
 8005602:	4a12      	ldr	r2, [pc, #72]	@ (800564c <_sbrk+0x68>)
 8005604:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005606:	4b10      	ldr	r3, [pc, #64]	@ (8005648 <_sbrk+0x64>)
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4413      	add	r3, r2
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	429a      	cmp	r2, r3
 8005612:	d207      	bcs.n	8005624 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005614:	f012 fee2 	bl	80183dc <__errno>
 8005618:	4603      	mov	r3, r0
 800561a:	220c      	movs	r2, #12
 800561c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800561e:	f04f 33ff 	mov.w	r3, #4294967295
 8005622:	e009      	b.n	8005638 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005624:	4b08      	ldr	r3, [pc, #32]	@ (8005648 <_sbrk+0x64>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800562a:	4b07      	ldr	r3, [pc, #28]	@ (8005648 <_sbrk+0x64>)
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4413      	add	r3, r2
 8005632:	4a05      	ldr	r2, [pc, #20]	@ (8005648 <_sbrk+0x64>)
 8005634:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005636:	68fb      	ldr	r3, [r7, #12]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3718      	adds	r7, #24
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	20050000 	.word	0x20050000
 8005644:	00000400 	.word	0x00000400
 8005648:	200015e4 	.word	0x200015e4
 800564c:	200123f0 	.word	0x200123f0

08005650 <ErrorCode_IsSuccess>:
/**
 * @brief 에러 코드가 성공인지 확인
 * @param result_code 결과 코드
 * @return true if success, false if error
 */
static inline bool ErrorCode_IsSuccess(ResultCode result_code) {
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
    return result_code == RESULT_SUCCESS;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	bf0c      	ite	eq
 800565e:	2301      	moveq	r3, #1
 8005660:	2300      	movne	r3, #0
 8005662:	b2db      	uxtb	r3, r3
}
 8005664:	4618      	mov	r0, r3
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <_init_lora_config_defaults>:

/**
 * @brief LoRa 설정 기본값 설정
 */
static void _init_lora_config_defaults(RuntimeLoRaConfig* config)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
    config->send_interval_ms = LORA_SEND_INTERVAL_MS;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a14      	ldr	r2, [pc, #80]	@ (80056cc <_init_lora_config_defaults+0x5c>)
 800567c:	601a      	str	r2, [r3, #0]
    config->max_retry_count = LORA_MAX_RETRY_COUNT;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	605a      	str	r2, [r3, #4]
    config->retry_delay_ms = LORA_RETRY_DELAY_MS;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800568a:	609a      	str	r2, [r3, #8]
    config->time_sync_delay_ms = LORA_TIME_SYNC_DELAY_MS;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005692:	60da      	str	r2, [r3, #12]
    config->response_timeout_ms = LORA_RESPONSE_TIMEOUT_MS;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800569a:	611a      	str	r2, [r3, #16]
    config->message_number_max = LORA_MESSAGE_NUMBER_MAX;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f242 720f 	movw	r2, #9999	@ 0x270f
 80056a2:	829a      	strh	r2, [r3, #20]
    strncpy(config->default_message, "TEST", sizeof(config->default_message) - 1);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3316      	adds	r3, #22
 80056a8:	221f      	movs	r2, #31
 80056aa:	4909      	ldr	r1, [pc, #36]	@ (80056d0 <_init_lora_config_defaults+0x60>)
 80056ac:	4618      	mov	r0, r3
 80056ae:	f012 fe16 	bl	80182de <strncpy>
    config->auto_retry_enabled = (LORA_MAX_RETRY_COUNT > 0);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    config->time_sync_enabled = true;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
}
 80056c2:	bf00      	nop
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	000493e0 	.word	0x000493e0
 80056d0:	0801c3f4 	.word	0x0801c3f4

080056d4 <_init_uart_config_defaults>:

/**
 * @brief UART 설정 기본값 설정
 */
static void _init_uart_config_defaults(RuntimeUartConfig* config)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
    config->baudrate = UART_BAUDRATE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80056e2:	601a      	str	r2, [r3, #0]
    config->rx_buffer_size = UART_RX_BUFFER_SIZE;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056ea:	809a      	strh	r2, [r3, #4]
    config->tx_buffer_size = 256;  // 기본 송신 버퍼 크기
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056f2:	80da      	strh	r2, [r3, #6]
    config->timeout_ms = 1000;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80056fa:	609a      	str	r2, [r3, #8]
    config->data_bits = 8;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2208      	movs	r2, #8
 8005700:	731a      	strb	r2, [r3, #12]
    config->stop_bits = 1;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	735a      	strb	r2, [r3, #13]
    config->parity = 0;  // 패리티 없음
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	739a      	strb	r2, [r3, #14]
    config->flow_control_enabled = false;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	73da      	strb	r2, [r3, #15]
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <_init_sd_config_defaults>:

/**
 * @brief SD 카드 설정 기본값 설정
 */
static void _init_sd_config_defaults(RuntimeSDCardConfig* config)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
    config->mount_retry_count = SD_MOUNT_RETRY_COUNT;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2203      	movs	r2, #3
 800572c:	701a      	strb	r2, [r3, #0]
    config->mount_retry_delay_ms = SD_MOUNT_RETRY_DELAY_MS;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005734:	605a      	str	r2, [r3, #4]
    config->stabilize_delay_ms = SD_CARD_STABILIZE_DELAY_MS;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800573c:	609a      	str	r2, [r3, #8]
    config->transfer_wait_max_count = SD_TRANSFER_WAIT_MAX_COUNT;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2232      	movs	r2, #50	@ 0x32
 8005742:	731a      	strb	r2, [r3, #12]
    config->transfer_check_interval_ms = SD_TRANSFER_CHECK_INTERVAL_MS;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2264      	movs	r2, #100	@ 0x64
 8005748:	611a      	str	r2, [r3, #16]
    config->log_file_max_size = SD_LOG_FILE_MAX_SIZE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a0d      	ldr	r2, [pc, #52]	@ (8005784 <_init_sd_config_defaults+0x64>)
 800574e:	615a      	str	r2, [r3, #20]
    strncpy(config->log_directory, "lora_logs", sizeof(config->log_directory) - 1);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	3318      	adds	r3, #24
 8005754:	223f      	movs	r2, #63	@ 0x3f
 8005756:	490c      	ldr	r1, [pc, #48]	@ (8005788 <_init_sd_config_defaults+0x68>)
 8005758:	4618      	mov	r0, r3
 800575a:	f012 fdc0 	bl	80182de <strncpy>
    strncpy(config->log_file_prefix, "LORA", sizeof(config->log_file_prefix) - 1);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	3358      	adds	r3, #88	@ 0x58
 8005762:	221f      	movs	r2, #31
 8005764:	4909      	ldr	r1, [pc, #36]	@ (800578c <_init_sd_config_defaults+0x6c>)
 8005766:	4618      	mov	r0, r3
 8005768:	f012 fdb9 	bl	80182de <strncpy>
    config->auto_format_enabled = true;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    config->compression_enabled = false;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
}
 800577c:	bf00      	nop
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	000f4240 	.word	0x000f4240
 8005788:	0801c3fc 	.word	0x0801c3fc
 800578c:	0801c408 	.word	0x0801c408

08005790 <_init_logger_config_defaults>:

/**
 * @brief 로거 설정 기본값 설정
 */
static void _init_logger_config_defaults(RuntimeLoggerConfig* config)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
    config->max_message_size = LOGGER_MAX_MESSAGE_SIZE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800579e:	801a      	strh	r2, [r3, #0]
    config->write_buffer_size = LOGGER_WRITE_BUFFER_SIZE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80057a6:	805a      	strh	r2, [r3, #2]
    config->sd_queue_size = LOGGER_SD_QUEUE_SIZE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	220a      	movs	r2, #10
 80057ac:	711a      	strb	r2, [r3, #4]
    config->log_level = LOG_LEVEL_INFO;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	715a      	strb	r2, [r3, #5]
    config->sd_log_level = LOG_LEVEL_WARN;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2202      	movs	r2, #2
 80057b8:	719a      	strb	r2, [r3, #6]
    config->timestamp_enabled = true;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	71da      	strb	r2, [r3, #7]
    config->dual_logging_enabled = true;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	721a      	strb	r2, [r3, #8]
    config->async_logging_enabled = true;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	725a      	strb	r2, [r3, #9]
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <_init_system_config_defaults>:

/**
 * @brief 시스템 설정 기본값 설정
 */
static void _init_system_config_defaults(SystemConfig* config)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
    config->boot_delay_ms = SYSTEM_BOOT_DELAY_MS;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057e6:	601a      	str	r2, [r3, #0]
    config->stabilize_delay_ms = SYSTEM_STABILIZE_DELAY_MS;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	22c8      	movs	r2, #200	@ 0xc8
 80057ec:	605a      	str	r2, [r3, #4]
    config->default_task_stack_size = SYSTEM_DEFAULT_TASK_STACK_SIZE;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80057f4:	811a      	strh	r2, [r3, #8]
    config->system_priority = 2;  // 중간 우선순위
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2202      	movs	r2, #2
 80057fa:	729a      	strb	r2, [r3, #10]
    config->debug_mode_enabled = DEBUG_MODE_ENABLED;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	72da      	strb	r2, [r3, #11]
    config->verbose_logging_enabled = VERBOSE_LOGGING_ENABLED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	731a      	strb	r2, [r3, #12]
    config->test_mode_enabled = TEST_MODE_ENABLED;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	735a      	strb	r2, [r3, #13]
    config->watchdog_enabled = false;  // 기본적으로 비활성화
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	739a      	strb	r2, [r3, #14]
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <_init_hardware_config_defaults>:

/**
 * @brief 하드웨어 설정 기본값 설정
 */
static void _init_hardware_config_defaults(HardwareConfig* config)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
    config->sdmmc_clock_div = SDMMC_CLOCK_DIV;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2208      	movs	r2, #8
 800582c:	701a      	strb	r2, [r3, #0]
    config->dma_priority_level = DMA_PRIORITY_LEVEL;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
 8005834:	605a      	str	r2, [r3, #4]
    config->system_clock_mhz = 200;  // STM32F746 기본 클럭
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	22c8      	movs	r2, #200	@ 0xc8
 800583a:	609a      	str	r2, [r3, #8]
    config->dcache_enabled = true;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	731a      	strb	r2, [r3, #12]
    config->icache_enabled = true;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	735a      	strb	r2, [r3, #13]
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <_calculate_config_crc>:

/**
 * @brief CRC 계산 (간단한 체크섬)
 */
static uint32_t _calculate_config_crc(const GlobalSystemConfig* config)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
    const uint8_t* data = (const uint8_t*)config;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	60fb      	str	r3, [r7, #12]
    uint32_t crc = 0;
 8005860:	2300      	movs	r3, #0
 8005862:	617b      	str	r3, [r7, #20]
    
    // CRC 필드를 제외한 전체 구조체에 대해 간단한 체크섬 계산
    size_t size = sizeof(GlobalSystemConfig) - sizeof(config->config_crc);
 8005864:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8005868:	60bb      	str	r3, [r7, #8]
    
    for (size_t i = 0; i < size; i++) {
 800586a:	2300      	movs	r3, #0
 800586c:	613b      	str	r3, [r7, #16]
 800586e:	e00e      	b.n	800588e <_calculate_config_crc+0x3a>
        crc += data[i];
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	4413      	add	r3, r2
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	461a      	mov	r2, r3
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	4413      	add	r3, r2
 800587e:	617b      	str	r3, [r7, #20]
        crc = (crc << 1) | (crc >> 31);  // 순환 시프트
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8005886:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < size; i++) {
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	3301      	adds	r3, #1
 800588c:	613b      	str	r3, [r7, #16]
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	429a      	cmp	r2, r3
 8005894:	d3ec      	bcc.n	8005870 <_calculate_config_crc+0x1c>
    }
    
    return crc;
 8005896:	697b      	ldr	r3, [r7, #20]
}
 8005898:	4618      	mov	r0, r3
 800589a:	371c      	adds	r7, #28
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <SystemConfig_Init>:

/**
 * @brief 시스템 설정 초기화 (기본값으로)
 */
ResultCode SystemConfig_Init(GlobalSystemConfig* config)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
    CHECK_NULL_PARAM(config);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d107      	bne.n	80058c2 <SystemConfig_Init+0x1e>
 80058b2:	4a2d      	ldr	r2, [pc, #180]	@ (8005968 <SystemConfig_Init+0xc4>)
 80058b4:	492d      	ldr	r1, [pc, #180]	@ (800596c <SystemConfig_Init+0xc8>)
 80058b6:	2003      	movs	r0, #3
 80058b8:	f000 fa40 	bl	8005d3c <LOGGER_SendFormatted>
 80058bc:	f06f 0302 	mvn.w	r3, #2
 80058c0:	e04d      	b.n	800595e <SystemConfig_Init+0xba>
    
    LOG_INFO("[SystemConfig] Initializing system configuration with defaults");
 80058c2:	492b      	ldr	r1, [pc, #172]	@ (8005970 <SystemConfig_Init+0xcc>)
 80058c4:	2001      	movs	r0, #1
 80058c6:	f000 fa39 	bl	8005d3c <LOGGER_SendFormatted>
    
    // 전체 구조체 초기화
    memset(config, 0, sizeof(GlobalSystemConfig));
 80058ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80058ce:	2100      	movs	r1, #0
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f012 fcef 	bl	80182b4 <memset>
    
    // 각 모듈별 기본값 설정
    _init_lora_config_defaults(&config->lora);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4618      	mov	r0, r3
 80058da:	f7ff fec9 	bl	8005670 <_init_lora_config_defaults>
    _init_uart_config_defaults(&config->uart);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	3338      	adds	r3, #56	@ 0x38
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7ff fef6 	bl	80056d4 <_init_uart_config_defaults>
    _init_sd_config_defaults(&config->sd_card);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3348      	adds	r3, #72	@ 0x48
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7ff ff17 	bl	8005720 <_init_sd_config_defaults>
    _init_logger_config_defaults(&config->logger);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	33c4      	adds	r3, #196	@ 0xc4
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7ff ff4a 	bl	8005790 <_init_logger_config_defaults>
    _init_system_config_defaults(&config->system);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	33d0      	adds	r3, #208	@ 0xd0
 8005900:	4618      	mov	r0, r3
 8005902:	f7ff ff69 	bl	80057d8 <_init_system_config_defaults>
    _init_hardware_config_defaults(&config->hardware);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	33e0      	adds	r3, #224	@ 0xe0
 800590a:	4618      	mov	r0, r3
 800590c:	f7ff ff88 	bl	8005820 <_init_hardware_config_defaults>
    
    // 메타 정보 설정
    config->config_version = 1;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    strncpy(config->device_name, "LoRa-Tester-STM32", sizeof(config->device_name) - 1);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	33f9      	adds	r3, #249	@ 0xf9
 800591c:	221f      	movs	r2, #31
 800591e:	4915      	ldr	r1, [pc, #84]	@ (8005974 <SystemConfig_Init+0xd0>)
 8005920:	4618      	mov	r0, r3
 8005922:	f012 fcdc 	bl	80182de <strncpy>
    strncpy(config->firmware_version, "v1.0.0", sizeof(config->firmware_version) - 1);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f203 1319 	addw	r3, r3, #281	@ 0x119
 800592c:	220f      	movs	r2, #15
 800592e:	4912      	ldr	r1, [pc, #72]	@ (8005978 <SystemConfig_Init+0xd4>)
 8005930:	4618      	mov	r0, r3
 8005932:	f012 fcd4 	bl	80182de <strncpy>
    
    // CRC 계산 및 유효성 설정
    config->config_crc = _calculate_config_crc(config);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7ff ff8c 	bl	8005854 <_calculate_config_crc>
 800593c:	4602      	mov	r2, r0
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
    config->config_valid = true;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8
    
    LOG_INFO("[SystemConfig] Configuration initialized successfully (version: %lu)", config->config_version);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005952:	461a      	mov	r2, r3
 8005954:	4909      	ldr	r1, [pc, #36]	@ (800597c <SystemConfig_Init+0xd8>)
 8005956:	2001      	movs	r0, #1
 8005958:	f000 f9f0 	bl	8005d3c <LOGGER_SendFormatted>
    return RESULT_SUCCESS;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	0801c410 	.word	0x0801c410
 800596c:	0801c418 	.word	0x0801c418
 8005970:	0801c42c 	.word	0x0801c42c
 8005974:	0801c46c 	.word	0x0801c46c
 8005978:	0801c480 	.word	0x0801c480
 800597c:	0801c488 	.word	0x0801c488

08005980 <SystemConfig_Validate>:

/**
 * @brief 시스템 설정 검증
 */
ResultCode SystemConfig_Validate(const GlobalSystemConfig* config)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
    CHECK_NULL_PARAM(config);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d107      	bne.n	800599e <SystemConfig_Validate+0x1e>
 800598e:	4a3a      	ldr	r2, [pc, #232]	@ (8005a78 <SystemConfig_Validate+0xf8>)
 8005990:	493a      	ldr	r1, [pc, #232]	@ (8005a7c <SystemConfig_Validate+0xfc>)
 8005992:	2003      	movs	r0, #3
 8005994:	f000 f9d2 	bl	8005d3c <LOGGER_SendFormatted>
 8005998:	f06f 0302 	mvn.w	r3, #2
 800599c:	e068      	b.n	8005a70 <SystemConfig_Validate+0xf0>
    
    LOG_DEBUG("[SystemConfig] Validating system configuration");
 800599e:	4938      	ldr	r1, [pc, #224]	@ (8005a80 <SystemConfig_Validate+0x100>)
 80059a0:	2000      	movs	r0, #0
 80059a2:	f000 f9cb 	bl	8005d3c <LOGGER_SendFormatted>
    
    // CRC 검증
    uint32_t calculated_crc = _calculate_config_crc(config);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7ff ff54 	bl	8005854 <_calculate_config_crc>
 80059ac:	60f8      	str	r0, [r7, #12]
    if (calculated_crc != config->config_crc) {
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d00a      	beq.n	80059d0 <SystemConfig_Validate+0x50>
        LOG_ERROR("[SystemConfig] CRC mismatch: expected 0x%08lX, got 0x%08lX", 
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4930      	ldr	r1, [pc, #192]	@ (8005a84 <SystemConfig_Validate+0x104>)
 80059c4:	2003      	movs	r0, #3
 80059c6:	f000 f9b9 	bl	8005d3c <LOGGER_SendFormatted>
                  config->config_crc, calculated_crc);
        return RESULT_ERROR_INVALID_PARAM;
 80059ca:	f06f 0301 	mvn.w	r3, #1
 80059ce:	e04f      	b.n	8005a70 <SystemConfig_Validate+0xf0>
    }
    
    // 기본 유효성 체크
    if (!config->config_valid) {
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 80059d6:	f083 0301 	eor.w	r3, r3, #1
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d006      	beq.n	80059ee <SystemConfig_Validate+0x6e>
        LOG_ERROR("[SystemConfig] Configuration marked as invalid");
 80059e0:	4929      	ldr	r1, [pc, #164]	@ (8005a88 <SystemConfig_Validate+0x108>)
 80059e2:	2003      	movs	r0, #3
 80059e4:	f000 f9aa 	bl	8005d3c <LOGGER_SendFormatted>
        return RESULT_ERROR_INVALID_PARAM;
 80059e8:	f06f 0301 	mvn.w	r3, #1
 80059ec:	e040      	b.n	8005a70 <SystemConfig_Validate+0xf0>
    }
    
    // LoRa 설정 검증
    if (config->lora.send_interval_ms < 1000 || config->lora.send_interval_ms > 3600000) { // 1초~1시간
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80059f6:	d304      	bcc.n	8005a02 <SystemConfig_Validate+0x82>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a23      	ldr	r2, [pc, #140]	@ (8005a8c <SystemConfig_Validate+0x10c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d909      	bls.n	8005a16 <SystemConfig_Validate+0x96>
        LOG_ERROR("[SystemConfig] Invalid LoRa send interval: %lu ms", config->lora.send_interval_ms);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	461a      	mov	r2, r3
 8005a08:	4921      	ldr	r1, [pc, #132]	@ (8005a90 <SystemConfig_Validate+0x110>)
 8005a0a:	2003      	movs	r0, #3
 8005a0c:	f000 f996 	bl	8005d3c <LOGGER_SendFormatted>
        return RESULT_ERROR_INVALID_PARAM;
 8005a10:	f06f 0301 	mvn.w	r3, #1
 8005a14:	e02c      	b.n	8005a70 <SystemConfig_Validate+0xf0>
    }
    
    // UART 설정 검증
    if (config->uart.baudrate < 9600 || config->uart.baudrate > 921600) {
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a1a:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8005a1e:	d304      	bcc.n	8005a2a <SystemConfig_Validate+0xaa>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a24:	f5b3 2f61 	cmp.w	r3, #921600	@ 0xe1000
 8005a28:	d909      	bls.n	8005a3e <SystemConfig_Validate+0xbe>
        LOG_ERROR("[SystemConfig] Invalid UART baudrate: %lu", config->uart.baudrate);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a2e:	461a      	mov	r2, r3
 8005a30:	4918      	ldr	r1, [pc, #96]	@ (8005a94 <SystemConfig_Validate+0x114>)
 8005a32:	2003      	movs	r0, #3
 8005a34:	f000 f982 	bl	8005d3c <LOGGER_SendFormatted>
        return RESULT_ERROR_INVALID_PARAM;
 8005a38:	f06f 0301 	mvn.w	r3, #1
 8005a3c:	e018      	b.n	8005a70 <SystemConfig_Validate+0xf0>
    }
    
    // SD 카드 설정 검증
    if (config->sd_card.log_file_max_size < 1024 || config->sd_card.log_file_max_size > 100*1024*1024) { // 1KB~100MB
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a46:	d304      	bcc.n	8005a52 <SystemConfig_Validate+0xd2>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a4c:	f1b3 6fc8 	cmp.w	r3, #104857600	@ 0x6400000
 8005a50:	d909      	bls.n	8005a66 <SystemConfig_Validate+0xe6>
        LOG_ERROR("[SystemConfig] Invalid SD log file max size: %lu bytes", config->sd_card.log_file_max_size);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a56:	461a      	mov	r2, r3
 8005a58:	490f      	ldr	r1, [pc, #60]	@ (8005a98 <SystemConfig_Validate+0x118>)
 8005a5a:	2003      	movs	r0, #3
 8005a5c:	f000 f96e 	bl	8005d3c <LOGGER_SendFormatted>
        return RESULT_ERROR_INVALID_PARAM;
 8005a60:	f06f 0301 	mvn.w	r3, #1
 8005a64:	e004      	b.n	8005a70 <SystemConfig_Validate+0xf0>
    }
    
    LOG_DEBUG("[SystemConfig] Configuration validation successful");
 8005a66:	490d      	ldr	r1, [pc, #52]	@ (8005a9c <SystemConfig_Validate+0x11c>)
 8005a68:	2000      	movs	r0, #0
 8005a6a:	f000 f967 	bl	8005d3c <LOGGER_SendFormatted>
    return RESULT_SUCCESS;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	0801c410 	.word	0x0801c410
 8005a7c:	0801c418 	.word	0x0801c418
 8005a80:	0801c4d0 	.word	0x0801c4d0
 8005a84:	0801c500 	.word	0x0801c500
 8005a88:	0801c53c 	.word	0x0801c53c
 8005a8c:	0036ee80 	.word	0x0036ee80
 8005a90:	0801c56c 	.word	0x0801c56c
 8005a94:	0801c5a0 	.word	0x0801c5a0
 8005a98:	0801c5cc 	.word	0x0801c5cc
 8005a9c:	0801c604 	.word	0x0801c604

08005aa0 <SystemConfig_Apply>:

/**
 * @brief 시스템 설정 적용
 */
ResultCode SystemConfig_Apply(const GlobalSystemConfig* config)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
    CHECK_NULL_PARAM(config);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d107      	bne.n	8005abe <SystemConfig_Apply+0x1e>
 8005aae:	4a1f      	ldr	r2, [pc, #124]	@ (8005b2c <SystemConfig_Apply+0x8c>)
 8005ab0:	491f      	ldr	r1, [pc, #124]	@ (8005b30 <SystemConfig_Apply+0x90>)
 8005ab2:	2003      	movs	r0, #3
 8005ab4:	f000 f942 	bl	8005d3c <LOGGER_SendFormatted>
 8005ab8:	f06f 0302 	mvn.w	r3, #2
 8005abc:	e032      	b.n	8005b24 <SystemConfig_Apply+0x84>
    
    // 설정 검증
    CHECK_RESULT(SystemConfig_Validate(config));
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7ff ff5e 	bl	8005980 <SystemConfig_Validate>
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f7ff fdc2 	bl	8005650 <ErrorCode_IsSuccess>
 8005acc:	4603      	mov	r3, r0
 8005ace:	f083 0301 	eor.w	r3, r3, #1
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <SystemConfig_Apply+0x3c>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	e023      	b.n	8005b24 <SystemConfig_Apply+0x84>
    
    LOG_INFO("[SystemConfig] Applying system configuration");
 8005adc:	4915      	ldr	r1, [pc, #84]	@ (8005b34 <SystemConfig_Apply+0x94>)
 8005ade:	2001      	movs	r0, #1
 8005ae0:	f000 f92c 	bl	8005d3c <LOGGER_SendFormatted>
    
    // 글로벌 설정에 복사
    memcpy(&g_system_config, config, sizeof(GlobalSystemConfig));
 8005ae4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005ae8:	6879      	ldr	r1, [r7, #4]
 8005aea:	4813      	ldr	r0, [pc, #76]	@ (8005b38 <SystemConfig_Apply+0x98>)
 8005aec:	f012 fca3 	bl	8018436 <memcpy>
    g_config_initialized = true;
 8005af0:	4b12      	ldr	r3, [pc, #72]	@ (8005b3c <SystemConfig_Apply+0x9c>)
 8005af2:	2201      	movs	r2, #1
 8005af4:	701a      	strb	r2, [r3, #0]
    
    LOG_INFO("[SystemConfig] Configuration applied successfully");
 8005af6:	4912      	ldr	r1, [pc, #72]	@ (8005b40 <SystemConfig_Apply+0xa0>)
 8005af8:	2001      	movs	r0, #1
 8005afa:	f000 f91f 	bl	8005d3c <LOGGER_SendFormatted>
    LOG_INFO("[SystemConfig] Device: %s, Firmware: %s", 
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f103 02f9 	add.w	r2, r3, #249	@ 0xf9
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f203 1319 	addw	r3, r3, #281	@ 0x119
 8005b0a:	490e      	ldr	r1, [pc, #56]	@ (8005b44 <SystemConfig_Apply+0xa4>)
 8005b0c:	2001      	movs	r0, #1
 8005b0e:	f000 f915 	bl	8005d3c <LOGGER_SendFormatted>
             config->device_name, config->firmware_version);
    LOG_INFO("[SystemConfig] LoRa interval: %lu ms, UART: %lu baud", 
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b1a:	490b      	ldr	r1, [pc, #44]	@ (8005b48 <SystemConfig_Apply+0xa8>)
 8005b1c:	2001      	movs	r0, #1
 8005b1e:	f000 f90d 	bl	8005d3c <LOGGER_SendFormatted>
             config->lora.send_interval_ms, config->uart.baudrate);
    
    return RESULT_SUCCESS;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	0801c410 	.word	0x0801c410
 8005b30:	0801c418 	.word	0x0801c418
 8005b34:	0801c638 	.word	0x0801c638
 8005b38:	200015e8 	.word	0x200015e8
 8005b3c:	20001714 	.word	0x20001714
 8005b40:	0801c668 	.word	0x0801c668
 8005b44:	0801c69c 	.word	0x0801c69c
 8005b48:	0801c6c4 	.word	0x0801c6c4

08005b4c <SystemConfig_GetGlobal>:

/**
 * @brief 글로벌 설정 인스턴스 가져오기
 */
GlobalSystemConfig* SystemConfig_GetGlobal(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
    if (!g_config_initialized) {
 8005b50:	4b09      	ldr	r3, [pc, #36]	@ (8005b78 <SystemConfig_GetGlobal+0x2c>)
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	f083 0301 	eor.w	r3, r3, #1
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d009      	beq.n	8005b72 <SystemConfig_GetGlobal+0x26>
        LOG_WARN("[SystemConfig] Configuration not initialized, using defaults");
 8005b5e:	4907      	ldr	r1, [pc, #28]	@ (8005b7c <SystemConfig_GetGlobal+0x30>)
 8005b60:	2002      	movs	r0, #2
 8005b62:	f000 f8eb 	bl	8005d3c <LOGGER_SendFormatted>
        SystemConfig_Init(&g_system_config);
 8005b66:	4806      	ldr	r0, [pc, #24]	@ (8005b80 <SystemConfig_GetGlobal+0x34>)
 8005b68:	f7ff fe9c 	bl	80058a4 <SystemConfig_Init>
        SystemConfig_Apply(&g_system_config);
 8005b6c:	4804      	ldr	r0, [pc, #16]	@ (8005b80 <SystemConfig_GetGlobal+0x34>)
 8005b6e:	f7ff ff97 	bl	8005aa0 <SystemConfig_Apply>
    }
    
    return &g_system_config;
 8005b72:	4b03      	ldr	r3, [pc, #12]	@ (8005b80 <SystemConfig_GetGlobal+0x34>)
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	20001714 	.word	0x20001714
 8005b7c:	0801c7c8 	.word	0x0801c7c8
 8005b80:	200015e8 	.word	0x200015e8

08005b84 <SystemConfig_GetLoRa>:

/**
 * @brief 개별 모듈 설정 가져오기
 */
RuntimeLoRaConfig* SystemConfig_GetLoRa(void)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	af00      	add	r7, sp, #0
    return &SystemConfig_GetGlobal()->lora;
 8005b88:	f7ff ffe0 	bl	8005b4c <SystemConfig_GetGlobal>
 8005b8c:	4603      	mov	r3, r0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <SystemConfig_GetUart>:

RuntimeUartConfig* SystemConfig_GetUart(void)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	af00      	add	r7, sp, #0
    return &SystemConfig_GetGlobal()->uart;
 8005b96:	f7ff ffd9 	bl	8005b4c <SystemConfig_GetGlobal>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	3338      	adds	r3, #56	@ 0x38
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <SystemConfig_GetSDCard>:

RuntimeSDCardConfig* SystemConfig_GetSDCard(void)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	af00      	add	r7, sp, #0
    return &SystemConfig_GetGlobal()->sd_card;
 8005ba6:	f7ff ffd1 	bl	8005b4c <SystemConfig_GetGlobal>
 8005baa:	4603      	mov	r3, r0
 8005bac:	3348      	adds	r3, #72	@ 0x48
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	bd80      	pop	{r7, pc}
	...

08005bb4 <SystemConfig_InitializeSystem>:

/**
 * @brief 시스템 설정 초기화 및 적용 래퍼 함수
 */
void SystemConfig_InitializeSystem(void)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
    GlobalSystemConfig* config = SystemConfig_GetGlobal();
 8005bba:	f7ff ffc7 	bl	8005b4c <SystemConfig_GetGlobal>
 8005bbe:	6078      	str	r0, [r7, #4]
    if (SystemConfig_Init(config) == RESULT_SUCCESS) {
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7ff fe6f 	bl	80058a4 <SystemConfig_Init>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d106      	bne.n	8005bda <SystemConfig_InitializeSystem+0x26>
        SystemConfig_Apply(config);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f7ff ff67 	bl	8005aa0 <SystemConfig_Apply>
        LOG_INFO("[SystemConfig] Runtime configuration system initialized");
 8005bd2:	4904      	ldr	r1, [pc, #16]	@ (8005be4 <SystemConfig_InitializeSystem+0x30>)
 8005bd4:	2001      	movs	r0, #1
 8005bd6:	f000 f8b1 	bl	8005d3c <LOGGER_SendFormatted>
    }
 8005bda:	bf00      	nop
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	0801c808 	.word	0x0801c808

08005be8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005be8:	b480      	push	{r7}
 8005bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005bec:	4b06      	ldr	r3, [pc, #24]	@ (8005c08 <SystemInit+0x20>)
 8005bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bf2:	4a05      	ldr	r2, [pc, #20]	@ (8005c08 <SystemInit+0x20>)
 8005bf4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005bf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005bfc:	bf00      	nop
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	e000ed00 	.word	0xe000ed00

08005c0c <TIME_GetCurrentMs>:
// ============================================================================
// 기본 시간 함수
// ============================================================================

uint32_t TIME_GetCurrentMs(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
    return TIME_Platform_GetCurrentMs();
 8005c10:	f000 f803 	bl	8005c1a <TIME_Platform_GetCurrentMs>
 8005c14:	4603      	mov	r3, r0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <TIME_Platform_GetCurrentMs>:
#include "time.h"
#include "stm32f7xx_hal.h"

// STM32용 플랫폼 함수들
uint32_t TIME_Platform_GetCurrentMs(void)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // HAL_GetTick()은 1ms 단위로 시간을 반환
 8005c1e:	f000 ff43 	bl	8006aa8 <HAL_GetTick>
 8005c22:	4603      	mov	r3, r0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <LOGGER_Connect>:
    .enable_network = true,
    .server_ip = "",
    .server_port = 0
};

LoggerStatus LOGGER_Connect(const char* server_ip, int port) {
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
    if (server_ip == NULL) return LOGGER_STATUS_ERROR;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <LOGGER_Connect+0x14>
 8005c38:	4b0c      	ldr	r3, [pc, #48]	@ (8005c6c <LOGGER_Connect+0x44>)
 8005c3a:	e013      	b.n	8005c64 <LOGGER_Connect+0x3c>
    strncpy(current_config.server_ip, server_ip, sizeof(current_config.server_ip) - 1);
 8005c3c:	223f      	movs	r2, #63	@ 0x3f
 8005c3e:	6879      	ldr	r1, [r7, #4]
 8005c40:	480b      	ldr	r0, [pc, #44]	@ (8005c70 <LOGGER_Connect+0x48>)
 8005c42:	f012 fb4c 	bl	80182de <strncpy>
    current_config.server_port = port;
 8005c46:	4a0b      	ldr	r2, [pc, #44]	@ (8005c74 <LOGGER_Connect+0x4c>)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	6453      	str	r3, [r2, #68]	@ 0x44
    LoggerStatus status = LOGGER_Platform_Connect(server_ip, port);
 8005c4c:	6839      	ldr	r1, [r7, #0]
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f9f8 	bl	8006044 <LOGGER_Platform_Connect>
 8005c54:	60f8      	str	r0, [r7, #12]
    if (status == LOGGER_STATUS_OK) {
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d102      	bne.n	8005c62 <LOGGER_Connect+0x3a>
        logger_connected = true;
 8005c5c:	4b06      	ldr	r3, [pc, #24]	@ (8005c78 <LOGGER_Connect+0x50>)
 8005c5e:	2201      	movs	r2, #1
 8005c60:	701a      	strb	r2, [r3, #0]
    }
    return status;
 8005c62:	68fb      	ldr	r3, [r7, #12]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	fffffed2 	.word	0xfffffed2
 8005c70:	2000002b 	.word	0x2000002b
 8005c74:	20000028 	.word	0x20000028
 8005c78:	20001715 	.word	0x20001715

08005c7c <LOGGER_SetFilterLevel>:
bool LOGGER_IsConnected(void) {
    return logger_connected;
}

// Logger 제어 함수들
void LOGGER_SetFilterLevel(LogLevel min_level) {
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	4603      	mov	r3, r0
 8005c84:	71fb      	strb	r3, [r7, #7]
    filter_level = min_level;
 8005c86:	4a04      	ldr	r2, [pc, #16]	@ (8005c98 <LOGGER_SetFilterLevel+0x1c>)
 8005c88:	79fb      	ldrb	r3, [r7, #7]
 8005c8a:	7013      	strb	r3, [r2, #0]
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	20001717 	.word	0x20001717

08005c9c <LOGGER_SetSDFilterLevel>:

void LOGGER_SetSDFilterLevel(LogLevel min_level) {
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	71fb      	strb	r3, [r7, #7]
    sd_filter_level = min_level;
 8005ca6:	4a04      	ldr	r2, [pc, #16]	@ (8005cb8 <LOGGER_SetSDFilterLevel+0x1c>)
 8005ca8:	79fb      	ldrb	r3, [r7, #7]
 8005caa:	7013      	strb	r3, [r2, #0]
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	20000024 	.word	0x20000024

08005cbc <LOGGER_EnableSDLogging>:

void LOGGER_EnableSDLogging(bool enable) {
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	71fb      	strb	r3, [r7, #7]
    sd_logging_enabled = enable;
 8005cc6:	4a04      	ldr	r2, [pc, #16]	@ (8005cd8 <LOGGER_EnableSDLogging+0x1c>)
 8005cc8:	79fb      	ldrb	r3, [r7, #7]
 8005cca:	7013      	strb	r3, [r2, #0]
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	20001718 	.word	0x20001718

08005cdc <LOGGER_IsSDLoggingEnabled>:

bool LOGGER_IsSDLoggingEnabled(void) {
 8005cdc:	b480      	push	{r7}
 8005cde:	af00      	add	r7, sp, #0
    return sd_logging_enabled;
 8005ce0:	4b03      	ldr	r3, [pc, #12]	@ (8005cf0 <LOGGER_IsSDLoggingEnabled+0x14>)
 8005ce2:	781b      	ldrb	r3, [r3, #0]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	20001718 	.word	0x20001718

08005cf4 <LOGGER_SetMode>:

void LOGGER_SetMode(LoggerMode_t mode) {
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	71fb      	strb	r3, [r7, #7]
    current_mode = mode;
 8005cfe:	4a0d      	ldr	r2, [pc, #52]	@ (8005d34 <LOGGER_SetMode+0x40>)
 8005d00:	79fb      	ldrb	r3, [r7, #7]
 8005d02:	7013      	strb	r3, [r2, #0]
    
    // 모드에 따른 연결 상태 설정
    if (mode == LOGGER_MODE_TERMINAL_ONLY) {
 8005d04:	79fb      	ldrb	r3, [r7, #7]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d103      	bne.n	8005d12 <LOGGER_SetMode+0x1e>
        logger_connected = true;  // 터미널은 항상 연결됨
 8005d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8005d38 <LOGGER_SetMode+0x44>)
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	701a      	strb	r2, [r3, #0]
    } else if (mode == LOGGER_MODE_SD_ONLY || mode == LOGGER_MODE_DUAL) {
        // SD 백엔드 사용 시 SDStorage 연결 상태에 따라 결정
        logger_connected = SDStorage_IsReady();
    }
}
 8005d10:	e00b      	b.n	8005d2a <LOGGER_SetMode+0x36>
    } else if (mode == LOGGER_MODE_SD_ONLY || mode == LOGGER_MODE_DUAL) {
 8005d12:	79fb      	ldrb	r3, [r7, #7]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d002      	beq.n	8005d1e <LOGGER_SetMode+0x2a>
 8005d18:	79fb      	ldrb	r3, [r7, #7]
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d105      	bne.n	8005d2a <LOGGER_SetMode+0x36>
        logger_connected = SDStorage_IsReady();
 8005d1e:	f7fb fe83 	bl	8001a28 <SDStorage_IsReady>
 8005d22:	4603      	mov	r3, r0
 8005d24:	461a      	mov	r2, r3
 8005d26:	4b04      	ldr	r3, [pc, #16]	@ (8005d38 <LOGGER_SetMode+0x44>)
 8005d28:	701a      	strb	r2, [r3, #0]
}
 8005d2a:	bf00      	nop
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	20001716 	.word	0x20001716
 8005d38:	20001715 	.word	0x20001715

08005d3c <LOGGER_SendFormatted>:

LoggerMode_t LOGGER_GetMode(void) {
    return current_mode;
}

void LOGGER_SendFormatted(LogLevel level, const char* format, ...) {
 8005d3c:	b40e      	push	{r1, r2, r3}
 8005d3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d40:	f5ad 6da8 	sub.w	sp, sp, #1344	@ 0x540
 8005d44:	af04      	add	r7, sp, #16
 8005d46:	4602      	mov	r2, r0
 8005d48:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8005d4c:	f2a3 5329 	subw	r3, r3, #1321	@ 0x529
 8005d50:	701a      	strb	r2, [r3, #0]
    // 필터 레벨 체크
    if (level < filter_level) return;
 8005d52:	4bac      	ldr	r3, [pc, #688]	@ (8006004 <LOGGER_SendFormatted+0x2c8>)
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	f507 62a6 	add.w	r2, r7, #1328	@ 0x530
 8005d5a:	f2a2 5229 	subw	r2, r2, #1321	@ 0x529
 8005d5e:	7812      	ldrb	r2, [r2, #0]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	f0c0 8140 	bcc.w	8005fe6 <LOGGER_SendFormatted+0x2aa>
    if (level < current_config.level) return;
 8005d66:	4ba8      	ldr	r3, [pc, #672]	@ (8006008 <LOGGER_SendFormatted+0x2cc>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	f507 62a6 	add.w	r2, r7, #1328	@ 0x530
 8005d6e:	f2a2 5229 	subw	r2, r2, #1321	@ 0x529
 8005d72:	7812      	ldrb	r2, [r2, #0]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	f0c0 8138 	bcc.w	8005fea <LOGGER_SendFormatted+0x2ae>
    
    char buffer[LOGGER_MAX_MESSAGE_SIZE];
    const char* level_str[] = {"[DEBUG]", "[INFO]", "[WARN]", "[ERROR]"};
 8005d7a:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8005d7e:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8005d82:	4aa2      	ldr	r2, [pc, #648]	@ (800600c <LOGGER_SendFormatted+0x2d0>)
 8005d84:	461c      	mov	r4, r3
 8005d86:	4613      	mov	r3, r2
 8005d88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    // 타임스탬프 + 레벨 문자열 추가
    int offset = 0;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
    const char* network_time = ResponseHandler_GetNetworkTime();
 8005d94:	f7fb fb88 	bl	80014a8 <ResponseHandler_GetNetworkTime>
 8005d98:	f8c7 0524 	str.w	r0, [r7, #1316]	@ 0x524
    if (network_time != NULL && ResponseHandler_IsTimeSynchronized()) {
 8005d9c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d01c      	beq.n	8005dde <LOGGER_SendFormatted+0xa2>
 8005da4:	f7fb fb92 	bl	80014cc <ResponseHandler_IsTimeSynchronized>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d017      	beq.n	8005dde <LOGGER_SendFormatted+0xa2>
        // 네트워크 시간이 있으면 타임스탬프 추가
        offset = snprintf(buffer, sizeof(buffer), "[%s] %s ", network_time, level_str[level]);
 8005dae:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8005db2:	f2a3 5329 	subw	r3, r3, #1321	@ 0x529
 8005db6:	781a      	ldrb	r2, [r3, #0]
 8005db8:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8005dbc:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8005dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dc4:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8005dce:	4a90      	ldr	r2, [pc, #576]	@ (8006010 <LOGGER_SendFormatted+0x2d4>)
 8005dd0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005dd4:	f012 f968 	bl	80180a8 <sniprintf>
 8005dd8:	f8c7 052c 	str.w	r0, [r7, #1324]	@ 0x52c
 8005ddc:	e013      	b.n	8005e06 <LOGGER_SendFormatted+0xca>
    } else {
        // 네트워크 시간이 없으면 기본 형식
        offset = snprintf(buffer, sizeof(buffer), "%s ", level_str[level]);
 8005dde:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8005de2:	f2a3 5329 	subw	r3, r3, #1321	@ 0x529
 8005de6:	781a      	ldrb	r2, [r3, #0]
 8005de8:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8005dec:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8005df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df4:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 8005df8:	4a86      	ldr	r2, [pc, #536]	@ (8006014 <LOGGER_SendFormatted+0x2d8>)
 8005dfa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005dfe:	f012 f953 	bl	80180a8 <sniprintf>
 8005e02:	f8c7 052c 	str.w	r0, [r7, #1324]	@ 0x52c
    }
    
    // 가변 인수 처리 (버퍼 오버플로우 방지)
    va_list args;
    va_start(args, format);
 8005e06:	f507 62a9 	add.w	r2, r7, #1352	@ 0x548
 8005e0a:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8005e0e:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8005e12:	601a      	str	r2, [r3, #0]
    int remaining_size = sizeof(buffer) - offset;
 8005e14:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8005e18:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8005e1c:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (remaining_size > 0) {
 8005e20:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	dd16      	ble.n	8005e56 <LOGGER_SendFormatted+0x11a>
        vsnprintf(buffer + offset, remaining_size, format, args);
 8005e28:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8005e2c:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 8005e30:	18d0      	adds	r0, r2, r3
 8005e32:	f8d7 1520 	ldr.w	r1, [r7, #1312]	@ 0x520
 8005e36:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8005e3a:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f8d7 2544 	ldr.w	r2, [r7, #1348]	@ 0x544
 8005e44:	f012 fa28 	bl	8018298 <vsniprintf>
        buffer[sizeof(buffer) - 1] = '\0';  // 안전장치: 항상 null 종료
 8005e48:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8005e4c:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 23ff 	strb.w	r2, [r3, #1023]	@ 0x3ff
    }
    va_end(args);
    
    // 모드에 따른 출력 처리
    switch (current_mode) {
 8005e56:	4b70      	ldr	r3, [pc, #448]	@ (8006018 <LOGGER_SendFormatted+0x2dc>)
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d02f      	beq.n	8005ebe <LOGGER_SendFormatted+0x182>
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	f300 80c8 	bgt.w	8005ff4 <LOGGER_SendFormatted+0x2b8>
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d002      	beq.n	8005e6e <LOGGER_SendFormatted+0x132>
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d006      	beq.n	8005e7a <LOGGER_SendFormatted+0x13e>
 8005e6c:	e0c2      	b.n	8005ff4 <LOGGER_SendFormatted+0x2b8>
        case LOGGER_MODE_TERMINAL_ONLY:
            LOGGER_Platform_Send(buffer);
 8005e6e:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 f8f2 	bl	800605c <LOGGER_Platform_Send>
            break;
 8005e78:	e0bc      	b.n	8005ff4 <LOGGER_SendFormatted+0x2b8>
            
        case LOGGER_MODE_SD_ONLY:
            // SD 로깅 활성화 + SD 필터 레벨 체크
            if (sd_logging_enabled && level >= sd_filter_level && SDStorage_IsReady()) {
 8005e7a:	4b68      	ldr	r3, [pc, #416]	@ (800601c <LOGGER_SendFormatted+0x2e0>)
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 80b5 	beq.w	8005fee <LOGGER_SendFormatted+0x2b2>
 8005e84:	4b66      	ldr	r3, [pc, #408]	@ (8006020 <LOGGER_SendFormatted+0x2e4>)
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	f507 62a6 	add.w	r2, r7, #1328	@ 0x530
 8005e8c:	f2a2 5229 	subw	r2, r2, #1321	@ 0x529
 8005e90:	7812      	ldrb	r2, [r2, #0]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	f0c0 80ab 	bcc.w	8005fee <LOGGER_SendFormatted+0x2b2>
 8005e98:	f7fb fdc6 	bl	8001a28 <SDStorage_IsReady>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f000 80a5 	beq.w	8005fee <LOGGER_SendFormatted+0x2b2>
                SDStorage_WriteLog(buffer, strlen(buffer));
 8005ea4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7fa f9bb 	bl	8000224 <strlen>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8005eb4:	4611      	mov	r1, r2
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fb fcce 	bl	8001858 <SDStorage_WriteLog>
            }
            break;
 8005ebc:	e097      	b.n	8005fee <LOGGER_SendFormatted+0x2b2>
            
        case LOGGER_MODE_DUAL:
            // 터미널 출력 (실시간)
            LOGGER_Platform_Send(buffer);
 8005ebe:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 f8ca 	bl	800605c <LOGGER_Platform_Send>
            // SD 출력 (SD 로깅 활성화 + SD 필터 레벨 체크 + 에러 무시)
            if (sd_logging_enabled && level >= sd_filter_level && SDStorage_IsReady()) {
 8005ec8:	4b54      	ldr	r3, [pc, #336]	@ (800601c <LOGGER_SendFormatted+0x2e0>)
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d062      	beq.n	8005f96 <LOGGER_SendFormatted+0x25a>
 8005ed0:	4b53      	ldr	r3, [pc, #332]	@ (8006020 <LOGGER_SendFormatted+0x2e4>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	f507 62a6 	add.w	r2, r7, #1328	@ 0x530
 8005ed8:	f2a2 5229 	subw	r2, r2, #1321	@ 0x529
 8005edc:	7812      	ldrb	r2, [r2, #0]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d359      	bcc.n	8005f96 <LOGGER_SendFormatted+0x25a>
 8005ee2:	f7fb fda1 	bl	8001a28 <SDStorage_IsReady>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d054      	beq.n	8005f96 <LOGGER_SendFormatted+0x25a>
                int sd_result = SDStorage_WriteLog(buffer, strlen(buffer));
 8005eec:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fa f997 	bl	8000224 <strlen>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8005efc:	4611      	mov	r1, r2
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fb fcaa 	bl	8001858 <SDStorage_WriteLog>
 8005f04:	f8c7 051c 	str.w	r0, [r7, #1308]	@ 0x51c
                if (sd_result != 0 && level >= LOG_LEVEL_WARN) {
 8005f08:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d068      	beq.n	8005fe2 <LOGGER_SendFormatted+0x2a6>
 8005f10:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8005f14:	f2a3 5329 	subw	r3, r3, #1321	@ 0x529
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d961      	bls.n	8005fe2 <LOGGER_SendFormatted+0x2a6>
                    // SD 쓰기 실패 시 터미널에 에러 출력
                    char error_msg[128];
                    const char* error_desc;
                    switch(sd_result) {
 8005f1e:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8005f22:	3305      	adds	r3, #5
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d821      	bhi.n	8005f6c <LOGGER_SendFormatted+0x230>
 8005f28:	a201      	add	r2, pc, #4	@ (adr r2, 8005f30 <LOGGER_SendFormatted+0x1f4>)
 8005f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2e:	bf00      	nop
 8005f30:	08005f65 	.word	0x08005f65
 8005f34:	08005f5d 	.word	0x08005f5d
 8005f38:	08005f55 	.word	0x08005f55
 8005f3c:	08005f4d 	.word	0x08005f4d
 8005f40:	08005f45 	.word	0x08005f45
                        case -1: error_desc = "GENERAL_ERROR"; break;
 8005f44:	4b37      	ldr	r3, [pc, #220]	@ (8006024 <LOGGER_SendFormatted+0x2e8>)
 8005f46:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 8005f4a:	e013      	b.n	8005f74 <LOGGER_SendFormatted+0x238>
                        case -2: error_desc = "NOT_READY"; break;
 8005f4c:	4b36      	ldr	r3, [pc, #216]	@ (8006028 <LOGGER_SendFormatted+0x2ec>)
 8005f4e:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 8005f52:	e00f      	b.n	8005f74 <LOGGER_SendFormatted+0x238>
                        case -3: error_desc = "FILE_ERROR"; break;
 8005f54:	4b35      	ldr	r3, [pc, #212]	@ (800602c <LOGGER_SendFormatted+0x2f0>)
 8005f56:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 8005f5a:	e00b      	b.n	8005f74 <LOGGER_SendFormatted+0x238>
                        case -4: error_desc = "DISK_FULL"; break;
 8005f5c:	4b34      	ldr	r3, [pc, #208]	@ (8006030 <LOGGER_SendFormatted+0x2f4>)
 8005f5e:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 8005f62:	e007      	b.n	8005f74 <LOGGER_SendFormatted+0x238>
                        case -5: error_desc = "INVALID_PARAM"; break;
 8005f64:	4b33      	ldr	r3, [pc, #204]	@ (8006034 <LOGGER_SendFormatted+0x2f8>)
 8005f66:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 8005f6a:	e003      	b.n	8005f74 <LOGGER_SendFormatted+0x238>
                        default: error_desc = "UNKNOWN"; break;
 8005f6c:	4b32      	ldr	r3, [pc, #200]	@ (8006038 <LOGGER_SendFormatted+0x2fc>)
 8005f6e:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 8005f72:	bf00      	nop
                    }
                    snprintf(error_msg, sizeof(error_msg), "[SD_ERROR] Write failed: %d (%s)", sd_result, error_desc);
 8005f74:	f107 0008 	add.w	r0, r7, #8
 8005f78:	f8d7 3528 	ldr.w	r3, [r7, #1320]	@ 0x528
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8005f82:	4a2e      	ldr	r2, [pc, #184]	@ (800603c <LOGGER_SendFormatted+0x300>)
 8005f84:	2180      	movs	r1, #128	@ 0x80
 8005f86:	f012 f88f 	bl	80180a8 <sniprintf>
                    LOGGER_Platform_Send(error_msg);
 8005f8a:	f107 0308 	add.w	r3, r7, #8
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 f864 	bl	800605c <LOGGER_Platform_Send>
            if (sd_logging_enabled && level >= sd_filter_level && SDStorage_IsReady()) {
 8005f94:	e025      	b.n	8005fe2 <LOGGER_SendFormatted+0x2a6>
                }
            } else if (level >= LOG_LEVEL_WARN) {
 8005f96:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8005f9a:	f2a3 5329 	subw	r3, r3, #1321	@ 0x529
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d926      	bls.n	8005ff2 <LOGGER_SendFormatted+0x2b6>
                // WARN 이상 레벨인데 SD에 저장되지 않는 경우 디버그 정보 출력
                char debug_msg[256];
                snprintf(debug_msg, sizeof(debug_msg), 
 8005fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800601c <LOGGER_SendFormatted+0x2e0>)
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	461e      	mov	r6, r3
 8005faa:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8005fae:	f2a3 5329 	subw	r3, r3, #1321	@ 0x529
 8005fb2:	781c      	ldrb	r4, [r3, #0]
 8005fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8006020 <LOGGER_SendFormatted+0x2e4>)
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	461d      	mov	r5, r3
                    "[SD_DEBUG] Skip SD write: enabled=%d, level=%d>=filter=%d, ready=%d",
                    sd_logging_enabled, level, sd_filter_level, SDStorage_IsReady());
 8005fba:	f7fb fd35 	bl	8001a28 <SDStorage_IsReady>
 8005fbe:	4603      	mov	r3, r0
                snprintf(debug_msg, sizeof(debug_msg), 
 8005fc0:	f107 0008 	add.w	r0, r7, #8
 8005fc4:	9302      	str	r3, [sp, #8]
 8005fc6:	9501      	str	r5, [sp, #4]
 8005fc8:	9400      	str	r4, [sp, #0]
 8005fca:	4633      	mov	r3, r6
 8005fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8006040 <LOGGER_SendFormatted+0x304>)
 8005fce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005fd2:	f012 f869 	bl	80180a8 <sniprintf>
                LOGGER_Platform_Send(debug_msg);
 8005fd6:	f107 0308 	add.w	r3, r7, #8
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 f83e 	bl	800605c <LOGGER_Platform_Send>
            }
            break;
 8005fe0:	e007      	b.n	8005ff2 <LOGGER_SendFormatted+0x2b6>
            if (sd_logging_enabled && level >= sd_filter_level && SDStorage_IsReady()) {
 8005fe2:	bf00      	nop
            break;
 8005fe4:	e005      	b.n	8005ff2 <LOGGER_SendFormatted+0x2b6>
    if (level < filter_level) return;
 8005fe6:	bf00      	nop
 8005fe8:	e004      	b.n	8005ff4 <LOGGER_SendFormatted+0x2b8>
    if (level < current_config.level) return;
 8005fea:	bf00      	nop
 8005fec:	e002      	b.n	8005ff4 <LOGGER_SendFormatted+0x2b8>
            break;
 8005fee:	bf00      	nop
 8005ff0:	e000      	b.n	8005ff4 <LOGGER_SendFormatted+0x2b8>
            break;
 8005ff2:	bf00      	nop
    }
}
 8005ff4:	f507 67a6 	add.w	r7, r7, #1328	@ 0x530
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005ffe:	b003      	add	sp, #12
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	20001717 	.word	0x20001717
 8006008:	20000028 	.word	0x20000028
 800600c:	0801c86c 	.word	0x0801c86c
 8006010:	0801c87c 	.word	0x0801c87c
 8006014:	0801c888 	.word	0x0801c888
 8006018:	20001716 	.word	0x20001716
 800601c:	20001718 	.word	0x20001718
 8006020:	20000024 	.word	0x20000024
 8006024:	0801c88c 	.word	0x0801c88c
 8006028:	0801c89c 	.word	0x0801c89c
 800602c:	0801c8a8 	.word	0x0801c8a8
 8006030:	0801c8b4 	.word	0x0801c8b4
 8006034:	0801c8c0 	.word	0x0801c8c0
 8006038:	0801c8d0 	.word	0x0801c8d0
 800603c:	0801c8d8 	.word	0x0801c8d8
 8006040:	0801c8fc 	.word	0x0801c8fc

08006044 <LOGGER_Platform_Connect>:
#include "stm32f7xx_hal.h"
#include <string.h>

extern UART_HandleTypeDef huart1; // CubeMX가 생성한 UART1 (Virtual COM Port)

LoggerStatus LOGGER_Platform_Connect(const char* server_ip, int port) {
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
    (void)server_ip; (void)port;
    // STM32에서는 UART1이 이미 초기화되어 있으므로 추가 설정 불필요
    return LOGGER_STATUS_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <LOGGER_Platform_Send>:

LoggerStatus LOGGER_Platform_Disconnect(void) {
    return LOGGER_STATUS_OK;
}

LoggerStatus LOGGER_Platform_Send(const char* message) {
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
    if (message == NULL) return LOGGER_STATUS_ERROR;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <LOGGER_Platform_Send+0x12>
 800606a:	4b11      	ldr	r3, [pc, #68]	@ (80060b0 <LOGGER_Platform_Send+0x54>)
 800606c:	e01b      	b.n	80060a6 <LOGGER_Platform_Send+0x4a>
    
    // UART1을 통해 메시지 전송 (Virtual COM Port)
    int len = strlen(message);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7fa f8d8 	bl	8000224 <strlen>
 8006074:	4603      	mov	r3, r0
 8006076:	60fb      	str	r3, [r7, #12]
    if (len > 0) {
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2b00      	cmp	r3, #0
 800607c:	dd12      	ble.n	80060a4 <LOGGER_Platform_Send+0x48>
        if (HAL_UART_Transmit(&huart1, (uint8_t*)message, len, 1000) == HAL_OK) {
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	b29a      	uxth	r2, r3
 8006082:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006086:	6879      	ldr	r1, [r7, #4]
 8006088:	480a      	ldr	r0, [pc, #40]	@ (80060b4 <LOGGER_Platform_Send+0x58>)
 800608a:	f009 fc41 	bl	800f910 <HAL_UART_Transmit>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d107      	bne.n	80060a4 <LOGGER_Platform_Send+0x48>
            // 줄바꿈 추가
            HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 8006094:	2364      	movs	r3, #100	@ 0x64
 8006096:	2202      	movs	r2, #2
 8006098:	4907      	ldr	r1, [pc, #28]	@ (80060b8 <LOGGER_Platform_Send+0x5c>)
 800609a:	4806      	ldr	r0, [pc, #24]	@ (80060b4 <LOGGER_Platform_Send+0x58>)
 800609c:	f009 fc38 	bl	800f910 <HAL_UART_Transmit>
            return LOGGER_STATUS_OK;
 80060a0:	2300      	movs	r3, #0
 80060a2:	e000      	b.n	80060a6 <LOGGER_Platform_Send+0x4a>
        }
    }
    return LOGGER_STATUS_ERROR;
 80060a4:	4b02      	ldr	r3, [pc, #8]	@ (80060b0 <LOGGER_Platform_Send+0x54>)
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	fffffed2 	.word	0xfffffed2
 80060b4:	200011b8 	.word	0x200011b8
 80060b8:	0801c940 	.word	0x0801c940

080060bc <UART_Connect>:
    .timeout_ms = UART_DEFAULT_TIMEOUT_MS
};

// 공통 함수들 (테스트와 실제 빌드 모두에서 사용)
UartStatus UART_Connect(const char* port)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
    if (port == NULL) {
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d106      	bne.n	80060d8 <UART_Connect+0x1c>
        LOG_ERROR("[UART] Connect failed: NULL port");
 80060ca:	4913      	ldr	r1, [pc, #76]	@ (8006118 <UART_Connect+0x5c>)
 80060cc:	2003      	movs	r0, #3
 80060ce:	f7ff fe35 	bl	8005d3c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80060d2:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 80060d6:	e01b      	b.n	8006110 <UART_Connect+0x54>
    }

    LOG_INFO("[UART] Connecting to %s", port);
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	4910      	ldr	r1, [pc, #64]	@ (800611c <UART_Connect+0x60>)
 80060dc:	2001      	movs	r0, #1
 80060de:	f7ff fe2d 	bl	8005d3c <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Connect(port);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f8f2 	bl	80062cc <UART_Platform_Connect>
 80060e8:	60f8      	str	r0, [r7, #12]

    if (status == UART_STATUS_OK) {
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d108      	bne.n	8006102 <UART_Connect+0x46>
        uart_connected = true;
 80060f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006120 <UART_Connect+0x64>)
 80060f2:	2201      	movs	r2, #1
 80060f4:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART] Successfully connected to %s", port);
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	490a      	ldr	r1, [pc, #40]	@ (8006124 <UART_Connect+0x68>)
 80060fa:	2001      	movs	r0, #1
 80060fc:	f7ff fe1e 	bl	8005d3c <LOGGER_SendFormatted>
 8006100:	e005      	b.n	800610e <UART_Connect+0x52>
    } else {
        LOG_ERROR("[UART] Failed to connect to %s (status: %d)", port, status);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	4908      	ldr	r1, [pc, #32]	@ (8006128 <UART_Connect+0x6c>)
 8006108:	2003      	movs	r0, #3
 800610a:	f7ff fe17 	bl	8005d3c <LOGGER_SendFormatted>
    }

    return status;
 800610e:	68fb      	ldr	r3, [r7, #12]
}
 8006110:	4618      	mov	r0, r3
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	0801c944 	.word	0x0801c944
 800611c:	0801c968 	.word	0x0801c968
 8006120:	20001719 	.word	0x20001719
 8006124:	0801c980 	.word	0x0801c980
 8006128:	0801c9a4 	.word	0x0801c9a4

0800612c <UART_Send>:

    return status;
}

UartStatus UART_Send(const char* data)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
    if (!uart_connected) {
 8006134:	4b1a      	ldr	r3, [pc, #104]	@ (80061a0 <UART_Send+0x74>)
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	f083 0301 	eor.w	r3, r3, #1
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d006      	beq.n	8006150 <UART_Send+0x24>
        LOG_ERROR("[UART] Send failed: not connected");
 8006142:	4918      	ldr	r1, [pc, #96]	@ (80061a4 <UART_Send+0x78>)
 8006144:	2003      	movs	r0, #3
 8006146:	f7ff fdf9 	bl	8005d3c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 800614a:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 800614e:	e022      	b.n	8006196 <UART_Send+0x6a>
    }

    if (data == NULL) {
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d106      	bne.n	8006164 <UART_Send+0x38>
        LOG_ERROR("[UART] Send failed: NULL data");
 8006156:	4914      	ldr	r1, [pc, #80]	@ (80061a8 <UART_Send+0x7c>)
 8006158:	2003      	movs	r0, #3
 800615a:	f7ff fdef 	bl	8005d3c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 800615e:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 8006162:	e018      	b.n	8006196 <UART_Send+0x6a>
    }

    LOG_DEBUG("[UART] Sending data: %s", data);
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	4911      	ldr	r1, [pc, #68]	@ (80061ac <UART_Send+0x80>)
 8006168:	2000      	movs	r0, #0
 800616a:	f7ff fde7 	bl	8005d3c <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Send(data);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f996 	bl	80064a0 <UART_Platform_Send>
 8006174:	60f8      	str	r0, [r7, #12]

    if (status == UART_STATUS_OK) {
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d105      	bne.n	8006188 <UART_Send+0x5c>
        LOG_DEBUG("[UART] Send successful: %s", data);
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	490c      	ldr	r1, [pc, #48]	@ (80061b0 <UART_Send+0x84>)
 8006180:	2000      	movs	r0, #0
 8006182:	f7ff fddb 	bl	8005d3c <LOGGER_SendFormatted>
 8006186:	e005      	b.n	8006194 <UART_Send+0x68>
    } else {
        LOG_ERROR("[UART] Send failed: %s (status: %d)", data, status);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	4909      	ldr	r1, [pc, #36]	@ (80061b4 <UART_Send+0x88>)
 800618e:	2003      	movs	r0, #3
 8006190:	f7ff fdd4 	bl	8005d3c <LOGGER_SendFormatted>
    }

    return status;
 8006194:	68fb      	ldr	r3, [r7, #12]
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	20001719 	.word	0x20001719
 80061a4:	0801c9d0 	.word	0x0801c9d0
 80061a8:	0801c9f4 	.word	0x0801c9f4
 80061ac:	0801ca14 	.word	0x0801ca14
 80061b0:	0801ca2c 	.word	0x0801ca2c
 80061b4:	0801ca48 	.word	0x0801ca48

080061b8 <UART_Receive>:

UartStatus UART_Receive(char* buffer, int buffer_size, int* bytes_received)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
    if (!uart_connected) {
 80061c4:	4b23      	ldr	r3, [pc, #140]	@ (8006254 <UART_Receive+0x9c>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	f083 0301 	eor.w	r3, r3, #1
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d006      	beq.n	80061e0 <UART_Receive+0x28>
        LOG_ERROR("[UART] Receive failed: not connected");
 80061d2:	4921      	ldr	r1, [pc, #132]	@ (8006258 <UART_Receive+0xa0>)
 80061d4:	2003      	movs	r0, #3
 80061d6:	f7ff fdb1 	bl	8005d3c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80061da:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 80061de:	e034      	b.n	800624a <UART_Receive+0x92>
    }

    if (buffer == NULL || buffer_size <= 0 || bytes_received == NULL) {
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d005      	beq.n	80061f2 <UART_Receive+0x3a>
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	dd02      	ble.n	80061f2 <UART_Receive+0x3a>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d106      	bne.n	8006200 <UART_Receive+0x48>
        LOG_ERROR("[UART] Receive failed: invalid parameters");
 80061f2:	491a      	ldr	r1, [pc, #104]	@ (800625c <UART_Receive+0xa4>)
 80061f4:	2003      	movs	r0, #3
 80061f6:	f7ff fda1 	bl	8005d3c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80061fa:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 80061fe:	e024      	b.n	800624a <UART_Receive+0x92>
    }

    LOG_DEBUG("[UART] Receiving data (buffer_size: %d)", buffer_size);
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	4917      	ldr	r1, [pc, #92]	@ (8006260 <UART_Receive+0xa8>)
 8006204:	2000      	movs	r0, #0
 8006206:	f7ff fd99 	bl	8005d3c <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Receive(buffer, buffer_size, bytes_received);
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	68b9      	ldr	r1, [r7, #8]
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f000 f984 	bl	800651c <UART_Platform_Receive>
 8006214:	6178      	str	r0, [r7, #20]

    if (status == UART_STATUS_OK) {
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d107      	bne.n	800622c <UART_Receive+0x74>
        LOG_DEBUG("[UART] Received %d bytes: %s", *bytes_received, buffer);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4910      	ldr	r1, [pc, #64]	@ (8006264 <UART_Receive+0xac>)
 8006224:	2000      	movs	r0, #0
 8006226:	f7ff fd89 	bl	8005d3c <LOGGER_SendFormatted>
 800622a:	e00d      	b.n	8006248 <UART_Receive+0x90>
    } else if (status == UART_STATUS_TIMEOUT) {
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f113 0f05 	cmn.w	r3, #5
 8006232:	d104      	bne.n	800623e <UART_Receive+0x86>
        LOG_DEBUG("[UART] Receive timeout");
 8006234:	490c      	ldr	r1, [pc, #48]	@ (8006268 <UART_Receive+0xb0>)
 8006236:	2000      	movs	r0, #0
 8006238:	f7ff fd80 	bl	8005d3c <LOGGER_SendFormatted>
 800623c:	e004      	b.n	8006248 <UART_Receive+0x90>
    } else {
        LOG_ERROR("[UART] Receive failed (status: %d)", status);
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	490a      	ldr	r1, [pc, #40]	@ (800626c <UART_Receive+0xb4>)
 8006242:	2003      	movs	r0, #3
 8006244:	f7ff fd7a 	bl	8005d3c <LOGGER_SendFormatted>
    }

    return status;
 8006248:	697b      	ldr	r3, [r7, #20]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3718      	adds	r7, #24
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	20001719 	.word	0x20001719
 8006258:	0801ca6c 	.word	0x0801ca6c
 800625c:	0801ca94 	.word	0x0801ca94
 8006260:	0801cac0 	.word	0x0801cac0
 8006264:	0801cae8 	.word	0x0801cae8
 8006268:	0801cb08 	.word	0x0801cb08
 800626c:	0801cb20 	.word	0x0801cb20

08006270 <flush_rx_buffer>:
// 내부 상태 변수들
static bool uart_initialized = false;
static bool dma_receiving = false;

// 수신 버퍼 플러시 함수
static void flush_rx_buffer(void) {
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
    uint8_t dummy;
    int flush_count = 0;
 8006276:	2300      	movs	r3, #0
 8006278:	607b      	str	r3, [r7, #4]
    
    // 방법 1: 직접 레지스터 체크로 기존 데이터 클리어
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 800627a:	e007      	b.n	800628c <flush_rx_buffer+0x1c>
        dummy = (uint8_t)(huart6.Instance->RDR & 0xFF);
 800627c:	4b12      	ldr	r3, [pc, #72]	@ (80062c8 <flush_rx_buffer+0x58>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006282:	b2db      	uxtb	r3, r3
 8006284:	70fb      	strb	r3, [r7, #3]
        flush_count++;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	3301      	adds	r3, #1
 800628a:	607b      	str	r3, [r7, #4]
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 800628c:	4b0e      	ldr	r3, [pc, #56]	@ (80062c8 <flush_rx_buffer+0x58>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	f003 0320 	and.w	r3, r3, #32
 8006296:	2b20      	cmp	r3, #32
 8006298:	d106      	bne.n	80062a8 <flush_rx_buffer+0x38>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b63      	cmp	r3, #99	@ 0x63
 800629e:	dded      	ble.n	800627c <flush_rx_buffer+0xc>
    }
    
    // 방법 2: HAL로 남은 데이터 클리어 (타임아웃 1ms)
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 80062a0:	e002      	b.n	80062a8 <flush_rx_buffer+0x38>
        flush_count++;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	3301      	adds	r3, #1
 80062a6:	607b      	str	r3, [r7, #4]
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 80062a8:	1cf9      	adds	r1, r7, #3
 80062aa:	2301      	movs	r3, #1
 80062ac:	2201      	movs	r2, #1
 80062ae:	4806      	ldr	r0, [pc, #24]	@ (80062c8 <flush_rx_buffer+0x58>)
 80062b0:	f009 fbb7 	bl	800fa22 <HAL_UART_Receive>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d102      	bne.n	80062c0 <flush_rx_buffer+0x50>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b63      	cmp	r3, #99	@ 0x63
 80062be:	ddf0      	ble.n	80062a2 <flush_rx_buffer+0x32>
    }
}
 80062c0:	bf00      	nop
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	20001240 	.word	0x20001240

080062cc <UART_Platform_Connect>:

UartStatus UART_Platform_Connect(const char* port) {
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
    // STM32에서는 이미 HAL_UART_Init()이 실행됨
    uart_initialized = true;
 80062d4:	4b5c      	ldr	r3, [pc, #368]	@ (8006448 <UART_Platform_Connect+0x17c>)
 80062d6:	2201      	movs	r2, #1
 80062d8:	701a      	strb	r2, [r3, #0]
    
    // UART 상태 체크 및 리셋
    LOG_INFO("[UART_STM32] UART gState: %d, RxState: %d", 
 80062da:	4b5c      	ldr	r3, [pc, #368]	@ (800644c <UART_Platform_Connect+0x180>)
 80062dc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80062de:	4b5b      	ldr	r3, [pc, #364]	@ (800644c <UART_Platform_Connect+0x180>)
 80062e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062e4:	495a      	ldr	r1, [pc, #360]	@ (8006450 <UART_Platform_Connect+0x184>)
 80062e6:	2001      	movs	r0, #1
 80062e8:	f7ff fd28 	bl	8005d3c <LOGGER_SendFormatted>
             huart6.gState, huart6.RxState);
    
    // DMA 핸들 연결 상태 확인
    if (huart6.hdmarx != NULL) {
 80062ec:	4b57      	ldr	r3, [pc, #348]	@ (800644c <UART_Platform_Connect+0x180>)
 80062ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00e      	beq.n	8006312 <UART_Platform_Connect+0x46>
        LOG_INFO("[UART_STM32] DMA RX handle is connected");
 80062f4:	4957      	ldr	r1, [pc, #348]	@ (8006454 <UART_Platform_Connect+0x188>)
 80062f6:	2001      	movs	r0, #1
 80062f8:	f7ff fd20 	bl	8005d3c <LOGGER_SendFormatted>
        LOG_INFO("[UART_STM32] DMA State: %d", huart6.hdmarx->State);
 80062fc:	4b53      	ldr	r3, [pc, #332]	@ (800644c <UART_Platform_Connect+0x180>)
 80062fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006300:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006304:	b2db      	uxtb	r3, r3
 8006306:	461a      	mov	r2, r3
 8006308:	4953      	ldr	r1, [pc, #332]	@ (8006458 <UART_Platform_Connect+0x18c>)
 800630a:	2001      	movs	r0, #1
 800630c:	f7ff fd16 	bl	8005d3c <LOGGER_SendFormatted>
 8006310:	e019      	b.n	8006346 <UART_Platform_Connect+0x7a>
    } else {
        LOG_ERROR("[UART_STM32] DMA RX handle is NULL - DMA not initialized!");
 8006312:	4952      	ldr	r1, [pc, #328]	@ (800645c <UART_Platform_Connect+0x190>)
 8006314:	2003      	movs	r0, #3
 8006316:	f7ff fd11 	bl	8005d3c <LOGGER_SendFormatted>
        
        // DMA 핸들 강제 연결 시도
        extern DMA_HandleTypeDef hdma_usart6_rx;
        __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 800631a:	4b4c      	ldr	r3, [pc, #304]	@ (800644c <UART_Platform_Connect+0x180>)
 800631c:	4a50      	ldr	r2, [pc, #320]	@ (8006460 <UART_Platform_Connect+0x194>)
 800631e:	675a      	str	r2, [r3, #116]	@ 0x74
 8006320:	4b4f      	ldr	r3, [pc, #316]	@ (8006460 <UART_Platform_Connect+0x194>)
 8006322:	4a4a      	ldr	r2, [pc, #296]	@ (800644c <UART_Platform_Connect+0x180>)
 8006324:	639a      	str	r2, [r3, #56]	@ 0x38
        
        if (huart6.hdmarx != NULL) {
 8006326:	4b49      	ldr	r3, [pc, #292]	@ (800644c <UART_Platform_Connect+0x180>)
 8006328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800632a:	2b00      	cmp	r3, #0
 800632c:	d004      	beq.n	8006338 <UART_Platform_Connect+0x6c>
            LOG_INFO("[UART_STM32] DMA RX handle manually linked");
 800632e:	494d      	ldr	r1, [pc, #308]	@ (8006464 <UART_Platform_Connect+0x198>)
 8006330:	2001      	movs	r0, #1
 8006332:	f7ff fd03 	bl	8005d3c <LOGGER_SendFormatted>
 8006336:	e006      	b.n	8006346 <UART_Platform_Connect+0x7a>
        } else {
            LOG_ERROR("[UART_STM32] Failed to link DMA RX handle");
 8006338:	494b      	ldr	r1, [pc, #300]	@ (8006468 <UART_Platform_Connect+0x19c>)
 800633a:	2003      	movs	r0, #3
 800633c:	f7ff fcfe 	bl	8005d3c <LOGGER_SendFormatted>
            return UART_STATUS_ERROR;
 8006340:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 8006344:	e07c      	b.n	8006440 <UART_Platform_Connect+0x174>
        }
    }
    
    // 이전에 시작된 DMA 작업이 있으면 중지
    if (dma_receiving) {
 8006346:	4b49      	ldr	r3, [pc, #292]	@ (800646c <UART_Platform_Connect+0x1a0>)
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d009      	beq.n	8006362 <UART_Platform_Connect+0x96>
        HAL_UART_DMAStop(&huart6);
 800634e:	483f      	ldr	r0, [pc, #252]	@ (800644c <UART_Platform_Connect+0x180>)
 8006350:	f009 fc73 	bl	800fc3a <HAL_UART_DMAStop>
        dma_receiving = false;
 8006354:	4b45      	ldr	r3, [pc, #276]	@ (800646c <UART_Platform_Connect+0x1a0>)
 8006356:	2200      	movs	r2, #0
 8006358:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] Previous DMA reception stopped");
 800635a:	4945      	ldr	r1, [pc, #276]	@ (8006470 <UART_Platform_Connect+0x1a4>)
 800635c:	2001      	movs	r0, #1
 800635e:	f7ff fced 	bl	8005d3c <LOGGER_SendFormatted>
    }
    
    // UART 상태를 READY로 강제 설정
    huart6.gState = HAL_UART_STATE_READY;
 8006362:	4b3a      	ldr	r3, [pc, #232]	@ (800644c <UART_Platform_Connect+0x180>)
 8006364:	2220      	movs	r2, #32
 8006366:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart6.RxState = HAL_UART_STATE_READY;
 8006368:	4b38      	ldr	r3, [pc, #224]	@ (800644c <UART_Platform_Connect+0x180>)
 800636a:	2220      	movs	r2, #32
 800636c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    
    // DMA 상태도 READY로 설정
    if (huart6.hdmarx != NULL) {
 8006370:	4b36      	ldr	r3, [pc, #216]	@ (800644c <UART_Platform_Connect+0x180>)
 8006372:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006374:	2b00      	cmp	r3, #0
 8006376:	d027      	beq.n	80063c8 <UART_Platform_Connect+0xfc>
        // DMA 재초기화 (기존 상태 문제 해결)
        if (huart6.hdmarx->State != HAL_DMA_STATE_READY) {
 8006378:	4b34      	ldr	r3, [pc, #208]	@ (800644c <UART_Platform_Connect+0x180>)
 800637a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800637c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b01      	cmp	r3, #1
 8006384:	d01b      	beq.n	80063be <UART_Platform_Connect+0xf2>
            LOG_INFO("[UART_STM32] DMA not ready, reinitializing...");
 8006386:	493b      	ldr	r1, [pc, #236]	@ (8006474 <UART_Platform_Connect+0x1a8>)
 8006388:	2001      	movs	r0, #1
 800638a:	f7ff fcd7 	bl	8005d3c <LOGGER_SendFormatted>
            HAL_DMA_DeInit(huart6.hdmarx);
 800638e:	4b2f      	ldr	r3, [pc, #188]	@ (800644c <UART_Platform_Connect+0x180>)
 8006390:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006392:	4618      	mov	r0, r3
 8006394:	f001 f94c 	bl	8007630 <HAL_DMA_DeInit>
            if (HAL_DMA_Init(huart6.hdmarx) != HAL_OK) {
 8006398:	4b2c      	ldr	r3, [pc, #176]	@ (800644c <UART_Platform_Connect+0x180>)
 800639a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800639c:	4618      	mov	r0, r3
 800639e:	f001 f899 	bl	80074d4 <HAL_DMA_Init>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d006      	beq.n	80063b6 <UART_Platform_Connect+0xea>
                LOG_ERROR("[UART_STM32] DMA reinitialization failed");
 80063a8:	4933      	ldr	r1, [pc, #204]	@ (8006478 <UART_Platform_Connect+0x1ac>)
 80063aa:	2003      	movs	r0, #3
 80063ac:	f7ff fcc6 	bl	8005d3c <LOGGER_SendFormatted>
                return UART_STATUS_ERROR;
 80063b0:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 80063b4:	e044      	b.n	8006440 <UART_Platform_Connect+0x174>
            }
            LOG_INFO("[UART_STM32] DMA reinitialized successfully");
 80063b6:	4931      	ldr	r1, [pc, #196]	@ (800647c <UART_Platform_Connect+0x1b0>)
 80063b8:	2001      	movs	r0, #1
 80063ba:	f7ff fcbf 	bl	8005d3c <LOGGER_SendFormatted>
        }
        huart6.hdmarx->State = HAL_DMA_STATE_READY;
 80063be:	4b23      	ldr	r3, [pc, #140]	@ (800644c <UART_Platform_Connect+0x180>)
 80063c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 초기 버퍼 플러시
    flush_rx_buffer();
 80063c8:	f7ff ff52 	bl	8006270 <flush_rx_buffer>
    
    // DMA 기반 연속 수신 시작
    uart_rx_complete_flag = 0;
 80063cc:	4b2c      	ldr	r3, [pc, #176]	@ (8006480 <UART_Platform_Connect+0x1b4>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	701a      	strb	r2, [r3, #0]
    uart_rx_error_flag = 0;
 80063d2:	4b2c      	ldr	r3, [pc, #176]	@ (8006484 <UART_Platform_Connect+0x1b8>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	701a      	strb	r2, [r3, #0]
    uart_rx_length = 0;
 80063d8:	4b2b      	ldr	r3, [pc, #172]	@ (8006488 <UART_Platform_Connect+0x1bc>)
 80063da:	2200      	movs	r2, #0
 80063dc:	801a      	strh	r2, [r3, #0]
    
    // DMA 수신 버퍼 클리어
    memset(rx_buffer, 0, sizeof(rx_buffer));
 80063de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063e2:	2100      	movs	r1, #0
 80063e4:	4829      	ldr	r0, [pc, #164]	@ (800648c <UART_Platform_Connect+0x1c0>)
 80063e6:	f011 ff65 	bl	80182b4 <memset>
    
    LOG_INFO("[UART_STM32] Starting DMA reception...");
 80063ea:	4929      	ldr	r1, [pc, #164]	@ (8006490 <UART_Platform_Connect+0x1c4>)
 80063ec:	2001      	movs	r0, #1
 80063ee:	f7ff fca5 	bl	8005d3c <LOGGER_SendFormatted>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 80063f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063f6:	4925      	ldr	r1, [pc, #148]	@ (800648c <UART_Platform_Connect+0x1c0>)
 80063f8:	4814      	ldr	r0, [pc, #80]	@ (800644c <UART_Platform_Connect+0x180>)
 80063fa:	f009 fbda 	bl	800fbb2 <HAL_UART_Receive_DMA>
 80063fe:	4603      	mov	r3, r0
 8006400:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8006402:	7bfb      	ldrb	r3, [r7, #15]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10a      	bne.n	800641e <UART_Platform_Connect+0x152>
        dma_receiving = true;
 8006408:	4b18      	ldr	r3, [pc, #96]	@ (800646c <UART_Platform_Connect+0x1a0>)
 800640a:	2201      	movs	r2, #1
 800640c:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] ✓ DMA continuous reception started (buffer size: %d)", sizeof(rx_buffer));
 800640e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006412:	4920      	ldr	r1, [pc, #128]	@ (8006494 <UART_Platform_Connect+0x1c8>)
 8006414:	2001      	movs	r0, #1
 8006416:	f7ff fc91 	bl	8005d3c <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
                  huart6.gState, huart6.RxState);
        return UART_STATUS_ERROR;
    }
    
    return UART_STATUS_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	e010      	b.n	8006440 <UART_Platform_Connect+0x174>
        LOG_ERROR("[UART_STM32] ✗ Failed to start DMA reception (status: %d)", status);
 800641e:	7bfb      	ldrb	r3, [r7, #15]
 8006420:	461a      	mov	r2, r3
 8006422:	491d      	ldr	r1, [pc, #116]	@ (8006498 <UART_Platform_Connect+0x1cc>)
 8006424:	2003      	movs	r0, #3
 8006426:	f7ff fc89 	bl	8005d3c <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
 800642a:	4b08      	ldr	r3, [pc, #32]	@ (800644c <UART_Platform_Connect+0x180>)
 800642c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800642e:	4b07      	ldr	r3, [pc, #28]	@ (800644c <UART_Platform_Connect+0x180>)
 8006430:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006434:	4919      	ldr	r1, [pc, #100]	@ (800649c <UART_Platform_Connect+0x1d0>)
 8006436:	2003      	movs	r0, #3
 8006438:	f7ff fc80 	bl	8005d3c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 800643c:	f06f 0364 	mvn.w	r3, #100	@ 0x64
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	20001920 	.word	0x20001920
 800644c:	20001240 	.word	0x20001240
 8006450:	0801cd1c 	.word	0x0801cd1c
 8006454:	0801cd48 	.word	0x0801cd48
 8006458:	0801cd70 	.word	0x0801cd70
 800645c:	0801cd8c 	.word	0x0801cd8c
 8006460:	20001518 	.word	0x20001518
 8006464:	0801cdc8 	.word	0x0801cdc8
 8006468:	0801cdf4 	.word	0x0801cdf4
 800646c:	20001921 	.word	0x20001921
 8006470:	0801ce20 	.word	0x0801ce20
 8006474:	0801ce4c 	.word	0x0801ce4c
 8006478:	0801ce7c 	.word	0x0801ce7c
 800647c:	0801cea8 	.word	0x0801cea8
 8006480:	2000171a 	.word	0x2000171a
 8006484:	2000171b 	.word	0x2000171b
 8006488:	2000171c 	.word	0x2000171c
 800648c:	20001720 	.word	0x20001720
 8006490:	0801ced4 	.word	0x0801ced4
 8006494:	0801cefc 	.word	0x0801cefc
 8006498:	0801cf40 	.word	0x0801cf40
 800649c:	0801cf7c 	.word	0x0801cf7c

080064a0 <UART_Platform_Send>:
    uart_initialized = false;
    
    return UART_STATUS_OK;
}

UartStatus UART_Platform_Send(const char* data) {
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
    if (data == NULL || !uart_initialized) return UART_STATUS_ERROR;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d006      	beq.n	80064bc <UART_Platform_Send+0x1c>
 80064ae:	4b18      	ldr	r3, [pc, #96]	@ (8006510 <UART_Platform_Send+0x70>)
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	f083 0301 	eor.w	r3, r3, #1
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <UART_Platform_Send+0x22>
 80064bc:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 80064c0:	e022      	b.n	8006508 <UART_Platform_Send+0x68>
    
    int len = strlen(data);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7f9 feae 	bl	8000224 <strlen>
 80064c8:	4603      	mov	r3, r0
 80064ca:	60fb      	str	r3, [r7, #12]
    if (len == 0) return UART_STATUS_OK;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <UART_Platform_Send+0x36>
 80064d2:	2300      	movs	r3, #0
 80064d4:	e018      	b.n	8006508 <UART_Platform_Send+0x68>
    
    // 송신 전 수신 버퍼 플러시 (깨끗한 상태에서 시작)
    flush_rx_buffer();
 80064d6:	f7ff fecb 	bl	8006270 <flush_rx_buffer>
    
    // 단순한 송신
    HAL_StatusTypeDef tx_status = HAL_UART_Transmit(&huart6, (uint8_t*)data, len, 1000);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	b29a      	uxth	r2, r3
 80064de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80064e2:	6879      	ldr	r1, [r7, #4]
 80064e4:	480b      	ldr	r0, [pc, #44]	@ (8006514 <UART_Platform_Send+0x74>)
 80064e6:	f009 fa13 	bl	800f910 <HAL_UART_Transmit>
 80064ea:	4603      	mov	r3, r0
 80064ec:	72fb      	strb	r3, [r7, #11]
    
    if (tx_status == HAL_OK) {
 80064ee:	7afb      	ldrb	r3, [r7, #11]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d101      	bne.n	80064f8 <UART_Platform_Send+0x58>
        return UART_STATUS_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	e007      	b.n	8006508 <UART_Platform_Send+0x68>
    } else {
        LOG_ERROR("[UART_STM32] ✗ Transmission failed (HAL status: %d)", tx_status);
 80064f8:	7afb      	ldrb	r3, [r7, #11]
 80064fa:	461a      	mov	r2, r3
 80064fc:	4906      	ldr	r1, [pc, #24]	@ (8006518 <UART_Platform_Send+0x78>)
 80064fe:	2003      	movs	r0, #3
 8006500:	f7ff fc1c 	bl	8005d3c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8006504:	f06f 0364 	mvn.w	r3, #100	@ 0x64
    }
}
 8006508:	4618      	mov	r0, r3
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	20001920 	.word	0x20001920
 8006514:	20001240 	.word	0x20001240
 8006518:	0801cfdc 	.word	0x0801cfdc

0800651c <UART_Platform_Receive>:

UartStatus UART_Platform_Receive(char* buffer, int buffer_size, int* bytes_received) {
 800651c:	b580      	push	{r7, lr}
 800651e:	b08a      	sub	sp, #40	@ 0x28
 8006520:	af02      	add	r7, sp, #8
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
    if (buffer == NULL || bytes_received == NULL || !uart_initialized) {
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d009      	beq.n	8006542 <UART_Platform_Receive+0x26>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d006      	beq.n	8006542 <UART_Platform_Receive+0x26>
 8006534:	4b77      	ldr	r3, [pc, #476]	@ (8006714 <UART_Platform_Receive+0x1f8>)
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	f083 0301 	eor.w	r3, r3, #1
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d002      	beq.n	8006548 <UART_Platform_Receive+0x2c>
        return UART_STATUS_ERROR;
 8006542:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 8006546:	e0e0      	b.n	800670a <UART_Platform_Receive+0x1ee>
    }
    
    if (buffer_size <= 0) {
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	dc05      	bgt.n	800655a <UART_Platform_Receive+0x3e>
        *bytes_received = 0;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	601a      	str	r2, [r3, #0]
        return UART_STATUS_ERROR;
 8006554:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 8006558:	e0d7      	b.n	800670a <UART_Platform_Receive+0x1ee>
    }
    
    *bytes_received = 0;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	601a      	str	r2, [r3, #0]
    
    // DMA 수신이 시작되지 않았으면 에러
    if (!dma_receiving) {
 8006560:	4b6d      	ldr	r3, [pc, #436]	@ (8006718 <UART_Platform_Receive+0x1fc>)
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	f083 0301 	eor.w	r3, r3, #1
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d002      	beq.n	8006574 <UART_Platform_Receive+0x58>
        return UART_STATUS_ERROR;
 800656e:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 8006572:	e0ca      	b.n	800670a <UART_Platform_Receive+0x1ee>
    }
    
    // 에러 체크
    if (uart_rx_error_flag) {
 8006574:	4b69      	ldr	r3, [pc, #420]	@ (800671c <UART_Platform_Receive+0x200>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d009      	beq.n	8006592 <UART_Platform_Receive+0x76>
        uart_rx_error_flag = 0;  // 플래그 클리어
 800657e:	4b67      	ldr	r3, [pc, #412]	@ (800671c <UART_Platform_Receive+0x200>)
 8006580:	2200      	movs	r2, #0
 8006582:	701a      	strb	r2, [r3, #0]
        LOG_WARN("[UART_STM32] ⚠ DMA reception error occurred");
 8006584:	4966      	ldr	r1, [pc, #408]	@ (8006720 <UART_Platform_Receive+0x204>)
 8006586:	2002      	movs	r0, #2
 8006588:	f7ff fbd8 	bl	8005d3c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 800658c:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 8006590:	e0bb      	b.n	800670a <UART_Platform_Receive+0x1ee>
    }
    
    // DMA 수신 완료 체크
    if (uart_rx_complete_flag) {
 8006592:	4b64      	ldr	r3, [pc, #400]	@ (8006724 <UART_Platform_Receive+0x208>)
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 80b4 	beq.w	8006706 <UART_Platform_Receive+0x1ea>
        uart_rx_complete_flag = 0;  // 플래그 클리어
 800659e:	4b61      	ldr	r3, [pc, #388]	@ (8006724 <UART_Platform_Receive+0x208>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	701a      	strb	r2, [r3, #0]
        
        // 실제 수신된 바이트 수 확인
        uint16_t received_length = uart_rx_length;
 80065a4:	4b60      	ldr	r3, [pc, #384]	@ (8006728 <UART_Platform_Receive+0x20c>)
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	837b      	strh	r3, [r7, #26]
        LOG_DEBUG("[UART_STM32] DMA received %d bytes", received_length);
 80065aa:	8b7b      	ldrh	r3, [r7, #26]
 80065ac:	461a      	mov	r2, r3
 80065ae:	495f      	ldr	r1, [pc, #380]	@ (800672c <UART_Platform_Receive+0x210>)
 80065b0:	2000      	movs	r0, #0
 80065b2:	f7ff fbc3 	bl	8005d3c <LOGGER_SendFormatted>
        
        if (received_length > 0 && received_length <= buffer_size - 1) {
 80065b6:	8b7b      	ldrh	r3, [r7, #26]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 809e 	beq.w	80066fa <UART_Platform_Receive+0x1de>
 80065be:	8b7b      	ldrh	r3, [r7, #26]
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	f340 8099 	ble.w	80066fa <UART_Platform_Receive+0x1de>
            // 데이터 복사
            memcpy(buffer, rx_buffer, received_length);
 80065c8:	8b7b      	ldrh	r3, [r7, #26]
 80065ca:	461a      	mov	r2, r3
 80065cc:	4958      	ldr	r1, [pc, #352]	@ (8006730 <UART_Platform_Receive+0x214>)
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f011 ff31 	bl	8018436 <memcpy>
            buffer[received_length] = '\0';  // null terminate
 80065d4:	8b7b      	ldrh	r3, [r7, #26]
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	4413      	add	r3, r2
 80065da:	2200      	movs	r2, #0
 80065dc:	701a      	strb	r2, [r3, #0]
            *bytes_received = received_length;
 80065de:	8b7a      	ldrh	r2, [r7, #26]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	601a      	str	r2, [r3, #0]
            
            // 수신된 데이터 로그 (간단하게)
            LOG_DEBUG("[UART_STM32] Received data (%d bytes): '%s'", received_length, buffer);
 80065e4:	8b7a      	ldrh	r2, [r7, #26]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4952      	ldr	r1, [pc, #328]	@ (8006734 <UART_Platform_Receive+0x218>)
 80065ea:	2000      	movs	r0, #0
 80065ec:	f7ff fba6 	bl	8005d3c <LOGGER_SendFormatted>
            
            // 새로운 수신을 위해 DMA 완전 리셋 후 재시작
            memset(rx_buffer, 0, sizeof(rx_buffer));
 80065f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065f4:	2100      	movs	r1, #0
 80065f6:	484e      	ldr	r0, [pc, #312]	@ (8006730 <UART_Platform_Receive+0x214>)
 80065f8:	f011 fe5c 	bl	80182b4 <memset>
            
            // 1. DMA 완전 정지
            HAL_UART_DMAStop(&huart6);
 80065fc:	484e      	ldr	r0, [pc, #312]	@ (8006738 <UART_Platform_Receive+0x21c>)
 80065fe:	f009 fb1c 	bl	800fc3a <HAL_UART_DMAStop>
            
            // 2. 모든 UART 에러 플래그 클리어
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_PEF);
 8006602:	4b4d      	ldr	r3, [pc, #308]	@ (8006738 <UART_Platform_Receive+0x21c>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2201      	movs	r2, #1
 8006608:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_FEF);
 800660a:	4b4b      	ldr	r3, [pc, #300]	@ (8006738 <UART_Platform_Receive+0x21c>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2202      	movs	r2, #2
 8006610:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_NEF);
 8006612:	4b49      	ldr	r3, [pc, #292]	@ (8006738 <UART_Platform_Receive+0x21c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2204      	movs	r2, #4
 8006618:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_OREF);
 800661a:	4b47      	ldr	r3, [pc, #284]	@ (8006738 <UART_Platform_Receive+0x21c>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2208      	movs	r2, #8
 8006620:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_IDLEF);
 8006622:	4b45      	ldr	r3, [pc, #276]	@ (8006738 <UART_Platform_Receive+0x21c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2210      	movs	r2, #16
 8006628:	621a      	str	r2, [r3, #32]
            
            // 3. DMA 스트림이 완전히 정지될 때까지 대기
            if (huart6.hdmarx != NULL) {
 800662a:	4b43      	ldr	r3, [pc, #268]	@ (8006738 <UART_Platform_Receive+0x21c>)
 800662c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800662e:	2b00      	cmp	r3, #0
 8006630:	d025      	beq.n	800667e <UART_Platform_Receive+0x162>
                int timeout = 1000;
 8006632:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006636:	61fb      	str	r3, [r7, #28]
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 8006638:	e00b      	b.n	8006652 <UART_Platform_Receive+0x136>
                    timeout--;
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	3b01      	subs	r3, #1
 800663e:	61fb      	str	r3, [r7, #28]
                    for(volatile int i = 0; i < 100; i++); // 짧은 지연
 8006640:	2300      	movs	r3, #0
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	e002      	b.n	800664c <UART_Platform_Receive+0x130>
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	3301      	adds	r3, #1
 800664a:	617b      	str	r3, [r7, #20]
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	2b63      	cmp	r3, #99	@ 0x63
 8006650:	ddf9      	ble.n	8006646 <UART_Platform_Receive+0x12a>
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 8006652:	4b39      	ldr	r3, [pc, #228]	@ (8006738 <UART_Platform_Receive+0x21c>)
 8006654:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006656:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b01      	cmp	r3, #1
 800665e:	d002      	beq.n	8006666 <UART_Platform_Receive+0x14a>
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	2b00      	cmp	r3, #0
 8006664:	dce9      	bgt.n	800663a <UART_Platform_Receive+0x11e>
                }
                
                if (timeout == 0) {
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d108      	bne.n	800667e <UART_Platform_Receive+0x162>
                    LOG_WARN("[UART_STM32] DMA did not reach READY state, forcing reset");
 800666c:	4933      	ldr	r1, [pc, #204]	@ (800673c <UART_Platform_Receive+0x220>)
 800666e:	2002      	movs	r0, #2
 8006670:	f7ff fb64 	bl	8005d3c <LOGGER_SendFormatted>
                    huart6.hdmarx->State = HAL_DMA_STATE_READY;
 8006674:	4b30      	ldr	r3, [pc, #192]	@ (8006738 <UART_Platform_Receive+0x21c>)
 8006676:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006678:	2201      	movs	r2, #1
 800667a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                }
            }
            
            // 4. UART 상태 리셋 (DMA 완전 정지 후)
            huart6.RxState = HAL_UART_STATE_READY;
 800667e:	4b2e      	ldr	r3, [pc, #184]	@ (8006738 <UART_Platform_Receive+0x21c>)
 8006680:	2220      	movs	r2, #32
 8006682:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            huart6.gState = HAL_UART_STATE_READY;
 8006686:	4b2c      	ldr	r3, [pc, #176]	@ (8006738 <UART_Platform_Receive+0x21c>)
 8006688:	2220      	movs	r2, #32
 800668a:	67da      	str	r2, [r3, #124]	@ 0x7c
            
            // 5. 충분한 지연 후 재시작
            for(volatile int i = 0; i < 10000; i++); // 더 긴 지연
 800668c:	2300      	movs	r3, #0
 800668e:	613b      	str	r3, [r7, #16]
 8006690:	e002      	b.n	8006698 <UART_Platform_Receive+0x17c>
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	3301      	adds	r3, #1
 8006696:	613b      	str	r3, [r7, #16]
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800669e:	4293      	cmp	r3, r2
 80066a0:	ddf7      	ble.n	8006692 <UART_Platform_Receive+0x176>
            
            // 6. DMA 재시작
            HAL_StatusTypeDef restart_status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 80066a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066a6:	4922      	ldr	r1, [pc, #136]	@ (8006730 <UART_Platform_Receive+0x214>)
 80066a8:	4823      	ldr	r0, [pc, #140]	@ (8006738 <UART_Platform_Receive+0x21c>)
 80066aa:	f009 fa82 	bl	800fbb2 <HAL_UART_Receive_DMA>
 80066ae:	4603      	mov	r3, r0
 80066b0:	767b      	strb	r3, [r7, #25]
            if (restart_status == HAL_OK) {
 80066b2:	7e7b      	ldrb	r3, [r7, #25]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d104      	bne.n	80066c2 <UART_Platform_Receive+0x1a6>
                LOG_DEBUG("[UART_STM32] DMA restarted for next reception");
 80066b8:	4921      	ldr	r1, [pc, #132]	@ (8006740 <UART_Platform_Receive+0x224>)
 80066ba:	2000      	movs	r0, #0
 80066bc:	f7ff fb3e 	bl	8005d3c <LOGGER_SendFormatted>
 80066c0:	e019      	b.n	80066f6 <UART_Platform_Receive+0x1da>
            } else {
                LOG_WARN("[UART_STM32] DMA restart failed (status: %d), UART state: g=%d rx=%d", 
 80066c2:	7e7a      	ldrb	r2, [r7, #25]
 80066c4:	4b1c      	ldr	r3, [pc, #112]	@ (8006738 <UART_Platform_Receive+0x21c>)
 80066c6:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 80066c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006738 <UART_Platform_Receive+0x21c>)
 80066ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	460b      	mov	r3, r1
 80066d2:	491c      	ldr	r1, [pc, #112]	@ (8006744 <UART_Platform_Receive+0x228>)
 80066d4:	2002      	movs	r0, #2
 80066d6:	f7ff fb31 	bl	8005d3c <LOGGER_SendFormatted>
                        restart_status, huart6.gState, huart6.RxState);
                if (huart6.hdmarx != NULL) {
 80066da:	4b17      	ldr	r3, [pc, #92]	@ (8006738 <UART_Platform_Receive+0x21c>)
 80066dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d009      	beq.n	80066f6 <UART_Platform_Receive+0x1da>
                    LOG_WARN("[UART_STM32] DMA state: %d", huart6.hdmarx->State);
 80066e2:	4b15      	ldr	r3, [pc, #84]	@ (8006738 <UART_Platform_Receive+0x21c>)
 80066e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	461a      	mov	r2, r3
 80066ee:	4916      	ldr	r1, [pc, #88]	@ (8006748 <UART_Platform_Receive+0x22c>)
 80066f0:	2002      	movs	r0, #2
 80066f2:	f7ff fb23 	bl	8005d3c <LOGGER_SendFormatted>
                }
            }
            
            return UART_STATUS_OK;
 80066f6:	2300      	movs	r3, #0
 80066f8:	e007      	b.n	800670a <UART_Platform_Receive+0x1ee>
        } else {
            LOG_WARN("[UART_STM32] Invalid received length: %d (buffer size: %d)", received_length, buffer_size);
 80066fa:	8b7a      	ldrh	r2, [r7, #26]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	4913      	ldr	r1, [pc, #76]	@ (800674c <UART_Platform_Receive+0x230>)
 8006700:	2002      	movs	r0, #2
 8006702:	f7ff fb1b 	bl	8005d3c <LOGGER_SendFormatted>
        }
    }
    
    // 수신된 데이터 없음
    return UART_STATUS_TIMEOUT;
 8006706:	f06f 0304 	mvn.w	r3, #4
}
 800670a:	4618      	mov	r0, r3
 800670c:	3720      	adds	r7, #32
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	20001920 	.word	0x20001920
 8006718:	20001921 	.word	0x20001921
 800671c:	2000171b 	.word	0x2000171b
 8006720:	0801d014 	.word	0x0801d014
 8006724:	2000171a 	.word	0x2000171a
 8006728:	2000171c 	.word	0x2000171c
 800672c:	0801d044 	.word	0x0801d044
 8006730:	20001720 	.word	0x20001720
 8006734:	0801d068 	.word	0x0801d068
 8006738:	20001240 	.word	0x20001240
 800673c:	0801d094 	.word	0x0801d094
 8006740:	0801d0d0 	.word	0x0801d0d0
 8006744:	0801d100 	.word	0x0801d100
 8006748:	0801d148 	.word	0x0801d148
 800674c:	0801d164 	.word	0x0801d164

08006750 <HAL_UART_RxCpltCallback>:
// ============================================================================
// HAL UART 콜백 함수들 - main.c에서 이동됨
// ============================================================================

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a0a      	ldr	r2, [pc, #40]	@ (8006788 <HAL_UART_RxCpltCallback+0x38>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d10e      	bne.n	8006780 <HAL_UART_RxCpltCallback+0x30>
  {
    // DMA 수신 완료 (전체 버퍼) - 거의 발생하지 않음
    uart_rx_complete_flag = 1;
 8006762:	4b0a      	ldr	r3, [pc, #40]	@ (800678c <HAL_UART_RxCpltCallback+0x3c>)
 8006764:	2201      	movs	r2, #1
 8006766:	701a      	strb	r2, [r3, #0]
    uart_rx_length = sizeof(rx_buffer);
 8006768:	4b09      	ldr	r3, [pc, #36]	@ (8006790 <HAL_UART_RxCpltCallback+0x40>)
 800676a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800676e:	801a      	strh	r2, [r3, #0]
    LOG_DEBUG("[DMA] RxCpltCallback: Full buffer received (%d bytes)", uart_rx_length);
 8006770:	4b07      	ldr	r3, [pc, #28]	@ (8006790 <HAL_UART_RxCpltCallback+0x40>)
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	b29b      	uxth	r3, r3
 8006776:	461a      	mov	r2, r3
 8006778:	4906      	ldr	r1, [pc, #24]	@ (8006794 <HAL_UART_RxCpltCallback+0x44>)
 800677a:	2000      	movs	r0, #0
 800677c:	f7ff fade 	bl	8005d3c <LOGGER_SendFormatted>
  }
}
 8006780:	bf00      	nop
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	40011400 	.word	0x40011400
 800678c:	2000171a 	.word	0x2000171a
 8006790:	2000171c 	.word	0x2000171c
 8006794:	0801d1a0 	.word	0x0801d1a0

08006798 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a05      	ldr	r2, [pc, #20]	@ (80067bc <HAL_UART_RxHalfCpltCallback+0x24>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d103      	bne.n	80067b2 <HAL_UART_RxHalfCpltCallback+0x1a>
  {
    // DMA 수신 절반 완료 - NORMAL 모드에서는 처리하지 않음 (IDLE 인터럽트가 처리)
    LOG_WARN("[DMA] RxHalfCpltCallback: Half buffer reached but ignoring in NORMAL mode");
 80067aa:	4905      	ldr	r1, [pc, #20]	@ (80067c0 <HAL_UART_RxHalfCpltCallback+0x28>)
 80067ac:	2002      	movs	r0, #2
 80067ae:	f7ff fac5 	bl	8005d3c <LOGGER_SendFormatted>
    // uart_rx_complete_flag는 설정하지 않음 - IDLE 인터럽트에서만 설정
  }
}
 80067b2:	bf00      	nop
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	40011400 	.word	0x40011400
 80067c0:	0801d1d8 	.word	0x0801d1d8

080067c4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a3c      	ldr	r2, [pc, #240]	@ (80068c4 <HAL_UART_ErrorCallback+0x100>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d171      	bne.n	80068ba <HAL_UART_ErrorCallback+0xf6>
  {
    // UART 에러 발생
    uart_rx_error_flag = 1;
 80067d6:	4b3c      	ldr	r3, [pc, #240]	@ (80068c8 <HAL_UART_ErrorCallback+0x104>)
 80067d8:	2201      	movs	r2, #1
 80067da:	701a      	strb	r2, [r3, #0]
    LOG_WARN("[DMA] ErrorCallback: UART error occurred");
 80067dc:	493b      	ldr	r1, [pc, #236]	@ (80068cc <HAL_UART_ErrorCallback+0x108>)
 80067de:	2002      	movs	r0, #2
 80067e0:	f7ff faac 	bl	8005d3c <LOGGER_SendFormatted>
    
    // 모든 에러 플래그 클리어
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) {
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	f003 0308 	and.w	r3, r3, #8
 80067ee:	2b08      	cmp	r3, #8
 80067f0:	d107      	bne.n	8006802 <HAL_UART_ErrorCallback+0x3e>
      __HAL_UART_CLEAR_OREFLAG(huart);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2208      	movs	r2, #8
 80067f8:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Overrun error cleared");
 80067fa:	4935      	ldr	r1, [pc, #212]	@ (80068d0 <HAL_UART_ErrorCallback+0x10c>)
 80067fc:	2002      	movs	r0, #2
 80067fe:	f7ff fa9d 	bl	8005d3c <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) {
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	f003 0304 	and.w	r3, r3, #4
 800680c:	2b04      	cmp	r3, #4
 800680e:	d107      	bne.n	8006820 <HAL_UART_ErrorCallback+0x5c>
      __HAL_UART_CLEAR_NEFLAG(huart);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2204      	movs	r2, #4
 8006816:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Noise error cleared");
 8006818:	492e      	ldr	r1, [pc, #184]	@ (80068d4 <HAL_UART_ErrorCallback+0x110>)
 800681a:	2002      	movs	r0, #2
 800681c:	f7ff fa8e 	bl	8005d3c <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) {
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b02      	cmp	r3, #2
 800682c:	d107      	bne.n	800683e <HAL_UART_ErrorCallback+0x7a>
      __HAL_UART_CLEAR_FEFLAG(huart);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2202      	movs	r2, #2
 8006834:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Frame error cleared");
 8006836:	4928      	ldr	r1, [pc, #160]	@ (80068d8 <HAL_UART_ErrorCallback+0x114>)
 8006838:	2002      	movs	r0, #2
 800683a:	f7ff fa7f 	bl	8005d3c <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) {
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	69db      	ldr	r3, [r3, #28]
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	2b01      	cmp	r3, #1
 800684a:	d107      	bne.n	800685c <HAL_UART_ErrorCallback+0x98>
      __HAL_UART_CLEAR_PEFLAG(huart);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2201      	movs	r2, #1
 8006852:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Parity error cleared");
 8006854:	4921      	ldr	r1, [pc, #132]	@ (80068dc <HAL_UART_ErrorCallback+0x118>)
 8006856:	2002      	movs	r0, #2
 8006858:	f7ff fa70 	bl	8005d3c <LOGGER_SendFormatted>
    }
    
    // UART와 DMA 상태 강제 리셋
    HAL_UART_DMAStop(huart);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f009 f9ec 	bl	800fc3a <HAL_UART_DMAStop>
    huart->gState = HAL_UART_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2220      	movs	r2, #32
 8006866:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2220      	movs	r2, #32
 800686c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (huart->hdmarx != NULL) {
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006874:	2b00      	cmp	r3, #0
 8006876:	d004      	beq.n	8006882 <HAL_UART_ErrorCallback+0xbe>
      huart->hdmarx->State = HAL_DMA_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 버퍼 클리어 후 DMA 재시작 (일반 모드)
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8006882:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006886:	2100      	movs	r1, #0
 8006888:	4815      	ldr	r0, [pc, #84]	@ (80068e0 <HAL_UART_ErrorCallback+0x11c>)
 800688a:	f011 fd13 	bl	80182b4 <memset>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(huart, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 800688e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006892:	4913      	ldr	r1, [pc, #76]	@ (80068e0 <HAL_UART_ErrorCallback+0x11c>)
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f009 f98c 	bl	800fbb2 <HAL_UART_Receive_DMA>
 800689a:	4603      	mov	r3, r0
 800689c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 800689e:	7bfb      	ldrb	r3, [r7, #15]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d104      	bne.n	80068ae <HAL_UART_ErrorCallback+0xea>
      LOG_INFO("[DMA] Error recovery: DMA restarted successfully");
 80068a4:	490f      	ldr	r1, [pc, #60]	@ (80068e4 <HAL_UART_ErrorCallback+0x120>)
 80068a6:	2001      	movs	r0, #1
 80068a8:	f7ff fa48 	bl	8005d3c <LOGGER_SendFormatted>
    } else {
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
    }
  }
}
 80068ac:	e005      	b.n	80068ba <HAL_UART_ErrorCallback+0xf6>
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
 80068b0:	461a      	mov	r2, r3
 80068b2:	490d      	ldr	r1, [pc, #52]	@ (80068e8 <HAL_UART_ErrorCallback+0x124>)
 80068b4:	2003      	movs	r0, #3
 80068b6:	f7ff fa41 	bl	8005d3c <LOGGER_SendFormatted>
}
 80068ba:	bf00      	nop
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	40011400 	.word	0x40011400
 80068c8:	2000171b 	.word	0x2000171b
 80068cc:	0801d224 	.word	0x0801d224
 80068d0:	0801d250 	.word	0x0801d250
 80068d4:	0801d26c 	.word	0x0801d26c
 80068d8:	0801d288 	.word	0x0801d288
 80068dc:	0801d2a4 	.word	0x0801d2a4
 80068e0:	20001720 	.word	0x20001720
 80068e4:	0801d2c0 	.word	0x0801d2c0
 80068e8:	0801d2f4 	.word	0x0801d2f4

080068ec <USER_UART_IDLECallback>:

// UART IDLE 인터럽트 콜백 (메시지 끝 감지)
void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b086      	sub	sp, #24
 80068f0:	af02      	add	r7, sp, #8
 80068f2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a3e      	ldr	r2, [pc, #248]	@ (80069f4 <USER_UART_IDLECallback+0x108>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d175      	bne.n	80069ea <USER_UART_IDLECallback+0xfe>
  {
    // UART 에러 상태 체크
    uint32_t error_flags = 0;
 80068fe:	2300      	movs	r3, #0
 8006900:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) error_flags |= 0x01;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	69db      	ldr	r3, [r3, #28]
 8006908:	f003 0308 	and.w	r3, r3, #8
 800690c:	2b08      	cmp	r3, #8
 800690e:	d103      	bne.n	8006918 <USER_UART_IDLECallback+0x2c>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f043 0301 	orr.w	r3, r3, #1
 8006916:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) error_flags |= 0x02;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b02      	cmp	r3, #2
 8006924:	d103      	bne.n	800692e <USER_UART_IDLECallback+0x42>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f043 0302 	orr.w	r3, r3, #2
 800692c:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) error_flags |= 0x04;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	69db      	ldr	r3, [r3, #28]
 8006934:	f003 0304 	and.w	r3, r3, #4
 8006938:	2b04      	cmp	r3, #4
 800693a:	d103      	bne.n	8006944 <USER_UART_IDLECallback+0x58>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f043 0304 	orr.w	r3, r3, #4
 8006942:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) error_flags |= 0x08;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b01      	cmp	r3, #1
 8006950:	d103      	bne.n	800695a <USER_UART_IDLECallback+0x6e>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f043 0308 	orr.w	r3, r3, #8
 8006958:	60fb      	str	r3, [r7, #12]
    
    // IDLE 감지 - 메시지 끝
    uint16_t remaining = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	817b      	strh	r3, [r7, #10]
    uart_rx_length = sizeof(rx_buffer) - remaining;
 8006964:	897b      	ldrh	r3, [r7, #10]
 8006966:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800696a:	b29a      	uxth	r2, r3
 800696c:	4b22      	ldr	r3, [pc, #136]	@ (80069f8 <USER_UART_IDLECallback+0x10c>)
 800696e:	801a      	strh	r2, [r3, #0]
    
    if (uart_rx_length > 0) {
 8006970:	4b21      	ldr	r3, [pc, #132]	@ (80069f8 <USER_UART_IDLECallback+0x10c>)
 8006972:	881b      	ldrh	r3, [r3, #0]
 8006974:	b29b      	uxth	r3, r3
 8006976:	2b00      	cmp	r3, #0
 8006978:	d033      	beq.n	80069e2 <USER_UART_IDLECallback+0xf6>
      uart_rx_complete_flag = 1;
 800697a:	4b20      	ldr	r3, [pc, #128]	@ (80069fc <USER_UART_IDLECallback+0x110>)
 800697c:	2201      	movs	r2, #1
 800697e:	701a      	strb	r2, [r3, #0]
      if (error_flags != 0) {
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d009      	beq.n	800699a <USER_UART_IDLECallback+0xae>
        LOG_WARN("[DMA] IDLE detected: %d bytes received (UART errors: 0x%02lX)", uart_rx_length, error_flags);
 8006986:	4b1c      	ldr	r3, [pc, #112]	@ (80069f8 <USER_UART_IDLECallback+0x10c>)
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	b29b      	uxth	r3, r3
 800698c:	461a      	mov	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	491b      	ldr	r1, [pc, #108]	@ (8006a00 <USER_UART_IDLECallback+0x114>)
 8006992:	2002      	movs	r0, #2
 8006994:	f7ff f9d2 	bl	8005d3c <LOGGER_SendFormatted>
 8006998:	e007      	b.n	80069aa <USER_UART_IDLECallback+0xbe>
      } else {
        LOG_DEBUG("[DMA] IDLE detected: %d bytes received", uart_rx_length);
 800699a:	4b17      	ldr	r3, [pc, #92]	@ (80069f8 <USER_UART_IDLECallback+0x10c>)
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	b29b      	uxth	r3, r3
 80069a0:	461a      	mov	r2, r3
 80069a2:	4918      	ldr	r1, [pc, #96]	@ (8006a04 <USER_UART_IDLECallback+0x118>)
 80069a4:	2000      	movs	r0, #0
 80069a6:	f7ff f9c9 	bl	8005d3c <LOGGER_SendFormatted>
      }
      
      // 첫 몇 바이트 확인 (디버깅용)
      if (uart_rx_length >= 4) {
 80069aa:	4b13      	ldr	r3, [pc, #76]	@ (80069f8 <USER_UART_IDLECallback+0x10c>)
 80069ac:	881b      	ldrh	r3, [r3, #0]
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d912      	bls.n	80069da <USER_UART_IDLECallback+0xee>
        LOG_DEBUG("[DMA] First 4 bytes: %02X %02X %02X %02X", 
 80069b4:	4b14      	ldr	r3, [pc, #80]	@ (8006a08 <USER_UART_IDLECallback+0x11c>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	4619      	mov	r1, r3
 80069ba:	4b13      	ldr	r3, [pc, #76]	@ (8006a08 <USER_UART_IDLECallback+0x11c>)
 80069bc:	785b      	ldrb	r3, [r3, #1]
 80069be:	4618      	mov	r0, r3
 80069c0:	4b11      	ldr	r3, [pc, #68]	@ (8006a08 <USER_UART_IDLECallback+0x11c>)
 80069c2:	789b      	ldrb	r3, [r3, #2]
 80069c4:	461a      	mov	r2, r3
 80069c6:	4b10      	ldr	r3, [pc, #64]	@ (8006a08 <USER_UART_IDLECallback+0x11c>)
 80069c8:	78db      	ldrb	r3, [r3, #3]
 80069ca:	9301      	str	r3, [sp, #4]
 80069cc:	9200      	str	r2, [sp, #0]
 80069ce:	4603      	mov	r3, r0
 80069d0:	460a      	mov	r2, r1
 80069d2:	490e      	ldr	r1, [pc, #56]	@ (8006a0c <USER_UART_IDLECallback+0x120>)
 80069d4:	2000      	movs	r0, #0
 80069d6:	f7ff f9b1 	bl	8005d3c <LOGGER_SendFormatted>
                  rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3]);
      }
      
      // DMA 중지 (일반 모드에서는 자동으로 완료됨)
      HAL_UART_DMAStop(huart);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f009 f92d 	bl	800fc3a <HAL_UART_DMAStop>
      // 다음 수신을 위해 즉시 재시작하지 않음 - uart_stm32.c에서 처리
    } else {
      LOG_DEBUG("[DMA] IDLE detected but no data");
    }
  }
}
 80069e0:	e003      	b.n	80069ea <USER_UART_IDLECallback+0xfe>
      LOG_DEBUG("[DMA] IDLE detected but no data");
 80069e2:	490b      	ldr	r1, [pc, #44]	@ (8006a10 <USER_UART_IDLECallback+0x124>)
 80069e4:	2000      	movs	r0, #0
 80069e6:	f7ff f9a9 	bl	8005d3c <LOGGER_SendFormatted>
}
 80069ea:	bf00      	nop
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	40011400 	.word	0x40011400
 80069f8:	2000171c 	.word	0x2000171c
 80069fc:	2000171a 	.word	0x2000171a
 8006a00:	0801d32c 	.word	0x0801d32c
 8006a04:	0801d36c 	.word	0x0801d36c
 8006a08:	20001720 	.word	0x20001720
 8006a0c:	0801d394 	.word	0x0801d394
 8006a10:	0801d3c0 	.word	0x0801d3c0

08006a14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006a14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006a4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006a18:	f7ff f8e6 	bl	8005be8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006a1c:	480c      	ldr	r0, [pc, #48]	@ (8006a50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006a1e:	490d      	ldr	r1, [pc, #52]	@ (8006a54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006a20:	4a0d      	ldr	r2, [pc, #52]	@ (8006a58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006a24:	e002      	b.n	8006a2c <LoopCopyDataInit>

08006a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006a2a:	3304      	adds	r3, #4

08006a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006a30:	d3f9      	bcc.n	8006a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006a32:	4a0a      	ldr	r2, [pc, #40]	@ (8006a5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006a34:	4c0a      	ldr	r4, [pc, #40]	@ (8006a60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006a38:	e001      	b.n	8006a3e <LoopFillZerobss>

08006a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006a3c:	3204      	adds	r2, #4

08006a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006a40:	d3fb      	bcc.n	8006a3a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8006a42:	f011 fcd1 	bl	80183e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006a46:	f7fb fabb 	bl	8001fc0 <main>
  bx  lr    
 8006a4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006a4c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8006a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006a54:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8006a58:	0801d67c 	.word	0x0801d67c
  ldr r2, =_sbss
 8006a5c:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8006a60:	200123f0 	.word	0x200123f0

08006a64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006a64:	e7fe      	b.n	8006a64 <ADC_IRQHandler>

08006a66 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006a6a:	2003      	movs	r0, #3
 8006a6c:	f000 fb91 	bl	8007192 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006a70:	2000      	movs	r0, #0
 8006a72:	f7fe fc69 	bl	8005348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006a76:	f7fd fbcb 	bl	8004210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006a80:	b480      	push	{r7}
 8006a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006a84:	4b06      	ldr	r3, [pc, #24]	@ (8006aa0 <HAL_IncTick+0x20>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	4b06      	ldr	r3, [pc, #24]	@ (8006aa4 <HAL_IncTick+0x24>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4413      	add	r3, r2
 8006a90:	4a04      	ldr	r2, [pc, #16]	@ (8006aa4 <HAL_IncTick+0x24>)
 8006a92:	6013      	str	r3, [r2, #0]
}
 8006a94:	bf00      	nop
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	20000074 	.word	0x20000074
 8006aa4:	20001924 	.word	0x20001924

08006aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8006aac:	4b03      	ldr	r3, [pc, #12]	@ (8006abc <HAL_GetTick+0x14>)
 8006aae:	681b      	ldr	r3, [r3, #0]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	20001924 	.word	0x20001924

08006ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006ac8:	f7ff ffee 	bl	8006aa8 <HAL_GetTick>
 8006acc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad8:	d005      	beq.n	8006ae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006ada:	4b0a      	ldr	r3, [pc, #40]	@ (8006b04 <HAL_Delay+0x44>)
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006ae6:	bf00      	nop
 8006ae8:	f7ff ffde 	bl	8006aa8 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d8f7      	bhi.n	8006ae8 <HAL_Delay+0x28>
  {
  }
}
 8006af8:	bf00      	nop
 8006afa:	bf00      	nop
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	20000074 	.word	0x20000074

08006b08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b10:	2300      	movs	r3, #0
 8006b12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e031      	b.n	8006b82 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d109      	bne.n	8006b3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7fd fb9a 	bl	8004260 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b3e:	f003 0310 	and.w	r3, r3, #16
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d116      	bne.n	8006b74 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b4a:	4b10      	ldr	r3, [pc, #64]	@ (8006b8c <HAL_ADC_Init+0x84>)
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	f043 0202 	orr.w	r2, r3, #2
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f974 	bl	8006e44 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b66:	f023 0303 	bic.w	r3, r3, #3
 8006b6a:	f043 0201 	orr.w	r2, r3, #1
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	641a      	str	r2, [r3, #64]	@ 0x40
 8006b72:	e001      	b.n	8006b78 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	ffffeefd 	.word	0xffffeefd

08006b90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d101      	bne.n	8006bac <HAL_ADC_ConfigChannel+0x1c>
 8006ba8:	2302      	movs	r3, #2
 8006baa:	e13a      	b.n	8006e22 <HAL_ADC_ConfigChannel+0x292>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b09      	cmp	r3, #9
 8006bba:	d93a      	bls.n	8006c32 <HAL_ADC_ConfigChannel+0xa2>
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bc4:	d035      	beq.n	8006c32 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68d9      	ldr	r1, [r3, #12]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	005b      	lsls	r3, r3, #1
 8006bd8:	4413      	add	r3, r2
 8006bda:	3b1e      	subs	r3, #30
 8006bdc:	2207      	movs	r2, #7
 8006bde:	fa02 f303 	lsl.w	r3, r2, r3
 8006be2:	43da      	mvns	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	400a      	ands	r2, r1
 8006bea:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a8f      	ldr	r2, [pc, #572]	@ (8006e30 <HAL_ADC_ConfigChannel+0x2a0>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d10a      	bne.n	8006c0c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68d9      	ldr	r1, [r3, #12]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	061a      	lsls	r2, r3, #24
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006c0a:	e039      	b.n	8006c80 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68d9      	ldr	r1, [r3, #12]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	689a      	ldr	r2, [r3, #8]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	4603      	mov	r3, r0
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	4403      	add	r3, r0
 8006c24:	3b1e      	subs	r3, #30
 8006c26:	409a      	lsls	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006c30:	e026      	b.n	8006c80 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6919      	ldr	r1, [r3, #16]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	461a      	mov	r2, r3
 8006c40:	4613      	mov	r3, r2
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	4413      	add	r3, r2
 8006c46:	f003 031f 	and.w	r3, r3, #31
 8006c4a:	2207      	movs	r2, #7
 8006c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c50:	43da      	mvns	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	400a      	ands	r2, r1
 8006c58:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	6919      	ldr	r1, [r3, #16]
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	689a      	ldr	r2, [r3, #8]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	005b      	lsls	r3, r3, #1
 8006c70:	4403      	add	r3, r0
 8006c72:	f003 031f 	and.w	r3, r3, #31
 8006c76:	409a      	lsls	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	430a      	orrs	r2, r1
 8006c7e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	2b06      	cmp	r3, #6
 8006c86:	d824      	bhi.n	8006cd2 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	685a      	ldr	r2, [r3, #4]
 8006c92:	4613      	mov	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	3b05      	subs	r3, #5
 8006c9a:	221f      	movs	r2, #31
 8006c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca0:	43da      	mvns	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	400a      	ands	r2, r1
 8006ca8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	3b05      	subs	r3, #5
 8006cc4:	fa00 f203 	lsl.w	r2, r0, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	635a      	str	r2, [r3, #52]	@ 0x34
 8006cd0:	e04c      	b.n	8006d6c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	2b0c      	cmp	r3, #12
 8006cd8:	d824      	bhi.n	8006d24 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	685a      	ldr	r2, [r3, #4]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	3b23      	subs	r3, #35	@ 0x23
 8006cec:	221f      	movs	r2, #31
 8006cee:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf2:	43da      	mvns	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	400a      	ands	r2, r1
 8006cfa:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	4618      	mov	r0, r3
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	685a      	ldr	r2, [r3, #4]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	3b23      	subs	r3, #35	@ 0x23
 8006d16:	fa00 f203 	lsl.w	r2, r0, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d22:	e023      	b.n	8006d6c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	3b41      	subs	r3, #65	@ 0x41
 8006d36:	221f      	movs	r2, #31
 8006d38:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3c:	43da      	mvns	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	400a      	ands	r2, r1
 8006d44:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	4618      	mov	r0, r3
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	685a      	ldr	r2, [r3, #4]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	4413      	add	r3, r2
 8006d5e:	3b41      	subs	r3, #65	@ 0x41
 8006d60:	fa00 f203 	lsl.w	r2, r0, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	430a      	orrs	r2, r1
 8006d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a30      	ldr	r2, [pc, #192]	@ (8006e34 <HAL_ADC_ConfigChannel+0x2a4>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d10a      	bne.n	8006d8c <HAL_ADC_ConfigChannel+0x1fc>
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d7e:	d105      	bne.n	8006d8c <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006d80:	4b2d      	ldr	r3, [pc, #180]	@ (8006e38 <HAL_ADC_ConfigChannel+0x2a8>)
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	4a2c      	ldr	r2, [pc, #176]	@ (8006e38 <HAL_ADC_ConfigChannel+0x2a8>)
 8006d86:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8006d8a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a28      	ldr	r2, [pc, #160]	@ (8006e34 <HAL_ADC_ConfigChannel+0x2a4>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d10f      	bne.n	8006db6 <HAL_ADC_ConfigChannel+0x226>
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b12      	cmp	r3, #18
 8006d9c:	d10b      	bne.n	8006db6 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8006d9e:	4b26      	ldr	r3, [pc, #152]	@ (8006e38 <HAL_ADC_ConfigChannel+0x2a8>)
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	4a25      	ldr	r2, [pc, #148]	@ (8006e38 <HAL_ADC_ConfigChannel+0x2a8>)
 8006da4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006da8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8006daa:	4b23      	ldr	r3, [pc, #140]	@ (8006e38 <HAL_ADC_ConfigChannel+0x2a8>)
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	4a22      	ldr	r2, [pc, #136]	@ (8006e38 <HAL_ADC_ConfigChannel+0x2a8>)
 8006db0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006db4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a1e      	ldr	r2, [pc, #120]	@ (8006e34 <HAL_ADC_ConfigChannel+0x2a4>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d12b      	bne.n	8006e18 <HAL_ADC_ConfigChannel+0x288>
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a1a      	ldr	r2, [pc, #104]	@ (8006e30 <HAL_ADC_ConfigChannel+0x2a0>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d003      	beq.n	8006dd2 <HAL_ADC_ConfigChannel+0x242>
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b11      	cmp	r3, #17
 8006dd0:	d122      	bne.n	8006e18 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8006dd2:	4b19      	ldr	r3, [pc, #100]	@ (8006e38 <HAL_ADC_ConfigChannel+0x2a8>)
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	4a18      	ldr	r2, [pc, #96]	@ (8006e38 <HAL_ADC_ConfigChannel+0x2a8>)
 8006dd8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8006ddc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006dde:	4b16      	ldr	r3, [pc, #88]	@ (8006e38 <HAL_ADC_ConfigChannel+0x2a8>)
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	4a15      	ldr	r2, [pc, #84]	@ (8006e38 <HAL_ADC_ConfigChannel+0x2a8>)
 8006de4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006de8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a10      	ldr	r2, [pc, #64]	@ (8006e30 <HAL_ADC_ConfigChannel+0x2a0>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d111      	bne.n	8006e18 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006df4:	4b11      	ldr	r3, [pc, #68]	@ (8006e3c <HAL_ADC_ConfigChannel+0x2ac>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a11      	ldr	r2, [pc, #68]	@ (8006e40 <HAL_ADC_ConfigChannel+0x2b0>)
 8006dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8006dfe:	0c9a      	lsrs	r2, r3, #18
 8006e00:	4613      	mov	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006e0a:	e002      	b.n	8006e12 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1f9      	bne.n	8006e0c <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	10000012 	.word	0x10000012
 8006e34:	40012000 	.word	0x40012000
 8006e38:	40012300 	.word	0x40012300
 8006e3c:	20000020 	.word	0x20000020
 8006e40:	431bde83 	.word	0x431bde83

08006e44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006e4c:	4b78      	ldr	r3, [pc, #480]	@ (8007030 <ADC_Init+0x1ec>)
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	4a77      	ldr	r2, [pc, #476]	@ (8007030 <ADC_Init+0x1ec>)
 8006e52:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8006e56:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006e58:	4b75      	ldr	r3, [pc, #468]	@ (8007030 <ADC_Init+0x1ec>)
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	4973      	ldr	r1, [pc, #460]	@ (8007030 <ADC_Init+0x1ec>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006e74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6859      	ldr	r1, [r3, #4]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	021a      	lsls	r2, r3, #8
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006e98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	6859      	ldr	r1, [r3, #4]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689a      	ldr	r2, [r3, #8]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689a      	ldr	r2, [r3, #8]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006eba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6899      	ldr	r1, [r3, #8]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68da      	ldr	r2, [r3, #12]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed2:	4a58      	ldr	r2, [pc, #352]	@ (8007034 <ADC_Init+0x1f0>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d022      	beq.n	8006f1e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689a      	ldr	r2, [r3, #8]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006ee6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6899      	ldr	r1, [r3, #8]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	689a      	ldr	r2, [r3, #8]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006f08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	6899      	ldr	r1, [r3, #8]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	430a      	orrs	r2, r1
 8006f1a:	609a      	str	r2, [r3, #8]
 8006f1c:	e00f      	b.n	8006f3e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	689a      	ldr	r2, [r3, #8]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006f2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	689a      	ldr	r2, [r3, #8]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006f3c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	689a      	ldr	r2, [r3, #8]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f022 0202 	bic.w	r2, r2, #2
 8006f4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6899      	ldr	r1, [r3, #8]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	005a      	lsls	r2, r3, #1
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d01b      	beq.n	8006fa4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685a      	ldr	r2, [r3, #4]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f7a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006f8a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6859      	ldr	r1, [r3, #4]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f96:	3b01      	subs	r3, #1
 8006f98:	035a      	lsls	r2, r3, #13
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	605a      	str	r2, [r3, #4]
 8006fa2:	e007      	b.n	8006fb4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685a      	ldr	r2, [r3, #4]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006fb2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	69db      	ldr	r3, [r3, #28]
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	051a      	lsls	r2, r3, #20
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006fe8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	6899      	ldr	r1, [r3, #8]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006ff6:	025a      	lsls	r2, r3, #9
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689a      	ldr	r2, [r3, #8]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800700e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	6899      	ldr	r1, [r3, #8]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	029a      	lsls	r2, r3, #10
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	430a      	orrs	r2, r1
 8007022:	609a      	str	r2, [r3, #8]
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr
 8007030:	40012300 	.word	0x40012300
 8007034:	0f000001 	.word	0x0f000001

08007038 <__NVIC_SetPriorityGrouping>:
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f003 0307 	and.w	r3, r3, #7
 8007046:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007048:	4b0b      	ldr	r3, [pc, #44]	@ (8007078 <__NVIC_SetPriorityGrouping+0x40>)
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007054:	4013      	ands	r3, r2
 8007056:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007060:	4b06      	ldr	r3, [pc, #24]	@ (800707c <__NVIC_SetPriorityGrouping+0x44>)
 8007062:	4313      	orrs	r3, r2
 8007064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007066:	4a04      	ldr	r2, [pc, #16]	@ (8007078 <__NVIC_SetPriorityGrouping+0x40>)
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	60d3      	str	r3, [r2, #12]
}
 800706c:	bf00      	nop
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	e000ed00 	.word	0xe000ed00
 800707c:	05fa0000 	.word	0x05fa0000

08007080 <__NVIC_GetPriorityGrouping>:
{
 8007080:	b480      	push	{r7}
 8007082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007084:	4b04      	ldr	r3, [pc, #16]	@ (8007098 <__NVIC_GetPriorityGrouping+0x18>)
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	0a1b      	lsrs	r3, r3, #8
 800708a:	f003 0307 	and.w	r3, r3, #7
}
 800708e:	4618      	mov	r0, r3
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr
 8007098:	e000ed00 	.word	0xe000ed00

0800709c <__NVIC_EnableIRQ>:
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	4603      	mov	r3, r0
 80070a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	db0b      	blt.n	80070c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070ae:	79fb      	ldrb	r3, [r7, #7]
 80070b0:	f003 021f 	and.w	r2, r3, #31
 80070b4:	4907      	ldr	r1, [pc, #28]	@ (80070d4 <__NVIC_EnableIRQ+0x38>)
 80070b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070ba:	095b      	lsrs	r3, r3, #5
 80070bc:	2001      	movs	r0, #1
 80070be:	fa00 f202 	lsl.w	r2, r0, r2
 80070c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80070c6:	bf00      	nop
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	e000e100 	.word	0xe000e100

080070d8 <__NVIC_SetPriority>:
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	4603      	mov	r3, r0
 80070e0:	6039      	str	r1, [r7, #0]
 80070e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	db0a      	blt.n	8007102 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	490c      	ldr	r1, [pc, #48]	@ (8007124 <__NVIC_SetPriority+0x4c>)
 80070f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070f6:	0112      	lsls	r2, r2, #4
 80070f8:	b2d2      	uxtb	r2, r2
 80070fa:	440b      	add	r3, r1
 80070fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007100:	e00a      	b.n	8007118 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	b2da      	uxtb	r2, r3
 8007106:	4908      	ldr	r1, [pc, #32]	@ (8007128 <__NVIC_SetPriority+0x50>)
 8007108:	79fb      	ldrb	r3, [r7, #7]
 800710a:	f003 030f 	and.w	r3, r3, #15
 800710e:	3b04      	subs	r3, #4
 8007110:	0112      	lsls	r2, r2, #4
 8007112:	b2d2      	uxtb	r2, r2
 8007114:	440b      	add	r3, r1
 8007116:	761a      	strb	r2, [r3, #24]
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	e000e100 	.word	0xe000e100
 8007128:	e000ed00 	.word	0xe000ed00

0800712c <NVIC_EncodePriority>:
{
 800712c:	b480      	push	{r7}
 800712e:	b089      	sub	sp, #36	@ 0x24
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f003 0307 	and.w	r3, r3, #7
 800713e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	f1c3 0307 	rsb	r3, r3, #7
 8007146:	2b04      	cmp	r3, #4
 8007148:	bf28      	it	cs
 800714a:	2304      	movcs	r3, #4
 800714c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	3304      	adds	r3, #4
 8007152:	2b06      	cmp	r3, #6
 8007154:	d902      	bls.n	800715c <NVIC_EncodePriority+0x30>
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	3b03      	subs	r3, #3
 800715a:	e000      	b.n	800715e <NVIC_EncodePriority+0x32>
 800715c:	2300      	movs	r3, #0
 800715e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007160:	f04f 32ff 	mov.w	r2, #4294967295
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	fa02 f303 	lsl.w	r3, r2, r3
 800716a:	43da      	mvns	r2, r3
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	401a      	ands	r2, r3
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007174:	f04f 31ff 	mov.w	r1, #4294967295
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	fa01 f303 	lsl.w	r3, r1, r3
 800717e:	43d9      	mvns	r1, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007184:	4313      	orrs	r3, r2
}
 8007186:	4618      	mov	r0, r3
 8007188:	3724      	adds	r7, #36	@ 0x24
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b082      	sub	sp, #8
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7ff ff4c 	bl	8007038 <__NVIC_SetPriorityGrouping>
}
 80071a0:	bf00      	nop
 80071a2:	3708      	adds	r7, #8
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	4603      	mov	r3, r0
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
 80071b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80071b6:	2300      	movs	r3, #0
 80071b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80071ba:	f7ff ff61 	bl	8007080 <__NVIC_GetPriorityGrouping>
 80071be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	68b9      	ldr	r1, [r7, #8]
 80071c4:	6978      	ldr	r0, [r7, #20]
 80071c6:	f7ff ffb1 	bl	800712c <NVIC_EncodePriority>
 80071ca:	4602      	mov	r2, r0
 80071cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071d0:	4611      	mov	r1, r2
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7ff ff80 	bl	80070d8 <__NVIC_SetPriority>
}
 80071d8:	bf00      	nop
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	4603      	mov	r3, r0
 80071e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80071ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7ff ff54 	bl	800709c <__NVIC_EnableIRQ>
}
 80071f4:	bf00      	nop
 80071f6:	3708      	adds	r7, #8
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d101      	bne.n	800720e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e054      	b.n	80072b8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	7f5b      	ldrb	r3, [r3, #29]
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b00      	cmp	r3, #0
 8007216:	d105      	bne.n	8007224 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f7fd f878 	bl	8004314 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	791b      	ldrb	r3, [r3, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10c      	bne.n	800724c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a22      	ldr	r2, [pc, #136]	@ (80072c0 <HAL_CRC_Init+0xc4>)
 8007238:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	689a      	ldr	r2, [r3, #8]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f022 0218 	bic.w	r2, r2, #24
 8007248:	609a      	str	r2, [r3, #8]
 800724a:	e00c      	b.n	8007266 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6899      	ldr	r1, [r3, #8]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	461a      	mov	r2, r3
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f834 	bl	80072c4 <HAL_CRCEx_Polynomial_Set>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e028      	b.n	80072b8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	795b      	ldrb	r3, [r3, #5]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d105      	bne.n	800727a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f04f 32ff 	mov.w	r2, #4294967295
 8007276:	611a      	str	r2, [r3, #16]
 8007278:	e004      	b.n	8007284 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	6912      	ldr	r2, [r2, #16]
 8007282:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	695a      	ldr	r2, [r3, #20]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	430a      	orrs	r2, r1
 8007298:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	699a      	ldr	r2, [r3, #24]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	430a      	orrs	r2, r1
 80072ae:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	04c11db7 	.word	0x04c11db7

080072c4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b087      	sub	sp, #28
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80072d4:	231f      	movs	r3, #31
 80072d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d102      	bne.n	80072e8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	75fb      	strb	r3, [r7, #23]
 80072e6:	e063      	b.n	80073b0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80072e8:	bf00      	nop
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	1e5a      	subs	r2, r3, #1
 80072ee:	613a      	str	r2, [r7, #16]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d009      	beq.n	8007308 <HAL_CRCEx_Polynomial_Set+0x44>
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f003 031f 	and.w	r3, r3, #31
 80072fa:	68ba      	ldr	r2, [r7, #8]
 80072fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007300:	f003 0301 	and.w	r3, r3, #1
 8007304:	2b00      	cmp	r3, #0
 8007306:	d0f0      	beq.n	80072ea <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b18      	cmp	r3, #24
 800730c:	d846      	bhi.n	800739c <HAL_CRCEx_Polynomial_Set+0xd8>
 800730e:	a201      	add	r2, pc, #4	@ (adr r2, 8007314 <HAL_CRCEx_Polynomial_Set+0x50>)
 8007310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007314:	080073a3 	.word	0x080073a3
 8007318:	0800739d 	.word	0x0800739d
 800731c:	0800739d 	.word	0x0800739d
 8007320:	0800739d 	.word	0x0800739d
 8007324:	0800739d 	.word	0x0800739d
 8007328:	0800739d 	.word	0x0800739d
 800732c:	0800739d 	.word	0x0800739d
 8007330:	0800739d 	.word	0x0800739d
 8007334:	08007391 	.word	0x08007391
 8007338:	0800739d 	.word	0x0800739d
 800733c:	0800739d 	.word	0x0800739d
 8007340:	0800739d 	.word	0x0800739d
 8007344:	0800739d 	.word	0x0800739d
 8007348:	0800739d 	.word	0x0800739d
 800734c:	0800739d 	.word	0x0800739d
 8007350:	0800739d 	.word	0x0800739d
 8007354:	08007385 	.word	0x08007385
 8007358:	0800739d 	.word	0x0800739d
 800735c:	0800739d 	.word	0x0800739d
 8007360:	0800739d 	.word	0x0800739d
 8007364:	0800739d 	.word	0x0800739d
 8007368:	0800739d 	.word	0x0800739d
 800736c:	0800739d 	.word	0x0800739d
 8007370:	0800739d 	.word	0x0800739d
 8007374:	08007379 	.word	0x08007379
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	2b06      	cmp	r3, #6
 800737c:	d913      	bls.n	80073a6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007382:	e010      	b.n	80073a6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	2b07      	cmp	r3, #7
 8007388:	d90f      	bls.n	80073aa <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800738e:	e00c      	b.n	80073aa <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	2b0f      	cmp	r3, #15
 8007394:	d90b      	bls.n	80073ae <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800739a:	e008      	b.n	80073ae <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	75fb      	strb	r3, [r7, #23]
        break;
 80073a0:	e006      	b.n	80073b0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80073a2:	bf00      	nop
 80073a4:	e004      	b.n	80073b0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80073a6:	bf00      	nop
 80073a8:	e002      	b.n	80073b0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80073aa:	bf00      	nop
 80073ac:	e000      	b.n	80073b0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80073ae:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80073b0:	7dfb      	ldrb	r3, [r7, #23]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10d      	bne.n	80073d2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f023 0118 	bic.w	r1, r3, #24
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80073d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	371c      	adds	r7, #28
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e069      	b.n	80074c6 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d102      	bne.n	8007404 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7fc ffa8 	bl	8004354 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2202      	movs	r2, #2
 8007408:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d002      	beq.n	800741a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6819      	ldr	r1, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	4b2a      	ldr	r3, [pc, #168]	@ (80074d0 <HAL_DCMI_Init+0xf0>)
 8007426:	400b      	ands	r3, r1
 8007428:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6819      	ldr	r1, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	695b      	ldr	r3, [r3, #20]
 8007438:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800743e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800744a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8007456:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800745c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8007462:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007468:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800746e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	430a      	orrs	r2, r1
 8007476:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	2b10      	cmp	r3, #16
 800747e:	d112      	bne.n	80074a6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	7f1b      	ldrb	r3, [r3, #28]
 8007484:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	7f5b      	ldrb	r3, [r3, #29]
 800748a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800748c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	7f9b      	ldrb	r3, [r3, #30]
 8007492:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8007494:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	7fdb      	ldrb	r3, [r3, #31]
 800749c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80074a2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80074a4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68da      	ldr	r2, [r3, #12]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f042 021e 	orr.w	r2, r2, #30
 80074b4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	ffe0f007 	.word	0xffe0f007

080074d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80074dc:	2300      	movs	r3, #0
 80074de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80074e0:	f7ff fae2 	bl	8006aa8 <HAL_GetTick>
 80074e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d101      	bne.n	80074f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e099      	b.n	8007624 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2202      	movs	r2, #2
 80074f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f022 0201 	bic.w	r2, r2, #1
 800750e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007510:	e00f      	b.n	8007532 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007512:	f7ff fac9 	bl	8006aa8 <HAL_GetTick>
 8007516:	4602      	mov	r2, r0
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	2b05      	cmp	r3, #5
 800751e:	d908      	bls.n	8007532 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2220      	movs	r2, #32
 8007524:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2203      	movs	r2, #3
 800752a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800752e:	2303      	movs	r3, #3
 8007530:	e078      	b.n	8007624 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1e8      	bne.n	8007512 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	4b38      	ldr	r3, [pc, #224]	@ (800762c <HAL_DMA_Init+0x158>)
 800754c:	4013      	ands	r3, r2
 800754e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800755e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800756a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007576:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a1b      	ldr	r3, [r3, #32]
 800757c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	4313      	orrs	r3, r2
 8007582:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007588:	2b04      	cmp	r3, #4
 800758a:	d107      	bne.n	800759c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007594:	4313      	orrs	r3, r2
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	4313      	orrs	r3, r2
 800759a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	697a      	ldr	r2, [r7, #20]
 80075a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	f023 0307 	bic.w	r3, r3, #7
 80075b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c2:	2b04      	cmp	r3, #4
 80075c4:	d117      	bne.n	80075f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00e      	beq.n	80075f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fb73 	bl	8007cc4 <DMA_CheckFifoParam>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d008      	beq.n	80075f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2240      	movs	r2, #64	@ 0x40
 80075e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80075f2:	2301      	movs	r3, #1
 80075f4:	e016      	b.n	8007624 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fb2a 	bl	8007c58 <DMA_CalcBaseAndBitshift>
 8007604:	4603      	mov	r3, r0
 8007606:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800760c:	223f      	movs	r2, #63	@ 0x3f
 800760e:	409a      	lsls	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2201      	movs	r2, #1
 800761e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3718      	adds	r7, #24
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	f010803f 	.word	0xf010803f

08007630 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d101      	bne.n	8007642 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e050      	b.n	80076e4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b02      	cmp	r3, #2
 800764c:	d101      	bne.n	8007652 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800764e:	2302      	movs	r3, #2
 8007650:	e048      	b.n	80076e4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f022 0201 	bic.w	r2, r2, #1
 8007660:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2200      	movs	r2, #0
 8007668:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2200      	movs	r2, #0
 8007670:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2200      	movs	r2, #0
 8007678:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2200      	movs	r2, #0
 8007680:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2200      	movs	r2, #0
 8007688:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2221      	movs	r2, #33	@ 0x21
 8007690:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fae0 	bl	8007c58 <DMA_CalcBaseAndBitshift>
 8007698:	4603      	mov	r3, r0
 800769a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076a0:	223f      	movs	r2, #63	@ 0x3f
 80076a2:	409a      	lsls	r2, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]
 80076f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076fa:	2300      	movs	r3, #0
 80076fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007702:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800770a:	2b01      	cmp	r3, #1
 800770c:	d101      	bne.n	8007712 <HAL_DMA_Start_IT+0x26>
 800770e:	2302      	movs	r3, #2
 8007710:	e048      	b.n	80077a4 <HAL_DMA_Start_IT+0xb8>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2201      	movs	r2, #1
 8007716:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b01      	cmp	r3, #1
 8007724:	d137      	bne.n	8007796 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2202      	movs	r2, #2
 800772a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2200      	movs	r2, #0
 8007732:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	68b9      	ldr	r1, [r7, #8]
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f000 fa5e 	bl	8007bfc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007744:	223f      	movs	r2, #63	@ 0x3f
 8007746:	409a      	lsls	r2, r3
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f042 0216 	orr.w	r2, r2, #22
 800775a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	695a      	ldr	r2, [r3, #20]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800776a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007770:	2b00      	cmp	r3, #0
 8007772:	d007      	beq.n	8007784 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f042 0208 	orr.w	r2, r2, #8
 8007782:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f042 0201 	orr.w	r2, r2, #1
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	e005      	b.n	80077a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800779e:	2302      	movs	r3, #2
 80077a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80077a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3718      	adds	r7, #24
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80077ba:	f7ff f975 	bl	8006aa8 <HAL_GetTick>
 80077be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d008      	beq.n	80077de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2280      	movs	r2, #128	@ 0x80
 80077d0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e052      	b.n	8007884 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f022 0216 	bic.w	r2, r2, #22
 80077ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	695a      	ldr	r2, [r3, #20]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80077fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007802:	2b00      	cmp	r3, #0
 8007804:	d103      	bne.n	800780e <HAL_DMA_Abort+0x62>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800780a:	2b00      	cmp	r3, #0
 800780c:	d007      	beq.n	800781e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f022 0208 	bic.w	r2, r2, #8
 800781c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f022 0201 	bic.w	r2, r2, #1
 800782c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800782e:	e013      	b.n	8007858 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007830:	f7ff f93a 	bl	8006aa8 <HAL_GetTick>
 8007834:	4602      	mov	r2, r0
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	2b05      	cmp	r3, #5
 800783c:	d90c      	bls.n	8007858 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2220      	movs	r2, #32
 8007842:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2203      	movs	r2, #3
 8007848:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e015      	b.n	8007884 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1e4      	bne.n	8007830 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800786a:	223f      	movs	r2, #63	@ 0x3f
 800786c:	409a      	lsls	r2, r3
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2201      	movs	r2, #1
 8007876:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b02      	cmp	r3, #2
 800789e:	d004      	beq.n	80078aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2280      	movs	r2, #128	@ 0x80
 80078a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e00c      	b.n	80078c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2205      	movs	r2, #5
 80078ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f022 0201 	bic.w	r2, r2, #1
 80078c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80078d8:	2300      	movs	r3, #0
 80078da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80078dc:	4b8e      	ldr	r3, [pc, #568]	@ (8007b18 <HAL_DMA_IRQHandler+0x248>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a8e      	ldr	r2, [pc, #568]	@ (8007b1c <HAL_DMA_IRQHandler+0x24c>)
 80078e2:	fba2 2303 	umull	r2, r3, r2, r3
 80078e6:	0a9b      	lsrs	r3, r3, #10
 80078e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078fa:	2208      	movs	r2, #8
 80078fc:	409a      	lsls	r2, r3
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	4013      	ands	r3, r2
 8007902:	2b00      	cmp	r3, #0
 8007904:	d01a      	beq.n	800793c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0304 	and.w	r3, r3, #4
 8007910:	2b00      	cmp	r3, #0
 8007912:	d013      	beq.n	800793c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f022 0204 	bic.w	r2, r2, #4
 8007922:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007928:	2208      	movs	r2, #8
 800792a:	409a      	lsls	r2, r3
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007934:	f043 0201 	orr.w	r2, r3, #1
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007940:	2201      	movs	r2, #1
 8007942:	409a      	lsls	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	4013      	ands	r3, r2
 8007948:	2b00      	cmp	r3, #0
 800794a:	d012      	beq.n	8007972 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00b      	beq.n	8007972 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800795e:	2201      	movs	r2, #1
 8007960:	409a      	lsls	r2, r3
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800796a:	f043 0202 	orr.w	r2, r3, #2
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007976:	2204      	movs	r2, #4
 8007978:	409a      	lsls	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	4013      	ands	r3, r2
 800797e:	2b00      	cmp	r3, #0
 8007980:	d012      	beq.n	80079a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 0302 	and.w	r3, r3, #2
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00b      	beq.n	80079a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007994:	2204      	movs	r2, #4
 8007996:	409a      	lsls	r2, r3
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079a0:	f043 0204 	orr.w	r2, r3, #4
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079ac:	2210      	movs	r2, #16
 80079ae:	409a      	lsls	r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	4013      	ands	r3, r2
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d043      	beq.n	8007a40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0308 	and.w	r3, r3, #8
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d03c      	beq.n	8007a40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079ca:	2210      	movs	r2, #16
 80079cc:	409a      	lsls	r2, r3
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d018      	beq.n	8007a12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d108      	bne.n	8007a00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d024      	beq.n	8007a40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	4798      	blx	r3
 80079fe:	e01f      	b.n	8007a40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d01b      	beq.n	8007a40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	4798      	blx	r3
 8007a10:	e016      	b.n	8007a40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d107      	bne.n	8007a30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f022 0208 	bic.w	r2, r2, #8
 8007a2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d003      	beq.n	8007a40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a44:	2220      	movs	r2, #32
 8007a46:	409a      	lsls	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f000 808f 	beq.w	8007b70 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0310 	and.w	r3, r3, #16
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f000 8087 	beq.w	8007b70 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a66:	2220      	movs	r2, #32
 8007a68:	409a      	lsls	r2, r3
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b05      	cmp	r3, #5
 8007a78:	d136      	bne.n	8007ae8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f022 0216 	bic.w	r2, r2, #22
 8007a88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	695a      	ldr	r2, [r3, #20]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007a98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d103      	bne.n	8007aaa <HAL_DMA_IRQHandler+0x1da>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d007      	beq.n	8007aba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f022 0208 	bic.w	r2, r2, #8
 8007ab8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007abe:	223f      	movs	r2, #63	@ 0x3f
 8007ac0:	409a      	lsls	r2, r3
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d07e      	beq.n	8007bdc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	4798      	blx	r3
        }
        return;
 8007ae6:	e079      	b.n	8007bdc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d01d      	beq.n	8007b32 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d10d      	bne.n	8007b20 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d031      	beq.n	8007b70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	4798      	blx	r3
 8007b14:	e02c      	b.n	8007b70 <HAL_DMA_IRQHandler+0x2a0>
 8007b16:	bf00      	nop
 8007b18:	20000020 	.word	0x20000020
 8007b1c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d023      	beq.n	8007b70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	4798      	blx	r3
 8007b30:	e01e      	b.n	8007b70 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d10f      	bne.n	8007b60 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f022 0210 	bic.w	r2, r2, #16
 8007b4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d003      	beq.n	8007b70 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d032      	beq.n	8007bde <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b7c:	f003 0301 	and.w	r3, r3, #1
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d022      	beq.n	8007bca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2205      	movs	r2, #5
 8007b88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f022 0201 	bic.w	r2, r2, #1
 8007b9a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	60bb      	str	r3, [r7, #8]
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d307      	bcc.n	8007bb8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1f2      	bne.n	8007b9c <HAL_DMA_IRQHandler+0x2cc>
 8007bb6:	e000      	b.n	8007bba <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007bb8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d005      	beq.n	8007bde <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	4798      	blx	r3
 8007bda:	e000      	b.n	8007bde <HAL_DMA_IRQHandler+0x30e>
        return;
 8007bdc:	bf00      	nop
    }
  }
}
 8007bde:	3718      	adds	r7, #24
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
 8007c08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007c18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	683a      	ldr	r2, [r7, #0]
 8007c20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	2b40      	cmp	r3, #64	@ 0x40
 8007c28:	d108      	bne.n	8007c3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007c3a:	e007      	b.n	8007c4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68ba      	ldr	r2, [r7, #8]
 8007c42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	60da      	str	r2, [r3, #12]
}
 8007c4c:	bf00      	nop
 8007c4e:	3714      	adds	r7, #20
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	3b10      	subs	r3, #16
 8007c68:	4a13      	ldr	r2, [pc, #76]	@ (8007cb8 <DMA_CalcBaseAndBitshift+0x60>)
 8007c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c6e:	091b      	lsrs	r3, r3, #4
 8007c70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007c72:	4a12      	ldr	r2, [pc, #72]	@ (8007cbc <DMA_CalcBaseAndBitshift+0x64>)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	4413      	add	r3, r2
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2b03      	cmp	r3, #3
 8007c84:	d908      	bls.n	8007c98 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8007cc0 <DMA_CalcBaseAndBitshift+0x68>)
 8007c8e:	4013      	ands	r3, r2
 8007c90:	1d1a      	adds	r2, r3, #4
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	659a      	str	r2, [r3, #88]	@ 0x58
 8007c96:	e006      	b.n	8007ca6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	4b08      	ldr	r3, [pc, #32]	@ (8007cc0 <DMA_CalcBaseAndBitshift+0x68>)
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3714      	adds	r7, #20
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	aaaaaaab 	.word	0xaaaaaaab
 8007cbc:	0801d460 	.word	0x0801d460
 8007cc0:	fffffc00 	.word	0xfffffc00

08007cc4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	699b      	ldr	r3, [r3, #24]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d11f      	bne.n	8007d1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	2b03      	cmp	r3, #3
 8007ce2:	d856      	bhi.n	8007d92 <DMA_CheckFifoParam+0xce>
 8007ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8007cec <DMA_CheckFifoParam+0x28>)
 8007ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cea:	bf00      	nop
 8007cec:	08007cfd 	.word	0x08007cfd
 8007cf0:	08007d0f 	.word	0x08007d0f
 8007cf4:	08007cfd 	.word	0x08007cfd
 8007cf8:	08007d93 	.word	0x08007d93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d046      	beq.n	8007d96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d0c:	e043      	b.n	8007d96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d12:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007d16:	d140      	bne.n	8007d9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d1c:	e03d      	b.n	8007d9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d26:	d121      	bne.n	8007d6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	2b03      	cmp	r3, #3
 8007d2c:	d837      	bhi.n	8007d9e <DMA_CheckFifoParam+0xda>
 8007d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d34 <DMA_CheckFifoParam+0x70>)
 8007d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d34:	08007d45 	.word	0x08007d45
 8007d38:	08007d4b 	.word	0x08007d4b
 8007d3c:	08007d45 	.word	0x08007d45
 8007d40:	08007d5d 	.word	0x08007d5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	73fb      	strb	r3, [r7, #15]
      break;
 8007d48:	e030      	b.n	8007dac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d025      	beq.n	8007da2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d5a:	e022      	b.n	8007da2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d60:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007d64:	d11f      	bne.n	8007da6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007d6a:	e01c      	b.n	8007da6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d903      	bls.n	8007d7a <DMA_CheckFifoParam+0xb6>
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	2b03      	cmp	r3, #3
 8007d76:	d003      	beq.n	8007d80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007d78:	e018      	b.n	8007dac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	73fb      	strb	r3, [r7, #15]
      break;
 8007d7e:	e015      	b.n	8007dac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00e      	beq.n	8007daa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d90:	e00b      	b.n	8007daa <DMA_CheckFifoParam+0xe6>
      break;
 8007d92:	bf00      	nop
 8007d94:	e00a      	b.n	8007dac <DMA_CheckFifoParam+0xe8>
      break;
 8007d96:	bf00      	nop
 8007d98:	e008      	b.n	8007dac <DMA_CheckFifoParam+0xe8>
      break;
 8007d9a:	bf00      	nop
 8007d9c:	e006      	b.n	8007dac <DMA_CheckFifoParam+0xe8>
      break;
 8007d9e:	bf00      	nop
 8007da0:	e004      	b.n	8007dac <DMA_CheckFifoParam+0xe8>
      break;
 8007da2:	bf00      	nop
 8007da4:	e002      	b.n	8007dac <DMA_CheckFifoParam+0xe8>
      break;   
 8007da6:	bf00      	nop
 8007da8:	e000      	b.n	8007dac <DMA_CheckFifoParam+0xe8>
      break;
 8007daa:	bf00      	nop
    }
  } 
  
  return status; 
 8007dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3714      	adds	r7, #20
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop

08007dbc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e039      	b.n	8007e42 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d106      	bne.n	8007de8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f7fc fb74 	bl	80044d0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2202      	movs	r2, #2
 8007dec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	685a      	ldr	r2, [r3, #4]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	430a      	orrs	r2, r1
 8007e04:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e0c:	f023 0107 	bic.w	r1, r3, #7
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	689a      	ldr	r2, [r3, #8]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	430a      	orrs	r2, r1
 8007e1a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e22:	4b0a      	ldr	r3, [pc, #40]	@ (8007e4c <HAL_DMA2D_Init+0x90>)
 8007e24:	4013      	ands	r3, r2
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	68d1      	ldr	r1, [r2, #12]
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	6812      	ldr	r2, [r2, #0]
 8007e2e:	430b      	orrs	r3, r1
 8007e30:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	ffffc000 	.word	0xffffc000

08007e50 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f003 0301 	and.w	r3, r3, #1
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d026      	beq.n	8007ec0 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d021      	beq.n	8007ec0 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007e8a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e90:	f043 0201 	orr.w	r2, r3, #1
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2204      	movs	r2, #4
 8007ea4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	695b      	ldr	r3, [r3, #20]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d003      	beq.n	8007ec0 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	695b      	ldr	r3, [r3, #20]
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f003 0320 	and.w	r3, r3, #32
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d026      	beq.n	8007f18 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d021      	beq.n	8007f18 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007ee2:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2220      	movs	r2, #32
 8007eea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ef0:	f043 0202 	orr.w	r2, r3, #2
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2204      	movs	r2, #4
 8007efc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	695b      	ldr	r3, [r3, #20]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d003      	beq.n	8007f18 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	695b      	ldr	r3, [r3, #20]
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f003 0308 	and.w	r3, r3, #8
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d026      	beq.n	8007f70 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d021      	beq.n	8007f70 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007f3a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2208      	movs	r2, #8
 8007f42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f48:	f043 0204 	orr.w	r2, r3, #4
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2204      	movs	r2, #4
 8007f54:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	695b      	ldr	r3, [r3, #20]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d003      	beq.n	8007f70 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f003 0304 	and.w	r3, r3, #4
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d013      	beq.n	8007fa2 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00e      	beq.n	8007fa2 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f92:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2204      	movs	r2, #4
 8007f9a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f853 	bl	8008048 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f003 0302 	and.w	r3, r3, #2
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d024      	beq.n	8007ff6 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d01f      	beq.n	8007ff6 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007fc4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2202      	movs	r2, #2
 8007fcc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d003      	beq.n	8007ff6 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f003 0310 	and.w	r3, r3, #16
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d01f      	beq.n	8008040 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008006:	2b00      	cmp	r3, #0
 8008008:	d01a      	beq.n	8008040 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008018:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2210      	movs	r2, #16
 8008020:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f80e 	bl	800805c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8008040:	bf00      	nop
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8008070:	b480      	push	{r7}
 8008072:	b087      	sub	sp, #28
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008088:	2b01      	cmp	r3, #1
 800808a:	d101      	bne.n	8008090 <HAL_DMA2D_ConfigLayer+0x20>
 800808c:	2302      	movs	r3, #2
 800808e:	e079      	b.n	8008184 <HAL_DMA2D_ConfigLayer+0x114>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2202      	movs	r2, #2
 800809c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	011b      	lsls	r3, r3, #4
 80080a4:	3318      	adds	r3, #24
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	4413      	add	r3, r2
 80080aa:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	685a      	ldr	r2, [r3, #4]
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	041b      	lsls	r3, r3, #16
 80080b6:	4313      	orrs	r3, r2
 80080b8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80080ba:	4b35      	ldr	r3, [pc, #212]	@ (8008190 <HAL_DMA2D_ConfigLayer+0x120>)
 80080bc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	2b0a      	cmp	r3, #10
 80080c4:	d003      	beq.n	80080ce <HAL_DMA2D_ConfigLayer+0x5e>
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	2b09      	cmp	r3, #9
 80080cc:	d107      	bne.n	80080de <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	4313      	orrs	r3, r2
 80080da:	617b      	str	r3, [r7, #20]
 80080dc:	e005      	b.n	80080ea <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	061b      	lsls	r3, r3, #24
 80080e4:	697a      	ldr	r2, [r7, #20]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d120      	bne.n	8008132 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	43db      	mvns	r3, r3
 80080fa:	ea02 0103 	and.w	r1, r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	697a      	ldr	r2, [r7, #20]
 8008104:	430a      	orrs	r2, r1
 8008106:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	6812      	ldr	r2, [r2, #0]
 8008110:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	2b0a      	cmp	r3, #10
 8008118:	d003      	beq.n	8008122 <HAL_DMA2D_ConfigLayer+0xb2>
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	2b09      	cmp	r3, #9
 8008120:	d127      	bne.n	8008172 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	68da      	ldr	r2, [r3, #12]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800812e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008130:	e01f      	b.n	8008172 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	69da      	ldr	r2, [r3, #28]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	43db      	mvns	r3, r3
 800813c:	ea02 0103 	and.w	r1, r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	697a      	ldr	r2, [r7, #20]
 8008146:	430a      	orrs	r2, r1
 8008148:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	693a      	ldr	r2, [r7, #16]
 8008150:	6812      	ldr	r2, [r2, #0]
 8008152:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	2b0a      	cmp	r3, #10
 800815a:	d003      	beq.n	8008164 <HAL_DMA2D_ConfigLayer+0xf4>
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	2b09      	cmp	r3, #9
 8008162:	d106      	bne.n	8008172 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	68da      	ldr	r2, [r3, #12]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8008170:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	371c      	adds	r7, #28
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr
 8008190:	ff03000f 	.word	0xff03000f

08008194 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d101      	bne.n	80081a6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e086      	b.n	80082b4 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d106      	bne.n	80081be <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2220      	movs	r2, #32
 80081b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7fc f9af 	bl	800451c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80081be:	4b3f      	ldr	r3, [pc, #252]	@ (80082bc <HAL_ETH_Init+0x128>)
 80081c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081c2:	4a3e      	ldr	r2, [pc, #248]	@ (80082bc <HAL_ETH_Init+0x128>)
 80081c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80081c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80081ca:	4b3c      	ldr	r3, [pc, #240]	@ (80082bc <HAL_ETH_Init+0x128>)
 80081cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081d2:	60bb      	str	r3, [r7, #8]
 80081d4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80081d6:	4b3a      	ldr	r3, [pc, #232]	@ (80082c0 <HAL_ETH_Init+0x12c>)
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	4a39      	ldr	r2, [pc, #228]	@ (80082c0 <HAL_ETH_Init+0x12c>)
 80081dc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80081e0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80081e2:	4b37      	ldr	r3, [pc, #220]	@ (80082c0 <HAL_ETH_Init+0x12c>)
 80081e4:	685a      	ldr	r2, [r3, #4]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	4935      	ldr	r1, [pc, #212]	@ (80082c0 <HAL_ETH_Init+0x12c>)
 80081ec:	4313      	orrs	r3, r2
 80081ee:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80081f0:	4b33      	ldr	r3, [pc, #204]	@ (80082c0 <HAL_ETH_Init+0x12c>)
 80081f2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	6812      	ldr	r2, [r2, #0]
 8008202:	f043 0301 	orr.w	r3, r3, #1
 8008206:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800820a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800820c:	f7fe fc4c 	bl	8006aa8 <HAL_GetTick>
 8008210:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8008212:	e011      	b.n	8008238 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8008214:	f7fe fc48 	bl	8006aa8 <HAL_GetTick>
 8008218:	4602      	mov	r2, r0
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008222:	d909      	bls.n	8008238 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2204      	movs	r2, #4
 8008228:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	22e0      	movs	r2, #224	@ 0xe0
 8008230:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	e03d      	b.n	80082b4 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1e4      	bne.n	8008214 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f97a 	bl	8008544 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fa25 	bl	80086a0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fa7b 	bl	8008752 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	461a      	mov	r2, r3
 8008262:	2100      	movs	r1, #0
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f9e3 	bl	8008630 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8008278:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	4b0f      	ldr	r3, [pc, #60]	@ (80082c4 <HAL_ETH_Init+0x130>)
 8008288:	430b      	orrs	r3, r1
 800828a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800829e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2210      	movs	r2, #16
 80082ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3710      	adds	r7, #16
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	40023800 	.word	0x40023800
 80082c0:	40013800 	.word	0x40013800
 80082c4:	00020060 	.word	0x00020060

080082c8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	4b53      	ldr	r3, [pc, #332]	@ (800842c <ETH_SetMACConfig+0x164>)
 80082de:	4013      	ands	r3, r2
 80082e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	7b9b      	ldrb	r3, [r3, #14]
 80082e6:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80082e8:	683a      	ldr	r2, [r7, #0]
 80082ea:	7c12      	ldrb	r2, [r2, #16]
 80082ec:	2a00      	cmp	r2, #0
 80082ee:	d102      	bne.n	80082f6 <ETH_SetMACConfig+0x2e>
 80082f0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80082f4:	e000      	b.n	80082f8 <ETH_SetMACConfig+0x30>
 80082f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80082f8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	7c52      	ldrb	r2, [r2, #17]
 80082fe:	2a00      	cmp	r2, #0
 8008300:	d102      	bne.n	8008308 <ETH_SetMACConfig+0x40>
 8008302:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8008306:	e000      	b.n	800830a <ETH_SetMACConfig+0x42>
 8008308:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800830a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8008310:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	7fdb      	ldrb	r3, [r3, #31]
 8008316:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8008318:	431a      	orrs	r2, r3
                        macconf->Speed |
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800831e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8008320:	683a      	ldr	r2, [r7, #0]
 8008322:	7f92      	ldrb	r2, [r2, #30]
 8008324:	2a00      	cmp	r2, #0
 8008326:	d102      	bne.n	800832e <ETH_SetMACConfig+0x66>
 8008328:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800832c:	e000      	b.n	8008330 <ETH_SetMACConfig+0x68>
 800832e:	2200      	movs	r2, #0
                        macconf->Speed |
 8008330:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	7f1b      	ldrb	r3, [r3, #28]
 8008336:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8008338:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800833e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	791b      	ldrb	r3, [r3, #4]
 8008344:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8008346:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800834e:	2a00      	cmp	r2, #0
 8008350:	d102      	bne.n	8008358 <ETH_SetMACConfig+0x90>
 8008352:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008356:	e000      	b.n	800835a <ETH_SetMACConfig+0x92>
 8008358:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800835a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	7bdb      	ldrb	r3, [r3, #15]
 8008360:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8008362:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8008368:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008370:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8008372:	4313      	orrs	r3, r2
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	4313      	orrs	r3, r2
 8008378:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800838a:	2001      	movs	r0, #1
 800838c:	f7fe fb98 	bl	8006ac0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80083a6:	4013      	ands	r3, r2
 80083a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083ae:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80083b6:	2a00      	cmp	r2, #0
 80083b8:	d101      	bne.n	80083be <ETH_SetMACConfig+0xf6>
 80083ba:	2280      	movs	r2, #128	@ 0x80
 80083bc:	e000      	b.n	80083c0 <ETH_SetMACConfig+0xf8>
 80083be:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80083c0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80083c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80083c8:	683a      	ldr	r2, [r7, #0]
 80083ca:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80083ce:	2a01      	cmp	r2, #1
 80083d0:	d101      	bne.n	80083d6 <ETH_SetMACConfig+0x10e>
 80083d2:	2208      	movs	r2, #8
 80083d4:	e000      	b.n	80083d8 <ETH_SetMACConfig+0x110>
 80083d6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80083d8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80083da:	683a      	ldr	r2, [r7, #0]
 80083dc:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80083e0:	2a01      	cmp	r2, #1
 80083e2:	d101      	bne.n	80083e8 <ETH_SetMACConfig+0x120>
 80083e4:	2204      	movs	r2, #4
 80083e6:	e000      	b.n	80083ea <ETH_SetMACConfig+0x122>
 80083e8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80083ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80083ec:	683a      	ldr	r2, [r7, #0]
 80083ee:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80083f2:	2a01      	cmp	r2, #1
 80083f4:	d101      	bne.n	80083fa <ETH_SetMACConfig+0x132>
 80083f6:	2202      	movs	r2, #2
 80083f8:	e000      	b.n	80083fc <ETH_SetMACConfig+0x134>
 80083fa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80083fc:	4313      	orrs	r3, r2
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	4313      	orrs	r3, r2
 8008402:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	699b      	ldr	r3, [r3, #24]
 8008412:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008414:	2001      	movs	r0, #1
 8008416:	f7fe fb53 	bl	8006ac0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	619a      	str	r2, [r3, #24]
}
 8008422:	bf00      	nop
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	fd20810f 	.word	0xfd20810f

08008430 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008442:	699b      	ldr	r3, [r3, #24]
 8008444:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	4b3d      	ldr	r3, [pc, #244]	@ (8008540 <ETH_SetDMAConfig+0x110>)
 800844a:	4013      	ands	r3, r2
 800844c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	7b1b      	ldrb	r3, [r3, #12]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d102      	bne.n	800845c <ETH_SetDMAConfig+0x2c>
 8008456:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800845a:	e000      	b.n	800845e <ETH_SetDMAConfig+0x2e>
 800845c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	7b5b      	ldrb	r3, [r3, #13]
 8008462:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8008464:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8008466:	683a      	ldr	r2, [r7, #0]
 8008468:	7f52      	ldrb	r2, [r2, #29]
 800846a:	2a00      	cmp	r2, #0
 800846c:	d102      	bne.n	8008474 <ETH_SetDMAConfig+0x44>
 800846e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008472:	e000      	b.n	8008476 <ETH_SetDMAConfig+0x46>
 8008474:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8008476:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	7b9b      	ldrb	r3, [r3, #14]
 800847c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800847e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8008484:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	7f1b      	ldrb	r3, [r3, #28]
 800848a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800848c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	7f9b      	ldrb	r3, [r3, #30]
 8008492:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8008494:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800849a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80084a2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80084a4:	4313      	orrs	r3, r2
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084b4:	461a      	mov	r2, r3
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80084c6:	2001      	movs	r0, #1
 80084c8:	f7fe fafa 	bl	8006ac0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084d4:	461a      	mov	r2, r3
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	791b      	ldrb	r3, [r3, #4]
 80084de:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80084e4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80084ea:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80084f0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80084f8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80084fa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008500:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8008502:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8008508:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	6812      	ldr	r2, [r2, #0]
 800850e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008512:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008516:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008524:	2001      	movs	r0, #1
 8008526:	f7fe facb 	bl	8006ac0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008532:	461a      	mov	r2, r3
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6013      	str	r3, [r2, #0]
}
 8008538:	bf00      	nop
 800853a:	3710      	adds	r7, #16
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}
 8008540:	f8de3f23 	.word	0xf8de3f23

08008544 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b0a6      	sub	sp, #152	@ 0x98
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800854c:	2301      	movs	r3, #1
 800854e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8008552:	2301      	movs	r3, #1
 8008554:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8008558:	2300      	movs	r3, #0
 800855a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800855c:	2300      	movs	r3, #0
 800855e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8008562:	2301      	movs	r3, #1
 8008564:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8008568:	2300      	movs	r3, #0
 800856a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800856e:	2301      	movs	r3, #1
 8008570:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8008574:	2301      	movs	r3, #1
 8008576:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800857a:	2300      	movs	r3, #0
 800857c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8008580:	2300      	movs	r3, #0
 8008582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8008586:	2300      	movs	r3, #0
 8008588:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800858a:	2300      	movs	r3, #0
 800858c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8008590:	2300      	movs	r3, #0
 8008592:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8008594:	2300      	movs	r3, #0
 8008596:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800859a:	2300      	movs	r3, #0
 800859c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80085a0:	2300      	movs	r3, #0
 80085a2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80085a6:	2300      	movs	r3, #0
 80085a8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80085ac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80085b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80085b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80085b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80085b8:	2300      	movs	r3, #0
 80085ba:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80085be:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80085c2:	4619      	mov	r1, r3
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f7ff fe7f 	bl	80082c8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80085ca:	2301      	movs	r3, #1
 80085cc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80085ce:	2301      	movs	r3, #1
 80085d0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80085d2:	2301      	movs	r3, #1
 80085d4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80085d8:	2301      	movs	r3, #1
 80085da:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80085dc:	2300      	movs	r3, #0
 80085de:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80085e0:	2300      	movs	r3, #0
 80085e2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80085e6:	2300      	movs	r3, #0
 80085e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80085ec:	2300      	movs	r3, #0
 80085ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80085f0:	2301      	movs	r3, #1
 80085f2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80085f6:	2301      	movs	r3, #1
 80085f8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80085fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80085fe:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8008600:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8008604:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8008606:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800860a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800860c:	2301      	movs	r3, #1
 800860e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8008612:	2300      	movs	r3, #0
 8008614:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8008616:	2300      	movs	r3, #0
 8008618:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800861a:	f107 0308 	add.w	r3, r7, #8
 800861e:	4619      	mov	r1, r3
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7ff ff05 	bl	8008430 <ETH_SetDMAConfig>
}
 8008626:	bf00      	nop
 8008628:	3798      	adds	r7, #152	@ 0x98
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
	...

08008630 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8008630:	b480      	push	{r7}
 8008632:	b087      	sub	sp, #28
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	3305      	adds	r3, #5
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	021b      	lsls	r3, r3, #8
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	3204      	adds	r2, #4
 8008648:	7812      	ldrb	r2, [r2, #0]
 800864a:	4313      	orrs	r3, r2
 800864c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800864e:	68ba      	ldr	r2, [r7, #8]
 8008650:	4b11      	ldr	r3, [pc, #68]	@ (8008698 <ETH_MACAddressConfig+0x68>)
 8008652:	4413      	add	r3, r2
 8008654:	461a      	mov	r2, r3
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	3303      	adds	r3, #3
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	061a      	lsls	r2, r3, #24
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	3302      	adds	r3, #2
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	041b      	lsls	r3, r3, #16
 800866a:	431a      	orrs	r2, r3
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	3301      	adds	r3, #1
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	021b      	lsls	r3, r3, #8
 8008674:	4313      	orrs	r3, r2
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	7812      	ldrb	r2, [r2, #0]
 800867a:	4313      	orrs	r3, r2
 800867c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	4b06      	ldr	r3, [pc, #24]	@ (800869c <ETH_MACAddressConfig+0x6c>)
 8008682:	4413      	add	r3, r2
 8008684:	461a      	mov	r2, r3
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	6013      	str	r3, [r2, #0]
}
 800868a:	bf00      	nop
 800868c:	371c      	adds	r7, #28
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	40028040 	.word	0x40028040
 800869c:	40028044 	.word	0x40028044

080086a0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80086a8:	2300      	movs	r3, #0
 80086aa:	60fb      	str	r3, [r7, #12]
 80086ac:	e03e      	b.n	800872c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	68d9      	ldr	r1, [r3, #12]
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	4613      	mov	r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4413      	add	r3, r2
 80086ba:	00db      	lsls	r3, r3, #3
 80086bc:	440b      	add	r3, r1
 80086be:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	2200      	movs	r2, #0
 80086c4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	2200      	movs	r2, #0
 80086ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	2200      	movs	r2, #0
 80086d0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	2200      	movs	r2, #0
 80086d6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80086d8:	68b9      	ldr	r1, [r7, #8]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	3206      	adds	r2, #6
 80086e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d80c      	bhi.n	8008710 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	68d9      	ldr	r1, [r3, #12]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	1c5a      	adds	r2, r3, #1
 80086fe:	4613      	mov	r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4413      	add	r3, r2
 8008704:	00db      	lsls	r3, r3, #3
 8008706:	440b      	add	r3, r1
 8008708:	461a      	mov	r2, r3
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	60da      	str	r2, [r3, #12]
 800870e:	e004      	b.n	800871a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	461a      	mov	r2, r3
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	3301      	adds	r3, #1
 800872a:	60fb      	str	r3, [r7, #12]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2b03      	cmp	r3, #3
 8008730:	d9bd      	bls.n	80086ae <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	68da      	ldr	r2, [r3, #12]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008744:	611a      	str	r2, [r3, #16]
}
 8008746:	bf00      	nop
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr

08008752 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8008752:	b480      	push	{r7}
 8008754:	b085      	sub	sp, #20
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800875a:	2300      	movs	r3, #0
 800875c:	60fb      	str	r3, [r7, #12]
 800875e:	e048      	b.n	80087f2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6919      	ldr	r1, [r3, #16]
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	4613      	mov	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	4413      	add	r3, r2
 800876c:	00db      	lsls	r3, r3, #3
 800876e:	440b      	add	r3, r1
 8008770:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	2200      	movs	r2, #0
 8008776:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2200      	movs	r2, #0
 800877c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	2200      	movs	r2, #0
 8008782:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	2200      	movs	r2, #0
 8008788:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	2200      	movs	r2, #0
 800878e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	2200      	movs	r2, #0
 8008794:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800879c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80087b6:	68b9      	ldr	r1, [r7, #8]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	3212      	adds	r2, #18
 80087be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d80c      	bhi.n	80087e2 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6919      	ldr	r1, [r3, #16]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	1c5a      	adds	r2, r3, #1
 80087d0:	4613      	mov	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4413      	add	r3, r2
 80087d6:	00db      	lsls	r3, r3, #3
 80087d8:	440b      	add	r3, r1
 80087da:	461a      	mov	r2, r3
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	60da      	str	r2, [r3, #12]
 80087e0:	e004      	b.n	80087ec <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	461a      	mov	r2, r3
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	3301      	adds	r3, #1
 80087f0:	60fb      	str	r3, [r7, #12]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2b03      	cmp	r3, #3
 80087f6:	d9b3      	bls.n	8008760 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	691a      	ldr	r2, [r3, #16]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008822:	60da      	str	r2, [r3, #12]
}
 8008824:	bf00      	nop
 8008826:	3714      	adds	r7, #20
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008830:	b480      	push	{r7}
 8008832:	b089      	sub	sp, #36	@ 0x24
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800883a:	2300      	movs	r3, #0
 800883c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800883e:	2300      	movs	r3, #0
 8008840:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8008842:	2300      	movs	r3, #0
 8008844:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8008846:	2300      	movs	r3, #0
 8008848:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800884a:	2300      	movs	r3, #0
 800884c:	61fb      	str	r3, [r7, #28]
 800884e:	e175      	b.n	8008b3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008850:	2201      	movs	r2, #1
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	fa02 f303 	lsl.w	r3, r2, r3
 8008858:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	4013      	ands	r3, r2
 8008862:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8008864:	693a      	ldr	r2, [r7, #16]
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	429a      	cmp	r2, r3
 800886a:	f040 8164 	bne.w	8008b36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	f003 0303 	and.w	r3, r3, #3
 8008876:	2b01      	cmp	r3, #1
 8008878:	d005      	beq.n	8008886 <HAL_GPIO_Init+0x56>
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	f003 0303 	and.w	r3, r3, #3
 8008882:	2b02      	cmp	r3, #2
 8008884:	d130      	bne.n	80088e8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	005b      	lsls	r3, r3, #1
 8008890:	2203      	movs	r2, #3
 8008892:	fa02 f303 	lsl.w	r3, r2, r3
 8008896:	43db      	mvns	r3, r3
 8008898:	69ba      	ldr	r2, [r7, #24]
 800889a:	4013      	ands	r3, r2
 800889c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	68da      	ldr	r2, [r3, #12]
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	005b      	lsls	r3, r3, #1
 80088a6:	fa02 f303 	lsl.w	r3, r2, r3
 80088aa:	69ba      	ldr	r2, [r7, #24]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	69ba      	ldr	r2, [r7, #24]
 80088b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80088bc:	2201      	movs	r2, #1
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	fa02 f303 	lsl.w	r3, r2, r3
 80088c4:	43db      	mvns	r3, r3
 80088c6:	69ba      	ldr	r2, [r7, #24]
 80088c8:	4013      	ands	r3, r2
 80088ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	091b      	lsrs	r3, r3, #4
 80088d2:	f003 0201 	and.w	r2, r3, #1
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	fa02 f303 	lsl.w	r3, r2, r3
 80088dc:	69ba      	ldr	r2, [r7, #24]
 80088de:	4313      	orrs	r3, r2
 80088e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	69ba      	ldr	r2, [r7, #24]
 80088e6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	f003 0303 	and.w	r3, r3, #3
 80088f0:	2b03      	cmp	r3, #3
 80088f2:	d017      	beq.n	8008924 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	005b      	lsls	r3, r3, #1
 80088fe:	2203      	movs	r2, #3
 8008900:	fa02 f303 	lsl.w	r3, r2, r3
 8008904:	43db      	mvns	r3, r3
 8008906:	69ba      	ldr	r2, [r7, #24]
 8008908:	4013      	ands	r3, r2
 800890a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	689a      	ldr	r2, [r3, #8]
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	005b      	lsls	r3, r3, #1
 8008914:	fa02 f303 	lsl.w	r3, r2, r3
 8008918:	69ba      	ldr	r2, [r7, #24]
 800891a:	4313      	orrs	r3, r2
 800891c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	69ba      	ldr	r2, [r7, #24]
 8008922:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	f003 0303 	and.w	r3, r3, #3
 800892c:	2b02      	cmp	r3, #2
 800892e:	d123      	bne.n	8008978 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	08da      	lsrs	r2, r3, #3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	3208      	adds	r2, #8
 8008938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800893c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	f003 0307 	and.w	r3, r3, #7
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	220f      	movs	r2, #15
 8008948:	fa02 f303 	lsl.w	r3, r2, r3
 800894c:	43db      	mvns	r3, r3
 800894e:	69ba      	ldr	r2, [r7, #24]
 8008950:	4013      	ands	r3, r2
 8008952:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	691a      	ldr	r2, [r3, #16]
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	f003 0307 	and.w	r3, r3, #7
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	fa02 f303 	lsl.w	r3, r2, r3
 8008964:	69ba      	ldr	r2, [r7, #24]
 8008966:	4313      	orrs	r3, r2
 8008968:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	08da      	lsrs	r2, r3, #3
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	3208      	adds	r2, #8
 8008972:	69b9      	ldr	r1, [r7, #24]
 8008974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	005b      	lsls	r3, r3, #1
 8008982:	2203      	movs	r2, #3
 8008984:	fa02 f303 	lsl.w	r3, r2, r3
 8008988:	43db      	mvns	r3, r3
 800898a:	69ba      	ldr	r2, [r7, #24]
 800898c:	4013      	ands	r3, r2
 800898e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	f003 0203 	and.w	r2, r3, #3
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	005b      	lsls	r3, r3, #1
 800899c:	fa02 f303 	lsl.w	r3, r2, r3
 80089a0:	69ba      	ldr	r2, [r7, #24]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	69ba      	ldr	r2, [r7, #24]
 80089aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f000 80be 	beq.w	8008b36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80089ba:	4b66      	ldr	r3, [pc, #408]	@ (8008b54 <HAL_GPIO_Init+0x324>)
 80089bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089be:	4a65      	ldr	r2, [pc, #404]	@ (8008b54 <HAL_GPIO_Init+0x324>)
 80089c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80089c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80089c6:	4b63      	ldr	r3, [pc, #396]	@ (8008b54 <HAL_GPIO_Init+0x324>)
 80089c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089ce:	60fb      	str	r3, [r7, #12]
 80089d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80089d2:	4a61      	ldr	r2, [pc, #388]	@ (8008b58 <HAL_GPIO_Init+0x328>)
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	089b      	lsrs	r3, r3, #2
 80089d8:	3302      	adds	r3, #2
 80089da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	f003 0303 	and.w	r3, r3, #3
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	220f      	movs	r2, #15
 80089ea:	fa02 f303 	lsl.w	r3, r2, r3
 80089ee:	43db      	mvns	r3, r3
 80089f0:	69ba      	ldr	r2, [r7, #24]
 80089f2:	4013      	ands	r3, r2
 80089f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a58      	ldr	r2, [pc, #352]	@ (8008b5c <HAL_GPIO_Init+0x32c>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d037      	beq.n	8008a6e <HAL_GPIO_Init+0x23e>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a57      	ldr	r2, [pc, #348]	@ (8008b60 <HAL_GPIO_Init+0x330>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d031      	beq.n	8008a6a <HAL_GPIO_Init+0x23a>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a56      	ldr	r2, [pc, #344]	@ (8008b64 <HAL_GPIO_Init+0x334>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d02b      	beq.n	8008a66 <HAL_GPIO_Init+0x236>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4a55      	ldr	r2, [pc, #340]	@ (8008b68 <HAL_GPIO_Init+0x338>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d025      	beq.n	8008a62 <HAL_GPIO_Init+0x232>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4a54      	ldr	r2, [pc, #336]	@ (8008b6c <HAL_GPIO_Init+0x33c>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d01f      	beq.n	8008a5e <HAL_GPIO_Init+0x22e>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4a53      	ldr	r2, [pc, #332]	@ (8008b70 <HAL_GPIO_Init+0x340>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d019      	beq.n	8008a5a <HAL_GPIO_Init+0x22a>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4a52      	ldr	r2, [pc, #328]	@ (8008b74 <HAL_GPIO_Init+0x344>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d013      	beq.n	8008a56 <HAL_GPIO_Init+0x226>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a51      	ldr	r2, [pc, #324]	@ (8008b78 <HAL_GPIO_Init+0x348>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d00d      	beq.n	8008a52 <HAL_GPIO_Init+0x222>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a50      	ldr	r2, [pc, #320]	@ (8008b7c <HAL_GPIO_Init+0x34c>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d007      	beq.n	8008a4e <HAL_GPIO_Init+0x21e>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a4f      	ldr	r2, [pc, #316]	@ (8008b80 <HAL_GPIO_Init+0x350>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d101      	bne.n	8008a4a <HAL_GPIO_Init+0x21a>
 8008a46:	2309      	movs	r3, #9
 8008a48:	e012      	b.n	8008a70 <HAL_GPIO_Init+0x240>
 8008a4a:	230a      	movs	r3, #10
 8008a4c:	e010      	b.n	8008a70 <HAL_GPIO_Init+0x240>
 8008a4e:	2308      	movs	r3, #8
 8008a50:	e00e      	b.n	8008a70 <HAL_GPIO_Init+0x240>
 8008a52:	2307      	movs	r3, #7
 8008a54:	e00c      	b.n	8008a70 <HAL_GPIO_Init+0x240>
 8008a56:	2306      	movs	r3, #6
 8008a58:	e00a      	b.n	8008a70 <HAL_GPIO_Init+0x240>
 8008a5a:	2305      	movs	r3, #5
 8008a5c:	e008      	b.n	8008a70 <HAL_GPIO_Init+0x240>
 8008a5e:	2304      	movs	r3, #4
 8008a60:	e006      	b.n	8008a70 <HAL_GPIO_Init+0x240>
 8008a62:	2303      	movs	r3, #3
 8008a64:	e004      	b.n	8008a70 <HAL_GPIO_Init+0x240>
 8008a66:	2302      	movs	r3, #2
 8008a68:	e002      	b.n	8008a70 <HAL_GPIO_Init+0x240>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e000      	b.n	8008a70 <HAL_GPIO_Init+0x240>
 8008a6e:	2300      	movs	r3, #0
 8008a70:	69fa      	ldr	r2, [r7, #28]
 8008a72:	f002 0203 	and.w	r2, r2, #3
 8008a76:	0092      	lsls	r2, r2, #2
 8008a78:	4093      	lsls	r3, r2
 8008a7a:	69ba      	ldr	r2, [r7, #24]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008a80:	4935      	ldr	r1, [pc, #212]	@ (8008b58 <HAL_GPIO_Init+0x328>)
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	089b      	lsrs	r3, r3, #2
 8008a86:	3302      	adds	r3, #2
 8008a88:	69ba      	ldr	r2, [r7, #24]
 8008a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008a8e:	4b3d      	ldr	r3, [pc, #244]	@ (8008b84 <HAL_GPIO_Init+0x354>)
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	43db      	mvns	r3, r3
 8008a98:	69ba      	ldr	r2, [r7, #24]
 8008a9a:	4013      	ands	r3, r2
 8008a9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d003      	beq.n	8008ab2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008aaa:	69ba      	ldr	r2, [r7, #24]
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008ab2:	4a34      	ldr	r2, [pc, #208]	@ (8008b84 <HAL_GPIO_Init+0x354>)
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008ab8:	4b32      	ldr	r3, [pc, #200]	@ (8008b84 <HAL_GPIO_Init+0x354>)
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	43db      	mvns	r3, r3
 8008ac2:	69ba      	ldr	r2, [r7, #24]
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d003      	beq.n	8008adc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008ad4:	69ba      	ldr	r2, [r7, #24]
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008adc:	4a29      	ldr	r2, [pc, #164]	@ (8008b84 <HAL_GPIO_Init+0x354>)
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008ae2:	4b28      	ldr	r3, [pc, #160]	@ (8008b84 <HAL_GPIO_Init+0x354>)
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	43db      	mvns	r3, r3
 8008aec:	69ba      	ldr	r2, [r7, #24]
 8008aee:	4013      	ands	r3, r2
 8008af0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d003      	beq.n	8008b06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008afe:	69ba      	ldr	r2, [r7, #24]
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008b06:	4a1f      	ldr	r2, [pc, #124]	@ (8008b84 <HAL_GPIO_Init+0x354>)
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8008b84 <HAL_GPIO_Init+0x354>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	43db      	mvns	r3, r3
 8008b16:	69ba      	ldr	r2, [r7, #24]
 8008b18:	4013      	ands	r3, r2
 8008b1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d003      	beq.n	8008b30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008b28:	69ba      	ldr	r2, [r7, #24]
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008b30:	4a14      	ldr	r2, [pc, #80]	@ (8008b84 <HAL_GPIO_Init+0x354>)
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	61fb      	str	r3, [r7, #28]
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	2b0f      	cmp	r3, #15
 8008b40:	f67f ae86 	bls.w	8008850 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008b44:	bf00      	nop
 8008b46:	bf00      	nop
 8008b48:	3724      	adds	r7, #36	@ 0x24
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop
 8008b54:	40023800 	.word	0x40023800
 8008b58:	40013800 	.word	0x40013800
 8008b5c:	40020000 	.word	0x40020000
 8008b60:	40020400 	.word	0x40020400
 8008b64:	40020800 	.word	0x40020800
 8008b68:	40020c00 	.word	0x40020c00
 8008b6c:	40021000 	.word	0x40021000
 8008b70:	40021400 	.word	0x40021400
 8008b74:	40021800 	.word	0x40021800
 8008b78:	40021c00 	.word	0x40021c00
 8008b7c:	40022000 	.word	0x40022000
 8008b80:	40022400 	.word	0x40022400
 8008b84:	40013c00 	.word	0x40013c00

08008b88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	460b      	mov	r3, r1
 8008b92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	691a      	ldr	r2, [r3, #16]
 8008b98:	887b      	ldrh	r3, [r7, #2]
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d002      	beq.n	8008ba6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	73fb      	strb	r3, [r7, #15]
 8008ba4:	e001      	b.n	8008baa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3714      	adds	r7, #20
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	807b      	strh	r3, [r7, #2]
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008bc8:	787b      	ldrb	r3, [r7, #1]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d003      	beq.n	8008bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008bce:	887a      	ldrh	r2, [r7, #2]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008bd4:	e003      	b.n	8008bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008bd6:	887b      	ldrh	r3, [r7, #2]
 8008bd8:	041a      	lsls	r2, r3, #16
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	619a      	str	r2, [r3, #24]
}
 8008bde:	bf00      	nop
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b086      	sub	sp, #24
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4618      	mov	r0, r3
 8008c02:	f009 f951 	bl	8011ea8 <USB_GetMode>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	f040 80fb 	bne.w	8008e04 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4618      	mov	r0, r3
 8008c14:	f009 f914 	bl	8011e40 <USB_ReadInterrupts>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	f000 80f1 	beq.w	8008e02 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4618      	mov	r0, r3
 8008c26:	f009 f90b 	bl	8011e40 <USB_ReadInterrupts>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c34:	d104      	bne.n	8008c40 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8008c3e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4618      	mov	r0, r3
 8008c46:	f009 f8fb 	bl	8011e40 <USB_ReadInterrupts>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c54:	d104      	bne.n	8008c60 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008c5e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4618      	mov	r0, r3
 8008c66:	f009 f8eb 	bl	8011e40 <USB_ReadInterrupts>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008c70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008c74:	d104      	bne.n	8008c80 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8008c7e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4618      	mov	r0, r3
 8008c86:	f009 f8db 	bl	8011e40 <USB_ReadInterrupts>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	f003 0302 	and.w	r3, r3, #2
 8008c90:	2b02      	cmp	r3, #2
 8008c92:	d103      	bne.n	8008c9c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2202      	movs	r2, #2
 8008c9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f009 f8cd 	bl	8011e40 <USB_ReadInterrupts>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008cac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cb0:	d120      	bne.n	8008cf4 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8008cba:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f003 0301 	and.w	r3, r3, #1
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d113      	bne.n	8008cf4 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8008ccc:	2110      	movs	r1, #16
 8008cce:	6938      	ldr	r0, [r7, #16]
 8008cd0:	f008 fffe 	bl	8011cd0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8008cd4:	6938      	ldr	r0, [r7, #16]
 8008cd6:	f009 f82d 	bl	8011d34 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	7a5b      	ldrb	r3, [r3, #9]
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d105      	bne.n	8008cee <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2101      	movs	r1, #1
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f009 f8eb 	bl	8011ec4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f00e ffd4 	bl	8017c9c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f009 f8a1 	bl	8011e40 <USB_ReadInterrupts>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008d04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d08:	d102      	bne.n	8008d10 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f001 fca1 	bl	800a652 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4618      	mov	r0, r3
 8008d16:	f009 f893 	bl	8011e40 <USB_ReadInterrupts>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	f003 0308 	and.w	r3, r3, #8
 8008d20:	2b08      	cmp	r3, #8
 8008d22:	d106      	bne.n	8008d32 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f00e ff9d 	bl	8017c64 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2208      	movs	r2, #8
 8008d30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4618      	mov	r0, r3
 8008d38:	f009 f882 	bl	8011e40 <USB_ReadInterrupts>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d46:	d139      	bne.n	8008dbc <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f009 f8f6 	bl	8011f3e <USB_HC_ReadInterrupt>
 8008d52:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008d54:	2300      	movs	r3, #0
 8008d56:	617b      	str	r3, [r7, #20]
 8008d58:	e025      	b.n	8008da6 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	f003 030f 	and.w	r3, r3, #15
 8008d60:	68ba      	ldr	r2, [r7, #8]
 8008d62:	fa22 f303 	lsr.w	r3, r2, r3
 8008d66:	f003 0301 	and.w	r3, r3, #1
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d018      	beq.n	8008da0 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	015a      	lsls	r2, r3, #5
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	4413      	add	r3, r2
 8008d76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d84:	d106      	bne.n	8008d94 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 f859 	bl	8008e44 <HCD_HC_IN_IRQHandler>
 8008d92:	e005      	b.n	8008da0 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	4619      	mov	r1, r3
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 febb 	bl	8009b16 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	3301      	adds	r3, #1
 8008da4:	617b      	str	r3, [r7, #20]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	795b      	ldrb	r3, [r3, #5]
 8008daa:	461a      	mov	r2, r3
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d3d3      	bcc.n	8008d5a <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8008dba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f009 f83d 	bl	8011e40 <USB_ReadInterrupts>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	f003 0310 	and.w	r3, r3, #16
 8008dcc:	2b10      	cmp	r3, #16
 8008dce:	d101      	bne.n	8008dd4 <HAL_HCD_IRQHandler+0x1ea>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e000      	b.n	8008dd6 <HAL_HCD_IRQHandler+0x1ec>
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d014      	beq.n	8008e04 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	699a      	ldr	r2, [r3, #24]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f022 0210 	bic.w	r2, r2, #16
 8008de8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f001 fb52 	bl	800a494 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	699a      	ldr	r2, [r3, #24]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f042 0210 	orr.w	r2, r2, #16
 8008dfe:	619a      	str	r2, [r3, #24]
 8008e00:	e000      	b.n	8008e04 <HAL_HCD_IRQHandler+0x21a>
      return;
 8008e02:	bf00      	nop
    }
  }
}
 8008e04:	3718      	adds	r7, #24
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b082      	sub	sp, #8
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d101      	bne.n	8008e20 <HAL_HCD_Stop+0x16>
 8008e1c:	2302      	movs	r3, #2
 8008e1e:	e00d      	b.n	8008e3c <HAL_HCD_Stop+0x32>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f009 f9b7 	bl	80121a0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3708      	adds	r7, #8
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b086      	sub	sp, #24
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	78fa      	ldrb	r2, [r7, #3]
 8008e60:	4611      	mov	r1, r2
 8008e62:	4618      	mov	r0, r3
 8008e64:	f008 ffff 	bl	8011e66 <USB_ReadChInterrupts>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	f003 0304 	and.w	r3, r3, #4
 8008e6e:	2b04      	cmp	r3, #4
 8008e70:	d11a      	bne.n	8008ea8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8008e72:	78fb      	ldrb	r3, [r7, #3]
 8008e74:	015a      	lsls	r2, r3, #5
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	4413      	add	r3, r2
 8008e7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e7e:	461a      	mov	r2, r3
 8008e80:	2304      	movs	r3, #4
 8008e82:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8008e84:	78fa      	ldrb	r2, [r7, #3]
 8008e86:	6879      	ldr	r1, [r7, #4]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	011b      	lsls	r3, r3, #4
 8008e8c:	1a9b      	subs	r3, r3, r2
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	440b      	add	r3, r1
 8008e92:	334d      	adds	r3, #77	@ 0x4d
 8008e94:	2207      	movs	r2, #7
 8008e96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	78fa      	ldrb	r2, [r7, #3]
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f009 f85d 	bl	8011f60 <USB_HC_Halt>
 8008ea6:	e09e      	b.n	8008fe6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	78fa      	ldrb	r2, [r7, #3]
 8008eae:	4611      	mov	r1, r2
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f008 ffd8 	bl	8011e66 <USB_ReadChInterrupts>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ebc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ec0:	d11b      	bne.n	8008efa <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8008ec2:	78fb      	ldrb	r3, [r7, #3]
 8008ec4:	015a      	lsls	r2, r3, #5
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	4413      	add	r3, r2
 8008eca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ece:	461a      	mov	r2, r3
 8008ed0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008ed4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8008ed6:	78fa      	ldrb	r2, [r7, #3]
 8008ed8:	6879      	ldr	r1, [r7, #4]
 8008eda:	4613      	mov	r3, r2
 8008edc:	011b      	lsls	r3, r3, #4
 8008ede:	1a9b      	subs	r3, r3, r2
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	440b      	add	r3, r1
 8008ee4:	334d      	adds	r3, #77	@ 0x4d
 8008ee6:	2208      	movs	r2, #8
 8008ee8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	78fa      	ldrb	r2, [r7, #3]
 8008ef0:	4611      	mov	r1, r2
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f009 f834 	bl	8011f60 <USB_HC_Halt>
 8008ef8:	e075      	b.n	8008fe6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	78fa      	ldrb	r2, [r7, #3]
 8008f00:	4611      	mov	r1, r2
 8008f02:	4618      	mov	r0, r3
 8008f04:	f008 ffaf 	bl	8011e66 <USB_ReadChInterrupts>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	f003 0308 	and.w	r3, r3, #8
 8008f0e:	2b08      	cmp	r3, #8
 8008f10:	d11a      	bne.n	8008f48 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8008f12:	78fb      	ldrb	r3, [r7, #3]
 8008f14:	015a      	lsls	r2, r3, #5
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	4413      	add	r3, r2
 8008f1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f1e:	461a      	mov	r2, r3
 8008f20:	2308      	movs	r3, #8
 8008f22:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8008f24:	78fa      	ldrb	r2, [r7, #3]
 8008f26:	6879      	ldr	r1, [r7, #4]
 8008f28:	4613      	mov	r3, r2
 8008f2a:	011b      	lsls	r3, r3, #4
 8008f2c:	1a9b      	subs	r3, r3, r2
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	440b      	add	r3, r1
 8008f32:	334d      	adds	r3, #77	@ 0x4d
 8008f34:	2206      	movs	r2, #6
 8008f36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	78fa      	ldrb	r2, [r7, #3]
 8008f3e:	4611      	mov	r1, r2
 8008f40:	4618      	mov	r0, r3
 8008f42:	f009 f80d 	bl	8011f60 <USB_HC_Halt>
 8008f46:	e04e      	b.n	8008fe6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	78fa      	ldrb	r2, [r7, #3]
 8008f4e:	4611      	mov	r1, r2
 8008f50:	4618      	mov	r0, r3
 8008f52:	f008 ff88 	bl	8011e66 <USB_ReadChInterrupts>
 8008f56:	4603      	mov	r3, r0
 8008f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f60:	d11b      	bne.n	8008f9a <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8008f62:	78fb      	ldrb	r3, [r7, #3]
 8008f64:	015a      	lsls	r2, r3, #5
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	4413      	add	r3, r2
 8008f6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f6e:	461a      	mov	r2, r3
 8008f70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f74:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8008f76:	78fa      	ldrb	r2, [r7, #3]
 8008f78:	6879      	ldr	r1, [r7, #4]
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	011b      	lsls	r3, r3, #4
 8008f7e:	1a9b      	subs	r3, r3, r2
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	440b      	add	r3, r1
 8008f84:	334d      	adds	r3, #77	@ 0x4d
 8008f86:	2209      	movs	r2, #9
 8008f88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	78fa      	ldrb	r2, [r7, #3]
 8008f90:	4611      	mov	r1, r2
 8008f92:	4618      	mov	r0, r3
 8008f94:	f008 ffe4 	bl	8011f60 <USB_HC_Halt>
 8008f98:	e025      	b.n	8008fe6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	78fa      	ldrb	r2, [r7, #3]
 8008fa0:	4611      	mov	r1, r2
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f008 ff5f 	bl	8011e66 <USB_ReadChInterrupts>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fae:	2b80      	cmp	r3, #128	@ 0x80
 8008fb0:	d119      	bne.n	8008fe6 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8008fb2:	78fb      	ldrb	r3, [r7, #3]
 8008fb4:	015a      	lsls	r2, r3, #5
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	4413      	add	r3, r2
 8008fba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	2380      	movs	r3, #128	@ 0x80
 8008fc2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8008fc4:	78fa      	ldrb	r2, [r7, #3]
 8008fc6:	6879      	ldr	r1, [r7, #4]
 8008fc8:	4613      	mov	r3, r2
 8008fca:	011b      	lsls	r3, r3, #4
 8008fcc:	1a9b      	subs	r3, r3, r2
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	440b      	add	r3, r1
 8008fd2:	334d      	adds	r3, #77	@ 0x4d
 8008fd4:	2207      	movs	r2, #7
 8008fd6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	78fa      	ldrb	r2, [r7, #3]
 8008fde:	4611      	mov	r1, r2
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f008 ffbd 	bl	8011f60 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	78fa      	ldrb	r2, [r7, #3]
 8008fec:	4611      	mov	r1, r2
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f008 ff39 	bl	8011e66 <USB_ReadChInterrupts>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ffa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ffe:	d112      	bne.n	8009026 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	78fa      	ldrb	r2, [r7, #3]
 8009006:	4611      	mov	r1, r2
 8009008:	4618      	mov	r0, r3
 800900a:	f008 ffa9 	bl	8011f60 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800900e:	78fb      	ldrb	r3, [r7, #3]
 8009010:	015a      	lsls	r2, r3, #5
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	4413      	add	r3, r2
 8009016:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800901a:	461a      	mov	r2, r3
 800901c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009020:	6093      	str	r3, [r2, #8]
 8009022:	f000 bd75 	b.w	8009b10 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	78fa      	ldrb	r2, [r7, #3]
 800902c:	4611      	mov	r1, r2
 800902e:	4618      	mov	r0, r3
 8009030:	f008 ff19 	bl	8011e66 <USB_ReadChInterrupts>
 8009034:	4603      	mov	r3, r0
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	2b01      	cmp	r3, #1
 800903c:	f040 8128 	bne.w	8009290 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8009040:	78fb      	ldrb	r3, [r7, #3]
 8009042:	015a      	lsls	r2, r3, #5
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	4413      	add	r3, r2
 8009048:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800904c:	461a      	mov	r2, r3
 800904e:	2320      	movs	r3, #32
 8009050:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8009052:	78fa      	ldrb	r2, [r7, #3]
 8009054:	6879      	ldr	r1, [r7, #4]
 8009056:	4613      	mov	r3, r2
 8009058:	011b      	lsls	r3, r3, #4
 800905a:	1a9b      	subs	r3, r3, r2
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	440b      	add	r3, r1
 8009060:	331b      	adds	r3, #27
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d119      	bne.n	800909c <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8009068:	78fa      	ldrb	r2, [r7, #3]
 800906a:	6879      	ldr	r1, [r7, #4]
 800906c:	4613      	mov	r3, r2
 800906e:	011b      	lsls	r3, r3, #4
 8009070:	1a9b      	subs	r3, r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	440b      	add	r3, r1
 8009076:	331b      	adds	r3, #27
 8009078:	2200      	movs	r2, #0
 800907a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800907c:	78fb      	ldrb	r3, [r7, #3]
 800907e:	015a      	lsls	r2, r3, #5
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	4413      	add	r3, r2
 8009084:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	78fa      	ldrb	r2, [r7, #3]
 800908c:	0151      	lsls	r1, r2, #5
 800908e:	693a      	ldr	r2, [r7, #16]
 8009090:	440a      	add	r2, r1
 8009092:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009096:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800909a:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	799b      	ldrb	r3, [r3, #6]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d01b      	beq.n	80090dc <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80090a4:	78fa      	ldrb	r2, [r7, #3]
 80090a6:	6879      	ldr	r1, [r7, #4]
 80090a8:	4613      	mov	r3, r2
 80090aa:	011b      	lsls	r3, r3, #4
 80090ac:	1a9b      	subs	r3, r3, r2
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	440b      	add	r3, r1
 80090b2:	3330      	adds	r3, #48	@ 0x30
 80090b4:	6819      	ldr	r1, [r3, #0]
 80090b6:	78fb      	ldrb	r3, [r7, #3]
 80090b8:	015a      	lsls	r2, r3, #5
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	4413      	add	r3, r2
 80090be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090c8:	78fa      	ldrb	r2, [r7, #3]
 80090ca:	1ac9      	subs	r1, r1, r3
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	4613      	mov	r3, r2
 80090d0:	011b      	lsls	r3, r3, #4
 80090d2:	1a9b      	subs	r3, r3, r2
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4403      	add	r3, r0
 80090d8:	3338      	adds	r3, #56	@ 0x38
 80090da:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80090dc:	78fa      	ldrb	r2, [r7, #3]
 80090de:	6879      	ldr	r1, [r7, #4]
 80090e0:	4613      	mov	r3, r2
 80090e2:	011b      	lsls	r3, r3, #4
 80090e4:	1a9b      	subs	r3, r3, r2
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	440b      	add	r3, r1
 80090ea:	334d      	adds	r3, #77	@ 0x4d
 80090ec:	2201      	movs	r2, #1
 80090ee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80090f0:	78fa      	ldrb	r2, [r7, #3]
 80090f2:	6879      	ldr	r1, [r7, #4]
 80090f4:	4613      	mov	r3, r2
 80090f6:	011b      	lsls	r3, r3, #4
 80090f8:	1a9b      	subs	r3, r3, r2
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	440b      	add	r3, r1
 80090fe:	3344      	adds	r3, #68	@ 0x44
 8009100:	2200      	movs	r2, #0
 8009102:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8009104:	78fb      	ldrb	r3, [r7, #3]
 8009106:	015a      	lsls	r2, r3, #5
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	4413      	add	r3, r2
 800910c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009110:	461a      	mov	r2, r3
 8009112:	2301      	movs	r3, #1
 8009114:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009116:	78fa      	ldrb	r2, [r7, #3]
 8009118:	6879      	ldr	r1, [r7, #4]
 800911a:	4613      	mov	r3, r2
 800911c:	011b      	lsls	r3, r3, #4
 800911e:	1a9b      	subs	r3, r3, r2
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	440b      	add	r3, r1
 8009124:	3326      	adds	r3, #38	@ 0x26
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d00a      	beq.n	8009142 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800912c:	78fa      	ldrb	r2, [r7, #3]
 800912e:	6879      	ldr	r1, [r7, #4]
 8009130:	4613      	mov	r3, r2
 8009132:	011b      	lsls	r3, r3, #4
 8009134:	1a9b      	subs	r3, r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	440b      	add	r3, r1
 800913a:	3326      	adds	r3, #38	@ 0x26
 800913c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800913e:	2b02      	cmp	r3, #2
 8009140:	d110      	bne.n	8009164 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	78fa      	ldrb	r2, [r7, #3]
 8009148:	4611      	mov	r1, r2
 800914a:	4618      	mov	r0, r3
 800914c:	f008 ff08 	bl	8011f60 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8009150:	78fb      	ldrb	r3, [r7, #3]
 8009152:	015a      	lsls	r2, r3, #5
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	4413      	add	r3, r2
 8009158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800915c:	461a      	mov	r2, r3
 800915e:	2310      	movs	r3, #16
 8009160:	6093      	str	r3, [r2, #8]
 8009162:	e03d      	b.n	80091e0 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8009164:	78fa      	ldrb	r2, [r7, #3]
 8009166:	6879      	ldr	r1, [r7, #4]
 8009168:	4613      	mov	r3, r2
 800916a:	011b      	lsls	r3, r3, #4
 800916c:	1a9b      	subs	r3, r3, r2
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	440b      	add	r3, r1
 8009172:	3326      	adds	r3, #38	@ 0x26
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	2b03      	cmp	r3, #3
 8009178:	d00a      	beq.n	8009190 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800917a:	78fa      	ldrb	r2, [r7, #3]
 800917c:	6879      	ldr	r1, [r7, #4]
 800917e:	4613      	mov	r3, r2
 8009180:	011b      	lsls	r3, r3, #4
 8009182:	1a9b      	subs	r3, r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	440b      	add	r3, r1
 8009188:	3326      	adds	r3, #38	@ 0x26
 800918a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800918c:	2b01      	cmp	r3, #1
 800918e:	d127      	bne.n	80091e0 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009190:	78fb      	ldrb	r3, [r7, #3]
 8009192:	015a      	lsls	r2, r3, #5
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	4413      	add	r3, r2
 8009198:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	78fa      	ldrb	r2, [r7, #3]
 80091a0:	0151      	lsls	r1, r2, #5
 80091a2:	693a      	ldr	r2, [r7, #16]
 80091a4:	440a      	add	r2, r1
 80091a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80091aa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80091ae:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80091b0:	78fa      	ldrb	r2, [r7, #3]
 80091b2:	6879      	ldr	r1, [r7, #4]
 80091b4:	4613      	mov	r3, r2
 80091b6:	011b      	lsls	r3, r3, #4
 80091b8:	1a9b      	subs	r3, r3, r2
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	440b      	add	r3, r1
 80091be:	334c      	adds	r3, #76	@ 0x4c
 80091c0:	2201      	movs	r2, #1
 80091c2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80091c4:	78fa      	ldrb	r2, [r7, #3]
 80091c6:	6879      	ldr	r1, [r7, #4]
 80091c8:	4613      	mov	r3, r2
 80091ca:	011b      	lsls	r3, r3, #4
 80091cc:	1a9b      	subs	r3, r3, r2
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	440b      	add	r3, r1
 80091d2:	334c      	adds	r3, #76	@ 0x4c
 80091d4:	781a      	ldrb	r2, [r3, #0]
 80091d6:	78fb      	ldrb	r3, [r7, #3]
 80091d8:	4619      	mov	r1, r3
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f00e fd6c 	bl	8017cb8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	799b      	ldrb	r3, [r3, #6]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d13b      	bne.n	8009260 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80091e8:	78fa      	ldrb	r2, [r7, #3]
 80091ea:	6879      	ldr	r1, [r7, #4]
 80091ec:	4613      	mov	r3, r2
 80091ee:	011b      	lsls	r3, r3, #4
 80091f0:	1a9b      	subs	r3, r3, r2
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	440b      	add	r3, r1
 80091f6:	3338      	adds	r3, #56	@ 0x38
 80091f8:	6819      	ldr	r1, [r3, #0]
 80091fa:	78fa      	ldrb	r2, [r7, #3]
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	4613      	mov	r3, r2
 8009200:	011b      	lsls	r3, r3, #4
 8009202:	1a9b      	subs	r3, r3, r2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4403      	add	r3, r0
 8009208:	3328      	adds	r3, #40	@ 0x28
 800920a:	881b      	ldrh	r3, [r3, #0]
 800920c:	440b      	add	r3, r1
 800920e:	1e59      	subs	r1, r3, #1
 8009210:	78fa      	ldrb	r2, [r7, #3]
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	4613      	mov	r3, r2
 8009216:	011b      	lsls	r3, r3, #4
 8009218:	1a9b      	subs	r3, r3, r2
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	4403      	add	r3, r0
 800921e:	3328      	adds	r3, #40	@ 0x28
 8009220:	881b      	ldrh	r3, [r3, #0]
 8009222:	fbb1 f3f3 	udiv	r3, r1, r3
 8009226:	f003 0301 	and.w	r3, r3, #1
 800922a:	2b00      	cmp	r3, #0
 800922c:	f000 8470 	beq.w	8009b10 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8009230:	78fa      	ldrb	r2, [r7, #3]
 8009232:	6879      	ldr	r1, [r7, #4]
 8009234:	4613      	mov	r3, r2
 8009236:	011b      	lsls	r3, r3, #4
 8009238:	1a9b      	subs	r3, r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	440b      	add	r3, r1
 800923e:	333c      	adds	r3, #60	@ 0x3c
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	78fa      	ldrb	r2, [r7, #3]
 8009244:	f083 0301 	eor.w	r3, r3, #1
 8009248:	b2d8      	uxtb	r0, r3
 800924a:	6879      	ldr	r1, [r7, #4]
 800924c:	4613      	mov	r3, r2
 800924e:	011b      	lsls	r3, r3, #4
 8009250:	1a9b      	subs	r3, r3, r2
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	440b      	add	r3, r1
 8009256:	333c      	adds	r3, #60	@ 0x3c
 8009258:	4602      	mov	r2, r0
 800925a:	701a      	strb	r2, [r3, #0]
 800925c:	f000 bc58 	b.w	8009b10 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8009260:	78fa      	ldrb	r2, [r7, #3]
 8009262:	6879      	ldr	r1, [r7, #4]
 8009264:	4613      	mov	r3, r2
 8009266:	011b      	lsls	r3, r3, #4
 8009268:	1a9b      	subs	r3, r3, r2
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	440b      	add	r3, r1
 800926e:	333c      	adds	r3, #60	@ 0x3c
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	78fa      	ldrb	r2, [r7, #3]
 8009274:	f083 0301 	eor.w	r3, r3, #1
 8009278:	b2d8      	uxtb	r0, r3
 800927a:	6879      	ldr	r1, [r7, #4]
 800927c:	4613      	mov	r3, r2
 800927e:	011b      	lsls	r3, r3, #4
 8009280:	1a9b      	subs	r3, r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	440b      	add	r3, r1
 8009286:	333c      	adds	r3, #60	@ 0x3c
 8009288:	4602      	mov	r2, r0
 800928a:	701a      	strb	r2, [r3, #0]
 800928c:	f000 bc40 	b.w	8009b10 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	78fa      	ldrb	r2, [r7, #3]
 8009296:	4611      	mov	r1, r2
 8009298:	4618      	mov	r0, r3
 800929a:	f008 fde4 	bl	8011e66 <USB_ReadChInterrupts>
 800929e:	4603      	mov	r3, r0
 80092a0:	f003 0320 	and.w	r3, r3, #32
 80092a4:	2b20      	cmp	r3, #32
 80092a6:	d131      	bne.n	800930c <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80092a8:	78fb      	ldrb	r3, [r7, #3]
 80092aa:	015a      	lsls	r2, r3, #5
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	4413      	add	r3, r2
 80092b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092b4:	461a      	mov	r2, r3
 80092b6:	2320      	movs	r3, #32
 80092b8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80092ba:	78fa      	ldrb	r2, [r7, #3]
 80092bc:	6879      	ldr	r1, [r7, #4]
 80092be:	4613      	mov	r3, r2
 80092c0:	011b      	lsls	r3, r3, #4
 80092c2:	1a9b      	subs	r3, r3, r2
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	440b      	add	r3, r1
 80092c8:	331a      	adds	r3, #26
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	f040 841f 	bne.w	8009b10 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80092d2:	78fa      	ldrb	r2, [r7, #3]
 80092d4:	6879      	ldr	r1, [r7, #4]
 80092d6:	4613      	mov	r3, r2
 80092d8:	011b      	lsls	r3, r3, #4
 80092da:	1a9b      	subs	r3, r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	440b      	add	r3, r1
 80092e0:	331b      	adds	r3, #27
 80092e2:	2201      	movs	r2, #1
 80092e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80092e6:	78fa      	ldrb	r2, [r7, #3]
 80092e8:	6879      	ldr	r1, [r7, #4]
 80092ea:	4613      	mov	r3, r2
 80092ec:	011b      	lsls	r3, r3, #4
 80092ee:	1a9b      	subs	r3, r3, r2
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	440b      	add	r3, r1
 80092f4:	334d      	adds	r3, #77	@ 0x4d
 80092f6:	2203      	movs	r2, #3
 80092f8:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	78fa      	ldrb	r2, [r7, #3]
 8009300:	4611      	mov	r1, r2
 8009302:	4618      	mov	r0, r3
 8009304:	f008 fe2c 	bl	8011f60 <USB_HC_Halt>
 8009308:	f000 bc02 	b.w	8009b10 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	78fa      	ldrb	r2, [r7, #3]
 8009312:	4611      	mov	r1, r2
 8009314:	4618      	mov	r0, r3
 8009316:	f008 fda6 	bl	8011e66 <USB_ReadChInterrupts>
 800931a:	4603      	mov	r3, r0
 800931c:	f003 0302 	and.w	r3, r3, #2
 8009320:	2b02      	cmp	r3, #2
 8009322:	f040 8305 	bne.w	8009930 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8009326:	78fb      	ldrb	r3, [r7, #3]
 8009328:	015a      	lsls	r2, r3, #5
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	4413      	add	r3, r2
 800932e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009332:	461a      	mov	r2, r3
 8009334:	2302      	movs	r3, #2
 8009336:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8009338:	78fa      	ldrb	r2, [r7, #3]
 800933a:	6879      	ldr	r1, [r7, #4]
 800933c:	4613      	mov	r3, r2
 800933e:	011b      	lsls	r3, r3, #4
 8009340:	1a9b      	subs	r3, r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	440b      	add	r3, r1
 8009346:	334d      	adds	r3, #77	@ 0x4d
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	2b01      	cmp	r3, #1
 800934c:	d114      	bne.n	8009378 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800934e:	78fa      	ldrb	r2, [r7, #3]
 8009350:	6879      	ldr	r1, [r7, #4]
 8009352:	4613      	mov	r3, r2
 8009354:	011b      	lsls	r3, r3, #4
 8009356:	1a9b      	subs	r3, r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	440b      	add	r3, r1
 800935c:	334d      	adds	r3, #77	@ 0x4d
 800935e:	2202      	movs	r2, #2
 8009360:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8009362:	78fa      	ldrb	r2, [r7, #3]
 8009364:	6879      	ldr	r1, [r7, #4]
 8009366:	4613      	mov	r3, r2
 8009368:	011b      	lsls	r3, r3, #4
 800936a:	1a9b      	subs	r3, r3, r2
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	440b      	add	r3, r1
 8009370:	334c      	adds	r3, #76	@ 0x4c
 8009372:	2201      	movs	r2, #1
 8009374:	701a      	strb	r2, [r3, #0]
 8009376:	e2cc      	b.n	8009912 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8009378:	78fa      	ldrb	r2, [r7, #3]
 800937a:	6879      	ldr	r1, [r7, #4]
 800937c:	4613      	mov	r3, r2
 800937e:	011b      	lsls	r3, r3, #4
 8009380:	1a9b      	subs	r3, r3, r2
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	440b      	add	r3, r1
 8009386:	334d      	adds	r3, #77	@ 0x4d
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	2b06      	cmp	r3, #6
 800938c:	d114      	bne.n	80093b8 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800938e:	78fa      	ldrb	r2, [r7, #3]
 8009390:	6879      	ldr	r1, [r7, #4]
 8009392:	4613      	mov	r3, r2
 8009394:	011b      	lsls	r3, r3, #4
 8009396:	1a9b      	subs	r3, r3, r2
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	440b      	add	r3, r1
 800939c:	334d      	adds	r3, #77	@ 0x4d
 800939e:	2202      	movs	r2, #2
 80093a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80093a2:	78fa      	ldrb	r2, [r7, #3]
 80093a4:	6879      	ldr	r1, [r7, #4]
 80093a6:	4613      	mov	r3, r2
 80093a8:	011b      	lsls	r3, r3, #4
 80093aa:	1a9b      	subs	r3, r3, r2
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	440b      	add	r3, r1
 80093b0:	334c      	adds	r3, #76	@ 0x4c
 80093b2:	2205      	movs	r2, #5
 80093b4:	701a      	strb	r2, [r3, #0]
 80093b6:	e2ac      	b.n	8009912 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80093b8:	78fa      	ldrb	r2, [r7, #3]
 80093ba:	6879      	ldr	r1, [r7, #4]
 80093bc:	4613      	mov	r3, r2
 80093be:	011b      	lsls	r3, r3, #4
 80093c0:	1a9b      	subs	r3, r3, r2
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	440b      	add	r3, r1
 80093c6:	334d      	adds	r3, #77	@ 0x4d
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	2b07      	cmp	r3, #7
 80093cc:	d00b      	beq.n	80093e6 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80093ce:	78fa      	ldrb	r2, [r7, #3]
 80093d0:	6879      	ldr	r1, [r7, #4]
 80093d2:	4613      	mov	r3, r2
 80093d4:	011b      	lsls	r3, r3, #4
 80093d6:	1a9b      	subs	r3, r3, r2
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	440b      	add	r3, r1
 80093dc:	334d      	adds	r3, #77	@ 0x4d
 80093de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80093e0:	2b09      	cmp	r3, #9
 80093e2:	f040 80a6 	bne.w	8009532 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80093e6:	78fa      	ldrb	r2, [r7, #3]
 80093e8:	6879      	ldr	r1, [r7, #4]
 80093ea:	4613      	mov	r3, r2
 80093ec:	011b      	lsls	r3, r3, #4
 80093ee:	1a9b      	subs	r3, r3, r2
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	440b      	add	r3, r1
 80093f4:	334d      	adds	r3, #77	@ 0x4d
 80093f6:	2202      	movs	r2, #2
 80093f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80093fa:	78fa      	ldrb	r2, [r7, #3]
 80093fc:	6879      	ldr	r1, [r7, #4]
 80093fe:	4613      	mov	r3, r2
 8009400:	011b      	lsls	r3, r3, #4
 8009402:	1a9b      	subs	r3, r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	440b      	add	r3, r1
 8009408:	3344      	adds	r3, #68	@ 0x44
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	1c59      	adds	r1, r3, #1
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	4613      	mov	r3, r2
 8009412:	011b      	lsls	r3, r3, #4
 8009414:	1a9b      	subs	r3, r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4403      	add	r3, r0
 800941a:	3344      	adds	r3, #68	@ 0x44
 800941c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800941e:	78fa      	ldrb	r2, [r7, #3]
 8009420:	6879      	ldr	r1, [r7, #4]
 8009422:	4613      	mov	r3, r2
 8009424:	011b      	lsls	r3, r3, #4
 8009426:	1a9b      	subs	r3, r3, r2
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	440b      	add	r3, r1
 800942c:	3344      	adds	r3, #68	@ 0x44
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b02      	cmp	r3, #2
 8009432:	d943      	bls.n	80094bc <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8009434:	78fa      	ldrb	r2, [r7, #3]
 8009436:	6879      	ldr	r1, [r7, #4]
 8009438:	4613      	mov	r3, r2
 800943a:	011b      	lsls	r3, r3, #4
 800943c:	1a9b      	subs	r3, r3, r2
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	440b      	add	r3, r1
 8009442:	3344      	adds	r3, #68	@ 0x44
 8009444:	2200      	movs	r2, #0
 8009446:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8009448:	78fa      	ldrb	r2, [r7, #3]
 800944a:	6879      	ldr	r1, [r7, #4]
 800944c:	4613      	mov	r3, r2
 800944e:	011b      	lsls	r3, r3, #4
 8009450:	1a9b      	subs	r3, r3, r2
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	440b      	add	r3, r1
 8009456:	331a      	adds	r3, #26
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	2b01      	cmp	r3, #1
 800945c:	d123      	bne.n	80094a6 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800945e:	78fa      	ldrb	r2, [r7, #3]
 8009460:	6879      	ldr	r1, [r7, #4]
 8009462:	4613      	mov	r3, r2
 8009464:	011b      	lsls	r3, r3, #4
 8009466:	1a9b      	subs	r3, r3, r2
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	440b      	add	r3, r1
 800946c:	331b      	adds	r3, #27
 800946e:	2200      	movs	r2, #0
 8009470:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8009472:	78fa      	ldrb	r2, [r7, #3]
 8009474:	6879      	ldr	r1, [r7, #4]
 8009476:	4613      	mov	r3, r2
 8009478:	011b      	lsls	r3, r3, #4
 800947a:	1a9b      	subs	r3, r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	440b      	add	r3, r1
 8009480:	331c      	adds	r3, #28
 8009482:	2200      	movs	r2, #0
 8009484:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8009486:	78fb      	ldrb	r3, [r7, #3]
 8009488:	015a      	lsls	r2, r3, #5
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	4413      	add	r3, r2
 800948e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	78fa      	ldrb	r2, [r7, #3]
 8009496:	0151      	lsls	r1, r2, #5
 8009498:	693a      	ldr	r2, [r7, #16]
 800949a:	440a      	add	r2, r1
 800949c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80094a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80094a4:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80094a6:	78fa      	ldrb	r2, [r7, #3]
 80094a8:	6879      	ldr	r1, [r7, #4]
 80094aa:	4613      	mov	r3, r2
 80094ac:	011b      	lsls	r3, r3, #4
 80094ae:	1a9b      	subs	r3, r3, r2
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	440b      	add	r3, r1
 80094b4:	334c      	adds	r3, #76	@ 0x4c
 80094b6:	2204      	movs	r2, #4
 80094b8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80094ba:	e229      	b.n	8009910 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80094bc:	78fa      	ldrb	r2, [r7, #3]
 80094be:	6879      	ldr	r1, [r7, #4]
 80094c0:	4613      	mov	r3, r2
 80094c2:	011b      	lsls	r3, r3, #4
 80094c4:	1a9b      	subs	r3, r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	440b      	add	r3, r1
 80094ca:	334c      	adds	r3, #76	@ 0x4c
 80094cc:	2202      	movs	r2, #2
 80094ce:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80094d0:	78fa      	ldrb	r2, [r7, #3]
 80094d2:	6879      	ldr	r1, [r7, #4]
 80094d4:	4613      	mov	r3, r2
 80094d6:	011b      	lsls	r3, r3, #4
 80094d8:	1a9b      	subs	r3, r3, r2
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	440b      	add	r3, r1
 80094de:	3326      	adds	r3, #38	@ 0x26
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00b      	beq.n	80094fe <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80094e6:	78fa      	ldrb	r2, [r7, #3]
 80094e8:	6879      	ldr	r1, [r7, #4]
 80094ea:	4613      	mov	r3, r2
 80094ec:	011b      	lsls	r3, r3, #4
 80094ee:	1a9b      	subs	r3, r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	440b      	add	r3, r1
 80094f4:	3326      	adds	r3, #38	@ 0x26
 80094f6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80094f8:	2b02      	cmp	r3, #2
 80094fa:	f040 8209 	bne.w	8009910 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80094fe:	78fb      	ldrb	r3, [r7, #3]
 8009500:	015a      	lsls	r2, r3, #5
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	4413      	add	r3, r2
 8009506:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009514:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800951c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800951e:	78fb      	ldrb	r3, [r7, #3]
 8009520:	015a      	lsls	r2, r3, #5
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	4413      	add	r3, r2
 8009526:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800952a:	461a      	mov	r2, r3
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009530:	e1ee      	b.n	8009910 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8009532:	78fa      	ldrb	r2, [r7, #3]
 8009534:	6879      	ldr	r1, [r7, #4]
 8009536:	4613      	mov	r3, r2
 8009538:	011b      	lsls	r3, r3, #4
 800953a:	1a9b      	subs	r3, r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	440b      	add	r3, r1
 8009540:	334d      	adds	r3, #77	@ 0x4d
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	2b05      	cmp	r3, #5
 8009546:	f040 80c8 	bne.w	80096da <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800954a:	78fa      	ldrb	r2, [r7, #3]
 800954c:	6879      	ldr	r1, [r7, #4]
 800954e:	4613      	mov	r3, r2
 8009550:	011b      	lsls	r3, r3, #4
 8009552:	1a9b      	subs	r3, r3, r2
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	440b      	add	r3, r1
 8009558:	334d      	adds	r3, #77	@ 0x4d
 800955a:	2202      	movs	r2, #2
 800955c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800955e:	78fa      	ldrb	r2, [r7, #3]
 8009560:	6879      	ldr	r1, [r7, #4]
 8009562:	4613      	mov	r3, r2
 8009564:	011b      	lsls	r3, r3, #4
 8009566:	1a9b      	subs	r3, r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	440b      	add	r3, r1
 800956c:	331b      	adds	r3, #27
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	2b01      	cmp	r3, #1
 8009572:	f040 81ce 	bne.w	8009912 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8009576:	78fa      	ldrb	r2, [r7, #3]
 8009578:	6879      	ldr	r1, [r7, #4]
 800957a:	4613      	mov	r3, r2
 800957c:	011b      	lsls	r3, r3, #4
 800957e:	1a9b      	subs	r3, r3, r2
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	440b      	add	r3, r1
 8009584:	3326      	adds	r3, #38	@ 0x26
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	2b03      	cmp	r3, #3
 800958a:	d16b      	bne.n	8009664 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800958c:	78fa      	ldrb	r2, [r7, #3]
 800958e:	6879      	ldr	r1, [r7, #4]
 8009590:	4613      	mov	r3, r2
 8009592:	011b      	lsls	r3, r3, #4
 8009594:	1a9b      	subs	r3, r3, r2
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	440b      	add	r3, r1
 800959a:	3348      	adds	r3, #72	@ 0x48
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	1c59      	adds	r1, r3, #1
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	4613      	mov	r3, r2
 80095a4:	011b      	lsls	r3, r3, #4
 80095a6:	1a9b      	subs	r3, r3, r2
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	4403      	add	r3, r0
 80095ac:	3348      	adds	r3, #72	@ 0x48
 80095ae:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80095b0:	78fa      	ldrb	r2, [r7, #3]
 80095b2:	6879      	ldr	r1, [r7, #4]
 80095b4:	4613      	mov	r3, r2
 80095b6:	011b      	lsls	r3, r3, #4
 80095b8:	1a9b      	subs	r3, r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	440b      	add	r3, r1
 80095be:	3348      	adds	r3, #72	@ 0x48
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d943      	bls.n	800964e <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80095c6:	78fa      	ldrb	r2, [r7, #3]
 80095c8:	6879      	ldr	r1, [r7, #4]
 80095ca:	4613      	mov	r3, r2
 80095cc:	011b      	lsls	r3, r3, #4
 80095ce:	1a9b      	subs	r3, r3, r2
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	440b      	add	r3, r1
 80095d4:	3348      	adds	r3, #72	@ 0x48
 80095d6:	2200      	movs	r2, #0
 80095d8:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80095da:	78fa      	ldrb	r2, [r7, #3]
 80095dc:	6879      	ldr	r1, [r7, #4]
 80095de:	4613      	mov	r3, r2
 80095e0:	011b      	lsls	r3, r3, #4
 80095e2:	1a9b      	subs	r3, r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	440b      	add	r3, r1
 80095e8:	331b      	adds	r3, #27
 80095ea:	2200      	movs	r2, #0
 80095ec:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80095ee:	78fa      	ldrb	r2, [r7, #3]
 80095f0:	6879      	ldr	r1, [r7, #4]
 80095f2:	4613      	mov	r3, r2
 80095f4:	011b      	lsls	r3, r3, #4
 80095f6:	1a9b      	subs	r3, r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	440b      	add	r3, r1
 80095fc:	3344      	adds	r3, #68	@ 0x44
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2b02      	cmp	r3, #2
 8009602:	d809      	bhi.n	8009618 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8009604:	78fa      	ldrb	r2, [r7, #3]
 8009606:	6879      	ldr	r1, [r7, #4]
 8009608:	4613      	mov	r3, r2
 800960a:	011b      	lsls	r3, r3, #4
 800960c:	1a9b      	subs	r3, r3, r2
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	440b      	add	r3, r1
 8009612:	331c      	adds	r3, #28
 8009614:	2201      	movs	r2, #1
 8009616:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8009618:	78fb      	ldrb	r3, [r7, #3]
 800961a:	015a      	lsls	r2, r3, #5
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	4413      	add	r3, r2
 8009620:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	78fa      	ldrb	r2, [r7, #3]
 8009628:	0151      	lsls	r1, r2, #5
 800962a:	693a      	ldr	r2, [r7, #16]
 800962c:	440a      	add	r2, r1
 800962e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009632:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009636:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8009638:	78fa      	ldrb	r2, [r7, #3]
 800963a:	6879      	ldr	r1, [r7, #4]
 800963c:	4613      	mov	r3, r2
 800963e:	011b      	lsls	r3, r3, #4
 8009640:	1a9b      	subs	r3, r3, r2
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	440b      	add	r3, r1
 8009646:	334c      	adds	r3, #76	@ 0x4c
 8009648:	2204      	movs	r2, #4
 800964a:	701a      	strb	r2, [r3, #0]
 800964c:	e014      	b.n	8009678 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800964e:	78fa      	ldrb	r2, [r7, #3]
 8009650:	6879      	ldr	r1, [r7, #4]
 8009652:	4613      	mov	r3, r2
 8009654:	011b      	lsls	r3, r3, #4
 8009656:	1a9b      	subs	r3, r3, r2
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	440b      	add	r3, r1
 800965c:	334c      	adds	r3, #76	@ 0x4c
 800965e:	2202      	movs	r2, #2
 8009660:	701a      	strb	r2, [r3, #0]
 8009662:	e009      	b.n	8009678 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009664:	78fa      	ldrb	r2, [r7, #3]
 8009666:	6879      	ldr	r1, [r7, #4]
 8009668:	4613      	mov	r3, r2
 800966a:	011b      	lsls	r3, r3, #4
 800966c:	1a9b      	subs	r3, r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	440b      	add	r3, r1
 8009672:	334c      	adds	r3, #76	@ 0x4c
 8009674:	2202      	movs	r2, #2
 8009676:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009678:	78fa      	ldrb	r2, [r7, #3]
 800967a:	6879      	ldr	r1, [r7, #4]
 800967c:	4613      	mov	r3, r2
 800967e:	011b      	lsls	r3, r3, #4
 8009680:	1a9b      	subs	r3, r3, r2
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	440b      	add	r3, r1
 8009686:	3326      	adds	r3, #38	@ 0x26
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00b      	beq.n	80096a6 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800968e:	78fa      	ldrb	r2, [r7, #3]
 8009690:	6879      	ldr	r1, [r7, #4]
 8009692:	4613      	mov	r3, r2
 8009694:	011b      	lsls	r3, r3, #4
 8009696:	1a9b      	subs	r3, r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	440b      	add	r3, r1
 800969c:	3326      	adds	r3, #38	@ 0x26
 800969e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80096a0:	2b02      	cmp	r3, #2
 80096a2:	f040 8136 	bne.w	8009912 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80096a6:	78fb      	ldrb	r3, [r7, #3]
 80096a8:	015a      	lsls	r2, r3, #5
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	4413      	add	r3, r2
 80096ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80096bc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80096c4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80096c6:	78fb      	ldrb	r3, [r7, #3]
 80096c8:	015a      	lsls	r2, r3, #5
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	4413      	add	r3, r2
 80096ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096d2:	461a      	mov	r2, r3
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6013      	str	r3, [r2, #0]
 80096d8:	e11b      	b.n	8009912 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80096da:	78fa      	ldrb	r2, [r7, #3]
 80096dc:	6879      	ldr	r1, [r7, #4]
 80096de:	4613      	mov	r3, r2
 80096e0:	011b      	lsls	r3, r3, #4
 80096e2:	1a9b      	subs	r3, r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	440b      	add	r3, r1
 80096e8:	334d      	adds	r3, #77	@ 0x4d
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	2b03      	cmp	r3, #3
 80096ee:	f040 8081 	bne.w	80097f4 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80096f2:	78fa      	ldrb	r2, [r7, #3]
 80096f4:	6879      	ldr	r1, [r7, #4]
 80096f6:	4613      	mov	r3, r2
 80096f8:	011b      	lsls	r3, r3, #4
 80096fa:	1a9b      	subs	r3, r3, r2
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	440b      	add	r3, r1
 8009700:	334d      	adds	r3, #77	@ 0x4d
 8009702:	2202      	movs	r2, #2
 8009704:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8009706:	78fa      	ldrb	r2, [r7, #3]
 8009708:	6879      	ldr	r1, [r7, #4]
 800970a:	4613      	mov	r3, r2
 800970c:	011b      	lsls	r3, r3, #4
 800970e:	1a9b      	subs	r3, r3, r2
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	440b      	add	r3, r1
 8009714:	331b      	adds	r3, #27
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	2b01      	cmp	r3, #1
 800971a:	f040 80fa 	bne.w	8009912 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800971e:	78fa      	ldrb	r2, [r7, #3]
 8009720:	6879      	ldr	r1, [r7, #4]
 8009722:	4613      	mov	r3, r2
 8009724:	011b      	lsls	r3, r3, #4
 8009726:	1a9b      	subs	r3, r3, r2
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	440b      	add	r3, r1
 800972c:	334c      	adds	r3, #76	@ 0x4c
 800972e:	2202      	movs	r2, #2
 8009730:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009732:	78fb      	ldrb	r3, [r7, #3]
 8009734:	015a      	lsls	r2, r3, #5
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	4413      	add	r3, r2
 800973a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	78fa      	ldrb	r2, [r7, #3]
 8009742:	0151      	lsls	r1, r2, #5
 8009744:	693a      	ldr	r2, [r7, #16]
 8009746:	440a      	add	r2, r1
 8009748:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800974c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009750:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8009752:	78fb      	ldrb	r3, [r7, #3]
 8009754:	015a      	lsls	r2, r3, #5
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	4413      	add	r3, r2
 800975a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	78fa      	ldrb	r2, [r7, #3]
 8009762:	0151      	lsls	r1, r2, #5
 8009764:	693a      	ldr	r2, [r7, #16]
 8009766:	440a      	add	r2, r1
 8009768:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800976c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009770:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8009772:	78fb      	ldrb	r3, [r7, #3]
 8009774:	015a      	lsls	r2, r3, #5
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	4413      	add	r3, r2
 800977a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	78fa      	ldrb	r2, [r7, #3]
 8009782:	0151      	lsls	r1, r2, #5
 8009784:	693a      	ldr	r2, [r7, #16]
 8009786:	440a      	add	r2, r1
 8009788:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800978c:	f023 0320 	bic.w	r3, r3, #32
 8009790:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009792:	78fa      	ldrb	r2, [r7, #3]
 8009794:	6879      	ldr	r1, [r7, #4]
 8009796:	4613      	mov	r3, r2
 8009798:	011b      	lsls	r3, r3, #4
 800979a:	1a9b      	subs	r3, r3, r2
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	440b      	add	r3, r1
 80097a0:	3326      	adds	r3, #38	@ 0x26
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00b      	beq.n	80097c0 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80097a8:	78fa      	ldrb	r2, [r7, #3]
 80097aa:	6879      	ldr	r1, [r7, #4]
 80097ac:	4613      	mov	r3, r2
 80097ae:	011b      	lsls	r3, r3, #4
 80097b0:	1a9b      	subs	r3, r3, r2
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	440b      	add	r3, r1
 80097b6:	3326      	adds	r3, #38	@ 0x26
 80097b8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80097ba:	2b02      	cmp	r3, #2
 80097bc:	f040 80a9 	bne.w	8009912 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80097c0:	78fb      	ldrb	r3, [r7, #3]
 80097c2:	015a      	lsls	r2, r3, #5
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	4413      	add	r3, r2
 80097c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80097d6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80097de:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80097e0:	78fb      	ldrb	r3, [r7, #3]
 80097e2:	015a      	lsls	r2, r3, #5
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	4413      	add	r3, r2
 80097e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097ec:	461a      	mov	r2, r3
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6013      	str	r3, [r2, #0]
 80097f2:	e08e      	b.n	8009912 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80097f4:	78fa      	ldrb	r2, [r7, #3]
 80097f6:	6879      	ldr	r1, [r7, #4]
 80097f8:	4613      	mov	r3, r2
 80097fa:	011b      	lsls	r3, r3, #4
 80097fc:	1a9b      	subs	r3, r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	440b      	add	r3, r1
 8009802:	334d      	adds	r3, #77	@ 0x4d
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	2b04      	cmp	r3, #4
 8009808:	d143      	bne.n	8009892 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800980a:	78fa      	ldrb	r2, [r7, #3]
 800980c:	6879      	ldr	r1, [r7, #4]
 800980e:	4613      	mov	r3, r2
 8009810:	011b      	lsls	r3, r3, #4
 8009812:	1a9b      	subs	r3, r3, r2
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	440b      	add	r3, r1
 8009818:	334d      	adds	r3, #77	@ 0x4d
 800981a:	2202      	movs	r2, #2
 800981c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800981e:	78fa      	ldrb	r2, [r7, #3]
 8009820:	6879      	ldr	r1, [r7, #4]
 8009822:	4613      	mov	r3, r2
 8009824:	011b      	lsls	r3, r3, #4
 8009826:	1a9b      	subs	r3, r3, r2
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	440b      	add	r3, r1
 800982c:	334c      	adds	r3, #76	@ 0x4c
 800982e:	2202      	movs	r2, #2
 8009830:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009832:	78fa      	ldrb	r2, [r7, #3]
 8009834:	6879      	ldr	r1, [r7, #4]
 8009836:	4613      	mov	r3, r2
 8009838:	011b      	lsls	r3, r3, #4
 800983a:	1a9b      	subs	r3, r3, r2
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	440b      	add	r3, r1
 8009840:	3326      	adds	r3, #38	@ 0x26
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00a      	beq.n	800985e <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8009848:	78fa      	ldrb	r2, [r7, #3]
 800984a:	6879      	ldr	r1, [r7, #4]
 800984c:	4613      	mov	r3, r2
 800984e:	011b      	lsls	r3, r3, #4
 8009850:	1a9b      	subs	r3, r3, r2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	440b      	add	r3, r1
 8009856:	3326      	adds	r3, #38	@ 0x26
 8009858:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800985a:	2b02      	cmp	r3, #2
 800985c:	d159      	bne.n	8009912 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800985e:	78fb      	ldrb	r3, [r7, #3]
 8009860:	015a      	lsls	r2, r3, #5
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	4413      	add	r3, r2
 8009866:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009874:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800987c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800987e:	78fb      	ldrb	r3, [r7, #3]
 8009880:	015a      	lsls	r2, r3, #5
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	4413      	add	r3, r2
 8009886:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800988a:	461a      	mov	r2, r3
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6013      	str	r3, [r2, #0]
 8009890:	e03f      	b.n	8009912 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8009892:	78fa      	ldrb	r2, [r7, #3]
 8009894:	6879      	ldr	r1, [r7, #4]
 8009896:	4613      	mov	r3, r2
 8009898:	011b      	lsls	r3, r3, #4
 800989a:	1a9b      	subs	r3, r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	440b      	add	r3, r1
 80098a0:	334d      	adds	r3, #77	@ 0x4d
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	2b08      	cmp	r3, #8
 80098a6:	d126      	bne.n	80098f6 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80098a8:	78fa      	ldrb	r2, [r7, #3]
 80098aa:	6879      	ldr	r1, [r7, #4]
 80098ac:	4613      	mov	r3, r2
 80098ae:	011b      	lsls	r3, r3, #4
 80098b0:	1a9b      	subs	r3, r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	440b      	add	r3, r1
 80098b6:	334d      	adds	r3, #77	@ 0x4d
 80098b8:	2202      	movs	r2, #2
 80098ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80098bc:	78fa      	ldrb	r2, [r7, #3]
 80098be:	6879      	ldr	r1, [r7, #4]
 80098c0:	4613      	mov	r3, r2
 80098c2:	011b      	lsls	r3, r3, #4
 80098c4:	1a9b      	subs	r3, r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	440b      	add	r3, r1
 80098ca:	3344      	adds	r3, #68	@ 0x44
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	1c59      	adds	r1, r3, #1
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	4613      	mov	r3, r2
 80098d4:	011b      	lsls	r3, r3, #4
 80098d6:	1a9b      	subs	r3, r3, r2
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	4403      	add	r3, r0
 80098dc:	3344      	adds	r3, #68	@ 0x44
 80098de:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80098e0:	78fa      	ldrb	r2, [r7, #3]
 80098e2:	6879      	ldr	r1, [r7, #4]
 80098e4:	4613      	mov	r3, r2
 80098e6:	011b      	lsls	r3, r3, #4
 80098e8:	1a9b      	subs	r3, r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	440b      	add	r3, r1
 80098ee:	334c      	adds	r3, #76	@ 0x4c
 80098f0:	2204      	movs	r2, #4
 80098f2:	701a      	strb	r2, [r3, #0]
 80098f4:	e00d      	b.n	8009912 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80098f6:	78fa      	ldrb	r2, [r7, #3]
 80098f8:	6879      	ldr	r1, [r7, #4]
 80098fa:	4613      	mov	r3, r2
 80098fc:	011b      	lsls	r3, r3, #4
 80098fe:	1a9b      	subs	r3, r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	440b      	add	r3, r1
 8009904:	334d      	adds	r3, #77	@ 0x4d
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	2b02      	cmp	r3, #2
 800990a:	f000 8100 	beq.w	8009b0e <HCD_HC_IN_IRQHandler+0xcca>
 800990e:	e000      	b.n	8009912 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009910:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009912:	78fa      	ldrb	r2, [r7, #3]
 8009914:	6879      	ldr	r1, [r7, #4]
 8009916:	4613      	mov	r3, r2
 8009918:	011b      	lsls	r3, r3, #4
 800991a:	1a9b      	subs	r3, r3, r2
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	440b      	add	r3, r1
 8009920:	334c      	adds	r3, #76	@ 0x4c
 8009922:	781a      	ldrb	r2, [r3, #0]
 8009924:	78fb      	ldrb	r3, [r7, #3]
 8009926:	4619      	mov	r1, r3
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f00e f9c5 	bl	8017cb8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800992e:	e0ef      	b.n	8009b10 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	78fa      	ldrb	r2, [r7, #3]
 8009936:	4611      	mov	r1, r2
 8009938:	4618      	mov	r0, r3
 800993a:	f008 fa94 	bl	8011e66 <USB_ReadChInterrupts>
 800993e:	4603      	mov	r3, r0
 8009940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009944:	2b40      	cmp	r3, #64	@ 0x40
 8009946:	d12f      	bne.n	80099a8 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8009948:	78fb      	ldrb	r3, [r7, #3]
 800994a:	015a      	lsls	r2, r3, #5
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	4413      	add	r3, r2
 8009950:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009954:	461a      	mov	r2, r3
 8009956:	2340      	movs	r3, #64	@ 0x40
 8009958:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800995a:	78fa      	ldrb	r2, [r7, #3]
 800995c:	6879      	ldr	r1, [r7, #4]
 800995e:	4613      	mov	r3, r2
 8009960:	011b      	lsls	r3, r3, #4
 8009962:	1a9b      	subs	r3, r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	440b      	add	r3, r1
 8009968:	334d      	adds	r3, #77	@ 0x4d
 800996a:	2205      	movs	r2, #5
 800996c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800996e:	78fa      	ldrb	r2, [r7, #3]
 8009970:	6879      	ldr	r1, [r7, #4]
 8009972:	4613      	mov	r3, r2
 8009974:	011b      	lsls	r3, r3, #4
 8009976:	1a9b      	subs	r3, r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	440b      	add	r3, r1
 800997c:	331a      	adds	r3, #26
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d109      	bne.n	8009998 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8009984:	78fa      	ldrb	r2, [r7, #3]
 8009986:	6879      	ldr	r1, [r7, #4]
 8009988:	4613      	mov	r3, r2
 800998a:	011b      	lsls	r3, r3, #4
 800998c:	1a9b      	subs	r3, r3, r2
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	440b      	add	r3, r1
 8009992:	3344      	adds	r3, #68	@ 0x44
 8009994:	2200      	movs	r2, #0
 8009996:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	78fa      	ldrb	r2, [r7, #3]
 800999e:	4611      	mov	r1, r2
 80099a0:	4618      	mov	r0, r3
 80099a2:	f008 fadd 	bl	8011f60 <USB_HC_Halt>
 80099a6:	e0b3      	b.n	8009b10 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	78fa      	ldrb	r2, [r7, #3]
 80099ae:	4611      	mov	r1, r2
 80099b0:	4618      	mov	r0, r3
 80099b2:	f008 fa58 	bl	8011e66 <USB_ReadChInterrupts>
 80099b6:	4603      	mov	r3, r0
 80099b8:	f003 0310 	and.w	r3, r3, #16
 80099bc:	2b10      	cmp	r3, #16
 80099be:	f040 80a7 	bne.w	8009b10 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80099c2:	78fa      	ldrb	r2, [r7, #3]
 80099c4:	6879      	ldr	r1, [r7, #4]
 80099c6:	4613      	mov	r3, r2
 80099c8:	011b      	lsls	r3, r3, #4
 80099ca:	1a9b      	subs	r3, r3, r2
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	440b      	add	r3, r1
 80099d0:	3326      	adds	r3, #38	@ 0x26
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	2b03      	cmp	r3, #3
 80099d6:	d11b      	bne.n	8009a10 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80099d8:	78fa      	ldrb	r2, [r7, #3]
 80099da:	6879      	ldr	r1, [r7, #4]
 80099dc:	4613      	mov	r3, r2
 80099de:	011b      	lsls	r3, r3, #4
 80099e0:	1a9b      	subs	r3, r3, r2
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	440b      	add	r3, r1
 80099e6:	3344      	adds	r3, #68	@ 0x44
 80099e8:	2200      	movs	r2, #0
 80099ea:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80099ec:	78fa      	ldrb	r2, [r7, #3]
 80099ee:	6879      	ldr	r1, [r7, #4]
 80099f0:	4613      	mov	r3, r2
 80099f2:	011b      	lsls	r3, r3, #4
 80099f4:	1a9b      	subs	r3, r3, r2
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	440b      	add	r3, r1
 80099fa:	334d      	adds	r3, #77	@ 0x4d
 80099fc:	2204      	movs	r2, #4
 80099fe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	78fa      	ldrb	r2, [r7, #3]
 8009a06:	4611      	mov	r1, r2
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f008 faa9 	bl	8011f60 <USB_HC_Halt>
 8009a0e:	e03f      	b.n	8009a90 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009a10:	78fa      	ldrb	r2, [r7, #3]
 8009a12:	6879      	ldr	r1, [r7, #4]
 8009a14:	4613      	mov	r3, r2
 8009a16:	011b      	lsls	r3, r3, #4
 8009a18:	1a9b      	subs	r3, r3, r2
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	440b      	add	r3, r1
 8009a1e:	3326      	adds	r3, #38	@ 0x26
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00a      	beq.n	8009a3c <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8009a26:	78fa      	ldrb	r2, [r7, #3]
 8009a28:	6879      	ldr	r1, [r7, #4]
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	011b      	lsls	r3, r3, #4
 8009a2e:	1a9b      	subs	r3, r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	440b      	add	r3, r1
 8009a34:	3326      	adds	r3, #38	@ 0x26
 8009a36:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	d129      	bne.n	8009a90 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8009a3c:	78fa      	ldrb	r2, [r7, #3]
 8009a3e:	6879      	ldr	r1, [r7, #4]
 8009a40:	4613      	mov	r3, r2
 8009a42:	011b      	lsls	r3, r3, #4
 8009a44:	1a9b      	subs	r3, r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	440b      	add	r3, r1
 8009a4a:	3344      	adds	r3, #68	@ 0x44
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	799b      	ldrb	r3, [r3, #6]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d00a      	beq.n	8009a6e <HCD_HC_IN_IRQHandler+0xc2a>
 8009a58:	78fa      	ldrb	r2, [r7, #3]
 8009a5a:	6879      	ldr	r1, [r7, #4]
 8009a5c:	4613      	mov	r3, r2
 8009a5e:	011b      	lsls	r3, r3, #4
 8009a60:	1a9b      	subs	r3, r3, r2
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	440b      	add	r3, r1
 8009a66:	331b      	adds	r3, #27
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d110      	bne.n	8009a90 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8009a6e:	78fa      	ldrb	r2, [r7, #3]
 8009a70:	6879      	ldr	r1, [r7, #4]
 8009a72:	4613      	mov	r3, r2
 8009a74:	011b      	lsls	r3, r3, #4
 8009a76:	1a9b      	subs	r3, r3, r2
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	440b      	add	r3, r1
 8009a7c:	334d      	adds	r3, #77	@ 0x4d
 8009a7e:	2204      	movs	r2, #4
 8009a80:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	78fa      	ldrb	r2, [r7, #3]
 8009a88:	4611      	mov	r1, r2
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f008 fa68 	bl	8011f60 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8009a90:	78fa      	ldrb	r2, [r7, #3]
 8009a92:	6879      	ldr	r1, [r7, #4]
 8009a94:	4613      	mov	r3, r2
 8009a96:	011b      	lsls	r3, r3, #4
 8009a98:	1a9b      	subs	r3, r3, r2
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	440b      	add	r3, r1
 8009a9e:	331b      	adds	r3, #27
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d129      	bne.n	8009afa <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8009aa6:	78fa      	ldrb	r2, [r7, #3]
 8009aa8:	6879      	ldr	r1, [r7, #4]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	011b      	lsls	r3, r3, #4
 8009aae:	1a9b      	subs	r3, r3, r2
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	440b      	add	r3, r1
 8009ab4:	331b      	adds	r3, #27
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8009aba:	78fb      	ldrb	r3, [r7, #3]
 8009abc:	015a      	lsls	r2, r3, #5
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	4413      	add	r3, r2
 8009ac2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	78fa      	ldrb	r2, [r7, #3]
 8009aca:	0151      	lsls	r1, r2, #5
 8009acc:	693a      	ldr	r2, [r7, #16]
 8009ace:	440a      	add	r2, r1
 8009ad0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009ad4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ad8:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8009ada:	78fb      	ldrb	r3, [r7, #3]
 8009adc:	015a      	lsls	r2, r3, #5
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	78fa      	ldrb	r2, [r7, #3]
 8009aea:	0151      	lsls	r1, r2, #5
 8009aec:	693a      	ldr	r2, [r7, #16]
 8009aee:	440a      	add	r2, r1
 8009af0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009af4:	f043 0320 	orr.w	r3, r3, #32
 8009af8:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8009afa:	78fb      	ldrb	r3, [r7, #3]
 8009afc:	015a      	lsls	r2, r3, #5
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	4413      	add	r3, r2
 8009b02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b06:	461a      	mov	r2, r3
 8009b08:	2310      	movs	r3, #16
 8009b0a:	6093      	str	r3, [r2, #8]
 8009b0c:	e000      	b.n	8009b10 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8009b0e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8009b10:	3718      	adds	r7, #24
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b086      	sub	sp, #24
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
 8009b1e:	460b      	mov	r3, r1
 8009b20:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	78fa      	ldrb	r2, [r7, #3]
 8009b32:	4611      	mov	r1, r2
 8009b34:	4618      	mov	r0, r3
 8009b36:	f008 f996 	bl	8011e66 <USB_ReadChInterrupts>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	f003 0304 	and.w	r3, r3, #4
 8009b40:	2b04      	cmp	r3, #4
 8009b42:	d11b      	bne.n	8009b7c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8009b44:	78fb      	ldrb	r3, [r7, #3]
 8009b46:	015a      	lsls	r2, r3, #5
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b50:	461a      	mov	r2, r3
 8009b52:	2304      	movs	r3, #4
 8009b54:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8009b56:	78fa      	ldrb	r2, [r7, #3]
 8009b58:	6879      	ldr	r1, [r7, #4]
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	011b      	lsls	r3, r3, #4
 8009b5e:	1a9b      	subs	r3, r3, r2
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	440b      	add	r3, r1
 8009b64:	334d      	adds	r3, #77	@ 0x4d
 8009b66:	2207      	movs	r2, #7
 8009b68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	78fa      	ldrb	r2, [r7, #3]
 8009b70:	4611      	mov	r1, r2
 8009b72:	4618      	mov	r0, r3
 8009b74:	f008 f9f4 	bl	8011f60 <USB_HC_Halt>
 8009b78:	f000 bc89 	b.w	800a48e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	78fa      	ldrb	r2, [r7, #3]
 8009b82:	4611      	mov	r1, r2
 8009b84:	4618      	mov	r0, r3
 8009b86:	f008 f96e 	bl	8011e66 <USB_ReadChInterrupts>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	f003 0320 	and.w	r3, r3, #32
 8009b90:	2b20      	cmp	r3, #32
 8009b92:	f040 8082 	bne.w	8009c9a <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8009b96:	78fb      	ldrb	r3, [r7, #3]
 8009b98:	015a      	lsls	r2, r3, #5
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	2320      	movs	r3, #32
 8009ba6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8009ba8:	78fa      	ldrb	r2, [r7, #3]
 8009baa:	6879      	ldr	r1, [r7, #4]
 8009bac:	4613      	mov	r3, r2
 8009bae:	011b      	lsls	r3, r3, #4
 8009bb0:	1a9b      	subs	r3, r3, r2
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	440b      	add	r3, r1
 8009bb6:	3319      	adds	r3, #25
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d124      	bne.n	8009c08 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8009bbe:	78fa      	ldrb	r2, [r7, #3]
 8009bc0:	6879      	ldr	r1, [r7, #4]
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	011b      	lsls	r3, r3, #4
 8009bc6:	1a9b      	subs	r3, r3, r2
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	440b      	add	r3, r1
 8009bcc:	3319      	adds	r3, #25
 8009bce:	2200      	movs	r2, #0
 8009bd0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009bd2:	78fa      	ldrb	r2, [r7, #3]
 8009bd4:	6879      	ldr	r1, [r7, #4]
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	011b      	lsls	r3, r3, #4
 8009bda:	1a9b      	subs	r3, r3, r2
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	440b      	add	r3, r1
 8009be0:	334c      	adds	r3, #76	@ 0x4c
 8009be2:	2202      	movs	r2, #2
 8009be4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8009be6:	78fa      	ldrb	r2, [r7, #3]
 8009be8:	6879      	ldr	r1, [r7, #4]
 8009bea:	4613      	mov	r3, r2
 8009bec:	011b      	lsls	r3, r3, #4
 8009bee:	1a9b      	subs	r3, r3, r2
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	440b      	add	r3, r1
 8009bf4:	334d      	adds	r3, #77	@ 0x4d
 8009bf6:	2203      	movs	r2, #3
 8009bf8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	78fa      	ldrb	r2, [r7, #3]
 8009c00:	4611      	mov	r1, r2
 8009c02:	4618      	mov	r0, r3
 8009c04:	f008 f9ac 	bl	8011f60 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8009c08:	78fa      	ldrb	r2, [r7, #3]
 8009c0a:	6879      	ldr	r1, [r7, #4]
 8009c0c:	4613      	mov	r3, r2
 8009c0e:	011b      	lsls	r3, r3, #4
 8009c10:	1a9b      	subs	r3, r3, r2
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	440b      	add	r3, r1
 8009c16:	331a      	adds	r3, #26
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	f040 8437 	bne.w	800a48e <HCD_HC_OUT_IRQHandler+0x978>
 8009c20:	78fa      	ldrb	r2, [r7, #3]
 8009c22:	6879      	ldr	r1, [r7, #4]
 8009c24:	4613      	mov	r3, r2
 8009c26:	011b      	lsls	r3, r3, #4
 8009c28:	1a9b      	subs	r3, r3, r2
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	440b      	add	r3, r1
 8009c2e:	331b      	adds	r3, #27
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	f040 842b 	bne.w	800a48e <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8009c38:	78fa      	ldrb	r2, [r7, #3]
 8009c3a:	6879      	ldr	r1, [r7, #4]
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	011b      	lsls	r3, r3, #4
 8009c40:	1a9b      	subs	r3, r3, r2
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	440b      	add	r3, r1
 8009c46:	3326      	adds	r3, #38	@ 0x26
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d009      	beq.n	8009c62 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8009c4e:	78fa      	ldrb	r2, [r7, #3]
 8009c50:	6879      	ldr	r1, [r7, #4]
 8009c52:	4613      	mov	r3, r2
 8009c54:	011b      	lsls	r3, r3, #4
 8009c56:	1a9b      	subs	r3, r3, r2
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	440b      	add	r3, r1
 8009c5c:	331b      	adds	r3, #27
 8009c5e:	2201      	movs	r2, #1
 8009c60:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8009c62:	78fa      	ldrb	r2, [r7, #3]
 8009c64:	6879      	ldr	r1, [r7, #4]
 8009c66:	4613      	mov	r3, r2
 8009c68:	011b      	lsls	r3, r3, #4
 8009c6a:	1a9b      	subs	r3, r3, r2
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	440b      	add	r3, r1
 8009c70:	334d      	adds	r3, #77	@ 0x4d
 8009c72:	2203      	movs	r2, #3
 8009c74:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	78fa      	ldrb	r2, [r7, #3]
 8009c7c:	4611      	mov	r1, r2
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f008 f96e 	bl	8011f60 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8009c84:	78fa      	ldrb	r2, [r7, #3]
 8009c86:	6879      	ldr	r1, [r7, #4]
 8009c88:	4613      	mov	r3, r2
 8009c8a:	011b      	lsls	r3, r3, #4
 8009c8c:	1a9b      	subs	r3, r3, r2
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	440b      	add	r3, r1
 8009c92:	3344      	adds	r3, #68	@ 0x44
 8009c94:	2200      	movs	r2, #0
 8009c96:	601a      	str	r2, [r3, #0]
 8009c98:	e3f9      	b.n	800a48e <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	78fa      	ldrb	r2, [r7, #3]
 8009ca0:	4611      	mov	r1, r2
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f008 f8df 	bl	8011e66 <USB_ReadChInterrupts>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009cae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cb2:	d111      	bne.n	8009cd8 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8009cb4:	78fb      	ldrb	r3, [r7, #3]
 8009cb6:	015a      	lsls	r2, r3, #5
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	4413      	add	r3, r2
 8009cbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009cc6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	78fa      	ldrb	r2, [r7, #3]
 8009cce:	4611      	mov	r1, r2
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f008 f945 	bl	8011f60 <USB_HC_Halt>
 8009cd6:	e3da      	b.n	800a48e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	78fa      	ldrb	r2, [r7, #3]
 8009cde:	4611      	mov	r1, r2
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f008 f8c0 	bl	8011e66 <USB_ReadChInterrupts>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	f003 0301 	and.w	r3, r3, #1
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d168      	bne.n	8009dc2 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8009cf0:	78fa      	ldrb	r2, [r7, #3]
 8009cf2:	6879      	ldr	r1, [r7, #4]
 8009cf4:	4613      	mov	r3, r2
 8009cf6:	011b      	lsls	r3, r3, #4
 8009cf8:	1a9b      	subs	r3, r3, r2
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	440b      	add	r3, r1
 8009cfe:	3344      	adds	r3, #68	@ 0x44
 8009d00:	2200      	movs	r2, #0
 8009d02:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	78fa      	ldrb	r2, [r7, #3]
 8009d0a:	4611      	mov	r1, r2
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f008 f8aa 	bl	8011e66 <USB_ReadChInterrupts>
 8009d12:	4603      	mov	r3, r0
 8009d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d18:	2b40      	cmp	r3, #64	@ 0x40
 8009d1a:	d112      	bne.n	8009d42 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8009d1c:	78fa      	ldrb	r2, [r7, #3]
 8009d1e:	6879      	ldr	r1, [r7, #4]
 8009d20:	4613      	mov	r3, r2
 8009d22:	011b      	lsls	r3, r3, #4
 8009d24:	1a9b      	subs	r3, r3, r2
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	440b      	add	r3, r1
 8009d2a:	3319      	adds	r3, #25
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8009d30:	78fb      	ldrb	r3, [r7, #3]
 8009d32:	015a      	lsls	r2, r3, #5
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	4413      	add	r3, r2
 8009d38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	2340      	movs	r3, #64	@ 0x40
 8009d40:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8009d42:	78fa      	ldrb	r2, [r7, #3]
 8009d44:	6879      	ldr	r1, [r7, #4]
 8009d46:	4613      	mov	r3, r2
 8009d48:	011b      	lsls	r3, r3, #4
 8009d4a:	1a9b      	subs	r3, r3, r2
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	440b      	add	r3, r1
 8009d50:	331b      	adds	r3, #27
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d019      	beq.n	8009d8c <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8009d58:	78fa      	ldrb	r2, [r7, #3]
 8009d5a:	6879      	ldr	r1, [r7, #4]
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	011b      	lsls	r3, r3, #4
 8009d60:	1a9b      	subs	r3, r3, r2
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	440b      	add	r3, r1
 8009d66:	331b      	adds	r3, #27
 8009d68:	2200      	movs	r2, #0
 8009d6a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8009d6c:	78fb      	ldrb	r3, [r7, #3]
 8009d6e:	015a      	lsls	r2, r3, #5
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	4413      	add	r3, r2
 8009d74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	78fa      	ldrb	r2, [r7, #3]
 8009d7c:	0151      	lsls	r1, r2, #5
 8009d7e:	693a      	ldr	r2, [r7, #16]
 8009d80:	440a      	add	r2, r1
 8009d82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009d86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d8a:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8009d8c:	78fb      	ldrb	r3, [r7, #3]
 8009d8e:	015a      	lsls	r2, r3, #5
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	4413      	add	r3, r2
 8009d94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d98:	461a      	mov	r2, r3
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8009d9e:	78fa      	ldrb	r2, [r7, #3]
 8009da0:	6879      	ldr	r1, [r7, #4]
 8009da2:	4613      	mov	r3, r2
 8009da4:	011b      	lsls	r3, r3, #4
 8009da6:	1a9b      	subs	r3, r3, r2
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	440b      	add	r3, r1
 8009dac:	334d      	adds	r3, #77	@ 0x4d
 8009dae:	2201      	movs	r2, #1
 8009db0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	78fa      	ldrb	r2, [r7, #3]
 8009db8:	4611      	mov	r1, r2
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f008 f8d0 	bl	8011f60 <USB_HC_Halt>
 8009dc0:	e365      	b.n	800a48e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	78fa      	ldrb	r2, [r7, #3]
 8009dc8:	4611      	mov	r1, r2
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f008 f84b 	bl	8011e66 <USB_ReadChInterrupts>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dd6:	2b40      	cmp	r3, #64	@ 0x40
 8009dd8:	d139      	bne.n	8009e4e <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8009dda:	78fa      	ldrb	r2, [r7, #3]
 8009ddc:	6879      	ldr	r1, [r7, #4]
 8009dde:	4613      	mov	r3, r2
 8009de0:	011b      	lsls	r3, r3, #4
 8009de2:	1a9b      	subs	r3, r3, r2
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	440b      	add	r3, r1
 8009de8:	334d      	adds	r3, #77	@ 0x4d
 8009dea:	2205      	movs	r2, #5
 8009dec:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8009dee:	78fa      	ldrb	r2, [r7, #3]
 8009df0:	6879      	ldr	r1, [r7, #4]
 8009df2:	4613      	mov	r3, r2
 8009df4:	011b      	lsls	r3, r3, #4
 8009df6:	1a9b      	subs	r3, r3, r2
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	440b      	add	r3, r1
 8009dfc:	331a      	adds	r3, #26
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d109      	bne.n	8009e18 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8009e04:	78fa      	ldrb	r2, [r7, #3]
 8009e06:	6879      	ldr	r1, [r7, #4]
 8009e08:	4613      	mov	r3, r2
 8009e0a:	011b      	lsls	r3, r3, #4
 8009e0c:	1a9b      	subs	r3, r3, r2
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	440b      	add	r3, r1
 8009e12:	3319      	adds	r3, #25
 8009e14:	2201      	movs	r2, #1
 8009e16:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8009e18:	78fa      	ldrb	r2, [r7, #3]
 8009e1a:	6879      	ldr	r1, [r7, #4]
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	011b      	lsls	r3, r3, #4
 8009e20:	1a9b      	subs	r3, r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	440b      	add	r3, r1
 8009e26:	3344      	adds	r3, #68	@ 0x44
 8009e28:	2200      	movs	r2, #0
 8009e2a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	78fa      	ldrb	r2, [r7, #3]
 8009e32:	4611      	mov	r1, r2
 8009e34:	4618      	mov	r0, r3
 8009e36:	f008 f893 	bl	8011f60 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8009e3a:	78fb      	ldrb	r3, [r7, #3]
 8009e3c:	015a      	lsls	r2, r3, #5
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	4413      	add	r3, r2
 8009e42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e46:	461a      	mov	r2, r3
 8009e48:	2340      	movs	r3, #64	@ 0x40
 8009e4a:	6093      	str	r3, [r2, #8]
 8009e4c:	e31f      	b.n	800a48e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	78fa      	ldrb	r2, [r7, #3]
 8009e54:	4611      	mov	r1, r2
 8009e56:	4618      	mov	r0, r3
 8009e58:	f008 f805 	bl	8011e66 <USB_ReadChInterrupts>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	f003 0308 	and.w	r3, r3, #8
 8009e62:	2b08      	cmp	r3, #8
 8009e64:	d11a      	bne.n	8009e9c <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8009e66:	78fb      	ldrb	r3, [r7, #3]
 8009e68:	015a      	lsls	r2, r3, #5
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e72:	461a      	mov	r2, r3
 8009e74:	2308      	movs	r3, #8
 8009e76:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8009e78:	78fa      	ldrb	r2, [r7, #3]
 8009e7a:	6879      	ldr	r1, [r7, #4]
 8009e7c:	4613      	mov	r3, r2
 8009e7e:	011b      	lsls	r3, r3, #4
 8009e80:	1a9b      	subs	r3, r3, r2
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	440b      	add	r3, r1
 8009e86:	334d      	adds	r3, #77	@ 0x4d
 8009e88:	2206      	movs	r2, #6
 8009e8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	78fa      	ldrb	r2, [r7, #3]
 8009e92:	4611      	mov	r1, r2
 8009e94:	4618      	mov	r0, r3
 8009e96:	f008 f863 	bl	8011f60 <USB_HC_Halt>
 8009e9a:	e2f8      	b.n	800a48e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	78fa      	ldrb	r2, [r7, #3]
 8009ea2:	4611      	mov	r1, r2
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f007 ffde 	bl	8011e66 <USB_ReadChInterrupts>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	f003 0310 	and.w	r3, r3, #16
 8009eb0:	2b10      	cmp	r3, #16
 8009eb2:	d144      	bne.n	8009f3e <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8009eb4:	78fa      	ldrb	r2, [r7, #3]
 8009eb6:	6879      	ldr	r1, [r7, #4]
 8009eb8:	4613      	mov	r3, r2
 8009eba:	011b      	lsls	r3, r3, #4
 8009ebc:	1a9b      	subs	r3, r3, r2
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	440b      	add	r3, r1
 8009ec2:	3344      	adds	r3, #68	@ 0x44
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8009ec8:	78fa      	ldrb	r2, [r7, #3]
 8009eca:	6879      	ldr	r1, [r7, #4]
 8009ecc:	4613      	mov	r3, r2
 8009ece:	011b      	lsls	r3, r3, #4
 8009ed0:	1a9b      	subs	r3, r3, r2
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	440b      	add	r3, r1
 8009ed6:	334d      	adds	r3, #77	@ 0x4d
 8009ed8:	2204      	movs	r2, #4
 8009eda:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8009edc:	78fa      	ldrb	r2, [r7, #3]
 8009ede:	6879      	ldr	r1, [r7, #4]
 8009ee0:	4613      	mov	r3, r2
 8009ee2:	011b      	lsls	r3, r3, #4
 8009ee4:	1a9b      	subs	r3, r3, r2
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	440b      	add	r3, r1
 8009eea:	3319      	adds	r3, #25
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d114      	bne.n	8009f1c <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8009ef2:	78fa      	ldrb	r2, [r7, #3]
 8009ef4:	6879      	ldr	r1, [r7, #4]
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	011b      	lsls	r3, r3, #4
 8009efa:	1a9b      	subs	r3, r3, r2
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	440b      	add	r3, r1
 8009f00:	3318      	adds	r3, #24
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d109      	bne.n	8009f1c <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8009f08:	78fa      	ldrb	r2, [r7, #3]
 8009f0a:	6879      	ldr	r1, [r7, #4]
 8009f0c:	4613      	mov	r3, r2
 8009f0e:	011b      	lsls	r3, r3, #4
 8009f10:	1a9b      	subs	r3, r3, r2
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	440b      	add	r3, r1
 8009f16:	3319      	adds	r3, #25
 8009f18:	2201      	movs	r2, #1
 8009f1a:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	78fa      	ldrb	r2, [r7, #3]
 8009f22:	4611      	mov	r1, r2
 8009f24:	4618      	mov	r0, r3
 8009f26:	f008 f81b 	bl	8011f60 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8009f2a:	78fb      	ldrb	r3, [r7, #3]
 8009f2c:	015a      	lsls	r2, r3, #5
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	4413      	add	r3, r2
 8009f32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f36:	461a      	mov	r2, r3
 8009f38:	2310      	movs	r3, #16
 8009f3a:	6093      	str	r3, [r2, #8]
 8009f3c:	e2a7      	b.n	800a48e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	78fa      	ldrb	r2, [r7, #3]
 8009f44:	4611      	mov	r1, r2
 8009f46:	4618      	mov	r0, r3
 8009f48:	f007 ff8d 	bl	8011e66 <USB_ReadChInterrupts>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f52:	2b80      	cmp	r3, #128	@ 0x80
 8009f54:	f040 8083 	bne.w	800a05e <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	799b      	ldrb	r3, [r3, #6]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d111      	bne.n	8009f84 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8009f60:	78fa      	ldrb	r2, [r7, #3]
 8009f62:	6879      	ldr	r1, [r7, #4]
 8009f64:	4613      	mov	r3, r2
 8009f66:	011b      	lsls	r3, r3, #4
 8009f68:	1a9b      	subs	r3, r3, r2
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	440b      	add	r3, r1
 8009f6e:	334d      	adds	r3, #77	@ 0x4d
 8009f70:	2207      	movs	r2, #7
 8009f72:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	78fa      	ldrb	r2, [r7, #3]
 8009f7a:	4611      	mov	r1, r2
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f007 ffef 	bl	8011f60 <USB_HC_Halt>
 8009f82:	e062      	b.n	800a04a <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8009f84:	78fa      	ldrb	r2, [r7, #3]
 8009f86:	6879      	ldr	r1, [r7, #4]
 8009f88:	4613      	mov	r3, r2
 8009f8a:	011b      	lsls	r3, r3, #4
 8009f8c:	1a9b      	subs	r3, r3, r2
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	440b      	add	r3, r1
 8009f92:	3344      	adds	r3, #68	@ 0x44
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	1c59      	adds	r1, r3, #1
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	011b      	lsls	r3, r3, #4
 8009f9e:	1a9b      	subs	r3, r3, r2
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	4403      	add	r3, r0
 8009fa4:	3344      	adds	r3, #68	@ 0x44
 8009fa6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009fa8:	78fa      	ldrb	r2, [r7, #3]
 8009faa:	6879      	ldr	r1, [r7, #4]
 8009fac:	4613      	mov	r3, r2
 8009fae:	011b      	lsls	r3, r3, #4
 8009fb0:	1a9b      	subs	r3, r3, r2
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	440b      	add	r3, r1
 8009fb6:	3344      	adds	r3, #68	@ 0x44
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d922      	bls.n	800a004 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8009fbe:	78fa      	ldrb	r2, [r7, #3]
 8009fc0:	6879      	ldr	r1, [r7, #4]
 8009fc2:	4613      	mov	r3, r2
 8009fc4:	011b      	lsls	r3, r3, #4
 8009fc6:	1a9b      	subs	r3, r3, r2
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	440b      	add	r3, r1
 8009fcc:	3344      	adds	r3, #68	@ 0x44
 8009fce:	2200      	movs	r2, #0
 8009fd0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8009fd2:	78fa      	ldrb	r2, [r7, #3]
 8009fd4:	6879      	ldr	r1, [r7, #4]
 8009fd6:	4613      	mov	r3, r2
 8009fd8:	011b      	lsls	r3, r3, #4
 8009fda:	1a9b      	subs	r3, r3, r2
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	440b      	add	r3, r1
 8009fe0:	334c      	adds	r3, #76	@ 0x4c
 8009fe2:	2204      	movs	r2, #4
 8009fe4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009fe6:	78fa      	ldrb	r2, [r7, #3]
 8009fe8:	6879      	ldr	r1, [r7, #4]
 8009fea:	4613      	mov	r3, r2
 8009fec:	011b      	lsls	r3, r3, #4
 8009fee:	1a9b      	subs	r3, r3, r2
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	440b      	add	r3, r1
 8009ff4:	334c      	adds	r3, #76	@ 0x4c
 8009ff6:	781a      	ldrb	r2, [r3, #0]
 8009ff8:	78fb      	ldrb	r3, [r7, #3]
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f00d fe5b 	bl	8017cb8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a002:	e022      	b.n	800a04a <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a004:	78fa      	ldrb	r2, [r7, #3]
 800a006:	6879      	ldr	r1, [r7, #4]
 800a008:	4613      	mov	r3, r2
 800a00a:	011b      	lsls	r3, r3, #4
 800a00c:	1a9b      	subs	r3, r3, r2
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	440b      	add	r3, r1
 800a012:	334c      	adds	r3, #76	@ 0x4c
 800a014:	2202      	movs	r2, #2
 800a016:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800a018:	78fb      	ldrb	r3, [r7, #3]
 800a01a:	015a      	lsls	r2, r3, #5
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	4413      	add	r3, r2
 800a020:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a02e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a036:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800a038:	78fb      	ldrb	r3, [r7, #3]
 800a03a:	015a      	lsls	r2, r3, #5
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	4413      	add	r3, r2
 800a040:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a044:	461a      	mov	r2, r3
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800a04a:	78fb      	ldrb	r3, [r7, #3]
 800a04c:	015a      	lsls	r2, r3, #5
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	4413      	add	r3, r2
 800a052:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a056:	461a      	mov	r2, r3
 800a058:	2380      	movs	r3, #128	@ 0x80
 800a05a:	6093      	str	r3, [r2, #8]
 800a05c:	e217      	b.n	800a48e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	78fa      	ldrb	r2, [r7, #3]
 800a064:	4611      	mov	r1, r2
 800a066:	4618      	mov	r0, r3
 800a068:	f007 fefd 	bl	8011e66 <USB_ReadChInterrupts>
 800a06c:	4603      	mov	r3, r0
 800a06e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a072:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a076:	d11b      	bne.n	800a0b0 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800a078:	78fa      	ldrb	r2, [r7, #3]
 800a07a:	6879      	ldr	r1, [r7, #4]
 800a07c:	4613      	mov	r3, r2
 800a07e:	011b      	lsls	r3, r3, #4
 800a080:	1a9b      	subs	r3, r3, r2
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	440b      	add	r3, r1
 800a086:	334d      	adds	r3, #77	@ 0x4d
 800a088:	2209      	movs	r2, #9
 800a08a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	78fa      	ldrb	r2, [r7, #3]
 800a092:	4611      	mov	r1, r2
 800a094:	4618      	mov	r0, r3
 800a096:	f007 ff63 	bl	8011f60 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800a09a:	78fb      	ldrb	r3, [r7, #3]
 800a09c:	015a      	lsls	r2, r3, #5
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0ac:	6093      	str	r3, [r2, #8]
 800a0ae:	e1ee      	b.n	800a48e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	78fa      	ldrb	r2, [r7, #3]
 800a0b6:	4611      	mov	r1, r2
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f007 fed4 	bl	8011e66 <USB_ReadChInterrupts>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	f003 0302 	and.w	r3, r3, #2
 800a0c4:	2b02      	cmp	r3, #2
 800a0c6:	f040 81df 	bne.w	800a488 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800a0ca:	78fb      	ldrb	r3, [r7, #3]
 800a0cc:	015a      	lsls	r2, r3, #5
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	4413      	add	r3, r2
 800a0d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	2302      	movs	r3, #2
 800a0da:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800a0dc:	78fa      	ldrb	r2, [r7, #3]
 800a0de:	6879      	ldr	r1, [r7, #4]
 800a0e0:	4613      	mov	r3, r2
 800a0e2:	011b      	lsls	r3, r3, #4
 800a0e4:	1a9b      	subs	r3, r3, r2
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	440b      	add	r3, r1
 800a0ea:	334d      	adds	r3, #77	@ 0x4d
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	f040 8093 	bne.w	800a21a <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a0f4:	78fa      	ldrb	r2, [r7, #3]
 800a0f6:	6879      	ldr	r1, [r7, #4]
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	011b      	lsls	r3, r3, #4
 800a0fc:	1a9b      	subs	r3, r3, r2
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	440b      	add	r3, r1
 800a102:	334d      	adds	r3, #77	@ 0x4d
 800a104:	2202      	movs	r2, #2
 800a106:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800a108:	78fa      	ldrb	r2, [r7, #3]
 800a10a:	6879      	ldr	r1, [r7, #4]
 800a10c:	4613      	mov	r3, r2
 800a10e:	011b      	lsls	r3, r3, #4
 800a110:	1a9b      	subs	r3, r3, r2
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	440b      	add	r3, r1
 800a116:	334c      	adds	r3, #76	@ 0x4c
 800a118:	2201      	movs	r2, #1
 800a11a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800a11c:	78fa      	ldrb	r2, [r7, #3]
 800a11e:	6879      	ldr	r1, [r7, #4]
 800a120:	4613      	mov	r3, r2
 800a122:	011b      	lsls	r3, r3, #4
 800a124:	1a9b      	subs	r3, r3, r2
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	440b      	add	r3, r1
 800a12a:	3326      	adds	r3, #38	@ 0x26
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	2b02      	cmp	r3, #2
 800a130:	d00b      	beq.n	800a14a <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800a132:	78fa      	ldrb	r2, [r7, #3]
 800a134:	6879      	ldr	r1, [r7, #4]
 800a136:	4613      	mov	r3, r2
 800a138:	011b      	lsls	r3, r3, #4
 800a13a:	1a9b      	subs	r3, r3, r2
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	440b      	add	r3, r1
 800a140:	3326      	adds	r3, #38	@ 0x26
 800a142:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800a144:	2b03      	cmp	r3, #3
 800a146:	f040 8190 	bne.w	800a46a <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	799b      	ldrb	r3, [r3, #6]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d115      	bne.n	800a17e <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800a152:	78fa      	ldrb	r2, [r7, #3]
 800a154:	6879      	ldr	r1, [r7, #4]
 800a156:	4613      	mov	r3, r2
 800a158:	011b      	lsls	r3, r3, #4
 800a15a:	1a9b      	subs	r3, r3, r2
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	440b      	add	r3, r1
 800a160:	333d      	adds	r3, #61	@ 0x3d
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	78fa      	ldrb	r2, [r7, #3]
 800a166:	f083 0301 	eor.w	r3, r3, #1
 800a16a:	b2d8      	uxtb	r0, r3
 800a16c:	6879      	ldr	r1, [r7, #4]
 800a16e:	4613      	mov	r3, r2
 800a170:	011b      	lsls	r3, r3, #4
 800a172:	1a9b      	subs	r3, r3, r2
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	440b      	add	r3, r1
 800a178:	333d      	adds	r3, #61	@ 0x3d
 800a17a:	4602      	mov	r2, r0
 800a17c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	799b      	ldrb	r3, [r3, #6]
 800a182:	2b01      	cmp	r3, #1
 800a184:	f040 8171 	bne.w	800a46a <HCD_HC_OUT_IRQHandler+0x954>
 800a188:	78fa      	ldrb	r2, [r7, #3]
 800a18a:	6879      	ldr	r1, [r7, #4]
 800a18c:	4613      	mov	r3, r2
 800a18e:	011b      	lsls	r3, r3, #4
 800a190:	1a9b      	subs	r3, r3, r2
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	440b      	add	r3, r1
 800a196:	3334      	adds	r3, #52	@ 0x34
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f000 8165 	beq.w	800a46a <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800a1a0:	78fa      	ldrb	r2, [r7, #3]
 800a1a2:	6879      	ldr	r1, [r7, #4]
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	011b      	lsls	r3, r3, #4
 800a1a8:	1a9b      	subs	r3, r3, r2
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	440b      	add	r3, r1
 800a1ae:	3334      	adds	r3, #52	@ 0x34
 800a1b0:	6819      	ldr	r1, [r3, #0]
 800a1b2:	78fa      	ldrb	r2, [r7, #3]
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	011b      	lsls	r3, r3, #4
 800a1ba:	1a9b      	subs	r3, r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4403      	add	r3, r0
 800a1c0:	3328      	adds	r3, #40	@ 0x28
 800a1c2:	881b      	ldrh	r3, [r3, #0]
 800a1c4:	440b      	add	r3, r1
 800a1c6:	1e59      	subs	r1, r3, #1
 800a1c8:	78fa      	ldrb	r2, [r7, #3]
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	011b      	lsls	r3, r3, #4
 800a1d0:	1a9b      	subs	r3, r3, r2
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	4403      	add	r3, r0
 800a1d6:	3328      	adds	r3, #40	@ 0x28
 800a1d8:	881b      	ldrh	r3, [r3, #0]
 800a1da:	fbb1 f3f3 	udiv	r3, r1, r3
 800a1de:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	f003 0301 	and.w	r3, r3, #1
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	f000 813f 	beq.w	800a46a <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800a1ec:	78fa      	ldrb	r2, [r7, #3]
 800a1ee:	6879      	ldr	r1, [r7, #4]
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	011b      	lsls	r3, r3, #4
 800a1f4:	1a9b      	subs	r3, r3, r2
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	440b      	add	r3, r1
 800a1fa:	333d      	adds	r3, #61	@ 0x3d
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	78fa      	ldrb	r2, [r7, #3]
 800a200:	f083 0301 	eor.w	r3, r3, #1
 800a204:	b2d8      	uxtb	r0, r3
 800a206:	6879      	ldr	r1, [r7, #4]
 800a208:	4613      	mov	r3, r2
 800a20a:	011b      	lsls	r3, r3, #4
 800a20c:	1a9b      	subs	r3, r3, r2
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	440b      	add	r3, r1
 800a212:	333d      	adds	r3, #61	@ 0x3d
 800a214:	4602      	mov	r2, r0
 800a216:	701a      	strb	r2, [r3, #0]
 800a218:	e127      	b.n	800a46a <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800a21a:	78fa      	ldrb	r2, [r7, #3]
 800a21c:	6879      	ldr	r1, [r7, #4]
 800a21e:	4613      	mov	r3, r2
 800a220:	011b      	lsls	r3, r3, #4
 800a222:	1a9b      	subs	r3, r3, r2
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	440b      	add	r3, r1
 800a228:	334d      	adds	r3, #77	@ 0x4d
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	2b03      	cmp	r3, #3
 800a22e:	d120      	bne.n	800a272 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a230:	78fa      	ldrb	r2, [r7, #3]
 800a232:	6879      	ldr	r1, [r7, #4]
 800a234:	4613      	mov	r3, r2
 800a236:	011b      	lsls	r3, r3, #4
 800a238:	1a9b      	subs	r3, r3, r2
 800a23a:	009b      	lsls	r3, r3, #2
 800a23c:	440b      	add	r3, r1
 800a23e:	334d      	adds	r3, #77	@ 0x4d
 800a240:	2202      	movs	r2, #2
 800a242:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800a244:	78fa      	ldrb	r2, [r7, #3]
 800a246:	6879      	ldr	r1, [r7, #4]
 800a248:	4613      	mov	r3, r2
 800a24a:	011b      	lsls	r3, r3, #4
 800a24c:	1a9b      	subs	r3, r3, r2
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	440b      	add	r3, r1
 800a252:	331b      	adds	r3, #27
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	2b01      	cmp	r3, #1
 800a258:	f040 8107 	bne.w	800a46a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a25c:	78fa      	ldrb	r2, [r7, #3]
 800a25e:	6879      	ldr	r1, [r7, #4]
 800a260:	4613      	mov	r3, r2
 800a262:	011b      	lsls	r3, r3, #4
 800a264:	1a9b      	subs	r3, r3, r2
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	440b      	add	r3, r1
 800a26a:	334c      	adds	r3, #76	@ 0x4c
 800a26c:	2202      	movs	r2, #2
 800a26e:	701a      	strb	r2, [r3, #0]
 800a270:	e0fb      	b.n	800a46a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800a272:	78fa      	ldrb	r2, [r7, #3]
 800a274:	6879      	ldr	r1, [r7, #4]
 800a276:	4613      	mov	r3, r2
 800a278:	011b      	lsls	r3, r3, #4
 800a27a:	1a9b      	subs	r3, r3, r2
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	440b      	add	r3, r1
 800a280:	334d      	adds	r3, #77	@ 0x4d
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	2b04      	cmp	r3, #4
 800a286:	d13a      	bne.n	800a2fe <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a288:	78fa      	ldrb	r2, [r7, #3]
 800a28a:	6879      	ldr	r1, [r7, #4]
 800a28c:	4613      	mov	r3, r2
 800a28e:	011b      	lsls	r3, r3, #4
 800a290:	1a9b      	subs	r3, r3, r2
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	440b      	add	r3, r1
 800a296:	334d      	adds	r3, #77	@ 0x4d
 800a298:	2202      	movs	r2, #2
 800a29a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a29c:	78fa      	ldrb	r2, [r7, #3]
 800a29e:	6879      	ldr	r1, [r7, #4]
 800a2a0:	4613      	mov	r3, r2
 800a2a2:	011b      	lsls	r3, r3, #4
 800a2a4:	1a9b      	subs	r3, r3, r2
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	440b      	add	r3, r1
 800a2aa:	334c      	adds	r3, #76	@ 0x4c
 800a2ac:	2202      	movs	r2, #2
 800a2ae:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800a2b0:	78fa      	ldrb	r2, [r7, #3]
 800a2b2:	6879      	ldr	r1, [r7, #4]
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	011b      	lsls	r3, r3, #4
 800a2b8:	1a9b      	subs	r3, r3, r2
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	440b      	add	r3, r1
 800a2be:	331b      	adds	r3, #27
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	f040 80d1 	bne.w	800a46a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800a2c8:	78fa      	ldrb	r2, [r7, #3]
 800a2ca:	6879      	ldr	r1, [r7, #4]
 800a2cc:	4613      	mov	r3, r2
 800a2ce:	011b      	lsls	r3, r3, #4
 800a2d0:	1a9b      	subs	r3, r3, r2
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	440b      	add	r3, r1
 800a2d6:	331b      	adds	r3, #27
 800a2d8:	2200      	movs	r2, #0
 800a2da:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800a2dc:	78fb      	ldrb	r3, [r7, #3]
 800a2de:	015a      	lsls	r2, r3, #5
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	78fa      	ldrb	r2, [r7, #3]
 800a2ec:	0151      	lsls	r1, r2, #5
 800a2ee:	693a      	ldr	r2, [r7, #16]
 800a2f0:	440a      	add	r2, r1
 800a2f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a2f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a2fa:	6053      	str	r3, [r2, #4]
 800a2fc:	e0b5      	b.n	800a46a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800a2fe:	78fa      	ldrb	r2, [r7, #3]
 800a300:	6879      	ldr	r1, [r7, #4]
 800a302:	4613      	mov	r3, r2
 800a304:	011b      	lsls	r3, r3, #4
 800a306:	1a9b      	subs	r3, r3, r2
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	440b      	add	r3, r1
 800a30c:	334d      	adds	r3, #77	@ 0x4d
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	2b05      	cmp	r3, #5
 800a312:	d114      	bne.n	800a33e <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a314:	78fa      	ldrb	r2, [r7, #3]
 800a316:	6879      	ldr	r1, [r7, #4]
 800a318:	4613      	mov	r3, r2
 800a31a:	011b      	lsls	r3, r3, #4
 800a31c:	1a9b      	subs	r3, r3, r2
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	440b      	add	r3, r1
 800a322:	334d      	adds	r3, #77	@ 0x4d
 800a324:	2202      	movs	r2, #2
 800a326:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800a328:	78fa      	ldrb	r2, [r7, #3]
 800a32a:	6879      	ldr	r1, [r7, #4]
 800a32c:	4613      	mov	r3, r2
 800a32e:	011b      	lsls	r3, r3, #4
 800a330:	1a9b      	subs	r3, r3, r2
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	440b      	add	r3, r1
 800a336:	334c      	adds	r3, #76	@ 0x4c
 800a338:	2202      	movs	r2, #2
 800a33a:	701a      	strb	r2, [r3, #0]
 800a33c:	e095      	b.n	800a46a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800a33e:	78fa      	ldrb	r2, [r7, #3]
 800a340:	6879      	ldr	r1, [r7, #4]
 800a342:	4613      	mov	r3, r2
 800a344:	011b      	lsls	r3, r3, #4
 800a346:	1a9b      	subs	r3, r3, r2
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	440b      	add	r3, r1
 800a34c:	334d      	adds	r3, #77	@ 0x4d
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	2b06      	cmp	r3, #6
 800a352:	d114      	bne.n	800a37e <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a354:	78fa      	ldrb	r2, [r7, #3]
 800a356:	6879      	ldr	r1, [r7, #4]
 800a358:	4613      	mov	r3, r2
 800a35a:	011b      	lsls	r3, r3, #4
 800a35c:	1a9b      	subs	r3, r3, r2
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	440b      	add	r3, r1
 800a362:	334d      	adds	r3, #77	@ 0x4d
 800a364:	2202      	movs	r2, #2
 800a366:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800a368:	78fa      	ldrb	r2, [r7, #3]
 800a36a:	6879      	ldr	r1, [r7, #4]
 800a36c:	4613      	mov	r3, r2
 800a36e:	011b      	lsls	r3, r3, #4
 800a370:	1a9b      	subs	r3, r3, r2
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	440b      	add	r3, r1
 800a376:	334c      	adds	r3, #76	@ 0x4c
 800a378:	2205      	movs	r2, #5
 800a37a:	701a      	strb	r2, [r3, #0]
 800a37c:	e075      	b.n	800a46a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800a37e:	78fa      	ldrb	r2, [r7, #3]
 800a380:	6879      	ldr	r1, [r7, #4]
 800a382:	4613      	mov	r3, r2
 800a384:	011b      	lsls	r3, r3, #4
 800a386:	1a9b      	subs	r3, r3, r2
 800a388:	009b      	lsls	r3, r3, #2
 800a38a:	440b      	add	r3, r1
 800a38c:	334d      	adds	r3, #77	@ 0x4d
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	2b07      	cmp	r3, #7
 800a392:	d00a      	beq.n	800a3aa <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800a394:	78fa      	ldrb	r2, [r7, #3]
 800a396:	6879      	ldr	r1, [r7, #4]
 800a398:	4613      	mov	r3, r2
 800a39a:	011b      	lsls	r3, r3, #4
 800a39c:	1a9b      	subs	r3, r3, r2
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	440b      	add	r3, r1
 800a3a2:	334d      	adds	r3, #77	@ 0x4d
 800a3a4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800a3a6:	2b09      	cmp	r3, #9
 800a3a8:	d170      	bne.n	800a48c <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a3aa:	78fa      	ldrb	r2, [r7, #3]
 800a3ac:	6879      	ldr	r1, [r7, #4]
 800a3ae:	4613      	mov	r3, r2
 800a3b0:	011b      	lsls	r3, r3, #4
 800a3b2:	1a9b      	subs	r3, r3, r2
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	440b      	add	r3, r1
 800a3b8:	334d      	adds	r3, #77	@ 0x4d
 800a3ba:	2202      	movs	r2, #2
 800a3bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800a3be:	78fa      	ldrb	r2, [r7, #3]
 800a3c0:	6879      	ldr	r1, [r7, #4]
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	011b      	lsls	r3, r3, #4
 800a3c6:	1a9b      	subs	r3, r3, r2
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	440b      	add	r3, r1
 800a3cc:	3344      	adds	r3, #68	@ 0x44
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	1c59      	adds	r1, r3, #1
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	011b      	lsls	r3, r3, #4
 800a3d8:	1a9b      	subs	r3, r3, r2
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	4403      	add	r3, r0
 800a3de:	3344      	adds	r3, #68	@ 0x44
 800a3e0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a3e2:	78fa      	ldrb	r2, [r7, #3]
 800a3e4:	6879      	ldr	r1, [r7, #4]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	011b      	lsls	r3, r3, #4
 800a3ea:	1a9b      	subs	r3, r3, r2
 800a3ec:	009b      	lsls	r3, r3, #2
 800a3ee:	440b      	add	r3, r1
 800a3f0:	3344      	adds	r3, #68	@ 0x44
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	d914      	bls.n	800a422 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800a3f8:	78fa      	ldrb	r2, [r7, #3]
 800a3fa:	6879      	ldr	r1, [r7, #4]
 800a3fc:	4613      	mov	r3, r2
 800a3fe:	011b      	lsls	r3, r3, #4
 800a400:	1a9b      	subs	r3, r3, r2
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	440b      	add	r3, r1
 800a406:	3344      	adds	r3, #68	@ 0x44
 800a408:	2200      	movs	r2, #0
 800a40a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800a40c:	78fa      	ldrb	r2, [r7, #3]
 800a40e:	6879      	ldr	r1, [r7, #4]
 800a410:	4613      	mov	r3, r2
 800a412:	011b      	lsls	r3, r3, #4
 800a414:	1a9b      	subs	r3, r3, r2
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	440b      	add	r3, r1
 800a41a:	334c      	adds	r3, #76	@ 0x4c
 800a41c:	2204      	movs	r2, #4
 800a41e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a420:	e022      	b.n	800a468 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a422:	78fa      	ldrb	r2, [r7, #3]
 800a424:	6879      	ldr	r1, [r7, #4]
 800a426:	4613      	mov	r3, r2
 800a428:	011b      	lsls	r3, r3, #4
 800a42a:	1a9b      	subs	r3, r3, r2
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	440b      	add	r3, r1
 800a430:	334c      	adds	r3, #76	@ 0x4c
 800a432:	2202      	movs	r2, #2
 800a434:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800a436:	78fb      	ldrb	r3, [r7, #3]
 800a438:	015a      	lsls	r2, r3, #5
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	4413      	add	r3, r2
 800a43e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a44c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a454:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800a456:	78fb      	ldrb	r3, [r7, #3]
 800a458:	015a      	lsls	r2, r3, #5
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	4413      	add	r3, r2
 800a45e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a462:	461a      	mov	r2, r3
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a468:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800a46a:	78fa      	ldrb	r2, [r7, #3]
 800a46c:	6879      	ldr	r1, [r7, #4]
 800a46e:	4613      	mov	r3, r2
 800a470:	011b      	lsls	r3, r3, #4
 800a472:	1a9b      	subs	r3, r3, r2
 800a474:	009b      	lsls	r3, r3, #2
 800a476:	440b      	add	r3, r1
 800a478:	334c      	adds	r3, #76	@ 0x4c
 800a47a:	781a      	ldrb	r2, [r3, #0]
 800a47c:	78fb      	ldrb	r3, [r7, #3]
 800a47e:	4619      	mov	r1, r3
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f00d fc19 	bl	8017cb8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a486:	e002      	b.n	800a48e <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800a488:	bf00      	nop
 800a48a:	e000      	b.n	800a48e <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800a48c:	bf00      	nop
  }
}
 800a48e:	3718      	adds	r7, #24
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b08a      	sub	sp, #40	@ 0x28
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	6a1b      	ldr	r3, [r3, #32]
 800a4ac:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800a4ae:	69fb      	ldr	r3, [r7, #28]
 800a4b0:	f003 030f 	and.w	r3, r3, #15
 800a4b4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800a4b6:	69fb      	ldr	r3, [r7, #28]
 800a4b8:	0c5b      	lsrs	r3, r3, #17
 800a4ba:	f003 030f 	and.w	r3, r3, #15
 800a4be:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	091b      	lsrs	r3, r3, #4
 800a4c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a4c8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	2b02      	cmp	r3, #2
 800a4ce:	d004      	beq.n	800a4da <HCD_RXQLVL_IRQHandler+0x46>
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	2b05      	cmp	r3, #5
 800a4d4:	f000 80b6 	beq.w	800a644 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800a4d8:	e0b7      	b.n	800a64a <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f000 80b3 	beq.w	800a648 <HCD_RXQLVL_IRQHandler+0x1b4>
 800a4e2:	6879      	ldr	r1, [r7, #4]
 800a4e4:	69ba      	ldr	r2, [r7, #24]
 800a4e6:	4613      	mov	r3, r2
 800a4e8:	011b      	lsls	r3, r3, #4
 800a4ea:	1a9b      	subs	r3, r3, r2
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	440b      	add	r3, r1
 800a4f0:	332c      	adds	r3, #44	@ 0x2c
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f000 80a7 	beq.w	800a648 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800a4fa:	6879      	ldr	r1, [r7, #4]
 800a4fc:	69ba      	ldr	r2, [r7, #24]
 800a4fe:	4613      	mov	r3, r2
 800a500:	011b      	lsls	r3, r3, #4
 800a502:	1a9b      	subs	r3, r3, r2
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	440b      	add	r3, r1
 800a508:	3338      	adds	r3, #56	@ 0x38
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	18d1      	adds	r1, r2, r3
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	69ba      	ldr	r2, [r7, #24]
 800a514:	4613      	mov	r3, r2
 800a516:	011b      	lsls	r3, r3, #4
 800a518:	1a9b      	subs	r3, r3, r2
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	4403      	add	r3, r0
 800a51e:	3334      	adds	r3, #52	@ 0x34
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4299      	cmp	r1, r3
 800a524:	f200 8083 	bhi.w	800a62e <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6818      	ldr	r0, [r3, #0]
 800a52c:	6879      	ldr	r1, [r7, #4]
 800a52e:	69ba      	ldr	r2, [r7, #24]
 800a530:	4613      	mov	r3, r2
 800a532:	011b      	lsls	r3, r3, #4
 800a534:	1a9b      	subs	r3, r3, r2
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	440b      	add	r3, r1
 800a53a:	332c      	adds	r3, #44	@ 0x2c
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	693a      	ldr	r2, [r7, #16]
 800a540:	b292      	uxth	r2, r2
 800a542:	4619      	mov	r1, r3
 800a544:	f007 fc24 	bl	8011d90 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800a548:	6879      	ldr	r1, [r7, #4]
 800a54a:	69ba      	ldr	r2, [r7, #24]
 800a54c:	4613      	mov	r3, r2
 800a54e:	011b      	lsls	r3, r3, #4
 800a550:	1a9b      	subs	r3, r3, r2
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	440b      	add	r3, r1
 800a556:	332c      	adds	r3, #44	@ 0x2c
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	18d1      	adds	r1, r2, r3
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	69ba      	ldr	r2, [r7, #24]
 800a562:	4613      	mov	r3, r2
 800a564:	011b      	lsls	r3, r3, #4
 800a566:	1a9b      	subs	r3, r3, r2
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	4403      	add	r3, r0
 800a56c:	332c      	adds	r3, #44	@ 0x2c
 800a56e:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800a570:	6879      	ldr	r1, [r7, #4]
 800a572:	69ba      	ldr	r2, [r7, #24]
 800a574:	4613      	mov	r3, r2
 800a576:	011b      	lsls	r3, r3, #4
 800a578:	1a9b      	subs	r3, r3, r2
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	440b      	add	r3, r1
 800a57e:	3338      	adds	r3, #56	@ 0x38
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	18d1      	adds	r1, r2, r3
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	69ba      	ldr	r2, [r7, #24]
 800a58a:	4613      	mov	r3, r2
 800a58c:	011b      	lsls	r3, r3, #4
 800a58e:	1a9b      	subs	r3, r3, r2
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	4403      	add	r3, r0
 800a594:	3338      	adds	r3, #56	@ 0x38
 800a596:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	015a      	lsls	r2, r3, #5
 800a59c:	6a3b      	ldr	r3, [r7, #32]
 800a59e:	4413      	add	r3, r2
 800a5a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a5a4:	691b      	ldr	r3, [r3, #16]
 800a5a6:	0cdb      	lsrs	r3, r3, #19
 800a5a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5ac:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800a5ae:	6879      	ldr	r1, [r7, #4]
 800a5b0:	69ba      	ldr	r2, [r7, #24]
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	011b      	lsls	r3, r3, #4
 800a5b6:	1a9b      	subs	r3, r3, r2
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	440b      	add	r3, r1
 800a5bc:	3328      	adds	r3, #40	@ 0x28
 800a5be:	881b      	ldrh	r3, [r3, #0]
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d13f      	bne.n	800a648 <HCD_RXQLVL_IRQHandler+0x1b4>
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d03c      	beq.n	800a648 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800a5ce:	69bb      	ldr	r3, [r7, #24]
 800a5d0:	015a      	lsls	r2, r3, #5
 800a5d2:	6a3b      	ldr	r3, [r7, #32]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a5e4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a5ec:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	015a      	lsls	r2, r3, #5
 800a5f2:	6a3b      	ldr	r3, [r7, #32]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800a600:	6879      	ldr	r1, [r7, #4]
 800a602:	69ba      	ldr	r2, [r7, #24]
 800a604:	4613      	mov	r3, r2
 800a606:	011b      	lsls	r3, r3, #4
 800a608:	1a9b      	subs	r3, r3, r2
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	440b      	add	r3, r1
 800a60e:	333c      	adds	r3, #60	@ 0x3c
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	f083 0301 	eor.w	r3, r3, #1
 800a616:	b2d8      	uxtb	r0, r3
 800a618:	6879      	ldr	r1, [r7, #4]
 800a61a:	69ba      	ldr	r2, [r7, #24]
 800a61c:	4613      	mov	r3, r2
 800a61e:	011b      	lsls	r3, r3, #4
 800a620:	1a9b      	subs	r3, r3, r2
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	440b      	add	r3, r1
 800a626:	333c      	adds	r3, #60	@ 0x3c
 800a628:	4602      	mov	r2, r0
 800a62a:	701a      	strb	r2, [r3, #0]
      break;
 800a62c:	e00c      	b.n	800a648 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800a62e:	6879      	ldr	r1, [r7, #4]
 800a630:	69ba      	ldr	r2, [r7, #24]
 800a632:	4613      	mov	r3, r2
 800a634:	011b      	lsls	r3, r3, #4
 800a636:	1a9b      	subs	r3, r3, r2
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	440b      	add	r3, r1
 800a63c:	334c      	adds	r3, #76	@ 0x4c
 800a63e:	2204      	movs	r2, #4
 800a640:	701a      	strb	r2, [r3, #0]
      break;
 800a642:	e001      	b.n	800a648 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800a644:	bf00      	nop
 800a646:	e000      	b.n	800a64a <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800a648:	bf00      	nop
  }
}
 800a64a:	bf00      	nop
 800a64c:	3728      	adds	r7, #40	@ 0x28
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}

0800a652 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800a652:	b580      	push	{r7, lr}
 800a654:	b086      	sub	sp, #24
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800a67e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f003 0302 	and.w	r3, r3, #2
 800a686:	2b02      	cmp	r3, #2
 800a688:	d10b      	bne.n	800a6a2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f003 0301 	and.w	r3, r3, #1
 800a690:	2b01      	cmp	r3, #1
 800a692:	d102      	bne.n	800a69a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f00d faf3 	bl	8017c80 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	f043 0302 	orr.w	r3, r3, #2
 800a6a0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f003 0308 	and.w	r3, r3, #8
 800a6a8:	2b08      	cmp	r3, #8
 800a6aa:	d132      	bne.n	800a712 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	f043 0308 	orr.w	r3, r3, #8
 800a6b2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f003 0304 	and.w	r3, r3, #4
 800a6ba:	2b04      	cmp	r3, #4
 800a6bc:	d126      	bne.n	800a70c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	7a5b      	ldrb	r3, [r3, #9]
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	d113      	bne.n	800a6ee <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800a6cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a6d0:	d106      	bne.n	800a6e0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2102      	movs	r1, #2
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f007 fbf3 	bl	8011ec4 <USB_InitFSLSPClkSel>
 800a6de:	e011      	b.n	800a704 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	2101      	movs	r1, #1
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f007 fbec 	bl	8011ec4 <USB_InitFSLSPClkSel>
 800a6ec:	e00a      	b.n	800a704 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	79db      	ldrb	r3, [r3, #7]
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d106      	bne.n	800a704 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800a702:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f00d fae9 	bl	8017cdc <HAL_HCD_PortEnabled_Callback>
 800a70a:	e002      	b.n	800a712 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f00d faf3 	bl	8017cf8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f003 0320 	and.w	r3, r3, #32
 800a718:	2b20      	cmp	r3, #32
 800a71a:	d103      	bne.n	800a724 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	f043 0320 	orr.w	r3, r3, #32
 800a722:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a72a:	461a      	mov	r2, r3
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	6013      	str	r3, [r2, #0]
}
 800a730:	bf00      	nop
 800a732:	3718      	adds	r7, #24
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d101      	bne.n	800a74a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a746:	2301      	movs	r3, #1
 800a748:	e08b      	b.n	800a862 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a750:	b2db      	uxtb	r3, r3
 800a752:	2b00      	cmp	r3, #0
 800a754:	d106      	bne.n	800a764 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f7f9 ff74 	bl	800464c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2224      	movs	r2, #36	@ 0x24
 800a768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f022 0201 	bic.w	r2, r2, #1
 800a77a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	685a      	ldr	r2, [r3, #4]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a788:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	689a      	ldr	r2, [r3, #8]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a798:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	68db      	ldr	r3, [r3, #12]
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d107      	bne.n	800a7b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	689a      	ldr	r2, [r3, #8]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a7ae:	609a      	str	r2, [r3, #8]
 800a7b0:	e006      	b.n	800a7c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	689a      	ldr	r2, [r3, #8]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a7be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	2b02      	cmp	r3, #2
 800a7c6:	d108      	bne.n	800a7da <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	685a      	ldr	r2, [r3, #4]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a7d6:	605a      	str	r2, [r3, #4]
 800a7d8:	e007      	b.n	800a7ea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	685a      	ldr	r2, [r3, #4]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a7e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	6859      	ldr	r1, [r3, #4]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	4b1d      	ldr	r3, [pc, #116]	@ (800a86c <HAL_I2C_Init+0x134>)
 800a7f6:	430b      	orrs	r3, r1
 800a7f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	68da      	ldr	r2, [r3, #12]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a808:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	691a      	ldr	r2, [r3, #16]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	695b      	ldr	r3, [r3, #20]
 800a812:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	699b      	ldr	r3, [r3, #24]
 800a81a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	430a      	orrs	r2, r1
 800a822:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	69d9      	ldr	r1, [r3, #28]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6a1a      	ldr	r2, [r3, #32]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	430a      	orrs	r2, r1
 800a832:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f042 0201 	orr.w	r2, r2, #1
 800a842:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2200      	movs	r2, #0
 800a848:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2220      	movs	r2, #32
 800a84e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2200      	movs	r2, #0
 800a856:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	3708      	adds	r7, #8
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	02008000 	.word	0x02008000

0800a870 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a870:	b480      	push	{r7}
 800a872:	b083      	sub	sp, #12
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a880:	b2db      	uxtb	r3, r3
 800a882:	2b20      	cmp	r3, #32
 800a884:	d138      	bne.n	800a8f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	d101      	bne.n	800a894 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a890:	2302      	movs	r3, #2
 800a892:	e032      	b.n	800a8fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2224      	movs	r2, #36	@ 0x24
 800a8a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f022 0201 	bic.w	r2, r2, #1
 800a8b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a8c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	6819      	ldr	r1, [r3, #0]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	683a      	ldr	r2, [r7, #0]
 800a8d0:	430a      	orrs	r2, r1
 800a8d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f042 0201 	orr.w	r2, r2, #1
 800a8e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2220      	movs	r2, #32
 800a8e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	e000      	b.n	800a8fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a8f8:	2302      	movs	r3, #2
  }
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	370c      	adds	r7, #12
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr

0800a906 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a906:	b480      	push	{r7}
 800a908:	b085      	sub	sp, #20
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
 800a90e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a916:	b2db      	uxtb	r3, r3
 800a918:	2b20      	cmp	r3, #32
 800a91a:	d139      	bne.n	800a990 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a922:	2b01      	cmp	r3, #1
 800a924:	d101      	bne.n	800a92a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a926:	2302      	movs	r3, #2
 800a928:	e033      	b.n	800a992 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2201      	movs	r2, #1
 800a92e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2224      	movs	r2, #36	@ 0x24
 800a936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f022 0201 	bic.w	r2, r2, #1
 800a948:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a958:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	021b      	lsls	r3, r3, #8
 800a95e:	68fa      	ldr	r2, [r7, #12]
 800a960:	4313      	orrs	r3, r2
 800a962:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f042 0201 	orr.w	r2, r2, #1
 800a97a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2220      	movs	r2, #32
 800a980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2200      	movs	r2, #0
 800a988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a98c:	2300      	movs	r3, #0
 800a98e:	e000      	b.n	800a992 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a990:	2302      	movs	r3, #2
  }
}
 800a992:	4618      	mov	r0, r3
 800a994:	3714      	adds	r7, #20
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr

0800a99e <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b084      	sub	sp, #16
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d101      	bne.n	800a9b0 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e08f      	b.n	800aad0 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800a9b6:	b2db      	uxtb	r3, r3
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d106      	bne.n	800a9ca <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f7f9 fee9 	bl	800479c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2202      	movs	r2, #2
 800a9ce:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	699a      	ldr	r2, [r3, #24]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800a9e0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	6999      	ldr	r1, [r3, #24]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	685a      	ldr	r2, [r3, #4]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a9f6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	691b      	ldr	r3, [r3, #16]
 800a9fc:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	430a      	orrs	r2, r1
 800aa04:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	695b      	ldr	r3, [r3, #20]
 800aa0a:	041b      	lsls	r3, r3, #16
 800aa0c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6999      	ldr	r1, [r3, #24]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	430a      	orrs	r2, r1
 800aa1a:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	69db      	ldr	r3, [r3, #28]
 800aa20:	041b      	lsls	r3, r3, #16
 800aa22:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6a19      	ldr	r1, [r3, #32]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	430a      	orrs	r2, r1
 800aa30:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa36:	041b      	lsls	r3, r3, #16
 800aa38:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	430a      	orrs	r2, r1
 800aa46:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa4c:	041b      	lsls	r3, r3, #16
 800aa4e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	68fa      	ldr	r2, [r7, #12]
 800aa5a:	430a      	orrs	r2, r1
 800aa5c:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800aa64:	021b      	lsls	r3, r3, #8
 800aa66:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800aa6e:	041b      	lsls	r3, r3, #16
 800aa70:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800aa80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800aa88:	68ba      	ldr	r2, [r7, #8]
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800aa94:	431a      	orrs	r2, r3
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	430a      	orrs	r2, r1
 800aa9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f042 0206 	orr.w	r2, r2, #6
 800aaac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	699a      	ldr	r2, [r3, #24]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f042 0201 	orr.w	r2, r2, #1
 800aabc:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2200      	movs	r2, #0
 800aac2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2201      	movs	r2, #1
 800aaca:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800aace:	2300      	movs	r3, #0
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3710      	adds	r7, #16
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aae6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aaee:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f003 0304 	and.w	r3, r3, #4
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d023      	beq.n	800ab42 <HAL_LTDC_IRQHandler+0x6a>
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	f003 0304 	and.w	r3, r3, #4
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d01e      	beq.n	800ab42 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f022 0204 	bic.w	r2, r2, #4
 800ab12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	2204      	movs	r2, #4
 800ab1a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ab22:	f043 0201 	orr.w	r2, r3, #1
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2204      	movs	r2, #4
 800ab30:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2200      	movs	r2, #0
 800ab38:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 f86f 	bl	800ac20 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f003 0302 	and.w	r3, r3, #2
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d023      	beq.n	800ab94 <HAL_LTDC_IRQHandler+0xbc>
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	f003 0302 	and.w	r3, r3, #2
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d01e      	beq.n	800ab94 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f022 0202 	bic.w	r2, r2, #2
 800ab64:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	2202      	movs	r2, #2
 800ab6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ab74:	f043 0202 	orr.w	r2, r3, #2
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2204      	movs	r2, #4
 800ab82:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 f846 	bl	800ac20 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f003 0301 	and.w	r3, r3, #1
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d01b      	beq.n	800abd6 <HAL_LTDC_IRQHandler+0xfe>
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	f003 0301 	and.w	r3, r3, #1
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d016      	beq.n	800abd6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f022 0201 	bic.w	r2, r2, #1
 800abb6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2201      	movs	r2, #1
 800abbe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2201      	movs	r2, #1
 800abc4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2200      	movs	r2, #0
 800abcc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 f82f 	bl	800ac34 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f003 0308 	and.w	r3, r3, #8
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d01b      	beq.n	800ac18 <HAL_LTDC_IRQHandler+0x140>
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	f003 0308 	and.w	r3, r3, #8
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d016      	beq.n	800ac18 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f022 0208 	bic.w	r2, r2, #8
 800abf8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2208      	movs	r2, #8
 800ac00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2201      	movs	r2, #1
 800ac06:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 f818 	bl	800ac48 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800ac18:	bf00      	nop
 800ac1a:	3710      	adds	r7, #16
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b083      	sub	sp, #12
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800ac28:	bf00      	nop
 800ac2a:	370c      	adds	r7, #12
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr

0800ac34 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800ac3c:	bf00      	nop
 800ac3e:	370c      	adds	r7, #12
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr

0800ac48 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b083      	sub	sp, #12
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800ac50:	bf00      	nop
 800ac52:	370c      	adds	r7, #12
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800ac5c:	b5b0      	push	{r4, r5, r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	60b9      	str	r1, [r7, #8]
 800ac66:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d101      	bne.n	800ac76 <HAL_LTDC_ConfigLayer+0x1a>
 800ac72:	2302      	movs	r3, #2
 800ac74:	e02c      	b.n	800acd0 <HAL_LTDC_ConfigLayer+0x74>
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2201      	movs	r2, #1
 800ac7a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2202      	movs	r2, #2
 800ac82:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ac86:	68fa      	ldr	r2, [r7, #12]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2134      	movs	r1, #52	@ 0x34
 800ac8c:	fb01 f303 	mul.w	r3, r1, r3
 800ac90:	4413      	add	r3, r2
 800ac92:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	4614      	mov	r4, r2
 800ac9a:	461d      	mov	r5, r3
 800ac9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aca8:	682b      	ldr	r3, [r5, #0]
 800acaa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	68b9      	ldr	r1, [r7, #8]
 800acb0:	68f8      	ldr	r0, [r7, #12]
 800acb2:	f000 f811 	bl	800acd8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	2201      	movs	r2, #1
 800acbc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2201      	movs	r2, #1
 800acc2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2200      	movs	r2, #0
 800acca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800acce:	2300      	movs	r3, #0
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3710      	adds	r7, #16
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bdb0      	pop	{r4, r5, r7, pc}

0800acd8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800acd8:	b480      	push	{r7}
 800acda:	b089      	sub	sp, #36	@ 0x24
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	685a      	ldr	r2, [r3, #4]
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	0c1b      	lsrs	r3, r3, #16
 800acf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800acf4:	4413      	add	r3, r2
 800acf6:	041b      	lsls	r3, r3, #16
 800acf8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	461a      	mov	r2, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	01db      	lsls	r3, r3, #7
 800ad04:	4413      	add	r3, r2
 800ad06:	3384      	adds	r3, #132	@ 0x84
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	6812      	ldr	r2, [r2, #0]
 800ad0e:	4611      	mov	r1, r2
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	01d2      	lsls	r2, r2, #7
 800ad14:	440a      	add	r2, r1
 800ad16:	3284      	adds	r2, #132	@ 0x84
 800ad18:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800ad1c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	0c1b      	lsrs	r3, r3, #16
 800ad2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ad2e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ad30:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4619      	mov	r1, r3
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	01db      	lsls	r3, r3, #7
 800ad3c:	440b      	add	r3, r1
 800ad3e:	3384      	adds	r3, #132	@ 0x84
 800ad40:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ad42:	69fb      	ldr	r3, [r7, #28]
 800ad44:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ad46:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	68da      	ldr	r2, [r3, #12]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	68db      	ldr	r3, [r3, #12]
 800ad52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ad56:	4413      	add	r3, r2
 800ad58:	041b      	lsls	r3, r3, #16
 800ad5a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	461a      	mov	r2, r3
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	01db      	lsls	r3, r3, #7
 800ad66:	4413      	add	r3, r2
 800ad68:	3384      	adds	r3, #132	@ 0x84
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	68fa      	ldr	r2, [r7, #12]
 800ad6e:	6812      	ldr	r2, [r2, #0]
 800ad70:	4611      	mov	r1, r2
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	01d2      	lsls	r2, r2, #7
 800ad76:	440a      	add	r2, r1
 800ad78:	3284      	adds	r2, #132	@ 0x84
 800ad7a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800ad7e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	689a      	ldr	r2, [r3, #8]
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	68db      	ldr	r3, [r3, #12]
 800ad8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ad8e:	4413      	add	r3, r2
 800ad90:	1c5a      	adds	r2, r3, #1
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4619      	mov	r1, r3
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	01db      	lsls	r3, r3, #7
 800ad9c:	440b      	add	r3, r1
 800ad9e:	3384      	adds	r3, #132	@ 0x84
 800ada0:	4619      	mov	r1, r3
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	4313      	orrs	r3, r2
 800ada6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	461a      	mov	r2, r3
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	01db      	lsls	r3, r3, #7
 800adb2:	4413      	add	r3, r2
 800adb4:	3384      	adds	r3, #132	@ 0x84
 800adb6:	691b      	ldr	r3, [r3, #16]
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	6812      	ldr	r2, [r2, #0]
 800adbc:	4611      	mov	r1, r2
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	01d2      	lsls	r2, r2, #7
 800adc2:	440a      	add	r2, r1
 800adc4:	3284      	adds	r2, #132	@ 0x84
 800adc6:	f023 0307 	bic.w	r3, r3, #7
 800adca:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	461a      	mov	r2, r3
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	01db      	lsls	r3, r3, #7
 800add6:	4413      	add	r3, r2
 800add8:	3384      	adds	r3, #132	@ 0x84
 800adda:	461a      	mov	r2, r3
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	691b      	ldr	r3, [r3, #16]
 800ade0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ade8:	021b      	lsls	r3, r3, #8
 800adea:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800adf2:	041b      	lsls	r3, r3, #16
 800adf4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	699b      	ldr	r3, [r3, #24]
 800adfa:	061b      	lsls	r3, r3, #24
 800adfc:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ae04:	461a      	mov	r2, r3
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	431a      	orrs	r2, r3
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	431a      	orrs	r2, r3
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4619      	mov	r1, r3
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	01db      	lsls	r3, r3, #7
 800ae18:	440b      	add	r3, r1
 800ae1a:	3384      	adds	r3, #132	@ 0x84
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	4313      	orrs	r3, r2
 800ae22:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	461a      	mov	r2, r3
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	01db      	lsls	r3, r3, #7
 800ae2e:	4413      	add	r3, r2
 800ae30:	3384      	adds	r3, #132	@ 0x84
 800ae32:	695b      	ldr	r3, [r3, #20]
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	6812      	ldr	r2, [r2, #0]
 800ae38:	4611      	mov	r1, r2
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	01d2      	lsls	r2, r2, #7
 800ae3e:	440a      	add	r2, r1
 800ae40:	3284      	adds	r2, #132	@ 0x84
 800ae42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ae46:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	01db      	lsls	r3, r3, #7
 800ae52:	4413      	add	r3, r2
 800ae54:	3384      	adds	r3, #132	@ 0x84
 800ae56:	461a      	mov	r2, r3
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	695b      	ldr	r3, [r3, #20]
 800ae5c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	461a      	mov	r2, r3
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	01db      	lsls	r3, r3, #7
 800ae68:	4413      	add	r3, r2
 800ae6a:	3384      	adds	r3, #132	@ 0x84
 800ae6c:	69da      	ldr	r2, [r3, #28]
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4619      	mov	r1, r3
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	01db      	lsls	r3, r3, #7
 800ae78:	440b      	add	r3, r1
 800ae7a:	3384      	adds	r3, #132	@ 0x84
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	4b4f      	ldr	r3, [pc, #316]	@ (800afbc <LTDC_SetConfig+0x2e4>)
 800ae80:	4013      	ands	r3, r2
 800ae82:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	69da      	ldr	r2, [r3, #28]
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	6a1b      	ldr	r3, [r3, #32]
 800ae8c:	68f9      	ldr	r1, [r7, #12]
 800ae8e:	6809      	ldr	r1, [r1, #0]
 800ae90:	4608      	mov	r0, r1
 800ae92:	6879      	ldr	r1, [r7, #4]
 800ae94:	01c9      	lsls	r1, r1, #7
 800ae96:	4401      	add	r1, r0
 800ae98:	3184      	adds	r1, #132	@ 0x84
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	461a      	mov	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	01db      	lsls	r3, r3, #7
 800aea8:	4413      	add	r3, r2
 800aeaa:	3384      	adds	r3, #132	@ 0x84
 800aeac:	461a      	mov	r2, r3
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeb2:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	691b      	ldr	r3, [r3, #16]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d102      	bne.n	800aec2 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 800aebc:	2304      	movs	r3, #4
 800aebe:	61fb      	str	r3, [r7, #28]
 800aec0:	e01b      	b.n	800aefa <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	691b      	ldr	r3, [r3, #16]
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d102      	bne.n	800aed0 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 800aeca:	2303      	movs	r3, #3
 800aecc:	61fb      	str	r3, [r7, #28]
 800aece:	e014      	b.n	800aefa <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	691b      	ldr	r3, [r3, #16]
 800aed4:	2b04      	cmp	r3, #4
 800aed6:	d00b      	beq.n	800aef0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800aedc:	2b02      	cmp	r3, #2
 800aede:	d007      	beq.n	800aef0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800aee4:	2b03      	cmp	r3, #3
 800aee6:	d003      	beq.n	800aef0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800aeec:	2b07      	cmp	r3, #7
 800aeee:	d102      	bne.n	800aef6 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 800aef0:	2302      	movs	r3, #2
 800aef2:	61fb      	str	r3, [r7, #28]
 800aef4:	e001      	b.n	800aefa <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 800aef6:	2301      	movs	r3, #1
 800aef8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	461a      	mov	r2, r3
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	01db      	lsls	r3, r3, #7
 800af04:	4413      	add	r3, r2
 800af06:	3384      	adds	r3, #132	@ 0x84
 800af08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af0a:	68fa      	ldr	r2, [r7, #12]
 800af0c:	6812      	ldr	r2, [r2, #0]
 800af0e:	4611      	mov	r1, r2
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	01d2      	lsls	r2, r2, #7
 800af14:	440a      	add	r2, r1
 800af16:	3284      	adds	r2, #132	@ 0x84
 800af18:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800af1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af22:	69fa      	ldr	r2, [r7, #28]
 800af24:	fb02 f303 	mul.w	r3, r2, r3
 800af28:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	6859      	ldr	r1, [r3, #4]
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	1acb      	subs	r3, r1, r3
 800af34:	69f9      	ldr	r1, [r7, #28]
 800af36:	fb01 f303 	mul.w	r3, r1, r3
 800af3a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800af3c:	68f9      	ldr	r1, [r7, #12]
 800af3e:	6809      	ldr	r1, [r1, #0]
 800af40:	4608      	mov	r0, r1
 800af42:	6879      	ldr	r1, [r7, #4]
 800af44:	01c9      	lsls	r1, r1, #7
 800af46:	4401      	add	r1, r0
 800af48:	3184      	adds	r1, #132	@ 0x84
 800af4a:	4313      	orrs	r3, r2
 800af4c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	461a      	mov	r2, r3
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	01db      	lsls	r3, r3, #7
 800af58:	4413      	add	r3, r2
 800af5a:	3384      	adds	r3, #132	@ 0x84
 800af5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4619      	mov	r1, r3
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	01db      	lsls	r3, r3, #7
 800af68:	440b      	add	r3, r1
 800af6a:	3384      	adds	r3, #132	@ 0x84
 800af6c:	4619      	mov	r1, r3
 800af6e:	4b14      	ldr	r3, [pc, #80]	@ (800afc0 <LTDC_SetConfig+0x2e8>)
 800af70:	4013      	ands	r3, r2
 800af72:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	461a      	mov	r2, r3
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	01db      	lsls	r3, r3, #7
 800af7e:	4413      	add	r3, r2
 800af80:	3384      	adds	r3, #132	@ 0x84
 800af82:	461a      	mov	r2, r3
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af88:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	461a      	mov	r2, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	01db      	lsls	r3, r3, #7
 800af94:	4413      	add	r3, r2
 800af96:	3384      	adds	r3, #132	@ 0x84
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	68fa      	ldr	r2, [r7, #12]
 800af9c:	6812      	ldr	r2, [r2, #0]
 800af9e:	4611      	mov	r1, r2
 800afa0:	687a      	ldr	r2, [r7, #4]
 800afa2:	01d2      	lsls	r2, r2, #7
 800afa4:	440a      	add	r2, r1
 800afa6:	3284      	adds	r2, #132	@ 0x84
 800afa8:	f043 0301 	orr.w	r3, r3, #1
 800afac:	6013      	str	r3, [r2, #0]
}
 800afae:	bf00      	nop
 800afb0:	3724      	adds	r7, #36	@ 0x24
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr
 800afba:	bf00      	nop
 800afbc:	fffff8f8 	.word	0xfffff8f8
 800afc0:	fffff800 	.word	0xfffff800

0800afc4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800afc4:	b480      	push	{r7}
 800afc6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800afc8:	4b05      	ldr	r3, [pc, #20]	@ (800afe0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a04      	ldr	r2, [pc, #16]	@ (800afe0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800afce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800afd2:	6013      	str	r3, [r2, #0]
}
 800afd4:	bf00      	nop
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr
 800afde:	bf00      	nop
 800afe0:	40007000 	.word	0x40007000

0800afe4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800afea:	2300      	movs	r3, #0
 800afec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800afee:	4b23      	ldr	r3, [pc, #140]	@ (800b07c <HAL_PWREx_EnableOverDrive+0x98>)
 800aff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aff2:	4a22      	ldr	r2, [pc, #136]	@ (800b07c <HAL_PWREx_EnableOverDrive+0x98>)
 800aff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aff8:	6413      	str	r3, [r2, #64]	@ 0x40
 800affa:	4b20      	ldr	r3, [pc, #128]	@ (800b07c <HAL_PWREx_EnableOverDrive+0x98>)
 800affc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800affe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b002:	603b      	str	r3, [r7, #0]
 800b004:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b006:	4b1e      	ldr	r3, [pc, #120]	@ (800b080 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4a1d      	ldr	r2, [pc, #116]	@ (800b080 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b00c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b010:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b012:	f7fb fd49 	bl	8006aa8 <HAL_GetTick>
 800b016:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b018:	e009      	b.n	800b02e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b01a:	f7fb fd45 	bl	8006aa8 <HAL_GetTick>
 800b01e:	4602      	mov	r2, r0
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	1ad3      	subs	r3, r2, r3
 800b024:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b028:	d901      	bls.n	800b02e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800b02a:	2303      	movs	r3, #3
 800b02c:	e022      	b.n	800b074 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b02e:	4b14      	ldr	r3, [pc, #80]	@ (800b080 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b036:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b03a:	d1ee      	bne.n	800b01a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b03c:	4b10      	ldr	r3, [pc, #64]	@ (800b080 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4a0f      	ldr	r2, [pc, #60]	@ (800b080 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b042:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b046:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b048:	f7fb fd2e 	bl	8006aa8 <HAL_GetTick>
 800b04c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b04e:	e009      	b.n	800b064 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b050:	f7fb fd2a 	bl	8006aa8 <HAL_GetTick>
 800b054:	4602      	mov	r2, r0
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	1ad3      	subs	r3, r2, r3
 800b05a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b05e:	d901      	bls.n	800b064 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800b060:	2303      	movs	r3, #3
 800b062:	e007      	b.n	800b074 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b064:	4b06      	ldr	r3, [pc, #24]	@ (800b080 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b06c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b070:	d1ee      	bne.n	800b050 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800b072:	2300      	movs	r3, #0
}
 800b074:	4618      	mov	r0, r3
 800b076:	3708      	adds	r7, #8
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	40023800 	.word	0x40023800
 800b080:	40007000 	.word	0x40007000

0800b084 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b086      	sub	sp, #24
 800b088:	af02      	add	r7, sp, #8
 800b08a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b08c:	f7fb fd0c 	bl	8006aa8 <HAL_GetTick>
 800b090:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d101      	bne.n	800b09c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800b098:	2301      	movs	r3, #1
 800b09a:	e067      	b.n	800b16c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d10b      	bne.n	800b0c0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f7f9 fc3b 	bl	800492c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800b0b6:	f241 3188 	movw	r1, #5000	@ 0x1388
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 f85e 	bl	800b17c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	689b      	ldr	r3, [r3, #8]
 800b0ce:	3b01      	subs	r3, #1
 800b0d0:	021a      	lsls	r2, r3, #8
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	430a      	orrs	r2, r1
 800b0d8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b0de:	9300      	str	r3, [sp, #0]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	2120      	movs	r1, #32
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 f856 	bl	800b198 <QSPI_WaitFlagStateUntilTimeout>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800b0f0:	7afb      	ldrb	r3, [r7, #11]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d135      	bne.n	800b162 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	4b1d      	ldr	r3, [pc, #116]	@ (800b174 <HAL_QSPI_Init+0xf0>)
 800b0fe:	4013      	ands	r3, r2
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	6852      	ldr	r2, [r2, #4]
 800b104:	0611      	lsls	r1, r2, #24
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	68d2      	ldr	r2, [r2, #12]
 800b10a:	4311      	orrs	r1, r2
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	69d2      	ldr	r2, [r2, #28]
 800b110:	4311      	orrs	r1, r2
 800b112:	687a      	ldr	r2, [r7, #4]
 800b114:	6a12      	ldr	r2, [r2, #32]
 800b116:	4311      	orrs	r1, r2
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	6812      	ldr	r2, [r2, #0]
 800b11c:	430b      	orrs	r3, r1
 800b11e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	685a      	ldr	r2, [r3, #4]
 800b126:	4b14      	ldr	r3, [pc, #80]	@ (800b178 <HAL_QSPI_Init+0xf4>)
 800b128:	4013      	ands	r3, r2
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	6912      	ldr	r2, [r2, #16]
 800b12e:	0411      	lsls	r1, r2, #16
 800b130:	687a      	ldr	r2, [r7, #4]
 800b132:	6952      	ldr	r2, [r2, #20]
 800b134:	4311      	orrs	r1, r2
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	6992      	ldr	r2, [r2, #24]
 800b13a:	4311      	orrs	r1, r2
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	6812      	ldr	r2, [r2, #0]
 800b140:	430b      	orrs	r3, r1
 800b142:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f042 0201 	orr.w	r2, r2, #1
 800b152:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2201      	movs	r2, #1
 800b15e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2200      	movs	r2, #0
 800b166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800b16a:	7afb      	ldrb	r3, [r7, #11]
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3710      	adds	r7, #16
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}
 800b174:	00ffff2f 	.word	0x00ffff2f
 800b178:	ffe0f8fe 	.word	0xffe0f8fe

0800b17c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b083      	sub	sp, #12
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	683a      	ldr	r2, [r7, #0]
 800b18a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800b18c:	bf00      	nop
 800b18e:	370c      	adds	r7, #12
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	603b      	str	r3, [r7, #0]
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b1a8:	e01a      	b.n	800b1e0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1aa:	69bb      	ldr	r3, [r7, #24]
 800b1ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1b0:	d016      	beq.n	800b1e0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1b2:	f7fb fc79 	bl	8006aa8 <HAL_GetTick>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	1ad3      	subs	r3, r2, r3
 800b1bc:	69ba      	ldr	r2, [r7, #24]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d302      	bcc.n	800b1c8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800b1c2:	69bb      	ldr	r3, [r7, #24]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d10b      	bne.n	800b1e0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2204      	movs	r2, #4
 800b1cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1d4:	f043 0201 	orr.w	r2, r3, #1
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	e00e      	b.n	800b1fe <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	689a      	ldr	r2, [r3, #8]
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	4013      	ands	r3, r2
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	bf14      	ite	ne
 800b1ee:	2301      	movne	r3, #1
 800b1f0:	2300      	moveq	r3, #0
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	79fb      	ldrb	r3, [r7, #7]
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d1d6      	bne.n	800b1aa <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b1fc:	2300      	movs	r3, #0
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3710      	adds	r7, #16
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
	...

0800b208 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b086      	sub	sp, #24
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800b210:	2300      	movs	r3, #0
 800b212:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d101      	bne.n	800b21e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800b21a:	2301      	movs	r3, #1
 800b21c:	e291      	b.n	800b742 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f003 0301 	and.w	r3, r3, #1
 800b226:	2b00      	cmp	r3, #0
 800b228:	f000 8087 	beq.w	800b33a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b22c:	4b96      	ldr	r3, [pc, #600]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b22e:	689b      	ldr	r3, [r3, #8]
 800b230:	f003 030c 	and.w	r3, r3, #12
 800b234:	2b04      	cmp	r3, #4
 800b236:	d00c      	beq.n	800b252 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b238:	4b93      	ldr	r3, [pc, #588]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b23a:	689b      	ldr	r3, [r3, #8]
 800b23c:	f003 030c 	and.w	r3, r3, #12
 800b240:	2b08      	cmp	r3, #8
 800b242:	d112      	bne.n	800b26a <HAL_RCC_OscConfig+0x62>
 800b244:	4b90      	ldr	r3, [pc, #576]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b24c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b250:	d10b      	bne.n	800b26a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b252:	4b8d      	ldr	r3, [pc, #564]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d06c      	beq.n	800b338 <HAL_RCC_OscConfig+0x130>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d168      	bne.n	800b338 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b266:	2301      	movs	r3, #1
 800b268:	e26b      	b.n	800b742 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b272:	d106      	bne.n	800b282 <HAL_RCC_OscConfig+0x7a>
 800b274:	4b84      	ldr	r3, [pc, #528]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4a83      	ldr	r2, [pc, #524]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b27a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b27e:	6013      	str	r3, [r2, #0]
 800b280:	e02e      	b.n	800b2e0 <HAL_RCC_OscConfig+0xd8>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d10c      	bne.n	800b2a4 <HAL_RCC_OscConfig+0x9c>
 800b28a:	4b7f      	ldr	r3, [pc, #508]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	4a7e      	ldr	r2, [pc, #504]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b290:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b294:	6013      	str	r3, [r2, #0]
 800b296:	4b7c      	ldr	r3, [pc, #496]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4a7b      	ldr	r2, [pc, #492]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b29c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b2a0:	6013      	str	r3, [r2, #0]
 800b2a2:	e01d      	b.n	800b2e0 <HAL_RCC_OscConfig+0xd8>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b2ac:	d10c      	bne.n	800b2c8 <HAL_RCC_OscConfig+0xc0>
 800b2ae:	4b76      	ldr	r3, [pc, #472]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	4a75      	ldr	r2, [pc, #468]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b2b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b2b8:	6013      	str	r3, [r2, #0]
 800b2ba:	4b73      	ldr	r3, [pc, #460]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	4a72      	ldr	r2, [pc, #456]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b2c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b2c4:	6013      	str	r3, [r2, #0]
 800b2c6:	e00b      	b.n	800b2e0 <HAL_RCC_OscConfig+0xd8>
 800b2c8:	4b6f      	ldr	r3, [pc, #444]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4a6e      	ldr	r2, [pc, #440]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b2ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b2d2:	6013      	str	r3, [r2, #0]
 800b2d4:	4b6c      	ldr	r3, [pc, #432]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	4a6b      	ldr	r2, [pc, #428]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b2da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b2de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d013      	beq.n	800b310 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2e8:	f7fb fbde 	bl	8006aa8 <HAL_GetTick>
 800b2ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b2ee:	e008      	b.n	800b302 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b2f0:	f7fb fbda 	bl	8006aa8 <HAL_GetTick>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	1ad3      	subs	r3, r2, r3
 800b2fa:	2b64      	cmp	r3, #100	@ 0x64
 800b2fc:	d901      	bls.n	800b302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b2fe:	2303      	movs	r3, #3
 800b300:	e21f      	b.n	800b742 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b302:	4b61      	ldr	r3, [pc, #388]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d0f0      	beq.n	800b2f0 <HAL_RCC_OscConfig+0xe8>
 800b30e:	e014      	b.n	800b33a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b310:	f7fb fbca 	bl	8006aa8 <HAL_GetTick>
 800b314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b316:	e008      	b.n	800b32a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b318:	f7fb fbc6 	bl	8006aa8 <HAL_GetTick>
 800b31c:	4602      	mov	r2, r0
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	1ad3      	subs	r3, r2, r3
 800b322:	2b64      	cmp	r3, #100	@ 0x64
 800b324:	d901      	bls.n	800b32a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b326:	2303      	movs	r3, #3
 800b328:	e20b      	b.n	800b742 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b32a:	4b57      	ldr	r3, [pc, #348]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b332:	2b00      	cmp	r3, #0
 800b334:	d1f0      	bne.n	800b318 <HAL_RCC_OscConfig+0x110>
 800b336:	e000      	b.n	800b33a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f003 0302 	and.w	r3, r3, #2
 800b342:	2b00      	cmp	r3, #0
 800b344:	d069      	beq.n	800b41a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b346:	4b50      	ldr	r3, [pc, #320]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b348:	689b      	ldr	r3, [r3, #8]
 800b34a:	f003 030c 	and.w	r3, r3, #12
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d00b      	beq.n	800b36a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b352:	4b4d      	ldr	r3, [pc, #308]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	f003 030c 	and.w	r3, r3, #12
 800b35a:	2b08      	cmp	r3, #8
 800b35c:	d11c      	bne.n	800b398 <HAL_RCC_OscConfig+0x190>
 800b35e:	4b4a      	ldr	r3, [pc, #296]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b366:	2b00      	cmp	r3, #0
 800b368:	d116      	bne.n	800b398 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b36a:	4b47      	ldr	r3, [pc, #284]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f003 0302 	and.w	r3, r3, #2
 800b372:	2b00      	cmp	r3, #0
 800b374:	d005      	beq.n	800b382 <HAL_RCC_OscConfig+0x17a>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	68db      	ldr	r3, [r3, #12]
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d001      	beq.n	800b382 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b37e:	2301      	movs	r3, #1
 800b380:	e1df      	b.n	800b742 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b382:	4b41      	ldr	r3, [pc, #260]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	691b      	ldr	r3, [r3, #16]
 800b38e:	00db      	lsls	r3, r3, #3
 800b390:	493d      	ldr	r1, [pc, #244]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b392:	4313      	orrs	r3, r2
 800b394:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b396:	e040      	b.n	800b41a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	68db      	ldr	r3, [r3, #12]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d023      	beq.n	800b3e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b3a0:	4b39      	ldr	r3, [pc, #228]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4a38      	ldr	r2, [pc, #224]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b3a6:	f043 0301 	orr.w	r3, r3, #1
 800b3aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3ac:	f7fb fb7c 	bl	8006aa8 <HAL_GetTick>
 800b3b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b3b2:	e008      	b.n	800b3c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b3b4:	f7fb fb78 	bl	8006aa8 <HAL_GetTick>
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	1ad3      	subs	r3, r2, r3
 800b3be:	2b02      	cmp	r3, #2
 800b3c0:	d901      	bls.n	800b3c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b3c2:	2303      	movs	r3, #3
 800b3c4:	e1bd      	b.n	800b742 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b3c6:	4b30      	ldr	r3, [pc, #192]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f003 0302 	and.w	r3, r3, #2
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d0f0      	beq.n	800b3b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b3d2:	4b2d      	ldr	r3, [pc, #180]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	691b      	ldr	r3, [r3, #16]
 800b3de:	00db      	lsls	r3, r3, #3
 800b3e0:	4929      	ldr	r1, [pc, #164]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	600b      	str	r3, [r1, #0]
 800b3e6:	e018      	b.n	800b41a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b3e8:	4b27      	ldr	r3, [pc, #156]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4a26      	ldr	r2, [pc, #152]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b3ee:	f023 0301 	bic.w	r3, r3, #1
 800b3f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3f4:	f7fb fb58 	bl	8006aa8 <HAL_GetTick>
 800b3f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b3fa:	e008      	b.n	800b40e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b3fc:	f7fb fb54 	bl	8006aa8 <HAL_GetTick>
 800b400:	4602      	mov	r2, r0
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	1ad3      	subs	r3, r2, r3
 800b406:	2b02      	cmp	r3, #2
 800b408:	d901      	bls.n	800b40e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b40a:	2303      	movs	r3, #3
 800b40c:	e199      	b.n	800b742 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b40e:	4b1e      	ldr	r3, [pc, #120]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f003 0302 	and.w	r3, r3, #2
 800b416:	2b00      	cmp	r3, #0
 800b418:	d1f0      	bne.n	800b3fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f003 0308 	and.w	r3, r3, #8
 800b422:	2b00      	cmp	r3, #0
 800b424:	d038      	beq.n	800b498 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	695b      	ldr	r3, [r3, #20]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d019      	beq.n	800b462 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b42e:	4b16      	ldr	r3, [pc, #88]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b432:	4a15      	ldr	r2, [pc, #84]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b434:	f043 0301 	orr.w	r3, r3, #1
 800b438:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b43a:	f7fb fb35 	bl	8006aa8 <HAL_GetTick>
 800b43e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b440:	e008      	b.n	800b454 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b442:	f7fb fb31 	bl	8006aa8 <HAL_GetTick>
 800b446:	4602      	mov	r2, r0
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	1ad3      	subs	r3, r2, r3
 800b44c:	2b02      	cmp	r3, #2
 800b44e:	d901      	bls.n	800b454 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b450:	2303      	movs	r3, #3
 800b452:	e176      	b.n	800b742 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b454:	4b0c      	ldr	r3, [pc, #48]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b456:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b458:	f003 0302 	and.w	r3, r3, #2
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d0f0      	beq.n	800b442 <HAL_RCC_OscConfig+0x23a>
 800b460:	e01a      	b.n	800b498 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b462:	4b09      	ldr	r3, [pc, #36]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b464:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b466:	4a08      	ldr	r2, [pc, #32]	@ (800b488 <HAL_RCC_OscConfig+0x280>)
 800b468:	f023 0301 	bic.w	r3, r3, #1
 800b46c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b46e:	f7fb fb1b 	bl	8006aa8 <HAL_GetTick>
 800b472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b474:	e00a      	b.n	800b48c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b476:	f7fb fb17 	bl	8006aa8 <HAL_GetTick>
 800b47a:	4602      	mov	r2, r0
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	1ad3      	subs	r3, r2, r3
 800b480:	2b02      	cmp	r3, #2
 800b482:	d903      	bls.n	800b48c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b484:	2303      	movs	r3, #3
 800b486:	e15c      	b.n	800b742 <HAL_RCC_OscConfig+0x53a>
 800b488:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b48c:	4b91      	ldr	r3, [pc, #580]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b48e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b490:	f003 0302 	and.w	r3, r3, #2
 800b494:	2b00      	cmp	r3, #0
 800b496:	d1ee      	bne.n	800b476 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f003 0304 	and.w	r3, r3, #4
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	f000 80a4 	beq.w	800b5ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b4a6:	4b8b      	ldr	r3, [pc, #556]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b4a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d10d      	bne.n	800b4ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800b4b2:	4b88      	ldr	r3, [pc, #544]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b4b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4b6:	4a87      	ldr	r2, [pc, #540]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b4b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b4bc:	6413      	str	r3, [r2, #64]	@ 0x40
 800b4be:	4b85      	ldr	r3, [pc, #532]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b4c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b4c6:	60bb      	str	r3, [r7, #8]
 800b4c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b4ce:	4b82      	ldr	r3, [pc, #520]	@ (800b6d8 <HAL_RCC_OscConfig+0x4d0>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d118      	bne.n	800b50c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800b4da:	4b7f      	ldr	r3, [pc, #508]	@ (800b6d8 <HAL_RCC_OscConfig+0x4d0>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a7e      	ldr	r2, [pc, #504]	@ (800b6d8 <HAL_RCC_OscConfig+0x4d0>)
 800b4e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b4e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b4e6:	f7fb fadf 	bl	8006aa8 <HAL_GetTick>
 800b4ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b4ec:	e008      	b.n	800b500 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b4ee:	f7fb fadb 	bl	8006aa8 <HAL_GetTick>
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	1ad3      	subs	r3, r2, r3
 800b4f8:	2b64      	cmp	r3, #100	@ 0x64
 800b4fa:	d901      	bls.n	800b500 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800b4fc:	2303      	movs	r3, #3
 800b4fe:	e120      	b.n	800b742 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b500:	4b75      	ldr	r3, [pc, #468]	@ (800b6d8 <HAL_RCC_OscConfig+0x4d0>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d0f0      	beq.n	800b4ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	2b01      	cmp	r3, #1
 800b512:	d106      	bne.n	800b522 <HAL_RCC_OscConfig+0x31a>
 800b514:	4b6f      	ldr	r3, [pc, #444]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b518:	4a6e      	ldr	r2, [pc, #440]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b51a:	f043 0301 	orr.w	r3, r3, #1
 800b51e:	6713      	str	r3, [r2, #112]	@ 0x70
 800b520:	e02d      	b.n	800b57e <HAL_RCC_OscConfig+0x376>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d10c      	bne.n	800b544 <HAL_RCC_OscConfig+0x33c>
 800b52a:	4b6a      	ldr	r3, [pc, #424]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b52c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b52e:	4a69      	ldr	r2, [pc, #420]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b530:	f023 0301 	bic.w	r3, r3, #1
 800b534:	6713      	str	r3, [r2, #112]	@ 0x70
 800b536:	4b67      	ldr	r3, [pc, #412]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b53a:	4a66      	ldr	r2, [pc, #408]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b53c:	f023 0304 	bic.w	r3, r3, #4
 800b540:	6713      	str	r3, [r2, #112]	@ 0x70
 800b542:	e01c      	b.n	800b57e <HAL_RCC_OscConfig+0x376>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	2b05      	cmp	r3, #5
 800b54a:	d10c      	bne.n	800b566 <HAL_RCC_OscConfig+0x35e>
 800b54c:	4b61      	ldr	r3, [pc, #388]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b54e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b550:	4a60      	ldr	r2, [pc, #384]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b552:	f043 0304 	orr.w	r3, r3, #4
 800b556:	6713      	str	r3, [r2, #112]	@ 0x70
 800b558:	4b5e      	ldr	r3, [pc, #376]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b55a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b55c:	4a5d      	ldr	r2, [pc, #372]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b55e:	f043 0301 	orr.w	r3, r3, #1
 800b562:	6713      	str	r3, [r2, #112]	@ 0x70
 800b564:	e00b      	b.n	800b57e <HAL_RCC_OscConfig+0x376>
 800b566:	4b5b      	ldr	r3, [pc, #364]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b56a:	4a5a      	ldr	r2, [pc, #360]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b56c:	f023 0301 	bic.w	r3, r3, #1
 800b570:	6713      	str	r3, [r2, #112]	@ 0x70
 800b572:	4b58      	ldr	r3, [pc, #352]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b576:	4a57      	ldr	r2, [pc, #348]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b578:	f023 0304 	bic.w	r3, r3, #4
 800b57c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	689b      	ldr	r3, [r3, #8]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d015      	beq.n	800b5b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b586:	f7fb fa8f 	bl	8006aa8 <HAL_GetTick>
 800b58a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b58c:	e00a      	b.n	800b5a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b58e:	f7fb fa8b 	bl	8006aa8 <HAL_GetTick>
 800b592:	4602      	mov	r2, r0
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	1ad3      	subs	r3, r2, r3
 800b598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d901      	bls.n	800b5a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800b5a0:	2303      	movs	r3, #3
 800b5a2:	e0ce      	b.n	800b742 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b5a4:	4b4b      	ldr	r3, [pc, #300]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b5a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b5a8:	f003 0302 	and.w	r3, r3, #2
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d0ee      	beq.n	800b58e <HAL_RCC_OscConfig+0x386>
 800b5b0:	e014      	b.n	800b5dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5b2:	f7fb fa79 	bl	8006aa8 <HAL_GetTick>
 800b5b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b5b8:	e00a      	b.n	800b5d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b5ba:	f7fb fa75 	bl	8006aa8 <HAL_GetTick>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	1ad3      	subs	r3, r2, r3
 800b5c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d901      	bls.n	800b5d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b5cc:	2303      	movs	r3, #3
 800b5ce:	e0b8      	b.n	800b742 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b5d0:	4b40      	ldr	r3, [pc, #256]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b5d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b5d4:	f003 0302 	and.w	r3, r3, #2
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d1ee      	bne.n	800b5ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b5dc:	7dfb      	ldrb	r3, [r7, #23]
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d105      	bne.n	800b5ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b5e2:	4b3c      	ldr	r3, [pc, #240]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b5e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5e6:	4a3b      	ldr	r2, [pc, #236]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b5e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b5ec:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	699b      	ldr	r3, [r3, #24]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	f000 80a4 	beq.w	800b740 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b5f8:	4b36      	ldr	r3, [pc, #216]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b5fa:	689b      	ldr	r3, [r3, #8]
 800b5fc:	f003 030c 	and.w	r3, r3, #12
 800b600:	2b08      	cmp	r3, #8
 800b602:	d06b      	beq.n	800b6dc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	699b      	ldr	r3, [r3, #24]
 800b608:	2b02      	cmp	r3, #2
 800b60a:	d149      	bne.n	800b6a0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b60c:	4b31      	ldr	r3, [pc, #196]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a30      	ldr	r2, [pc, #192]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b612:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b618:	f7fb fa46 	bl	8006aa8 <HAL_GetTick>
 800b61c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b61e:	e008      	b.n	800b632 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b620:	f7fb fa42 	bl	8006aa8 <HAL_GetTick>
 800b624:	4602      	mov	r2, r0
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	1ad3      	subs	r3, r2, r3
 800b62a:	2b02      	cmp	r3, #2
 800b62c:	d901      	bls.n	800b632 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b62e:	2303      	movs	r3, #3
 800b630:	e087      	b.n	800b742 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b632:	4b28      	ldr	r3, [pc, #160]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d1f0      	bne.n	800b620 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	69da      	ldr	r2, [r3, #28]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6a1b      	ldr	r3, [r3, #32]
 800b646:	431a      	orrs	r2, r3
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b64c:	019b      	lsls	r3, r3, #6
 800b64e:	431a      	orrs	r2, r3
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b654:	085b      	lsrs	r3, r3, #1
 800b656:	3b01      	subs	r3, #1
 800b658:	041b      	lsls	r3, r3, #16
 800b65a:	431a      	orrs	r2, r3
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b660:	061b      	lsls	r3, r3, #24
 800b662:	4313      	orrs	r3, r2
 800b664:	4a1b      	ldr	r2, [pc, #108]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b666:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b66a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b66c:	4b19      	ldr	r3, [pc, #100]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4a18      	ldr	r2, [pc, #96]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b672:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b676:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b678:	f7fb fa16 	bl	8006aa8 <HAL_GetTick>
 800b67c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b67e:	e008      	b.n	800b692 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b680:	f7fb fa12 	bl	8006aa8 <HAL_GetTick>
 800b684:	4602      	mov	r2, r0
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	1ad3      	subs	r3, r2, r3
 800b68a:	2b02      	cmp	r3, #2
 800b68c:	d901      	bls.n	800b692 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800b68e:	2303      	movs	r3, #3
 800b690:	e057      	b.n	800b742 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b692:	4b10      	ldr	r3, [pc, #64]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d0f0      	beq.n	800b680 <HAL_RCC_OscConfig+0x478>
 800b69e:	e04f      	b.n	800b740 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b6a0:	4b0c      	ldr	r3, [pc, #48]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4a0b      	ldr	r2, [pc, #44]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b6a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b6aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6ac:	f7fb f9fc 	bl	8006aa8 <HAL_GetTick>
 800b6b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b6b2:	e008      	b.n	800b6c6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b6b4:	f7fb f9f8 	bl	8006aa8 <HAL_GetTick>
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	1ad3      	subs	r3, r2, r3
 800b6be:	2b02      	cmp	r3, #2
 800b6c0:	d901      	bls.n	800b6c6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800b6c2:	2303      	movs	r3, #3
 800b6c4:	e03d      	b.n	800b742 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b6c6:	4b03      	ldr	r3, [pc, #12]	@ (800b6d4 <HAL_RCC_OscConfig+0x4cc>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d1f0      	bne.n	800b6b4 <HAL_RCC_OscConfig+0x4ac>
 800b6d2:	e035      	b.n	800b740 <HAL_RCC_OscConfig+0x538>
 800b6d4:	40023800 	.word	0x40023800
 800b6d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800b6dc:	4b1b      	ldr	r3, [pc, #108]	@ (800b74c <HAL_RCC_OscConfig+0x544>)
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	699b      	ldr	r3, [r3, #24]
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d028      	beq.n	800b73c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d121      	bne.n	800b73c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b702:	429a      	cmp	r2, r3
 800b704:	d11a      	bne.n	800b73c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b706:	68fa      	ldr	r2, [r7, #12]
 800b708:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b70c:	4013      	ands	r3, r2
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b712:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b714:	4293      	cmp	r3, r2
 800b716:	d111      	bne.n	800b73c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b722:	085b      	lsrs	r3, r3, #1
 800b724:	3b01      	subs	r3, #1
 800b726:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b728:	429a      	cmp	r2, r3
 800b72a:	d107      	bne.n	800b73c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b736:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b738:	429a      	cmp	r2, r3
 800b73a:	d001      	beq.n	800b740 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800b73c:	2301      	movs	r3, #1
 800b73e:	e000      	b.n	800b742 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800b740:	2300      	movs	r3, #0
}
 800b742:	4618      	mov	r0, r3
 800b744:	3718      	adds	r7, #24
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
 800b74a:	bf00      	nop
 800b74c:	40023800 	.word	0x40023800

0800b750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b75a:	2300      	movs	r3, #0
 800b75c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d101      	bne.n	800b768 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b764:	2301      	movs	r3, #1
 800b766:	e0d0      	b.n	800b90a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b768:	4b6a      	ldr	r3, [pc, #424]	@ (800b914 <HAL_RCC_ClockConfig+0x1c4>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f003 030f 	and.w	r3, r3, #15
 800b770:	683a      	ldr	r2, [r7, #0]
 800b772:	429a      	cmp	r2, r3
 800b774:	d910      	bls.n	800b798 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b776:	4b67      	ldr	r3, [pc, #412]	@ (800b914 <HAL_RCC_ClockConfig+0x1c4>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f023 020f 	bic.w	r2, r3, #15
 800b77e:	4965      	ldr	r1, [pc, #404]	@ (800b914 <HAL_RCC_ClockConfig+0x1c4>)
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	4313      	orrs	r3, r2
 800b784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b786:	4b63      	ldr	r3, [pc, #396]	@ (800b914 <HAL_RCC_ClockConfig+0x1c4>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f003 030f 	and.w	r3, r3, #15
 800b78e:	683a      	ldr	r2, [r7, #0]
 800b790:	429a      	cmp	r2, r3
 800b792:	d001      	beq.n	800b798 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b794:	2301      	movs	r3, #1
 800b796:	e0b8      	b.n	800b90a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f003 0302 	and.w	r3, r3, #2
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d020      	beq.n	800b7e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f003 0304 	and.w	r3, r3, #4
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d005      	beq.n	800b7bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b7b0:	4b59      	ldr	r3, [pc, #356]	@ (800b918 <HAL_RCC_ClockConfig+0x1c8>)
 800b7b2:	689b      	ldr	r3, [r3, #8]
 800b7b4:	4a58      	ldr	r2, [pc, #352]	@ (800b918 <HAL_RCC_ClockConfig+0x1c8>)
 800b7b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b7ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f003 0308 	and.w	r3, r3, #8
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d005      	beq.n	800b7d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b7c8:	4b53      	ldr	r3, [pc, #332]	@ (800b918 <HAL_RCC_ClockConfig+0x1c8>)
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	4a52      	ldr	r2, [pc, #328]	@ (800b918 <HAL_RCC_ClockConfig+0x1c8>)
 800b7ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b7d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b7d4:	4b50      	ldr	r3, [pc, #320]	@ (800b918 <HAL_RCC_ClockConfig+0x1c8>)
 800b7d6:	689b      	ldr	r3, [r3, #8]
 800b7d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	689b      	ldr	r3, [r3, #8]
 800b7e0:	494d      	ldr	r1, [pc, #308]	@ (800b918 <HAL_RCC_ClockConfig+0x1c8>)
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f003 0301 	and.w	r3, r3, #1
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d040      	beq.n	800b874 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d107      	bne.n	800b80a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b7fa:	4b47      	ldr	r3, [pc, #284]	@ (800b918 <HAL_RCC_ClockConfig+0x1c8>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b802:	2b00      	cmp	r3, #0
 800b804:	d115      	bne.n	800b832 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b806:	2301      	movs	r3, #1
 800b808:	e07f      	b.n	800b90a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	2b02      	cmp	r3, #2
 800b810:	d107      	bne.n	800b822 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b812:	4b41      	ldr	r3, [pc, #260]	@ (800b918 <HAL_RCC_ClockConfig+0x1c8>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d109      	bne.n	800b832 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b81e:	2301      	movs	r3, #1
 800b820:	e073      	b.n	800b90a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b822:	4b3d      	ldr	r3, [pc, #244]	@ (800b918 <HAL_RCC_ClockConfig+0x1c8>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f003 0302 	and.w	r3, r3, #2
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d101      	bne.n	800b832 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b82e:	2301      	movs	r3, #1
 800b830:	e06b      	b.n	800b90a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b832:	4b39      	ldr	r3, [pc, #228]	@ (800b918 <HAL_RCC_ClockConfig+0x1c8>)
 800b834:	689b      	ldr	r3, [r3, #8]
 800b836:	f023 0203 	bic.w	r2, r3, #3
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	4936      	ldr	r1, [pc, #216]	@ (800b918 <HAL_RCC_ClockConfig+0x1c8>)
 800b840:	4313      	orrs	r3, r2
 800b842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b844:	f7fb f930 	bl	8006aa8 <HAL_GetTick>
 800b848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b84a:	e00a      	b.n	800b862 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b84c:	f7fb f92c 	bl	8006aa8 <HAL_GetTick>
 800b850:	4602      	mov	r2, r0
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	1ad3      	subs	r3, r2, r3
 800b856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d901      	bls.n	800b862 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800b85e:	2303      	movs	r3, #3
 800b860:	e053      	b.n	800b90a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b862:	4b2d      	ldr	r3, [pc, #180]	@ (800b918 <HAL_RCC_ClockConfig+0x1c8>)
 800b864:	689b      	ldr	r3, [r3, #8]
 800b866:	f003 020c 	and.w	r2, r3, #12
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	009b      	lsls	r3, r3, #2
 800b870:	429a      	cmp	r2, r3
 800b872:	d1eb      	bne.n	800b84c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b874:	4b27      	ldr	r3, [pc, #156]	@ (800b914 <HAL_RCC_ClockConfig+0x1c4>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f003 030f 	and.w	r3, r3, #15
 800b87c:	683a      	ldr	r2, [r7, #0]
 800b87e:	429a      	cmp	r2, r3
 800b880:	d210      	bcs.n	800b8a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b882:	4b24      	ldr	r3, [pc, #144]	@ (800b914 <HAL_RCC_ClockConfig+0x1c4>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f023 020f 	bic.w	r2, r3, #15
 800b88a:	4922      	ldr	r1, [pc, #136]	@ (800b914 <HAL_RCC_ClockConfig+0x1c4>)
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	4313      	orrs	r3, r2
 800b890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b892:	4b20      	ldr	r3, [pc, #128]	@ (800b914 <HAL_RCC_ClockConfig+0x1c4>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f003 030f 	and.w	r3, r3, #15
 800b89a:	683a      	ldr	r2, [r7, #0]
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d001      	beq.n	800b8a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	e032      	b.n	800b90a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f003 0304 	and.w	r3, r3, #4
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d008      	beq.n	800b8c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b8b0:	4b19      	ldr	r3, [pc, #100]	@ (800b918 <HAL_RCC_ClockConfig+0x1c8>)
 800b8b2:	689b      	ldr	r3, [r3, #8]
 800b8b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	68db      	ldr	r3, [r3, #12]
 800b8bc:	4916      	ldr	r1, [pc, #88]	@ (800b918 <HAL_RCC_ClockConfig+0x1c8>)
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f003 0308 	and.w	r3, r3, #8
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d009      	beq.n	800b8e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b8ce:	4b12      	ldr	r3, [pc, #72]	@ (800b918 <HAL_RCC_ClockConfig+0x1c8>)
 800b8d0:	689b      	ldr	r3, [r3, #8]
 800b8d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	691b      	ldr	r3, [r3, #16]
 800b8da:	00db      	lsls	r3, r3, #3
 800b8dc:	490e      	ldr	r1, [pc, #56]	@ (800b918 <HAL_RCC_ClockConfig+0x1c8>)
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b8e2:	f000 f821 	bl	800b928 <HAL_RCC_GetSysClockFreq>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	4b0b      	ldr	r3, [pc, #44]	@ (800b918 <HAL_RCC_ClockConfig+0x1c8>)
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	091b      	lsrs	r3, r3, #4
 800b8ee:	f003 030f 	and.w	r3, r3, #15
 800b8f2:	490a      	ldr	r1, [pc, #40]	@ (800b91c <HAL_RCC_ClockConfig+0x1cc>)
 800b8f4:	5ccb      	ldrb	r3, [r1, r3]
 800b8f6:	fa22 f303 	lsr.w	r3, r2, r3
 800b8fa:	4a09      	ldr	r2, [pc, #36]	@ (800b920 <HAL_RCC_ClockConfig+0x1d0>)
 800b8fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b8fe:	4b09      	ldr	r3, [pc, #36]	@ (800b924 <HAL_RCC_ClockConfig+0x1d4>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4618      	mov	r0, r3
 800b904:	f7f9 fd20 	bl	8005348 <HAL_InitTick>

  return HAL_OK;
 800b908:	2300      	movs	r3, #0
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3710      	adds	r7, #16
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	40023c00 	.word	0x40023c00
 800b918:	40023800 	.word	0x40023800
 800b91c:	0801d448 	.word	0x0801d448
 800b920:	20000020 	.word	0x20000020
 800b924:	20000070 	.word	0x20000070

0800b928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b92c:	b090      	sub	sp, #64	@ 0x40
 800b92e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800b930:	2300      	movs	r3, #0
 800b932:	637b      	str	r3, [r7, #52]	@ 0x34
 800b934:	2300      	movs	r3, #0
 800b936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b938:	2300      	movs	r3, #0
 800b93a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800b93c:	2300      	movs	r3, #0
 800b93e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b940:	4b59      	ldr	r3, [pc, #356]	@ (800baa8 <HAL_RCC_GetSysClockFreq+0x180>)
 800b942:	689b      	ldr	r3, [r3, #8]
 800b944:	f003 030c 	and.w	r3, r3, #12
 800b948:	2b08      	cmp	r3, #8
 800b94a:	d00d      	beq.n	800b968 <HAL_RCC_GetSysClockFreq+0x40>
 800b94c:	2b08      	cmp	r3, #8
 800b94e:	f200 80a1 	bhi.w	800ba94 <HAL_RCC_GetSysClockFreq+0x16c>
 800b952:	2b00      	cmp	r3, #0
 800b954:	d002      	beq.n	800b95c <HAL_RCC_GetSysClockFreq+0x34>
 800b956:	2b04      	cmp	r3, #4
 800b958:	d003      	beq.n	800b962 <HAL_RCC_GetSysClockFreq+0x3a>
 800b95a:	e09b      	b.n	800ba94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b95c:	4b53      	ldr	r3, [pc, #332]	@ (800baac <HAL_RCC_GetSysClockFreq+0x184>)
 800b95e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b960:	e09b      	b.n	800ba9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b962:	4b53      	ldr	r3, [pc, #332]	@ (800bab0 <HAL_RCC_GetSysClockFreq+0x188>)
 800b964:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b966:	e098      	b.n	800ba9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b968:	4b4f      	ldr	r3, [pc, #316]	@ (800baa8 <HAL_RCC_GetSysClockFreq+0x180>)
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b970:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b972:	4b4d      	ldr	r3, [pc, #308]	@ (800baa8 <HAL_RCC_GetSysClockFreq+0x180>)
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d028      	beq.n	800b9d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b97e:	4b4a      	ldr	r3, [pc, #296]	@ (800baa8 <HAL_RCC_GetSysClockFreq+0x180>)
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	099b      	lsrs	r3, r3, #6
 800b984:	2200      	movs	r2, #0
 800b986:	623b      	str	r3, [r7, #32]
 800b988:	627a      	str	r2, [r7, #36]	@ 0x24
 800b98a:	6a3b      	ldr	r3, [r7, #32]
 800b98c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800b990:	2100      	movs	r1, #0
 800b992:	4b47      	ldr	r3, [pc, #284]	@ (800bab0 <HAL_RCC_GetSysClockFreq+0x188>)
 800b994:	fb03 f201 	mul.w	r2, r3, r1
 800b998:	2300      	movs	r3, #0
 800b99a:	fb00 f303 	mul.w	r3, r0, r3
 800b99e:	4413      	add	r3, r2
 800b9a0:	4a43      	ldr	r2, [pc, #268]	@ (800bab0 <HAL_RCC_GetSysClockFreq+0x188>)
 800b9a2:	fba0 1202 	umull	r1, r2, r0, r2
 800b9a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b9a8:	460a      	mov	r2, r1
 800b9aa:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b9ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9ae:	4413      	add	r3, r2
 800b9b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b9b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	61bb      	str	r3, [r7, #24]
 800b9b8:	61fa      	str	r2, [r7, #28]
 800b9ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b9be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800b9c2:	f7f4 fc8d 	bl	80002e0 <__aeabi_uldivmod>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b9ce:	e053      	b.n	800ba78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b9d0:	4b35      	ldr	r3, [pc, #212]	@ (800baa8 <HAL_RCC_GetSysClockFreq+0x180>)
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	099b      	lsrs	r3, r3, #6
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	613b      	str	r3, [r7, #16]
 800b9da:	617a      	str	r2, [r7, #20]
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800b9e2:	f04f 0b00 	mov.w	fp, #0
 800b9e6:	4652      	mov	r2, sl
 800b9e8:	465b      	mov	r3, fp
 800b9ea:	f04f 0000 	mov.w	r0, #0
 800b9ee:	f04f 0100 	mov.w	r1, #0
 800b9f2:	0159      	lsls	r1, r3, #5
 800b9f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b9f8:	0150      	lsls	r0, r2, #5
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	ebb2 080a 	subs.w	r8, r2, sl
 800ba02:	eb63 090b 	sbc.w	r9, r3, fp
 800ba06:	f04f 0200 	mov.w	r2, #0
 800ba0a:	f04f 0300 	mov.w	r3, #0
 800ba0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800ba12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800ba16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800ba1a:	ebb2 0408 	subs.w	r4, r2, r8
 800ba1e:	eb63 0509 	sbc.w	r5, r3, r9
 800ba22:	f04f 0200 	mov.w	r2, #0
 800ba26:	f04f 0300 	mov.w	r3, #0
 800ba2a:	00eb      	lsls	r3, r5, #3
 800ba2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ba30:	00e2      	lsls	r2, r4, #3
 800ba32:	4614      	mov	r4, r2
 800ba34:	461d      	mov	r5, r3
 800ba36:	eb14 030a 	adds.w	r3, r4, sl
 800ba3a:	603b      	str	r3, [r7, #0]
 800ba3c:	eb45 030b 	adc.w	r3, r5, fp
 800ba40:	607b      	str	r3, [r7, #4]
 800ba42:	f04f 0200 	mov.w	r2, #0
 800ba46:	f04f 0300 	mov.w	r3, #0
 800ba4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ba4e:	4629      	mov	r1, r5
 800ba50:	028b      	lsls	r3, r1, #10
 800ba52:	4621      	mov	r1, r4
 800ba54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ba58:	4621      	mov	r1, r4
 800ba5a:	028a      	lsls	r2, r1, #10
 800ba5c:	4610      	mov	r0, r2
 800ba5e:	4619      	mov	r1, r3
 800ba60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba62:	2200      	movs	r2, #0
 800ba64:	60bb      	str	r3, [r7, #8]
 800ba66:	60fa      	str	r2, [r7, #12]
 800ba68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ba6c:	f7f4 fc38 	bl	80002e0 <__aeabi_uldivmod>
 800ba70:	4602      	mov	r2, r0
 800ba72:	460b      	mov	r3, r1
 800ba74:	4613      	mov	r3, r2
 800ba76:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800ba78:	4b0b      	ldr	r3, [pc, #44]	@ (800baa8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	0c1b      	lsrs	r3, r3, #16
 800ba7e:	f003 0303 	and.w	r3, r3, #3
 800ba82:	3301      	adds	r3, #1
 800ba84:	005b      	lsls	r3, r3, #1
 800ba86:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800ba88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ba8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ba92:	e002      	b.n	800ba9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ba94:	4b05      	ldr	r3, [pc, #20]	@ (800baac <HAL_RCC_GetSysClockFreq+0x184>)
 800ba96:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ba98:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ba9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3740      	adds	r7, #64	@ 0x40
 800baa0:	46bd      	mov	sp, r7
 800baa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800baa6:	bf00      	nop
 800baa8:	40023800 	.word	0x40023800
 800baac:	00f42400 	.word	0x00f42400
 800bab0:	017d7840 	.word	0x017d7840

0800bab4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bab4:	b480      	push	{r7}
 800bab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bab8:	4b03      	ldr	r3, [pc, #12]	@ (800bac8 <HAL_RCC_GetHCLKFreq+0x14>)
 800baba:	681b      	ldr	r3, [r3, #0]
}
 800babc:	4618      	mov	r0, r3
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr
 800bac6:	bf00      	nop
 800bac8:	20000020 	.word	0x20000020

0800bacc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bad0:	f7ff fff0 	bl	800bab4 <HAL_RCC_GetHCLKFreq>
 800bad4:	4602      	mov	r2, r0
 800bad6:	4b05      	ldr	r3, [pc, #20]	@ (800baec <HAL_RCC_GetPCLK1Freq+0x20>)
 800bad8:	689b      	ldr	r3, [r3, #8]
 800bada:	0a9b      	lsrs	r3, r3, #10
 800badc:	f003 0307 	and.w	r3, r3, #7
 800bae0:	4903      	ldr	r1, [pc, #12]	@ (800baf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bae2:	5ccb      	ldrb	r3, [r1, r3]
 800bae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bae8:	4618      	mov	r0, r3
 800baea:	bd80      	pop	{r7, pc}
 800baec:	40023800 	.word	0x40023800
 800baf0:	0801d458 	.word	0x0801d458

0800baf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800baf8:	f7ff ffdc 	bl	800bab4 <HAL_RCC_GetHCLKFreq>
 800bafc:	4602      	mov	r2, r0
 800bafe:	4b05      	ldr	r3, [pc, #20]	@ (800bb14 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bb00:	689b      	ldr	r3, [r3, #8]
 800bb02:	0b5b      	lsrs	r3, r3, #13
 800bb04:	f003 0307 	and.w	r3, r3, #7
 800bb08:	4903      	ldr	r1, [pc, #12]	@ (800bb18 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bb0a:	5ccb      	ldrb	r3, [r1, r3]
 800bb0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	40023800 	.word	0x40023800
 800bb18:	0801d458 	.word	0x0801d458

0800bb1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b083      	sub	sp, #12
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	220f      	movs	r2, #15
 800bb2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800bb2c:	4b12      	ldr	r3, [pc, #72]	@ (800bb78 <HAL_RCC_GetClockConfig+0x5c>)
 800bb2e:	689b      	ldr	r3, [r3, #8]
 800bb30:	f003 0203 	and.w	r2, r3, #3
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800bb38:	4b0f      	ldr	r3, [pc, #60]	@ (800bb78 <HAL_RCC_GetClockConfig+0x5c>)
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800bb44:	4b0c      	ldr	r3, [pc, #48]	@ (800bb78 <HAL_RCC_GetClockConfig+0x5c>)
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800bb50:	4b09      	ldr	r3, [pc, #36]	@ (800bb78 <HAL_RCC_GetClockConfig+0x5c>)
 800bb52:	689b      	ldr	r3, [r3, #8]
 800bb54:	08db      	lsrs	r3, r3, #3
 800bb56:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800bb5e:	4b07      	ldr	r3, [pc, #28]	@ (800bb7c <HAL_RCC_GetClockConfig+0x60>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f003 020f 	and.w	r2, r3, #15
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	601a      	str	r2, [r3, #0]
}
 800bb6a:	bf00      	nop
 800bb6c:	370c      	adds	r7, #12
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr
 800bb76:	bf00      	nop
 800bb78:	40023800 	.word	0x40023800
 800bb7c:	40023c00 	.word	0x40023c00

0800bb80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b088      	sub	sp, #32
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800bb90:	2300      	movs	r3, #0
 800bb92:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800bb94:	2300      	movs	r3, #0
 800bb96:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f003 0301 	and.w	r3, r3, #1
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d012      	beq.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bba8:	4b69      	ldr	r3, [pc, #420]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bbaa:	689b      	ldr	r3, [r3, #8]
 800bbac:	4a68      	ldr	r2, [pc, #416]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bbae:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800bbb2:	6093      	str	r3, [r2, #8]
 800bbb4:	4b66      	ldr	r3, [pc, #408]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bbb6:	689a      	ldr	r2, [r3, #8]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbbc:	4964      	ldr	r1, [pc, #400]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d101      	bne.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d017      	beq.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bbda:	4b5d      	ldr	r3, [pc, #372]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bbdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bbe0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbe8:	4959      	ldr	r1, [pc, #356]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bbea:	4313      	orrs	r3, r2
 800bbec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbf4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bbf8:	d101      	bne.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d101      	bne.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800bc06:	2301      	movs	r3, #1
 800bc08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d017      	beq.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bc16:	4b4e      	ldr	r3, [pc, #312]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc1c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc24:	494a      	ldr	r1, [pc, #296]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc26:	4313      	orrs	r3, r2
 800bc28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bc34:	d101      	bne.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800bc36:	2301      	movs	r3, #1
 800bc38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d101      	bne.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800bc42:	2301      	movs	r3, #1
 800bc44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d001      	beq.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800bc52:	2301      	movs	r3, #1
 800bc54:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f003 0320 	and.w	r3, r3, #32
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	f000 808b 	beq.w	800bd7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bc64:	4b3a      	ldr	r3, [pc, #232]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc68:	4a39      	ldr	r2, [pc, #228]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bc6e:	6413      	str	r3, [r2, #64]	@ 0x40
 800bc70:	4b37      	ldr	r3, [pc, #220]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bc78:	60bb      	str	r3, [r7, #8]
 800bc7a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bc7c:	4b35      	ldr	r3, [pc, #212]	@ (800bd54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4a34      	ldr	r2, [pc, #208]	@ (800bd54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bc82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bc86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc88:	f7fa ff0e 	bl	8006aa8 <HAL_GetTick>
 800bc8c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bc8e:	e008      	b.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc90:	f7fa ff0a 	bl	8006aa8 <HAL_GetTick>
 800bc94:	4602      	mov	r2, r0
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	1ad3      	subs	r3, r2, r3
 800bc9a:	2b64      	cmp	r3, #100	@ 0x64
 800bc9c:	d901      	bls.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800bc9e:	2303      	movs	r3, #3
 800bca0:	e357      	b.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bca2:	4b2c      	ldr	r3, [pc, #176]	@ (800bd54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d0f0      	beq.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bcae:	4b28      	ldr	r3, [pc, #160]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bcb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bcb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bcb6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d035      	beq.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bcc6:	693a      	ldr	r2, [r7, #16]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d02e      	beq.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bccc:	4b20      	ldr	r3, [pc, #128]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bcce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bcd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bcd4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800bcd6:	4b1e      	ldr	r3, [pc, #120]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bcd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bcda:	4a1d      	ldr	r2, [pc, #116]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bcdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bce0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800bce2:	4b1b      	ldr	r3, [pc, #108]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bce6:	4a1a      	ldr	r2, [pc, #104]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bce8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bcec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800bcee:	4a18      	ldr	r2, [pc, #96]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800bcf4:	4b16      	ldr	r3, [pc, #88]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bcf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bcf8:	f003 0301 	and.w	r3, r3, #1
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d114      	bne.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd00:	f7fa fed2 	bl	8006aa8 <HAL_GetTick>
 800bd04:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bd06:	e00a      	b.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bd08:	f7fa fece 	bl	8006aa8 <HAL_GetTick>
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	1ad3      	subs	r3, r2, r3
 800bd12:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d901      	bls.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800bd1a:	2303      	movs	r3, #3
 800bd1c:	e319      	b.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bd1e:	4b0c      	ldr	r3, [pc, #48]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd22:	f003 0302 	and.w	r3, r3, #2
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d0ee      	beq.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bd32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bd36:	d111      	bne.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800bd38:	4b05      	ldr	r3, [pc, #20]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd3a:	689b      	ldr	r3, [r3, #8]
 800bd3c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bd44:	4b04      	ldr	r3, [pc, #16]	@ (800bd58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800bd46:	400b      	ands	r3, r1
 800bd48:	4901      	ldr	r1, [pc, #4]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	608b      	str	r3, [r1, #8]
 800bd4e:	e00b      	b.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800bd50:	40023800 	.word	0x40023800
 800bd54:	40007000 	.word	0x40007000
 800bd58:	0ffffcff 	.word	0x0ffffcff
 800bd5c:	4baa      	ldr	r3, [pc, #680]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bd5e:	689b      	ldr	r3, [r3, #8]
 800bd60:	4aa9      	ldr	r2, [pc, #676]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bd62:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800bd66:	6093      	str	r3, [r2, #8]
 800bd68:	4ba7      	ldr	r3, [pc, #668]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bd6a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd74:	49a4      	ldr	r1, [pc, #656]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bd76:	4313      	orrs	r3, r2
 800bd78:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f003 0310 	and.w	r3, r3, #16
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d010      	beq.n	800bda8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bd86:	4ba0      	ldr	r3, [pc, #640]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bd88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd8c:	4a9e      	ldr	r2, [pc, #632]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bd8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bd92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800bd96:	4b9c      	ldr	r3, [pc, #624]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bd98:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bda0:	4999      	ldr	r1, [pc, #612]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bda2:	4313      	orrs	r3, r2
 800bda4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d00a      	beq.n	800bdca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bdb4:	4b94      	ldr	r3, [pc, #592]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bdb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bdba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdc2:	4991      	ldr	r1, [pc, #580]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bdc4:	4313      	orrs	r3, r2
 800bdc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d00a      	beq.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bdd6:	4b8c      	ldr	r3, [pc, #560]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bdd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bddc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bde4:	4988      	ldr	r1, [pc, #544]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bde6:	4313      	orrs	r3, r2
 800bde8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d00a      	beq.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bdf8:	4b83      	ldr	r3, [pc, #524]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bdfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bdfe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be06:	4980      	ldr	r1, [pc, #512]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be08:	4313      	orrs	r3, r2
 800be0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be16:	2b00      	cmp	r3, #0
 800be18:	d00a      	beq.n	800be30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800be1a:	4b7b      	ldr	r3, [pc, #492]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be20:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be28:	4977      	ldr	r1, [pc, #476]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be2a:	4313      	orrs	r3, r2
 800be2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d00a      	beq.n	800be52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800be3c:	4b72      	ldr	r3, [pc, #456]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be42:	f023 0203 	bic.w	r2, r3, #3
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be4a:	496f      	ldr	r1, [pc, #444]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be4c:	4313      	orrs	r3, r2
 800be4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d00a      	beq.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800be5e:	4b6a      	ldr	r3, [pc, #424]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be64:	f023 020c 	bic.w	r2, r3, #12
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be6c:	4966      	ldr	r1, [pc, #408]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be6e:	4313      	orrs	r3, r2
 800be70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d00a      	beq.n	800be96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800be80:	4b61      	ldr	r3, [pc, #388]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be86:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be8e:	495e      	ldr	r1, [pc, #376]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be90:	4313      	orrs	r3, r2
 800be92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d00a      	beq.n	800beb8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bea2:	4b59      	ldr	r3, [pc, #356]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bea8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800beb0:	4955      	ldr	r1, [pc, #340]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800beb2:	4313      	orrs	r3, r2
 800beb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d00a      	beq.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bec4:	4b50      	ldr	r3, [pc, #320]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800beca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bed2:	494d      	ldr	r1, [pc, #308]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bed4:	4313      	orrs	r3, r2
 800bed6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d00a      	beq.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800bee6:	4b48      	ldr	r3, [pc, #288]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800beec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bef4:	4944      	ldr	r1, [pc, #272]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bef6:	4313      	orrs	r3, r2
 800bef8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d00a      	beq.n	800bf1e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800bf08:	4b3f      	ldr	r3, [pc, #252]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf0e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf16:	493c      	ldr	r1, [pc, #240]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d00a      	beq.n	800bf40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800bf2a:	4b37      	ldr	r3, [pc, #220]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf30:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bf38:	4933      	ldr	r1, [pc, #204]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d00a      	beq.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bf4c:	4b2e      	ldr	r3, [pc, #184]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf52:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bf5a:	492b      	ldr	r1, [pc, #172]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf5c:	4313      	orrs	r3, r2
 800bf5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d011      	beq.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bf6e:	4b26      	ldr	r3, [pc, #152]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf74:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bf7c:	4922      	ldr	r1, [pc, #136]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bf88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf8c:	d101      	bne.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800bf8e:	2301      	movs	r3, #1
 800bf90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f003 0308 	and.w	r3, r3, #8
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d001      	beq.n	800bfa2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d00a      	beq.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bfae:	4b16      	ldr	r3, [pc, #88]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bfb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfb4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bfbc:	4912      	ldr	r1, [pc, #72]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d00b      	beq.n	800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800bfd0:	4b0d      	ldr	r3, [pc, #52]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bfd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfd6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfe0:	4909      	ldr	r1, [pc, #36]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800bfe8:	69fb      	ldr	r3, [r7, #28]
 800bfea:	2b01      	cmp	r3, #1
 800bfec:	d006      	beq.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	f000 80d9 	beq.w	800c1ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800bffc:	4b02      	ldr	r3, [pc, #8]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	4a01      	ldr	r2, [pc, #4]	@ (800c008 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c002:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c006:	e001      	b.n	800c00c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800c008:	40023800 	.word	0x40023800
 800c00c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c00e:	f7fa fd4b 	bl	8006aa8 <HAL_GetTick>
 800c012:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c014:	e008      	b.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c016:	f7fa fd47 	bl	8006aa8 <HAL_GetTick>
 800c01a:	4602      	mov	r2, r0
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	1ad3      	subs	r3, r2, r3
 800c020:	2b64      	cmp	r3, #100	@ 0x64
 800c022:	d901      	bls.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c024:	2303      	movs	r3, #3
 800c026:	e194      	b.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c028:	4b6c      	ldr	r3, [pc, #432]	@ (800c1dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c030:	2b00      	cmp	r3, #0
 800c032:	d1f0      	bne.n	800c016 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f003 0301 	and.w	r3, r3, #1
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d021      	beq.n	800c084 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c044:	2b00      	cmp	r3, #0
 800c046:	d11d      	bne.n	800c084 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c048:	4b64      	ldr	r3, [pc, #400]	@ (800c1dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c04a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c04e:	0c1b      	lsrs	r3, r3, #16
 800c050:	f003 0303 	and.w	r3, r3, #3
 800c054:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c056:	4b61      	ldr	r3, [pc, #388]	@ (800c1dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c058:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c05c:	0e1b      	lsrs	r3, r3, #24
 800c05e:	f003 030f 	and.w	r3, r3, #15
 800c062:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	019a      	lsls	r2, r3, #6
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	041b      	lsls	r3, r3, #16
 800c06e:	431a      	orrs	r2, r3
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	061b      	lsls	r3, r3, #24
 800c074:	431a      	orrs	r2, r3
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	689b      	ldr	r3, [r3, #8]
 800c07a:	071b      	lsls	r3, r3, #28
 800c07c:	4957      	ldr	r1, [pc, #348]	@ (800c1dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c07e:	4313      	orrs	r3, r2
 800c080:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d004      	beq.n	800c09a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c094:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c098:	d00a      	beq.n	800c0b0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d02e      	beq.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c0ae:	d129      	bne.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c0b0:	4b4a      	ldr	r3, [pc, #296]	@ (800c1dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c0b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c0b6:	0c1b      	lsrs	r3, r3, #16
 800c0b8:	f003 0303 	and.w	r3, r3, #3
 800c0bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c0be:	4b47      	ldr	r3, [pc, #284]	@ (800c1dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c0c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c0c4:	0f1b      	lsrs	r3, r3, #28
 800c0c6:	f003 0307 	and.w	r3, r3, #7
 800c0ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	019a      	lsls	r2, r3, #6
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	041b      	lsls	r3, r3, #16
 800c0d6:	431a      	orrs	r2, r3
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	68db      	ldr	r3, [r3, #12]
 800c0dc:	061b      	lsls	r3, r3, #24
 800c0de:	431a      	orrs	r2, r3
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	071b      	lsls	r3, r3, #28
 800c0e4:	493d      	ldr	r1, [pc, #244]	@ (800c1dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c0e6:	4313      	orrs	r3, r2
 800c0e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c0ec:	4b3b      	ldr	r3, [pc, #236]	@ (800c1dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c0ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c0f2:	f023 021f 	bic.w	r2, r3, #31
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0fa:	3b01      	subs	r3, #1
 800c0fc:	4937      	ldr	r1, [pc, #220]	@ (800c1dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c0fe:	4313      	orrs	r3, r2
 800c100:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d01d      	beq.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c110:	4b32      	ldr	r3, [pc, #200]	@ (800c1dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c112:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c116:	0e1b      	lsrs	r3, r3, #24
 800c118:	f003 030f 	and.w	r3, r3, #15
 800c11c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c11e:	4b2f      	ldr	r3, [pc, #188]	@ (800c1dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c120:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c124:	0f1b      	lsrs	r3, r3, #28
 800c126:	f003 0307 	and.w	r3, r3, #7
 800c12a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	019a      	lsls	r2, r3, #6
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	691b      	ldr	r3, [r3, #16]
 800c136:	041b      	lsls	r3, r3, #16
 800c138:	431a      	orrs	r2, r3
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	061b      	lsls	r3, r3, #24
 800c13e:	431a      	orrs	r2, r3
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	071b      	lsls	r3, r3, #28
 800c144:	4925      	ldr	r1, [pc, #148]	@ (800c1dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c146:	4313      	orrs	r3, r2
 800c148:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c154:	2b00      	cmp	r3, #0
 800c156:	d011      	beq.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	685b      	ldr	r3, [r3, #4]
 800c15c:	019a      	lsls	r2, r3, #6
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	691b      	ldr	r3, [r3, #16]
 800c162:	041b      	lsls	r3, r3, #16
 800c164:	431a      	orrs	r2, r3
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	68db      	ldr	r3, [r3, #12]
 800c16a:	061b      	lsls	r3, r3, #24
 800c16c:	431a      	orrs	r2, r3
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	689b      	ldr	r3, [r3, #8]
 800c172:	071b      	lsls	r3, r3, #28
 800c174:	4919      	ldr	r1, [pc, #100]	@ (800c1dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c176:	4313      	orrs	r3, r2
 800c178:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c17c:	4b17      	ldr	r3, [pc, #92]	@ (800c1dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a16      	ldr	r2, [pc, #88]	@ (800c1dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c182:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c186:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c188:	f7fa fc8e 	bl	8006aa8 <HAL_GetTick>
 800c18c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c18e:	e008      	b.n	800c1a2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c190:	f7fa fc8a 	bl	8006aa8 <HAL_GetTick>
 800c194:	4602      	mov	r2, r0
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	1ad3      	subs	r3, r2, r3
 800c19a:	2b64      	cmp	r3, #100	@ 0x64
 800c19c:	d901      	bls.n	800c1a2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c19e:	2303      	movs	r3, #3
 800c1a0:	e0d7      	b.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c1a2:	4b0e      	ldr	r3, [pc, #56]	@ (800c1dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d0f0      	beq.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800c1ae:	69bb      	ldr	r3, [r7, #24]
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	f040 80cd 	bne.w	800c350 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c1b6:	4b09      	ldr	r3, [pc, #36]	@ (800c1dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4a08      	ldr	r2, [pc, #32]	@ (800c1dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c1bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c1c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1c2:	f7fa fc71 	bl	8006aa8 <HAL_GetTick>
 800c1c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c1c8:	e00a      	b.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c1ca:	f7fa fc6d 	bl	8006aa8 <HAL_GetTick>
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	1ad3      	subs	r3, r2, r3
 800c1d4:	2b64      	cmp	r3, #100	@ 0x64
 800c1d6:	d903      	bls.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c1d8:	2303      	movs	r3, #3
 800c1da:	e0ba      	b.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800c1dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c1e0:	4b5e      	ldr	r3, [pc, #376]	@ (800c35c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c1e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c1ec:	d0ed      	beq.n	800c1ca <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d003      	beq.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d009      	beq.n	800c216 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d02e      	beq.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c212:	2b00      	cmp	r3, #0
 800c214:	d12a      	bne.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c216:	4b51      	ldr	r3, [pc, #324]	@ (800c35c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c21c:	0c1b      	lsrs	r3, r3, #16
 800c21e:	f003 0303 	and.w	r3, r3, #3
 800c222:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c224:	4b4d      	ldr	r3, [pc, #308]	@ (800c35c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c22a:	0f1b      	lsrs	r3, r3, #28
 800c22c:	f003 0307 	and.w	r3, r3, #7
 800c230:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	695b      	ldr	r3, [r3, #20]
 800c236:	019a      	lsls	r2, r3, #6
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	041b      	lsls	r3, r3, #16
 800c23c:	431a      	orrs	r2, r3
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	699b      	ldr	r3, [r3, #24]
 800c242:	061b      	lsls	r3, r3, #24
 800c244:	431a      	orrs	r2, r3
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	071b      	lsls	r3, r3, #28
 800c24a:	4944      	ldr	r1, [pc, #272]	@ (800c35c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c24c:	4313      	orrs	r3, r2
 800c24e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c252:	4b42      	ldr	r3, [pc, #264]	@ (800c35c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c254:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c258:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c260:	3b01      	subs	r3, #1
 800c262:	021b      	lsls	r3, r3, #8
 800c264:	493d      	ldr	r1, [pc, #244]	@ (800c35c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c266:	4313      	orrs	r3, r2
 800c268:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c274:	2b00      	cmp	r3, #0
 800c276:	d022      	beq.n	800c2be <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c27c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c280:	d11d      	bne.n	800c2be <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c282:	4b36      	ldr	r3, [pc, #216]	@ (800c35c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c288:	0e1b      	lsrs	r3, r3, #24
 800c28a:	f003 030f 	and.w	r3, r3, #15
 800c28e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c290:	4b32      	ldr	r3, [pc, #200]	@ (800c35c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c296:	0f1b      	lsrs	r3, r3, #28
 800c298:	f003 0307 	and.w	r3, r3, #7
 800c29c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	695b      	ldr	r3, [r3, #20]
 800c2a2:	019a      	lsls	r2, r3, #6
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6a1b      	ldr	r3, [r3, #32]
 800c2a8:	041b      	lsls	r3, r3, #16
 800c2aa:	431a      	orrs	r2, r3
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	061b      	lsls	r3, r3, #24
 800c2b0:	431a      	orrs	r2, r3
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	071b      	lsls	r3, r3, #28
 800c2b6:	4929      	ldr	r1, [pc, #164]	@ (800c35c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f003 0308 	and.w	r3, r3, #8
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d028      	beq.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c2ca:	4b24      	ldr	r3, [pc, #144]	@ (800c35c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c2cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c2d0:	0e1b      	lsrs	r3, r3, #24
 800c2d2:	f003 030f 	and.w	r3, r3, #15
 800c2d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c2d8:	4b20      	ldr	r3, [pc, #128]	@ (800c35c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c2da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c2de:	0c1b      	lsrs	r3, r3, #16
 800c2e0:	f003 0303 	and.w	r3, r3, #3
 800c2e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	695b      	ldr	r3, [r3, #20]
 800c2ea:	019a      	lsls	r2, r3, #6
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	041b      	lsls	r3, r3, #16
 800c2f0:	431a      	orrs	r2, r3
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	061b      	lsls	r3, r3, #24
 800c2f6:	431a      	orrs	r2, r3
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	69db      	ldr	r3, [r3, #28]
 800c2fc:	071b      	lsls	r3, r3, #28
 800c2fe:	4917      	ldr	r1, [pc, #92]	@ (800c35c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c300:	4313      	orrs	r3, r2
 800c302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c306:	4b15      	ldr	r3, [pc, #84]	@ (800c35c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c308:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c30c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c314:	4911      	ldr	r1, [pc, #68]	@ (800c35c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c316:	4313      	orrs	r3, r2
 800c318:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c31c:	4b0f      	ldr	r3, [pc, #60]	@ (800c35c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a0e      	ldr	r2, [pc, #56]	@ (800c35c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c322:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c326:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c328:	f7fa fbbe 	bl	8006aa8 <HAL_GetTick>
 800c32c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c32e:	e008      	b.n	800c342 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c330:	f7fa fbba 	bl	8006aa8 <HAL_GetTick>
 800c334:	4602      	mov	r2, r0
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	1ad3      	subs	r3, r2, r3
 800c33a:	2b64      	cmp	r3, #100	@ 0x64
 800c33c:	d901      	bls.n	800c342 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c33e:	2303      	movs	r3, #3
 800c340:	e007      	b.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c342:	4b06      	ldr	r3, [pc, #24]	@ (800c35c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c34a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c34e:	d1ef      	bne.n	800c330 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800c350:	2300      	movs	r3, #0
}
 800c352:	4618      	mov	r0, r3
 800c354:	3720      	adds	r7, #32
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	40023800 	.word	0x40023800

0800c360 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c360:	b480      	push	{r7}
 800c362:	b087      	sub	sp, #28
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c368:	2300      	movs	r3, #0
 800c36a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800c36c:	2300      	movs	r3, #0
 800c36e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800c370:	2300      	movs	r3, #0
 800c372:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800c374:	2300      	movs	r3, #0
 800c376:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800c37e:	f040 808d 	bne.w	800c49c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c382:	4b93      	ldr	r3, [pc, #588]	@ (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c384:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c388:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800c390:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c398:	d07c      	beq.n	800c494 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c3a0:	d87b      	bhi.n	800c49a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d004      	beq.n	800c3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c3ae:	d039      	beq.n	800c424 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c3b0:	e073      	b.n	800c49a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c3b2:	4b87      	ldr	r3, [pc, #540]	@ (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d108      	bne.n	800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c3be:	4b84      	ldr	r3, [pc, #528]	@ (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c3c6:	4a83      	ldr	r2, [pc, #524]	@ (800c5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800c3c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3cc:	613b      	str	r3, [r7, #16]
 800c3ce:	e007      	b.n	800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c3d0:	4b7f      	ldr	r3, [pc, #508]	@ (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c3d8:	4a7f      	ldr	r2, [pc, #508]	@ (800c5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c3da:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3de:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c3e0:	4b7b      	ldr	r3, [pc, #492]	@ (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c3e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3e6:	0e1b      	lsrs	r3, r3, #24
 800c3e8:	f003 030f 	and.w	r3, r3, #15
 800c3ec:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c3ee:	4b78      	ldr	r3, [pc, #480]	@ (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c3f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3f4:	099b      	lsrs	r3, r3, #6
 800c3f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3fa:	693a      	ldr	r2, [r7, #16]
 800c3fc:	fb03 f202 	mul.w	r2, r3, r2
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	fbb2 f3f3 	udiv	r3, r2, r3
 800c406:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c408:	4b71      	ldr	r3, [pc, #452]	@ (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c40a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c40e:	0a1b      	lsrs	r3, r3, #8
 800c410:	f003 031f 	and.w	r3, r3, #31
 800c414:	3301      	adds	r3, #1
 800c416:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c418:	697a      	ldr	r2, [r7, #20]
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c420:	617b      	str	r3, [r7, #20]
        break;
 800c422:	e03b      	b.n	800c49c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c424:	4b6a      	ldr	r3, [pc, #424]	@ (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d108      	bne.n	800c442 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c430:	4b67      	ldr	r3, [pc, #412]	@ (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c438:	4a66      	ldr	r2, [pc, #408]	@ (800c5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800c43a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c43e:	613b      	str	r3, [r7, #16]
 800c440:	e007      	b.n	800c452 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c442:	4b63      	ldr	r3, [pc, #396]	@ (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c44a:	4a63      	ldr	r2, [pc, #396]	@ (800c5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c44c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c450:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c452:	4b5f      	ldr	r3, [pc, #380]	@ (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c454:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c458:	0e1b      	lsrs	r3, r3, #24
 800c45a:	f003 030f 	and.w	r3, r3, #15
 800c45e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c460:	4b5b      	ldr	r3, [pc, #364]	@ (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c462:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c466:	099b      	lsrs	r3, r3, #6
 800c468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c46c:	693a      	ldr	r2, [r7, #16]
 800c46e:	fb03 f202 	mul.w	r2, r3, r2
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	fbb2 f3f3 	udiv	r3, r2, r3
 800c478:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c47a:	4b55      	ldr	r3, [pc, #340]	@ (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c47c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c480:	f003 031f 	and.w	r3, r3, #31
 800c484:	3301      	adds	r3, #1
 800c486:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c488:	697a      	ldr	r2, [r7, #20]
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c490:	617b      	str	r3, [r7, #20]
        break;
 800c492:	e003      	b.n	800c49c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c494:	4b51      	ldr	r3, [pc, #324]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c496:	617b      	str	r3, [r7, #20]
        break;
 800c498:	e000      	b.n	800c49c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800c49a:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c4a2:	f040 808d 	bne.w	800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c4a6:	4b4a      	ldr	r3, [pc, #296]	@ (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c4a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c4ac:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800c4b4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c4bc:	d07c      	beq.n	800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c4c4:	d87b      	bhi.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d004      	beq.n	800c4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c4d2:	d039      	beq.n	800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c4d4:	e073      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c4d6:	4b3e      	ldr	r3, [pc, #248]	@ (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c4d8:	685b      	ldr	r3, [r3, #4]
 800c4da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d108      	bne.n	800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c4e2:	4b3b      	ldr	r3, [pc, #236]	@ (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c4ea:	4a3a      	ldr	r2, [pc, #232]	@ (800c5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800c4ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4f0:	613b      	str	r3, [r7, #16]
 800c4f2:	e007      	b.n	800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c4f4:	4b36      	ldr	r3, [pc, #216]	@ (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c4fc:	4a36      	ldr	r2, [pc, #216]	@ (800c5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c4fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800c502:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c504:	4b32      	ldr	r3, [pc, #200]	@ (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c50a:	0e1b      	lsrs	r3, r3, #24
 800c50c:	f003 030f 	and.w	r3, r3, #15
 800c510:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c512:	4b2f      	ldr	r3, [pc, #188]	@ (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c518:	099b      	lsrs	r3, r3, #6
 800c51a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c51e:	693a      	ldr	r2, [r7, #16]
 800c520:	fb03 f202 	mul.w	r2, r3, r2
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	fbb2 f3f3 	udiv	r3, r2, r3
 800c52a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c52c:	4b28      	ldr	r3, [pc, #160]	@ (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c52e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c532:	0a1b      	lsrs	r3, r3, #8
 800c534:	f003 031f 	and.w	r3, r3, #31
 800c538:	3301      	adds	r3, #1
 800c53a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c53c:	697a      	ldr	r2, [r7, #20]
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	fbb2 f3f3 	udiv	r3, r2, r3
 800c544:	617b      	str	r3, [r7, #20]
        break;
 800c546:	e03b      	b.n	800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c548:	4b21      	ldr	r3, [pc, #132]	@ (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c550:	2b00      	cmp	r3, #0
 800c552:	d108      	bne.n	800c566 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c554:	4b1e      	ldr	r3, [pc, #120]	@ (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c55c:	4a1d      	ldr	r2, [pc, #116]	@ (800c5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800c55e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c562:	613b      	str	r3, [r7, #16]
 800c564:	e007      	b.n	800c576 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c566:	4b1a      	ldr	r3, [pc, #104]	@ (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c56e:	4a1a      	ldr	r2, [pc, #104]	@ (800c5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c570:	fbb2 f3f3 	udiv	r3, r2, r3
 800c574:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c576:	4b16      	ldr	r3, [pc, #88]	@ (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c578:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c57c:	0e1b      	lsrs	r3, r3, #24
 800c57e:	f003 030f 	and.w	r3, r3, #15
 800c582:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c584:	4b12      	ldr	r3, [pc, #72]	@ (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c586:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c58a:	099b      	lsrs	r3, r3, #6
 800c58c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c590:	693a      	ldr	r2, [r7, #16]
 800c592:	fb03 f202 	mul.w	r2, r3, r2
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	fbb2 f3f3 	udiv	r3, r2, r3
 800c59c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c59e:	4b0c      	ldr	r3, [pc, #48]	@ (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c5a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c5a4:	f003 031f 	and.w	r3, r3, #31
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c5ac:	697a      	ldr	r2, [r7, #20]
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5b4:	617b      	str	r3, [r7, #20]
        break;
 800c5b6:	e003      	b.n	800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c5b8:	4b08      	ldr	r3, [pc, #32]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c5ba:	617b      	str	r3, [r7, #20]
        break;
 800c5bc:	e000      	b.n	800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800c5be:	bf00      	nop
      }
    }
  }

  return frequency;
 800c5c0:	697b      	ldr	r3, [r7, #20]
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	371c      	adds	r7, #28
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5cc:	4770      	bx	lr
 800c5ce:	bf00      	nop
 800c5d0:	40023800 	.word	0x40023800
 800c5d4:	00f42400 	.word	0x00f42400
 800c5d8:	017d7840 	.word	0x017d7840
 800c5dc:	00bb8000 	.word	0x00bb8000

0800c5e0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b084      	sub	sp, #16
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d101      	bne.n	800c5f2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	e071      	b.n	800c6d6 <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	7f5b      	ldrb	r3, [r3, #29]
 800c5f6:	b2db      	uxtb	r3, r3
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d105      	bne.n	800c608 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f7f8 fa22 	bl	8004a4c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2202      	movs	r2, #2
 800c60c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	68db      	ldr	r3, [r3, #12]
 800c614:	f003 0310 	and.w	r3, r3, #16
 800c618:	2b10      	cmp	r3, #16
 800c61a:	d053      	beq.n	800c6c4 <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	22ca      	movs	r2, #202	@ 0xca
 800c622:	625a      	str	r2, [r3, #36]	@ 0x24
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	2253      	movs	r2, #83	@ 0x53
 800c62a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f000 fac7 	bl	800cbc0 <RTC_EnterInitMode>
 800c632:	4603      	mov	r3, r0
 800c634:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800c636:	7bfb      	ldrb	r3, [r7, #15]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d12a      	bne.n	800c692 <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	6899      	ldr	r1, [r3, #8]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681a      	ldr	r2, [r3, #0]
 800c646:	4b26      	ldr	r3, [pc, #152]	@ (800c6e0 <HAL_RTC_Init+0x100>)
 800c648:	400b      	ands	r3, r1
 800c64a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	6899      	ldr	r1, [r3, #8]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	685a      	ldr	r2, [r3, #4]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	691b      	ldr	r3, [r3, #16]
 800c65a:	431a      	orrs	r2, r3
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	695b      	ldr	r3, [r3, #20]
 800c660:	431a      	orrs	r2, r3
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	430a      	orrs	r2, r1
 800c668:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	68d2      	ldr	r2, [r2, #12]
 800c672:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	6919      	ldr	r1, [r3, #16]
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	689b      	ldr	r3, [r3, #8]
 800c67e:	041a      	lsls	r2, r3, #16
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	430a      	orrs	r2, r1
 800c686:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f000 fad0 	bl	800cc2e <RTC_ExitInitMode>
 800c68e:	4603      	mov	r3, r0
 800c690:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c692:	7bfb      	ldrb	r3, [r7, #15]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d110      	bne.n	800c6ba <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f022 0208 	bic.w	r2, r2, #8
 800c6a6:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	699a      	ldr	r2, [r3, #24]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	430a      	orrs	r2, r1
 800c6b8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	22ff      	movs	r2, #255	@ 0xff
 800c6c0:	625a      	str	r2, [r3, #36]	@ 0x24
 800c6c2:	e001      	b.n	800c6c8 <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800c6c8:	7bfb      	ldrb	r3, [r7, #15]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d102      	bne.n	800c6d4 <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800c6d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3710      	adds	r7, #16
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	ff8fffbf 	.word	0xff8fffbf

0800c6e4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c6e4:	b590      	push	{r4, r7, lr}
 800c6e6:	b087      	sub	sp, #28
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	7f1b      	ldrb	r3, [r3, #28]
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	d101      	bne.n	800c700 <HAL_RTC_SetTime+0x1c>
 800c6fc:	2302      	movs	r3, #2
 800c6fe:	e085      	b.n	800c80c <HAL_RTC_SetTime+0x128>
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2201      	movs	r2, #1
 800c704:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2202      	movs	r2, #2
 800c70a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d126      	bne.n	800c760 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	689b      	ldr	r3, [r3, #8]
 800c718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d102      	bne.n	800c726 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	2200      	movs	r2, #0
 800c724:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	4618      	mov	r0, r3
 800c72c:	f000 faa4 	bl	800cc78 <RTC_ByteToBcd2>
 800c730:	4603      	mov	r3, r0
 800c732:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	785b      	ldrb	r3, [r3, #1]
 800c738:	4618      	mov	r0, r3
 800c73a:	f000 fa9d 	bl	800cc78 <RTC_ByteToBcd2>
 800c73e:	4603      	mov	r3, r0
 800c740:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c742:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	789b      	ldrb	r3, [r3, #2]
 800c748:	4618      	mov	r0, r3
 800c74a:	f000 fa95 	bl	800cc78 <RTC_ByteToBcd2>
 800c74e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c750:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	78db      	ldrb	r3, [r3, #3]
 800c758:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c75a:	4313      	orrs	r3, r2
 800c75c:	617b      	str	r3, [r7, #20]
 800c75e:	e018      	b.n	800c792 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	689b      	ldr	r3, [r3, #8]
 800c766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d102      	bne.n	800c774 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	2200      	movs	r2, #0
 800c772:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	785b      	ldrb	r3, [r3, #1]
 800c77e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c780:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800c782:	68ba      	ldr	r2, [r7, #8]
 800c784:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800c786:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	78db      	ldrb	r3, [r3, #3]
 800c78c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c78e:	4313      	orrs	r3, r2
 800c790:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	22ca      	movs	r2, #202	@ 0xca
 800c798:	625a      	str	r2, [r3, #36]	@ 0x24
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	2253      	movs	r2, #83	@ 0x53
 800c7a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c7a2:	68f8      	ldr	r0, [r7, #12]
 800c7a4:	f000 fa0c 	bl	800cbc0 <RTC_EnterInitMode>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800c7ac:	7cfb      	ldrb	r3, [r7, #19]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d11e      	bne.n	800c7f0 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681a      	ldr	r2, [r3, #0]
 800c7b6:	6979      	ldr	r1, [r7, #20]
 800c7b8:	4b16      	ldr	r3, [pc, #88]	@ (800c814 <HAL_RTC_SetTime+0x130>)
 800c7ba:	400b      	ands	r3, r1
 800c7bc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	689a      	ldr	r2, [r3, #8]
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800c7cc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	6899      	ldr	r1, [r3, #8]
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	68da      	ldr	r2, [r3, #12]
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	691b      	ldr	r3, [r3, #16]
 800c7dc:	431a      	orrs	r2, r3
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	430a      	orrs	r2, r1
 800c7e4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c7e6:	68f8      	ldr	r0, [r7, #12]
 800c7e8:	f000 fa21 	bl	800cc2e <RTC_ExitInitMode>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800c7f0:	7cfb      	ldrb	r3, [r7, #19]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d102      	bne.n	800c7fc <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	2201      	movs	r2, #1
 800c7fa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	22ff      	movs	r2, #255	@ 0xff
 800c802:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	2200      	movs	r2, #0
 800c808:	771a      	strb	r2, [r3, #28]

  return status;
 800c80a:	7cfb      	ldrb	r3, [r7, #19]
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	371c      	adds	r7, #28
 800c810:	46bd      	mov	sp, r7
 800c812:	bd90      	pop	{r4, r7, pc}
 800c814:	007f7f7f 	.word	0x007f7f7f

0800c818 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c818:	b590      	push	{r4, r7, lr}
 800c81a:	b087      	sub	sp, #28
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	60f8      	str	r0, [r7, #12]
 800c820:	60b9      	str	r1, [r7, #8]
 800c822:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c824:	2300      	movs	r3, #0
 800c826:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	7f1b      	ldrb	r3, [r3, #28]
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	d101      	bne.n	800c834 <HAL_RTC_SetDate+0x1c>
 800c830:	2302      	movs	r3, #2
 800c832:	e06f      	b.n	800c914 <HAL_RTC_SetDate+0xfc>
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	2201      	movs	r2, #1
 800c838:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	2202      	movs	r2, #2
 800c83e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d10e      	bne.n	800c864 <HAL_RTC_SetDate+0x4c>
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	785b      	ldrb	r3, [r3, #1]
 800c84a:	f003 0310 	and.w	r3, r3, #16
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d008      	beq.n	800c864 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	785b      	ldrb	r3, [r3, #1]
 800c856:	f023 0310 	bic.w	r3, r3, #16
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	330a      	adds	r3, #10
 800c85e:	b2da      	uxtb	r2, r3
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d11c      	bne.n	800c8a4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	78db      	ldrb	r3, [r3, #3]
 800c86e:	4618      	mov	r0, r3
 800c870:	f000 fa02 	bl	800cc78 <RTC_ByteToBcd2>
 800c874:	4603      	mov	r3, r0
 800c876:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	785b      	ldrb	r3, [r3, #1]
 800c87c:	4618      	mov	r0, r3
 800c87e:	f000 f9fb 	bl	800cc78 <RTC_ByteToBcd2>
 800c882:	4603      	mov	r3, r0
 800c884:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c886:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	789b      	ldrb	r3, [r3, #2]
 800c88c:	4618      	mov	r0, r3
 800c88e:	f000 f9f3 	bl	800cc78 <RTC_ByteToBcd2>
 800c892:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c894:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	617b      	str	r3, [r7, #20]
 800c8a2:	e00e      	b.n	800c8c2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	78db      	ldrb	r3, [r3, #3]
 800c8a8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	785b      	ldrb	r3, [r3, #1]
 800c8ae:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c8b0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800c8b2:	68ba      	ldr	r2, [r7, #8]
 800c8b4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c8b6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	781b      	ldrb	r3, [r3, #0]
 800c8bc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	22ca      	movs	r2, #202	@ 0xca
 800c8c8:	625a      	str	r2, [r3, #36]	@ 0x24
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	2253      	movs	r2, #83	@ 0x53
 800c8d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c8d2:	68f8      	ldr	r0, [r7, #12]
 800c8d4:	f000 f974 	bl	800cbc0 <RTC_EnterInitMode>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800c8dc:	7cfb      	ldrb	r3, [r7, #19]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d10a      	bne.n	800c8f8 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681a      	ldr	r2, [r3, #0]
 800c8e6:	6979      	ldr	r1, [r7, #20]
 800c8e8:	4b0c      	ldr	r3, [pc, #48]	@ (800c91c <HAL_RTC_SetDate+0x104>)
 800c8ea:	400b      	ands	r3, r1
 800c8ec:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c8ee:	68f8      	ldr	r0, [r7, #12]
 800c8f0:	f000 f99d 	bl	800cc2e <RTC_ExitInitMode>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800c8f8:	7cfb      	ldrb	r3, [r7, #19]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d102      	bne.n	800c904 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	2201      	movs	r2, #1
 800c902:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	22ff      	movs	r2, #255	@ 0xff
 800c90a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	2200      	movs	r2, #0
 800c910:	771a      	strb	r2, [r3, #28]

  return status;
 800c912:	7cfb      	ldrb	r3, [r7, #19]
}
 800c914:	4618      	mov	r0, r3
 800c916:	371c      	adds	r7, #28
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd90      	pop	{r4, r7, pc}
 800c91c:	00ffff3f 	.word	0x00ffff3f

0800c920 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800c920:	b590      	push	{r4, r7, lr}
 800c922:	b089      	sub	sp, #36	@ 0x24
 800c924:	af00      	add	r7, sp, #0
 800c926:	60f8      	str	r0, [r7, #12]
 800c928:	60b9      	str	r1, [r7, #8]
 800c92a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800c92c:	2300      	movs	r3, #0
 800c92e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800c930:	2300      	movs	r3, #0
 800c932:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800c934:	2300      	movs	r3, #0
 800c936:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	7f1b      	ldrb	r3, [r3, #28]
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d101      	bne.n	800c944 <HAL_RTC_SetAlarm+0x24>
 800c940:	2302      	movs	r3, #2
 800c942:	e113      	b.n	800cb6c <HAL_RTC_SetAlarm+0x24c>
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2201      	movs	r2, #1
 800c948:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	2202      	movs	r2, #2
 800c94e:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d137      	bne.n	800c9c6 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	689b      	ldr	r3, [r3, #8]
 800c95c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c960:	2b00      	cmp	r3, #0
 800c962:	d102      	bne.n	800c96a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	2200      	movs	r2, #0
 800c968:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	4618      	mov	r0, r3
 800c970:	f000 f982 	bl	800cc78 <RTC_ByteToBcd2>
 800c974:	4603      	mov	r3, r0
 800c976:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	785b      	ldrb	r3, [r3, #1]
 800c97c:	4618      	mov	r0, r3
 800c97e:	f000 f97b 	bl	800cc78 <RTC_ByteToBcd2>
 800c982:	4603      	mov	r3, r0
 800c984:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800c986:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	789b      	ldrb	r3, [r3, #2]
 800c98c:	4618      	mov	r0, r3
 800c98e:	f000 f973 	bl	800cc78 <RTC_ByteToBcd2>
 800c992:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800c994:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	78db      	ldrb	r3, [r3, #3]
 800c99c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800c99e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f000 f965 	bl	800cc78 <RTC_ByteToBcd2>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800c9b2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800c9ba:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800c9c0:	4313      	orrs	r3, r2
 800c9c2:	61fb      	str	r3, [r7, #28]
 800c9c4:	e023      	b.n	800ca0e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	689b      	ldr	r3, [r3, #8]
 800c9cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d102      	bne.n	800c9da <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	785b      	ldrb	r3, [r3, #1]
 800c9e4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800c9e6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800c9e8:	68ba      	ldr	r2, [r7, #8]
 800c9ea:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800c9ec:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	78db      	ldrb	r3, [r3, #3]
 800c9f2:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800c9f4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c9fc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800c9fe:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800ca04:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800ca16:	4313      	orrs	r3, r2
 800ca18:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	22ca      	movs	r2, #202	@ 0xca
 800ca20:	625a      	str	r2, [r3, #36]	@ 0x24
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	2253      	movs	r2, #83	@ 0x53
 800ca28:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca32:	d148      	bne.n	800cac6 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	689a      	ldr	r2, [r3, #8]
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ca42:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	689a      	ldr	r2, [r3, #8]
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ca52:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	68db      	ldr	r3, [r3, #12]
 800ca5a:	b2da      	uxtb	r2, r3
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800ca64:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ca66:	f7fa f81f 	bl	8006aa8 <HAL_GetTick>
 800ca6a:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800ca6c:	e013      	b.n	800ca96 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ca6e:	f7fa f81b 	bl	8006aa8 <HAL_GetTick>
 800ca72:	4602      	mov	r2, r0
 800ca74:	69bb      	ldr	r3, [r7, #24]
 800ca76:	1ad3      	subs	r3, r2, r3
 800ca78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ca7c:	d90b      	bls.n	800ca96 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	22ff      	movs	r2, #255	@ 0xff
 800ca84:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2203      	movs	r2, #3
 800ca8a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800ca92:	2303      	movs	r3, #3
 800ca94:	e06a      	b.n	800cb6c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	68db      	ldr	r3, [r3, #12]
 800ca9c:	f003 0301 	and.w	r3, r3, #1
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d0e4      	beq.n	800ca6e <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	69fa      	ldr	r2, [r7, #28]
 800caaa:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	697a      	ldr	r2, [r7, #20]
 800cab2:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	689a      	ldr	r2, [r3, #8]
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cac2:	609a      	str	r2, [r3, #8]
 800cac4:	e047      	b.n	800cb56 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	689a      	ldr	r2, [r3, #8]
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800cad4:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	689a      	ldr	r2, [r3, #8]
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cae4:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	b2da      	uxtb	r2, r3
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800caf6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800caf8:	f7f9 ffd6 	bl	8006aa8 <HAL_GetTick>
 800cafc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800cafe:	e013      	b.n	800cb28 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cb00:	f7f9 ffd2 	bl	8006aa8 <HAL_GetTick>
 800cb04:	4602      	mov	r2, r0
 800cb06:	69bb      	ldr	r3, [r7, #24]
 800cb08:	1ad3      	subs	r3, r2, r3
 800cb0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cb0e:	d90b      	bls.n	800cb28 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	22ff      	movs	r2, #255	@ 0xff
 800cb16:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2203      	movs	r2, #3
 800cb1c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2200      	movs	r2, #0
 800cb22:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800cb24:	2303      	movs	r3, #3
 800cb26:	e021      	b.n	800cb6c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	68db      	ldr	r3, [r3, #12]
 800cb2e:	f003 0302 	and.w	r3, r3, #2
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d0e4      	beq.n	800cb00 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	69fa      	ldr	r2, [r7, #28]
 800cb3c:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	697a      	ldr	r2, [r7, #20]
 800cb44:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	689a      	ldr	r2, [r3, #8]
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cb54:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	22ff      	movs	r2, #255	@ 0xff
 800cb5c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	2201      	movs	r2, #1
 800cb62:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2200      	movs	r2, #0
 800cb68:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800cb6a:	2300      	movs	r3, #0
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3724      	adds	r7, #36	@ 0x24
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd90      	pop	{r4, r7, pc}

0800cb74 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b084      	sub	sp, #16
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	4a0d      	ldr	r2, [pc, #52]	@ (800cbbc <HAL_RTC_WaitForSynchro+0x48>)
 800cb86:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cb88:	f7f9 ff8e 	bl	8006aa8 <HAL_GetTick>
 800cb8c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cb8e:	e009      	b.n	800cba4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cb90:	f7f9 ff8a 	bl	8006aa8 <HAL_GetTick>
 800cb94:	4602      	mov	r2, r0
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	1ad3      	subs	r3, r2, r3
 800cb9a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cb9e:	d901      	bls.n	800cba4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800cba0:	2303      	movs	r3, #3
 800cba2:	e007      	b.n	800cbb4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	68db      	ldr	r3, [r3, #12]
 800cbaa:	f003 0320 	and.w	r3, r3, #32
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d0ee      	beq.n	800cb90 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800cbb2:	2300      	movs	r3, #0
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3710      	adds	r7, #16
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}
 800cbbc:	0001ff5f 	.word	0x0001ff5f

0800cbc0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b084      	sub	sp, #16
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	68db      	ldr	r3, [r3, #12]
 800cbd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d122      	bne.n	800cc24 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	68da      	ldr	r2, [r3, #12]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cbec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cbee:	f7f9 ff5b 	bl	8006aa8 <HAL_GetTick>
 800cbf2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800cbf4:	e00c      	b.n	800cc10 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cbf6:	f7f9 ff57 	bl	8006aa8 <HAL_GetTick>
 800cbfa:	4602      	mov	r2, r0
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	1ad3      	subs	r3, r2, r3
 800cc00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cc04:	d904      	bls.n	800cc10 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2204      	movs	r2, #4
 800cc0a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	68db      	ldr	r3, [r3, #12]
 800cc16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d102      	bne.n	800cc24 <RTC_EnterInitMode+0x64>
 800cc1e:	7bfb      	ldrb	r3, [r7, #15]
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d1e8      	bne.n	800cbf6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800cc24:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3710      	adds	r7, #16
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}

0800cc2e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cc2e:	b580      	push	{r7, lr}
 800cc30:	b084      	sub	sp, #16
 800cc32:	af00      	add	r7, sp, #0
 800cc34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cc36:	2300      	movs	r3, #0
 800cc38:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	68da      	ldr	r2, [r3, #12]
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cc48:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	689b      	ldr	r3, [r3, #8]
 800cc50:	f003 0320 	and.w	r3, r3, #32
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d10a      	bne.n	800cc6e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f7ff ff8b 	bl	800cb74 <HAL_RTC_WaitForSynchro>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d004      	beq.n	800cc6e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2204      	movs	r2, #4
 800cc68:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800cc6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3710      	adds	r7, #16
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b085      	sub	sp, #20
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	4603      	mov	r3, r0
 800cc80:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800cc82:	2300      	movs	r3, #0
 800cc84:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800cc86:	e005      	b.n	800cc94 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800cc8e:	79fb      	ldrb	r3, [r7, #7]
 800cc90:	3b0a      	subs	r3, #10
 800cc92:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800cc94:	79fb      	ldrb	r3, [r7, #7]
 800cc96:	2b09      	cmp	r3, #9
 800cc98:	d8f6      	bhi.n	800cc88 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	011b      	lsls	r3, r3, #4
 800cca0:	b2da      	uxtb	r2, r3
 800cca2:	79fb      	ldrb	r3, [r7, #7]
 800cca4:	4313      	orrs	r3, r2
 800cca6:	b2db      	uxtb	r3, r3
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3714      	adds	r7, #20
 800ccac:	46bd      	mov	sp, r7
 800ccae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb2:	4770      	bx	lr

0800ccb4 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b087      	sub	sp, #28
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	60f8      	str	r0, [r7, #12]
 800ccbc:	60b9      	str	r1, [r7, #8]
 800ccbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	7f1b      	ldrb	r3, [r3, #28]
 800ccc8:	2b01      	cmp	r3, #1
 800ccca:	d101      	bne.n	800ccd0 <HAL_RTCEx_SetTimeStamp+0x1c>
 800cccc:	2302      	movs	r3, #2
 800ccce:	e050      	b.n	800cd72 <HAL_RTCEx_SetTimeStamp+0xbe>
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	2202      	movs	r2, #2
 800ccda:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f022 0206 	bic.w	r2, r2, #6
 800ccea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	687a      	ldr	r2, [r7, #4]
 800ccf8:	430a      	orrs	r2, r1
 800ccfa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	689a      	ldr	r2, [r3, #8]
 800cd02:	4b1f      	ldr	r3, [pc, #124]	@ (800cd80 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800cd04:	4013      	ands	r3, r2
 800cd06:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800cd08:	697a      	ldr	r2, [r7, #20]
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	4313      	orrs	r3, r2
 800cd0e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	22ca      	movs	r2, #202	@ 0xca
 800cd16:	625a      	str	r2, [r3, #36]	@ 0x24
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	2253      	movs	r2, #83	@ 0x53
 800cd1e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	697a      	ldr	r2, [r7, #20]
 800cd26:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	68db      	ldr	r3, [r3, #12]
 800cd2e:	b2da      	uxtb	r2, r3
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800cd38:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	68db      	ldr	r3, [r3, #12]
 800cd40:	b2da      	uxtb	r2, r3
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800cd4a:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	689a      	ldr	r2, [r3, #8]
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cd5a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	22ff      	movs	r2, #255	@ 0xff
 800cd62:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	2201      	movs	r2, #1
 800cd68:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800cd70:	2300      	movs	r3, #0
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	371c      	adds	r7, #28
 800cd76:	46bd      	mov	sp, r7
 800cd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7c:	4770      	bx	lr
 800cd7e:	bf00      	nop
 800cd80:	fffff7f7 	.word	0xfffff7f7

0800cd84 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b088      	sub	sp, #32
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800cd90:	2300      	movs	r3, #0
 800cd92:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800cd94:	2300      	movs	r3, #0
 800cd96:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d101      	bne.n	800cda2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800cd9e:	2301      	movs	r3, #1
 800cda0:	e156      	b.n	800d050 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d106      	bne.n	800cdbc <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f7f8 fa5c 	bl	8005274 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2202      	movs	r2, #2
 800cdc0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f000 f95b 	bl	800d080 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	68db      	ldr	r3, [r3, #12]
 800cdce:	2b02      	cmp	r3, #2
 800cdd0:	d00c      	beq.n	800cdec <HAL_SAI_Init+0x68>
 800cdd2:	2b02      	cmp	r3, #2
 800cdd4:	d80d      	bhi.n	800cdf2 <HAL_SAI_Init+0x6e>
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d002      	beq.n	800cde0 <HAL_SAI_Init+0x5c>
 800cdda:	2b01      	cmp	r3, #1
 800cddc:	d003      	beq.n	800cde6 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800cdde:	e008      	b.n	800cdf2 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800cde0:	2300      	movs	r3, #0
 800cde2:	61fb      	str	r3, [r7, #28]
      break;
 800cde4:	e006      	b.n	800cdf4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800cde6:	2310      	movs	r3, #16
 800cde8:	61fb      	str	r3, [r7, #28]
      break;
 800cdea:	e003      	b.n	800cdf4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800cdec:	2320      	movs	r3, #32
 800cdee:	61fb      	str	r3, [r7, #28]
      break;
 800cdf0:	e000      	b.n	800cdf4 <HAL_SAI_Init+0x70>
      break;
 800cdf2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	689b      	ldr	r3, [r3, #8]
 800cdf8:	2b03      	cmp	r3, #3
 800cdfa:	d81e      	bhi.n	800ce3a <HAL_SAI_Init+0xb6>
 800cdfc:	a201      	add	r2, pc, #4	@ (adr r2, 800ce04 <HAL_SAI_Init+0x80>)
 800cdfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce02:	bf00      	nop
 800ce04:	0800ce15 	.word	0x0800ce15
 800ce08:	0800ce1b 	.word	0x0800ce1b
 800ce0c:	0800ce23 	.word	0x0800ce23
 800ce10:	0800ce2b 	.word	0x0800ce2b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800ce14:	2300      	movs	r3, #0
 800ce16:	617b      	str	r3, [r7, #20]
    }
    break;
 800ce18:	e010      	b.n	800ce3c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800ce1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce1e:	617b      	str	r3, [r7, #20]
    }
    break;
 800ce20:	e00c      	b.n	800ce3c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ce22:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ce26:	617b      	str	r3, [r7, #20]
    }
    break;
 800ce28:	e008      	b.n	800ce3c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ce2a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ce2e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800ce30:	69fb      	ldr	r3, [r7, #28]
 800ce32:	f043 0301 	orr.w	r3, r3, #1
 800ce36:	61fb      	str	r3, [r7, #28]
    }
    break;
 800ce38:	e000      	b.n	800ce3c <HAL_SAI_Init+0xb8>
    default:
      break;
 800ce3a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4a85      	ldr	r2, [pc, #532]	@ (800d058 <HAL_SAI_Init+0x2d4>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d004      	beq.n	800ce50 <HAL_SAI_Init+0xcc>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	4a84      	ldr	r2, [pc, #528]	@ (800d05c <HAL_SAI_Init+0x2d8>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d103      	bne.n	800ce58 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800ce50:	4a83      	ldr	r2, [pc, #524]	@ (800d060 <HAL_SAI_Init+0x2dc>)
 800ce52:	69fb      	ldr	r3, [r7, #28]
 800ce54:	6013      	str	r3, [r2, #0]
 800ce56:	e002      	b.n	800ce5e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800ce58:	4a82      	ldr	r2, [pc, #520]	@ (800d064 <HAL_SAI_Init+0x2e0>)
 800ce5a:	69fb      	ldr	r3, [r7, #28]
 800ce5c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	69db      	ldr	r3, [r3, #28]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d04c      	beq.n	800cf00 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800ce66:	2300      	movs	r3, #0
 800ce68:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	4a7a      	ldr	r2, [pc, #488]	@ (800d058 <HAL_SAI_Init+0x2d4>)
 800ce70:	4293      	cmp	r3, r2
 800ce72:	d004      	beq.n	800ce7e <HAL_SAI_Init+0xfa>
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	4a78      	ldr	r2, [pc, #480]	@ (800d05c <HAL_SAI_Init+0x2d8>)
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d104      	bne.n	800ce88 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800ce7e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800ce82:	f7ff fa6d 	bl	800c360 <HAL_RCCEx_GetPeriphCLKFreq>
 800ce86:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4a76      	ldr	r2, [pc, #472]	@ (800d068 <HAL_SAI_Init+0x2e4>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d004      	beq.n	800ce9c <HAL_SAI_Init+0x118>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	4a75      	ldr	r2, [pc, #468]	@ (800d06c <HAL_SAI_Init+0x2e8>)
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	d104      	bne.n	800cea6 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800ce9c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800cea0:	f7ff fa5e 	bl	800c360 <HAL_RCCEx_GetPeriphCLKFreq>
 800cea4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800cea6:	693a      	ldr	r2, [r7, #16]
 800cea8:	4613      	mov	r3, r2
 800ceaa:	009b      	lsls	r3, r3, #2
 800ceac:	4413      	add	r3, r2
 800ceae:	005b      	lsls	r3, r3, #1
 800ceb0:	461a      	mov	r2, r3
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	69db      	ldr	r3, [r3, #28]
 800ceb6:	025b      	lsls	r3, r3, #9
 800ceb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cebc:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	4a6b      	ldr	r2, [pc, #428]	@ (800d070 <HAL_SAI_Init+0x2ec>)
 800cec2:	fba2 2303 	umull	r2, r3, r2, r3
 800cec6:	08da      	lsrs	r2, r3, #3
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800cecc:	68f9      	ldr	r1, [r7, #12]
 800cece:	4b68      	ldr	r3, [pc, #416]	@ (800d070 <HAL_SAI_Init+0x2ec>)
 800ced0:	fba3 2301 	umull	r2, r3, r3, r1
 800ced4:	08da      	lsrs	r2, r3, #3
 800ced6:	4613      	mov	r3, r2
 800ced8:	009b      	lsls	r3, r3, #2
 800ceda:	4413      	add	r3, r2
 800cedc:	005b      	lsls	r3, r3, #1
 800cede:	1aca      	subs	r2, r1, r3
 800cee0:	2a08      	cmp	r2, #8
 800cee2:	d904      	bls.n	800ceee <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6a1b      	ldr	r3, [r3, #32]
 800cee8:	1c5a      	adds	r2, r3, #1
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cef2:	2b04      	cmp	r3, #4
 800cef4:	d104      	bne.n	800cf00 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6a1b      	ldr	r3, [r3, #32]
 800cefa:	085a      	lsrs	r2, r3, #1
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d003      	beq.n	800cf10 <HAL_SAI_Init+0x18c>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	685b      	ldr	r3, [r3, #4]
 800cf0c:	2b02      	cmp	r3, #2
 800cf0e:	d109      	bne.n	800cf24 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf14:	2b01      	cmp	r3, #1
 800cf16:	d101      	bne.n	800cf1c <HAL_SAI_Init+0x198>
 800cf18:	2300      	movs	r3, #0
 800cf1a:	e001      	b.n	800cf20 <HAL_SAI_Init+0x19c>
 800cf1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cf20:	61bb      	str	r3, [r7, #24]
 800cf22:	e008      	b.n	800cf36 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	d102      	bne.n	800cf32 <HAL_SAI_Init+0x1ae>
 800cf2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cf30:	e000      	b.n	800cf34 <HAL_SAI_Init+0x1b0>
 800cf32:	2300      	movs	r3, #0
 800cf34:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	6819      	ldr	r1, [r3, #0]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681a      	ldr	r2, [r3, #0]
 800cf40:	4b4c      	ldr	r3, [pc, #304]	@ (800d074 <HAL_SAI_Init+0x2f0>)
 800cf42:	400b      	ands	r3, r1
 800cf44:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	6819      	ldr	r1, [r3, #0]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	685a      	ldr	r2, [r3, #4]
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf54:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800cf5a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf60:	431a      	orrs	r2, r3
 800cf62:	69bb      	ldr	r3, [r7, #24]
 800cf64:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800cf6e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	691b      	ldr	r3, [r3, #16]
 800cf74:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800cf7a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6a1b      	ldr	r3, [r3, #32]
 800cf80:	051b      	lsls	r3, r3, #20
 800cf82:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	430a      	orrs	r2, r1
 800cf8a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	6859      	ldr	r1, [r3, #4]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681a      	ldr	r2, [r3, #0]
 800cf96:	4b38      	ldr	r3, [pc, #224]	@ (800d078 <HAL_SAI_Init+0x2f4>)
 800cf98:	400b      	ands	r3, r1
 800cf9a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	6859      	ldr	r1, [r3, #4]
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	699a      	ldr	r2, [r3, #24]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfaa:	431a      	orrs	r2, r3
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfb0:	431a      	orrs	r2, r3
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	430a      	orrs	r2, r1
 800cfb8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	6899      	ldr	r1, [r3, #8]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681a      	ldr	r2, [r3, #0]
 800cfc4:	4b2d      	ldr	r3, [pc, #180]	@ (800d07c <HAL_SAI_Init+0x2f8>)
 800cfc6:	400b      	ands	r3, r1
 800cfc8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	6899      	ldr	r1, [r3, #8]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfd4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800cfda:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800cfe0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800cfe6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfec:	3b01      	subs	r3, #1
 800cfee:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800cff0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	430a      	orrs	r2, r1
 800cff8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	68d9      	ldr	r1, [r3, #12]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681a      	ldr	r2, [r3, #0]
 800d004:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800d008:	400b      	ands	r3, r1
 800d00a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	68d9      	ldr	r1, [r3, #12]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d01a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d020:	041b      	lsls	r3, r3, #16
 800d022:	431a      	orrs	r2, r3
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d028:	3b01      	subs	r3, #1
 800d02a:	021b      	lsls	r3, r3, #8
 800d02c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	430a      	orrs	r2, r1
 800d034:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2200      	movs	r2, #0
 800d03a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2201      	movs	r2, #1
 800d042:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2200      	movs	r2, #0
 800d04a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800d04e:	2300      	movs	r3, #0
}
 800d050:	4618      	mov	r0, r3
 800d052:	3720      	adds	r7, #32
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}
 800d058:	40015804 	.word	0x40015804
 800d05c:	40015824 	.word	0x40015824
 800d060:	40015800 	.word	0x40015800
 800d064:	40015c00 	.word	0x40015c00
 800d068:	40015c04 	.word	0x40015c04
 800d06c:	40015c24 	.word	0x40015c24
 800d070:	cccccccd 	.word	0xcccccccd
 800d074:	ff05c010 	.word	0xff05c010
 800d078:	ffff1ff0 	.word	0xffff1ff0
 800d07c:	fff88000 	.word	0xfff88000

0800d080 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800d080:	b480      	push	{r7}
 800d082:	b085      	sub	sp, #20
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800d088:	4b17      	ldr	r3, [pc, #92]	@ (800d0e8 <SAI_Disable+0x68>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	4a17      	ldr	r2, [pc, #92]	@ (800d0ec <SAI_Disable+0x6c>)
 800d08e:	fba2 2303 	umull	r2, r3, r2, r3
 800d092:	0b1b      	lsrs	r3, r3, #12
 800d094:	009b      	lsls	r3, r3, #2
 800d096:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800d098:	2300      	movs	r3, #0
 800d09a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	681a      	ldr	r2, [r3, #0]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800d0aa:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	1e5a      	subs	r2, r3, #1
 800d0b0:	60fa      	str	r2, [r7, #12]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d10a      	bne.n	800d0cc <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0bc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800d0c6:	2303      	movs	r3, #3
 800d0c8:	72fb      	strb	r3, [r7, #11]
      break;
 800d0ca:	e006      	b.n	800d0da <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d1e8      	bne.n	800d0ac <SAI_Disable+0x2c>

  return status;
 800d0da:	7afb      	ldrb	r3, [r7, #11]
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	3714      	adds	r7, #20
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e6:	4770      	bx	lr
 800d0e8:	20000020 	.word	0x20000020
 800d0ec:	95cbec1b 	.word	0x95cbec1b

0800d0f0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b082      	sub	sp, #8
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d101      	bne.n	800d102 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d0fe:	2301      	movs	r3, #1
 800d100:	e022      	b.n	800d148 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d108:	b2db      	uxtb	r3, r3
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d105      	bne.n	800d11a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2200      	movs	r2, #0
 800d112:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f7f7 fcc7 	bl	8004aa8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2203      	movs	r2, #3
 800d11e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f000 f814 	bl	800d150 <HAL_SD_InitCard>
 800d128:	4603      	mov	r3, r0
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d001      	beq.n	800d132 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d12e:	2301      	movs	r3, #1
 800d130:	e00a      	b.n	800d148 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2200      	movs	r2, #0
 800d136:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2200      	movs	r2, #0
 800d13c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2201      	movs	r2, #1
 800d142:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800d146:	2300      	movs	r3, #0
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3708      	adds	r7, #8
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}

0800d150 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d150:	b5b0      	push	{r4, r5, r7, lr}
 800d152:	b08e      	sub	sp, #56	@ 0x38
 800d154:	af04      	add	r7, sp, #16
 800d156:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d158:	2300      	movs	r3, #0
 800d15a:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800d15c:	2300      	movs	r3, #0
 800d15e:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d160:	2300      	movs	r3, #0
 800d162:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d164:	2300      	movs	r3, #0
 800d166:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d168:	2300      	movs	r3, #0
 800d16a:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800d16c:	2376      	movs	r3, #118	@ 0x76
 800d16e:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681d      	ldr	r5, [r3, #0]
 800d174:	466c      	mov	r4, sp
 800d176:	f107 0318 	add.w	r3, r7, #24
 800d17a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d17e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d182:	f107 030c 	add.w	r3, r7, #12
 800d186:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d188:	4628      	mov	r0, r5
 800d18a:	f004 f809 	bl	80111a0 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	685a      	ldr	r2, [r3, #4]
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d19c:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f004 f846 	bl	8011234 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	685a      	ldr	r2, [r3, #4]
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d1b6:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800d1b8:	2002      	movs	r0, #2
 800d1ba:	f7f9 fc81 	bl	8006ac0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f000 ff02 	bl	800dfc8 <SD_PowerON>
 800d1c4:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800d1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d00b      	beq.n	800d1e4 <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d1d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1da:	431a      	orrs	r2, r3
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	e02e      	b.n	800d242 <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f000 fe21 	bl	800de2c <SD_InitCard>
 800d1ea:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800d1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d00b      	beq.n	800d20a <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d200:	431a      	orrs	r2, r3
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d206:	2301      	movs	r3, #1
 800d208:	e01b      	b.n	800d242 <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d212:	4618      	mov	r0, r3
 800d214:	f004 f8a0 	bl	8011358 <SDMMC_CmdBlockLength>
 800d218:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800d21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d00f      	beq.n	800d240 <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	4a09      	ldr	r2, [pc, #36]	@ (800d24c <HAL_SD_InitCard+0xfc>)
 800d226:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d22e:	431a      	orrs	r2, r3
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2201      	movs	r2, #1
 800d238:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d23c:	2301      	movs	r3, #1
 800d23e:	e000      	b.n	800d242 <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 800d240:	2300      	movs	r3, #0
}
 800d242:	4618      	mov	r0, r3
 800d244:	3728      	adds	r7, #40	@ 0x28
 800d246:	46bd      	mov	sp, r7
 800d248:	bdb0      	pop	{r4, r5, r7, pc}
 800d24a:	bf00      	nop
 800d24c:	004005ff 	.word	0x004005ff

0800d250 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b092      	sub	sp, #72	@ 0x48
 800d254:	af00      	add	r7, sp, #0
 800d256:	60f8      	str	r0, [r7, #12]
 800d258:	60b9      	str	r1, [r7, #8]
 800d25a:	607a      	str	r2, [r7, #4]
 800d25c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d25e:	f7f9 fc23 	bl	8006aa8 <HAL_GetTick>
 800d262:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d107      	bne.n	800d282 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d276:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d27e:	2301      	movs	r3, #1
 800d280:	e1bd      	b.n	800d5fe <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d288:	b2db      	uxtb	r3, r3
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	f040 81b0 	bne.w	800d5f0 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	2200      	movs	r2, #0
 800d294:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d296:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	441a      	add	r2, r3
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d907      	bls.n	800d2b4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2a8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	e1a4      	b.n	800d5fe <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	2203      	movs	r2, #3
 800d2b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2c8:	2b01      	cmp	r3, #1
 800d2ca:	d002      	beq.n	800d2d2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800d2cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2ce:	025b      	lsls	r3, r3, #9
 800d2d0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d2d2:	f04f 33ff 	mov.w	r3, #4294967295
 800d2d6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	025b      	lsls	r3, r3, #9
 800d2dc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d2de:	2390      	movs	r3, #144	@ 0x90
 800d2e0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d2e2:	2302      	movs	r3, #2
 800d2e4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	f107 0214 	add.w	r2, r7, #20
 800d2f6:	4611      	mov	r1, r2
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f004 f801 	bl	8011300 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	2b01      	cmp	r3, #1
 800d302:	d90a      	bls.n	800d31a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	2202      	movs	r2, #2
 800d308:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d310:	4618      	mov	r0, r3
 800d312:	f004 f865 	bl	80113e0 <SDMMC_CmdReadMultiBlock>
 800d316:	6478      	str	r0, [r7, #68]	@ 0x44
 800d318:	e009      	b.n	800d32e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	2201      	movs	r2, #1
 800d31e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d326:	4618      	mov	r0, r3
 800d328:	f004 f838 	bl	801139c <SDMMC_CmdReadSingleBlock>
 800d32c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d32e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d330:	2b00      	cmp	r3, #0
 800d332:	d012      	beq.n	800d35a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4a7a      	ldr	r2, [pc, #488]	@ (800d524 <HAL_SD_ReadBlocks+0x2d4>)
 800d33a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d340:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d342:	431a      	orrs	r2, r3
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	2201      	movs	r2, #1
 800d34c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	2200      	movs	r2, #0
 800d354:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d356:	2301      	movs	r3, #1
 800d358:	e151      	b.n	800d5fe <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800d35a:	69bb      	ldr	r3, [r7, #24]
 800d35c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d35e:	e061      	b.n	800d424 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d366:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d03c      	beq.n	800d3e8 <HAL_SD_ReadBlocks+0x198>
 800d36e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d370:	2b00      	cmp	r3, #0
 800d372:	d039      	beq.n	800d3e8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800d374:	2300      	movs	r3, #0
 800d376:	643b      	str	r3, [r7, #64]	@ 0x40
 800d378:	e033      	b.n	800d3e2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4618      	mov	r0, r3
 800d380:	f003 ff3a 	bl	80111f8 <SDMMC_ReadFIFO>
 800d384:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800d386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d388:	b2da      	uxtb	r2, r3
 800d38a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d38c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d38e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d390:	3301      	adds	r3, #1
 800d392:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800d394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d396:	3b01      	subs	r3, #1
 800d398:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800d39a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d39c:	0a1b      	lsrs	r3, r3, #8
 800d39e:	b2da      	uxtb	r2, r3
 800d3a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3a2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d3a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800d3aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3ac:	3b01      	subs	r3, #1
 800d3ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800d3b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3b2:	0c1b      	lsrs	r3, r3, #16
 800d3b4:	b2da      	uxtb	r2, r3
 800d3b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3b8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d3ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3bc:	3301      	adds	r3, #1
 800d3be:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800d3c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3c2:	3b01      	subs	r3, #1
 800d3c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800d3c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3c8:	0e1b      	lsrs	r3, r3, #24
 800d3ca:	b2da      	uxtb	r2, r3
 800d3cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3ce:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d3d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800d3d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3d8:	3b01      	subs	r3, #1
 800d3da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800d3dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3de:	3301      	adds	r3, #1
 800d3e0:	643b      	str	r3, [r7, #64]	@ 0x40
 800d3e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3e4:	2b07      	cmp	r3, #7
 800d3e6:	d9c8      	bls.n	800d37a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d3e8:	f7f9 fb5e 	bl	8006aa8 <HAL_GetTick>
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3f0:	1ad3      	subs	r3, r2, r3
 800d3f2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d902      	bls.n	800d3fe <HAL_SD_ReadBlocks+0x1ae>
 800d3f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d112      	bne.n	800d424 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	4a48      	ldr	r2, [pc, #288]	@ (800d524 <HAL_SD_ReadBlocks+0x2d4>)
 800d404:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d40a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2201      	movs	r2, #1
 800d416:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2200      	movs	r2, #0
 800d41e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800d420:	2303      	movs	r3, #3
 800d422:	e0ec      	b.n	800d5fe <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d42a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d096      	beq.n	800d360 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d022      	beq.n	800d486 <HAL_SD_ReadBlocks+0x236>
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	2b01      	cmp	r3, #1
 800d444:	d91f      	bls.n	800d486 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d44a:	2b03      	cmp	r3, #3
 800d44c:	d01b      	beq.n	800d486 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	4618      	mov	r0, r3
 800d454:	f004 f82a 	bl	80114ac <SDMMC_CmdStopTransfer>
 800d458:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d45a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d012      	beq.n	800d486 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	4a2f      	ldr	r2, [pc, #188]	@ (800d524 <HAL_SD_ReadBlocks+0x2d4>)
 800d466:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d46c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d46e:	431a      	orrs	r2, r3
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	2201      	movs	r2, #1
 800d478:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	2200      	movs	r2, #0
 800d480:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800d482:	2301      	movs	r3, #1
 800d484:	e0bb      	b.n	800d5fe <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d48c:	f003 0308 	and.w	r3, r3, #8
 800d490:	2b00      	cmp	r3, #0
 800d492:	d012      	beq.n	800d4ba <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4a22      	ldr	r2, [pc, #136]	@ (800d524 <HAL_SD_ReadBlocks+0x2d4>)
 800d49a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4a0:	f043 0208 	orr.w	r2, r3, #8
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	2201      	movs	r2, #1
 800d4ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	e0a1      	b.n	800d5fe <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4c0:	f003 0302 	and.w	r3, r3, #2
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d012      	beq.n	800d4ee <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	4a15      	ldr	r2, [pc, #84]	@ (800d524 <HAL_SD_ReadBlocks+0x2d4>)
 800d4ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4d4:	f043 0202 	orr.w	r2, r3, #2
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2201      	movs	r2, #1
 800d4e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	e087      	b.n	800d5fe <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4f4:	f003 0320 	and.w	r3, r3, #32
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d064      	beq.n	800d5c6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	4a08      	ldr	r2, [pc, #32]	@ (800d524 <HAL_SD_ReadBlocks+0x2d4>)
 800d502:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d508:	f043 0220 	orr.w	r2, r3, #32
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	2201      	movs	r2, #1
 800d514:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2200      	movs	r2, #0
 800d51c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d51e:	2301      	movs	r3, #1
 800d520:	e06d      	b.n	800d5fe <HAL_SD_ReadBlocks+0x3ae>
 800d522:	bf00      	nop
 800d524:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	4618      	mov	r0, r3
 800d52e:	f003 fe63 	bl	80111f8 <SDMMC_ReadFIFO>
 800d532:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800d534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d536:	b2da      	uxtb	r2, r3
 800d538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d53a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d53c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d53e:	3301      	adds	r3, #1
 800d540:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800d542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d544:	3b01      	subs	r3, #1
 800d546:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800d548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d54a:	0a1b      	lsrs	r3, r3, #8
 800d54c:	b2da      	uxtb	r2, r3
 800d54e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d550:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d554:	3301      	adds	r3, #1
 800d556:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800d558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d55a:	3b01      	subs	r3, #1
 800d55c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800d55e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d560:	0c1b      	lsrs	r3, r3, #16
 800d562:	b2da      	uxtb	r2, r3
 800d564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d566:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d56a:	3301      	adds	r3, #1
 800d56c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800d56e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d570:	3b01      	subs	r3, #1
 800d572:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800d574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d576:	0e1b      	lsrs	r3, r3, #24
 800d578:	b2da      	uxtb	r2, r3
 800d57a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d57c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d57e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d580:	3301      	adds	r3, #1
 800d582:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800d584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d586:	3b01      	subs	r3, #1
 800d588:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d58a:	f7f9 fa8d 	bl	8006aa8 <HAL_GetTick>
 800d58e:	4602      	mov	r2, r0
 800d590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d592:	1ad3      	subs	r3, r2, r3
 800d594:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d596:	429a      	cmp	r2, r3
 800d598:	d902      	bls.n	800d5a0 <HAL_SD_ReadBlocks+0x350>
 800d59a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d112      	bne.n	800d5c6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	4a18      	ldr	r2, [pc, #96]	@ (800d608 <HAL_SD_ReadBlocks+0x3b8>)
 800d5a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5ac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	2200      	movs	r2, #0
 800d5c0:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	e01b      	b.n	800d5fe <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d002      	beq.n	800d5da <HAL_SD_ReadBlocks+0x38a>
 800d5d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d1a6      	bne.n	800d528 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d5e2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2201      	movs	r2, #1
 800d5e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	e006      	b.n	800d5fe <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5f4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d5fc:	2301      	movs	r3, #1
  }
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3748      	adds	r7, #72	@ 0x48
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
 800d606:	bf00      	nop
 800d608:	004005ff 	.word	0x004005ff

0800d60c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b092      	sub	sp, #72	@ 0x48
 800d610:	af00      	add	r7, sp, #0
 800d612:	60f8      	str	r0, [r7, #12]
 800d614:	60b9      	str	r1, [r7, #8]
 800d616:	607a      	str	r2, [r7, #4]
 800d618:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d61a:	f7f9 fa45 	bl	8006aa8 <HAL_GetTick>
 800d61e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d107      	bne.n	800d63e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d632:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d63a:	2301      	movs	r3, #1
 800d63c:	e165      	b.n	800d90a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d644:	b2db      	uxtb	r3, r3
 800d646:	2b01      	cmp	r3, #1
 800d648:	f040 8158 	bne.w	800d8fc <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	2200      	movs	r2, #0
 800d650:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d652:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	441a      	add	r2, r3
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d907      	bls.n	800d670 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d664:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800d66c:	2301      	movs	r3, #1
 800d66e:	e14c      	b.n	800d90a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	2203      	movs	r2, #3
 800d674:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	2200      	movs	r2, #0
 800d67e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d684:	2b01      	cmp	r3, #1
 800d686:	d002      	beq.n	800d68e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800d688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d68a:	025b      	lsls	r3, r3, #9
 800d68c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d68e:	f04f 33ff 	mov.w	r3, #4294967295
 800d692:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	025b      	lsls	r3, r3, #9
 800d698:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d69a:	2390      	movs	r3, #144	@ 0x90
 800d69c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f107 0218 	add.w	r2, r7, #24
 800d6b2:	4611      	mov	r1, r2
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f003 fe23 	bl	8011300 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	d90a      	bls.n	800d6d6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	2220      	movs	r2, #32
 800d6c4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f003 fecb 	bl	8011468 <SDMMC_CmdWriteMultiBlock>
 800d6d2:	6478      	str	r0, [r7, #68]	@ 0x44
 800d6d4:	e009      	b.n	800d6ea <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	2210      	movs	r2, #16
 800d6da:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f003 fe9e 	bl	8011424 <SDMMC_CmdWriteSingleBlock>
 800d6e8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d6ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d012      	beq.n	800d716 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	4a87      	ldr	r2, [pc, #540]	@ (800d914 <HAL_SD_WriteBlocks+0x308>)
 800d6f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d6fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d6fe:	431a      	orrs	r2, r3
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2201      	movs	r2, #1
 800d708:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	2200      	movs	r2, #0
 800d710:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d712:	2301      	movs	r3, #1
 800d714:	e0f9      	b.n	800d90a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800d716:	69fb      	ldr	r3, [r7, #28]
 800d718:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d71a:	e065      	b.n	800d7e8 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d722:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d726:	2b00      	cmp	r3, #0
 800d728:	d040      	beq.n	800d7ac <HAL_SD_WriteBlocks+0x1a0>
 800d72a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d03d      	beq.n	800d7ac <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800d730:	2300      	movs	r3, #0
 800d732:	643b      	str	r3, [r7, #64]	@ 0x40
 800d734:	e037      	b.n	800d7a6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800d736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d738:	781b      	ldrb	r3, [r3, #0]
 800d73a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d73c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d73e:	3301      	adds	r3, #1
 800d740:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800d742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d744:	3b01      	subs	r3, #1
 800d746:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800d748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	021a      	lsls	r2, r3, #8
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	4313      	orrs	r3, r2
 800d752:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d756:	3301      	adds	r3, #1
 800d758:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800d75a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d75c:	3b01      	subs	r3, #1
 800d75e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800d760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d762:	781b      	ldrb	r3, [r3, #0]
 800d764:	041a      	lsls	r2, r3, #16
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	4313      	orrs	r3, r2
 800d76a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d76c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d76e:	3301      	adds	r3, #1
 800d770:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800d772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d774:	3b01      	subs	r3, #1
 800d776:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800d778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	061a      	lsls	r2, r3, #24
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	4313      	orrs	r3, r2
 800d782:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d786:	3301      	adds	r3, #1
 800d788:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800d78a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d78c:	3b01      	subs	r3, #1
 800d78e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f107 0214 	add.w	r2, r7, #20
 800d798:	4611      	mov	r1, r2
 800d79a:	4618      	mov	r0, r3
 800d79c:	f003 fd39 	bl	8011212 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800d7a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	643b      	str	r3, [r7, #64]	@ 0x40
 800d7a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7a8:	2b07      	cmp	r3, #7
 800d7aa:	d9c4      	bls.n	800d736 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d7ac:	f7f9 f97c 	bl	8006aa8 <HAL_GetTick>
 800d7b0:	4602      	mov	r2, r0
 800d7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7b4:	1ad3      	subs	r3, r2, r3
 800d7b6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d902      	bls.n	800d7c2 <HAL_SD_WriteBlocks+0x1b6>
 800d7bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d112      	bne.n	800d7e8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	4a53      	ldr	r2, [pc, #332]	@ (800d914 <HAL_SD_WriteBlocks+0x308>)
 800d7c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d7ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7d0:	431a      	orrs	r2, r3
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	2201      	movs	r2, #1
 800d7da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800d7e4:	2303      	movs	r3, #3
 800d7e6:	e090      	b.n	800d90a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7ee:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d092      	beq.n	800d71c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d800:	2b00      	cmp	r3, #0
 800d802:	d022      	beq.n	800d84a <HAL_SD_WriteBlocks+0x23e>
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	2b01      	cmp	r3, #1
 800d808:	d91f      	bls.n	800d84a <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d80e:	2b03      	cmp	r3, #3
 800d810:	d01b      	beq.n	800d84a <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	4618      	mov	r0, r3
 800d818:	f003 fe48 	bl	80114ac <SDMMC_CmdStopTransfer>
 800d81c:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d81e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d820:	2b00      	cmp	r3, #0
 800d822:	d012      	beq.n	800d84a <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	4a3a      	ldr	r2, [pc, #232]	@ (800d914 <HAL_SD_WriteBlocks+0x308>)
 800d82a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d832:	431a      	orrs	r2, r3
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	2201      	movs	r2, #1
 800d83c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	2200      	movs	r2, #0
 800d844:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800d846:	2301      	movs	r3, #1
 800d848:	e05f      	b.n	800d90a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d850:	f003 0308 	and.w	r3, r3, #8
 800d854:	2b00      	cmp	r3, #0
 800d856:	d012      	beq.n	800d87e <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	4a2d      	ldr	r2, [pc, #180]	@ (800d914 <HAL_SD_WriteBlocks+0x308>)
 800d85e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d864:	f043 0208 	orr.w	r2, r3, #8
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	2201      	movs	r2, #1
 800d870:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	2200      	movs	r2, #0
 800d878:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d87a:	2301      	movs	r3, #1
 800d87c:	e045      	b.n	800d90a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d884:	f003 0302 	and.w	r3, r3, #2
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d012      	beq.n	800d8b2 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	4a20      	ldr	r2, [pc, #128]	@ (800d914 <HAL_SD_WriteBlocks+0x308>)
 800d892:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d898:	f043 0202 	orr.w	r2, r3, #2
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	e02b      	b.n	800d90a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8b8:	f003 0310 	and.w	r3, r3, #16
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d012      	beq.n	800d8e6 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	4a13      	ldr	r2, [pc, #76]	@ (800d914 <HAL_SD_WriteBlocks+0x308>)
 800d8c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8cc:	f043 0210 	orr.w	r2, r3, #16
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	2200      	movs	r2, #0
 800d8e0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	e011      	b.n	800d90a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d8ee:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	e006      	b.n	800d90a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d900:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d908:	2301      	movs	r3, #1
  }
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3748      	adds	r7, #72	@ 0x48
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}
 800d912:	bf00      	nop
 800d914:	004005ff 	.word	0x004005ff

0800d918 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d918:	b480      	push	{r7}
 800d91a:	b083      	sub	sp, #12
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d926:	0f9b      	lsrs	r3, r3, #30
 800d928:	b2da      	uxtb	r2, r3
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d932:	0e9b      	lsrs	r3, r3, #26
 800d934:	b2db      	uxtb	r3, r3
 800d936:	f003 030f 	and.w	r3, r3, #15
 800d93a:	b2da      	uxtb	r2, r3
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d944:	0e1b      	lsrs	r3, r3, #24
 800d946:	b2db      	uxtb	r3, r3
 800d948:	f003 0303 	and.w	r3, r3, #3
 800d94c:	b2da      	uxtb	r2, r3
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d956:	0c1b      	lsrs	r3, r3, #16
 800d958:	b2da      	uxtb	r2, r3
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d962:	0a1b      	lsrs	r3, r3, #8
 800d964:	b2da      	uxtb	r2, r3
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d96e:	b2da      	uxtb	r2, r3
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d978:	0d1b      	lsrs	r3, r3, #20
 800d97a:	b29a      	uxth	r2, r3
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d984:	0c1b      	lsrs	r3, r3, #16
 800d986:	b2db      	uxtb	r3, r3
 800d988:	f003 030f 	and.w	r3, r3, #15
 800d98c:	b2da      	uxtb	r2, r3
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d996:	0bdb      	lsrs	r3, r3, #15
 800d998:	b2db      	uxtb	r3, r3
 800d99a:	f003 0301 	and.w	r3, r3, #1
 800d99e:	b2da      	uxtb	r2, r3
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d9a8:	0b9b      	lsrs	r3, r3, #14
 800d9aa:	b2db      	uxtb	r3, r3
 800d9ac:	f003 0301 	and.w	r3, r3, #1
 800d9b0:	b2da      	uxtb	r2, r3
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d9ba:	0b5b      	lsrs	r3, r3, #13
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	f003 0301 	and.w	r3, r3, #1
 800d9c2:	b2da      	uxtb	r2, r3
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d9cc:	0b1b      	lsrs	r3, r3, #12
 800d9ce:	b2db      	uxtb	r3, r3
 800d9d0:	f003 0301 	and.w	r3, r3, #1
 800d9d4:	b2da      	uxtb	r2, r3
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d163      	bne.n	800dab0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d9ec:	009a      	lsls	r2, r3, #2
 800d9ee:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800d9f2:	4013      	ands	r3, r2
 800d9f4:	687a      	ldr	r2, [r7, #4]
 800d9f6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800d9f8:	0f92      	lsrs	r2, r2, #30
 800d9fa:	431a      	orrs	r2, r3
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da04:	0edb      	lsrs	r3, r3, #27
 800da06:	b2db      	uxtb	r3, r3
 800da08:	f003 0307 	and.w	r3, r3, #7
 800da0c:	b2da      	uxtb	r2, r3
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da16:	0e1b      	lsrs	r3, r3, #24
 800da18:	b2db      	uxtb	r3, r3
 800da1a:	f003 0307 	and.w	r3, r3, #7
 800da1e:	b2da      	uxtb	r2, r3
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da28:	0d5b      	lsrs	r3, r3, #21
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	f003 0307 	and.w	r3, r3, #7
 800da30:	b2da      	uxtb	r2, r3
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da3a:	0c9b      	lsrs	r3, r3, #18
 800da3c:	b2db      	uxtb	r3, r3
 800da3e:	f003 0307 	and.w	r3, r3, #7
 800da42:	b2da      	uxtb	r2, r3
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da4c:	0bdb      	lsrs	r3, r3, #15
 800da4e:	b2db      	uxtb	r3, r3
 800da50:	f003 0307 	and.w	r3, r3, #7
 800da54:	b2da      	uxtb	r2, r3
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	691b      	ldr	r3, [r3, #16]
 800da5e:	1c5a      	adds	r2, r3, #1
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	7e1b      	ldrb	r3, [r3, #24]
 800da68:	b2db      	uxtb	r3, r3
 800da6a:	f003 0307 	and.w	r3, r3, #7
 800da6e:	3302      	adds	r3, #2
 800da70:	2201      	movs	r2, #1
 800da72:	fa02 f303 	lsl.w	r3, r2, r3
 800da76:	687a      	ldr	r2, [r7, #4]
 800da78:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800da7a:	fb03 f202 	mul.w	r2, r3, r2
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	7a1b      	ldrb	r3, [r3, #8]
 800da86:	b2db      	uxtb	r3, r3
 800da88:	f003 030f 	and.w	r3, r3, #15
 800da8c:	2201      	movs	r2, #1
 800da8e:	409a      	lsls	r2, r3
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da98:	687a      	ldr	r2, [r7, #4]
 800da9a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800da9c:	0a52      	lsrs	r2, r2, #9
 800da9e:	fb03 f202 	mul.w	r2, r3, r2
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800daac:	661a      	str	r2, [r3, #96]	@ 0x60
 800daae:	e031      	b.n	800db14 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dab4:	2b01      	cmp	r3, #1
 800dab6:	d11d      	bne.n	800daf4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dabc:	041b      	lsls	r3, r3, #16
 800dabe:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dac6:	0c1b      	lsrs	r3, r3, #16
 800dac8:	431a      	orrs	r2, r3
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	691b      	ldr	r3, [r3, #16]
 800dad2:	3301      	adds	r3, #1
 800dad4:	029a      	lsls	r2, r3, #10
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dae8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	661a      	str	r2, [r3, #96]	@ 0x60
 800daf2:	e00f      	b.n	800db14 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4a58      	ldr	r2, [pc, #352]	@ (800dc5c <HAL_SD_GetCardCSD+0x344>)
 800dafa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db00:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2201      	movs	r2, #1
 800db0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800db10:	2301      	movs	r3, #1
 800db12:	e09d      	b.n	800dc50 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db18:	0b9b      	lsrs	r3, r3, #14
 800db1a:	b2db      	uxtb	r3, r3
 800db1c:	f003 0301 	and.w	r3, r3, #1
 800db20:	b2da      	uxtb	r2, r3
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db2a:	09db      	lsrs	r3, r3, #7
 800db2c:	b2db      	uxtb	r3, r3
 800db2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db32:	b2da      	uxtb	r2, r3
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db3c:	b2db      	uxtb	r3, r3
 800db3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db42:	b2da      	uxtb	r2, r3
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db4c:	0fdb      	lsrs	r3, r3, #31
 800db4e:	b2da      	uxtb	r2, r3
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db58:	0f5b      	lsrs	r3, r3, #29
 800db5a:	b2db      	uxtb	r3, r3
 800db5c:	f003 0303 	and.w	r3, r3, #3
 800db60:	b2da      	uxtb	r2, r3
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db6a:	0e9b      	lsrs	r3, r3, #26
 800db6c:	b2db      	uxtb	r3, r3
 800db6e:	f003 0307 	and.w	r3, r3, #7
 800db72:	b2da      	uxtb	r2, r3
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db7c:	0d9b      	lsrs	r3, r3, #22
 800db7e:	b2db      	uxtb	r3, r3
 800db80:	f003 030f 	and.w	r3, r3, #15
 800db84:	b2da      	uxtb	r2, r3
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db8e:	0d5b      	lsrs	r3, r3, #21
 800db90:	b2db      	uxtb	r3, r3
 800db92:	f003 0301 	and.w	r3, r3, #1
 800db96:	b2da      	uxtb	r2, r3
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	2200      	movs	r2, #0
 800dba2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dbaa:	0c1b      	lsrs	r3, r3, #16
 800dbac:	b2db      	uxtb	r3, r3
 800dbae:	f003 0301 	and.w	r3, r3, #1
 800dbb2:	b2da      	uxtb	r2, r3
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dbbe:	0bdb      	lsrs	r3, r3, #15
 800dbc0:	b2db      	uxtb	r3, r3
 800dbc2:	f003 0301 	and.w	r3, r3, #1
 800dbc6:	b2da      	uxtb	r2, r3
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dbd2:	0b9b      	lsrs	r3, r3, #14
 800dbd4:	b2db      	uxtb	r3, r3
 800dbd6:	f003 0301 	and.w	r3, r3, #1
 800dbda:	b2da      	uxtb	r2, r3
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dbe6:	0b5b      	lsrs	r3, r3, #13
 800dbe8:	b2db      	uxtb	r3, r3
 800dbea:	f003 0301 	and.w	r3, r3, #1
 800dbee:	b2da      	uxtb	r2, r3
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dbfa:	0b1b      	lsrs	r3, r3, #12
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	f003 0301 	and.w	r3, r3, #1
 800dc02:	b2da      	uxtb	r2, r3
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc0e:	0a9b      	lsrs	r3, r3, #10
 800dc10:	b2db      	uxtb	r3, r3
 800dc12:	f003 0303 	and.w	r3, r3, #3
 800dc16:	b2da      	uxtb	r2, r3
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc22:	0a1b      	lsrs	r3, r3, #8
 800dc24:	b2db      	uxtb	r3, r3
 800dc26:	f003 0303 	and.w	r3, r3, #3
 800dc2a:	b2da      	uxtb	r2, r3
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc36:	085b      	lsrs	r3, r3, #1
 800dc38:	b2db      	uxtb	r3, r3
 800dc3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dc3e:	b2da      	uxtb	r2, r3
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	2201      	movs	r2, #1
 800dc4a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800dc4e:	2300      	movs	r3, #0
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	370c      	adds	r7, #12
 800dc54:	46bd      	mov	sp, r7
 800dc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5a:	4770      	bx	lr
 800dc5c:	004005ff 	.word	0x004005ff

0800dc60 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dc60:	b480      	push	{r7}
 800dc62:	b083      	sub	sp, #12
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dcaa:	2300      	movs	r3, #0
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	370c      	adds	r7, #12
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb6:	4770      	bx	lr

0800dcb8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dcb8:	b5b0      	push	{r4, r5, r7, lr}
 800dcba:	b08e      	sub	sp, #56	@ 0x38
 800dcbc:	af04      	add	r7, sp, #16
 800dcbe:	6078      	str	r0, [r7, #4]
 800dcc0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2203      	movs	r2, #3
 800dccc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcd4:	2b03      	cmp	r3, #3
 800dcd6:	d02e      	beq.n	800dd36 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dcde:	d106      	bne.n	800dcee <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dce4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	639a      	str	r2, [r3, #56]	@ 0x38
 800dcec:	e029      	b.n	800dd42 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dcf4:	d10a      	bne.n	800dd0c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f000 fa1c 	bl	800e134 <SD_WideBus_Enable>
 800dcfc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dd02:	6a3b      	ldr	r3, [r7, #32]
 800dd04:	431a      	orrs	r2, r3
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	639a      	str	r2, [r3, #56]	@ 0x38
 800dd0a:	e01a      	b.n	800dd42 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d10a      	bne.n	800dd28 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f000 fa59 	bl	800e1ca <SD_WideBus_Disable>
 800dd18:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dd1e:	6a3b      	ldr	r3, [r7, #32]
 800dd20:	431a      	orrs	r2, r3
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	639a      	str	r2, [r3, #56]	@ 0x38
 800dd26:	e00c      	b.n	800dd42 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd2c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	639a      	str	r2, [r3, #56]	@ 0x38
 800dd34:	e005      	b.n	800dd42 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd3a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d00b      	beq.n	800dd62 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	4a26      	ldr	r2, [pc, #152]	@ (800dde8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800dd50:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	2201      	movs	r2, #1
 800dd56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dd60:	e01f      	b.n	800dda2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	685b      	ldr	r3, [r3, #4]
 800dd66:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	689b      	ldr	r3, [r3, #8]
 800dd6c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	68db      	ldr	r3, [r3, #12]
 800dd72:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	695b      	ldr	r3, [r3, #20]
 800dd7c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	699b      	ldr	r3, [r3, #24]
 800dd82:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681d      	ldr	r5, [r3, #0]
 800dd88:	466c      	mov	r4, sp
 800dd8a:	f107 0314 	add.w	r3, r7, #20
 800dd8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dd92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dd96:	f107 0308 	add.w	r3, r7, #8
 800dd9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dd9c:	4628      	mov	r0, r5
 800dd9e:	f003 f9ff 	bl	80111a0 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f003 fad4 	bl	8011358 <SDMMC_CmdBlockLength>
 800ddb0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ddb2:	6a3b      	ldr	r3, [r7, #32]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d00c      	beq.n	800ddd2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	4a0a      	ldr	r2, [pc, #40]	@ (800dde8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800ddbe:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ddc4:	6a3b      	ldr	r3, [r7, #32]
 800ddc6:	431a      	orrs	r2, r3
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800ddcc:	2301      	movs	r3, #1
 800ddce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2201      	movs	r2, #1
 800ddd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800ddda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3728      	adds	r7, #40	@ 0x28
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bdb0      	pop	{r4, r5, r7, pc}
 800dde6:	bf00      	nop
 800dde8:	004005ff 	.word	0x004005ff

0800ddec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b086      	sub	sp, #24
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ddf8:	f107 030c 	add.w	r3, r7, #12
 800ddfc:	4619      	mov	r1, r3
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f000 f970 	bl	800e0e4 <SD_SendStatus>
 800de04:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d005      	beq.n	800de18 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800de10:	697b      	ldr	r3, [r7, #20]
 800de12:	431a      	orrs	r2, r3
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	0a5b      	lsrs	r3, r3, #9
 800de1c:	f003 030f 	and.w	r3, r3, #15
 800de20:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800de22:	693b      	ldr	r3, [r7, #16]
}
 800de24:	4618      	mov	r0, r3
 800de26:	3718      	adds	r7, #24
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}

0800de2c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800de2c:	b5b0      	push	{r4, r5, r7, lr}
 800de2e:	b094      	sub	sp, #80	@ 0x50
 800de30:	af04      	add	r7, sp, #16
 800de32:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800de34:	2301      	movs	r3, #1
 800de36:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	4618      	mov	r0, r3
 800de3e:	f003 fa07 	bl	8011250 <SDMMC_GetPowerState>
 800de42:	4603      	mov	r3, r0
 800de44:	2b00      	cmp	r3, #0
 800de46:	d102      	bne.n	800de4e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800de48:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800de4c:	e0b8      	b.n	800dfc0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de52:	2b03      	cmp	r3, #3
 800de54:	d02f      	beq.n	800deb6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	4618      	mov	r0, r3
 800de5c:	f003 fc31 	bl	80116c2 <SDMMC_CmdSendCID>
 800de60:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800de62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de64:	2b00      	cmp	r3, #0
 800de66:	d001      	beq.n	800de6c <SD_InitCard+0x40>
    {
      return errorstate;
 800de68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de6a:	e0a9      	b.n	800dfc0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	2100      	movs	r1, #0
 800de72:	4618      	mov	r0, r3
 800de74:	f003 fa31 	bl	80112da <SDMMC_GetResponse>
 800de78:	4602      	mov	r2, r0
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2104      	movs	r1, #4
 800de84:	4618      	mov	r0, r3
 800de86:	f003 fa28 	bl	80112da <SDMMC_GetResponse>
 800de8a:	4602      	mov	r2, r0
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	2108      	movs	r1, #8
 800de96:	4618      	mov	r0, r3
 800de98:	f003 fa1f 	bl	80112da <SDMMC_GetResponse>
 800de9c:	4602      	mov	r2, r0
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	210c      	movs	r1, #12
 800dea8:	4618      	mov	r0, r3
 800deaa:	f003 fa16 	bl	80112da <SDMMC_GetResponse>
 800deae:	4602      	mov	r2, r0
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800deba:	2b03      	cmp	r3, #3
 800debc:	d00d      	beq.n	800deda <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	f107 020e 	add.w	r2, r7, #14
 800dec6:	4611      	mov	r1, r2
 800dec8:	4618      	mov	r0, r3
 800deca:	f003 fc37 	bl	801173c <SDMMC_CmdSetRelAdd>
 800dece:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ded0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d001      	beq.n	800deda <SD_InitCard+0xae>
    {
      return errorstate;
 800ded6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ded8:	e072      	b.n	800dfc0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dede:	2b03      	cmp	r3, #3
 800dee0:	d036      	beq.n	800df50 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800dee2:	89fb      	ldrh	r3, [r7, #14]
 800dee4:	461a      	mov	r2, r3
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681a      	ldr	r2, [r3, #0]
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800def2:	041b      	lsls	r3, r3, #16
 800def4:	4619      	mov	r1, r3
 800def6:	4610      	mov	r0, r2
 800def8:	f003 fc01 	bl	80116fe <SDMMC_CmdSendCSD>
 800defc:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800defe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df00:	2b00      	cmp	r3, #0
 800df02:	d001      	beq.n	800df08 <SD_InitCard+0xdc>
    {
      return errorstate;
 800df04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df06:	e05b      	b.n	800dfc0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	2100      	movs	r1, #0
 800df0e:	4618      	mov	r0, r3
 800df10:	f003 f9e3 	bl	80112da <SDMMC_GetResponse>
 800df14:	4602      	mov	r2, r0
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	2104      	movs	r1, #4
 800df20:	4618      	mov	r0, r3
 800df22:	f003 f9da 	bl	80112da <SDMMC_GetResponse>
 800df26:	4602      	mov	r2, r0
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2108      	movs	r1, #8
 800df32:	4618      	mov	r0, r3
 800df34:	f003 f9d1 	bl	80112da <SDMMC_GetResponse>
 800df38:	4602      	mov	r2, r0
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	210c      	movs	r1, #12
 800df44:	4618      	mov	r0, r3
 800df46:	f003 f9c8 	bl	80112da <SDMMC_GetResponse>
 800df4a:	4602      	mov	r2, r0
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	2104      	movs	r1, #4
 800df56:	4618      	mov	r0, r3
 800df58:	f003 f9bf 	bl	80112da <SDMMC_GetResponse>
 800df5c:	4603      	mov	r3, r0
 800df5e:	0d1a      	lsrs	r2, r3, #20
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800df64:	f107 0310 	add.w	r3, r7, #16
 800df68:	4619      	mov	r1, r3
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f7ff fcd4 	bl	800d918 <HAL_SD_GetCardCSD>
 800df70:	4603      	mov	r3, r0
 800df72:	2b00      	cmp	r3, #0
 800df74:	d002      	beq.n	800df7c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800df76:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800df7a:	e021      	b.n	800dfc0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6819      	ldr	r1, [r3, #0]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df84:	041b      	lsls	r3, r3, #16
 800df86:	2200      	movs	r2, #0
 800df88:	461c      	mov	r4, r3
 800df8a:	4615      	mov	r5, r2
 800df8c:	4622      	mov	r2, r4
 800df8e:	462b      	mov	r3, r5
 800df90:	4608      	mov	r0, r1
 800df92:	f003 faad 	bl	80114f0 <SDMMC_CmdSelDesel>
 800df96:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800df98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d001      	beq.n	800dfa2 <SD_InitCard+0x176>
  {
    return errorstate;
 800df9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfa0:	e00e      	b.n	800dfc0 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681d      	ldr	r5, [r3, #0]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	466c      	mov	r4, sp
 800dfaa:	f103 0210 	add.w	r2, r3, #16
 800dfae:	ca07      	ldmia	r2, {r0, r1, r2}
 800dfb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dfb4:	3304      	adds	r3, #4
 800dfb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dfb8:	4628      	mov	r0, r5
 800dfba:	f003 f8f1 	bl	80111a0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800dfbe:	2300      	movs	r3, #0
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3740      	adds	r7, #64	@ 0x40
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bdb0      	pop	{r4, r5, r7, pc}

0800dfc8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b086      	sub	sp, #24
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	617b      	str	r3, [r7, #20]
 800dfd8:	2300      	movs	r3, #0
 800dfda:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f003 faa8 	bl	8011536 <SDMMC_CmdGoIdleState>
 800dfe6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d001      	beq.n	800dff2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	e072      	b.n	800e0d8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	4618      	mov	r0, r3
 800dff8:	f003 fabb 	bl	8011572 <SDMMC_CmdOperCond>
 800dffc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d00d      	beq.n	800e020 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2200      	movs	r2, #0
 800e008:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	4618      	mov	r0, r3
 800e010:	f003 fa91 	bl	8011536 <SDMMC_CmdGoIdleState>
 800e014:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d004      	beq.n	800e026 <SD_PowerON+0x5e>
    {
      return errorstate;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	e05b      	b.n	800e0d8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2201      	movs	r2, #1
 800e024:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e02a:	2b01      	cmp	r3, #1
 800e02c:	d137      	bne.n	800e09e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	2100      	movs	r1, #0
 800e034:	4618      	mov	r0, r3
 800e036:	f003 fabb 	bl	80115b0 <SDMMC_CmdAppCommand>
 800e03a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d02d      	beq.n	800e09e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e042:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800e046:	e047      	b.n	800e0d8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	2100      	movs	r1, #0
 800e04e:	4618      	mov	r0, r3
 800e050:	f003 faae 	bl	80115b0 <SDMMC_CmdAppCommand>
 800e054:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d001      	beq.n	800e060 <SD_PowerON+0x98>
    {
      return errorstate;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	e03b      	b.n	800e0d8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	491e      	ldr	r1, [pc, #120]	@ (800e0e0 <SD_PowerON+0x118>)
 800e066:	4618      	mov	r0, r3
 800e068:	f003 fac4 	bl	80115f4 <SDMMC_CmdAppOperCommand>
 800e06c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d002      	beq.n	800e07a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e074:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800e078:	e02e      	b.n	800e0d8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	2100      	movs	r1, #0
 800e080:	4618      	mov	r0, r3
 800e082:	f003 f92a 	bl	80112da <SDMMC_GetResponse>
 800e086:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	0fdb      	lsrs	r3, r3, #31
 800e08c:	2b01      	cmp	r3, #1
 800e08e:	d101      	bne.n	800e094 <SD_PowerON+0xcc>
 800e090:	2301      	movs	r3, #1
 800e092:	e000      	b.n	800e096 <SD_PowerON+0xce>
 800e094:	2300      	movs	r3, #0
 800e096:	613b      	str	r3, [r7, #16]

    count++;
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	3301      	adds	r3, #1
 800e09c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	d802      	bhi.n	800e0ae <SD_PowerON+0xe6>
 800e0a8:	693b      	ldr	r3, [r7, #16]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d0cc      	beq.n	800e048 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800e0b4:	4293      	cmp	r3, r2
 800e0b6:	d902      	bls.n	800e0be <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e0b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e0bc:	e00c      	b.n	800e0d8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d003      	beq.n	800e0d0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2201      	movs	r2, #1
 800e0cc:	645a      	str	r2, [r3, #68]	@ 0x44
 800e0ce:	e002      	b.n	800e0d6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e0d6:	2300      	movs	r3, #0
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3718      	adds	r7, #24
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}
 800e0e0:	c1100000 	.word	0xc1100000

0800e0e4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b084      	sub	sp, #16
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d102      	bne.n	800e0fa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e0f4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e0f8:	e018      	b.n	800e12c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681a      	ldr	r2, [r3, #0]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e102:	041b      	lsls	r3, r3, #16
 800e104:	4619      	mov	r1, r3
 800e106:	4610      	mov	r0, r2
 800e108:	f003 fb39 	bl	801177e <SDMMC_CmdSendStatus>
 800e10c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d001      	beq.n	800e118 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	e009      	b.n	800e12c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	2100      	movs	r1, #0
 800e11e:	4618      	mov	r0, r3
 800e120:	f003 f8db 	bl	80112da <SDMMC_GetResponse>
 800e124:	4602      	mov	r2, r0
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e12a:	2300      	movs	r3, #0
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3710      	adds	r7, #16
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}

0800e134 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b086      	sub	sp, #24
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e13c:	2300      	movs	r3, #0
 800e13e:	60fb      	str	r3, [r7, #12]
 800e140:	2300      	movs	r3, #0
 800e142:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	2100      	movs	r1, #0
 800e14a:	4618      	mov	r0, r3
 800e14c:	f003 f8c5 	bl	80112da <SDMMC_GetResponse>
 800e150:	4603      	mov	r3, r0
 800e152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e156:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e15a:	d102      	bne.n	800e162 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e15c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e160:	e02f      	b.n	800e1c2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e162:	f107 030c 	add.w	r3, r7, #12
 800e166:	4619      	mov	r1, r3
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f000 f879 	bl	800e260 <SD_FindSCR>
 800e16e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d001      	beq.n	800e17a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	e023      	b.n	800e1c2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e17a:	693b      	ldr	r3, [r7, #16]
 800e17c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e180:	2b00      	cmp	r3, #0
 800e182:	d01c      	beq.n	800e1be <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681a      	ldr	r2, [r3, #0]
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e18c:	041b      	lsls	r3, r3, #16
 800e18e:	4619      	mov	r1, r3
 800e190:	4610      	mov	r0, r2
 800e192:	f003 fa0d 	bl	80115b0 <SDMMC_CmdAppCommand>
 800e196:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d001      	beq.n	800e1a2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	e00f      	b.n	800e1c2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	2102      	movs	r1, #2
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f003 fa47 	bl	801163c <SDMMC_CmdBusWidth>
 800e1ae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d001      	beq.n	800e1ba <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e1b6:	697b      	ldr	r3, [r7, #20]
 800e1b8:	e003      	b.n	800e1c2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	e001      	b.n	800e1c2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e1be:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3718      	adds	r7, #24
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}

0800e1ca <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e1ca:	b580      	push	{r7, lr}
 800e1cc:	b086      	sub	sp, #24
 800e1ce:	af00      	add	r7, sp, #0
 800e1d0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	60fb      	str	r3, [r7, #12]
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	2100      	movs	r1, #0
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f003 f87a 	bl	80112da <SDMMC_GetResponse>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e1ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e1f0:	d102      	bne.n	800e1f8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e1f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e1f6:	e02f      	b.n	800e258 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e1f8:	f107 030c 	add.w	r3, r7, #12
 800e1fc:	4619      	mov	r1, r3
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f000 f82e 	bl	800e260 <SD_FindSCR>
 800e204:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d001      	beq.n	800e210 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	e023      	b.n	800e258 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e216:	2b00      	cmp	r3, #0
 800e218:	d01c      	beq.n	800e254 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681a      	ldr	r2, [r3, #0]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e222:	041b      	lsls	r3, r3, #16
 800e224:	4619      	mov	r1, r3
 800e226:	4610      	mov	r0, r2
 800e228:	f003 f9c2 	bl	80115b0 <SDMMC_CmdAppCommand>
 800e22c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d001      	beq.n	800e238 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	e00f      	b.n	800e258 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	2100      	movs	r1, #0
 800e23e:	4618      	mov	r0, r3
 800e240:	f003 f9fc 	bl	801163c <SDMMC_CmdBusWidth>
 800e244:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e246:	697b      	ldr	r3, [r7, #20]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d001      	beq.n	800e250 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	e003      	b.n	800e258 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e250:	2300      	movs	r3, #0
 800e252:	e001      	b.n	800e258 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e254:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800e258:	4618      	mov	r0, r3
 800e25a:	3718      	adds	r7, #24
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}

0800e260 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e260:	b590      	push	{r4, r7, lr}
 800e262:	b08f      	sub	sp, #60	@ 0x3c
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
 800e268:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e26a:	f7f8 fc1d 	bl	8006aa8 <HAL_GetTick>
 800e26e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800e270:	2300      	movs	r3, #0
 800e272:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e274:	2300      	movs	r3, #0
 800e276:	60bb      	str	r3, [r7, #8]
 800e278:	2300      	movs	r3, #0
 800e27a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	2108      	movs	r1, #8
 800e286:	4618      	mov	r0, r3
 800e288:	f003 f866 	bl	8011358 <SDMMC_CmdBlockLength>
 800e28c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e28e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e290:	2b00      	cmp	r3, #0
 800e292:	d001      	beq.n	800e298 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e296:	e0b2      	b.n	800e3fe <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681a      	ldr	r2, [r3, #0]
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2a0:	041b      	lsls	r3, r3, #16
 800e2a2:	4619      	mov	r1, r3
 800e2a4:	4610      	mov	r0, r2
 800e2a6:	f003 f983 	bl	80115b0 <SDMMC_CmdAppCommand>
 800e2aa:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d001      	beq.n	800e2b6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e2b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2b4:	e0a3      	b.n	800e3fe <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e2b6:	f04f 33ff 	mov.w	r3, #4294967295
 800e2ba:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e2bc:	2308      	movs	r3, #8
 800e2be:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e2c0:	2330      	movs	r3, #48	@ 0x30
 800e2c2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e2c4:	2302      	movs	r3, #2
 800e2c6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	f107 0210 	add.w	r2, r7, #16
 800e2d8:	4611      	mov	r1, r2
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f003 f810 	bl	8011300 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f003 f9cb 	bl	8011680 <SDMMC_CmdSendSCR>
 800e2ea:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d02a      	beq.n	800e348 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800e2f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2f4:	e083      	b.n	800e3fe <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e300:	2b00      	cmp	r3, #0
 800e302:	d00f      	beq.n	800e324 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6819      	ldr	r1, [r3, #0]
 800e308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e30a:	009b      	lsls	r3, r3, #2
 800e30c:	f107 0208 	add.w	r2, r7, #8
 800e310:	18d4      	adds	r4, r2, r3
 800e312:	4608      	mov	r0, r1
 800e314:	f002 ff70 	bl	80111f8 <SDMMC_ReadFIFO>
 800e318:	4603      	mov	r3, r0
 800e31a:	6023      	str	r3, [r4, #0]
      index++;
 800e31c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e31e:	3301      	adds	r3, #1
 800e320:	637b      	str	r3, [r7, #52]	@ 0x34
 800e322:	e006      	b.n	800e332 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e32a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d012      	beq.n	800e358 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800e332:	f7f8 fbb9 	bl	8006aa8 <HAL_GetTick>
 800e336:	4602      	mov	r2, r0
 800e338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e33a:	1ad3      	subs	r3, r2, r3
 800e33c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e340:	d102      	bne.n	800e348 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e342:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e346:	e05a      	b.n	800e3fe <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e34e:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800e352:	2b00      	cmp	r3, #0
 800e354:	d0cf      	beq.n	800e2f6 <SD_FindSCR+0x96>
 800e356:	e000      	b.n	800e35a <SD_FindSCR+0xfa>
      break;
 800e358:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e360:	f003 0308 	and.w	r3, r3, #8
 800e364:	2b00      	cmp	r3, #0
 800e366:	d005      	beq.n	800e374 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	2208      	movs	r2, #8
 800e36e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e370:	2308      	movs	r3, #8
 800e372:	e044      	b.n	800e3fe <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e37a:	f003 0302 	and.w	r3, r3, #2
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d005      	beq.n	800e38e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	2202      	movs	r2, #2
 800e388:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e38a:	2302      	movs	r3, #2
 800e38c:	e037      	b.n	800e3fe <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e394:	f003 0320 	and.w	r3, r3, #32
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d005      	beq.n	800e3a8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	2220      	movs	r2, #32
 800e3a2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e3a4:	2320      	movs	r3, #32
 800e3a6:	e02a      	b.n	800e3fe <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	f240 523a 	movw	r2, #1338	@ 0x53a
 800e3b0:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	061a      	lsls	r2, r3, #24
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	021b      	lsls	r3, r3, #8
 800e3ba:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e3be:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	0a1b      	lsrs	r3, r3, #8
 800e3c4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e3c8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	0e1b      	lsrs	r3, r3, #24
 800e3ce:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e3d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3d2:	601a      	str	r2, [r3, #0]
    scr++;
 800e3d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3d6:	3304      	adds	r3, #4
 800e3d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	061a      	lsls	r2, r3, #24
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	021b      	lsls	r3, r3, #8
 800e3e2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e3e6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	0a1b      	lsrs	r3, r3, #8
 800e3ec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e3f0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	0e1b      	lsrs	r3, r3, #24
 800e3f6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e3f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3fa:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e3fc:	2300      	movs	r3, #0
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	373c      	adds	r7, #60	@ 0x3c
 800e402:	46bd      	mov	sp, r7
 800e404:	bd90      	pop	{r4, r7, pc}

0800e406 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800e406:	b580      	push	{r7, lr}
 800e408:	b082      	sub	sp, #8
 800e40a:	af00      	add	r7, sp, #0
 800e40c:	6078      	str	r0, [r7, #4]
 800e40e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d101      	bne.n	800e41a <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800e416:	2301      	movs	r3, #1
 800e418:	e025      	b.n	800e466 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e420:	b2db      	uxtb	r3, r3
 800e422:	2b00      	cmp	r3, #0
 800e424:	d106      	bne.n	800e434 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2200      	movs	r2, #0
 800e42a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f7f6 ff16 	bl	8005260 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2202      	movs	r2, #2
 800e438:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681a      	ldr	r2, [r3, #0]
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	3304      	adds	r3, #4
 800e444:	4619      	mov	r1, r3
 800e446:	4610      	mov	r0, r2
 800e448:	f002 fde4 	bl	8011014 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6818      	ldr	r0, [r3, #0]
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	685b      	ldr	r3, [r3, #4]
 800e454:	461a      	mov	r2, r3
 800e456:	6839      	ldr	r1, [r7, #0]
 800e458:	f002 fe38 	bl	80110cc <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2201      	movs	r2, #1
 800e460:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800e464:	2300      	movs	r3, #0
}
 800e466:	4618      	mov	r0, r3
 800e468:	3708      	adds	r7, #8
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}
	...

0800e470 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b084      	sub	sp, #16
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d101      	bne.n	800e482 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800e47e:	2301      	movs	r3, #1
 800e480:	e04c      	b.n	800e51c <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e488:	b2db      	uxtb	r3, r3
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d106      	bne.n	800e49c <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	2200      	movs	r2, #0
 800e492:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f7f6 fb68 	bl	8004b6c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2202      	movs	r2, #2
 800e4a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	681a      	ldr	r2, [r3, #0]
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f022 0203 	bic.w	r2, r2, #3
 800e4b2:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800e4bc:	68fa      	ldr	r2, [r7, #12]
 800e4be:	4b19      	ldr	r3, [pc, #100]	@ (800e524 <HAL_SPDIFRX_Init+0xb4>)
 800e4c0:	4013      	ands	r3, r2
 800e4c2:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800e4cc:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800e4d2:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800e4d8:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800e4de:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800e4e4:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800e4ea:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800e4f0:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800e4f6:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800e4fc:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800e4fe:	68fa      	ldr	r2, [r7, #12]
 800e500:	4313      	orrs	r3, r2
 800e502:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	68fa      	ldr	r2, [r7, #12]
 800e50a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2200      	movs	r2, #0
 800e510:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2201      	movs	r2, #1
 800e516:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800e51a:	2300      	movs	r3, #0
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	3710      	adds	r7, #16
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}
 800e524:	fff88407 	.word	0xfff88407

0800e528 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b084      	sub	sp, #16
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d101      	bne.n	800e53a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e536:	2301      	movs	r3, #1
 800e538:	e09d      	b.n	800e676 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d108      	bne.n	800e554 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	685b      	ldr	r3, [r3, #4]
 800e546:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e54a:	d009      	beq.n	800e560 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2200      	movs	r2, #0
 800e550:	61da      	str	r2, [r3, #28]
 800e552:	e005      	b.n	800e560 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2200      	movs	r2, #0
 800e558:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2200      	movs	r2, #0
 800e55e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2200      	movs	r2, #0
 800e564:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e56c:	b2db      	uxtb	r3, r3
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d106      	bne.n	800e580 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2200      	movs	r2, #0
 800e576:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f7f6 fb5a 	bl	8004c34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2202      	movs	r2, #2
 800e584:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	681a      	ldr	r2, [r3, #0]
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e596:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	68db      	ldr	r3, [r3, #12]
 800e59c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e5a0:	d902      	bls.n	800e5a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	60fb      	str	r3, [r7, #12]
 800e5a6:	e002      	b.n	800e5ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e5a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e5ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	68db      	ldr	r3, [r3, #12]
 800e5b2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800e5b6:	d007      	beq.n	800e5c8 <HAL_SPI_Init+0xa0>
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	68db      	ldr	r3, [r3, #12]
 800e5bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e5c0:	d002      	beq.n	800e5c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	685b      	ldr	r3, [r3, #4]
 800e5cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	689b      	ldr	r3, [r3, #8]
 800e5d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800e5d8:	431a      	orrs	r2, r3
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	691b      	ldr	r3, [r3, #16]
 800e5de:	f003 0302 	and.w	r3, r3, #2
 800e5e2:	431a      	orrs	r2, r3
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	695b      	ldr	r3, [r3, #20]
 800e5e8:	f003 0301 	and.w	r3, r3, #1
 800e5ec:	431a      	orrs	r2, r3
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	699b      	ldr	r3, [r3, #24]
 800e5f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e5f6:	431a      	orrs	r2, r3
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	69db      	ldr	r3, [r3, #28]
 800e5fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e600:	431a      	orrs	r2, r3
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6a1b      	ldr	r3, [r3, #32]
 800e606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e60a:	ea42 0103 	orr.w	r1, r2, r3
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e612:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	430a      	orrs	r2, r1
 800e61c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	699b      	ldr	r3, [r3, #24]
 800e622:	0c1b      	lsrs	r3, r3, #16
 800e624:	f003 0204 	and.w	r2, r3, #4
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e62c:	f003 0310 	and.w	r3, r3, #16
 800e630:	431a      	orrs	r2, r3
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e636:	f003 0308 	and.w	r3, r3, #8
 800e63a:	431a      	orrs	r2, r3
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	68db      	ldr	r3, [r3, #12]
 800e640:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800e644:	ea42 0103 	orr.w	r1, r2, r3
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	430a      	orrs	r2, r1
 800e654:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	69da      	ldr	r2, [r3, #28]
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e664:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2200      	movs	r2, #0
 800e66a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	2201      	movs	r2, #1
 800e670:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800e674:	2300      	movs	r3, #0
}
 800e676:	4618      	mov	r0, r3
 800e678:	3710      	adds	r7, #16
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}

0800e67e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e67e:	b580      	push	{r7, lr}
 800e680:	b082      	sub	sp, #8
 800e682:	af00      	add	r7, sp, #0
 800e684:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d101      	bne.n	800e690 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e68c:	2301      	movs	r3, #1
 800e68e:	e049      	b.n	800e724 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e696:	b2db      	uxtb	r3, r3
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d106      	bne.n	800e6aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2200      	movs	r2, #0
 800e6a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f7f6 fb27 	bl	8004cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2202      	movs	r2, #2
 800e6ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681a      	ldr	r2, [r3, #0]
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	3304      	adds	r3, #4
 800e6ba:	4619      	mov	r1, r3
 800e6bc:	4610      	mov	r0, r2
 800e6be:	f000 fc11 	bl	800eee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2201      	movs	r2, #1
 800e6c6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2201      	movs	r2, #1
 800e6ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2201      	movs	r2, #1
 800e6d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2201      	movs	r2, #1
 800e6de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	2201      	movs	r2, #1
 800e6e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2201      	movs	r2, #1
 800e6ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	2201      	movs	r2, #1
 800e6f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2201      	movs	r2, #1
 800e6fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2201      	movs	r2, #1
 800e706:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2201      	movs	r2, #1
 800e70e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2201      	movs	r2, #1
 800e716:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2201      	movs	r2, #1
 800e71e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e722:	2300      	movs	r3, #0
}
 800e724:	4618      	mov	r0, r3
 800e726:	3708      	adds	r7, #8
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}

0800e72c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e72c:	b480      	push	{r7}
 800e72e:	b085      	sub	sp, #20
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e73a:	b2db      	uxtb	r3, r3
 800e73c:	2b01      	cmp	r3, #1
 800e73e:	d001      	beq.n	800e744 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e740:	2301      	movs	r3, #1
 800e742:	e054      	b.n	800e7ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2202      	movs	r2, #2
 800e748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	68da      	ldr	r2, [r3, #12]
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f042 0201 	orr.w	r2, r2, #1
 800e75a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	4a26      	ldr	r2, [pc, #152]	@ (800e7fc <HAL_TIM_Base_Start_IT+0xd0>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d022      	beq.n	800e7ac <HAL_TIM_Base_Start_IT+0x80>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e76e:	d01d      	beq.n	800e7ac <HAL_TIM_Base_Start_IT+0x80>
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	4a22      	ldr	r2, [pc, #136]	@ (800e800 <HAL_TIM_Base_Start_IT+0xd4>)
 800e776:	4293      	cmp	r3, r2
 800e778:	d018      	beq.n	800e7ac <HAL_TIM_Base_Start_IT+0x80>
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	4a21      	ldr	r2, [pc, #132]	@ (800e804 <HAL_TIM_Base_Start_IT+0xd8>)
 800e780:	4293      	cmp	r3, r2
 800e782:	d013      	beq.n	800e7ac <HAL_TIM_Base_Start_IT+0x80>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	4a1f      	ldr	r2, [pc, #124]	@ (800e808 <HAL_TIM_Base_Start_IT+0xdc>)
 800e78a:	4293      	cmp	r3, r2
 800e78c:	d00e      	beq.n	800e7ac <HAL_TIM_Base_Start_IT+0x80>
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	4a1e      	ldr	r2, [pc, #120]	@ (800e80c <HAL_TIM_Base_Start_IT+0xe0>)
 800e794:	4293      	cmp	r3, r2
 800e796:	d009      	beq.n	800e7ac <HAL_TIM_Base_Start_IT+0x80>
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	4a1c      	ldr	r2, [pc, #112]	@ (800e810 <HAL_TIM_Base_Start_IT+0xe4>)
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	d004      	beq.n	800e7ac <HAL_TIM_Base_Start_IT+0x80>
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	4a1b      	ldr	r2, [pc, #108]	@ (800e814 <HAL_TIM_Base_Start_IT+0xe8>)
 800e7a8:	4293      	cmp	r3, r2
 800e7aa:	d115      	bne.n	800e7d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	689a      	ldr	r2, [r3, #8]
 800e7b2:	4b19      	ldr	r3, [pc, #100]	@ (800e818 <HAL_TIM_Base_Start_IT+0xec>)
 800e7b4:	4013      	ands	r3, r2
 800e7b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	2b06      	cmp	r3, #6
 800e7bc:	d015      	beq.n	800e7ea <HAL_TIM_Base_Start_IT+0xbe>
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e7c4:	d011      	beq.n	800e7ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	681a      	ldr	r2, [r3, #0]
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	f042 0201 	orr.w	r2, r2, #1
 800e7d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7d6:	e008      	b.n	800e7ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	681a      	ldr	r2, [r3, #0]
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	f042 0201 	orr.w	r2, r2, #1
 800e7e6:	601a      	str	r2, [r3, #0]
 800e7e8:	e000      	b.n	800e7ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e7ec:	2300      	movs	r3, #0
}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	3714      	adds	r7, #20
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f8:	4770      	bx	lr
 800e7fa:	bf00      	nop
 800e7fc:	40010000 	.word	0x40010000
 800e800:	40000400 	.word	0x40000400
 800e804:	40000800 	.word	0x40000800
 800e808:	40000c00 	.word	0x40000c00
 800e80c:	40010400 	.word	0x40010400
 800e810:	40014000 	.word	0x40014000
 800e814:	40001800 	.word	0x40001800
 800e818:	00010007 	.word	0x00010007

0800e81c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b082      	sub	sp, #8
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d101      	bne.n	800e82e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e82a:	2301      	movs	r3, #1
 800e82c:	e049      	b.n	800e8c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e834:	b2db      	uxtb	r3, r3
 800e836:	2b00      	cmp	r3, #0
 800e838:	d106      	bne.n	800e848 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	2200      	movs	r2, #0
 800e83e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f7f6 fac6 	bl	8004dd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2202      	movs	r2, #2
 800e84c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681a      	ldr	r2, [r3, #0]
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	3304      	adds	r3, #4
 800e858:	4619      	mov	r1, r3
 800e85a:	4610      	mov	r0, r2
 800e85c:	f000 fb42 	bl	800eee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2201      	movs	r2, #1
 800e864:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2201      	movs	r2, #1
 800e86c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2201      	movs	r2, #1
 800e874:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2201      	movs	r2, #1
 800e87c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2201      	movs	r2, #1
 800e884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2201      	movs	r2, #1
 800e88c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2201      	movs	r2, #1
 800e894:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2201      	movs	r2, #1
 800e89c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2201      	movs	r2, #1
 800e8a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2201      	movs	r2, #1
 800e8ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2201      	movs	r2, #1
 800e8b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2201      	movs	r2, #1
 800e8bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e8c0:	2300      	movs	r3, #0
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	3708      	adds	r7, #8
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}

0800e8ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e8ca:	b580      	push	{r7, lr}
 800e8cc:	b084      	sub	sp, #16
 800e8ce:	af00      	add	r7, sp, #0
 800e8d0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	68db      	ldr	r3, [r3, #12]
 800e8d8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	691b      	ldr	r3, [r3, #16]
 800e8e0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	f003 0302 	and.w	r3, r3, #2
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d020      	beq.n	800e92e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	f003 0302 	and.w	r3, r3, #2
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d01b      	beq.n	800e92e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	f06f 0202 	mvn.w	r2, #2
 800e8fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2201      	movs	r2, #1
 800e904:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	699b      	ldr	r3, [r3, #24]
 800e90c:	f003 0303 	and.w	r3, r3, #3
 800e910:	2b00      	cmp	r3, #0
 800e912:	d003      	beq.n	800e91c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f000 fac7 	bl	800eea8 <HAL_TIM_IC_CaptureCallback>
 800e91a:	e005      	b.n	800e928 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	f000 fab9 	bl	800ee94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f000 faca 	bl	800eebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2200      	movs	r2, #0
 800e92c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	f003 0304 	and.w	r3, r3, #4
 800e934:	2b00      	cmp	r3, #0
 800e936:	d020      	beq.n	800e97a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	f003 0304 	and.w	r3, r3, #4
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d01b      	beq.n	800e97a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	f06f 0204 	mvn.w	r2, #4
 800e94a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2202      	movs	r2, #2
 800e950:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	699b      	ldr	r3, [r3, #24]
 800e958:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d003      	beq.n	800e968 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f000 faa1 	bl	800eea8 <HAL_TIM_IC_CaptureCallback>
 800e966:	e005      	b.n	800e974 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f000 fa93 	bl	800ee94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	f000 faa4 	bl	800eebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2200      	movs	r2, #0
 800e978:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	f003 0308 	and.w	r3, r3, #8
 800e980:	2b00      	cmp	r3, #0
 800e982:	d020      	beq.n	800e9c6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f003 0308 	and.w	r3, r3, #8
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d01b      	beq.n	800e9c6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	f06f 0208 	mvn.w	r2, #8
 800e996:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2204      	movs	r2, #4
 800e99c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	69db      	ldr	r3, [r3, #28]
 800e9a4:	f003 0303 	and.w	r3, r3, #3
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d003      	beq.n	800e9b4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f000 fa7b 	bl	800eea8 <HAL_TIM_IC_CaptureCallback>
 800e9b2:	e005      	b.n	800e9c0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f000 fa6d 	bl	800ee94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f000 fa7e 	bl	800eebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	f003 0310 	and.w	r3, r3, #16
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d020      	beq.n	800ea12 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f003 0310 	and.w	r3, r3, #16
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d01b      	beq.n	800ea12 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	f06f 0210 	mvn.w	r2, #16
 800e9e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2208      	movs	r2, #8
 800e9e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	69db      	ldr	r3, [r3, #28]
 800e9f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d003      	beq.n	800ea00 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	f000 fa55 	bl	800eea8 <HAL_TIM_IC_CaptureCallback>
 800e9fe:	e005      	b.n	800ea0c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f000 fa47 	bl	800ee94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f000 fa58 	bl	800eebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	f003 0301 	and.w	r3, r3, #1
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d00c      	beq.n	800ea36 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	f003 0301 	and.w	r3, r3, #1
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d007      	beq.n	800ea36 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	f06f 0201 	mvn.w	r2, #1
 800ea2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f7f5 fb69 	bl	8004108 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d104      	bne.n	800ea4a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d00c      	beq.n	800ea64 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d007      	beq.n	800ea64 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ea5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f000 fef4 	bl	800f84c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d00c      	beq.n	800ea88 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d007      	beq.n	800ea88 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ea80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f000 feec 	bl	800f860 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d00c      	beq.n	800eaac <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d007      	beq.n	800eaac <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800eaa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800eaa6:	6878      	ldr	r0, [r7, #4]
 800eaa8:	f000 fa12 	bl	800eed0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	f003 0320 	and.w	r3, r3, #32
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d00c      	beq.n	800ead0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	f003 0320 	and.w	r3, r3, #32
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d007      	beq.n	800ead0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	f06f 0220 	mvn.w	r2, #32
 800eac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f000 feb4 	bl	800f838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ead0:	bf00      	nop
 800ead2:	3710      	adds	r7, #16
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}

0800ead8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b086      	sub	sp, #24
 800eadc:	af00      	add	r7, sp, #0
 800eade:	60f8      	str	r0, [r7, #12]
 800eae0:	60b9      	str	r1, [r7, #8]
 800eae2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eae4:	2300      	movs	r3, #0
 800eae6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800eaee:	2b01      	cmp	r3, #1
 800eaf0:	d101      	bne.n	800eaf6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800eaf2:	2302      	movs	r3, #2
 800eaf4:	e0ff      	b.n	800ecf6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	2201      	movs	r2, #1
 800eafa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2b14      	cmp	r3, #20
 800eb02:	f200 80f0 	bhi.w	800ece6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800eb06:	a201      	add	r2, pc, #4	@ (adr r2, 800eb0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800eb08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb0c:	0800eb61 	.word	0x0800eb61
 800eb10:	0800ece7 	.word	0x0800ece7
 800eb14:	0800ece7 	.word	0x0800ece7
 800eb18:	0800ece7 	.word	0x0800ece7
 800eb1c:	0800eba1 	.word	0x0800eba1
 800eb20:	0800ece7 	.word	0x0800ece7
 800eb24:	0800ece7 	.word	0x0800ece7
 800eb28:	0800ece7 	.word	0x0800ece7
 800eb2c:	0800ebe3 	.word	0x0800ebe3
 800eb30:	0800ece7 	.word	0x0800ece7
 800eb34:	0800ece7 	.word	0x0800ece7
 800eb38:	0800ece7 	.word	0x0800ece7
 800eb3c:	0800ec23 	.word	0x0800ec23
 800eb40:	0800ece7 	.word	0x0800ece7
 800eb44:	0800ece7 	.word	0x0800ece7
 800eb48:	0800ece7 	.word	0x0800ece7
 800eb4c:	0800ec65 	.word	0x0800ec65
 800eb50:	0800ece7 	.word	0x0800ece7
 800eb54:	0800ece7 	.word	0x0800ece7
 800eb58:	0800ece7 	.word	0x0800ece7
 800eb5c:	0800eca5 	.word	0x0800eca5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	68b9      	ldr	r1, [r7, #8]
 800eb66:	4618      	mov	r0, r3
 800eb68:	f000 fa62 	bl	800f030 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	699a      	ldr	r2, [r3, #24]
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	f042 0208 	orr.w	r2, r2, #8
 800eb7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	699a      	ldr	r2, [r3, #24]
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	f022 0204 	bic.w	r2, r2, #4
 800eb8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	6999      	ldr	r1, [r3, #24]
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	691a      	ldr	r2, [r3, #16]
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	430a      	orrs	r2, r1
 800eb9c:	619a      	str	r2, [r3, #24]
      break;
 800eb9e:	e0a5      	b.n	800ecec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	68b9      	ldr	r1, [r7, #8]
 800eba6:	4618      	mov	r0, r3
 800eba8:	f000 fab4 	bl	800f114 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	699a      	ldr	r2, [r3, #24]
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ebba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	699a      	ldr	r2, [r3, #24]
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ebca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	6999      	ldr	r1, [r3, #24]
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	691b      	ldr	r3, [r3, #16]
 800ebd6:	021a      	lsls	r2, r3, #8
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	430a      	orrs	r2, r1
 800ebde:	619a      	str	r2, [r3, #24]
      break;
 800ebe0:	e084      	b.n	800ecec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	68b9      	ldr	r1, [r7, #8]
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f000 fb0b 	bl	800f204 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	69da      	ldr	r2, [r3, #28]
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	f042 0208 	orr.w	r2, r2, #8
 800ebfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	69da      	ldr	r2, [r3, #28]
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	f022 0204 	bic.w	r2, r2, #4
 800ec0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	69d9      	ldr	r1, [r3, #28]
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	691a      	ldr	r2, [r3, #16]
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	430a      	orrs	r2, r1
 800ec1e:	61da      	str	r2, [r3, #28]
      break;
 800ec20:	e064      	b.n	800ecec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	68b9      	ldr	r1, [r7, #8]
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f000 fb61 	bl	800f2f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	69da      	ldr	r2, [r3, #28]
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ec3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	69da      	ldr	r2, [r3, #28]
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ec4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	69d9      	ldr	r1, [r3, #28]
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	691b      	ldr	r3, [r3, #16]
 800ec58:	021a      	lsls	r2, r3, #8
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	430a      	orrs	r2, r1
 800ec60:	61da      	str	r2, [r3, #28]
      break;
 800ec62:	e043      	b.n	800ecec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	68b9      	ldr	r1, [r7, #8]
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f000 fb98 	bl	800f3a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	f042 0208 	orr.w	r2, r2, #8
 800ec7e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	f022 0204 	bic.w	r2, r2, #4
 800ec8e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	691a      	ldr	r2, [r3, #16]
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	430a      	orrs	r2, r1
 800eca0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800eca2:	e023      	b.n	800ecec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	68b9      	ldr	r1, [r7, #8]
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f000 fbca 	bl	800f444 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ecbe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ecce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	691b      	ldr	r3, [r3, #16]
 800ecda:	021a      	lsls	r2, r3, #8
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	430a      	orrs	r2, r1
 800ece2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ece4:	e002      	b.n	800ecec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ece6:	2301      	movs	r3, #1
 800ece8:	75fb      	strb	r3, [r7, #23]
      break;
 800ecea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	2200      	movs	r2, #0
 800ecf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ecf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3718      	adds	r7, #24
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	bf00      	nop

0800ed00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b084      	sub	sp, #16
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
 800ed08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ed14:	2b01      	cmp	r3, #1
 800ed16:	d101      	bne.n	800ed1c <HAL_TIM_ConfigClockSource+0x1c>
 800ed18:	2302      	movs	r3, #2
 800ed1a:	e0b4      	b.n	800ee86 <HAL_TIM_ConfigClockSource+0x186>
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2201      	movs	r2, #1
 800ed20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2202      	movs	r2, #2
 800ed28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	689b      	ldr	r3, [r3, #8]
 800ed32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ed34:	68ba      	ldr	r2, [r7, #8]
 800ed36:	4b56      	ldr	r3, [pc, #344]	@ (800ee90 <HAL_TIM_ConfigClockSource+0x190>)
 800ed38:	4013      	ands	r3, r2
 800ed3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ed42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	68ba      	ldr	r2, [r7, #8]
 800ed4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ed54:	d03e      	beq.n	800edd4 <HAL_TIM_ConfigClockSource+0xd4>
 800ed56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ed5a:	f200 8087 	bhi.w	800ee6c <HAL_TIM_ConfigClockSource+0x16c>
 800ed5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed62:	f000 8086 	beq.w	800ee72 <HAL_TIM_ConfigClockSource+0x172>
 800ed66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed6a:	d87f      	bhi.n	800ee6c <HAL_TIM_ConfigClockSource+0x16c>
 800ed6c:	2b70      	cmp	r3, #112	@ 0x70
 800ed6e:	d01a      	beq.n	800eda6 <HAL_TIM_ConfigClockSource+0xa6>
 800ed70:	2b70      	cmp	r3, #112	@ 0x70
 800ed72:	d87b      	bhi.n	800ee6c <HAL_TIM_ConfigClockSource+0x16c>
 800ed74:	2b60      	cmp	r3, #96	@ 0x60
 800ed76:	d050      	beq.n	800ee1a <HAL_TIM_ConfigClockSource+0x11a>
 800ed78:	2b60      	cmp	r3, #96	@ 0x60
 800ed7a:	d877      	bhi.n	800ee6c <HAL_TIM_ConfigClockSource+0x16c>
 800ed7c:	2b50      	cmp	r3, #80	@ 0x50
 800ed7e:	d03c      	beq.n	800edfa <HAL_TIM_ConfigClockSource+0xfa>
 800ed80:	2b50      	cmp	r3, #80	@ 0x50
 800ed82:	d873      	bhi.n	800ee6c <HAL_TIM_ConfigClockSource+0x16c>
 800ed84:	2b40      	cmp	r3, #64	@ 0x40
 800ed86:	d058      	beq.n	800ee3a <HAL_TIM_ConfigClockSource+0x13a>
 800ed88:	2b40      	cmp	r3, #64	@ 0x40
 800ed8a:	d86f      	bhi.n	800ee6c <HAL_TIM_ConfigClockSource+0x16c>
 800ed8c:	2b30      	cmp	r3, #48	@ 0x30
 800ed8e:	d064      	beq.n	800ee5a <HAL_TIM_ConfigClockSource+0x15a>
 800ed90:	2b30      	cmp	r3, #48	@ 0x30
 800ed92:	d86b      	bhi.n	800ee6c <HAL_TIM_ConfigClockSource+0x16c>
 800ed94:	2b20      	cmp	r3, #32
 800ed96:	d060      	beq.n	800ee5a <HAL_TIM_ConfigClockSource+0x15a>
 800ed98:	2b20      	cmp	r3, #32
 800ed9a:	d867      	bhi.n	800ee6c <HAL_TIM_ConfigClockSource+0x16c>
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d05c      	beq.n	800ee5a <HAL_TIM_ConfigClockSource+0x15a>
 800eda0:	2b10      	cmp	r3, #16
 800eda2:	d05a      	beq.n	800ee5a <HAL_TIM_ConfigClockSource+0x15a>
 800eda4:	e062      	b.n	800ee6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800edb6:	f000 fc13 	bl	800f5e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	689b      	ldr	r3, [r3, #8]
 800edc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800edc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	68ba      	ldr	r2, [r7, #8]
 800edd0:	609a      	str	r2, [r3, #8]
      break;
 800edd2:	e04f      	b.n	800ee74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ede4:	f000 fbfc 	bl	800f5e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	689a      	ldr	r2, [r3, #8]
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800edf6:	609a      	str	r2, [r3, #8]
      break;
 800edf8:	e03c      	b.n	800ee74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee06:	461a      	mov	r2, r3
 800ee08:	f000 fb70 	bl	800f4ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	2150      	movs	r1, #80	@ 0x50
 800ee12:	4618      	mov	r0, r3
 800ee14:	f000 fbc9 	bl	800f5aa <TIM_ITRx_SetConfig>
      break;
 800ee18:	e02c      	b.n	800ee74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ee26:	461a      	mov	r2, r3
 800ee28:	f000 fb8f 	bl	800f54a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	2160      	movs	r1, #96	@ 0x60
 800ee32:	4618      	mov	r0, r3
 800ee34:	f000 fbb9 	bl	800f5aa <TIM_ITRx_SetConfig>
      break;
 800ee38:	e01c      	b.n	800ee74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee46:	461a      	mov	r2, r3
 800ee48:	f000 fb50 	bl	800f4ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	2140      	movs	r1, #64	@ 0x40
 800ee52:	4618      	mov	r0, r3
 800ee54:	f000 fba9 	bl	800f5aa <TIM_ITRx_SetConfig>
      break;
 800ee58:	e00c      	b.n	800ee74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681a      	ldr	r2, [r3, #0]
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	4619      	mov	r1, r3
 800ee64:	4610      	mov	r0, r2
 800ee66:	f000 fba0 	bl	800f5aa <TIM_ITRx_SetConfig>
      break;
 800ee6a:	e003      	b.n	800ee74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	73fb      	strb	r3, [r7, #15]
      break;
 800ee70:	e000      	b.n	800ee74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ee72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2201      	movs	r2, #1
 800ee78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ee84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee86:	4618      	mov	r0, r3
 800ee88:	3710      	adds	r7, #16
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	fffeff88 	.word	0xfffeff88

0800ee94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ee94:	b480      	push	{r7}
 800ee96:	b083      	sub	sp, #12
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ee9c:	bf00      	nop
 800ee9e:	370c      	adds	r7, #12
 800eea0:	46bd      	mov	sp, r7
 800eea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea6:	4770      	bx	lr

0800eea8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800eea8:	b480      	push	{r7}
 800eeaa:	b083      	sub	sp, #12
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800eeb0:	bf00      	nop
 800eeb2:	370c      	adds	r7, #12
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr

0800eebc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800eebc:	b480      	push	{r7}
 800eebe:	b083      	sub	sp, #12
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800eec4:	bf00      	nop
 800eec6:	370c      	adds	r7, #12
 800eec8:	46bd      	mov	sp, r7
 800eeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eece:	4770      	bx	lr

0800eed0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eed0:	b480      	push	{r7}
 800eed2:	b083      	sub	sp, #12
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800eed8:	bf00      	nop
 800eeda:	370c      	adds	r7, #12
 800eedc:	46bd      	mov	sp, r7
 800eede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee2:	4770      	bx	lr

0800eee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800eee4:	b480      	push	{r7}
 800eee6:	b085      	sub	sp, #20
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	4a43      	ldr	r2, [pc, #268]	@ (800f004 <TIM_Base_SetConfig+0x120>)
 800eef8:	4293      	cmp	r3, r2
 800eefa:	d013      	beq.n	800ef24 <TIM_Base_SetConfig+0x40>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef02:	d00f      	beq.n	800ef24 <TIM_Base_SetConfig+0x40>
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	4a40      	ldr	r2, [pc, #256]	@ (800f008 <TIM_Base_SetConfig+0x124>)
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d00b      	beq.n	800ef24 <TIM_Base_SetConfig+0x40>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	4a3f      	ldr	r2, [pc, #252]	@ (800f00c <TIM_Base_SetConfig+0x128>)
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d007      	beq.n	800ef24 <TIM_Base_SetConfig+0x40>
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	4a3e      	ldr	r2, [pc, #248]	@ (800f010 <TIM_Base_SetConfig+0x12c>)
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	d003      	beq.n	800ef24 <TIM_Base_SetConfig+0x40>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	4a3d      	ldr	r2, [pc, #244]	@ (800f014 <TIM_Base_SetConfig+0x130>)
 800ef20:	4293      	cmp	r3, r2
 800ef22:	d108      	bne.n	800ef36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ef2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	685b      	ldr	r3, [r3, #4]
 800ef30:	68fa      	ldr	r2, [r7, #12]
 800ef32:	4313      	orrs	r3, r2
 800ef34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	4a32      	ldr	r2, [pc, #200]	@ (800f004 <TIM_Base_SetConfig+0x120>)
 800ef3a:	4293      	cmp	r3, r2
 800ef3c:	d02b      	beq.n	800ef96 <TIM_Base_SetConfig+0xb2>
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef44:	d027      	beq.n	800ef96 <TIM_Base_SetConfig+0xb2>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	4a2f      	ldr	r2, [pc, #188]	@ (800f008 <TIM_Base_SetConfig+0x124>)
 800ef4a:	4293      	cmp	r3, r2
 800ef4c:	d023      	beq.n	800ef96 <TIM_Base_SetConfig+0xb2>
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	4a2e      	ldr	r2, [pc, #184]	@ (800f00c <TIM_Base_SetConfig+0x128>)
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d01f      	beq.n	800ef96 <TIM_Base_SetConfig+0xb2>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	4a2d      	ldr	r2, [pc, #180]	@ (800f010 <TIM_Base_SetConfig+0x12c>)
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d01b      	beq.n	800ef96 <TIM_Base_SetConfig+0xb2>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	4a2c      	ldr	r2, [pc, #176]	@ (800f014 <TIM_Base_SetConfig+0x130>)
 800ef62:	4293      	cmp	r3, r2
 800ef64:	d017      	beq.n	800ef96 <TIM_Base_SetConfig+0xb2>
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	4a2b      	ldr	r2, [pc, #172]	@ (800f018 <TIM_Base_SetConfig+0x134>)
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d013      	beq.n	800ef96 <TIM_Base_SetConfig+0xb2>
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	4a2a      	ldr	r2, [pc, #168]	@ (800f01c <TIM_Base_SetConfig+0x138>)
 800ef72:	4293      	cmp	r3, r2
 800ef74:	d00f      	beq.n	800ef96 <TIM_Base_SetConfig+0xb2>
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	4a29      	ldr	r2, [pc, #164]	@ (800f020 <TIM_Base_SetConfig+0x13c>)
 800ef7a:	4293      	cmp	r3, r2
 800ef7c:	d00b      	beq.n	800ef96 <TIM_Base_SetConfig+0xb2>
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	4a28      	ldr	r2, [pc, #160]	@ (800f024 <TIM_Base_SetConfig+0x140>)
 800ef82:	4293      	cmp	r3, r2
 800ef84:	d007      	beq.n	800ef96 <TIM_Base_SetConfig+0xb2>
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	4a27      	ldr	r2, [pc, #156]	@ (800f028 <TIM_Base_SetConfig+0x144>)
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d003      	beq.n	800ef96 <TIM_Base_SetConfig+0xb2>
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	4a26      	ldr	r2, [pc, #152]	@ (800f02c <TIM_Base_SetConfig+0x148>)
 800ef92:	4293      	cmp	r3, r2
 800ef94:	d108      	bne.n	800efa8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ef9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	68db      	ldr	r3, [r3, #12]
 800efa2:	68fa      	ldr	r2, [r7, #12]
 800efa4:	4313      	orrs	r3, r2
 800efa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	695b      	ldr	r3, [r3, #20]
 800efb2:	4313      	orrs	r3, r2
 800efb4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	689a      	ldr	r2, [r3, #8]
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	681a      	ldr	r2, [r3, #0]
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	4a0e      	ldr	r2, [pc, #56]	@ (800f004 <TIM_Base_SetConfig+0x120>)
 800efca:	4293      	cmp	r3, r2
 800efcc:	d003      	beq.n	800efd6 <TIM_Base_SetConfig+0xf2>
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	4a10      	ldr	r2, [pc, #64]	@ (800f014 <TIM_Base_SetConfig+0x130>)
 800efd2:	4293      	cmp	r3, r2
 800efd4:	d103      	bne.n	800efde <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	691a      	ldr	r2, [r3, #16]
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	f043 0204 	orr.w	r2, r3, #4
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2201      	movs	r2, #1
 800efee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	68fa      	ldr	r2, [r7, #12]
 800eff4:	601a      	str	r2, [r3, #0]
}
 800eff6:	bf00      	nop
 800eff8:	3714      	adds	r7, #20
 800effa:	46bd      	mov	sp, r7
 800effc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f000:	4770      	bx	lr
 800f002:	bf00      	nop
 800f004:	40010000 	.word	0x40010000
 800f008:	40000400 	.word	0x40000400
 800f00c:	40000800 	.word	0x40000800
 800f010:	40000c00 	.word	0x40000c00
 800f014:	40010400 	.word	0x40010400
 800f018:	40014000 	.word	0x40014000
 800f01c:	40014400 	.word	0x40014400
 800f020:	40014800 	.word	0x40014800
 800f024:	40001800 	.word	0x40001800
 800f028:	40001c00 	.word	0x40001c00
 800f02c:	40002000 	.word	0x40002000

0800f030 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f030:	b480      	push	{r7}
 800f032:	b087      	sub	sp, #28
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
 800f038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	6a1b      	ldr	r3, [r3, #32]
 800f03e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	6a1b      	ldr	r3, [r3, #32]
 800f044:	f023 0201 	bic.w	r2, r3, #1
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	685b      	ldr	r3, [r3, #4]
 800f050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	699b      	ldr	r3, [r3, #24]
 800f056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f058:	68fa      	ldr	r2, [r7, #12]
 800f05a:	4b2b      	ldr	r3, [pc, #172]	@ (800f108 <TIM_OC1_SetConfig+0xd8>)
 800f05c:	4013      	ands	r3, r2
 800f05e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	f023 0303 	bic.w	r3, r3, #3
 800f066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	68fa      	ldr	r2, [r7, #12]
 800f06e:	4313      	orrs	r3, r2
 800f070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f072:	697b      	ldr	r3, [r7, #20]
 800f074:	f023 0302 	bic.w	r3, r3, #2
 800f078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f07a:	683b      	ldr	r3, [r7, #0]
 800f07c:	689b      	ldr	r3, [r3, #8]
 800f07e:	697a      	ldr	r2, [r7, #20]
 800f080:	4313      	orrs	r3, r2
 800f082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	4a21      	ldr	r2, [pc, #132]	@ (800f10c <TIM_OC1_SetConfig+0xdc>)
 800f088:	4293      	cmp	r3, r2
 800f08a:	d003      	beq.n	800f094 <TIM_OC1_SetConfig+0x64>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	4a20      	ldr	r2, [pc, #128]	@ (800f110 <TIM_OC1_SetConfig+0xe0>)
 800f090:	4293      	cmp	r3, r2
 800f092:	d10c      	bne.n	800f0ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	f023 0308 	bic.w	r3, r3, #8
 800f09a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	68db      	ldr	r3, [r3, #12]
 800f0a0:	697a      	ldr	r2, [r7, #20]
 800f0a2:	4313      	orrs	r3, r2
 800f0a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	f023 0304 	bic.w	r3, r3, #4
 800f0ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	4a16      	ldr	r2, [pc, #88]	@ (800f10c <TIM_OC1_SetConfig+0xdc>)
 800f0b2:	4293      	cmp	r3, r2
 800f0b4:	d003      	beq.n	800f0be <TIM_OC1_SetConfig+0x8e>
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	4a15      	ldr	r2, [pc, #84]	@ (800f110 <TIM_OC1_SetConfig+0xe0>)
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	d111      	bne.n	800f0e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f0be:	693b      	ldr	r3, [r7, #16]
 800f0c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f0c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f0c6:	693b      	ldr	r3, [r7, #16]
 800f0c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f0cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	695b      	ldr	r3, [r3, #20]
 800f0d2:	693a      	ldr	r2, [r7, #16]
 800f0d4:	4313      	orrs	r3, r2
 800f0d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	699b      	ldr	r3, [r3, #24]
 800f0dc:	693a      	ldr	r2, [r7, #16]
 800f0de:	4313      	orrs	r3, r2
 800f0e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	693a      	ldr	r2, [r7, #16]
 800f0e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	68fa      	ldr	r2, [r7, #12]
 800f0ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	685a      	ldr	r2, [r3, #4]
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	697a      	ldr	r2, [r7, #20]
 800f0fa:	621a      	str	r2, [r3, #32]
}
 800f0fc:	bf00      	nop
 800f0fe:	371c      	adds	r7, #28
 800f100:	46bd      	mov	sp, r7
 800f102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f106:	4770      	bx	lr
 800f108:	fffeff8f 	.word	0xfffeff8f
 800f10c:	40010000 	.word	0x40010000
 800f110:	40010400 	.word	0x40010400

0800f114 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f114:	b480      	push	{r7}
 800f116:	b087      	sub	sp, #28
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	6a1b      	ldr	r3, [r3, #32]
 800f122:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	6a1b      	ldr	r3, [r3, #32]
 800f128:	f023 0210 	bic.w	r2, r3, #16
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	685b      	ldr	r3, [r3, #4]
 800f134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	699b      	ldr	r3, [r3, #24]
 800f13a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f13c:	68fa      	ldr	r2, [r7, #12]
 800f13e:	4b2e      	ldr	r3, [pc, #184]	@ (800f1f8 <TIM_OC2_SetConfig+0xe4>)
 800f140:	4013      	ands	r3, r2
 800f142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f14a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	021b      	lsls	r3, r3, #8
 800f152:	68fa      	ldr	r2, [r7, #12]
 800f154:	4313      	orrs	r3, r2
 800f156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f158:	697b      	ldr	r3, [r7, #20]
 800f15a:	f023 0320 	bic.w	r3, r3, #32
 800f15e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	689b      	ldr	r3, [r3, #8]
 800f164:	011b      	lsls	r3, r3, #4
 800f166:	697a      	ldr	r2, [r7, #20]
 800f168:	4313      	orrs	r3, r2
 800f16a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	4a23      	ldr	r2, [pc, #140]	@ (800f1fc <TIM_OC2_SetConfig+0xe8>)
 800f170:	4293      	cmp	r3, r2
 800f172:	d003      	beq.n	800f17c <TIM_OC2_SetConfig+0x68>
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	4a22      	ldr	r2, [pc, #136]	@ (800f200 <TIM_OC2_SetConfig+0xec>)
 800f178:	4293      	cmp	r3, r2
 800f17a:	d10d      	bne.n	800f198 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	68db      	ldr	r3, [r3, #12]
 800f188:	011b      	lsls	r3, r3, #4
 800f18a:	697a      	ldr	r2, [r7, #20]
 800f18c:	4313      	orrs	r3, r2
 800f18e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f190:	697b      	ldr	r3, [r7, #20]
 800f192:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f196:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	4a18      	ldr	r2, [pc, #96]	@ (800f1fc <TIM_OC2_SetConfig+0xe8>)
 800f19c:	4293      	cmp	r3, r2
 800f19e:	d003      	beq.n	800f1a8 <TIM_OC2_SetConfig+0x94>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	4a17      	ldr	r2, [pc, #92]	@ (800f200 <TIM_OC2_SetConfig+0xec>)
 800f1a4:	4293      	cmp	r3, r2
 800f1a6:	d113      	bne.n	800f1d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f1a8:	693b      	ldr	r3, [r7, #16]
 800f1aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f1ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f1b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	695b      	ldr	r3, [r3, #20]
 800f1bc:	009b      	lsls	r3, r3, #2
 800f1be:	693a      	ldr	r2, [r7, #16]
 800f1c0:	4313      	orrs	r3, r2
 800f1c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	699b      	ldr	r3, [r3, #24]
 800f1c8:	009b      	lsls	r3, r3, #2
 800f1ca:	693a      	ldr	r2, [r7, #16]
 800f1cc:	4313      	orrs	r3, r2
 800f1ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	693a      	ldr	r2, [r7, #16]
 800f1d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	68fa      	ldr	r2, [r7, #12]
 800f1da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	685a      	ldr	r2, [r3, #4]
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	697a      	ldr	r2, [r7, #20]
 800f1e8:	621a      	str	r2, [r3, #32]
}
 800f1ea:	bf00      	nop
 800f1ec:	371c      	adds	r7, #28
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f4:	4770      	bx	lr
 800f1f6:	bf00      	nop
 800f1f8:	feff8fff 	.word	0xfeff8fff
 800f1fc:	40010000 	.word	0x40010000
 800f200:	40010400 	.word	0x40010400

0800f204 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f204:	b480      	push	{r7}
 800f206:	b087      	sub	sp, #28
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
 800f20c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6a1b      	ldr	r3, [r3, #32]
 800f212:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6a1b      	ldr	r3, [r3, #32]
 800f218:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	685b      	ldr	r3, [r3, #4]
 800f224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	69db      	ldr	r3, [r3, #28]
 800f22a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f22c:	68fa      	ldr	r2, [r7, #12]
 800f22e:	4b2d      	ldr	r3, [pc, #180]	@ (800f2e4 <TIM_OC3_SetConfig+0xe0>)
 800f230:	4013      	ands	r3, r2
 800f232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f023 0303 	bic.w	r3, r3, #3
 800f23a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	68fa      	ldr	r2, [r7, #12]
 800f242:	4313      	orrs	r3, r2
 800f244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f24c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	689b      	ldr	r3, [r3, #8]
 800f252:	021b      	lsls	r3, r3, #8
 800f254:	697a      	ldr	r2, [r7, #20]
 800f256:	4313      	orrs	r3, r2
 800f258:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	4a22      	ldr	r2, [pc, #136]	@ (800f2e8 <TIM_OC3_SetConfig+0xe4>)
 800f25e:	4293      	cmp	r3, r2
 800f260:	d003      	beq.n	800f26a <TIM_OC3_SetConfig+0x66>
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	4a21      	ldr	r2, [pc, #132]	@ (800f2ec <TIM_OC3_SetConfig+0xe8>)
 800f266:	4293      	cmp	r3, r2
 800f268:	d10d      	bne.n	800f286 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f26a:	697b      	ldr	r3, [r7, #20]
 800f26c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f270:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	68db      	ldr	r3, [r3, #12]
 800f276:	021b      	lsls	r3, r3, #8
 800f278:	697a      	ldr	r2, [r7, #20]
 800f27a:	4313      	orrs	r3, r2
 800f27c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	4a17      	ldr	r2, [pc, #92]	@ (800f2e8 <TIM_OC3_SetConfig+0xe4>)
 800f28a:	4293      	cmp	r3, r2
 800f28c:	d003      	beq.n	800f296 <TIM_OC3_SetConfig+0x92>
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	4a16      	ldr	r2, [pc, #88]	@ (800f2ec <TIM_OC3_SetConfig+0xe8>)
 800f292:	4293      	cmp	r3, r2
 800f294:	d113      	bne.n	800f2be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f296:	693b      	ldr	r3, [r7, #16]
 800f298:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f29c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f29e:	693b      	ldr	r3, [r7, #16]
 800f2a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f2a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f2a6:	683b      	ldr	r3, [r7, #0]
 800f2a8:	695b      	ldr	r3, [r3, #20]
 800f2aa:	011b      	lsls	r3, r3, #4
 800f2ac:	693a      	ldr	r2, [r7, #16]
 800f2ae:	4313      	orrs	r3, r2
 800f2b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	699b      	ldr	r3, [r3, #24]
 800f2b6:	011b      	lsls	r3, r3, #4
 800f2b8:	693a      	ldr	r2, [r7, #16]
 800f2ba:	4313      	orrs	r3, r2
 800f2bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	693a      	ldr	r2, [r7, #16]
 800f2c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	68fa      	ldr	r2, [r7, #12]
 800f2c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	685a      	ldr	r2, [r3, #4]
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	697a      	ldr	r2, [r7, #20]
 800f2d6:	621a      	str	r2, [r3, #32]
}
 800f2d8:	bf00      	nop
 800f2da:	371c      	adds	r7, #28
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e2:	4770      	bx	lr
 800f2e4:	fffeff8f 	.word	0xfffeff8f
 800f2e8:	40010000 	.word	0x40010000
 800f2ec:	40010400 	.word	0x40010400

0800f2f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	b087      	sub	sp, #28
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
 800f2f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6a1b      	ldr	r3, [r3, #32]
 800f2fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	6a1b      	ldr	r3, [r3, #32]
 800f304:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	685b      	ldr	r3, [r3, #4]
 800f310:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	69db      	ldr	r3, [r3, #28]
 800f316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f318:	68fa      	ldr	r2, [r7, #12]
 800f31a:	4b1e      	ldr	r3, [pc, #120]	@ (800f394 <TIM_OC4_SetConfig+0xa4>)
 800f31c:	4013      	ands	r3, r2
 800f31e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	021b      	lsls	r3, r3, #8
 800f32e:	68fa      	ldr	r2, [r7, #12]
 800f330:	4313      	orrs	r3, r2
 800f332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f334:	693b      	ldr	r3, [r7, #16]
 800f336:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f33a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	689b      	ldr	r3, [r3, #8]
 800f340:	031b      	lsls	r3, r3, #12
 800f342:	693a      	ldr	r2, [r7, #16]
 800f344:	4313      	orrs	r3, r2
 800f346:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	4a13      	ldr	r2, [pc, #76]	@ (800f398 <TIM_OC4_SetConfig+0xa8>)
 800f34c:	4293      	cmp	r3, r2
 800f34e:	d003      	beq.n	800f358 <TIM_OC4_SetConfig+0x68>
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	4a12      	ldr	r2, [pc, #72]	@ (800f39c <TIM_OC4_SetConfig+0xac>)
 800f354:	4293      	cmp	r3, r2
 800f356:	d109      	bne.n	800f36c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f35e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	695b      	ldr	r3, [r3, #20]
 800f364:	019b      	lsls	r3, r3, #6
 800f366:	697a      	ldr	r2, [r7, #20]
 800f368:	4313      	orrs	r3, r2
 800f36a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	697a      	ldr	r2, [r7, #20]
 800f370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	68fa      	ldr	r2, [r7, #12]
 800f376:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	685a      	ldr	r2, [r3, #4]
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	693a      	ldr	r2, [r7, #16]
 800f384:	621a      	str	r2, [r3, #32]
}
 800f386:	bf00      	nop
 800f388:	371c      	adds	r7, #28
 800f38a:	46bd      	mov	sp, r7
 800f38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f390:	4770      	bx	lr
 800f392:	bf00      	nop
 800f394:	feff8fff 	.word	0xfeff8fff
 800f398:	40010000 	.word	0x40010000
 800f39c:	40010400 	.word	0x40010400

0800f3a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f3a0:	b480      	push	{r7}
 800f3a2:	b087      	sub	sp, #28
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
 800f3a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	6a1b      	ldr	r3, [r3, #32]
 800f3ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	6a1b      	ldr	r3, [r3, #32]
 800f3b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	685b      	ldr	r3, [r3, #4]
 800f3c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f3c8:	68fa      	ldr	r2, [r7, #12]
 800f3ca:	4b1b      	ldr	r3, [pc, #108]	@ (800f438 <TIM_OC5_SetConfig+0x98>)
 800f3cc:	4013      	ands	r3, r2
 800f3ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	68fa      	ldr	r2, [r7, #12]
 800f3d6:	4313      	orrs	r3, r2
 800f3d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f3da:	693b      	ldr	r3, [r7, #16]
 800f3dc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f3e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	689b      	ldr	r3, [r3, #8]
 800f3e6:	041b      	lsls	r3, r3, #16
 800f3e8:	693a      	ldr	r2, [r7, #16]
 800f3ea:	4313      	orrs	r3, r2
 800f3ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	4a12      	ldr	r2, [pc, #72]	@ (800f43c <TIM_OC5_SetConfig+0x9c>)
 800f3f2:	4293      	cmp	r3, r2
 800f3f4:	d003      	beq.n	800f3fe <TIM_OC5_SetConfig+0x5e>
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	4a11      	ldr	r2, [pc, #68]	@ (800f440 <TIM_OC5_SetConfig+0xa0>)
 800f3fa:	4293      	cmp	r3, r2
 800f3fc:	d109      	bne.n	800f412 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f3fe:	697b      	ldr	r3, [r7, #20]
 800f400:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f404:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	695b      	ldr	r3, [r3, #20]
 800f40a:	021b      	lsls	r3, r3, #8
 800f40c:	697a      	ldr	r2, [r7, #20]
 800f40e:	4313      	orrs	r3, r2
 800f410:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	697a      	ldr	r2, [r7, #20]
 800f416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	68fa      	ldr	r2, [r7, #12]
 800f41c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	685a      	ldr	r2, [r3, #4]
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	693a      	ldr	r2, [r7, #16]
 800f42a:	621a      	str	r2, [r3, #32]
}
 800f42c:	bf00      	nop
 800f42e:	371c      	adds	r7, #28
 800f430:	46bd      	mov	sp, r7
 800f432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f436:	4770      	bx	lr
 800f438:	fffeff8f 	.word	0xfffeff8f
 800f43c:	40010000 	.word	0x40010000
 800f440:	40010400 	.word	0x40010400

0800f444 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f444:	b480      	push	{r7}
 800f446:	b087      	sub	sp, #28
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
 800f44c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6a1b      	ldr	r3, [r3, #32]
 800f452:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6a1b      	ldr	r3, [r3, #32]
 800f458:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	685b      	ldr	r3, [r3, #4]
 800f464:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f46a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f46c:	68fa      	ldr	r2, [r7, #12]
 800f46e:	4b1c      	ldr	r3, [pc, #112]	@ (800f4e0 <TIM_OC6_SetConfig+0x9c>)
 800f470:	4013      	ands	r3, r2
 800f472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	021b      	lsls	r3, r3, #8
 800f47a:	68fa      	ldr	r2, [r7, #12]
 800f47c:	4313      	orrs	r3, r2
 800f47e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f480:	693b      	ldr	r3, [r7, #16]
 800f482:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f486:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	689b      	ldr	r3, [r3, #8]
 800f48c:	051b      	lsls	r3, r3, #20
 800f48e:	693a      	ldr	r2, [r7, #16]
 800f490:	4313      	orrs	r3, r2
 800f492:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	4a13      	ldr	r2, [pc, #76]	@ (800f4e4 <TIM_OC6_SetConfig+0xa0>)
 800f498:	4293      	cmp	r3, r2
 800f49a:	d003      	beq.n	800f4a4 <TIM_OC6_SetConfig+0x60>
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	4a12      	ldr	r2, [pc, #72]	@ (800f4e8 <TIM_OC6_SetConfig+0xa4>)
 800f4a0:	4293      	cmp	r3, r2
 800f4a2:	d109      	bne.n	800f4b8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f4a4:	697b      	ldr	r3, [r7, #20]
 800f4a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f4aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	695b      	ldr	r3, [r3, #20]
 800f4b0:	029b      	lsls	r3, r3, #10
 800f4b2:	697a      	ldr	r2, [r7, #20]
 800f4b4:	4313      	orrs	r3, r2
 800f4b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	697a      	ldr	r2, [r7, #20]
 800f4bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	68fa      	ldr	r2, [r7, #12]
 800f4c2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	685a      	ldr	r2, [r3, #4]
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	693a      	ldr	r2, [r7, #16]
 800f4d0:	621a      	str	r2, [r3, #32]
}
 800f4d2:	bf00      	nop
 800f4d4:	371c      	adds	r7, #28
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4dc:	4770      	bx	lr
 800f4de:	bf00      	nop
 800f4e0:	feff8fff 	.word	0xfeff8fff
 800f4e4:	40010000 	.word	0x40010000
 800f4e8:	40010400 	.word	0x40010400

0800f4ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f4ec:	b480      	push	{r7}
 800f4ee:	b087      	sub	sp, #28
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	60f8      	str	r0, [r7, #12]
 800f4f4:	60b9      	str	r1, [r7, #8]
 800f4f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	6a1b      	ldr	r3, [r3, #32]
 800f4fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	6a1b      	ldr	r3, [r3, #32]
 800f502:	f023 0201 	bic.w	r2, r3, #1
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	699b      	ldr	r3, [r3, #24]
 800f50e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f510:	693b      	ldr	r3, [r7, #16]
 800f512:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	011b      	lsls	r3, r3, #4
 800f51c:	693a      	ldr	r2, [r7, #16]
 800f51e:	4313      	orrs	r3, r2
 800f520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f522:	697b      	ldr	r3, [r7, #20]
 800f524:	f023 030a 	bic.w	r3, r3, #10
 800f528:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f52a:	697a      	ldr	r2, [r7, #20]
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	4313      	orrs	r3, r2
 800f530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	693a      	ldr	r2, [r7, #16]
 800f536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	697a      	ldr	r2, [r7, #20]
 800f53c:	621a      	str	r2, [r3, #32]
}
 800f53e:	bf00      	nop
 800f540:	371c      	adds	r7, #28
 800f542:	46bd      	mov	sp, r7
 800f544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f548:	4770      	bx	lr

0800f54a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f54a:	b480      	push	{r7}
 800f54c:	b087      	sub	sp, #28
 800f54e:	af00      	add	r7, sp, #0
 800f550:	60f8      	str	r0, [r7, #12]
 800f552:	60b9      	str	r1, [r7, #8]
 800f554:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	6a1b      	ldr	r3, [r3, #32]
 800f55a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	6a1b      	ldr	r3, [r3, #32]
 800f560:	f023 0210 	bic.w	r2, r3, #16
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	699b      	ldr	r3, [r3, #24]
 800f56c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f56e:	693b      	ldr	r3, [r7, #16]
 800f570:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f574:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	031b      	lsls	r3, r3, #12
 800f57a:	693a      	ldr	r2, [r7, #16]
 800f57c:	4313      	orrs	r3, r2
 800f57e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f580:	697b      	ldr	r3, [r7, #20]
 800f582:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f586:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	011b      	lsls	r3, r3, #4
 800f58c:	697a      	ldr	r2, [r7, #20]
 800f58e:	4313      	orrs	r3, r2
 800f590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	693a      	ldr	r2, [r7, #16]
 800f596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	697a      	ldr	r2, [r7, #20]
 800f59c:	621a      	str	r2, [r3, #32]
}
 800f59e:	bf00      	nop
 800f5a0:	371c      	adds	r7, #28
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a8:	4770      	bx	lr

0800f5aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f5aa:	b480      	push	{r7}
 800f5ac:	b085      	sub	sp, #20
 800f5ae:	af00      	add	r7, sp, #0
 800f5b0:	6078      	str	r0, [r7, #4]
 800f5b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	689b      	ldr	r3, [r3, #8]
 800f5b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f5c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f5c2:	683a      	ldr	r2, [r7, #0]
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	4313      	orrs	r3, r2
 800f5c8:	f043 0307 	orr.w	r3, r3, #7
 800f5cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	68fa      	ldr	r2, [r7, #12]
 800f5d2:	609a      	str	r2, [r3, #8]
}
 800f5d4:	bf00      	nop
 800f5d6:	3714      	adds	r7, #20
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5de:	4770      	bx	lr

0800f5e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	b087      	sub	sp, #28
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	60f8      	str	r0, [r7, #12]
 800f5e8:	60b9      	str	r1, [r7, #8]
 800f5ea:	607a      	str	r2, [r7, #4]
 800f5ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	689b      	ldr	r3, [r3, #8]
 800f5f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f5fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	021a      	lsls	r2, r3, #8
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	431a      	orrs	r2, r3
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	4313      	orrs	r3, r2
 800f608:	697a      	ldr	r2, [r7, #20]
 800f60a:	4313      	orrs	r3, r2
 800f60c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	697a      	ldr	r2, [r7, #20]
 800f612:	609a      	str	r2, [r3, #8]
}
 800f614:	bf00      	nop
 800f616:	371c      	adds	r7, #28
 800f618:	46bd      	mov	sp, r7
 800f61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61e:	4770      	bx	lr

0800f620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f620:	b480      	push	{r7}
 800f622:	b085      	sub	sp, #20
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
 800f628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f630:	2b01      	cmp	r3, #1
 800f632:	d101      	bne.n	800f638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f634:	2302      	movs	r3, #2
 800f636:	e06d      	b.n	800f714 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2201      	movs	r2, #1
 800f63c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2202      	movs	r2, #2
 800f644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	685b      	ldr	r3, [r3, #4]
 800f64e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	689b      	ldr	r3, [r3, #8]
 800f656:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	4a30      	ldr	r2, [pc, #192]	@ (800f720 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f65e:	4293      	cmp	r3, r2
 800f660:	d004      	beq.n	800f66c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	4a2f      	ldr	r2, [pc, #188]	@ (800f724 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f668:	4293      	cmp	r3, r2
 800f66a:	d108      	bne.n	800f67e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f672:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	685b      	ldr	r3, [r3, #4]
 800f678:	68fa      	ldr	r2, [r7, #12]
 800f67a:	4313      	orrs	r3, r2
 800f67c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f684:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	68fa      	ldr	r2, [r7, #12]
 800f68c:	4313      	orrs	r3, r2
 800f68e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	68fa      	ldr	r2, [r7, #12]
 800f696:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	4a20      	ldr	r2, [pc, #128]	@ (800f720 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f69e:	4293      	cmp	r3, r2
 800f6a0:	d022      	beq.n	800f6e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f6aa:	d01d      	beq.n	800f6e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	4a1d      	ldr	r2, [pc, #116]	@ (800f728 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f6b2:	4293      	cmp	r3, r2
 800f6b4:	d018      	beq.n	800f6e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	4a1c      	ldr	r2, [pc, #112]	@ (800f72c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f6bc:	4293      	cmp	r3, r2
 800f6be:	d013      	beq.n	800f6e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	4a1a      	ldr	r2, [pc, #104]	@ (800f730 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f6c6:	4293      	cmp	r3, r2
 800f6c8:	d00e      	beq.n	800f6e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	4a15      	ldr	r2, [pc, #84]	@ (800f724 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f6d0:	4293      	cmp	r3, r2
 800f6d2:	d009      	beq.n	800f6e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	4a16      	ldr	r2, [pc, #88]	@ (800f734 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f6da:	4293      	cmp	r3, r2
 800f6dc:	d004      	beq.n	800f6e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	4a15      	ldr	r2, [pc, #84]	@ (800f738 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f6e4:	4293      	cmp	r3, r2
 800f6e6:	d10c      	bne.n	800f702 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f6ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	689b      	ldr	r3, [r3, #8]
 800f6f4:	68ba      	ldr	r2, [r7, #8]
 800f6f6:	4313      	orrs	r3, r2
 800f6f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	68ba      	ldr	r2, [r7, #8]
 800f700:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	2201      	movs	r2, #1
 800f706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	2200      	movs	r2, #0
 800f70e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f712:	2300      	movs	r3, #0
}
 800f714:	4618      	mov	r0, r3
 800f716:	3714      	adds	r7, #20
 800f718:	46bd      	mov	sp, r7
 800f71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71e:	4770      	bx	lr
 800f720:	40010000 	.word	0x40010000
 800f724:	40010400 	.word	0x40010400
 800f728:	40000400 	.word	0x40000400
 800f72c:	40000800 	.word	0x40000800
 800f730:	40000c00 	.word	0x40000c00
 800f734:	40014000 	.word	0x40014000
 800f738:	40001800 	.word	0x40001800

0800f73c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f73c:	b480      	push	{r7}
 800f73e:	b085      	sub	sp, #20
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
 800f744:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f746:	2300      	movs	r3, #0
 800f748:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f750:	2b01      	cmp	r3, #1
 800f752:	d101      	bne.n	800f758 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f754:	2302      	movs	r3, #2
 800f756:	e065      	b.n	800f824 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	2201      	movs	r2, #1
 800f75c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	68db      	ldr	r3, [r3, #12]
 800f76a:	4313      	orrs	r3, r2
 800f76c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	689b      	ldr	r3, [r3, #8]
 800f778:	4313      	orrs	r3, r2
 800f77a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	685b      	ldr	r3, [r3, #4]
 800f786:	4313      	orrs	r3, r2
 800f788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	4313      	orrs	r3, r2
 800f796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	691b      	ldr	r3, [r3, #16]
 800f7a2:	4313      	orrs	r3, r2
 800f7a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	695b      	ldr	r3, [r3, #20]
 800f7b0:	4313      	orrs	r3, r2
 800f7b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f7be:	4313      	orrs	r3, r2
 800f7c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	699b      	ldr	r3, [r3, #24]
 800f7cc:	041b      	lsls	r3, r3, #16
 800f7ce:	4313      	orrs	r3, r2
 800f7d0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	4a16      	ldr	r2, [pc, #88]	@ (800f830 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f7d8:	4293      	cmp	r3, r2
 800f7da:	d004      	beq.n	800f7e6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	4a14      	ldr	r2, [pc, #80]	@ (800f834 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f7e2:	4293      	cmp	r3, r2
 800f7e4:	d115      	bne.n	800f812 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7f0:	051b      	lsls	r3, r3, #20
 800f7f2:	4313      	orrs	r3, r2
 800f7f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	69db      	ldr	r3, [r3, #28]
 800f800:	4313      	orrs	r3, r2
 800f802:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	6a1b      	ldr	r3, [r3, #32]
 800f80e:	4313      	orrs	r3, r2
 800f810:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	68fa      	ldr	r2, [r7, #12]
 800f818:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	2200      	movs	r2, #0
 800f81e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f822:	2300      	movs	r3, #0
}
 800f824:	4618      	mov	r0, r3
 800f826:	3714      	adds	r7, #20
 800f828:	46bd      	mov	sp, r7
 800f82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82e:	4770      	bx	lr
 800f830:	40010000 	.word	0x40010000
 800f834:	40010400 	.word	0x40010400

0800f838 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f838:	b480      	push	{r7}
 800f83a:	b083      	sub	sp, #12
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f840:	bf00      	nop
 800f842:	370c      	adds	r7, #12
 800f844:	46bd      	mov	sp, r7
 800f846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84a:	4770      	bx	lr

0800f84c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f84c:	b480      	push	{r7}
 800f84e:	b083      	sub	sp, #12
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f854:	bf00      	nop
 800f856:	370c      	adds	r7, #12
 800f858:	46bd      	mov	sp, r7
 800f85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85e:	4770      	bx	lr

0800f860 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f860:	b480      	push	{r7}
 800f862:	b083      	sub	sp, #12
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f868:	bf00      	nop
 800f86a:	370c      	adds	r7, #12
 800f86c:	46bd      	mov	sp, r7
 800f86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f872:	4770      	bx	lr

0800f874 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d101      	bne.n	800f886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f882:	2301      	movs	r3, #1
 800f884:	e040      	b.n	800f908 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d106      	bne.n	800f89c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	2200      	movs	r2, #0
 800f892:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	f7f5 fb8a 	bl	8004fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2224      	movs	r2, #36	@ 0x24
 800f8a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	681a      	ldr	r2, [r3, #0]
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	f022 0201 	bic.w	r2, r2, #1
 800f8b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d002      	beq.n	800f8c0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800f8ba:	6878      	ldr	r0, [r7, #4]
 800f8bc:	f000 ffb6 	bl	801082c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f8c0:	6878      	ldr	r0, [r7, #4]
 800f8c2:	f000 fd4f 	bl	8010364 <UART_SetConfig>
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	2b01      	cmp	r3, #1
 800f8ca:	d101      	bne.n	800f8d0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800f8cc:	2301      	movs	r3, #1
 800f8ce:	e01b      	b.n	800f908 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	685a      	ldr	r2, [r3, #4]
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f8de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	689a      	ldr	r2, [r3, #8]
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f8ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	681a      	ldr	r2, [r3, #0]
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	f042 0201 	orr.w	r2, r2, #1
 800f8fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f001 f835 	bl	8010970 <UART_CheckIdleState>
 800f906:	4603      	mov	r3, r0
}
 800f908:	4618      	mov	r0, r3
 800f90a:	3708      	adds	r7, #8
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}

0800f910 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b08a      	sub	sp, #40	@ 0x28
 800f914:	af02      	add	r7, sp, #8
 800f916:	60f8      	str	r0, [r7, #12]
 800f918:	60b9      	str	r1, [r7, #8]
 800f91a:	603b      	str	r3, [r7, #0]
 800f91c:	4613      	mov	r3, r2
 800f91e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f924:	2b20      	cmp	r3, #32
 800f926:	d177      	bne.n	800fa18 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800f928:	68bb      	ldr	r3, [r7, #8]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d002      	beq.n	800f934 <HAL_UART_Transmit+0x24>
 800f92e:	88fb      	ldrh	r3, [r7, #6]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d101      	bne.n	800f938 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800f934:	2301      	movs	r3, #1
 800f936:	e070      	b.n	800fa1a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	2200      	movs	r2, #0
 800f93c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	2221      	movs	r2, #33	@ 0x21
 800f944:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f946:	f7f7 f8af 	bl	8006aa8 <HAL_GetTick>
 800f94a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	88fa      	ldrh	r2, [r7, #6]
 800f950:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	88fa      	ldrh	r2, [r7, #6]
 800f958:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	689b      	ldr	r3, [r3, #8]
 800f960:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f964:	d108      	bne.n	800f978 <HAL_UART_Transmit+0x68>
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	691b      	ldr	r3, [r3, #16]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d104      	bne.n	800f978 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800f96e:	2300      	movs	r3, #0
 800f970:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	61bb      	str	r3, [r7, #24]
 800f976:	e003      	b.n	800f980 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f97c:	2300      	movs	r3, #0
 800f97e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f980:	e02f      	b.n	800f9e2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f982:	683b      	ldr	r3, [r7, #0]
 800f984:	9300      	str	r3, [sp, #0]
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	2200      	movs	r2, #0
 800f98a:	2180      	movs	r1, #128	@ 0x80
 800f98c:	68f8      	ldr	r0, [r7, #12]
 800f98e:	f001 f846 	bl	8010a1e <UART_WaitOnFlagUntilTimeout>
 800f992:	4603      	mov	r3, r0
 800f994:	2b00      	cmp	r3, #0
 800f996:	d004      	beq.n	800f9a2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	2220      	movs	r2, #32
 800f99c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800f99e:	2303      	movs	r3, #3
 800f9a0:	e03b      	b.n	800fa1a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800f9a2:	69fb      	ldr	r3, [r7, #28]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d10b      	bne.n	800f9c0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f9a8:	69bb      	ldr	r3, [r7, #24]
 800f9aa:	881b      	ldrh	r3, [r3, #0]
 800f9ac:	461a      	mov	r2, r3
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f9b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f9b8:	69bb      	ldr	r3, [r7, #24]
 800f9ba:	3302      	adds	r3, #2
 800f9bc:	61bb      	str	r3, [r7, #24]
 800f9be:	e007      	b.n	800f9d0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f9c0:	69fb      	ldr	r3, [r7, #28]
 800f9c2:	781a      	ldrb	r2, [r3, #0]
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f9ca:	69fb      	ldr	r3, [r7, #28]
 800f9cc:	3301      	adds	r3, #1
 800f9ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800f9d6:	b29b      	uxth	r3, r3
 800f9d8:	3b01      	subs	r3, #1
 800f9da:	b29a      	uxth	r2, r3
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800f9e8:	b29b      	uxth	r3, r3
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d1c9      	bne.n	800f982 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	9300      	str	r3, [sp, #0]
 800f9f2:	697b      	ldr	r3, [r7, #20]
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	2140      	movs	r1, #64	@ 0x40
 800f9f8:	68f8      	ldr	r0, [r7, #12]
 800f9fa:	f001 f810 	bl	8010a1e <UART_WaitOnFlagUntilTimeout>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d004      	beq.n	800fa0e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	2220      	movs	r2, #32
 800fa08:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800fa0a:	2303      	movs	r3, #3
 800fa0c:	e005      	b.n	800fa1a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	2220      	movs	r2, #32
 800fa12:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800fa14:	2300      	movs	r3, #0
 800fa16:	e000      	b.n	800fa1a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800fa18:	2302      	movs	r3, #2
  }
}
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	3720      	adds	r7, #32
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}

0800fa22 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fa22:	b580      	push	{r7, lr}
 800fa24:	b08a      	sub	sp, #40	@ 0x28
 800fa26:	af02      	add	r7, sp, #8
 800fa28:	60f8      	str	r0, [r7, #12]
 800fa2a:	60b9      	str	r1, [r7, #8]
 800fa2c:	603b      	str	r3, [r7, #0]
 800fa2e:	4613      	mov	r3, r2
 800fa30:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa38:	2b20      	cmp	r3, #32
 800fa3a:	f040 80b5 	bne.w	800fba8 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d002      	beq.n	800fa4a <HAL_UART_Receive+0x28>
 800fa44:	88fb      	ldrh	r3, [r7, #6]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d101      	bne.n	800fa4e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	e0ad      	b.n	800fbaa <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	2200      	movs	r2, #0
 800fa52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	2222      	movs	r2, #34	@ 0x22
 800fa5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	2200      	movs	r2, #0
 800fa62:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fa64:	f7f7 f820 	bl	8006aa8 <HAL_GetTick>
 800fa68:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	88fa      	ldrh	r2, [r7, #6]
 800fa6e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	88fa      	ldrh	r2, [r7, #6]
 800fa76:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	689b      	ldr	r3, [r3, #8]
 800fa7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fa82:	d10e      	bne.n	800faa2 <HAL_UART_Receive+0x80>
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	691b      	ldr	r3, [r3, #16]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d105      	bne.n	800fa98 <HAL_UART_Receive+0x76>
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800fa92:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800fa96:	e02d      	b.n	800faf4 <HAL_UART_Receive+0xd2>
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	22ff      	movs	r2, #255	@ 0xff
 800fa9c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800faa0:	e028      	b.n	800faf4 <HAL_UART_Receive+0xd2>
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	689b      	ldr	r3, [r3, #8]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d10d      	bne.n	800fac6 <HAL_UART_Receive+0xa4>
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	691b      	ldr	r3, [r3, #16]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d104      	bne.n	800fabc <HAL_UART_Receive+0x9a>
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	22ff      	movs	r2, #255	@ 0xff
 800fab6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800faba:	e01b      	b.n	800faf4 <HAL_UART_Receive+0xd2>
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	227f      	movs	r2, #127	@ 0x7f
 800fac0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800fac4:	e016      	b.n	800faf4 <HAL_UART_Receive+0xd2>
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	689b      	ldr	r3, [r3, #8]
 800faca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800face:	d10d      	bne.n	800faec <HAL_UART_Receive+0xca>
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	691b      	ldr	r3, [r3, #16]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d104      	bne.n	800fae2 <HAL_UART_Receive+0xc0>
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	227f      	movs	r2, #127	@ 0x7f
 800fadc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800fae0:	e008      	b.n	800faf4 <HAL_UART_Receive+0xd2>
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	223f      	movs	r2, #63	@ 0x3f
 800fae6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800faea:	e003      	b.n	800faf4 <HAL_UART_Receive+0xd2>
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	2200      	movs	r2, #0
 800faf0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fafa:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	689b      	ldr	r3, [r3, #8]
 800fb00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fb04:	d108      	bne.n	800fb18 <HAL_UART_Receive+0xf6>
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	691b      	ldr	r3, [r3, #16]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d104      	bne.n	800fb18 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800fb0e:	2300      	movs	r3, #0
 800fb10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fb12:	68bb      	ldr	r3, [r7, #8]
 800fb14:	61bb      	str	r3, [r7, #24]
 800fb16:	e003      	b.n	800fb20 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800fb20:	e036      	b.n	800fb90 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	9300      	str	r3, [sp, #0]
 800fb26:	697b      	ldr	r3, [r7, #20]
 800fb28:	2200      	movs	r2, #0
 800fb2a:	2120      	movs	r1, #32
 800fb2c:	68f8      	ldr	r0, [r7, #12]
 800fb2e:	f000 ff76 	bl	8010a1e <UART_WaitOnFlagUntilTimeout>
 800fb32:	4603      	mov	r3, r0
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d005      	beq.n	800fb44 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	2220      	movs	r2, #32
 800fb3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800fb40:	2303      	movs	r3, #3
 800fb42:	e032      	b.n	800fbaa <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800fb44:	69fb      	ldr	r3, [r7, #28]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d10c      	bne.n	800fb64 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb50:	b29a      	uxth	r2, r3
 800fb52:	8a7b      	ldrh	r3, [r7, #18]
 800fb54:	4013      	ands	r3, r2
 800fb56:	b29a      	uxth	r2, r3
 800fb58:	69bb      	ldr	r3, [r7, #24]
 800fb5a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800fb5c:	69bb      	ldr	r3, [r7, #24]
 800fb5e:	3302      	adds	r3, #2
 800fb60:	61bb      	str	r3, [r7, #24]
 800fb62:	e00c      	b.n	800fb7e <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb6a:	b2da      	uxtb	r2, r3
 800fb6c:	8a7b      	ldrh	r3, [r7, #18]
 800fb6e:	b2db      	uxtb	r3, r3
 800fb70:	4013      	ands	r3, r2
 800fb72:	b2da      	uxtb	r2, r3
 800fb74:	69fb      	ldr	r3, [r7, #28]
 800fb76:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800fb78:	69fb      	ldr	r3, [r7, #28]
 800fb7a:	3301      	adds	r3, #1
 800fb7c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800fb84:	b29b      	uxth	r3, r3
 800fb86:	3b01      	subs	r3, #1
 800fb88:	b29a      	uxth	r2, r3
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800fb96:	b29b      	uxth	r3, r3
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d1c2      	bne.n	800fb22 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	2220      	movs	r2, #32
 800fba0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800fba4:	2300      	movs	r3, #0
 800fba6:	e000      	b.n	800fbaa <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800fba8:	2302      	movs	r3, #2
  }
}
 800fbaa:	4618      	mov	r0, r3
 800fbac:	3720      	adds	r7, #32
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}

0800fbb2 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fbb2:	b580      	push	{r7, lr}
 800fbb4:	b08a      	sub	sp, #40	@ 0x28
 800fbb6:	af00      	add	r7, sp, #0
 800fbb8:	60f8      	str	r0, [r7, #12]
 800fbba:	60b9      	str	r1, [r7, #8]
 800fbbc:	4613      	mov	r3, r2
 800fbbe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fbc6:	2b20      	cmp	r3, #32
 800fbc8:	d132      	bne.n	800fc30 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d002      	beq.n	800fbd6 <HAL_UART_Receive_DMA+0x24>
 800fbd0:	88fb      	ldrh	r3, [r7, #6]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d101      	bne.n	800fbda <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800fbd6:	2301      	movs	r3, #1
 800fbd8:	e02b      	b.n	800fc32 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	2200      	movs	r2, #0
 800fbde:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	685b      	ldr	r3, [r3, #4]
 800fbe6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d018      	beq.n	800fc20 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbf4:	697b      	ldr	r3, [r7, #20]
 800fbf6:	e853 3f00 	ldrex	r3, [r3]
 800fbfa:	613b      	str	r3, [r7, #16]
   return(result);
 800fbfc:	693b      	ldr	r3, [r7, #16]
 800fbfe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800fc02:	627b      	str	r3, [r7, #36]	@ 0x24
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	461a      	mov	r2, r3
 800fc0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc0c:	623b      	str	r3, [r7, #32]
 800fc0e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc10:	69f9      	ldr	r1, [r7, #28]
 800fc12:	6a3a      	ldr	r2, [r7, #32]
 800fc14:	e841 2300 	strex	r3, r2, [r1]
 800fc18:	61bb      	str	r3, [r7, #24]
   return(result);
 800fc1a:	69bb      	ldr	r3, [r7, #24]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d1e6      	bne.n	800fbee <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800fc20:	88fb      	ldrh	r3, [r7, #6]
 800fc22:	461a      	mov	r2, r3
 800fc24:	68b9      	ldr	r1, [r7, #8]
 800fc26:	68f8      	ldr	r0, [r7, #12]
 800fc28:	f000 ff66 	bl	8010af8 <UART_Start_Receive_DMA>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	e000      	b.n	800fc32 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800fc30:	2302      	movs	r3, #2
  }
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	3728      	adds	r7, #40	@ 0x28
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}

0800fc3a <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800fc3a:	b580      	push	{r7, lr}
 800fc3c:	b090      	sub	sp, #64	@ 0x40
 800fc3e:	af00      	add	r7, sp, #0
 800fc40:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fc46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc4e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	689b      	ldr	r3, [r3, #8]
 800fc56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc5a:	2b80      	cmp	r3, #128	@ 0x80
 800fc5c:	d139      	bne.n	800fcd2 <HAL_UART_DMAStop+0x98>
 800fc5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc60:	2b21      	cmp	r3, #33	@ 0x21
 800fc62:	d136      	bne.n	800fcd2 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	3308      	adds	r3, #8
 800fc6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc6c:	6a3b      	ldr	r3, [r7, #32]
 800fc6e:	e853 3f00 	ldrex	r3, [r3]
 800fc72:	61fb      	str	r3, [r7, #28]
   return(result);
 800fc74:	69fb      	ldr	r3, [r7, #28]
 800fc76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fc7a:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	3308      	adds	r3, #8
 800fc82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fc84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fc86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fc8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc8c:	e841 2300 	strex	r3, r2, [r1]
 800fc90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d1e5      	bne.n	800fc64 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d015      	beq.n	800fccc <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fca4:	4618      	mov	r0, r3
 800fca6:	f7f7 fd81 	bl	80077ac <HAL_DMA_Abort>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d00d      	beq.n	800fccc <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f7f7 ff95 	bl	8007be4 <HAL_DMA_GetError>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	2b20      	cmp	r3, #32
 800fcbe:	d105      	bne.n	800fccc <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2210      	movs	r2, #16
 800fcc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800fcc8:	2303      	movs	r3, #3
 800fcca:	e044      	b.n	800fd56 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f000 ffb3 	bl	8010c38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	689b      	ldr	r3, [r3, #8]
 800fcd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fcdc:	2b40      	cmp	r3, #64	@ 0x40
 800fcde:	d139      	bne.n	800fd54 <HAL_UART_DMAStop+0x11a>
 800fce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fce2:	2b22      	cmp	r3, #34	@ 0x22
 800fce4:	d136      	bne.n	800fd54 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	3308      	adds	r3, #8
 800fcec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	e853 3f00 	ldrex	r3, [r3]
 800fcf4:	60bb      	str	r3, [r7, #8]
   return(result);
 800fcf6:	68bb      	ldr	r3, [r7, #8]
 800fcf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fcfc:	633b      	str	r3, [r7, #48]	@ 0x30
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	3308      	adds	r3, #8
 800fd04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd06:	61ba      	str	r2, [r7, #24]
 800fd08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd0a:	6979      	ldr	r1, [r7, #20]
 800fd0c:	69ba      	ldr	r2, [r7, #24]
 800fd0e:	e841 2300 	strex	r3, r2, [r1]
 800fd12:	613b      	str	r3, [r7, #16]
   return(result);
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d1e5      	bne.n	800fce6 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d015      	beq.n	800fd4e <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd26:	4618      	mov	r0, r3
 800fd28:	f7f7 fd40 	bl	80077ac <HAL_DMA_Abort>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d00d      	beq.n	800fd4e <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd36:	4618      	mov	r0, r3
 800fd38:	f7f7 ff54 	bl	8007be4 <HAL_DMA_GetError>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	2b20      	cmp	r3, #32
 800fd40:	d105      	bne.n	800fd4e <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	2210      	movs	r2, #16
 800fd46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800fd4a:	2303      	movs	r3, #3
 800fd4c:	e003      	b.n	800fd56 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800fd4e:	6878      	ldr	r0, [r7, #4]
 800fd50:	f000 ff98 	bl	8010c84 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800fd54:	2300      	movs	r3, #0
}
 800fd56:	4618      	mov	r0, r3
 800fd58:	3740      	adds	r7, #64	@ 0x40
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	bd80      	pop	{r7, pc}
	...

0800fd60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b0ba      	sub	sp, #232	@ 0xe8
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	69db      	ldr	r3, [r3, #28]
 800fd6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	689b      	ldr	r3, [r3, #8]
 800fd82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fd86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800fd8a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800fd8e:	4013      	ands	r3, r2
 800fd90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800fd94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d115      	bne.n	800fdc8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800fd9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fda0:	f003 0320 	and.w	r3, r3, #32
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d00f      	beq.n	800fdc8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800fda8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fdac:	f003 0320 	and.w	r3, r3, #32
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d009      	beq.n	800fdc8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	f000 82b1 	beq.w	8010320 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fdc2:	6878      	ldr	r0, [r7, #4]
 800fdc4:	4798      	blx	r3
      }
      return;
 800fdc6:	e2ab      	b.n	8010320 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fdc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	f000 8117 	beq.w	8010000 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800fdd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fdd6:	f003 0301 	and.w	r3, r3, #1
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d106      	bne.n	800fdec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800fdde:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800fde2:	4b85      	ldr	r3, [pc, #532]	@ (800fff8 <HAL_UART_IRQHandler+0x298>)
 800fde4:	4013      	ands	r3, r2
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	f000 810a 	beq.w	8010000 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fdec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fdf0:	f003 0301 	and.w	r3, r3, #1
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d011      	beq.n	800fe1c <HAL_UART_IRQHandler+0xbc>
 800fdf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fdfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d00b      	beq.n	800fe1c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	2201      	movs	r2, #1
 800fe0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fe12:	f043 0201 	orr.w	r2, r3, #1
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fe1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe20:	f003 0302 	and.w	r3, r3, #2
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d011      	beq.n	800fe4c <HAL_UART_IRQHandler+0xec>
 800fe28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fe2c:	f003 0301 	and.w	r3, r3, #1
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d00b      	beq.n	800fe4c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	2202      	movs	r2, #2
 800fe3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fe42:	f043 0204 	orr.w	r2, r3, #4
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fe4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe50:	f003 0304 	and.w	r3, r3, #4
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d011      	beq.n	800fe7c <HAL_UART_IRQHandler+0x11c>
 800fe58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fe5c:	f003 0301 	and.w	r3, r3, #1
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d00b      	beq.n	800fe7c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	2204      	movs	r2, #4
 800fe6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fe72:	f043 0202 	orr.w	r2, r3, #2
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fe7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe80:	f003 0308 	and.w	r3, r3, #8
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d017      	beq.n	800feb8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800fe88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fe8c:	f003 0320 	and.w	r3, r3, #32
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d105      	bne.n	800fea0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800fe94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fe98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d00b      	beq.n	800feb8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	2208      	movs	r2, #8
 800fea6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800feae:	f043 0208 	orr.w	r2, r3, #8
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800feb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800febc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d012      	beq.n	800feea <HAL_UART_IRQHandler+0x18a>
 800fec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fec8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d00c      	beq.n	800feea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fed8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fee0:	f043 0220 	orr.w	r2, r3, #32
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	f000 8217 	beq.w	8010324 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800fef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fefa:	f003 0320 	and.w	r3, r3, #32
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d00d      	beq.n	800ff1e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ff02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff06:	f003 0320 	and.w	r3, r3, #32
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d007      	beq.n	800ff1e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d003      	beq.n	800ff1e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ff24:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	689b      	ldr	r3, [r3, #8]
 800ff2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff32:	2b40      	cmp	r3, #64	@ 0x40
 800ff34:	d005      	beq.n	800ff42 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ff36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ff3a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d04f      	beq.n	800ffe2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ff42:	6878      	ldr	r0, [r7, #4]
 800ff44:	f000 fe9e 	bl	8010c84 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	689b      	ldr	r3, [r3, #8]
 800ff4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff52:	2b40      	cmp	r3, #64	@ 0x40
 800ff54:	d141      	bne.n	800ffda <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	3308      	adds	r3, #8
 800ff5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ff64:	e853 3f00 	ldrex	r3, [r3]
 800ff68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ff6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ff70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ff74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	3308      	adds	r3, #8
 800ff7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ff82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ff86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ff8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ff92:	e841 2300 	strex	r3, r2, [r1]
 800ff96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ff9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d1d9      	bne.n	800ff56 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d013      	beq.n	800ffd2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ffae:	4a13      	ldr	r2, [pc, #76]	@ (800fffc <HAL_UART_IRQHandler+0x29c>)
 800ffb0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f7f7 fc68 	bl	800788c <HAL_DMA_Abort_IT>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d017      	beq.n	800fff2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ffc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ffc8:	687a      	ldr	r2, [r7, #4]
 800ffca:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800ffcc:	4610      	mov	r0, r2
 800ffce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ffd0:	e00f      	b.n	800fff2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f7f6 fbf6 	bl	80067c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ffd8:	e00b      	b.n	800fff2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ffda:	6878      	ldr	r0, [r7, #4]
 800ffdc:	f7f6 fbf2 	bl	80067c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ffe0:	e007      	b.n	800fff2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ffe2:	6878      	ldr	r0, [r7, #4]
 800ffe4:	f7f6 fbee 	bl	80067c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	2200      	movs	r2, #0
 800ffec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800fff0:	e198      	b.n	8010324 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fff2:	bf00      	nop
    return;
 800fff4:	e196      	b.n	8010324 <HAL_UART_IRQHandler+0x5c4>
 800fff6:	bf00      	nop
 800fff8:	04000120 	.word	0x04000120
 800fffc:	08010f9b 	.word	0x08010f9b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010004:	2b01      	cmp	r3, #1
 8010006:	f040 8166 	bne.w	80102d6 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801000a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801000e:	f003 0310 	and.w	r3, r3, #16
 8010012:	2b00      	cmp	r3, #0
 8010014:	f000 815f 	beq.w	80102d6 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801001c:	f003 0310 	and.w	r3, r3, #16
 8010020:	2b00      	cmp	r3, #0
 8010022:	f000 8158 	beq.w	80102d6 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	2210      	movs	r2, #16
 801002c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	689b      	ldr	r3, [r3, #8]
 8010034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010038:	2b40      	cmp	r3, #64	@ 0x40
 801003a:	f040 80d0 	bne.w	80101de <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	685b      	ldr	r3, [r3, #4]
 8010046:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 801004a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 801004e:	2b00      	cmp	r3, #0
 8010050:	f000 80ab 	beq.w	80101aa <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801005a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801005e:	429a      	cmp	r2, r3
 8010060:	f080 80a3 	bcs.w	80101aa <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801006a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010072:	69db      	ldr	r3, [r3, #28]
 8010074:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010078:	f000 8086 	beq.w	8010188 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010084:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010088:	e853 3f00 	ldrex	r3, [r3]
 801008c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010090:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010094:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010098:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	461a      	mov	r2, r3
 80100a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80100a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80100aa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80100b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80100b6:	e841 2300 	strex	r3, r2, [r1]
 80100ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80100be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d1da      	bne.n	801007c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	3308      	adds	r3, #8
 80100cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80100d0:	e853 3f00 	ldrex	r3, [r3]
 80100d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80100d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80100d8:	f023 0301 	bic.w	r3, r3, #1
 80100dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	3308      	adds	r3, #8
 80100e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80100ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80100ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80100f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80100f6:	e841 2300 	strex	r3, r2, [r1]
 80100fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80100fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d1e1      	bne.n	80100c6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	3308      	adds	r3, #8
 8010108:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801010a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801010c:	e853 3f00 	ldrex	r3, [r3]
 8010110:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010112:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010114:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010118:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	3308      	adds	r3, #8
 8010122:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010126:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010128:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801012a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801012c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801012e:	e841 2300 	strex	r3, r2, [r1]
 8010132:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8010134:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010136:	2b00      	cmp	r3, #0
 8010138:	d1e3      	bne.n	8010102 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2220      	movs	r2, #32
 801013e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	2200      	movs	r2, #0
 8010146:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801014e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010150:	e853 3f00 	ldrex	r3, [r3]
 8010154:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010156:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010158:	f023 0310 	bic.w	r3, r3, #16
 801015c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	461a      	mov	r2, r3
 8010166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801016a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801016c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801016e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010170:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010172:	e841 2300 	strex	r3, r2, [r1]
 8010176:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010178:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801017a:	2b00      	cmp	r3, #0
 801017c:	d1e4      	bne.n	8010148 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010182:	4618      	mov	r0, r3
 8010184:	f7f7 fb12 	bl	80077ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2202      	movs	r2, #2
 801018c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801019a:	b29b      	uxth	r3, r3
 801019c:	1ad3      	subs	r3, r2, r3
 801019e:	b29b      	uxth	r3, r3
 80101a0:	4619      	mov	r1, r3
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	f000 f8d2 	bl	801034c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80101a8:	e0be      	b.n	8010328 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80101b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80101b4:	429a      	cmp	r2, r3
 80101b6:	f040 80b7 	bne.w	8010328 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101be:	69db      	ldr	r3, [r3, #28]
 80101c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80101c4:	f040 80b0 	bne.w	8010328 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	2202      	movs	r2, #2
 80101cc:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80101d4:	4619      	mov	r1, r3
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f000 f8b8 	bl	801034c <HAL_UARTEx_RxEventCallback>
      return;
 80101dc:	e0a4      	b.n	8010328 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80101ea:	b29b      	uxth	r3, r3
 80101ec:	1ad3      	subs	r3, r2, r3
 80101ee:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80101f8:	b29b      	uxth	r3, r3
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	f000 8096 	beq.w	801032c <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 8010200:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010204:	2b00      	cmp	r3, #0
 8010206:	f000 8091 	beq.w	801032c <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010212:	e853 3f00 	ldrex	r3, [r3]
 8010216:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801021a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801021e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	461a      	mov	r2, r3
 8010228:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801022c:	647b      	str	r3, [r7, #68]	@ 0x44
 801022e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010230:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010232:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010234:	e841 2300 	strex	r3, r2, [r1]
 8010238:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801023a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801023c:	2b00      	cmp	r3, #0
 801023e:	d1e4      	bne.n	801020a <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	3308      	adds	r3, #8
 8010246:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801024a:	e853 3f00 	ldrex	r3, [r3]
 801024e:	623b      	str	r3, [r7, #32]
   return(result);
 8010250:	6a3b      	ldr	r3, [r7, #32]
 8010252:	f023 0301 	bic.w	r3, r3, #1
 8010256:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	3308      	adds	r3, #8
 8010260:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010264:	633a      	str	r2, [r7, #48]	@ 0x30
 8010266:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010268:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801026a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801026c:	e841 2300 	strex	r3, r2, [r1]
 8010270:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010274:	2b00      	cmp	r3, #0
 8010276:	d1e3      	bne.n	8010240 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2220      	movs	r2, #32
 801027c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2200      	movs	r2, #0
 8010284:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	2200      	movs	r2, #0
 801028a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010292:	693b      	ldr	r3, [r7, #16]
 8010294:	e853 3f00 	ldrex	r3, [r3]
 8010298:	60fb      	str	r3, [r7, #12]
   return(result);
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	f023 0310 	bic.w	r3, r3, #16
 80102a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	461a      	mov	r2, r3
 80102aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80102ae:	61fb      	str	r3, [r7, #28]
 80102b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102b2:	69b9      	ldr	r1, [r7, #24]
 80102b4:	69fa      	ldr	r2, [r7, #28]
 80102b6:	e841 2300 	strex	r3, r2, [r1]
 80102ba:	617b      	str	r3, [r7, #20]
   return(result);
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d1e4      	bne.n	801028c <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	2202      	movs	r2, #2
 80102c6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80102c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80102cc:	4619      	mov	r1, r3
 80102ce:	6878      	ldr	r0, [r7, #4]
 80102d0:	f000 f83c 	bl	801034c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80102d4:	e02a      	b.n	801032c <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80102d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80102da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d00e      	beq.n	8010300 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80102e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80102e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d008      	beq.n	8010300 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d01c      	beq.n	8010330 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102fa:	6878      	ldr	r0, [r7, #4]
 80102fc:	4798      	blx	r3
    }
    return;
 80102fe:	e017      	b.n	8010330 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010308:	2b00      	cmp	r3, #0
 801030a:	d012      	beq.n	8010332 <HAL_UART_IRQHandler+0x5d2>
 801030c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010314:	2b00      	cmp	r3, #0
 8010316:	d00c      	beq.n	8010332 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 8010318:	6878      	ldr	r0, [r7, #4]
 801031a:	f000 fe50 	bl	8010fbe <UART_EndTransmit_IT>
    return;
 801031e:	e008      	b.n	8010332 <HAL_UART_IRQHandler+0x5d2>
      return;
 8010320:	bf00      	nop
 8010322:	e006      	b.n	8010332 <HAL_UART_IRQHandler+0x5d2>
    return;
 8010324:	bf00      	nop
 8010326:	e004      	b.n	8010332 <HAL_UART_IRQHandler+0x5d2>
      return;
 8010328:	bf00      	nop
 801032a:	e002      	b.n	8010332 <HAL_UART_IRQHandler+0x5d2>
      return;
 801032c:	bf00      	nop
 801032e:	e000      	b.n	8010332 <HAL_UART_IRQHandler+0x5d2>
    return;
 8010330:	bf00      	nop
  }

}
 8010332:	37e8      	adds	r7, #232	@ 0xe8
 8010334:	46bd      	mov	sp, r7
 8010336:	bd80      	pop	{r7, pc}

08010338 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010338:	b480      	push	{r7}
 801033a:	b083      	sub	sp, #12
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010340:	bf00      	nop
 8010342:	370c      	adds	r7, #12
 8010344:	46bd      	mov	sp, r7
 8010346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034a:	4770      	bx	lr

0801034c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801034c:	b480      	push	{r7}
 801034e:	b083      	sub	sp, #12
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
 8010354:	460b      	mov	r3, r1
 8010356:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010358:	bf00      	nop
 801035a:	370c      	adds	r7, #12
 801035c:	46bd      	mov	sp, r7
 801035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010362:	4770      	bx	lr

08010364 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b088      	sub	sp, #32
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801036c:	2300      	movs	r3, #0
 801036e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	689a      	ldr	r2, [r3, #8]
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	691b      	ldr	r3, [r3, #16]
 8010378:	431a      	orrs	r2, r3
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	695b      	ldr	r3, [r3, #20]
 801037e:	431a      	orrs	r2, r3
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	69db      	ldr	r3, [r3, #28]
 8010384:	4313      	orrs	r3, r2
 8010386:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	681a      	ldr	r2, [r3, #0]
 801038e:	4ba6      	ldr	r3, [pc, #664]	@ (8010628 <UART_SetConfig+0x2c4>)
 8010390:	4013      	ands	r3, r2
 8010392:	687a      	ldr	r2, [r7, #4]
 8010394:	6812      	ldr	r2, [r2, #0]
 8010396:	6979      	ldr	r1, [r7, #20]
 8010398:	430b      	orrs	r3, r1
 801039a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	685b      	ldr	r3, [r3, #4]
 80103a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	68da      	ldr	r2, [r3, #12]
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	430a      	orrs	r2, r1
 80103b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	699b      	ldr	r3, [r3, #24]
 80103b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	6a1b      	ldr	r3, [r3, #32]
 80103bc:	697a      	ldr	r2, [r7, #20]
 80103be:	4313      	orrs	r3, r2
 80103c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	689b      	ldr	r3, [r3, #8]
 80103c8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	697a      	ldr	r2, [r7, #20]
 80103d2:	430a      	orrs	r2, r1
 80103d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	4a94      	ldr	r2, [pc, #592]	@ (801062c <UART_SetConfig+0x2c8>)
 80103dc:	4293      	cmp	r3, r2
 80103de:	d120      	bne.n	8010422 <UART_SetConfig+0xbe>
 80103e0:	4b93      	ldr	r3, [pc, #588]	@ (8010630 <UART_SetConfig+0x2cc>)
 80103e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80103e6:	f003 0303 	and.w	r3, r3, #3
 80103ea:	2b03      	cmp	r3, #3
 80103ec:	d816      	bhi.n	801041c <UART_SetConfig+0xb8>
 80103ee:	a201      	add	r2, pc, #4	@ (adr r2, 80103f4 <UART_SetConfig+0x90>)
 80103f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103f4:	08010405 	.word	0x08010405
 80103f8:	08010411 	.word	0x08010411
 80103fc:	0801040b 	.word	0x0801040b
 8010400:	08010417 	.word	0x08010417
 8010404:	2301      	movs	r3, #1
 8010406:	77fb      	strb	r3, [r7, #31]
 8010408:	e150      	b.n	80106ac <UART_SetConfig+0x348>
 801040a:	2302      	movs	r3, #2
 801040c:	77fb      	strb	r3, [r7, #31]
 801040e:	e14d      	b.n	80106ac <UART_SetConfig+0x348>
 8010410:	2304      	movs	r3, #4
 8010412:	77fb      	strb	r3, [r7, #31]
 8010414:	e14a      	b.n	80106ac <UART_SetConfig+0x348>
 8010416:	2308      	movs	r3, #8
 8010418:	77fb      	strb	r3, [r7, #31]
 801041a:	e147      	b.n	80106ac <UART_SetConfig+0x348>
 801041c:	2310      	movs	r3, #16
 801041e:	77fb      	strb	r3, [r7, #31]
 8010420:	e144      	b.n	80106ac <UART_SetConfig+0x348>
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	4a83      	ldr	r2, [pc, #524]	@ (8010634 <UART_SetConfig+0x2d0>)
 8010428:	4293      	cmp	r3, r2
 801042a:	d132      	bne.n	8010492 <UART_SetConfig+0x12e>
 801042c:	4b80      	ldr	r3, [pc, #512]	@ (8010630 <UART_SetConfig+0x2cc>)
 801042e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010432:	f003 030c 	and.w	r3, r3, #12
 8010436:	2b0c      	cmp	r3, #12
 8010438:	d828      	bhi.n	801048c <UART_SetConfig+0x128>
 801043a:	a201      	add	r2, pc, #4	@ (adr r2, 8010440 <UART_SetConfig+0xdc>)
 801043c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010440:	08010475 	.word	0x08010475
 8010444:	0801048d 	.word	0x0801048d
 8010448:	0801048d 	.word	0x0801048d
 801044c:	0801048d 	.word	0x0801048d
 8010450:	08010481 	.word	0x08010481
 8010454:	0801048d 	.word	0x0801048d
 8010458:	0801048d 	.word	0x0801048d
 801045c:	0801048d 	.word	0x0801048d
 8010460:	0801047b 	.word	0x0801047b
 8010464:	0801048d 	.word	0x0801048d
 8010468:	0801048d 	.word	0x0801048d
 801046c:	0801048d 	.word	0x0801048d
 8010470:	08010487 	.word	0x08010487
 8010474:	2300      	movs	r3, #0
 8010476:	77fb      	strb	r3, [r7, #31]
 8010478:	e118      	b.n	80106ac <UART_SetConfig+0x348>
 801047a:	2302      	movs	r3, #2
 801047c:	77fb      	strb	r3, [r7, #31]
 801047e:	e115      	b.n	80106ac <UART_SetConfig+0x348>
 8010480:	2304      	movs	r3, #4
 8010482:	77fb      	strb	r3, [r7, #31]
 8010484:	e112      	b.n	80106ac <UART_SetConfig+0x348>
 8010486:	2308      	movs	r3, #8
 8010488:	77fb      	strb	r3, [r7, #31]
 801048a:	e10f      	b.n	80106ac <UART_SetConfig+0x348>
 801048c:	2310      	movs	r3, #16
 801048e:	77fb      	strb	r3, [r7, #31]
 8010490:	e10c      	b.n	80106ac <UART_SetConfig+0x348>
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	4a68      	ldr	r2, [pc, #416]	@ (8010638 <UART_SetConfig+0x2d4>)
 8010498:	4293      	cmp	r3, r2
 801049a:	d120      	bne.n	80104de <UART_SetConfig+0x17a>
 801049c:	4b64      	ldr	r3, [pc, #400]	@ (8010630 <UART_SetConfig+0x2cc>)
 801049e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80104a2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80104a6:	2b30      	cmp	r3, #48	@ 0x30
 80104a8:	d013      	beq.n	80104d2 <UART_SetConfig+0x16e>
 80104aa:	2b30      	cmp	r3, #48	@ 0x30
 80104ac:	d814      	bhi.n	80104d8 <UART_SetConfig+0x174>
 80104ae:	2b20      	cmp	r3, #32
 80104b0:	d009      	beq.n	80104c6 <UART_SetConfig+0x162>
 80104b2:	2b20      	cmp	r3, #32
 80104b4:	d810      	bhi.n	80104d8 <UART_SetConfig+0x174>
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d002      	beq.n	80104c0 <UART_SetConfig+0x15c>
 80104ba:	2b10      	cmp	r3, #16
 80104bc:	d006      	beq.n	80104cc <UART_SetConfig+0x168>
 80104be:	e00b      	b.n	80104d8 <UART_SetConfig+0x174>
 80104c0:	2300      	movs	r3, #0
 80104c2:	77fb      	strb	r3, [r7, #31]
 80104c4:	e0f2      	b.n	80106ac <UART_SetConfig+0x348>
 80104c6:	2302      	movs	r3, #2
 80104c8:	77fb      	strb	r3, [r7, #31]
 80104ca:	e0ef      	b.n	80106ac <UART_SetConfig+0x348>
 80104cc:	2304      	movs	r3, #4
 80104ce:	77fb      	strb	r3, [r7, #31]
 80104d0:	e0ec      	b.n	80106ac <UART_SetConfig+0x348>
 80104d2:	2308      	movs	r3, #8
 80104d4:	77fb      	strb	r3, [r7, #31]
 80104d6:	e0e9      	b.n	80106ac <UART_SetConfig+0x348>
 80104d8:	2310      	movs	r3, #16
 80104da:	77fb      	strb	r3, [r7, #31]
 80104dc:	e0e6      	b.n	80106ac <UART_SetConfig+0x348>
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	4a56      	ldr	r2, [pc, #344]	@ (801063c <UART_SetConfig+0x2d8>)
 80104e4:	4293      	cmp	r3, r2
 80104e6:	d120      	bne.n	801052a <UART_SetConfig+0x1c6>
 80104e8:	4b51      	ldr	r3, [pc, #324]	@ (8010630 <UART_SetConfig+0x2cc>)
 80104ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80104ee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80104f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80104f4:	d013      	beq.n	801051e <UART_SetConfig+0x1ba>
 80104f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80104f8:	d814      	bhi.n	8010524 <UART_SetConfig+0x1c0>
 80104fa:	2b80      	cmp	r3, #128	@ 0x80
 80104fc:	d009      	beq.n	8010512 <UART_SetConfig+0x1ae>
 80104fe:	2b80      	cmp	r3, #128	@ 0x80
 8010500:	d810      	bhi.n	8010524 <UART_SetConfig+0x1c0>
 8010502:	2b00      	cmp	r3, #0
 8010504:	d002      	beq.n	801050c <UART_SetConfig+0x1a8>
 8010506:	2b40      	cmp	r3, #64	@ 0x40
 8010508:	d006      	beq.n	8010518 <UART_SetConfig+0x1b4>
 801050a:	e00b      	b.n	8010524 <UART_SetConfig+0x1c0>
 801050c:	2300      	movs	r3, #0
 801050e:	77fb      	strb	r3, [r7, #31]
 8010510:	e0cc      	b.n	80106ac <UART_SetConfig+0x348>
 8010512:	2302      	movs	r3, #2
 8010514:	77fb      	strb	r3, [r7, #31]
 8010516:	e0c9      	b.n	80106ac <UART_SetConfig+0x348>
 8010518:	2304      	movs	r3, #4
 801051a:	77fb      	strb	r3, [r7, #31]
 801051c:	e0c6      	b.n	80106ac <UART_SetConfig+0x348>
 801051e:	2308      	movs	r3, #8
 8010520:	77fb      	strb	r3, [r7, #31]
 8010522:	e0c3      	b.n	80106ac <UART_SetConfig+0x348>
 8010524:	2310      	movs	r3, #16
 8010526:	77fb      	strb	r3, [r7, #31]
 8010528:	e0c0      	b.n	80106ac <UART_SetConfig+0x348>
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	4a44      	ldr	r2, [pc, #272]	@ (8010640 <UART_SetConfig+0x2dc>)
 8010530:	4293      	cmp	r3, r2
 8010532:	d125      	bne.n	8010580 <UART_SetConfig+0x21c>
 8010534:	4b3e      	ldr	r3, [pc, #248]	@ (8010630 <UART_SetConfig+0x2cc>)
 8010536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801053a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801053e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010542:	d017      	beq.n	8010574 <UART_SetConfig+0x210>
 8010544:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010548:	d817      	bhi.n	801057a <UART_SetConfig+0x216>
 801054a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801054e:	d00b      	beq.n	8010568 <UART_SetConfig+0x204>
 8010550:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010554:	d811      	bhi.n	801057a <UART_SetConfig+0x216>
 8010556:	2b00      	cmp	r3, #0
 8010558:	d003      	beq.n	8010562 <UART_SetConfig+0x1fe>
 801055a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801055e:	d006      	beq.n	801056e <UART_SetConfig+0x20a>
 8010560:	e00b      	b.n	801057a <UART_SetConfig+0x216>
 8010562:	2300      	movs	r3, #0
 8010564:	77fb      	strb	r3, [r7, #31]
 8010566:	e0a1      	b.n	80106ac <UART_SetConfig+0x348>
 8010568:	2302      	movs	r3, #2
 801056a:	77fb      	strb	r3, [r7, #31]
 801056c:	e09e      	b.n	80106ac <UART_SetConfig+0x348>
 801056e:	2304      	movs	r3, #4
 8010570:	77fb      	strb	r3, [r7, #31]
 8010572:	e09b      	b.n	80106ac <UART_SetConfig+0x348>
 8010574:	2308      	movs	r3, #8
 8010576:	77fb      	strb	r3, [r7, #31]
 8010578:	e098      	b.n	80106ac <UART_SetConfig+0x348>
 801057a:	2310      	movs	r3, #16
 801057c:	77fb      	strb	r3, [r7, #31]
 801057e:	e095      	b.n	80106ac <UART_SetConfig+0x348>
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	4a2f      	ldr	r2, [pc, #188]	@ (8010644 <UART_SetConfig+0x2e0>)
 8010586:	4293      	cmp	r3, r2
 8010588:	d125      	bne.n	80105d6 <UART_SetConfig+0x272>
 801058a:	4b29      	ldr	r3, [pc, #164]	@ (8010630 <UART_SetConfig+0x2cc>)
 801058c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010590:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8010594:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010598:	d017      	beq.n	80105ca <UART_SetConfig+0x266>
 801059a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801059e:	d817      	bhi.n	80105d0 <UART_SetConfig+0x26c>
 80105a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80105a4:	d00b      	beq.n	80105be <UART_SetConfig+0x25a>
 80105a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80105aa:	d811      	bhi.n	80105d0 <UART_SetConfig+0x26c>
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d003      	beq.n	80105b8 <UART_SetConfig+0x254>
 80105b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80105b4:	d006      	beq.n	80105c4 <UART_SetConfig+0x260>
 80105b6:	e00b      	b.n	80105d0 <UART_SetConfig+0x26c>
 80105b8:	2301      	movs	r3, #1
 80105ba:	77fb      	strb	r3, [r7, #31]
 80105bc:	e076      	b.n	80106ac <UART_SetConfig+0x348>
 80105be:	2302      	movs	r3, #2
 80105c0:	77fb      	strb	r3, [r7, #31]
 80105c2:	e073      	b.n	80106ac <UART_SetConfig+0x348>
 80105c4:	2304      	movs	r3, #4
 80105c6:	77fb      	strb	r3, [r7, #31]
 80105c8:	e070      	b.n	80106ac <UART_SetConfig+0x348>
 80105ca:	2308      	movs	r3, #8
 80105cc:	77fb      	strb	r3, [r7, #31]
 80105ce:	e06d      	b.n	80106ac <UART_SetConfig+0x348>
 80105d0:	2310      	movs	r3, #16
 80105d2:	77fb      	strb	r3, [r7, #31]
 80105d4:	e06a      	b.n	80106ac <UART_SetConfig+0x348>
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	4a1b      	ldr	r2, [pc, #108]	@ (8010648 <UART_SetConfig+0x2e4>)
 80105dc:	4293      	cmp	r3, r2
 80105de:	d138      	bne.n	8010652 <UART_SetConfig+0x2ee>
 80105e0:	4b13      	ldr	r3, [pc, #76]	@ (8010630 <UART_SetConfig+0x2cc>)
 80105e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80105e6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80105ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80105ee:	d017      	beq.n	8010620 <UART_SetConfig+0x2bc>
 80105f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80105f4:	d82a      	bhi.n	801064c <UART_SetConfig+0x2e8>
 80105f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80105fa:	d00b      	beq.n	8010614 <UART_SetConfig+0x2b0>
 80105fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010600:	d824      	bhi.n	801064c <UART_SetConfig+0x2e8>
 8010602:	2b00      	cmp	r3, #0
 8010604:	d003      	beq.n	801060e <UART_SetConfig+0x2aa>
 8010606:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801060a:	d006      	beq.n	801061a <UART_SetConfig+0x2b6>
 801060c:	e01e      	b.n	801064c <UART_SetConfig+0x2e8>
 801060e:	2300      	movs	r3, #0
 8010610:	77fb      	strb	r3, [r7, #31]
 8010612:	e04b      	b.n	80106ac <UART_SetConfig+0x348>
 8010614:	2302      	movs	r3, #2
 8010616:	77fb      	strb	r3, [r7, #31]
 8010618:	e048      	b.n	80106ac <UART_SetConfig+0x348>
 801061a:	2304      	movs	r3, #4
 801061c:	77fb      	strb	r3, [r7, #31]
 801061e:	e045      	b.n	80106ac <UART_SetConfig+0x348>
 8010620:	2308      	movs	r3, #8
 8010622:	77fb      	strb	r3, [r7, #31]
 8010624:	e042      	b.n	80106ac <UART_SetConfig+0x348>
 8010626:	bf00      	nop
 8010628:	efff69f3 	.word	0xefff69f3
 801062c:	40011000 	.word	0x40011000
 8010630:	40023800 	.word	0x40023800
 8010634:	40004400 	.word	0x40004400
 8010638:	40004800 	.word	0x40004800
 801063c:	40004c00 	.word	0x40004c00
 8010640:	40005000 	.word	0x40005000
 8010644:	40011400 	.word	0x40011400
 8010648:	40007800 	.word	0x40007800
 801064c:	2310      	movs	r3, #16
 801064e:	77fb      	strb	r3, [r7, #31]
 8010650:	e02c      	b.n	80106ac <UART_SetConfig+0x348>
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	4a72      	ldr	r2, [pc, #456]	@ (8010820 <UART_SetConfig+0x4bc>)
 8010658:	4293      	cmp	r3, r2
 801065a:	d125      	bne.n	80106a8 <UART_SetConfig+0x344>
 801065c:	4b71      	ldr	r3, [pc, #452]	@ (8010824 <UART_SetConfig+0x4c0>)
 801065e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010662:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8010666:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 801066a:	d017      	beq.n	801069c <UART_SetConfig+0x338>
 801066c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8010670:	d817      	bhi.n	80106a2 <UART_SetConfig+0x33e>
 8010672:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010676:	d00b      	beq.n	8010690 <UART_SetConfig+0x32c>
 8010678:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801067c:	d811      	bhi.n	80106a2 <UART_SetConfig+0x33e>
 801067e:	2b00      	cmp	r3, #0
 8010680:	d003      	beq.n	801068a <UART_SetConfig+0x326>
 8010682:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010686:	d006      	beq.n	8010696 <UART_SetConfig+0x332>
 8010688:	e00b      	b.n	80106a2 <UART_SetConfig+0x33e>
 801068a:	2300      	movs	r3, #0
 801068c:	77fb      	strb	r3, [r7, #31]
 801068e:	e00d      	b.n	80106ac <UART_SetConfig+0x348>
 8010690:	2302      	movs	r3, #2
 8010692:	77fb      	strb	r3, [r7, #31]
 8010694:	e00a      	b.n	80106ac <UART_SetConfig+0x348>
 8010696:	2304      	movs	r3, #4
 8010698:	77fb      	strb	r3, [r7, #31]
 801069a:	e007      	b.n	80106ac <UART_SetConfig+0x348>
 801069c:	2308      	movs	r3, #8
 801069e:	77fb      	strb	r3, [r7, #31]
 80106a0:	e004      	b.n	80106ac <UART_SetConfig+0x348>
 80106a2:	2310      	movs	r3, #16
 80106a4:	77fb      	strb	r3, [r7, #31]
 80106a6:	e001      	b.n	80106ac <UART_SetConfig+0x348>
 80106a8:	2310      	movs	r3, #16
 80106aa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	69db      	ldr	r3, [r3, #28]
 80106b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80106b4:	d15b      	bne.n	801076e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80106b6:	7ffb      	ldrb	r3, [r7, #31]
 80106b8:	2b08      	cmp	r3, #8
 80106ba:	d828      	bhi.n	801070e <UART_SetConfig+0x3aa>
 80106bc:	a201      	add	r2, pc, #4	@ (adr r2, 80106c4 <UART_SetConfig+0x360>)
 80106be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106c2:	bf00      	nop
 80106c4:	080106e9 	.word	0x080106e9
 80106c8:	080106f1 	.word	0x080106f1
 80106cc:	080106f9 	.word	0x080106f9
 80106d0:	0801070f 	.word	0x0801070f
 80106d4:	080106ff 	.word	0x080106ff
 80106d8:	0801070f 	.word	0x0801070f
 80106dc:	0801070f 	.word	0x0801070f
 80106e0:	0801070f 	.word	0x0801070f
 80106e4:	08010707 	.word	0x08010707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80106e8:	f7fb f9f0 	bl	800bacc <HAL_RCC_GetPCLK1Freq>
 80106ec:	61b8      	str	r0, [r7, #24]
        break;
 80106ee:	e013      	b.n	8010718 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80106f0:	f7fb fa00 	bl	800baf4 <HAL_RCC_GetPCLK2Freq>
 80106f4:	61b8      	str	r0, [r7, #24]
        break;
 80106f6:	e00f      	b.n	8010718 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80106f8:	4b4b      	ldr	r3, [pc, #300]	@ (8010828 <UART_SetConfig+0x4c4>)
 80106fa:	61bb      	str	r3, [r7, #24]
        break;
 80106fc:	e00c      	b.n	8010718 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80106fe:	f7fb f913 	bl	800b928 <HAL_RCC_GetSysClockFreq>
 8010702:	61b8      	str	r0, [r7, #24]
        break;
 8010704:	e008      	b.n	8010718 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010706:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801070a:	61bb      	str	r3, [r7, #24]
        break;
 801070c:	e004      	b.n	8010718 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 801070e:	2300      	movs	r3, #0
 8010710:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8010712:	2301      	movs	r3, #1
 8010714:	77bb      	strb	r3, [r7, #30]
        break;
 8010716:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010718:	69bb      	ldr	r3, [r7, #24]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d074      	beq.n	8010808 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801071e:	69bb      	ldr	r3, [r7, #24]
 8010720:	005a      	lsls	r2, r3, #1
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	685b      	ldr	r3, [r3, #4]
 8010726:	085b      	lsrs	r3, r3, #1
 8010728:	441a      	add	r2, r3
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	685b      	ldr	r3, [r3, #4]
 801072e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010732:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010734:	693b      	ldr	r3, [r7, #16]
 8010736:	2b0f      	cmp	r3, #15
 8010738:	d916      	bls.n	8010768 <UART_SetConfig+0x404>
 801073a:	693b      	ldr	r3, [r7, #16]
 801073c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010740:	d212      	bcs.n	8010768 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010742:	693b      	ldr	r3, [r7, #16]
 8010744:	b29b      	uxth	r3, r3
 8010746:	f023 030f 	bic.w	r3, r3, #15
 801074a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801074c:	693b      	ldr	r3, [r7, #16]
 801074e:	085b      	lsrs	r3, r3, #1
 8010750:	b29b      	uxth	r3, r3
 8010752:	f003 0307 	and.w	r3, r3, #7
 8010756:	b29a      	uxth	r2, r3
 8010758:	89fb      	ldrh	r3, [r7, #14]
 801075a:	4313      	orrs	r3, r2
 801075c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	89fa      	ldrh	r2, [r7, #14]
 8010764:	60da      	str	r2, [r3, #12]
 8010766:	e04f      	b.n	8010808 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8010768:	2301      	movs	r3, #1
 801076a:	77bb      	strb	r3, [r7, #30]
 801076c:	e04c      	b.n	8010808 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 801076e:	7ffb      	ldrb	r3, [r7, #31]
 8010770:	2b08      	cmp	r3, #8
 8010772:	d828      	bhi.n	80107c6 <UART_SetConfig+0x462>
 8010774:	a201      	add	r2, pc, #4	@ (adr r2, 801077c <UART_SetConfig+0x418>)
 8010776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801077a:	bf00      	nop
 801077c:	080107a1 	.word	0x080107a1
 8010780:	080107a9 	.word	0x080107a9
 8010784:	080107b1 	.word	0x080107b1
 8010788:	080107c7 	.word	0x080107c7
 801078c:	080107b7 	.word	0x080107b7
 8010790:	080107c7 	.word	0x080107c7
 8010794:	080107c7 	.word	0x080107c7
 8010798:	080107c7 	.word	0x080107c7
 801079c:	080107bf 	.word	0x080107bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80107a0:	f7fb f994 	bl	800bacc <HAL_RCC_GetPCLK1Freq>
 80107a4:	61b8      	str	r0, [r7, #24]
        break;
 80107a6:	e013      	b.n	80107d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80107a8:	f7fb f9a4 	bl	800baf4 <HAL_RCC_GetPCLK2Freq>
 80107ac:	61b8      	str	r0, [r7, #24]
        break;
 80107ae:	e00f      	b.n	80107d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80107b0:	4b1d      	ldr	r3, [pc, #116]	@ (8010828 <UART_SetConfig+0x4c4>)
 80107b2:	61bb      	str	r3, [r7, #24]
        break;
 80107b4:	e00c      	b.n	80107d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80107b6:	f7fb f8b7 	bl	800b928 <HAL_RCC_GetSysClockFreq>
 80107ba:	61b8      	str	r0, [r7, #24]
        break;
 80107bc:	e008      	b.n	80107d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80107be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80107c2:	61bb      	str	r3, [r7, #24]
        break;
 80107c4:	e004      	b.n	80107d0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80107c6:	2300      	movs	r3, #0
 80107c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80107ca:	2301      	movs	r3, #1
 80107cc:	77bb      	strb	r3, [r7, #30]
        break;
 80107ce:	bf00      	nop
    }

    if (pclk != 0U)
 80107d0:	69bb      	ldr	r3, [r7, #24]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d018      	beq.n	8010808 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	685b      	ldr	r3, [r3, #4]
 80107da:	085a      	lsrs	r2, r3, #1
 80107dc:	69bb      	ldr	r3, [r7, #24]
 80107de:	441a      	add	r2, r3
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	685b      	ldr	r3, [r3, #4]
 80107e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80107e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80107ea:	693b      	ldr	r3, [r7, #16]
 80107ec:	2b0f      	cmp	r3, #15
 80107ee:	d909      	bls.n	8010804 <UART_SetConfig+0x4a0>
 80107f0:	693b      	ldr	r3, [r7, #16]
 80107f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80107f6:	d205      	bcs.n	8010804 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80107f8:	693b      	ldr	r3, [r7, #16]
 80107fa:	b29a      	uxth	r2, r3
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	60da      	str	r2, [r3, #12]
 8010802:	e001      	b.n	8010808 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8010804:	2301      	movs	r3, #1
 8010806:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2200      	movs	r2, #0
 801080c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	2200      	movs	r2, #0
 8010812:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8010814:	7fbb      	ldrb	r3, [r7, #30]
}
 8010816:	4618      	mov	r0, r3
 8010818:	3720      	adds	r7, #32
 801081a:	46bd      	mov	sp, r7
 801081c:	bd80      	pop	{r7, pc}
 801081e:	bf00      	nop
 8010820:	40007c00 	.word	0x40007c00
 8010824:	40023800 	.word	0x40023800
 8010828:	00f42400 	.word	0x00f42400

0801082c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801082c:	b480      	push	{r7}
 801082e:	b083      	sub	sp, #12
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010838:	f003 0308 	and.w	r3, r3, #8
 801083c:	2b00      	cmp	r3, #0
 801083e:	d00a      	beq.n	8010856 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	685b      	ldr	r3, [r3, #4]
 8010846:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	430a      	orrs	r2, r1
 8010854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801085a:	f003 0301 	and.w	r3, r3, #1
 801085e:	2b00      	cmp	r3, #0
 8010860:	d00a      	beq.n	8010878 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	685b      	ldr	r3, [r3, #4]
 8010868:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	430a      	orrs	r2, r1
 8010876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801087c:	f003 0302 	and.w	r3, r3, #2
 8010880:	2b00      	cmp	r3, #0
 8010882:	d00a      	beq.n	801089a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	685b      	ldr	r3, [r3, #4]
 801088a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	430a      	orrs	r2, r1
 8010898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801089e:	f003 0304 	and.w	r3, r3, #4
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d00a      	beq.n	80108bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	685b      	ldr	r3, [r3, #4]
 80108ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	430a      	orrs	r2, r1
 80108ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108c0:	f003 0310 	and.w	r3, r3, #16
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d00a      	beq.n	80108de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	689b      	ldr	r3, [r3, #8]
 80108ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	430a      	orrs	r2, r1
 80108dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108e2:	f003 0320 	and.w	r3, r3, #32
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d00a      	beq.n	8010900 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	689b      	ldr	r3, [r3, #8]
 80108f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	430a      	orrs	r2, r1
 80108fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010908:	2b00      	cmp	r3, #0
 801090a:	d01a      	beq.n	8010942 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	685b      	ldr	r3, [r3, #4]
 8010912:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	430a      	orrs	r2, r1
 8010920:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010926:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801092a:	d10a      	bne.n	8010942 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	685b      	ldr	r3, [r3, #4]
 8010932:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	430a      	orrs	r2, r1
 8010940:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801094a:	2b00      	cmp	r3, #0
 801094c:	d00a      	beq.n	8010964 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	685b      	ldr	r3, [r3, #4]
 8010954:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	430a      	orrs	r2, r1
 8010962:	605a      	str	r2, [r3, #4]
  }
}
 8010964:	bf00      	nop
 8010966:	370c      	adds	r7, #12
 8010968:	46bd      	mov	sp, r7
 801096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096e:	4770      	bx	lr

08010970 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b08c      	sub	sp, #48	@ 0x30
 8010974:	af02      	add	r7, sp, #8
 8010976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	2200      	movs	r2, #0
 801097c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010980:	f7f6 f892 	bl	8006aa8 <HAL_GetTick>
 8010984:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	f003 0308 	and.w	r3, r3, #8
 8010990:	2b08      	cmp	r3, #8
 8010992:	d12e      	bne.n	80109f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010994:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010998:	9300      	str	r3, [sp, #0]
 801099a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801099c:	2200      	movs	r2, #0
 801099e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80109a2:	6878      	ldr	r0, [r7, #4]
 80109a4:	f000 f83b 	bl	8010a1e <UART_WaitOnFlagUntilTimeout>
 80109a8:	4603      	mov	r3, r0
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d021      	beq.n	80109f2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	e853 3f00 	ldrex	r3, [r3]
 80109ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80109c2:	623b      	str	r3, [r7, #32]
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	461a      	mov	r2, r3
 80109ca:	6a3b      	ldr	r3, [r7, #32]
 80109cc:	61fb      	str	r3, [r7, #28]
 80109ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109d0:	69b9      	ldr	r1, [r7, #24]
 80109d2:	69fa      	ldr	r2, [r7, #28]
 80109d4:	e841 2300 	strex	r3, r2, [r1]
 80109d8:	617b      	str	r3, [r7, #20]
   return(result);
 80109da:	697b      	ldr	r3, [r7, #20]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d1e6      	bne.n	80109ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	2220      	movs	r2, #32
 80109e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	2200      	movs	r2, #0
 80109ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80109ee:	2303      	movs	r3, #3
 80109f0:	e011      	b.n	8010a16 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	2220      	movs	r2, #32
 80109f6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2220      	movs	r2, #32
 80109fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2200      	movs	r2, #0
 8010a04:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2200      	movs	r2, #0
 8010a0a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2200      	movs	r2, #0
 8010a10:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8010a14:	2300      	movs	r3, #0
}
 8010a16:	4618      	mov	r0, r3
 8010a18:	3728      	adds	r7, #40	@ 0x28
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	bd80      	pop	{r7, pc}

08010a1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010a1e:	b580      	push	{r7, lr}
 8010a20:	b084      	sub	sp, #16
 8010a22:	af00      	add	r7, sp, #0
 8010a24:	60f8      	str	r0, [r7, #12]
 8010a26:	60b9      	str	r1, [r7, #8]
 8010a28:	603b      	str	r3, [r7, #0]
 8010a2a:	4613      	mov	r3, r2
 8010a2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010a2e:	e04f      	b.n	8010ad0 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010a30:	69bb      	ldr	r3, [r7, #24]
 8010a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a36:	d04b      	beq.n	8010ad0 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010a38:	f7f6 f836 	bl	8006aa8 <HAL_GetTick>
 8010a3c:	4602      	mov	r2, r0
 8010a3e:	683b      	ldr	r3, [r7, #0]
 8010a40:	1ad3      	subs	r3, r2, r3
 8010a42:	69ba      	ldr	r2, [r7, #24]
 8010a44:	429a      	cmp	r2, r3
 8010a46:	d302      	bcc.n	8010a4e <UART_WaitOnFlagUntilTimeout+0x30>
 8010a48:	69bb      	ldr	r3, [r7, #24]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d101      	bne.n	8010a52 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010a4e:	2303      	movs	r3, #3
 8010a50:	e04e      	b.n	8010af0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	f003 0304 	and.w	r3, r3, #4
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d037      	beq.n	8010ad0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010a60:	68bb      	ldr	r3, [r7, #8]
 8010a62:	2b80      	cmp	r3, #128	@ 0x80
 8010a64:	d034      	beq.n	8010ad0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010a66:	68bb      	ldr	r3, [r7, #8]
 8010a68:	2b40      	cmp	r3, #64	@ 0x40
 8010a6a:	d031      	beq.n	8010ad0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	69db      	ldr	r3, [r3, #28]
 8010a72:	f003 0308 	and.w	r3, r3, #8
 8010a76:	2b08      	cmp	r3, #8
 8010a78:	d110      	bne.n	8010a9c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	2208      	movs	r2, #8
 8010a80:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010a82:	68f8      	ldr	r0, [r7, #12]
 8010a84:	f000 f8fe 	bl	8010c84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	2208      	movs	r2, #8
 8010a8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	2200      	movs	r2, #0
 8010a94:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8010a98:	2301      	movs	r3, #1
 8010a9a:	e029      	b.n	8010af0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	69db      	ldr	r3, [r3, #28]
 8010aa2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010aa6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010aaa:	d111      	bne.n	8010ad0 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010ab4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010ab6:	68f8      	ldr	r0, [r7, #12]
 8010ab8:	f000 f8e4 	bl	8010c84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	2220      	movs	r2, #32
 8010ac0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8010acc:	2303      	movs	r3, #3
 8010ace:	e00f      	b.n	8010af0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	69da      	ldr	r2, [r3, #28]
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	4013      	ands	r3, r2
 8010ada:	68ba      	ldr	r2, [r7, #8]
 8010adc:	429a      	cmp	r2, r3
 8010ade:	bf0c      	ite	eq
 8010ae0:	2301      	moveq	r3, #1
 8010ae2:	2300      	movne	r3, #0
 8010ae4:	b2db      	uxtb	r3, r3
 8010ae6:	461a      	mov	r2, r3
 8010ae8:	79fb      	ldrb	r3, [r7, #7]
 8010aea:	429a      	cmp	r2, r3
 8010aec:	d0a0      	beq.n	8010a30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010aee:	2300      	movs	r3, #0
}
 8010af0:	4618      	mov	r0, r3
 8010af2:	3710      	adds	r7, #16
 8010af4:	46bd      	mov	sp, r7
 8010af6:	bd80      	pop	{r7, pc}

08010af8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b096      	sub	sp, #88	@ 0x58
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	60f8      	str	r0, [r7, #12]
 8010b00:	60b9      	str	r1, [r7, #8]
 8010b02:	4613      	mov	r3, r2
 8010b04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	68ba      	ldr	r2, [r7, #8]
 8010b0a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	88fa      	ldrh	r2, [r7, #6]
 8010b10:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	2200      	movs	r2, #0
 8010b18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	2222      	movs	r2, #34	@ 0x22
 8010b20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d028      	beq.n	8010b7e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b30:	4a3e      	ldr	r2, [pc, #248]	@ (8010c2c <UART_Start_Receive_DMA+0x134>)
 8010b32:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b38:	4a3d      	ldr	r2, [pc, #244]	@ (8010c30 <UART_Start_Receive_DMA+0x138>)
 8010b3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b40:	4a3c      	ldr	r2, [pc, #240]	@ (8010c34 <UART_Start_Receive_DMA+0x13c>)
 8010b42:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b48:	2200      	movs	r2, #0
 8010b4a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	3324      	adds	r3, #36	@ 0x24
 8010b56:	4619      	mov	r1, r3
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b5c:	461a      	mov	r2, r3
 8010b5e:	88fb      	ldrh	r3, [r7, #6]
 8010b60:	f7f6 fdc4 	bl	80076ec <HAL_DMA_Start_IT>
 8010b64:	4603      	mov	r3, r0
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d009      	beq.n	8010b7e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	2210      	movs	r2, #16
 8010b6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	2220      	movs	r2, #32
 8010b76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	e051      	b.n	8010c22 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	691b      	ldr	r3, [r3, #16]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d018      	beq.n	8010bb8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b8e:	e853 3f00 	ldrex	r3, [r3]
 8010b92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010b9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	461a      	mov	r2, r3
 8010ba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010ba6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ba8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010baa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010bac:	e841 2300 	strex	r3, r2, [r1]
 8010bb0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8010bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d1e6      	bne.n	8010b86 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	3308      	adds	r3, #8
 8010bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bc2:	e853 3f00 	ldrex	r3, [r3]
 8010bc6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bca:	f043 0301 	orr.w	r3, r3, #1
 8010bce:	653b      	str	r3, [r7, #80]	@ 0x50
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	3308      	adds	r3, #8
 8010bd6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010bd8:	637a      	str	r2, [r7, #52]	@ 0x34
 8010bda:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bdc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010bde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010be0:	e841 2300 	strex	r3, r2, [r1]
 8010be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d1e5      	bne.n	8010bb8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	3308      	adds	r3, #8
 8010bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bf4:	697b      	ldr	r3, [r7, #20]
 8010bf6:	e853 3f00 	ldrex	r3, [r3]
 8010bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8010bfc:	693b      	ldr	r3, [r7, #16]
 8010bfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	3308      	adds	r3, #8
 8010c0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010c0c:	623a      	str	r2, [r7, #32]
 8010c0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c10:	69f9      	ldr	r1, [r7, #28]
 8010c12:	6a3a      	ldr	r2, [r7, #32]
 8010c14:	e841 2300 	strex	r3, r2, [r1]
 8010c18:	61bb      	str	r3, [r7, #24]
   return(result);
 8010c1a:	69bb      	ldr	r3, [r7, #24]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d1e5      	bne.n	8010bec <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8010c20:	2300      	movs	r3, #0
}
 8010c22:	4618      	mov	r0, r3
 8010c24:	3758      	adds	r7, #88	@ 0x58
 8010c26:	46bd      	mov	sp, r7
 8010c28:	bd80      	pop	{r7, pc}
 8010c2a:	bf00      	nop
 8010c2c:	08010d4d 	.word	0x08010d4d
 8010c30:	08010eab 	.word	0x08010eab
 8010c34:	08010f1d 	.word	0x08010f1d

08010c38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010c38:	b480      	push	{r7}
 8010c3a:	b089      	sub	sp, #36	@ 0x24
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	e853 3f00 	ldrex	r3, [r3]
 8010c4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8010c4e:	68bb      	ldr	r3, [r7, #8]
 8010c50:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010c54:	61fb      	str	r3, [r7, #28]
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	461a      	mov	r2, r3
 8010c5c:	69fb      	ldr	r3, [r7, #28]
 8010c5e:	61bb      	str	r3, [r7, #24]
 8010c60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c62:	6979      	ldr	r1, [r7, #20]
 8010c64:	69ba      	ldr	r2, [r7, #24]
 8010c66:	e841 2300 	strex	r3, r2, [r1]
 8010c6a:	613b      	str	r3, [r7, #16]
   return(result);
 8010c6c:	693b      	ldr	r3, [r7, #16]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d1e6      	bne.n	8010c40 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	2220      	movs	r2, #32
 8010c76:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8010c78:	bf00      	nop
 8010c7a:	3724      	adds	r7, #36	@ 0x24
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c82:	4770      	bx	lr

08010c84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010c84:	b480      	push	{r7}
 8010c86:	b095      	sub	sp, #84	@ 0x54
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c94:	e853 3f00 	ldrex	r3, [r3]
 8010c98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010ca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	461a      	mov	r2, r3
 8010ca8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010caa:	643b      	str	r3, [r7, #64]	@ 0x40
 8010cac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010cb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010cb2:	e841 2300 	strex	r3, r2, [r1]
 8010cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d1e6      	bne.n	8010c8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	3308      	adds	r3, #8
 8010cc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cc6:	6a3b      	ldr	r3, [r7, #32]
 8010cc8:	e853 3f00 	ldrex	r3, [r3]
 8010ccc:	61fb      	str	r3, [r7, #28]
   return(result);
 8010cce:	69fb      	ldr	r3, [r7, #28]
 8010cd0:	f023 0301 	bic.w	r3, r3, #1
 8010cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	3308      	adds	r3, #8
 8010cdc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010cde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ce2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010ce4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ce6:	e841 2300 	strex	r3, r2, [r1]
 8010cea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d1e5      	bne.n	8010cbe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010cf6:	2b01      	cmp	r3, #1
 8010cf8:	d118      	bne.n	8010d2c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	e853 3f00 	ldrex	r3, [r3]
 8010d06:	60bb      	str	r3, [r7, #8]
   return(result);
 8010d08:	68bb      	ldr	r3, [r7, #8]
 8010d0a:	f023 0310 	bic.w	r3, r3, #16
 8010d0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	461a      	mov	r2, r3
 8010d16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010d18:	61bb      	str	r3, [r7, #24]
 8010d1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d1c:	6979      	ldr	r1, [r7, #20]
 8010d1e:	69ba      	ldr	r2, [r7, #24]
 8010d20:	e841 2300 	strex	r3, r2, [r1]
 8010d24:	613b      	str	r3, [r7, #16]
   return(result);
 8010d26:	693b      	ldr	r3, [r7, #16]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d1e6      	bne.n	8010cfa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	2220      	movs	r2, #32
 8010d30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	2200      	movs	r2, #0
 8010d38:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8010d40:	bf00      	nop
 8010d42:	3754      	adds	r7, #84	@ 0x54
 8010d44:	46bd      	mov	sp, r7
 8010d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4a:	4770      	bx	lr

08010d4c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b09c      	sub	sp, #112	@ 0x70
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d58:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	69db      	ldr	r3, [r3, #28]
 8010d5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010d62:	d071      	beq.n	8010e48 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8010d64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d66:	2200      	movs	r2, #0
 8010d68:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010d6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010d74:	e853 3f00 	ldrex	r3, [r3]
 8010d78:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8010d7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010d7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010d80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010d82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	461a      	mov	r2, r3
 8010d88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010d8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8010d8c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d8e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010d90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010d92:	e841 2300 	strex	r3, r2, [r1]
 8010d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010d98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d1e6      	bne.n	8010d6c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	3308      	adds	r3, #8
 8010da4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010da8:	e853 3f00 	ldrex	r3, [r3]
 8010dac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010db0:	f023 0301 	bic.w	r3, r3, #1
 8010db4:	667b      	str	r3, [r7, #100]	@ 0x64
 8010db6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	3308      	adds	r3, #8
 8010dbc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010dbe:	643a      	str	r2, [r7, #64]	@ 0x40
 8010dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dc2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010dc4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010dc6:	e841 2300 	strex	r3, r2, [r1]
 8010dca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d1e5      	bne.n	8010d9e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010dd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	3308      	adds	r3, #8
 8010dd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dda:	6a3b      	ldr	r3, [r7, #32]
 8010ddc:	e853 3f00 	ldrex	r3, [r3]
 8010de0:	61fb      	str	r3, [r7, #28]
   return(result);
 8010de2:	69fb      	ldr	r3, [r7, #28]
 8010de4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010de8:	663b      	str	r3, [r7, #96]	@ 0x60
 8010dea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	3308      	adds	r3, #8
 8010df0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010df2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010df4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010df6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010df8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010dfa:	e841 2300 	strex	r3, r2, [r1]
 8010dfe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d1e5      	bne.n	8010dd2 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010e06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e08:	2220      	movs	r2, #32
 8010e0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010e12:	2b01      	cmp	r3, #1
 8010e14:	d118      	bne.n	8010e48 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010e16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	e853 3f00 	ldrex	r3, [r3]
 8010e22:	60bb      	str	r3, [r7, #8]
   return(result);
 8010e24:	68bb      	ldr	r3, [r7, #8]
 8010e26:	f023 0310 	bic.w	r3, r3, #16
 8010e2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010e2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	461a      	mov	r2, r3
 8010e32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010e34:	61bb      	str	r3, [r7, #24]
 8010e36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e38:	6979      	ldr	r1, [r7, #20]
 8010e3a:	69ba      	ldr	r2, [r7, #24]
 8010e3c:	e841 2300 	strex	r3, r2, [r1]
 8010e40:	613b      	str	r3, [r7, #16]
   return(result);
 8010e42:	693b      	ldr	r3, [r7, #16]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d1e6      	bne.n	8010e16 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010e48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010e52:	2b01      	cmp	r3, #1
 8010e54:	d122      	bne.n	8010e9c <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 8010e56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e58:	2200      	movs	r2, #0
 8010e5a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	685b      	ldr	r3, [r3, #4]
 8010e64:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 8010e68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8010e6e:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8010e72:	429a      	cmp	r2, r3
 8010e74:	d204      	bcs.n	8010e80 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8010e76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e78:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8010e7c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010e80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e82:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8010e86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8010e8c:	b29b      	uxth	r3, r3
 8010e8e:	1ad3      	subs	r3, r2, r3
 8010e90:	b29b      	uxth	r3, r3
 8010e92:	4619      	mov	r1, r3
 8010e94:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010e96:	f7ff fa59 	bl	801034c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010e9a:	e002      	b.n	8010ea2 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 8010e9c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010e9e:	f7f5 fc57 	bl	8006750 <HAL_UART_RxCpltCallback>
}
 8010ea2:	bf00      	nop
 8010ea4:	3770      	adds	r7, #112	@ 0x70
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}

08010eaa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010eaa:	b580      	push	{r7, lr}
 8010eac:	b084      	sub	sp, #16
 8010eae:	af00      	add	r7, sp, #0
 8010eb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010eb6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	2201      	movs	r2, #1
 8010ebc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010ec2:	2b01      	cmp	r3, #1
 8010ec4:	d123      	bne.n	8010f0e <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8010ecc:	085b      	lsrs	r3, r3, #1
 8010ece:	b29a      	uxth	r2, r3
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	685b      	ldr	r3, [r3, #4]
 8010edc:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8010ee4:	897a      	ldrh	r2, [r7, #10]
 8010ee6:	429a      	cmp	r2, r3
 8010ee8:	d803      	bhi.n	8010ef2 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	897a      	ldrh	r2, [r7, #10]
 8010eee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8010efe:	b29b      	uxth	r3, r3
 8010f00:	1ad3      	subs	r3, r2, r3
 8010f02:	b29b      	uxth	r3, r3
 8010f04:	4619      	mov	r1, r3
 8010f06:	68f8      	ldr	r0, [r7, #12]
 8010f08:	f7ff fa20 	bl	801034c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010f0c:	e002      	b.n	8010f14 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 8010f0e:	68f8      	ldr	r0, [r7, #12]
 8010f10:	f7f5 fc42 	bl	8006798 <HAL_UART_RxHalfCpltCallback>
}
 8010f14:	bf00      	nop
 8010f16:	3710      	adds	r7, #16
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}

08010f1c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b086      	sub	sp, #24
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f28:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010f2a:	697b      	ldr	r3, [r7, #20]
 8010f2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010f2e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010f30:	697b      	ldr	r3, [r7, #20]
 8010f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f36:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	689b      	ldr	r3, [r3, #8]
 8010f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010f42:	2b80      	cmp	r3, #128	@ 0x80
 8010f44:	d109      	bne.n	8010f5a <UART_DMAError+0x3e>
 8010f46:	693b      	ldr	r3, [r7, #16]
 8010f48:	2b21      	cmp	r3, #33	@ 0x21
 8010f4a:	d106      	bne.n	8010f5a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010f4c:	697b      	ldr	r3, [r7, #20]
 8010f4e:	2200      	movs	r2, #0
 8010f50:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8010f54:	6978      	ldr	r0, [r7, #20]
 8010f56:	f7ff fe6f 	bl	8010c38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010f5a:	697b      	ldr	r3, [r7, #20]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	689b      	ldr	r3, [r3, #8]
 8010f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010f64:	2b40      	cmp	r3, #64	@ 0x40
 8010f66:	d109      	bne.n	8010f7c <UART_DMAError+0x60>
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	2b22      	cmp	r3, #34	@ 0x22
 8010f6c:	d106      	bne.n	8010f7c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	2200      	movs	r2, #0
 8010f72:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8010f76:	6978      	ldr	r0, [r7, #20]
 8010f78:	f7ff fe84 	bl	8010c84 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010f7c:	697b      	ldr	r3, [r7, #20]
 8010f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010f82:	f043 0210 	orr.w	r2, r3, #16
 8010f86:	697b      	ldr	r3, [r7, #20]
 8010f88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010f8c:	6978      	ldr	r0, [r7, #20]
 8010f8e:	f7f5 fc19 	bl	80067c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010f92:	bf00      	nop
 8010f94:	3718      	adds	r7, #24
 8010f96:	46bd      	mov	sp, r7
 8010f98:	bd80      	pop	{r7, pc}

08010f9a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010f9a:	b580      	push	{r7, lr}
 8010f9c:	b084      	sub	sp, #16
 8010f9e:	af00      	add	r7, sp, #0
 8010fa0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010fa6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	2200      	movs	r2, #0
 8010fac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010fb0:	68f8      	ldr	r0, [r7, #12]
 8010fb2:	f7f5 fc07 	bl	80067c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010fb6:	bf00      	nop
 8010fb8:	3710      	adds	r7, #16
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	bd80      	pop	{r7, pc}

08010fbe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010fbe:	b580      	push	{r7, lr}
 8010fc0:	b088      	sub	sp, #32
 8010fc2:	af00      	add	r7, sp, #0
 8010fc4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	e853 3f00 	ldrex	r3, [r3]
 8010fd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8010fd4:	68bb      	ldr	r3, [r7, #8]
 8010fd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010fda:	61fb      	str	r3, [r7, #28]
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	461a      	mov	r2, r3
 8010fe2:	69fb      	ldr	r3, [r7, #28]
 8010fe4:	61bb      	str	r3, [r7, #24]
 8010fe6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fe8:	6979      	ldr	r1, [r7, #20]
 8010fea:	69ba      	ldr	r2, [r7, #24]
 8010fec:	e841 2300 	strex	r3, r2, [r1]
 8010ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8010ff2:	693b      	ldr	r3, [r7, #16]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d1e6      	bne.n	8010fc6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	2220      	movs	r2, #32
 8010ffc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	2200      	movs	r2, #0
 8011002:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011004:	6878      	ldr	r0, [r7, #4]
 8011006:	f7ff f997 	bl	8010338 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801100a:	bf00      	nop
 801100c:	3720      	adds	r7, #32
 801100e:	46bd      	mov	sp, r7
 8011010:	bd80      	pop	{r7, pc}
	...

08011014 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 8011014:	b480      	push	{r7}
 8011016:	b083      	sub	sp, #12
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
 801101c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 801101e:	683b      	ldr	r3, [r7, #0]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d121      	bne.n	801106a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	681a      	ldr	r2, [r3, #0]
 801102a:	4b27      	ldr	r3, [pc, #156]	@ (80110c8 <FMC_SDRAM_Init+0xb4>)
 801102c:	4013      	ands	r3, r2
 801102e:	683a      	ldr	r2, [r7, #0]
 8011030:	6851      	ldr	r1, [r2, #4]
 8011032:	683a      	ldr	r2, [r7, #0]
 8011034:	6892      	ldr	r2, [r2, #8]
 8011036:	4311      	orrs	r1, r2
 8011038:	683a      	ldr	r2, [r7, #0]
 801103a:	68d2      	ldr	r2, [r2, #12]
 801103c:	4311      	orrs	r1, r2
 801103e:	683a      	ldr	r2, [r7, #0]
 8011040:	6912      	ldr	r2, [r2, #16]
 8011042:	4311      	orrs	r1, r2
 8011044:	683a      	ldr	r2, [r7, #0]
 8011046:	6952      	ldr	r2, [r2, #20]
 8011048:	4311      	orrs	r1, r2
 801104a:	683a      	ldr	r2, [r7, #0]
 801104c:	6992      	ldr	r2, [r2, #24]
 801104e:	4311      	orrs	r1, r2
 8011050:	683a      	ldr	r2, [r7, #0]
 8011052:	69d2      	ldr	r2, [r2, #28]
 8011054:	4311      	orrs	r1, r2
 8011056:	683a      	ldr	r2, [r7, #0]
 8011058:	6a12      	ldr	r2, [r2, #32]
 801105a:	4311      	orrs	r1, r2
 801105c:	683a      	ldr	r2, [r7, #0]
 801105e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8011060:	430a      	orrs	r2, r1
 8011062:	431a      	orrs	r2, r3
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	601a      	str	r2, [r3, #0]
 8011068:	e026      	b.n	80110b8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8011072:	683b      	ldr	r3, [r7, #0]
 8011074:	69d9      	ldr	r1, [r3, #28]
 8011076:	683b      	ldr	r3, [r7, #0]
 8011078:	6a1b      	ldr	r3, [r3, #32]
 801107a:	4319      	orrs	r1, r3
 801107c:	683b      	ldr	r3, [r7, #0]
 801107e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011080:	430b      	orrs	r3, r1
 8011082:	431a      	orrs	r2, r3
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	685a      	ldr	r2, [r3, #4]
 801108c:	4b0e      	ldr	r3, [pc, #56]	@ (80110c8 <FMC_SDRAM_Init+0xb4>)
 801108e:	4013      	ands	r3, r2
 8011090:	683a      	ldr	r2, [r7, #0]
 8011092:	6851      	ldr	r1, [r2, #4]
 8011094:	683a      	ldr	r2, [r7, #0]
 8011096:	6892      	ldr	r2, [r2, #8]
 8011098:	4311      	orrs	r1, r2
 801109a:	683a      	ldr	r2, [r7, #0]
 801109c:	68d2      	ldr	r2, [r2, #12]
 801109e:	4311      	orrs	r1, r2
 80110a0:	683a      	ldr	r2, [r7, #0]
 80110a2:	6912      	ldr	r2, [r2, #16]
 80110a4:	4311      	orrs	r1, r2
 80110a6:	683a      	ldr	r2, [r7, #0]
 80110a8:	6952      	ldr	r2, [r2, #20]
 80110aa:	4311      	orrs	r1, r2
 80110ac:	683a      	ldr	r2, [r7, #0]
 80110ae:	6992      	ldr	r2, [r2, #24]
 80110b0:	430a      	orrs	r2, r1
 80110b2:	431a      	orrs	r2, r3
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80110b8:	2300      	movs	r3, #0
}
 80110ba:	4618      	mov	r0, r3
 80110bc:	370c      	adds	r7, #12
 80110be:	46bd      	mov	sp, r7
 80110c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c4:	4770      	bx	lr
 80110c6:	bf00      	nop
 80110c8:	ffff8000 	.word	0xffff8000

080110cc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80110cc:	b480      	push	{r7}
 80110ce:	b085      	sub	sp, #20
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	60f8      	str	r0, [r7, #12]
 80110d4:	60b9      	str	r1, [r7, #8]
 80110d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d128      	bne.n	8011130 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	689b      	ldr	r3, [r3, #8]
 80110e2:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	1e59      	subs	r1, r3, #1
 80110ec:	68bb      	ldr	r3, [r7, #8]
 80110ee:	685b      	ldr	r3, [r3, #4]
 80110f0:	3b01      	subs	r3, #1
 80110f2:	011b      	lsls	r3, r3, #4
 80110f4:	4319      	orrs	r1, r3
 80110f6:	68bb      	ldr	r3, [r7, #8]
 80110f8:	689b      	ldr	r3, [r3, #8]
 80110fa:	3b01      	subs	r3, #1
 80110fc:	021b      	lsls	r3, r3, #8
 80110fe:	4319      	orrs	r1, r3
 8011100:	68bb      	ldr	r3, [r7, #8]
 8011102:	68db      	ldr	r3, [r3, #12]
 8011104:	3b01      	subs	r3, #1
 8011106:	031b      	lsls	r3, r3, #12
 8011108:	4319      	orrs	r1, r3
 801110a:	68bb      	ldr	r3, [r7, #8]
 801110c:	691b      	ldr	r3, [r3, #16]
 801110e:	3b01      	subs	r3, #1
 8011110:	041b      	lsls	r3, r3, #16
 8011112:	4319      	orrs	r1, r3
 8011114:	68bb      	ldr	r3, [r7, #8]
 8011116:	695b      	ldr	r3, [r3, #20]
 8011118:	3b01      	subs	r3, #1
 801111a:	051b      	lsls	r3, r3, #20
 801111c:	4319      	orrs	r1, r3
 801111e:	68bb      	ldr	r3, [r7, #8]
 8011120:	699b      	ldr	r3, [r3, #24]
 8011122:	3b01      	subs	r3, #1
 8011124:	061b      	lsls	r3, r3, #24
 8011126:	430b      	orrs	r3, r1
 8011128:	431a      	orrs	r2, r3
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	609a      	str	r2, [r3, #8]
 801112e:	e02d      	b.n	801118c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	689a      	ldr	r2, [r3, #8]
 8011134:	4b19      	ldr	r3, [pc, #100]	@ (801119c <FMC_SDRAM_Timing_Init+0xd0>)
 8011136:	4013      	ands	r3, r2
 8011138:	68ba      	ldr	r2, [r7, #8]
 801113a:	68d2      	ldr	r2, [r2, #12]
 801113c:	3a01      	subs	r2, #1
 801113e:	0311      	lsls	r1, r2, #12
 8011140:	68ba      	ldr	r2, [r7, #8]
 8011142:	6952      	ldr	r2, [r2, #20]
 8011144:	3a01      	subs	r2, #1
 8011146:	0512      	lsls	r2, r2, #20
 8011148:	430a      	orrs	r2, r1
 801114a:	431a      	orrs	r2, r3
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	68db      	ldr	r3, [r3, #12]
 8011154:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8011158:	68bb      	ldr	r3, [r7, #8]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	1e59      	subs	r1, r3, #1
 801115e:	68bb      	ldr	r3, [r7, #8]
 8011160:	685b      	ldr	r3, [r3, #4]
 8011162:	3b01      	subs	r3, #1
 8011164:	011b      	lsls	r3, r3, #4
 8011166:	4319      	orrs	r1, r3
 8011168:	68bb      	ldr	r3, [r7, #8]
 801116a:	689b      	ldr	r3, [r3, #8]
 801116c:	3b01      	subs	r3, #1
 801116e:	021b      	lsls	r3, r3, #8
 8011170:	4319      	orrs	r1, r3
 8011172:	68bb      	ldr	r3, [r7, #8]
 8011174:	691b      	ldr	r3, [r3, #16]
 8011176:	3b01      	subs	r3, #1
 8011178:	041b      	lsls	r3, r3, #16
 801117a:	4319      	orrs	r1, r3
 801117c:	68bb      	ldr	r3, [r7, #8]
 801117e:	699b      	ldr	r3, [r3, #24]
 8011180:	3b01      	subs	r3, #1
 8011182:	061b      	lsls	r3, r3, #24
 8011184:	430b      	orrs	r3, r1
 8011186:	431a      	orrs	r2, r3
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 801118c:	2300      	movs	r3, #0
}
 801118e:	4618      	mov	r0, r3
 8011190:	3714      	adds	r7, #20
 8011192:	46bd      	mov	sp, r7
 8011194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011198:	4770      	bx	lr
 801119a:	bf00      	nop
 801119c:	ff0f0fff 	.word	0xff0f0fff

080111a0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80111a0:	b084      	sub	sp, #16
 80111a2:	b480      	push	{r7}
 80111a4:	b085      	sub	sp, #20
 80111a6:	af00      	add	r7, sp, #0
 80111a8:	6078      	str	r0, [r7, #4]
 80111aa:	f107 001c 	add.w	r0, r7, #28
 80111ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80111b2:	2300      	movs	r3, #0
 80111b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80111b6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80111b8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80111ba:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80111bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80111be:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80111c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80111c2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80111c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80111c6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80111c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80111ca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80111cc:	68fa      	ldr	r2, [r7, #12]
 80111ce:	4313      	orrs	r3, r2
 80111d0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	685a      	ldr	r2, [r3, #4]
 80111d6:	4b07      	ldr	r3, [pc, #28]	@ (80111f4 <SDMMC_Init+0x54>)
 80111d8:	4013      	ands	r3, r2
 80111da:	68fa      	ldr	r2, [r7, #12]
 80111dc:	431a      	orrs	r2, r3
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80111e2:	2300      	movs	r3, #0
}
 80111e4:	4618      	mov	r0, r3
 80111e6:	3714      	adds	r7, #20
 80111e8:	46bd      	mov	sp, r7
 80111ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ee:	b004      	add	sp, #16
 80111f0:	4770      	bx	lr
 80111f2:	bf00      	nop
 80111f4:	ffff8100 	.word	0xffff8100

080111f8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80111f8:	b480      	push	{r7}
 80111fa:	b083      	sub	sp, #12
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8011206:	4618      	mov	r0, r3
 8011208:	370c      	adds	r7, #12
 801120a:	46bd      	mov	sp, r7
 801120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011210:	4770      	bx	lr

08011212 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8011212:	b480      	push	{r7}
 8011214:	b083      	sub	sp, #12
 8011216:	af00      	add	r7, sp, #0
 8011218:	6078      	str	r0, [r7, #4]
 801121a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 801121c:	683b      	ldr	r3, [r7, #0]
 801121e:	681a      	ldr	r2, [r3, #0]
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8011226:	2300      	movs	r3, #0
}
 8011228:	4618      	mov	r0, r3
 801122a:	370c      	adds	r7, #12
 801122c:	46bd      	mov	sp, r7
 801122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011232:	4770      	bx	lr

08011234 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8011234:	b480      	push	{r7}
 8011236:	b083      	sub	sp, #12
 8011238:	af00      	add	r7, sp, #0
 801123a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	2203      	movs	r2, #3
 8011240:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011242:	2300      	movs	r3, #0
}
 8011244:	4618      	mov	r0, r3
 8011246:	370c      	adds	r7, #12
 8011248:	46bd      	mov	sp, r7
 801124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124e:	4770      	bx	lr

08011250 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8011250:	b480      	push	{r7}
 8011252:	b083      	sub	sp, #12
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	f003 0303 	and.w	r3, r3, #3
}
 8011260:	4618      	mov	r0, r3
 8011262:	370c      	adds	r7, #12
 8011264:	46bd      	mov	sp, r7
 8011266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126a:	4770      	bx	lr

0801126c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 801126c:	b480      	push	{r7}
 801126e:	b085      	sub	sp, #20
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
 8011274:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011276:	2300      	movs	r3, #0
 8011278:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801127a:	683b      	ldr	r3, [r7, #0]
 801127c:	681a      	ldr	r2, [r3, #0]
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801128a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8011290:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011292:	683b      	ldr	r3, [r7, #0]
 8011294:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8011296:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011298:	68fa      	ldr	r2, [r7, #12]
 801129a:	4313      	orrs	r3, r2
 801129c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	68da      	ldr	r2, [r3, #12]
 80112a2:	4b06      	ldr	r3, [pc, #24]	@ (80112bc <SDMMC_SendCommand+0x50>)
 80112a4:	4013      	ands	r3, r2
 80112a6:	68fa      	ldr	r2, [r7, #12]
 80112a8:	431a      	orrs	r2, r3
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80112ae:	2300      	movs	r3, #0
}
 80112b0:	4618      	mov	r0, r3
 80112b2:	3714      	adds	r7, #20
 80112b4:	46bd      	mov	sp, r7
 80112b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ba:	4770      	bx	lr
 80112bc:	fffff000 	.word	0xfffff000

080112c0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80112c0:	b480      	push	{r7}
 80112c2:	b083      	sub	sp, #12
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	691b      	ldr	r3, [r3, #16]
 80112cc:	b2db      	uxtb	r3, r3
}
 80112ce:	4618      	mov	r0, r3
 80112d0:	370c      	adds	r7, #12
 80112d2:	46bd      	mov	sp, r7
 80112d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d8:	4770      	bx	lr

080112da <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80112da:	b480      	push	{r7}
 80112dc:	b085      	sub	sp, #20
 80112de:	af00      	add	r7, sp, #0
 80112e0:	6078      	str	r0, [r7, #4]
 80112e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	3314      	adds	r3, #20
 80112e8:	461a      	mov	r2, r3
 80112ea:	683b      	ldr	r3, [r7, #0]
 80112ec:	4413      	add	r3, r2
 80112ee:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	681b      	ldr	r3, [r3, #0]
}  
 80112f4:	4618      	mov	r0, r3
 80112f6:	3714      	adds	r7, #20
 80112f8:	46bd      	mov	sp, r7
 80112fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fe:	4770      	bx	lr

08011300 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8011300:	b480      	push	{r7}
 8011302:	b085      	sub	sp, #20
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
 8011308:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801130a:	2300      	movs	r3, #0
 801130c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	681a      	ldr	r2, [r3, #0]
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	685a      	ldr	r2, [r3, #4]
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8011322:	683b      	ldr	r3, [r7, #0]
 8011324:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011326:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8011328:	683b      	ldr	r3, [r7, #0]
 801132a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801132c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801132e:	683b      	ldr	r3, [r7, #0]
 8011330:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8011332:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011334:	68fa      	ldr	r2, [r7, #12]
 8011336:	4313      	orrs	r3, r2
 8011338:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801133e:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	431a      	orrs	r2, r3
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 801134a:	2300      	movs	r3, #0

}
 801134c:	4618      	mov	r0, r3
 801134e:	3714      	adds	r7, #20
 8011350:	46bd      	mov	sp, r7
 8011352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011356:	4770      	bx	lr

08011358 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011358:	b580      	push	{r7, lr}
 801135a:	b088      	sub	sp, #32
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
 8011360:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011362:	683b      	ldr	r3, [r7, #0]
 8011364:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011366:	2310      	movs	r3, #16
 8011368:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801136a:	2340      	movs	r3, #64	@ 0x40
 801136c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801136e:	2300      	movs	r3, #0
 8011370:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011372:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011376:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011378:	f107 0308 	add.w	r3, r7, #8
 801137c:	4619      	mov	r1, r3
 801137e:	6878      	ldr	r0, [r7, #4]
 8011380:	f7ff ff74 	bl	801126c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011384:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011388:	2110      	movs	r1, #16
 801138a:	6878      	ldr	r0, [r7, #4]
 801138c:	f000 fa1a 	bl	80117c4 <SDMMC_GetCmdResp1>
 8011390:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011392:	69fb      	ldr	r3, [r7, #28]
}
 8011394:	4618      	mov	r0, r3
 8011396:	3720      	adds	r7, #32
 8011398:	46bd      	mov	sp, r7
 801139a:	bd80      	pop	{r7, pc}

0801139c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b088      	sub	sp, #32
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
 80113a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80113a6:	683b      	ldr	r3, [r7, #0]
 80113a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80113aa:	2311      	movs	r3, #17
 80113ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80113ae:	2340      	movs	r3, #64	@ 0x40
 80113b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80113b2:	2300      	movs	r3, #0
 80113b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80113b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80113ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80113bc:	f107 0308 	add.w	r3, r7, #8
 80113c0:	4619      	mov	r1, r3
 80113c2:	6878      	ldr	r0, [r7, #4]
 80113c4:	f7ff ff52 	bl	801126c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80113c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80113cc:	2111      	movs	r1, #17
 80113ce:	6878      	ldr	r0, [r7, #4]
 80113d0:	f000 f9f8 	bl	80117c4 <SDMMC_GetCmdResp1>
 80113d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80113d6:	69fb      	ldr	r3, [r7, #28]
}
 80113d8:	4618      	mov	r0, r3
 80113da:	3720      	adds	r7, #32
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd80      	pop	{r7, pc}

080113e0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b088      	sub	sp, #32
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
 80113e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80113ea:	683b      	ldr	r3, [r7, #0]
 80113ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80113ee:	2312      	movs	r3, #18
 80113f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80113f2:	2340      	movs	r3, #64	@ 0x40
 80113f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80113f6:	2300      	movs	r3, #0
 80113f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80113fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80113fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011400:	f107 0308 	add.w	r3, r7, #8
 8011404:	4619      	mov	r1, r3
 8011406:	6878      	ldr	r0, [r7, #4]
 8011408:	f7ff ff30 	bl	801126c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801140c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011410:	2112      	movs	r1, #18
 8011412:	6878      	ldr	r0, [r7, #4]
 8011414:	f000 f9d6 	bl	80117c4 <SDMMC_GetCmdResp1>
 8011418:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801141a:	69fb      	ldr	r3, [r7, #28]
}
 801141c:	4618      	mov	r0, r3
 801141e:	3720      	adds	r7, #32
 8011420:	46bd      	mov	sp, r7
 8011422:	bd80      	pop	{r7, pc}

08011424 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011424:	b580      	push	{r7, lr}
 8011426:	b088      	sub	sp, #32
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
 801142c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011432:	2318      	movs	r3, #24
 8011434:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011436:	2340      	movs	r3, #64	@ 0x40
 8011438:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801143a:	2300      	movs	r3, #0
 801143c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801143e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011442:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011444:	f107 0308 	add.w	r3, r7, #8
 8011448:	4619      	mov	r1, r3
 801144a:	6878      	ldr	r0, [r7, #4]
 801144c:	f7ff ff0e 	bl	801126c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011450:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011454:	2118      	movs	r1, #24
 8011456:	6878      	ldr	r0, [r7, #4]
 8011458:	f000 f9b4 	bl	80117c4 <SDMMC_GetCmdResp1>
 801145c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801145e:	69fb      	ldr	r3, [r7, #28]
}
 8011460:	4618      	mov	r0, r3
 8011462:	3720      	adds	r7, #32
 8011464:	46bd      	mov	sp, r7
 8011466:	bd80      	pop	{r7, pc}

08011468 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b088      	sub	sp, #32
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
 8011470:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011472:	683b      	ldr	r3, [r7, #0]
 8011474:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011476:	2319      	movs	r3, #25
 8011478:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801147a:	2340      	movs	r3, #64	@ 0x40
 801147c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801147e:	2300      	movs	r3, #0
 8011480:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011482:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011486:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011488:	f107 0308 	add.w	r3, r7, #8
 801148c:	4619      	mov	r1, r3
 801148e:	6878      	ldr	r0, [r7, #4]
 8011490:	f7ff feec 	bl	801126c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011498:	2119      	movs	r1, #25
 801149a:	6878      	ldr	r0, [r7, #4]
 801149c:	f000 f992 	bl	80117c4 <SDMMC_GetCmdResp1>
 80114a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114a2:	69fb      	ldr	r3, [r7, #28]
}
 80114a4:	4618      	mov	r0, r3
 80114a6:	3720      	adds	r7, #32
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd80      	pop	{r7, pc}

080114ac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b088      	sub	sp, #32
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80114b4:	2300      	movs	r3, #0
 80114b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80114b8:	230c      	movs	r3, #12
 80114ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80114bc:	2340      	movs	r3, #64	@ 0x40
 80114be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80114c0:	2300      	movs	r3, #0
 80114c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80114c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80114c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80114ca:	f107 0308 	add.w	r3, r7, #8
 80114ce:	4619      	mov	r1, r3
 80114d0:	6878      	ldr	r0, [r7, #4]
 80114d2:	f7ff fecb 	bl	801126c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80114d6:	4a05      	ldr	r2, [pc, #20]	@ (80114ec <SDMMC_CmdStopTransfer+0x40>)
 80114d8:	210c      	movs	r1, #12
 80114da:	6878      	ldr	r0, [r7, #4]
 80114dc:	f000 f972 	bl	80117c4 <SDMMC_GetCmdResp1>
 80114e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114e2:	69fb      	ldr	r3, [r7, #28]
}
 80114e4:	4618      	mov	r0, r3
 80114e6:	3720      	adds	r7, #32
 80114e8:	46bd      	mov	sp, r7
 80114ea:	bd80      	pop	{r7, pc}
 80114ec:	05f5e100 	.word	0x05f5e100

080114f0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b08a      	sub	sp, #40	@ 0x28
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	60f8      	str	r0, [r7, #12]
 80114f8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011500:	2307      	movs	r3, #7
 8011502:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011504:	2340      	movs	r3, #64	@ 0x40
 8011506:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011508:	2300      	movs	r3, #0
 801150a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801150c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011510:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011512:	f107 0310 	add.w	r3, r7, #16
 8011516:	4619      	mov	r1, r3
 8011518:	68f8      	ldr	r0, [r7, #12]
 801151a:	f7ff fea7 	bl	801126c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801151e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011522:	2107      	movs	r1, #7
 8011524:	68f8      	ldr	r0, [r7, #12]
 8011526:	f000 f94d 	bl	80117c4 <SDMMC_GetCmdResp1>
 801152a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 801152c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801152e:	4618      	mov	r0, r3
 8011530:	3728      	adds	r7, #40	@ 0x28
 8011532:	46bd      	mov	sp, r7
 8011534:	bd80      	pop	{r7, pc}

08011536 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8011536:	b580      	push	{r7, lr}
 8011538:	b088      	sub	sp, #32
 801153a:	af00      	add	r7, sp, #0
 801153c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 801153e:	2300      	movs	r3, #0
 8011540:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011542:	2300      	movs	r3, #0
 8011544:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8011546:	2300      	movs	r3, #0
 8011548:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801154a:	2300      	movs	r3, #0
 801154c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801154e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011552:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011554:	f107 0308 	add.w	r3, r7, #8
 8011558:	4619      	mov	r1, r3
 801155a:	6878      	ldr	r0, [r7, #4]
 801155c:	f7ff fe86 	bl	801126c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011560:	6878      	ldr	r0, [r7, #4]
 8011562:	f000 fb67 	bl	8011c34 <SDMMC_GetCmdError>
 8011566:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011568:	69fb      	ldr	r3, [r7, #28]
}
 801156a:	4618      	mov	r0, r3
 801156c:	3720      	adds	r7, #32
 801156e:	46bd      	mov	sp, r7
 8011570:	bd80      	pop	{r7, pc}

08011572 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8011572:	b580      	push	{r7, lr}
 8011574:	b088      	sub	sp, #32
 8011576:	af00      	add	r7, sp, #0
 8011578:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801157a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 801157e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011580:	2308      	movs	r3, #8
 8011582:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011584:	2340      	movs	r3, #64	@ 0x40
 8011586:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011588:	2300      	movs	r3, #0
 801158a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801158c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011590:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011592:	f107 0308 	add.w	r3, r7, #8
 8011596:	4619      	mov	r1, r3
 8011598:	6878      	ldr	r0, [r7, #4]
 801159a:	f7ff fe67 	bl	801126c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801159e:	6878      	ldr	r0, [r7, #4]
 80115a0:	f000 fafa 	bl	8011b98 <SDMMC_GetCmdResp7>
 80115a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80115a6:	69fb      	ldr	r3, [r7, #28]
}
 80115a8:	4618      	mov	r0, r3
 80115aa:	3720      	adds	r7, #32
 80115ac:	46bd      	mov	sp, r7
 80115ae:	bd80      	pop	{r7, pc}

080115b0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b088      	sub	sp, #32
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
 80115b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80115ba:	683b      	ldr	r3, [r7, #0]
 80115bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80115be:	2337      	movs	r3, #55	@ 0x37
 80115c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80115c2:	2340      	movs	r3, #64	@ 0x40
 80115c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80115c6:	2300      	movs	r3, #0
 80115c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80115ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80115ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80115d0:	f107 0308 	add.w	r3, r7, #8
 80115d4:	4619      	mov	r1, r3
 80115d6:	6878      	ldr	r0, [r7, #4]
 80115d8:	f7ff fe48 	bl	801126c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80115dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80115e0:	2137      	movs	r1, #55	@ 0x37
 80115e2:	6878      	ldr	r0, [r7, #4]
 80115e4:	f000 f8ee 	bl	80117c4 <SDMMC_GetCmdResp1>
 80115e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80115ea:	69fb      	ldr	r3, [r7, #28]
}
 80115ec:	4618      	mov	r0, r3
 80115ee:	3720      	adds	r7, #32
 80115f0:	46bd      	mov	sp, r7
 80115f2:	bd80      	pop	{r7, pc}

080115f4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b088      	sub	sp, #32
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
 80115fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80115fe:	683a      	ldr	r2, [r7, #0]
 8011600:	4b0d      	ldr	r3, [pc, #52]	@ (8011638 <SDMMC_CmdAppOperCommand+0x44>)
 8011602:	4313      	orrs	r3, r2
 8011604:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8011606:	2329      	movs	r3, #41	@ 0x29
 8011608:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801160a:	2340      	movs	r3, #64	@ 0x40
 801160c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801160e:	2300      	movs	r3, #0
 8011610:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011612:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011616:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011618:	f107 0308 	add.w	r3, r7, #8
 801161c:	4619      	mov	r1, r3
 801161e:	6878      	ldr	r0, [r7, #4]
 8011620:	f7ff fe24 	bl	801126c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f000 fa03 	bl	8011a30 <SDMMC_GetCmdResp3>
 801162a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801162c:	69fb      	ldr	r3, [r7, #28]
}
 801162e:	4618      	mov	r0, r3
 8011630:	3720      	adds	r7, #32
 8011632:	46bd      	mov	sp, r7
 8011634:	bd80      	pop	{r7, pc}
 8011636:	bf00      	nop
 8011638:	80100000 	.word	0x80100000

0801163c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b088      	sub	sp, #32
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
 8011644:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011646:	683b      	ldr	r3, [r7, #0]
 8011648:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801164a:	2306      	movs	r3, #6
 801164c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801164e:	2340      	movs	r3, #64	@ 0x40
 8011650:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011652:	2300      	movs	r3, #0
 8011654:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011656:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801165a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801165c:	f107 0308 	add.w	r3, r7, #8
 8011660:	4619      	mov	r1, r3
 8011662:	6878      	ldr	r0, [r7, #4]
 8011664:	f7ff fe02 	bl	801126c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011668:	f241 3288 	movw	r2, #5000	@ 0x1388
 801166c:	2106      	movs	r1, #6
 801166e:	6878      	ldr	r0, [r7, #4]
 8011670:	f000 f8a8 	bl	80117c4 <SDMMC_GetCmdResp1>
 8011674:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011676:	69fb      	ldr	r3, [r7, #28]
}
 8011678:	4618      	mov	r0, r3
 801167a:	3720      	adds	r7, #32
 801167c:	46bd      	mov	sp, r7
 801167e:	bd80      	pop	{r7, pc}

08011680 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b088      	sub	sp, #32
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8011688:	2300      	movs	r3, #0
 801168a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801168c:	2333      	movs	r3, #51	@ 0x33
 801168e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011690:	2340      	movs	r3, #64	@ 0x40
 8011692:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011694:	2300      	movs	r3, #0
 8011696:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011698:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801169c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801169e:	f107 0308 	add.w	r3, r7, #8
 80116a2:	4619      	mov	r1, r3
 80116a4:	6878      	ldr	r0, [r7, #4]
 80116a6:	f7ff fde1 	bl	801126c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80116aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80116ae:	2133      	movs	r1, #51	@ 0x33
 80116b0:	6878      	ldr	r0, [r7, #4]
 80116b2:	f000 f887 	bl	80117c4 <SDMMC_GetCmdResp1>
 80116b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80116b8:	69fb      	ldr	r3, [r7, #28]
}
 80116ba:	4618      	mov	r0, r3
 80116bc:	3720      	adds	r7, #32
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd80      	pop	{r7, pc}

080116c2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80116c2:	b580      	push	{r7, lr}
 80116c4:	b088      	sub	sp, #32
 80116c6:	af00      	add	r7, sp, #0
 80116c8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80116ca:	2300      	movs	r3, #0
 80116cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80116ce:	2302      	movs	r3, #2
 80116d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80116d2:	23c0      	movs	r3, #192	@ 0xc0
 80116d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80116d6:	2300      	movs	r3, #0
 80116d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80116da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80116de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80116e0:	f107 0308 	add.w	r3, r7, #8
 80116e4:	4619      	mov	r1, r3
 80116e6:	6878      	ldr	r0, [r7, #4]
 80116e8:	f7ff fdc0 	bl	801126c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80116ec:	6878      	ldr	r0, [r7, #4]
 80116ee:	f000 f957 	bl	80119a0 <SDMMC_GetCmdResp2>
 80116f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80116f4:	69fb      	ldr	r3, [r7, #28]
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	3720      	adds	r7, #32
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}

080116fe <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80116fe:	b580      	push	{r7, lr}
 8011700:	b088      	sub	sp, #32
 8011702:	af00      	add	r7, sp, #0
 8011704:	6078      	str	r0, [r7, #4]
 8011706:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801170c:	2309      	movs	r3, #9
 801170e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011710:	23c0      	movs	r3, #192	@ 0xc0
 8011712:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011714:	2300      	movs	r3, #0
 8011716:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011718:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801171c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801171e:	f107 0308 	add.w	r3, r7, #8
 8011722:	4619      	mov	r1, r3
 8011724:	6878      	ldr	r0, [r7, #4]
 8011726:	f7ff fda1 	bl	801126c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801172a:	6878      	ldr	r0, [r7, #4]
 801172c:	f000 f938 	bl	80119a0 <SDMMC_GetCmdResp2>
 8011730:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011732:	69fb      	ldr	r3, [r7, #28]
}
 8011734:	4618      	mov	r0, r3
 8011736:	3720      	adds	r7, #32
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}

0801173c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b088      	sub	sp, #32
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
 8011744:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011746:	2300      	movs	r3, #0
 8011748:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801174a:	2303      	movs	r3, #3
 801174c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801174e:	2340      	movs	r3, #64	@ 0x40
 8011750:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011752:	2300      	movs	r3, #0
 8011754:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011756:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801175a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801175c:	f107 0308 	add.w	r3, r7, #8
 8011760:	4619      	mov	r1, r3
 8011762:	6878      	ldr	r0, [r7, #4]
 8011764:	f7ff fd82 	bl	801126c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011768:	683a      	ldr	r2, [r7, #0]
 801176a:	2103      	movs	r1, #3
 801176c:	6878      	ldr	r0, [r7, #4]
 801176e:	f000 f99d 	bl	8011aac <SDMMC_GetCmdResp6>
 8011772:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011774:	69fb      	ldr	r3, [r7, #28]
}
 8011776:	4618      	mov	r0, r3
 8011778:	3720      	adds	r7, #32
 801177a:	46bd      	mov	sp, r7
 801177c:	bd80      	pop	{r7, pc}

0801177e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801177e:	b580      	push	{r7, lr}
 8011780:	b088      	sub	sp, #32
 8011782:	af00      	add	r7, sp, #0
 8011784:	6078      	str	r0, [r7, #4]
 8011786:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801178c:	230d      	movs	r3, #13
 801178e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011790:	2340      	movs	r3, #64	@ 0x40
 8011792:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011794:	2300      	movs	r3, #0
 8011796:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011798:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801179c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801179e:	f107 0308 	add.w	r3, r7, #8
 80117a2:	4619      	mov	r1, r3
 80117a4:	6878      	ldr	r0, [r7, #4]
 80117a6:	f7ff fd61 	bl	801126c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80117aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80117ae:	210d      	movs	r1, #13
 80117b0:	6878      	ldr	r0, [r7, #4]
 80117b2:	f000 f807 	bl	80117c4 <SDMMC_GetCmdResp1>
 80117b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80117b8:	69fb      	ldr	r3, [r7, #28]
}
 80117ba:	4618      	mov	r0, r3
 80117bc:	3720      	adds	r7, #32
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd80      	pop	{r7, pc}
	...

080117c4 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b088      	sub	sp, #32
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	60f8      	str	r0, [r7, #12]
 80117cc:	460b      	mov	r3, r1
 80117ce:	607a      	str	r2, [r7, #4]
 80117d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80117d2:	4b70      	ldr	r3, [pc, #448]	@ (8011994 <SDMMC_GetCmdResp1+0x1d0>)
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	4a70      	ldr	r2, [pc, #448]	@ (8011998 <SDMMC_GetCmdResp1+0x1d4>)
 80117d8:	fba2 2303 	umull	r2, r3, r2, r3
 80117dc:	0a5a      	lsrs	r2, r3, #9
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	fb02 f303 	mul.w	r3, r2, r3
 80117e4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80117e6:	69fb      	ldr	r3, [r7, #28]
 80117e8:	1e5a      	subs	r2, r3, #1
 80117ea:	61fa      	str	r2, [r7, #28]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d102      	bne.n	80117f6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80117f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80117f4:	e0c9      	b.n	801198a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80117fa:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80117fc:	69bb      	ldr	r3, [r7, #24]
 80117fe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8011802:	2b00      	cmp	r3, #0
 8011804:	d0ef      	beq.n	80117e6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011806:	69bb      	ldr	r3, [r7, #24]
 8011808:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801180c:	2b00      	cmp	r3, #0
 801180e:	d1ea      	bne.n	80117e6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011814:	f003 0304 	and.w	r3, r3, #4
 8011818:	2b00      	cmp	r3, #0
 801181a:	d004      	beq.n	8011826 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	2204      	movs	r2, #4
 8011820:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011822:	2304      	movs	r3, #4
 8011824:	e0b1      	b.n	801198a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801182a:	f003 0301 	and.w	r3, r3, #1
 801182e:	2b00      	cmp	r3, #0
 8011830:	d004      	beq.n	801183c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	2201      	movs	r2, #1
 8011836:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011838:	2301      	movs	r3, #1
 801183a:	e0a6      	b.n	801198a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	22c5      	movs	r2, #197	@ 0xc5
 8011840:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011842:	68f8      	ldr	r0, [r7, #12]
 8011844:	f7ff fd3c 	bl	80112c0 <SDMMC_GetCommandResponse>
 8011848:	4603      	mov	r3, r0
 801184a:	461a      	mov	r2, r3
 801184c:	7afb      	ldrb	r3, [r7, #11]
 801184e:	4293      	cmp	r3, r2
 8011850:	d001      	beq.n	8011856 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011852:	2301      	movs	r3, #1
 8011854:	e099      	b.n	801198a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011856:	2100      	movs	r1, #0
 8011858:	68f8      	ldr	r0, [r7, #12]
 801185a:	f7ff fd3e 	bl	80112da <SDMMC_GetResponse>
 801185e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011860:	697a      	ldr	r2, [r7, #20]
 8011862:	4b4e      	ldr	r3, [pc, #312]	@ (801199c <SDMMC_GetCmdResp1+0x1d8>)
 8011864:	4013      	ands	r3, r2
 8011866:	2b00      	cmp	r3, #0
 8011868:	d101      	bne.n	801186e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801186a:	2300      	movs	r3, #0
 801186c:	e08d      	b.n	801198a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801186e:	697b      	ldr	r3, [r7, #20]
 8011870:	2b00      	cmp	r3, #0
 8011872:	da02      	bge.n	801187a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011874:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8011878:	e087      	b.n	801198a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801187a:	697b      	ldr	r3, [r7, #20]
 801187c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8011880:	2b00      	cmp	r3, #0
 8011882:	d001      	beq.n	8011888 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011884:	2340      	movs	r3, #64	@ 0x40
 8011886:	e080      	b.n	801198a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011888:	697b      	ldr	r3, [r7, #20]
 801188a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801188e:	2b00      	cmp	r3, #0
 8011890:	d001      	beq.n	8011896 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011892:	2380      	movs	r3, #128	@ 0x80
 8011894:	e079      	b.n	801198a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8011896:	697b      	ldr	r3, [r7, #20]
 8011898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801189c:	2b00      	cmp	r3, #0
 801189e:	d002      	beq.n	80118a6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80118a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80118a4:	e071      	b.n	801198a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80118a6:	697b      	ldr	r3, [r7, #20]
 80118a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d002      	beq.n	80118b6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80118b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80118b4:	e069      	b.n	801198a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80118b6:	697b      	ldr	r3, [r7, #20]
 80118b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d002      	beq.n	80118c6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80118c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80118c4:	e061      	b.n	801198a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80118c6:	697b      	ldr	r3, [r7, #20]
 80118c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d002      	beq.n	80118d6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80118d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80118d4:	e059      	b.n	801198a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d002      	beq.n	80118e6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80118e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80118e4:	e051      	b.n	801198a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80118e6:	697b      	ldr	r3, [r7, #20]
 80118e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d002      	beq.n	80118f6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80118f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80118f4:	e049      	b.n	801198a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80118f6:	697b      	ldr	r3, [r7, #20]
 80118f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d002      	beq.n	8011906 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011900:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8011904:	e041      	b.n	801198a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011906:	697b      	ldr	r3, [r7, #20]
 8011908:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801190c:	2b00      	cmp	r3, #0
 801190e:	d002      	beq.n	8011916 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8011910:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011914:	e039      	b.n	801198a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011916:	697b      	ldr	r3, [r7, #20]
 8011918:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801191c:	2b00      	cmp	r3, #0
 801191e:	d002      	beq.n	8011926 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011920:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8011924:	e031      	b.n	801198a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011926:	697b      	ldr	r3, [r7, #20]
 8011928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801192c:	2b00      	cmp	r3, #0
 801192e:	d002      	beq.n	8011936 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011930:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8011934:	e029      	b.n	801198a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011936:	697b      	ldr	r3, [r7, #20]
 8011938:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801193c:	2b00      	cmp	r3, #0
 801193e:	d002      	beq.n	8011946 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011940:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011944:	e021      	b.n	801198a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011946:	697b      	ldr	r3, [r7, #20]
 8011948:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801194c:	2b00      	cmp	r3, #0
 801194e:	d002      	beq.n	8011956 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011950:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8011954:	e019      	b.n	801198a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011956:	697b      	ldr	r3, [r7, #20]
 8011958:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801195c:	2b00      	cmp	r3, #0
 801195e:	d002      	beq.n	8011966 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011960:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8011964:	e011      	b.n	801198a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011966:	697b      	ldr	r3, [r7, #20]
 8011968:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801196c:	2b00      	cmp	r3, #0
 801196e:	d002      	beq.n	8011976 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011970:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8011974:	e009      	b.n	801198a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8011976:	697b      	ldr	r3, [r7, #20]
 8011978:	f003 0308 	and.w	r3, r3, #8
 801197c:	2b00      	cmp	r3, #0
 801197e:	d002      	beq.n	8011986 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011980:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8011984:	e001      	b.n	801198a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011986:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801198a:	4618      	mov	r0, r3
 801198c:	3720      	adds	r7, #32
 801198e:	46bd      	mov	sp, r7
 8011990:	bd80      	pop	{r7, pc}
 8011992:	bf00      	nop
 8011994:	20000020 	.word	0x20000020
 8011998:	10624dd3 	.word	0x10624dd3
 801199c:	fdffe008 	.word	0xfdffe008

080119a0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80119a0:	b480      	push	{r7}
 80119a2:	b085      	sub	sp, #20
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80119a8:	4b1f      	ldr	r3, [pc, #124]	@ (8011a28 <SDMMC_GetCmdResp2+0x88>)
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	4a1f      	ldr	r2, [pc, #124]	@ (8011a2c <SDMMC_GetCmdResp2+0x8c>)
 80119ae:	fba2 2303 	umull	r2, r3, r2, r3
 80119b2:	0a5b      	lsrs	r3, r3, #9
 80119b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80119b8:	fb02 f303 	mul.w	r3, r2, r3
 80119bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	1e5a      	subs	r2, r3, #1
 80119c2:	60fa      	str	r2, [r7, #12]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d102      	bne.n	80119ce <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80119c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80119cc:	e026      	b.n	8011a1c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80119d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80119d4:	68bb      	ldr	r3, [r7, #8]
 80119d6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d0ef      	beq.n	80119be <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80119de:	68bb      	ldr	r3, [r7, #8]
 80119e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d1ea      	bne.n	80119be <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80119ec:	f003 0304 	and.w	r3, r3, #4
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d004      	beq.n	80119fe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	2204      	movs	r2, #4
 80119f8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80119fa:	2304      	movs	r3, #4
 80119fc:	e00e      	b.n	8011a1c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011a02:	f003 0301 	and.w	r3, r3, #1
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d004      	beq.n	8011a14 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	2201      	movs	r2, #1
 8011a0e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011a10:	2301      	movs	r3, #1
 8011a12:	e003      	b.n	8011a1c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	22c5      	movs	r2, #197	@ 0xc5
 8011a18:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8011a1a:	2300      	movs	r3, #0
}
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	3714      	adds	r7, #20
 8011a20:	46bd      	mov	sp, r7
 8011a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a26:	4770      	bx	lr
 8011a28:	20000020 	.word	0x20000020
 8011a2c:	10624dd3 	.word	0x10624dd3

08011a30 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011a30:	b480      	push	{r7}
 8011a32:	b085      	sub	sp, #20
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011a38:	4b1a      	ldr	r3, [pc, #104]	@ (8011aa4 <SDMMC_GetCmdResp3+0x74>)
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	4a1a      	ldr	r2, [pc, #104]	@ (8011aa8 <SDMMC_GetCmdResp3+0x78>)
 8011a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8011a42:	0a5b      	lsrs	r3, r3, #9
 8011a44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011a48:	fb02 f303 	mul.w	r3, r2, r3
 8011a4c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	1e5a      	subs	r2, r3, #1
 8011a52:	60fa      	str	r2, [r7, #12]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d102      	bne.n	8011a5e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011a58:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011a5c:	e01b      	b.n	8011a96 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011a62:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011a64:	68bb      	ldr	r3, [r7, #8]
 8011a66:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d0ef      	beq.n	8011a4e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011a6e:	68bb      	ldr	r3, [r7, #8]
 8011a70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d1ea      	bne.n	8011a4e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011a7c:	f003 0304 	and.w	r3, r3, #4
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d004      	beq.n	8011a8e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	2204      	movs	r2, #4
 8011a88:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011a8a:	2304      	movs	r3, #4
 8011a8c:	e003      	b.n	8011a96 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	22c5      	movs	r2, #197	@ 0xc5
 8011a92:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011a94:	2300      	movs	r3, #0
}
 8011a96:	4618      	mov	r0, r3
 8011a98:	3714      	adds	r7, #20
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa0:	4770      	bx	lr
 8011aa2:	bf00      	nop
 8011aa4:	20000020 	.word	0x20000020
 8011aa8:	10624dd3 	.word	0x10624dd3

08011aac <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011aac:	b580      	push	{r7, lr}
 8011aae:	b088      	sub	sp, #32
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	60f8      	str	r0, [r7, #12]
 8011ab4:	460b      	mov	r3, r1
 8011ab6:	607a      	str	r2, [r7, #4]
 8011ab8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011aba:	4b35      	ldr	r3, [pc, #212]	@ (8011b90 <SDMMC_GetCmdResp6+0xe4>)
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	4a35      	ldr	r2, [pc, #212]	@ (8011b94 <SDMMC_GetCmdResp6+0xe8>)
 8011ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8011ac4:	0a5b      	lsrs	r3, r3, #9
 8011ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011aca:	fb02 f303 	mul.w	r3, r2, r3
 8011ace:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8011ad0:	69fb      	ldr	r3, [r7, #28]
 8011ad2:	1e5a      	subs	r2, r3, #1
 8011ad4:	61fa      	str	r2, [r7, #28]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d102      	bne.n	8011ae0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011ada:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011ade:	e052      	b.n	8011b86 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011ae4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011ae6:	69bb      	ldr	r3, [r7, #24]
 8011ae8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d0ef      	beq.n	8011ad0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011af0:	69bb      	ldr	r3, [r7, #24]
 8011af2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d1ea      	bne.n	8011ad0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011afe:	f003 0304 	and.w	r3, r3, #4
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d004      	beq.n	8011b10 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	2204      	movs	r2, #4
 8011b0a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011b0c:	2304      	movs	r3, #4
 8011b0e:	e03a      	b.n	8011b86 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011b14:	f003 0301 	and.w	r3, r3, #1
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d004      	beq.n	8011b26 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	2201      	movs	r2, #1
 8011b20:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011b22:	2301      	movs	r3, #1
 8011b24:	e02f      	b.n	8011b86 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011b26:	68f8      	ldr	r0, [r7, #12]
 8011b28:	f7ff fbca 	bl	80112c0 <SDMMC_GetCommandResponse>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	461a      	mov	r2, r3
 8011b30:	7afb      	ldrb	r3, [r7, #11]
 8011b32:	4293      	cmp	r3, r2
 8011b34:	d001      	beq.n	8011b3a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011b36:	2301      	movs	r3, #1
 8011b38:	e025      	b.n	8011b86 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	22c5      	movs	r2, #197	@ 0xc5
 8011b3e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011b40:	2100      	movs	r1, #0
 8011b42:	68f8      	ldr	r0, [r7, #12]
 8011b44:	f7ff fbc9 	bl	80112da <SDMMC_GetResponse>
 8011b48:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8011b4a:	697b      	ldr	r3, [r7, #20]
 8011b4c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d106      	bne.n	8011b62 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8011b54:	697b      	ldr	r3, [r7, #20]
 8011b56:	0c1b      	lsrs	r3, r3, #16
 8011b58:	b29a      	uxth	r2, r3
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8011b5e:	2300      	movs	r3, #0
 8011b60:	e011      	b.n	8011b86 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011b62:	697b      	ldr	r3, [r7, #20]
 8011b64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d002      	beq.n	8011b72 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011b6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011b70:	e009      	b.n	8011b86 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011b72:	697b      	ldr	r3, [r7, #20]
 8011b74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d002      	beq.n	8011b82 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011b7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011b80:	e001      	b.n	8011b86 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011b82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8011b86:	4618      	mov	r0, r3
 8011b88:	3720      	adds	r7, #32
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	bd80      	pop	{r7, pc}
 8011b8e:	bf00      	nop
 8011b90:	20000020 	.word	0x20000020
 8011b94:	10624dd3 	.word	0x10624dd3

08011b98 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011b98:	b480      	push	{r7}
 8011b9a:	b085      	sub	sp, #20
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011ba0:	4b22      	ldr	r3, [pc, #136]	@ (8011c2c <SDMMC_GetCmdResp7+0x94>)
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	4a22      	ldr	r2, [pc, #136]	@ (8011c30 <SDMMC_GetCmdResp7+0x98>)
 8011ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8011baa:	0a5b      	lsrs	r3, r3, #9
 8011bac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011bb0:	fb02 f303 	mul.w	r3, r2, r3
 8011bb4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	1e5a      	subs	r2, r3, #1
 8011bba:	60fa      	str	r2, [r7, #12]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d102      	bne.n	8011bc6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011bc0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011bc4:	e02c      	b.n	8011c20 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011bca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011bcc:	68bb      	ldr	r3, [r7, #8]
 8011bce:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d0ef      	beq.n	8011bb6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011bd6:	68bb      	ldr	r3, [r7, #8]
 8011bd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d1ea      	bne.n	8011bb6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011be4:	f003 0304 	and.w	r3, r3, #4
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d004      	beq.n	8011bf6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	2204      	movs	r2, #4
 8011bf0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011bf2:	2304      	movs	r3, #4
 8011bf4:	e014      	b.n	8011c20 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011bfa:	f003 0301 	and.w	r3, r3, #1
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d004      	beq.n	8011c0c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	2201      	movs	r2, #1
 8011c06:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011c08:	2301      	movs	r3, #1
 8011c0a:	e009      	b.n	8011c20 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d002      	beq.n	8011c1e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	2240      	movs	r2, #64	@ 0x40
 8011c1c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011c1e:	2300      	movs	r3, #0
  
}
 8011c20:	4618      	mov	r0, r3
 8011c22:	3714      	adds	r7, #20
 8011c24:	46bd      	mov	sp, r7
 8011c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2a:	4770      	bx	lr
 8011c2c:	20000020 	.word	0x20000020
 8011c30:	10624dd3 	.word	0x10624dd3

08011c34 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8011c34:	b480      	push	{r7}
 8011c36:	b085      	sub	sp, #20
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011c3c:	4b11      	ldr	r3, [pc, #68]	@ (8011c84 <SDMMC_GetCmdError+0x50>)
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	4a11      	ldr	r2, [pc, #68]	@ (8011c88 <SDMMC_GetCmdError+0x54>)
 8011c42:	fba2 2303 	umull	r2, r3, r2, r3
 8011c46:	0a5b      	lsrs	r3, r3, #9
 8011c48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011c4c:	fb02 f303 	mul.w	r3, r2, r3
 8011c50:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	1e5a      	subs	r2, r3, #1
 8011c56:	60fa      	str	r2, [r7, #12]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d102      	bne.n	8011c62 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011c5c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011c60:	e009      	b.n	8011c76 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d0f1      	beq.n	8011c52 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	22c5      	movs	r2, #197	@ 0xc5
 8011c72:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8011c74:	2300      	movs	r3, #0
}
 8011c76:	4618      	mov	r0, r3
 8011c78:	3714      	adds	r7, #20
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c80:	4770      	bx	lr
 8011c82:	bf00      	nop
 8011c84:	20000020 	.word	0x20000020
 8011c88:	10624dd3 	.word	0x10624dd3

08011c8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011c8c:	b480      	push	{r7}
 8011c8e:	b083      	sub	sp, #12
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	689b      	ldr	r3, [r3, #8]
 8011c98:	f043 0201 	orr.w	r2, r3, #1
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011ca0:	2300      	movs	r3, #0
}
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	370c      	adds	r7, #12
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cac:	4770      	bx	lr

08011cae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011cae:	b480      	push	{r7}
 8011cb0:	b083      	sub	sp, #12
 8011cb2:	af00      	add	r7, sp, #0
 8011cb4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	689b      	ldr	r3, [r3, #8]
 8011cba:	f023 0201 	bic.w	r2, r3, #1
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011cc2:	2300      	movs	r3, #0
}
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	370c      	adds	r7, #12
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cce:	4770      	bx	lr

08011cd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011cd0:	b480      	push	{r7}
 8011cd2:	b085      	sub	sp, #20
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
 8011cd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011cda:	2300      	movs	r3, #0
 8011cdc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	3301      	adds	r3, #1
 8011ce2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011cea:	d901      	bls.n	8011cf0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8011cec:	2303      	movs	r3, #3
 8011cee:	e01b      	b.n	8011d28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	691b      	ldr	r3, [r3, #16]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	daf2      	bge.n	8011cde <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011cfc:	683b      	ldr	r3, [r7, #0]
 8011cfe:	019b      	lsls	r3, r3, #6
 8011d00:	f043 0220 	orr.w	r2, r3, #32
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	3301      	adds	r3, #1
 8011d0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011d14:	d901      	bls.n	8011d1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8011d16:	2303      	movs	r3, #3
 8011d18:	e006      	b.n	8011d28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	691b      	ldr	r3, [r3, #16]
 8011d1e:	f003 0320 	and.w	r3, r3, #32
 8011d22:	2b20      	cmp	r3, #32
 8011d24:	d0f0      	beq.n	8011d08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011d26:	2300      	movs	r3, #0
}
 8011d28:	4618      	mov	r0, r3
 8011d2a:	3714      	adds	r7, #20
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d32:	4770      	bx	lr

08011d34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011d34:	b480      	push	{r7}
 8011d36:	b085      	sub	sp, #20
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	3301      	adds	r3, #1
 8011d44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011d4c:	d901      	bls.n	8011d52 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8011d4e:	2303      	movs	r3, #3
 8011d50:	e018      	b.n	8011d84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	691b      	ldr	r3, [r3, #16]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	daf2      	bge.n	8011d40 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	2210      	movs	r2, #16
 8011d62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	3301      	adds	r3, #1
 8011d68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011d70:	d901      	bls.n	8011d76 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8011d72:	2303      	movs	r3, #3
 8011d74:	e006      	b.n	8011d84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	691b      	ldr	r3, [r3, #16]
 8011d7a:	f003 0310 	and.w	r3, r3, #16
 8011d7e:	2b10      	cmp	r3, #16
 8011d80:	d0f0      	beq.n	8011d64 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8011d82:	2300      	movs	r3, #0
}
 8011d84:	4618      	mov	r0, r3
 8011d86:	3714      	adds	r7, #20
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8e:	4770      	bx	lr

08011d90 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011d90:	b480      	push	{r7}
 8011d92:	b08b      	sub	sp, #44	@ 0x2c
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	60f8      	str	r0, [r7, #12]
 8011d98:	60b9      	str	r1, [r7, #8]
 8011d9a:	4613      	mov	r3, r2
 8011d9c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8011da2:	68bb      	ldr	r3, [r7, #8]
 8011da4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8011da6:	88fb      	ldrh	r3, [r7, #6]
 8011da8:	089b      	lsrs	r3, r3, #2
 8011daa:	b29b      	uxth	r3, r3
 8011dac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8011dae:	88fb      	ldrh	r3, [r7, #6]
 8011db0:	f003 0303 	and.w	r3, r3, #3
 8011db4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8011db6:	2300      	movs	r3, #0
 8011db8:	623b      	str	r3, [r7, #32]
 8011dba:	e014      	b.n	8011de6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011dbc:	69bb      	ldr	r3, [r7, #24]
 8011dbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011dc2:	681a      	ldr	r2, [r3, #0]
 8011dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dc6:	601a      	str	r2, [r3, #0]
    pDest++;
 8011dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dca:	3301      	adds	r3, #1
 8011dcc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dd0:	3301      	adds	r3, #1
 8011dd2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dd6:	3301      	adds	r3, #1
 8011dd8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ddc:	3301      	adds	r3, #1
 8011dde:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8011de0:	6a3b      	ldr	r3, [r7, #32]
 8011de2:	3301      	adds	r3, #1
 8011de4:	623b      	str	r3, [r7, #32]
 8011de6:	6a3a      	ldr	r2, [r7, #32]
 8011de8:	697b      	ldr	r3, [r7, #20]
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d3e6      	bcc.n	8011dbc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8011dee:	8bfb      	ldrh	r3, [r7, #30]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d01e      	beq.n	8011e32 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8011df4:	2300      	movs	r3, #0
 8011df6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8011df8:	69bb      	ldr	r3, [r7, #24]
 8011dfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011dfe:	461a      	mov	r2, r3
 8011e00:	f107 0310 	add.w	r3, r7, #16
 8011e04:	6812      	ldr	r2, [r2, #0]
 8011e06:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011e08:	693a      	ldr	r2, [r7, #16]
 8011e0a:	6a3b      	ldr	r3, [r7, #32]
 8011e0c:	b2db      	uxtb	r3, r3
 8011e0e:	00db      	lsls	r3, r3, #3
 8011e10:	fa22 f303 	lsr.w	r3, r2, r3
 8011e14:	b2da      	uxtb	r2, r3
 8011e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e18:	701a      	strb	r2, [r3, #0]
      i++;
 8011e1a:	6a3b      	ldr	r3, [r7, #32]
 8011e1c:	3301      	adds	r3, #1
 8011e1e:	623b      	str	r3, [r7, #32]
      pDest++;
 8011e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e22:	3301      	adds	r3, #1
 8011e24:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8011e26:	8bfb      	ldrh	r3, [r7, #30]
 8011e28:	3b01      	subs	r3, #1
 8011e2a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8011e2c:	8bfb      	ldrh	r3, [r7, #30]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d1ea      	bne.n	8011e08 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8011e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011e34:	4618      	mov	r0, r3
 8011e36:	372c      	adds	r7, #44	@ 0x2c
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3e:	4770      	bx	lr

08011e40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8011e40:	b480      	push	{r7}
 8011e42:	b085      	sub	sp, #20
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	695b      	ldr	r3, [r3, #20]
 8011e4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	699b      	ldr	r3, [r3, #24]
 8011e52:	68fa      	ldr	r2, [r7, #12]
 8011e54:	4013      	ands	r3, r2
 8011e56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011e58:	68fb      	ldr	r3, [r7, #12]
}
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	3714      	adds	r7, #20
 8011e5e:	46bd      	mov	sp, r7
 8011e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e64:	4770      	bx	lr

08011e66 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8011e66:	b480      	push	{r7}
 8011e68:	b085      	sub	sp, #20
 8011e6a:	af00      	add	r7, sp, #0
 8011e6c:	6078      	str	r0, [r7, #4]
 8011e6e:	460b      	mov	r3, r1
 8011e70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8011e76:	78fb      	ldrb	r3, [r7, #3]
 8011e78:	015a      	lsls	r2, r3, #5
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	4413      	add	r3, r2
 8011e7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011e82:	689b      	ldr	r3, [r3, #8]
 8011e84:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8011e86:	78fb      	ldrb	r3, [r7, #3]
 8011e88:	015a      	lsls	r2, r3, #5
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	4413      	add	r3, r2
 8011e8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011e92:	68db      	ldr	r3, [r3, #12]
 8011e94:	68ba      	ldr	r2, [r7, #8]
 8011e96:	4013      	ands	r3, r2
 8011e98:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011e9a:	68bb      	ldr	r3, [r7, #8]
}
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	3714      	adds	r7, #20
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea6:	4770      	bx	lr

08011ea8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8011ea8:	b480      	push	{r7}
 8011eaa:	b083      	sub	sp, #12
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	695b      	ldr	r3, [r3, #20]
 8011eb4:	f003 0301 	and.w	r3, r3, #1
}
 8011eb8:	4618      	mov	r0, r3
 8011eba:	370c      	adds	r7, #12
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec2:	4770      	bx	lr

08011ec4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8011ec4:	b480      	push	{r7}
 8011ec6:	b085      	sub	sp, #20
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	6078      	str	r0, [r7, #4]
 8011ecc:	460b      	mov	r3, r1
 8011ece:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	68fa      	ldr	r2, [r7, #12]
 8011ede:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8011ee2:	f023 0303 	bic.w	r3, r3, #3
 8011ee6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011eee:	681a      	ldr	r2, [r3, #0]
 8011ef0:	78fb      	ldrb	r3, [r7, #3]
 8011ef2:	f003 0303 	and.w	r3, r3, #3
 8011ef6:	68f9      	ldr	r1, [r7, #12]
 8011ef8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8011efc:	4313      	orrs	r3, r2
 8011efe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8011f00:	78fb      	ldrb	r3, [r7, #3]
 8011f02:	2b01      	cmp	r3, #1
 8011f04:	d107      	bne.n	8011f16 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011f0c:	461a      	mov	r2, r3
 8011f0e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8011f12:	6053      	str	r3, [r2, #4]
 8011f14:	e00c      	b.n	8011f30 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8011f16:	78fb      	ldrb	r3, [r7, #3]
 8011f18:	2b02      	cmp	r3, #2
 8011f1a:	d107      	bne.n	8011f2c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011f22:	461a      	mov	r2, r3
 8011f24:	f241 7370 	movw	r3, #6000	@ 0x1770
 8011f28:	6053      	str	r3, [r2, #4]
 8011f2a:	e001      	b.n	8011f30 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8011f2c:	2301      	movs	r3, #1
 8011f2e:	e000      	b.n	8011f32 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8011f30:	2300      	movs	r3, #0
}
 8011f32:	4618      	mov	r0, r3
 8011f34:	3714      	adds	r7, #20
 8011f36:	46bd      	mov	sp, r7
 8011f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3c:	4770      	bx	lr

08011f3e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8011f3e:	b480      	push	{r7}
 8011f40:	b085      	sub	sp, #20
 8011f42:	af00      	add	r7, sp, #0
 8011f44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011f50:	695b      	ldr	r3, [r3, #20]
 8011f52:	b29b      	uxth	r3, r3
}
 8011f54:	4618      	mov	r0, r3
 8011f56:	3714      	adds	r7, #20
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5e:	4770      	bx	lr

08011f60 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8011f60:	b480      	push	{r7}
 8011f62:	b089      	sub	sp, #36	@ 0x24
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
 8011f68:	460b      	mov	r3, r1
 8011f6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8011f70:	78fb      	ldrb	r3, [r7, #3]
 8011f72:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8011f74:	2300      	movs	r3, #0
 8011f76:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8011f78:	69bb      	ldr	r3, [r7, #24]
 8011f7a:	015a      	lsls	r2, r3, #5
 8011f7c:	69fb      	ldr	r3, [r7, #28]
 8011f7e:	4413      	add	r3, r2
 8011f80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	0c9b      	lsrs	r3, r3, #18
 8011f88:	f003 0303 	and.w	r3, r3, #3
 8011f8c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8011f8e:	69bb      	ldr	r3, [r7, #24]
 8011f90:	015a      	lsls	r2, r3, #5
 8011f92:	69fb      	ldr	r3, [r7, #28]
 8011f94:	4413      	add	r3, r2
 8011f96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	0fdb      	lsrs	r3, r3, #31
 8011f9e:	f003 0301 	and.w	r3, r3, #1
 8011fa2:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8011fa4:	69bb      	ldr	r3, [r7, #24]
 8011fa6:	015a      	lsls	r2, r3, #5
 8011fa8:	69fb      	ldr	r3, [r7, #28]
 8011faa:	4413      	add	r3, r2
 8011fac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011fb0:	685b      	ldr	r3, [r3, #4]
 8011fb2:	0fdb      	lsrs	r3, r3, #31
 8011fb4:	f003 0301 	and.w	r3, r3, #1
 8011fb8:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	689b      	ldr	r3, [r3, #8]
 8011fbe:	f003 0320 	and.w	r3, r3, #32
 8011fc2:	2b20      	cmp	r3, #32
 8011fc4:	d10d      	bne.n	8011fe2 <USB_HC_Halt+0x82>
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d10a      	bne.n	8011fe2 <USB_HC_Halt+0x82>
 8011fcc:	693b      	ldr	r3, [r7, #16]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d005      	beq.n	8011fde <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8011fd2:	697b      	ldr	r3, [r7, #20]
 8011fd4:	2b01      	cmp	r3, #1
 8011fd6:	d002      	beq.n	8011fde <USB_HC_Halt+0x7e>
 8011fd8:	697b      	ldr	r3, [r7, #20]
 8011fda:	2b03      	cmp	r3, #3
 8011fdc:	d101      	bne.n	8011fe2 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8011fde:	2300      	movs	r3, #0
 8011fe0:	e0d8      	b.n	8012194 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8011fe2:	697b      	ldr	r3, [r7, #20]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d002      	beq.n	8011fee <USB_HC_Halt+0x8e>
 8011fe8:	697b      	ldr	r3, [r7, #20]
 8011fea:	2b02      	cmp	r3, #2
 8011fec:	d173      	bne.n	80120d6 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8011fee:	69bb      	ldr	r3, [r7, #24]
 8011ff0:	015a      	lsls	r2, r3, #5
 8011ff2:	69fb      	ldr	r3, [r7, #28]
 8011ff4:	4413      	add	r3, r2
 8011ff6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	69ba      	ldr	r2, [r7, #24]
 8011ffe:	0151      	lsls	r1, r2, #5
 8012000:	69fa      	ldr	r2, [r7, #28]
 8012002:	440a      	add	r2, r1
 8012004:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012008:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801200c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	689b      	ldr	r3, [r3, #8]
 8012012:	f003 0320 	and.w	r3, r3, #32
 8012016:	2b00      	cmp	r3, #0
 8012018:	d14a      	bne.n	80120b0 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801201e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012022:	2b00      	cmp	r3, #0
 8012024:	d133      	bne.n	801208e <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8012026:	69bb      	ldr	r3, [r7, #24]
 8012028:	015a      	lsls	r2, r3, #5
 801202a:	69fb      	ldr	r3, [r7, #28]
 801202c:	4413      	add	r3, r2
 801202e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	69ba      	ldr	r2, [r7, #24]
 8012036:	0151      	lsls	r1, r2, #5
 8012038:	69fa      	ldr	r2, [r7, #28]
 801203a:	440a      	add	r2, r1
 801203c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012040:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012044:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012046:	69bb      	ldr	r3, [r7, #24]
 8012048:	015a      	lsls	r2, r3, #5
 801204a:	69fb      	ldr	r3, [r7, #28]
 801204c:	4413      	add	r3, r2
 801204e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	69ba      	ldr	r2, [r7, #24]
 8012056:	0151      	lsls	r1, r2, #5
 8012058:	69fa      	ldr	r2, [r7, #28]
 801205a:	440a      	add	r2, r1
 801205c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012060:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012064:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8012066:	68bb      	ldr	r3, [r7, #8]
 8012068:	3301      	adds	r3, #1
 801206a:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 801206c:	68bb      	ldr	r3, [r7, #8]
 801206e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012072:	d82e      	bhi.n	80120d2 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8012074:	69bb      	ldr	r3, [r7, #24]
 8012076:	015a      	lsls	r2, r3, #5
 8012078:	69fb      	ldr	r3, [r7, #28]
 801207a:	4413      	add	r3, r2
 801207c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012086:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801208a:	d0ec      	beq.n	8012066 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801208c:	e081      	b.n	8012192 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801208e:	69bb      	ldr	r3, [r7, #24]
 8012090:	015a      	lsls	r2, r3, #5
 8012092:	69fb      	ldr	r3, [r7, #28]
 8012094:	4413      	add	r3, r2
 8012096:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	69ba      	ldr	r2, [r7, #24]
 801209e:	0151      	lsls	r1, r2, #5
 80120a0:	69fa      	ldr	r2, [r7, #28]
 80120a2:	440a      	add	r2, r1
 80120a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80120a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80120ac:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80120ae:	e070      	b.n	8012192 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80120b0:	69bb      	ldr	r3, [r7, #24]
 80120b2:	015a      	lsls	r2, r3, #5
 80120b4:	69fb      	ldr	r3, [r7, #28]
 80120b6:	4413      	add	r3, r2
 80120b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	69ba      	ldr	r2, [r7, #24]
 80120c0:	0151      	lsls	r1, r2, #5
 80120c2:	69fa      	ldr	r2, [r7, #28]
 80120c4:	440a      	add	r2, r1
 80120c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80120ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80120ce:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80120d0:	e05f      	b.n	8012192 <USB_HC_Halt+0x232>
            break;
 80120d2:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80120d4:	e05d      	b.n	8012192 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80120d6:	69bb      	ldr	r3, [r7, #24]
 80120d8:	015a      	lsls	r2, r3, #5
 80120da:	69fb      	ldr	r3, [r7, #28]
 80120dc:	4413      	add	r3, r2
 80120de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	69ba      	ldr	r2, [r7, #24]
 80120e6:	0151      	lsls	r1, r2, #5
 80120e8:	69fa      	ldr	r2, [r7, #28]
 80120ea:	440a      	add	r2, r1
 80120ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80120f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80120f4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80120f6:	69fb      	ldr	r3, [r7, #28]
 80120f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80120fc:	691b      	ldr	r3, [r3, #16]
 80120fe:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012102:	2b00      	cmp	r3, #0
 8012104:	d133      	bne.n	801216e <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8012106:	69bb      	ldr	r3, [r7, #24]
 8012108:	015a      	lsls	r2, r3, #5
 801210a:	69fb      	ldr	r3, [r7, #28]
 801210c:	4413      	add	r3, r2
 801210e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	69ba      	ldr	r2, [r7, #24]
 8012116:	0151      	lsls	r1, r2, #5
 8012118:	69fa      	ldr	r2, [r7, #28]
 801211a:	440a      	add	r2, r1
 801211c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012120:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012124:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012126:	69bb      	ldr	r3, [r7, #24]
 8012128:	015a      	lsls	r2, r3, #5
 801212a:	69fb      	ldr	r3, [r7, #28]
 801212c:	4413      	add	r3, r2
 801212e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	69ba      	ldr	r2, [r7, #24]
 8012136:	0151      	lsls	r1, r2, #5
 8012138:	69fa      	ldr	r2, [r7, #28]
 801213a:	440a      	add	r2, r1
 801213c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012140:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012144:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8012146:	68bb      	ldr	r3, [r7, #8]
 8012148:	3301      	adds	r3, #1
 801214a:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 801214c:	68bb      	ldr	r3, [r7, #8]
 801214e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012152:	d81d      	bhi.n	8012190 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8012154:	69bb      	ldr	r3, [r7, #24]
 8012156:	015a      	lsls	r2, r3, #5
 8012158:	69fb      	ldr	r3, [r7, #28]
 801215a:	4413      	add	r3, r2
 801215c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012166:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801216a:	d0ec      	beq.n	8012146 <USB_HC_Halt+0x1e6>
 801216c:	e011      	b.n	8012192 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801216e:	69bb      	ldr	r3, [r7, #24]
 8012170:	015a      	lsls	r2, r3, #5
 8012172:	69fb      	ldr	r3, [r7, #28]
 8012174:	4413      	add	r3, r2
 8012176:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	69ba      	ldr	r2, [r7, #24]
 801217e:	0151      	lsls	r1, r2, #5
 8012180:	69fa      	ldr	r2, [r7, #28]
 8012182:	440a      	add	r2, r1
 8012184:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012188:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801218c:	6013      	str	r3, [r2, #0]
 801218e:	e000      	b.n	8012192 <USB_HC_Halt+0x232>
          break;
 8012190:	bf00      	nop
    }
  }

  return HAL_OK;
 8012192:	2300      	movs	r3, #0
}
 8012194:	4618      	mov	r0, r3
 8012196:	3724      	adds	r7, #36	@ 0x24
 8012198:	46bd      	mov	sp, r7
 801219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219e:	4770      	bx	lr

080121a0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b088      	sub	sp, #32
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80121a8:	2300      	movs	r3, #0
 80121aa:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80121b0:	2300      	movs	r3, #0
 80121b2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80121b4:	6878      	ldr	r0, [r7, #4]
 80121b6:	f7ff fd7a 	bl	8011cae <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80121ba:	2110      	movs	r1, #16
 80121bc:	6878      	ldr	r0, [r7, #4]
 80121be:	f7ff fd87 	bl	8011cd0 <USB_FlushTxFifo>
 80121c2:	4603      	mov	r3, r0
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d001      	beq.n	80121cc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80121c8:	2301      	movs	r3, #1
 80121ca:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80121cc:	6878      	ldr	r0, [r7, #4]
 80121ce:	f7ff fdb1 	bl	8011d34 <USB_FlushRxFifo>
 80121d2:	4603      	mov	r3, r0
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d001      	beq.n	80121dc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80121d8:	2301      	movs	r3, #1
 80121da:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80121dc:	2300      	movs	r3, #0
 80121de:	61bb      	str	r3, [r7, #24]
 80121e0:	e01f      	b.n	8012222 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80121e2:	69bb      	ldr	r3, [r7, #24]
 80121e4:	015a      	lsls	r2, r3, #5
 80121e6:	697b      	ldr	r3, [r7, #20]
 80121e8:	4413      	add	r3, r2
 80121ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80121f2:	693b      	ldr	r3, [r7, #16]
 80121f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80121f8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80121fa:	693b      	ldr	r3, [r7, #16]
 80121fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012200:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8012202:	693b      	ldr	r3, [r7, #16]
 8012204:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8012208:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 801220a:	69bb      	ldr	r3, [r7, #24]
 801220c:	015a      	lsls	r2, r3, #5
 801220e:	697b      	ldr	r3, [r7, #20]
 8012210:	4413      	add	r3, r2
 8012212:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012216:	461a      	mov	r2, r3
 8012218:	693b      	ldr	r3, [r7, #16]
 801221a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 801221c:	69bb      	ldr	r3, [r7, #24]
 801221e:	3301      	adds	r3, #1
 8012220:	61bb      	str	r3, [r7, #24]
 8012222:	69bb      	ldr	r3, [r7, #24]
 8012224:	2b0f      	cmp	r3, #15
 8012226:	d9dc      	bls.n	80121e2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8012228:	2300      	movs	r3, #0
 801222a:	61bb      	str	r3, [r7, #24]
 801222c:	e034      	b.n	8012298 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 801222e:	69bb      	ldr	r3, [r7, #24]
 8012230:	015a      	lsls	r2, r3, #5
 8012232:	697b      	ldr	r3, [r7, #20]
 8012234:	4413      	add	r3, r2
 8012236:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 801223e:	693b      	ldr	r3, [r7, #16]
 8012240:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012244:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8012246:	693b      	ldr	r3, [r7, #16]
 8012248:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801224c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801224e:	693b      	ldr	r3, [r7, #16]
 8012250:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8012254:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8012256:	69bb      	ldr	r3, [r7, #24]
 8012258:	015a      	lsls	r2, r3, #5
 801225a:	697b      	ldr	r3, [r7, #20]
 801225c:	4413      	add	r3, r2
 801225e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012262:	461a      	mov	r2, r3
 8012264:	693b      	ldr	r3, [r7, #16]
 8012266:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	3301      	adds	r3, #1
 801226c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012274:	d80c      	bhi.n	8012290 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8012276:	69bb      	ldr	r3, [r7, #24]
 8012278:	015a      	lsls	r2, r3, #5
 801227a:	697b      	ldr	r3, [r7, #20]
 801227c:	4413      	add	r3, r2
 801227e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012288:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801228c:	d0ec      	beq.n	8012268 <USB_StopHost+0xc8>
 801228e:	e000      	b.n	8012292 <USB_StopHost+0xf2>
        break;
 8012290:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8012292:	69bb      	ldr	r3, [r7, #24]
 8012294:	3301      	adds	r3, #1
 8012296:	61bb      	str	r3, [r7, #24]
 8012298:	69bb      	ldr	r3, [r7, #24]
 801229a:	2b0f      	cmp	r3, #15
 801229c:	d9c7      	bls.n	801222e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 801229e:	697b      	ldr	r3, [r7, #20]
 80122a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80122a4:	461a      	mov	r2, r3
 80122a6:	f04f 33ff 	mov.w	r3, #4294967295
 80122aa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	f04f 32ff 	mov.w	r2, #4294967295
 80122b2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80122b4:	6878      	ldr	r0, [r7, #4]
 80122b6:	f7ff fce9 	bl	8011c8c <USB_EnableGlobalInt>

  return ret;
 80122ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80122bc:	4618      	mov	r0, r3
 80122be:	3720      	adds	r7, #32
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bd80      	pop	{r7, pc}

080122c4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80122c4:	b580      	push	{r7, lr}
 80122c6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80122c8:	4904      	ldr	r1, [pc, #16]	@ (80122dc <MX_FATFS_Init+0x18>)
 80122ca:	4805      	ldr	r0, [pc, #20]	@ (80122e0 <MX_FATFS_Init+0x1c>)
 80122cc:	f003 f91e 	bl	801550c <FATFS_LinkDriver>
 80122d0:	4603      	mov	r3, r0
 80122d2:	461a      	mov	r2, r3
 80122d4:	4b03      	ldr	r3, [pc, #12]	@ (80122e4 <MX_FATFS_Init+0x20>)
 80122d6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80122d8:	bf00      	nop
 80122da:	bd80      	pop	{r7, pc}
 80122dc:	2000192c 	.word	0x2000192c
 80122e0:	0801d468 	.word	0x0801d468
 80122e4:	20001928 	.word	0x20001928

080122e8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80122e8:	b480      	push	{r7}
 80122ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80122ec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80122ee:	4618      	mov	r0, r3
 80122f0:	46bd      	mov	sp, r7
 80122f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f6:	4770      	bx	lr

080122f8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b082      	sub	sp, #8
 80122fc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80122fe:	2300      	movs	r3, #0
 8012300:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8012302:	f000 f879 	bl	80123f8 <BSP_SD_IsDetected>
 8012306:	4603      	mov	r3, r0
 8012308:	2b01      	cmp	r3, #1
 801230a:	d001      	beq.n	8012310 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 801230c:	2302      	movs	r3, #2
 801230e:	e012      	b.n	8012336 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8012310:	480b      	ldr	r0, [pc, #44]	@ (8012340 <BSP_SD_Init+0x48>)
 8012312:	f7fa feed 	bl	800d0f0 <HAL_SD_Init>
 8012316:	4603      	mov	r3, r0
 8012318:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801231a:	79fb      	ldrb	r3, [r7, #7]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d109      	bne.n	8012334 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8012320:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8012324:	4806      	ldr	r0, [pc, #24]	@ (8012340 <BSP_SD_Init+0x48>)
 8012326:	f7fb fcc7 	bl	800dcb8 <HAL_SD_ConfigWideBusOperation>
 801232a:	4603      	mov	r3, r0
 801232c:	2b00      	cmp	r3, #0
 801232e:	d001      	beq.n	8012334 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8012330:	2301      	movs	r3, #1
 8012332:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8012334:	79fb      	ldrb	r3, [r7, #7]
}
 8012336:	4618      	mov	r0, r3
 8012338:	3708      	adds	r7, #8
 801233a:	46bd      	mov	sp, r7
 801233c:	bd80      	pop	{r7, pc}
 801233e:	bf00      	nop
 8012340:	20000ebc 	.word	0x20000ebc

08012344 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b088      	sub	sp, #32
 8012348:	af02      	add	r7, sp, #8
 801234a:	60f8      	str	r0, [r7, #12]
 801234c:	60b9      	str	r1, [r7, #8]
 801234e:	607a      	str	r2, [r7, #4]
 8012350:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8012352:	2300      	movs	r3, #0
 8012354:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8012356:	683b      	ldr	r3, [r7, #0]
 8012358:	9300      	str	r3, [sp, #0]
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	68ba      	ldr	r2, [r7, #8]
 801235e:	68f9      	ldr	r1, [r7, #12]
 8012360:	4806      	ldr	r0, [pc, #24]	@ (801237c <BSP_SD_ReadBlocks+0x38>)
 8012362:	f7fa ff75 	bl	800d250 <HAL_SD_ReadBlocks>
 8012366:	4603      	mov	r3, r0
 8012368:	2b00      	cmp	r3, #0
 801236a:	d001      	beq.n	8012370 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 801236c:	2301      	movs	r3, #1
 801236e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012370:	7dfb      	ldrb	r3, [r7, #23]
}
 8012372:	4618      	mov	r0, r3
 8012374:	3718      	adds	r7, #24
 8012376:	46bd      	mov	sp, r7
 8012378:	bd80      	pop	{r7, pc}
 801237a:	bf00      	nop
 801237c:	20000ebc 	.word	0x20000ebc

08012380 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b088      	sub	sp, #32
 8012384:	af02      	add	r7, sp, #8
 8012386:	60f8      	str	r0, [r7, #12]
 8012388:	60b9      	str	r1, [r7, #8]
 801238a:	607a      	str	r2, [r7, #4]
 801238c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 801238e:	2300      	movs	r3, #0
 8012390:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8012392:	683b      	ldr	r3, [r7, #0]
 8012394:	9300      	str	r3, [sp, #0]
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	68ba      	ldr	r2, [r7, #8]
 801239a:	68f9      	ldr	r1, [r7, #12]
 801239c:	4806      	ldr	r0, [pc, #24]	@ (80123b8 <BSP_SD_WriteBlocks+0x38>)
 801239e:	f7fb f935 	bl	800d60c <HAL_SD_WriteBlocks>
 80123a2:	4603      	mov	r3, r0
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d001      	beq.n	80123ac <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80123a8:	2301      	movs	r3, #1
 80123aa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80123ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80123ae:	4618      	mov	r0, r3
 80123b0:	3718      	adds	r7, #24
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bd80      	pop	{r7, pc}
 80123b6:	bf00      	nop
 80123b8:	20000ebc 	.word	0x20000ebc

080123bc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80123bc:	b580      	push	{r7, lr}
 80123be:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80123c0:	4805      	ldr	r0, [pc, #20]	@ (80123d8 <BSP_SD_GetCardState+0x1c>)
 80123c2:	f7fb fd13 	bl	800ddec <HAL_SD_GetCardState>
 80123c6:	4603      	mov	r3, r0
 80123c8:	2b04      	cmp	r3, #4
 80123ca:	bf14      	ite	ne
 80123cc:	2301      	movne	r3, #1
 80123ce:	2300      	moveq	r3, #0
 80123d0:	b2db      	uxtb	r3, r3
}
 80123d2:	4618      	mov	r0, r3
 80123d4:	bd80      	pop	{r7, pc}
 80123d6:	bf00      	nop
 80123d8:	20000ebc 	.word	0x20000ebc

080123dc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b082      	sub	sp, #8
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80123e4:	6879      	ldr	r1, [r7, #4]
 80123e6:	4803      	ldr	r0, [pc, #12]	@ (80123f4 <BSP_SD_GetCardInfo+0x18>)
 80123e8:	f7fb fc3a 	bl	800dc60 <HAL_SD_GetCardInfo>
}
 80123ec:	bf00      	nop
 80123ee:	3708      	adds	r7, #8
 80123f0:	46bd      	mov	sp, r7
 80123f2:	bd80      	pop	{r7, pc}
 80123f4:	20000ebc 	.word	0x20000ebc

080123f8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b082      	sub	sp, #8
 80123fc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80123fe:	2301      	movs	r3, #1
 8012400:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8012402:	f000 f80b 	bl	801241c <BSP_PlatformIsDetected>
 8012406:	4603      	mov	r3, r0
 8012408:	2b00      	cmp	r3, #0
 801240a:	d101      	bne.n	8012410 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 801240c:	2300      	movs	r3, #0
 801240e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8012410:	79fb      	ldrb	r3, [r7, #7]
 8012412:	b2db      	uxtb	r3, r3
}
 8012414:	4618      	mov	r0, r3
 8012416:	3708      	adds	r7, #8
 8012418:	46bd      	mov	sp, r7
 801241a:	bd80      	pop	{r7, pc}

0801241c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 801241c:	b580      	push	{r7, lr}
 801241e:	b082      	sub	sp, #8
 8012420:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8012422:	2301      	movs	r3, #1
 8012424:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8012426:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 801242a:	4806      	ldr	r0, [pc, #24]	@ (8012444 <BSP_PlatformIsDetected+0x28>)
 801242c:	f7f6 fbac 	bl	8008b88 <HAL_GPIO_ReadPin>
 8012430:	4603      	mov	r3, r0
 8012432:	2b00      	cmp	r3, #0
 8012434:	d001      	beq.n	801243a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8012436:	2300      	movs	r3, #0
 8012438:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801243a:	79fb      	ldrb	r3, [r7, #7]
}
 801243c:	4618      	mov	r0, r3
 801243e:	3708      	adds	r7, #8
 8012440:	46bd      	mov	sp, r7
 8012442:	bd80      	pop	{r7, pc}
 8012444:	40020800 	.word	0x40020800

08012448 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8012448:	b480      	push	{r7}
 801244a:	b087      	sub	sp, #28
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]
 8012450:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8012452:	683b      	ldr	r3, [r7, #0]
 8012454:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 801245a:	2320      	movs	r3, #32
 801245c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801245e:	f3bf 8f4f 	dsb	sy
}
 8012462:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8012464:	e00b      	b.n	801247e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8012466:	4a0d      	ldr	r2, [pc, #52]	@ (801249c <SCB_InvalidateDCache_by_Addr+0x54>)
 8012468:	693b      	ldr	r3, [r7, #16]
 801246a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	693a      	ldr	r2, [r7, #16]
 8012472:	4413      	add	r3, r2
 8012474:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8012476:	697a      	ldr	r2, [r7, #20]
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	1ad3      	subs	r3, r2, r3
 801247c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 801247e:	697b      	ldr	r3, [r7, #20]
 8012480:	2b00      	cmp	r3, #0
 8012482:	dcf0      	bgt.n	8012466 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8012484:	f3bf 8f4f 	dsb	sy
}
 8012488:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801248a:	f3bf 8f6f 	isb	sy
}
 801248e:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8012490:	bf00      	nop
 8012492:	371c      	adds	r7, #28
 8012494:	46bd      	mov	sp, r7
 8012496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249a:	4770      	bx	lr
 801249c:	e000ed00 	.word	0xe000ed00

080124a0 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80124a0:	b480      	push	{r7}
 80124a2:	b087      	sub	sp, #28
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
 80124a8:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 80124aa:	683b      	ldr	r3, [r7, #0]
 80124ac:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80124b2:	2320      	movs	r3, #32
 80124b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80124b6:	f3bf 8f4f 	dsb	sy
}
 80124ba:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 80124bc:	e00b      	b.n	80124d6 <SCB_CleanDCache_by_Addr+0x36>
      SCB->DCCMVAC = op_addr;
 80124be:	4a0d      	ldr	r2, [pc, #52]	@ (80124f4 <SCB_CleanDCache_by_Addr+0x54>)
 80124c0:	693b      	ldr	r3, [r7, #16]
 80124c2:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
      op_addr += (uint32_t)linesize;
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	693a      	ldr	r2, [r7, #16]
 80124ca:	4413      	add	r3, r2
 80124cc:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80124ce:	697a      	ldr	r2, [r7, #20]
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	1ad3      	subs	r3, r2, r3
 80124d4:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80124d6:	697b      	ldr	r3, [r7, #20]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	dcf0      	bgt.n	80124be <SCB_CleanDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80124dc:	f3bf 8f4f 	dsb	sy
}
 80124e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80124e2:	f3bf 8f6f 	isb	sy
}
 80124e6:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 80124e8:	bf00      	nop
 80124ea:	371c      	adds	r7, #28
 80124ec:	46bd      	mov	sp, r7
 80124ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f2:	4770      	bx	lr
 80124f4:	e000ed00 	.word	0xe000ed00

080124f8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b084      	sub	sp, #16
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8012500:	f003 f850 	bl	80155a4 <osKernelSysTick>
 8012504:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8012506:	e006      	b.n	8012516 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012508:	f7ff ff58 	bl	80123bc <BSP_SD_GetCardState>
 801250c:	4603      	mov	r3, r0
 801250e:	2b00      	cmp	r3, #0
 8012510:	d101      	bne.n	8012516 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8012512:	2300      	movs	r3, #0
 8012514:	e009      	b.n	801252a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8012516:	f003 f845 	bl	80155a4 <osKernelSysTick>
 801251a:	4602      	mov	r2, r0
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	1ad3      	subs	r3, r2, r3
 8012520:	687a      	ldr	r2, [r7, #4]
 8012522:	429a      	cmp	r2, r3
 8012524:	d8f0      	bhi.n	8012508 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8012526:	f04f 33ff 	mov.w	r3, #4294967295
}
 801252a:	4618      	mov	r0, r3
 801252c:	3710      	adds	r7, #16
 801252e:	46bd      	mov	sp, r7
 8012530:	bd80      	pop	{r7, pc}
	...

08012534 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8012534:	b580      	push	{r7, lr}
 8012536:	b082      	sub	sp, #8
 8012538:	af00      	add	r7, sp, #0
 801253a:	4603      	mov	r3, r0
 801253c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801253e:	4b0b      	ldr	r3, [pc, #44]	@ (801256c <SD_CheckStatus+0x38>)
 8012540:	2201      	movs	r2, #1
 8012542:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012544:	f7ff ff3a 	bl	80123bc <BSP_SD_GetCardState>
 8012548:	4603      	mov	r3, r0
 801254a:	2b00      	cmp	r3, #0
 801254c:	d107      	bne.n	801255e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801254e:	4b07      	ldr	r3, [pc, #28]	@ (801256c <SD_CheckStatus+0x38>)
 8012550:	781b      	ldrb	r3, [r3, #0]
 8012552:	b2db      	uxtb	r3, r3
 8012554:	f023 0301 	bic.w	r3, r3, #1
 8012558:	b2da      	uxtb	r2, r3
 801255a:	4b04      	ldr	r3, [pc, #16]	@ (801256c <SD_CheckStatus+0x38>)
 801255c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801255e:	4b03      	ldr	r3, [pc, #12]	@ (801256c <SD_CheckStatus+0x38>)
 8012560:	781b      	ldrb	r3, [r3, #0]
 8012562:	b2db      	uxtb	r3, r3
}
 8012564:	4618      	mov	r0, r3
 8012566:	3708      	adds	r7, #8
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}
 801256c:	20000075 	.word	0x20000075

08012570 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8012570:	b590      	push	{r4, r7, lr}
 8012572:	b087      	sub	sp, #28
 8012574:	af00      	add	r7, sp, #0
 8012576:	4603      	mov	r3, r0
 8012578:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 801257a:	4b1d      	ldr	r3, [pc, #116]	@ (80125f0 <SD_initialize+0x80>)
 801257c:	2201      	movs	r2, #1
 801257e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8012580:	f003 f804 	bl	801558c <osKernelRunning>
 8012584:	4603      	mov	r3, r0
 8012586:	2b00      	cmp	r3, #0
 8012588:	d02b      	beq.n	80125e2 <SD_initialize+0x72>
    {
      Stat = SD_CheckStatus(lun);
    }

#else
    Stat = SD_CheckStatus(lun);
 801258a:	79fb      	ldrb	r3, [r7, #7]
 801258c:	4618      	mov	r0, r3
 801258e:	f7ff ffd1 	bl	8012534 <SD_CheckStatus>
 8012592:	4603      	mov	r3, r0
 8012594:	461a      	mov	r2, r3
 8012596:	4b16      	ldr	r3, [pc, #88]	@ (80125f0 <SD_initialize+0x80>)
 8012598:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 801259a:	4b15      	ldr	r3, [pc, #84]	@ (80125f0 <SD_initialize+0x80>)
 801259c:	781b      	ldrb	r3, [r3, #0]
 801259e:	b2db      	uxtb	r3, r3
 80125a0:	2b01      	cmp	r3, #1
 80125a2:	d01e      	beq.n	80125e2 <SD_initialize+0x72>
    {
      if (SDQueueID == NULL)
 80125a4:	4b13      	ldr	r3, [pc, #76]	@ (80125f4 <SD_initialize+0x84>)
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d10e      	bne.n	80125ca <SD_initialize+0x5a>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 80125ac:	4b12      	ldr	r3, [pc, #72]	@ (80125f8 <SD_initialize+0x88>)
 80125ae:	f107 0408 	add.w	r4, r7, #8
 80125b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80125b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 80125b8:	f107 0308 	add.w	r3, r7, #8
 80125bc:	2100      	movs	r1, #0
 80125be:	4618      	mov	r0, r3
 80125c0:	f003 f860 	bl	8015684 <osMessageCreate>
 80125c4:	4603      	mov	r3, r0
 80125c6:	4a0b      	ldr	r2, [pc, #44]	@ (80125f4 <SD_initialize+0x84>)
 80125c8:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 80125ca:	4b0a      	ldr	r3, [pc, #40]	@ (80125f4 <SD_initialize+0x84>)
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d107      	bne.n	80125e2 <SD_initialize+0x72>
      {
        Stat |= STA_NOINIT;
 80125d2:	4b07      	ldr	r3, [pc, #28]	@ (80125f0 <SD_initialize+0x80>)
 80125d4:	781b      	ldrb	r3, [r3, #0]
 80125d6:	b2db      	uxtb	r3, r3
 80125d8:	f043 0301 	orr.w	r3, r3, #1
 80125dc:	b2da      	uxtb	r2, r3
 80125de:	4b04      	ldr	r3, [pc, #16]	@ (80125f0 <SD_initialize+0x80>)
 80125e0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80125e2:	4b03      	ldr	r3, [pc, #12]	@ (80125f0 <SD_initialize+0x80>)
 80125e4:	781b      	ldrb	r3, [r3, #0]
 80125e6:	b2db      	uxtb	r3, r3
}
 80125e8:	4618      	mov	r0, r3
 80125ea:	371c      	adds	r7, #28
 80125ec:	46bd      	mov	sp, r7
 80125ee:	bd90      	pop	{r4, r7, pc}
 80125f0:	20000075 	.word	0x20000075
 80125f4:	20001d60 	.word	0x20001d60
 80125f8:	0801d3e0 	.word	0x0801d3e0

080125fc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b082      	sub	sp, #8
 8012600:	af00      	add	r7, sp, #0
 8012602:	4603      	mov	r3, r0
 8012604:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012606:	79fb      	ldrb	r3, [r7, #7]
 8012608:	4618      	mov	r0, r3
 801260a:	f7ff ff93 	bl	8012534 <SD_CheckStatus>
 801260e:	4603      	mov	r3, r0
}
 8012610:	4618      	mov	r0, r3
 8012612:	3708      	adds	r7, #8
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}

08012618 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b08a      	sub	sp, #40	@ 0x28
 801261c:	af00      	add	r7, sp, #0
 801261e:	60b9      	str	r1, [r7, #8]
 8012620:	607a      	str	r2, [r7, #4]
 8012622:	603b      	str	r3, [r7, #0]
 8012624:	4603      	mov	r3, r0
 8012626:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8012628:	2301      	movs	r3, #1
 801262a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801262e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8012632:	f7ff ff61 	bl	80124f8 <SD_CheckStatusWithTimeout>
 8012636:	4603      	mov	r3, r0
 8012638:	2b00      	cmp	r3, #0
 801263a:	da02      	bge.n	8012642 <SD_read+0x2a>
  {
    return res;
 801263c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012640:	e051      	b.n	80126e6 <SD_read+0xce>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8012642:	68bb      	ldr	r3, [r7, #8]
 8012644:	f003 0303 	and.w	r3, r3, #3
 8012648:	2b00      	cmp	r3, #0
 801264a:	d111      	bne.n	8012670 <SD_read+0x58>
  {
#endif
    /* Use polling mode instead of DMA to avoid callback issues */
    ret = BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_TIMEOUT);
 801264c:	f247 5330 	movw	r3, #30000	@ 0x7530
 8012650:	683a      	ldr	r2, [r7, #0]
 8012652:	6879      	ldr	r1, [r7, #4]
 8012654:	68b8      	ldr	r0, [r7, #8]
 8012656:	f7ff fe75 	bl	8012344 <BSP_SD_ReadBlocks>
 801265a:	4603      	mov	r3, r0
 801265c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (ret == MSD_OK) {
 8012660:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012664:	2b00      	cmp	r3, #0
 8012666:	d13c      	bne.n	80126e2 <SD_read+0xca>
      /* Polling mode - no need for message queue */
      res = RES_OK;
 8012668:	2300      	movs	r3, #0
 801266a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801266e:	e038      	b.n	80126e2 <SD_read+0xca>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++)
 8012670:	2300      	movs	r3, #0
 8012672:	623b      	str	r3, [r7, #32]
 8012674:	e024      	b.n	80126c0 <SD_read+0xa8>
      {
        ret = BSP_SD_ReadBlocks((uint32_t*)scratch, (uint32_t)sector++, 1, SD_TIMEOUT);
 8012676:	6879      	ldr	r1, [r7, #4]
 8012678:	1c4b      	adds	r3, r1, #1
 801267a:	607b      	str	r3, [r7, #4]
 801267c:	f247 5330 	movw	r3, #30000	@ 0x7530
 8012680:	2201      	movs	r2, #1
 8012682:	481b      	ldr	r0, [pc, #108]	@ (80126f0 <SD_read+0xd8>)
 8012684:	f7ff fe5e 	bl	8012344 <BSP_SD_ReadBlocks>
 8012688:	4603      	mov	r3, r0
 801268a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (ret == MSD_OK )
 801268e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012692:	2b00      	cmp	r3, #0
 8012694:	d119      	bne.n	80126ca <SD_read+0xb2>
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
          /*
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
 8012696:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801269a:	4815      	ldr	r0, [pc, #84]	@ (80126f0 <SD_read+0xd8>)
 801269c:	f7ff fed4 	bl	8012448 <SCB_InvalidateDCache_by_Addr>
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 80126a0:	68bb      	ldr	r3, [r7, #8]
 80126a2:	4a13      	ldr	r2, [pc, #76]	@ (80126f0 <SD_read+0xd8>)
 80126a4:	4618      	mov	r0, r3
 80126a6:	4611      	mov	r1, r2
 80126a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80126ac:	461a      	mov	r2, r3
 80126ae:	f005 fec2 	bl	8018436 <memcpy>
          buff += BLOCKSIZE;
 80126b2:	68bb      	ldr	r3, [r7, #8]
 80126b4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80126b8:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 80126ba:	6a3b      	ldr	r3, [r7, #32]
 80126bc:	3301      	adds	r3, #1
 80126be:	623b      	str	r3, [r7, #32]
 80126c0:	6a3b      	ldr	r3, [r7, #32]
 80126c2:	683a      	ldr	r2, [r7, #0]
 80126c4:	429a      	cmp	r2, r3
 80126c6:	d8d6      	bhi.n	8012676 <SD_read+0x5e>
 80126c8:	e000      	b.n	80126cc <SD_read+0xb4>
        }
        else
        {
          break;
 80126ca:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK ))
 80126cc:	6a3b      	ldr	r3, [r7, #32]
 80126ce:	683a      	ldr	r2, [r7, #0]
 80126d0:	429a      	cmp	r2, r3
 80126d2:	d106      	bne.n	80126e2 <SD_read+0xca>
 80126d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d102      	bne.n	80126e2 <SD_read+0xca>
        res = RES_OK;
 80126dc:	2300      	movs	r3, #0
 80126de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    }
#endif
  return res;
 80126e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
}
 80126e6:	4618      	mov	r0, r3
 80126e8:	3728      	adds	r7, #40	@ 0x28
 80126ea:	46bd      	mov	sp, r7
 80126ec:	bd80      	pop	{r7, pc}
 80126ee:	bf00      	nop
 80126f0:	20001b60 	.word	0x20001b60

080126f4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b08c      	sub	sp, #48	@ 0x30
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	60b9      	str	r1, [r7, #8]
 80126fc:	607a      	str	r2, [r7, #4]
 80126fe:	603b      	str	r3, [r7, #0]
 8012700:	4603      	mov	r3, r0
 8012702:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012704:	2301      	movs	r3, #1
 8012706:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801270a:	f247 5030 	movw	r0, #30000	@ 0x7530
 801270e:	f7ff fef3 	bl	80124f8 <SD_CheckStatusWithTimeout>
 8012712:	4603      	mov	r3, r0
 8012714:	2b00      	cmp	r3, #0
 8012716:	da02      	bge.n	801271e <SD_write+0x2a>
  {
    return res;
 8012718:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801271c:	e082      	b.n	8012824 <SD_write+0x130>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 801271e:	68bb      	ldr	r3, [r7, #8]
 8012720:	f003 0303 	and.w	r3, r3, #3
 8012724:	2b00      	cmp	r3, #0
 8012726:	d17b      	bne.n	8012820 <SD_write+0x12c>
  uint32_t alignedAddr;
  /*
    the SCB_CleanDCache_by_Addr() requires a 32-Byte aligned address
    adjust the address and the D-Cache size to clean accordingly.
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
 8012728:	68bb      	ldr	r3, [r7, #8]
 801272a:	f023 031f 	bic.w	r3, r3, #31
 801272e:	623b      	str	r3, [r7, #32]
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 8012730:	6a38      	ldr	r0, [r7, #32]
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	025a      	lsls	r2, r3, #9
 8012736:	68b9      	ldr	r1, [r7, #8]
 8012738:	6a3b      	ldr	r3, [r7, #32]
 801273a:	1acb      	subs	r3, r1, r3
 801273c:	4413      	add	r3, r2
 801273e:	4619      	mov	r1, r3
 8012740:	f7ff feae 	bl	80124a0 <SCB_CleanDCache_by_Addr>
#endif

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8012744:	f247 5330 	movw	r3, #30000	@ 0x7530
 8012748:	683a      	ldr	r2, [r7, #0]
 801274a:	6879      	ldr	r1, [r7, #4]
 801274c:	68b8      	ldr	r0, [r7, #8]
 801274e:	f7ff fe17 	bl	8012380 <BSP_SD_WriteBlocks>
 8012752:	4603      	mov	r3, r0
 8012754:	2b00      	cmp	r3, #0
 8012756:	d103      	bne.n	8012760 <SD_write+0x6c>
                        (uint32_t) (sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
    /* Polling mode - no need for message queue */
    res = RES_OK;
 8012758:	2300      	movs	r3, #0
 801275a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801275e:	e05f      	b.n	8012820 <SD_write+0x12c>

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
    /*
     * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
     */
     SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
 8012760:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8012764:	4831      	ldr	r0, [pc, #196]	@ (801282c <SD_write+0x138>)
 8012766:	f7ff fe6f 	bl	8012448 <SCB_InvalidateDCache_by_Addr>
#endif
      for (i = 0; i < count; i++)
 801276a:	2300      	movs	r3, #0
 801276c:	627b      	str	r3, [r7, #36]	@ 0x24
 801276e:	e045      	b.n	80127fc <SD_write+0x108>
      {
        memcpy((void *)scratch, buff, BLOCKSIZE);
 8012770:	4a2e      	ldr	r2, [pc, #184]	@ (801282c <SD_write+0x138>)
 8012772:	68bb      	ldr	r3, [r7, #8]
 8012774:	4610      	mov	r0, r2
 8012776:	4619      	mov	r1, r3
 8012778:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801277c:	461a      	mov	r2, r3
 801277e:	f005 fe5a 	bl	8018436 <memcpy>
        buff += BLOCKSIZE;
 8012782:	68bb      	ldr	r3, [r7, #8]
 8012784:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8012788:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks((uint32_t*)scratch, (uint32_t)sector++, 1, SD_TIMEOUT);
 801278a:	6879      	ldr	r1, [r7, #4]
 801278c:	1c4b      	adds	r3, r1, #1
 801278e:	607b      	str	r3, [r7, #4]
 8012790:	f247 5330 	movw	r3, #30000	@ 0x7530
 8012794:	2201      	movs	r2, #1
 8012796:	4825      	ldr	r0, [pc, #148]	@ (801282c <SD_write+0x138>)
 8012798:	f7ff fdf2 	bl	8012380 <BSP_SD_WriteBlocks>
 801279c:	4603      	mov	r3, r0
 801279e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (ret == MSD_OK )
 80127a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d12f      	bne.n	8012806 <SD_write+0x112>
        {
          /* Polling mode - operation already completed */
#if (osCMSIS < 0x20000U)
          /* wait for a message from the queue or a timeout */
          event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80127a6:	4b22      	ldr	r3, [pc, #136]	@ (8012830 <SD_write+0x13c>)
 80127a8:	6819      	ldr	r1, [r3, #0]
 80127aa:	f107 0310 	add.w	r3, r7, #16
 80127ae:	f247 5230 	movw	r2, #30000	@ 0x7530
 80127b2:	4618      	mov	r0, r3
 80127b4:	f002 ffce 	bl	8015754 <osMessageGet>

          if (event.status == osEventMessage)
 80127b8:	693b      	ldr	r3, [r7, #16]
 80127ba:	2b10      	cmp	r3, #16
 80127bc:	d11b      	bne.n	80127f6 <SD_write+0x102>
          {
            if (event.value.v == READ_CPLT_MSG)
 80127be:	697b      	ldr	r3, [r7, #20]
 80127c0:	2b01      	cmp	r3, #1
 80127c2:	d118      	bne.n	80127f6 <SD_write+0x102>
            {
              timer = osKernelSysTick();
 80127c4:	f002 feee 	bl	80155a4 <osKernelSysTick>
 80127c8:	61f8      	str	r0, [r7, #28]
              /* block until SDIO IP is ready or a timeout occur */
              while(osKernelSysTick() - timer <SD_TIMEOUT)
 80127ca:	e006      	b.n	80127da <SD_write+0xe6>
                /* block until SDIO IP is ready or a timeout occur */
                ret = MSD_ERROR;
                while(osKernelGetTickCount() - timer < SD_TIMEOUT)
#endif
                {
                  ret = BSP_SD_GetCardState();
 80127cc:	f7ff fdf6 	bl	80123bc <BSP_SD_GetCardState>
 80127d0:	4603      	mov	r3, r0
 80127d2:	62bb      	str	r3, [r7, #40]	@ 0x28

                  if (ret == MSD_OK)
 80127d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d009      	beq.n	80127ee <SD_write+0xfa>
              while(osKernelSysTick() - timer <SD_TIMEOUT)
 80127da:	f002 fee3 	bl	80155a4 <osKernelSysTick>
 80127de:	4602      	mov	r2, r0
 80127e0:	69fb      	ldr	r3, [r7, #28]
 80127e2:	1ad3      	subs	r3, r2, r3
 80127e4:	f247 522f 	movw	r2, #29999	@ 0x752f
 80127e8:	4293      	cmp	r3, r2
 80127ea:	d9ef      	bls.n	80127cc <SD_write+0xd8>
 80127ec:	e000      	b.n	80127f0 <SD_write+0xfc>
                  {
                    break;
 80127ee:	bf00      	nop
                  }
                }

                if (ret != MSD_OK)
 80127f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d109      	bne.n	801280a <SD_write+0x116>
      for (i = 0; i < count; i++)
 80127f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127f8:	3301      	adds	r3, #1
 80127fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80127fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127fe:	683a      	ldr	r2, [r7, #0]
 8012800:	429a      	cmp	r2, r3
 8012802:	d8b5      	bhi.n	8012770 <SD_write+0x7c>
 8012804:	e002      	b.n	801280c <SD_write+0x118>
          }
#endif
        }
        else
        {
          break;
 8012806:	bf00      	nop
 8012808:	e000      	b.n	801280c <SD_write+0x118>
                  break;
 801280a:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK ))
 801280c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801280e:	683a      	ldr	r2, [r7, #0]
 8012810:	429a      	cmp	r2, r3
 8012812:	d105      	bne.n	8012820 <SD_write+0x12c>
 8012814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012816:	2b00      	cmp	r3, #0
 8012818:	d102      	bne.n	8012820 <SD_write+0x12c>
        res = RES_OK;
 801281a:	2300      	movs	r3, #0
 801281c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

  }
#endif

  return res;
 8012820:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8012824:	4618      	mov	r0, r3
 8012826:	3730      	adds	r7, #48	@ 0x30
 8012828:	46bd      	mov	sp, r7
 801282a:	bd80      	pop	{r7, pc}
 801282c:	20001b60 	.word	0x20001b60
 8012830:	20001d60 	.word	0x20001d60

08012834 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b08c      	sub	sp, #48	@ 0x30
 8012838:	af00      	add	r7, sp, #0
 801283a:	4603      	mov	r3, r0
 801283c:	603a      	str	r2, [r7, #0]
 801283e:	71fb      	strb	r3, [r7, #7]
 8012840:	460b      	mov	r3, r1
 8012842:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012844:	2301      	movs	r3, #1
 8012846:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801284a:	4b25      	ldr	r3, [pc, #148]	@ (80128e0 <SD_ioctl+0xac>)
 801284c:	781b      	ldrb	r3, [r3, #0]
 801284e:	b2db      	uxtb	r3, r3
 8012850:	f003 0301 	and.w	r3, r3, #1
 8012854:	2b00      	cmp	r3, #0
 8012856:	d001      	beq.n	801285c <SD_ioctl+0x28>
 8012858:	2303      	movs	r3, #3
 801285a:	e03c      	b.n	80128d6 <SD_ioctl+0xa2>

  switch (cmd)
 801285c:	79bb      	ldrb	r3, [r7, #6]
 801285e:	2b03      	cmp	r3, #3
 8012860:	d834      	bhi.n	80128cc <SD_ioctl+0x98>
 8012862:	a201      	add	r2, pc, #4	@ (adr r2, 8012868 <SD_ioctl+0x34>)
 8012864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012868:	08012879 	.word	0x08012879
 801286c:	08012881 	.word	0x08012881
 8012870:	08012899 	.word	0x08012899
 8012874:	080128b3 	.word	0x080128b3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012878:	2300      	movs	r3, #0
 801287a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801287e:	e028      	b.n	80128d2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012880:	f107 030c 	add.w	r3, r7, #12
 8012884:	4618      	mov	r0, r3
 8012886:	f7ff fda9 	bl	80123dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801288a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801288c:	683b      	ldr	r3, [r7, #0]
 801288e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012890:	2300      	movs	r3, #0
 8012892:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8012896:	e01c      	b.n	80128d2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012898:	f107 030c 	add.w	r3, r7, #12
 801289c:	4618      	mov	r0, r3
 801289e:	f7ff fd9d 	bl	80123dc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80128a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128a4:	b29a      	uxth	r2, r3
 80128a6:	683b      	ldr	r3, [r7, #0]
 80128a8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80128aa:	2300      	movs	r3, #0
 80128ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80128b0:	e00f      	b.n	80128d2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80128b2:	f107 030c 	add.w	r3, r7, #12
 80128b6:	4618      	mov	r0, r3
 80128b8:	f7ff fd90 	bl	80123dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80128bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128be:	0a5a      	lsrs	r2, r3, #9
 80128c0:	683b      	ldr	r3, [r7, #0]
 80128c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80128c4:	2300      	movs	r3, #0
 80128c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80128ca:	e002      	b.n	80128d2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80128cc:	2304      	movs	r3, #4
 80128ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80128d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80128d6:	4618      	mov	r0, r3
 80128d8:	3730      	adds	r7, #48	@ 0x30
 80128da:	46bd      	mov	sp, r7
 80128dc:	bd80      	pop	{r7, pc}
 80128de:	bf00      	nop
 80128e0:	20000075 	.word	0x20000075

080128e4 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b082      	sub	sp, #8
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80128f2:	1c5a      	adds	r2, r3, #1
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80128fa:	6878      	ldr	r0, [r7, #4]
 80128fc:	f000 f804 	bl	8012908 <USBH_HandleSof>
}
 8012900:	bf00      	nop
 8012902:	3708      	adds	r7, #8
 8012904:	46bd      	mov	sp, r7
 8012906:	bd80      	pop	{r7, pc}

08012908 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8012908:	b580      	push	{r7, lr}
 801290a:	b082      	sub	sp, #8
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	781b      	ldrb	r3, [r3, #0]
 8012914:	b2db      	uxtb	r3, r3
 8012916:	2b0b      	cmp	r3, #11
 8012918:	d10a      	bne.n	8012930 <USBH_HandleSof+0x28>
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012920:	2b00      	cmp	r3, #0
 8012922:	d005      	beq.n	8012930 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801292a:	699b      	ldr	r3, [r3, #24]
 801292c:	6878      	ldr	r0, [r7, #4]
 801292e:	4798      	blx	r3
  }
}
 8012930:	bf00      	nop
 8012932:	3708      	adds	r7, #8
 8012934:	46bd      	mov	sp, r7
 8012936:	bd80      	pop	{r7, pc}

08012938 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b082      	sub	sp, #8
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	2201      	movs	r2, #1
 8012944:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012948:	2300      	movs	r3, #0
 801294a:	2200      	movs	r2, #0
 801294c:	2101      	movs	r1, #1
 801294e:	6878      	ldr	r0, [r7, #4]
 8012950:	f000 f85b 	bl	8012a0a <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 8012954:	bf00      	nop
}
 8012956:	3708      	adds	r7, #8
 8012958:	46bd      	mov	sp, r7
 801295a:	bd80      	pop	{r7, pc}

0801295c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 801295c:	b480      	push	{r7}
 801295e:	b083      	sub	sp, #12
 8012960:	af00      	add	r7, sp, #0
 8012962:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	2200      	movs	r2, #0
 8012968:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	2201      	movs	r2, #1
 8012970:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8012974:	bf00      	nop
}
 8012976:	370c      	adds	r7, #12
 8012978:	46bd      	mov	sp, r7
 801297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297e:	4770      	bx	lr

08012980 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b082      	sub	sp, #8
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2201      	movs	r2, #1
 801298c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	2200      	movs	r2, #0
 8012994:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	2200      	movs	r2, #0
 801299c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80129a0:	2300      	movs	r3, #0
 80129a2:	2200      	movs	r2, #0
 80129a4:	2101      	movs	r1, #1
 80129a6:	6878      	ldr	r0, [r7, #4]
 80129a8:	f000 f82f 	bl	8012a0a <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80129ac:	2300      	movs	r3, #0
}
 80129ae:	4618      	mov	r0, r3
 80129b0:	3708      	adds	r7, #8
 80129b2:	46bd      	mov	sp, r7
 80129b4:	bd80      	pop	{r7, pc}

080129b6 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80129b6:	b580      	push	{r7, lr}
 80129b8:	b082      	sub	sp, #8
 80129ba:	af00      	add	r7, sp, #0
 80129bc:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	2201      	movs	r2, #1
 80129c2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	2200      	movs	r2, #0
 80129ca:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	2200      	movs	r2, #0
 80129d2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80129d6:	6878      	ldr	r0, [r7, #4]
 80129d8:	f005 f99c 	bl	8017d14 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	791b      	ldrb	r3, [r3, #4]
 80129e0:	4619      	mov	r1, r3
 80129e2:	6878      	ldr	r0, [r7, #4]
 80129e4:	f000 f847 	bl	8012a76 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	795b      	ldrb	r3, [r3, #5]
 80129ec:	4619      	mov	r1, r3
 80129ee:	6878      	ldr	r0, [r7, #4]
 80129f0:	f000 f841 	bl	8012a76 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80129f4:	2300      	movs	r3, #0
 80129f6:	2200      	movs	r2, #0
 80129f8:	2101      	movs	r1, #1
 80129fa:	6878      	ldr	r0, [r7, #4]
 80129fc:	f000 f805 	bl	8012a0a <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8012a00:	2300      	movs	r3, #0
}
 8012a02:	4618      	mov	r0, r3
 8012a04:	3708      	adds	r7, #8
 8012a06:	46bd      	mov	sp, r7
 8012a08:	bd80      	pop	{r7, pc}

08012a0a <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 8012a0a:	b580      	push	{r7, lr}
 8012a0c:	b086      	sub	sp, #24
 8012a0e:	af00      	add	r7, sp, #0
 8012a10:	60f8      	str	r0, [r7, #12]
 8012a12:	607a      	str	r2, [r7, #4]
 8012a14:	603b      	str	r3, [r7, #0]
 8012a16:	460b      	mov	r3, r1
 8012a18:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 8012a1a:	7afa      	ldrb	r2, [r7, #11]
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  UNUSED(priority);

  /* Calculate the number of available spaces */
  uint32_t available_spaces = MSGQUEUE_OBJECTS - osMessageWaiting(phost->os_event);
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f002 ff07 	bl	801583c <osMessageWaiting>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	f1c3 0310 	rsb	r3, r3, #16
 8012a34:	617b      	str	r3, [r7, #20]

  if (available_spaces != 0U)
 8012a36:	697b      	ldr	r3, [r7, #20]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d009      	beq.n	8012a50 <USBH_OS_PutMessage+0x46>
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8012a48:	687a      	ldr	r2, [r7, #4]
 8012a4a:	4619      	mov	r1, r3
 8012a4c:	f002 fe42 	bl	80156d4 <osMessagePut>
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
  }
#endif /* (osCMSIS < 0x20000U) */
}
 8012a50:	bf00      	nop
 8012a52:	3718      	adds	r7, #24
 8012a54:	46bd      	mov	sp, r7
 8012a56:	bd80      	pop	{r7, pc}

08012a58 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b082      	sub	sp, #8
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012a60:	2300      	movs	r3, #0
 8012a62:	2200      	movs	r2, #0
 8012a64:	2101      	movs	r1, #1
 8012a66:	6878      	ldr	r0, [r7, #4]
 8012a68:	f7ff ffcf 	bl	8012a0a <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8012a6c:	2300      	movs	r3, #0
}
 8012a6e:	4618      	mov	r0, r3
 8012a70:	3708      	adds	r7, #8
 8012a72:	46bd      	mov	sp, r7
 8012a74:	bd80      	pop	{r7, pc}

08012a76 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8012a76:	b480      	push	{r7}
 8012a78:	b083      	sub	sp, #12
 8012a7a:	af00      	add	r7, sp, #0
 8012a7c:	6078      	str	r0, [r7, #4]
 8012a7e:	460b      	mov	r3, r1
 8012a80:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8012a82:	78fb      	ldrb	r3, [r7, #3]
 8012a84:	2b0f      	cmp	r3, #15
 8012a86:	d80d      	bhi.n	8012aa4 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8012a88:	78fb      	ldrb	r3, [r7, #3]
 8012a8a:	687a      	ldr	r2, [r7, #4]
 8012a8c:	33e0      	adds	r3, #224	@ 0xe0
 8012a8e:	009b      	lsls	r3, r3, #2
 8012a90:	4413      	add	r3, r2
 8012a92:	685a      	ldr	r2, [r3, #4]
 8012a94:	78fb      	ldrb	r3, [r7, #3]
 8012a96:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8012a9a:	6879      	ldr	r1, [r7, #4]
 8012a9c:	33e0      	adds	r3, #224	@ 0xe0
 8012a9e:	009b      	lsls	r3, r3, #2
 8012aa0:	440b      	add	r3, r1
 8012aa2:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8012aa4:	2300      	movs	r3, #0
}
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	370c      	adds	r7, #12
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab0:	4770      	bx	lr
	...

08012ab4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b084      	sub	sp, #16
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	4603      	mov	r3, r0
 8012abc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012abe:	79fb      	ldrb	r3, [r7, #7]
 8012ac0:	4a08      	ldr	r2, [pc, #32]	@ (8012ae4 <disk_status+0x30>)
 8012ac2:	009b      	lsls	r3, r3, #2
 8012ac4:	4413      	add	r3, r2
 8012ac6:	685b      	ldr	r3, [r3, #4]
 8012ac8:	685b      	ldr	r3, [r3, #4]
 8012aca:	79fa      	ldrb	r2, [r7, #7]
 8012acc:	4905      	ldr	r1, [pc, #20]	@ (8012ae4 <disk_status+0x30>)
 8012ace:	440a      	add	r2, r1
 8012ad0:	7a12      	ldrb	r2, [r2, #8]
 8012ad2:	4610      	mov	r0, r2
 8012ad4:	4798      	blx	r3
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8012adc:	4618      	mov	r0, r3
 8012ade:	3710      	adds	r7, #16
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	bd80      	pop	{r7, pc}
 8012ae4:	20001d6c 	.word	0x20001d6c

08012ae8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b084      	sub	sp, #16
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	4603      	mov	r3, r0
 8012af0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012af2:	2300      	movs	r3, #0
 8012af4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012af6:	79fb      	ldrb	r3, [r7, #7]
 8012af8:	4a0d      	ldr	r2, [pc, #52]	@ (8012b30 <disk_initialize+0x48>)
 8012afa:	5cd3      	ldrb	r3, [r2, r3]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d111      	bne.n	8012b24 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012b00:	79fb      	ldrb	r3, [r7, #7]
 8012b02:	4a0b      	ldr	r2, [pc, #44]	@ (8012b30 <disk_initialize+0x48>)
 8012b04:	2101      	movs	r1, #1
 8012b06:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012b08:	79fb      	ldrb	r3, [r7, #7]
 8012b0a:	4a09      	ldr	r2, [pc, #36]	@ (8012b30 <disk_initialize+0x48>)
 8012b0c:	009b      	lsls	r3, r3, #2
 8012b0e:	4413      	add	r3, r2
 8012b10:	685b      	ldr	r3, [r3, #4]
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	79fa      	ldrb	r2, [r7, #7]
 8012b16:	4906      	ldr	r1, [pc, #24]	@ (8012b30 <disk_initialize+0x48>)
 8012b18:	440a      	add	r2, r1
 8012b1a:	7a12      	ldrb	r2, [r2, #8]
 8012b1c:	4610      	mov	r0, r2
 8012b1e:	4798      	blx	r3
 8012b20:	4603      	mov	r3, r0
 8012b22:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b26:	4618      	mov	r0, r3
 8012b28:	3710      	adds	r7, #16
 8012b2a:	46bd      	mov	sp, r7
 8012b2c:	bd80      	pop	{r7, pc}
 8012b2e:	bf00      	nop
 8012b30:	20001d6c 	.word	0x20001d6c

08012b34 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012b34:	b590      	push	{r4, r7, lr}
 8012b36:	b087      	sub	sp, #28
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	60b9      	str	r1, [r7, #8]
 8012b3c:	607a      	str	r2, [r7, #4]
 8012b3e:	603b      	str	r3, [r7, #0]
 8012b40:	4603      	mov	r3, r0
 8012b42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012b44:	7bfb      	ldrb	r3, [r7, #15]
 8012b46:	4a0a      	ldr	r2, [pc, #40]	@ (8012b70 <disk_read+0x3c>)
 8012b48:	009b      	lsls	r3, r3, #2
 8012b4a:	4413      	add	r3, r2
 8012b4c:	685b      	ldr	r3, [r3, #4]
 8012b4e:	689c      	ldr	r4, [r3, #8]
 8012b50:	7bfb      	ldrb	r3, [r7, #15]
 8012b52:	4a07      	ldr	r2, [pc, #28]	@ (8012b70 <disk_read+0x3c>)
 8012b54:	4413      	add	r3, r2
 8012b56:	7a18      	ldrb	r0, [r3, #8]
 8012b58:	683b      	ldr	r3, [r7, #0]
 8012b5a:	687a      	ldr	r2, [r7, #4]
 8012b5c:	68b9      	ldr	r1, [r7, #8]
 8012b5e:	47a0      	blx	r4
 8012b60:	4603      	mov	r3, r0
 8012b62:	75fb      	strb	r3, [r7, #23]
  return res;
 8012b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b66:	4618      	mov	r0, r3
 8012b68:	371c      	adds	r7, #28
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	bd90      	pop	{r4, r7, pc}
 8012b6e:	bf00      	nop
 8012b70:	20001d6c 	.word	0x20001d6c

08012b74 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012b74:	b590      	push	{r4, r7, lr}
 8012b76:	b087      	sub	sp, #28
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	60b9      	str	r1, [r7, #8]
 8012b7c:	607a      	str	r2, [r7, #4]
 8012b7e:	603b      	str	r3, [r7, #0]
 8012b80:	4603      	mov	r3, r0
 8012b82:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012b84:	7bfb      	ldrb	r3, [r7, #15]
 8012b86:	4a0a      	ldr	r2, [pc, #40]	@ (8012bb0 <disk_write+0x3c>)
 8012b88:	009b      	lsls	r3, r3, #2
 8012b8a:	4413      	add	r3, r2
 8012b8c:	685b      	ldr	r3, [r3, #4]
 8012b8e:	68dc      	ldr	r4, [r3, #12]
 8012b90:	7bfb      	ldrb	r3, [r7, #15]
 8012b92:	4a07      	ldr	r2, [pc, #28]	@ (8012bb0 <disk_write+0x3c>)
 8012b94:	4413      	add	r3, r2
 8012b96:	7a18      	ldrb	r0, [r3, #8]
 8012b98:	683b      	ldr	r3, [r7, #0]
 8012b9a:	687a      	ldr	r2, [r7, #4]
 8012b9c:	68b9      	ldr	r1, [r7, #8]
 8012b9e:	47a0      	blx	r4
 8012ba0:	4603      	mov	r3, r0
 8012ba2:	75fb      	strb	r3, [r7, #23]
  return res;
 8012ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	371c      	adds	r7, #28
 8012baa:	46bd      	mov	sp, r7
 8012bac:	bd90      	pop	{r4, r7, pc}
 8012bae:	bf00      	nop
 8012bb0:	20001d6c 	.word	0x20001d6c

08012bb4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b084      	sub	sp, #16
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	4603      	mov	r3, r0
 8012bbc:	603a      	str	r2, [r7, #0]
 8012bbe:	71fb      	strb	r3, [r7, #7]
 8012bc0:	460b      	mov	r3, r1
 8012bc2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012bc4:	79fb      	ldrb	r3, [r7, #7]
 8012bc6:	4a09      	ldr	r2, [pc, #36]	@ (8012bec <disk_ioctl+0x38>)
 8012bc8:	009b      	lsls	r3, r3, #2
 8012bca:	4413      	add	r3, r2
 8012bcc:	685b      	ldr	r3, [r3, #4]
 8012bce:	691b      	ldr	r3, [r3, #16]
 8012bd0:	79fa      	ldrb	r2, [r7, #7]
 8012bd2:	4906      	ldr	r1, [pc, #24]	@ (8012bec <disk_ioctl+0x38>)
 8012bd4:	440a      	add	r2, r1
 8012bd6:	7a10      	ldrb	r0, [r2, #8]
 8012bd8:	79b9      	ldrb	r1, [r7, #6]
 8012bda:	683a      	ldr	r2, [r7, #0]
 8012bdc:	4798      	blx	r3
 8012bde:	4603      	mov	r3, r0
 8012be0:	73fb      	strb	r3, [r7, #15]
  return res;
 8012be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012be4:	4618      	mov	r0, r3
 8012be6:	3710      	adds	r7, #16
 8012be8:	46bd      	mov	sp, r7
 8012bea:	bd80      	pop	{r7, pc}
 8012bec:	20001d6c 	.word	0x20001d6c

08012bf0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012bf0:	b480      	push	{r7}
 8012bf2:	b085      	sub	sp, #20
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	3301      	adds	r3, #1
 8012bfc:	781b      	ldrb	r3, [r3, #0]
 8012bfe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012c00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012c04:	021b      	lsls	r3, r3, #8
 8012c06:	b21a      	sxth	r2, r3
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	781b      	ldrb	r3, [r3, #0]
 8012c0c:	b21b      	sxth	r3, r3
 8012c0e:	4313      	orrs	r3, r2
 8012c10:	b21b      	sxth	r3, r3
 8012c12:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012c14:	89fb      	ldrh	r3, [r7, #14]
}
 8012c16:	4618      	mov	r0, r3
 8012c18:	3714      	adds	r7, #20
 8012c1a:	46bd      	mov	sp, r7
 8012c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c20:	4770      	bx	lr

08012c22 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012c22:	b480      	push	{r7}
 8012c24:	b085      	sub	sp, #20
 8012c26:	af00      	add	r7, sp, #0
 8012c28:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	3303      	adds	r3, #3
 8012c2e:	781b      	ldrb	r3, [r3, #0]
 8012c30:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	021b      	lsls	r3, r3, #8
 8012c36:	687a      	ldr	r2, [r7, #4]
 8012c38:	3202      	adds	r2, #2
 8012c3a:	7812      	ldrb	r2, [r2, #0]
 8012c3c:	4313      	orrs	r3, r2
 8012c3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	021b      	lsls	r3, r3, #8
 8012c44:	687a      	ldr	r2, [r7, #4]
 8012c46:	3201      	adds	r2, #1
 8012c48:	7812      	ldrb	r2, [r2, #0]
 8012c4a:	4313      	orrs	r3, r2
 8012c4c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	021b      	lsls	r3, r3, #8
 8012c52:	687a      	ldr	r2, [r7, #4]
 8012c54:	7812      	ldrb	r2, [r2, #0]
 8012c56:	4313      	orrs	r3, r2
 8012c58:	60fb      	str	r3, [r7, #12]
	return rv;
 8012c5a:	68fb      	ldr	r3, [r7, #12]
}
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	3714      	adds	r7, #20
 8012c60:	46bd      	mov	sp, r7
 8012c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c66:	4770      	bx	lr

08012c68 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012c68:	b480      	push	{r7}
 8012c6a:	b083      	sub	sp, #12
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
 8012c70:	460b      	mov	r3, r1
 8012c72:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	1c5a      	adds	r2, r3, #1
 8012c78:	607a      	str	r2, [r7, #4]
 8012c7a:	887a      	ldrh	r2, [r7, #2]
 8012c7c:	b2d2      	uxtb	r2, r2
 8012c7e:	701a      	strb	r2, [r3, #0]
 8012c80:	887b      	ldrh	r3, [r7, #2]
 8012c82:	0a1b      	lsrs	r3, r3, #8
 8012c84:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	1c5a      	adds	r2, r3, #1
 8012c8a:	607a      	str	r2, [r7, #4]
 8012c8c:	887a      	ldrh	r2, [r7, #2]
 8012c8e:	b2d2      	uxtb	r2, r2
 8012c90:	701a      	strb	r2, [r3, #0]
}
 8012c92:	bf00      	nop
 8012c94:	370c      	adds	r7, #12
 8012c96:	46bd      	mov	sp, r7
 8012c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9c:	4770      	bx	lr

08012c9e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012c9e:	b480      	push	{r7}
 8012ca0:	b083      	sub	sp, #12
 8012ca2:	af00      	add	r7, sp, #0
 8012ca4:	6078      	str	r0, [r7, #4]
 8012ca6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	1c5a      	adds	r2, r3, #1
 8012cac:	607a      	str	r2, [r7, #4]
 8012cae:	683a      	ldr	r2, [r7, #0]
 8012cb0:	b2d2      	uxtb	r2, r2
 8012cb2:	701a      	strb	r2, [r3, #0]
 8012cb4:	683b      	ldr	r3, [r7, #0]
 8012cb6:	0a1b      	lsrs	r3, r3, #8
 8012cb8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	1c5a      	adds	r2, r3, #1
 8012cbe:	607a      	str	r2, [r7, #4]
 8012cc0:	683a      	ldr	r2, [r7, #0]
 8012cc2:	b2d2      	uxtb	r2, r2
 8012cc4:	701a      	strb	r2, [r3, #0]
 8012cc6:	683b      	ldr	r3, [r7, #0]
 8012cc8:	0a1b      	lsrs	r3, r3, #8
 8012cca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	1c5a      	adds	r2, r3, #1
 8012cd0:	607a      	str	r2, [r7, #4]
 8012cd2:	683a      	ldr	r2, [r7, #0]
 8012cd4:	b2d2      	uxtb	r2, r2
 8012cd6:	701a      	strb	r2, [r3, #0]
 8012cd8:	683b      	ldr	r3, [r7, #0]
 8012cda:	0a1b      	lsrs	r3, r3, #8
 8012cdc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	1c5a      	adds	r2, r3, #1
 8012ce2:	607a      	str	r2, [r7, #4]
 8012ce4:	683a      	ldr	r2, [r7, #0]
 8012ce6:	b2d2      	uxtb	r2, r2
 8012ce8:	701a      	strb	r2, [r3, #0]
}
 8012cea:	bf00      	nop
 8012cec:	370c      	adds	r7, #12
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf4:	4770      	bx	lr

08012cf6 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012cf6:	b480      	push	{r7}
 8012cf8:	b087      	sub	sp, #28
 8012cfa:	af00      	add	r7, sp, #0
 8012cfc:	60f8      	str	r0, [r7, #12]
 8012cfe:	60b9      	str	r1, [r7, #8]
 8012d00:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012d06:	68bb      	ldr	r3, [r7, #8]
 8012d08:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d00d      	beq.n	8012d2c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012d10:	693a      	ldr	r2, [r7, #16]
 8012d12:	1c53      	adds	r3, r2, #1
 8012d14:	613b      	str	r3, [r7, #16]
 8012d16:	697b      	ldr	r3, [r7, #20]
 8012d18:	1c59      	adds	r1, r3, #1
 8012d1a:	6179      	str	r1, [r7, #20]
 8012d1c:	7812      	ldrb	r2, [r2, #0]
 8012d1e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	3b01      	subs	r3, #1
 8012d24:	607b      	str	r3, [r7, #4]
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d1f1      	bne.n	8012d10 <mem_cpy+0x1a>
	}
}
 8012d2c:	bf00      	nop
 8012d2e:	371c      	adds	r7, #28
 8012d30:	46bd      	mov	sp, r7
 8012d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d36:	4770      	bx	lr

08012d38 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012d38:	b480      	push	{r7}
 8012d3a:	b087      	sub	sp, #28
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	60f8      	str	r0, [r7, #12]
 8012d40:	60b9      	str	r1, [r7, #8]
 8012d42:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012d48:	697b      	ldr	r3, [r7, #20]
 8012d4a:	1c5a      	adds	r2, r3, #1
 8012d4c:	617a      	str	r2, [r7, #20]
 8012d4e:	68ba      	ldr	r2, [r7, #8]
 8012d50:	b2d2      	uxtb	r2, r2
 8012d52:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	3b01      	subs	r3, #1
 8012d58:	607b      	str	r3, [r7, #4]
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d1f3      	bne.n	8012d48 <mem_set+0x10>
}
 8012d60:	bf00      	nop
 8012d62:	bf00      	nop
 8012d64:	371c      	adds	r7, #28
 8012d66:	46bd      	mov	sp, r7
 8012d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6c:	4770      	bx	lr

08012d6e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012d6e:	b480      	push	{r7}
 8012d70:	b089      	sub	sp, #36	@ 0x24
 8012d72:	af00      	add	r7, sp, #0
 8012d74:	60f8      	str	r0, [r7, #12]
 8012d76:	60b9      	str	r1, [r7, #8]
 8012d78:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	61fb      	str	r3, [r7, #28]
 8012d7e:	68bb      	ldr	r3, [r7, #8]
 8012d80:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012d82:	2300      	movs	r3, #0
 8012d84:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012d86:	69fb      	ldr	r3, [r7, #28]
 8012d88:	1c5a      	adds	r2, r3, #1
 8012d8a:	61fa      	str	r2, [r7, #28]
 8012d8c:	781b      	ldrb	r3, [r3, #0]
 8012d8e:	4619      	mov	r1, r3
 8012d90:	69bb      	ldr	r3, [r7, #24]
 8012d92:	1c5a      	adds	r2, r3, #1
 8012d94:	61ba      	str	r2, [r7, #24]
 8012d96:	781b      	ldrb	r3, [r3, #0]
 8012d98:	1acb      	subs	r3, r1, r3
 8012d9a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	3b01      	subs	r3, #1
 8012da0:	607b      	str	r3, [r7, #4]
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d002      	beq.n	8012dae <mem_cmp+0x40>
 8012da8:	697b      	ldr	r3, [r7, #20]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d0eb      	beq.n	8012d86 <mem_cmp+0x18>

	return r;
 8012dae:	697b      	ldr	r3, [r7, #20]
}
 8012db0:	4618      	mov	r0, r3
 8012db2:	3724      	adds	r7, #36	@ 0x24
 8012db4:	46bd      	mov	sp, r7
 8012db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dba:	4770      	bx	lr

08012dbc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8012dbc:	b480      	push	{r7}
 8012dbe:	b083      	sub	sp, #12
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
 8012dc4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012dc6:	e002      	b.n	8012dce <chk_chr+0x12>
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	3301      	adds	r3, #1
 8012dcc:	607b      	str	r3, [r7, #4]
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	781b      	ldrb	r3, [r3, #0]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d005      	beq.n	8012de2 <chk_chr+0x26>
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	781b      	ldrb	r3, [r3, #0]
 8012dda:	461a      	mov	r2, r3
 8012ddc:	683b      	ldr	r3, [r7, #0]
 8012dde:	4293      	cmp	r3, r2
 8012de0:	d1f2      	bne.n	8012dc8 <chk_chr+0xc>
	return *str;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	781b      	ldrb	r3, [r3, #0]
}
 8012de6:	4618      	mov	r0, r3
 8012de8:	370c      	adds	r7, #12
 8012dea:	46bd      	mov	sp, r7
 8012dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df0:	4770      	bx	lr

08012df2 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8012df2:	b580      	push	{r7, lr}
 8012df4:	b086      	sub	sp, #24
 8012df6:	af00      	add	r7, sp, #0
 8012df8:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	78db      	ldrb	r3, [r3, #3]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d034      	beq.n	8012e70 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e0a:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	7858      	ldrb	r0, [r3, #1]
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012e16:	2301      	movs	r3, #1
 8012e18:	697a      	ldr	r2, [r7, #20]
 8012e1a:	f7ff feab 	bl	8012b74 <disk_write>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d002      	beq.n	8012e2a <sync_window+0x38>
			res = FR_DISK_ERR;
 8012e24:	2301      	movs	r3, #1
 8012e26:	73fb      	strb	r3, [r7, #15]
 8012e28:	e022      	b.n	8012e70 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	2200      	movs	r2, #0
 8012e2e:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	6a1b      	ldr	r3, [r3, #32]
 8012e34:	697a      	ldr	r2, [r7, #20]
 8012e36:	1ad2      	subs	r2, r2, r3
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	699b      	ldr	r3, [r3, #24]
 8012e3c:	429a      	cmp	r2, r3
 8012e3e:	d217      	bcs.n	8012e70 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	789b      	ldrb	r3, [r3, #2]
 8012e44:	613b      	str	r3, [r7, #16]
 8012e46:	e010      	b.n	8012e6a <sync_window+0x78>
					wsect += fs->fsize;
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	699b      	ldr	r3, [r3, #24]
 8012e4c:	697a      	ldr	r2, [r7, #20]
 8012e4e:	4413      	add	r3, r2
 8012e50:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	7858      	ldrb	r0, [r3, #1]
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012e5c:	2301      	movs	r3, #1
 8012e5e:	697a      	ldr	r2, [r7, #20]
 8012e60:	f7ff fe88 	bl	8012b74 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012e64:	693b      	ldr	r3, [r7, #16]
 8012e66:	3b01      	subs	r3, #1
 8012e68:	613b      	str	r3, [r7, #16]
 8012e6a:	693b      	ldr	r3, [r7, #16]
 8012e6c:	2b01      	cmp	r3, #1
 8012e6e:	d8eb      	bhi.n	8012e48 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8012e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e72:	4618      	mov	r0, r3
 8012e74:	3718      	adds	r7, #24
 8012e76:	46bd      	mov	sp, r7
 8012e78:	bd80      	pop	{r7, pc}

08012e7a <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8012e7a:	b580      	push	{r7, lr}
 8012e7c:	b084      	sub	sp, #16
 8012e7e:	af00      	add	r7, sp, #0
 8012e80:	6078      	str	r0, [r7, #4]
 8012e82:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012e84:	2300      	movs	r3, #0
 8012e86:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e8c:	683a      	ldr	r2, [r7, #0]
 8012e8e:	429a      	cmp	r2, r3
 8012e90:	d01b      	beq.n	8012eca <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012e92:	6878      	ldr	r0, [r7, #4]
 8012e94:	f7ff ffad 	bl	8012df2 <sync_window>
 8012e98:	4603      	mov	r3, r0
 8012e9a:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8012e9c:	7bfb      	ldrb	r3, [r7, #15]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d113      	bne.n	8012eca <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	7858      	ldrb	r0, [r3, #1]
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012eac:	2301      	movs	r3, #1
 8012eae:	683a      	ldr	r2, [r7, #0]
 8012eb0:	f7ff fe40 	bl	8012b34 <disk_read>
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d004      	beq.n	8012ec4 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8012eba:	f04f 33ff 	mov.w	r3, #4294967295
 8012ebe:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8012ec0:	2301      	movs	r3, #1
 8012ec2:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	683a      	ldr	r2, [r7, #0]
 8012ec8:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8012eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ecc:	4618      	mov	r0, r3
 8012ece:	3710      	adds	r7, #16
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	bd80      	pop	{r7, pc}

08012ed4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b084      	sub	sp, #16
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012edc:	6878      	ldr	r0, [r7, #4]
 8012ede:	f7ff ff88 	bl	8012df2 <sync_window>
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012ee6:	7bfb      	ldrb	r3, [r7, #15]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d158      	bne.n	8012f9e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	781b      	ldrb	r3, [r3, #0]
 8012ef0:	2b03      	cmp	r3, #3
 8012ef2:	d148      	bne.n	8012f86 <sync_fs+0xb2>
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	791b      	ldrb	r3, [r3, #4]
 8012ef8:	2b01      	cmp	r3, #1
 8012efa:	d144      	bne.n	8012f86 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	3330      	adds	r3, #48	@ 0x30
 8012f00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012f04:	2100      	movs	r1, #0
 8012f06:	4618      	mov	r0, r3
 8012f08:	f7ff ff16 	bl	8012d38 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	3330      	adds	r3, #48	@ 0x30
 8012f10:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012f14:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f7ff fea5 	bl	8012c68 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	3330      	adds	r3, #48	@ 0x30
 8012f22:	4921      	ldr	r1, [pc, #132]	@ (8012fa8 <sync_fs+0xd4>)
 8012f24:	4618      	mov	r0, r3
 8012f26:	f7ff feba 	bl	8012c9e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	3330      	adds	r3, #48	@ 0x30
 8012f2e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8012f32:	491e      	ldr	r1, [pc, #120]	@ (8012fac <sync_fs+0xd8>)
 8012f34:	4618      	mov	r0, r3
 8012f36:	f7ff feb2 	bl	8012c9e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	3330      	adds	r3, #48	@ 0x30
 8012f3e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	691b      	ldr	r3, [r3, #16]
 8012f46:	4619      	mov	r1, r3
 8012f48:	4610      	mov	r0, r2
 8012f4a:	f7ff fea8 	bl	8012c9e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	3330      	adds	r3, #48	@ 0x30
 8012f52:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	68db      	ldr	r3, [r3, #12]
 8012f5a:	4619      	mov	r1, r3
 8012f5c:	4610      	mov	r0, r2
 8012f5e:	f7ff fe9e 	bl	8012c9e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	69db      	ldr	r3, [r3, #28]
 8012f66:	1c5a      	adds	r2, r3, #1
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	7858      	ldrb	r0, [r3, #1]
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f7a:	2301      	movs	r3, #1
 8012f7c:	f7ff fdfa 	bl	8012b74 <disk_write>
			fs->fsi_flag = 0;
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	2200      	movs	r2, #0
 8012f84:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	785b      	ldrb	r3, [r3, #1]
 8012f8a:	2200      	movs	r2, #0
 8012f8c:	2100      	movs	r1, #0
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f7ff fe10 	bl	8012bb4 <disk_ioctl>
 8012f94:	4603      	mov	r3, r0
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d001      	beq.n	8012f9e <sync_fs+0xca>
 8012f9a:	2301      	movs	r3, #1
 8012f9c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	3710      	adds	r7, #16
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	bd80      	pop	{r7, pc}
 8012fa8:	41615252 	.word	0x41615252
 8012fac:	61417272 	.word	0x61417272

08012fb0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012fb0:	b480      	push	{r7}
 8012fb2:	b083      	sub	sp, #12
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
 8012fb8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8012fba:	683b      	ldr	r3, [r7, #0]
 8012fbc:	3b02      	subs	r3, #2
 8012fbe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	695b      	ldr	r3, [r3, #20]
 8012fc4:	3b02      	subs	r3, #2
 8012fc6:	683a      	ldr	r2, [r7, #0]
 8012fc8:	429a      	cmp	r2, r3
 8012fca:	d301      	bcc.n	8012fd0 <clust2sect+0x20>
 8012fcc:	2300      	movs	r3, #0
 8012fce:	e008      	b.n	8012fe2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	895b      	ldrh	r3, [r3, #10]
 8012fd4:	461a      	mov	r2, r3
 8012fd6:	683b      	ldr	r3, [r7, #0]
 8012fd8:	fb03 f202 	mul.w	r2, r3, r2
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012fe0:	4413      	add	r3, r2
}
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	370c      	adds	r7, #12
 8012fe6:	46bd      	mov	sp, r7
 8012fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fec:	4770      	bx	lr

08012fee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8012fee:	b580      	push	{r7, lr}
 8012ff0:	b086      	sub	sp, #24
 8012ff2:	af00      	add	r7, sp, #0
 8012ff4:	6078      	str	r0, [r7, #4]
 8012ff6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012ffe:	683b      	ldr	r3, [r7, #0]
 8013000:	2b01      	cmp	r3, #1
 8013002:	d904      	bls.n	801300e <get_fat+0x20>
 8013004:	693b      	ldr	r3, [r7, #16]
 8013006:	695b      	ldr	r3, [r3, #20]
 8013008:	683a      	ldr	r2, [r7, #0]
 801300a:	429a      	cmp	r2, r3
 801300c:	d302      	bcc.n	8013014 <get_fat+0x26>
		val = 1;	/* Internal error */
 801300e:	2301      	movs	r3, #1
 8013010:	617b      	str	r3, [r7, #20]
 8013012:	e08e      	b.n	8013132 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8013014:	f04f 33ff 	mov.w	r3, #4294967295
 8013018:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801301a:	693b      	ldr	r3, [r7, #16]
 801301c:	781b      	ldrb	r3, [r3, #0]
 801301e:	2b03      	cmp	r3, #3
 8013020:	d061      	beq.n	80130e6 <get_fat+0xf8>
 8013022:	2b03      	cmp	r3, #3
 8013024:	dc7b      	bgt.n	801311e <get_fat+0x130>
 8013026:	2b01      	cmp	r3, #1
 8013028:	d002      	beq.n	8013030 <get_fat+0x42>
 801302a:	2b02      	cmp	r3, #2
 801302c:	d041      	beq.n	80130b2 <get_fat+0xc4>
 801302e:	e076      	b.n	801311e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8013030:	683b      	ldr	r3, [r7, #0]
 8013032:	60fb      	str	r3, [r7, #12]
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	085b      	lsrs	r3, r3, #1
 8013038:	68fa      	ldr	r2, [r7, #12]
 801303a:	4413      	add	r3, r2
 801303c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801303e:	693b      	ldr	r3, [r7, #16]
 8013040:	6a1a      	ldr	r2, [r3, #32]
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	0a5b      	lsrs	r3, r3, #9
 8013046:	4413      	add	r3, r2
 8013048:	4619      	mov	r1, r3
 801304a:	6938      	ldr	r0, [r7, #16]
 801304c:	f7ff ff15 	bl	8012e7a <move_window>
 8013050:	4603      	mov	r3, r0
 8013052:	2b00      	cmp	r3, #0
 8013054:	d166      	bne.n	8013124 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	1c5a      	adds	r2, r3, #1
 801305a:	60fa      	str	r2, [r7, #12]
 801305c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013060:	693a      	ldr	r2, [r7, #16]
 8013062:	4413      	add	r3, r2
 8013064:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013068:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801306a:	693b      	ldr	r3, [r7, #16]
 801306c:	6a1a      	ldr	r2, [r3, #32]
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	0a5b      	lsrs	r3, r3, #9
 8013072:	4413      	add	r3, r2
 8013074:	4619      	mov	r1, r3
 8013076:	6938      	ldr	r0, [r7, #16]
 8013078:	f7ff feff 	bl	8012e7a <move_window>
 801307c:	4603      	mov	r3, r0
 801307e:	2b00      	cmp	r3, #0
 8013080:	d152      	bne.n	8013128 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013088:	693a      	ldr	r2, [r7, #16]
 801308a:	4413      	add	r3, r2
 801308c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013090:	021b      	lsls	r3, r3, #8
 8013092:	68ba      	ldr	r2, [r7, #8]
 8013094:	4313      	orrs	r3, r2
 8013096:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013098:	683b      	ldr	r3, [r7, #0]
 801309a:	f003 0301 	and.w	r3, r3, #1
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d002      	beq.n	80130a8 <get_fat+0xba>
 80130a2:	68bb      	ldr	r3, [r7, #8]
 80130a4:	091b      	lsrs	r3, r3, #4
 80130a6:	e002      	b.n	80130ae <get_fat+0xc0>
 80130a8:	68bb      	ldr	r3, [r7, #8]
 80130aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80130ae:	617b      	str	r3, [r7, #20]
			break;
 80130b0:	e03f      	b.n	8013132 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80130b2:	693b      	ldr	r3, [r7, #16]
 80130b4:	6a1a      	ldr	r2, [r3, #32]
 80130b6:	683b      	ldr	r3, [r7, #0]
 80130b8:	0a1b      	lsrs	r3, r3, #8
 80130ba:	4413      	add	r3, r2
 80130bc:	4619      	mov	r1, r3
 80130be:	6938      	ldr	r0, [r7, #16]
 80130c0:	f7ff fedb 	bl	8012e7a <move_window>
 80130c4:	4603      	mov	r3, r0
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d130      	bne.n	801312c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80130ca:	693b      	ldr	r3, [r7, #16]
 80130cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80130d0:	683b      	ldr	r3, [r7, #0]
 80130d2:	005b      	lsls	r3, r3, #1
 80130d4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80130d8:	4413      	add	r3, r2
 80130da:	4618      	mov	r0, r3
 80130dc:	f7ff fd88 	bl	8012bf0 <ld_word>
 80130e0:	4603      	mov	r3, r0
 80130e2:	617b      	str	r3, [r7, #20]
			break;
 80130e4:	e025      	b.n	8013132 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80130e6:	693b      	ldr	r3, [r7, #16]
 80130e8:	6a1a      	ldr	r2, [r3, #32]
 80130ea:	683b      	ldr	r3, [r7, #0]
 80130ec:	09db      	lsrs	r3, r3, #7
 80130ee:	4413      	add	r3, r2
 80130f0:	4619      	mov	r1, r3
 80130f2:	6938      	ldr	r0, [r7, #16]
 80130f4:	f7ff fec1 	bl	8012e7a <move_window>
 80130f8:	4603      	mov	r3, r0
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d118      	bne.n	8013130 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80130fe:	693b      	ldr	r3, [r7, #16]
 8013100:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013104:	683b      	ldr	r3, [r7, #0]
 8013106:	009b      	lsls	r3, r3, #2
 8013108:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801310c:	4413      	add	r3, r2
 801310e:	4618      	mov	r0, r3
 8013110:	f7ff fd87 	bl	8012c22 <ld_dword>
 8013114:	4603      	mov	r3, r0
 8013116:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801311a:	617b      	str	r3, [r7, #20]
			break;
 801311c:	e009      	b.n	8013132 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801311e:	2301      	movs	r3, #1
 8013120:	617b      	str	r3, [r7, #20]
 8013122:	e006      	b.n	8013132 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013124:	bf00      	nop
 8013126:	e004      	b.n	8013132 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013128:	bf00      	nop
 801312a:	e002      	b.n	8013132 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801312c:	bf00      	nop
 801312e:	e000      	b.n	8013132 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013130:	bf00      	nop
		}
	}

	return val;
 8013132:	697b      	ldr	r3, [r7, #20]
}
 8013134:	4618      	mov	r0, r3
 8013136:	3718      	adds	r7, #24
 8013138:	46bd      	mov	sp, r7
 801313a:	bd80      	pop	{r7, pc}

0801313c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801313c:	b590      	push	{r4, r7, lr}
 801313e:	b089      	sub	sp, #36	@ 0x24
 8013140:	af00      	add	r7, sp, #0
 8013142:	60f8      	str	r0, [r7, #12]
 8013144:	60b9      	str	r1, [r7, #8]
 8013146:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8013148:	2302      	movs	r3, #2
 801314a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801314c:	68bb      	ldr	r3, [r7, #8]
 801314e:	2b01      	cmp	r3, #1
 8013150:	f240 80d9 	bls.w	8013306 <put_fat+0x1ca>
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	695b      	ldr	r3, [r3, #20]
 8013158:	68ba      	ldr	r2, [r7, #8]
 801315a:	429a      	cmp	r2, r3
 801315c:	f080 80d3 	bcs.w	8013306 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	781b      	ldrb	r3, [r3, #0]
 8013164:	2b03      	cmp	r3, #3
 8013166:	f000 8096 	beq.w	8013296 <put_fat+0x15a>
 801316a:	2b03      	cmp	r3, #3
 801316c:	f300 80cb 	bgt.w	8013306 <put_fat+0x1ca>
 8013170:	2b01      	cmp	r3, #1
 8013172:	d002      	beq.n	801317a <put_fat+0x3e>
 8013174:	2b02      	cmp	r3, #2
 8013176:	d06e      	beq.n	8013256 <put_fat+0x11a>
 8013178:	e0c5      	b.n	8013306 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801317a:	68bb      	ldr	r3, [r7, #8]
 801317c:	61bb      	str	r3, [r7, #24]
 801317e:	69bb      	ldr	r3, [r7, #24]
 8013180:	085b      	lsrs	r3, r3, #1
 8013182:	69ba      	ldr	r2, [r7, #24]
 8013184:	4413      	add	r3, r2
 8013186:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	6a1a      	ldr	r2, [r3, #32]
 801318c:	69bb      	ldr	r3, [r7, #24]
 801318e:	0a5b      	lsrs	r3, r3, #9
 8013190:	4413      	add	r3, r2
 8013192:	4619      	mov	r1, r3
 8013194:	68f8      	ldr	r0, [r7, #12]
 8013196:	f7ff fe70 	bl	8012e7a <move_window>
 801319a:	4603      	mov	r3, r0
 801319c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801319e:	7ffb      	ldrb	r3, [r7, #31]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	f040 80a9 	bne.w	80132f8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80131ac:	69bb      	ldr	r3, [r7, #24]
 80131ae:	1c59      	adds	r1, r3, #1
 80131b0:	61b9      	str	r1, [r7, #24]
 80131b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80131b6:	4413      	add	r3, r2
 80131b8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80131ba:	68bb      	ldr	r3, [r7, #8]
 80131bc:	f003 0301 	and.w	r3, r3, #1
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d00d      	beq.n	80131e0 <put_fat+0xa4>
 80131c4:	697b      	ldr	r3, [r7, #20]
 80131c6:	781b      	ldrb	r3, [r3, #0]
 80131c8:	b25b      	sxtb	r3, r3
 80131ca:	f003 030f 	and.w	r3, r3, #15
 80131ce:	b25a      	sxtb	r2, r3
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	b25b      	sxtb	r3, r3
 80131d4:	011b      	lsls	r3, r3, #4
 80131d6:	b25b      	sxtb	r3, r3
 80131d8:	4313      	orrs	r3, r2
 80131da:	b25b      	sxtb	r3, r3
 80131dc:	b2db      	uxtb	r3, r3
 80131de:	e001      	b.n	80131e4 <put_fat+0xa8>
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	b2db      	uxtb	r3, r3
 80131e4:	697a      	ldr	r2, [r7, #20]
 80131e6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	2201      	movs	r2, #1
 80131ec:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	6a1a      	ldr	r2, [r3, #32]
 80131f2:	69bb      	ldr	r3, [r7, #24]
 80131f4:	0a5b      	lsrs	r3, r3, #9
 80131f6:	4413      	add	r3, r2
 80131f8:	4619      	mov	r1, r3
 80131fa:	68f8      	ldr	r0, [r7, #12]
 80131fc:	f7ff fe3d 	bl	8012e7a <move_window>
 8013200:	4603      	mov	r3, r0
 8013202:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013204:	7ffb      	ldrb	r3, [r7, #31]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d178      	bne.n	80132fc <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013210:	69bb      	ldr	r3, [r7, #24]
 8013212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013216:	4413      	add	r3, r2
 8013218:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801321a:	68bb      	ldr	r3, [r7, #8]
 801321c:	f003 0301 	and.w	r3, r3, #1
 8013220:	2b00      	cmp	r3, #0
 8013222:	d003      	beq.n	801322c <put_fat+0xf0>
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	091b      	lsrs	r3, r3, #4
 8013228:	b2db      	uxtb	r3, r3
 801322a:	e00e      	b.n	801324a <put_fat+0x10e>
 801322c:	697b      	ldr	r3, [r7, #20]
 801322e:	781b      	ldrb	r3, [r3, #0]
 8013230:	b25b      	sxtb	r3, r3
 8013232:	f023 030f 	bic.w	r3, r3, #15
 8013236:	b25a      	sxtb	r2, r3
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	0a1b      	lsrs	r3, r3, #8
 801323c:	b25b      	sxtb	r3, r3
 801323e:	f003 030f 	and.w	r3, r3, #15
 8013242:	b25b      	sxtb	r3, r3
 8013244:	4313      	orrs	r3, r2
 8013246:	b25b      	sxtb	r3, r3
 8013248:	b2db      	uxtb	r3, r3
 801324a:	697a      	ldr	r2, [r7, #20]
 801324c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	2201      	movs	r2, #1
 8013252:	70da      	strb	r2, [r3, #3]
			break;
 8013254:	e057      	b.n	8013306 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	6a1a      	ldr	r2, [r3, #32]
 801325a:	68bb      	ldr	r3, [r7, #8]
 801325c:	0a1b      	lsrs	r3, r3, #8
 801325e:	4413      	add	r3, r2
 8013260:	4619      	mov	r1, r3
 8013262:	68f8      	ldr	r0, [r7, #12]
 8013264:	f7ff fe09 	bl	8012e7a <move_window>
 8013268:	4603      	mov	r3, r0
 801326a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801326c:	7ffb      	ldrb	r3, [r7, #31]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d146      	bne.n	8013300 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013278:	68bb      	ldr	r3, [r7, #8]
 801327a:	005b      	lsls	r3, r3, #1
 801327c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8013280:	4413      	add	r3, r2
 8013282:	687a      	ldr	r2, [r7, #4]
 8013284:	b292      	uxth	r2, r2
 8013286:	4611      	mov	r1, r2
 8013288:	4618      	mov	r0, r3
 801328a:	f7ff fced 	bl	8012c68 <st_word>
			fs->wflag = 1;
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	2201      	movs	r2, #1
 8013292:	70da      	strb	r2, [r3, #3]
			break;
 8013294:	e037      	b.n	8013306 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	6a1a      	ldr	r2, [r3, #32]
 801329a:	68bb      	ldr	r3, [r7, #8]
 801329c:	09db      	lsrs	r3, r3, #7
 801329e:	4413      	add	r3, r2
 80132a0:	4619      	mov	r1, r3
 80132a2:	68f8      	ldr	r0, [r7, #12]
 80132a4:	f7ff fde9 	bl	8012e7a <move_window>
 80132a8:	4603      	mov	r3, r0
 80132aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80132ac:	7ffb      	ldrb	r3, [r7, #31]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d128      	bne.n	8013304 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80132be:	68bb      	ldr	r3, [r7, #8]
 80132c0:	009b      	lsls	r3, r3, #2
 80132c2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80132c6:	4413      	add	r3, r2
 80132c8:	4618      	mov	r0, r3
 80132ca:	f7ff fcaa 	bl	8012c22 <ld_dword>
 80132ce:	4603      	mov	r3, r0
 80132d0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80132d4:	4323      	orrs	r3, r4
 80132d6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80132de:	68bb      	ldr	r3, [r7, #8]
 80132e0:	009b      	lsls	r3, r3, #2
 80132e2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80132e6:	4413      	add	r3, r2
 80132e8:	6879      	ldr	r1, [r7, #4]
 80132ea:	4618      	mov	r0, r3
 80132ec:	f7ff fcd7 	bl	8012c9e <st_dword>
			fs->wflag = 1;
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	2201      	movs	r2, #1
 80132f4:	70da      	strb	r2, [r3, #3]
			break;
 80132f6:	e006      	b.n	8013306 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80132f8:	bf00      	nop
 80132fa:	e004      	b.n	8013306 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80132fc:	bf00      	nop
 80132fe:	e002      	b.n	8013306 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8013300:	bf00      	nop
 8013302:	e000      	b.n	8013306 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8013304:	bf00      	nop
		}
	}
	return res;
 8013306:	7ffb      	ldrb	r3, [r7, #31]
}
 8013308:	4618      	mov	r0, r3
 801330a:	3724      	adds	r7, #36	@ 0x24
 801330c:	46bd      	mov	sp, r7
 801330e:	bd90      	pop	{r4, r7, pc}

08013310 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8013310:	b580      	push	{r7, lr}
 8013312:	b088      	sub	sp, #32
 8013314:	af00      	add	r7, sp, #0
 8013316:	60f8      	str	r0, [r7, #12]
 8013318:	60b9      	str	r1, [r7, #8]
 801331a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801331c:	2300      	movs	r3, #0
 801331e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013326:	68bb      	ldr	r3, [r7, #8]
 8013328:	2b01      	cmp	r3, #1
 801332a:	d904      	bls.n	8013336 <remove_chain+0x26>
 801332c:	69bb      	ldr	r3, [r7, #24]
 801332e:	695b      	ldr	r3, [r3, #20]
 8013330:	68ba      	ldr	r2, [r7, #8]
 8013332:	429a      	cmp	r2, r3
 8013334:	d301      	bcc.n	801333a <remove_chain+0x2a>
 8013336:	2302      	movs	r3, #2
 8013338:	e04b      	b.n	80133d2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d00c      	beq.n	801335a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8013340:	f04f 32ff 	mov.w	r2, #4294967295
 8013344:	6879      	ldr	r1, [r7, #4]
 8013346:	69b8      	ldr	r0, [r7, #24]
 8013348:	f7ff fef8 	bl	801313c <put_fat>
 801334c:	4603      	mov	r3, r0
 801334e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8013350:	7ffb      	ldrb	r3, [r7, #31]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d001      	beq.n	801335a <remove_chain+0x4a>
 8013356:	7ffb      	ldrb	r3, [r7, #31]
 8013358:	e03b      	b.n	80133d2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801335a:	68b9      	ldr	r1, [r7, #8]
 801335c:	68f8      	ldr	r0, [r7, #12]
 801335e:	f7ff fe46 	bl	8012fee <get_fat>
 8013362:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013364:	697b      	ldr	r3, [r7, #20]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d031      	beq.n	80133ce <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801336a:	697b      	ldr	r3, [r7, #20]
 801336c:	2b01      	cmp	r3, #1
 801336e:	d101      	bne.n	8013374 <remove_chain+0x64>
 8013370:	2302      	movs	r3, #2
 8013372:	e02e      	b.n	80133d2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013374:	697b      	ldr	r3, [r7, #20]
 8013376:	f1b3 3fff 	cmp.w	r3, #4294967295
 801337a:	d101      	bne.n	8013380 <remove_chain+0x70>
 801337c:	2301      	movs	r3, #1
 801337e:	e028      	b.n	80133d2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8013380:	2200      	movs	r2, #0
 8013382:	68b9      	ldr	r1, [r7, #8]
 8013384:	69b8      	ldr	r0, [r7, #24]
 8013386:	f7ff fed9 	bl	801313c <put_fat>
 801338a:	4603      	mov	r3, r0
 801338c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801338e:	7ffb      	ldrb	r3, [r7, #31]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d001      	beq.n	8013398 <remove_chain+0x88>
 8013394:	7ffb      	ldrb	r3, [r7, #31]
 8013396:	e01c      	b.n	80133d2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013398:	69bb      	ldr	r3, [r7, #24]
 801339a:	691a      	ldr	r2, [r3, #16]
 801339c:	69bb      	ldr	r3, [r7, #24]
 801339e:	695b      	ldr	r3, [r3, #20]
 80133a0:	3b02      	subs	r3, #2
 80133a2:	429a      	cmp	r2, r3
 80133a4:	d20b      	bcs.n	80133be <remove_chain+0xae>
			fs->free_clst++;
 80133a6:	69bb      	ldr	r3, [r7, #24]
 80133a8:	691b      	ldr	r3, [r3, #16]
 80133aa:	1c5a      	adds	r2, r3, #1
 80133ac:	69bb      	ldr	r3, [r7, #24]
 80133ae:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80133b0:	69bb      	ldr	r3, [r7, #24]
 80133b2:	791b      	ldrb	r3, [r3, #4]
 80133b4:	f043 0301 	orr.w	r3, r3, #1
 80133b8:	b2da      	uxtb	r2, r3
 80133ba:	69bb      	ldr	r3, [r7, #24]
 80133bc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80133be:	697b      	ldr	r3, [r7, #20]
 80133c0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80133c2:	69bb      	ldr	r3, [r7, #24]
 80133c4:	695b      	ldr	r3, [r3, #20]
 80133c6:	68ba      	ldr	r2, [r7, #8]
 80133c8:	429a      	cmp	r2, r3
 80133ca:	d3c6      	bcc.n	801335a <remove_chain+0x4a>
 80133cc:	e000      	b.n	80133d0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80133ce:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80133d0:	2300      	movs	r3, #0
}
 80133d2:	4618      	mov	r0, r3
 80133d4:	3720      	adds	r7, #32
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bd80      	pop	{r7, pc}

080133da <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80133da:	b580      	push	{r7, lr}
 80133dc:	b088      	sub	sp, #32
 80133de:	af00      	add	r7, sp, #0
 80133e0:	6078      	str	r0, [r7, #4]
 80133e2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80133ea:	683b      	ldr	r3, [r7, #0]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d10d      	bne.n	801340c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80133f0:	693b      	ldr	r3, [r7, #16]
 80133f2:	68db      	ldr	r3, [r3, #12]
 80133f4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80133f6:	69bb      	ldr	r3, [r7, #24]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d004      	beq.n	8013406 <create_chain+0x2c>
 80133fc:	693b      	ldr	r3, [r7, #16]
 80133fe:	695b      	ldr	r3, [r3, #20]
 8013400:	69ba      	ldr	r2, [r7, #24]
 8013402:	429a      	cmp	r2, r3
 8013404:	d31b      	bcc.n	801343e <create_chain+0x64>
 8013406:	2301      	movs	r3, #1
 8013408:	61bb      	str	r3, [r7, #24]
 801340a:	e018      	b.n	801343e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801340c:	6839      	ldr	r1, [r7, #0]
 801340e:	6878      	ldr	r0, [r7, #4]
 8013410:	f7ff fded 	bl	8012fee <get_fat>
 8013414:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	2b01      	cmp	r3, #1
 801341a:	d801      	bhi.n	8013420 <create_chain+0x46>
 801341c:	2301      	movs	r3, #1
 801341e:	e070      	b.n	8013502 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013426:	d101      	bne.n	801342c <create_chain+0x52>
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	e06a      	b.n	8013502 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801342c:	693b      	ldr	r3, [r7, #16]
 801342e:	695b      	ldr	r3, [r3, #20]
 8013430:	68fa      	ldr	r2, [r7, #12]
 8013432:	429a      	cmp	r2, r3
 8013434:	d201      	bcs.n	801343a <create_chain+0x60>
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	e063      	b.n	8013502 <create_chain+0x128>
		scl = clst;
 801343a:	683b      	ldr	r3, [r7, #0]
 801343c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801343e:	69bb      	ldr	r3, [r7, #24]
 8013440:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013442:	69fb      	ldr	r3, [r7, #28]
 8013444:	3301      	adds	r3, #1
 8013446:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013448:	693b      	ldr	r3, [r7, #16]
 801344a:	695b      	ldr	r3, [r3, #20]
 801344c:	69fa      	ldr	r2, [r7, #28]
 801344e:	429a      	cmp	r2, r3
 8013450:	d307      	bcc.n	8013462 <create_chain+0x88>
				ncl = 2;
 8013452:	2302      	movs	r3, #2
 8013454:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013456:	69fa      	ldr	r2, [r7, #28]
 8013458:	69bb      	ldr	r3, [r7, #24]
 801345a:	429a      	cmp	r2, r3
 801345c:	d901      	bls.n	8013462 <create_chain+0x88>
 801345e:	2300      	movs	r3, #0
 8013460:	e04f      	b.n	8013502 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013462:	69f9      	ldr	r1, [r7, #28]
 8013464:	6878      	ldr	r0, [r7, #4]
 8013466:	f7ff fdc2 	bl	8012fee <get_fat>
 801346a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d00e      	beq.n	8013490 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	2b01      	cmp	r3, #1
 8013476:	d003      	beq.n	8013480 <create_chain+0xa6>
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801347e:	d101      	bne.n	8013484 <create_chain+0xaa>
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	e03e      	b.n	8013502 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013484:	69fa      	ldr	r2, [r7, #28]
 8013486:	69bb      	ldr	r3, [r7, #24]
 8013488:	429a      	cmp	r2, r3
 801348a:	d1da      	bne.n	8013442 <create_chain+0x68>
 801348c:	2300      	movs	r3, #0
 801348e:	e038      	b.n	8013502 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8013490:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013492:	f04f 32ff 	mov.w	r2, #4294967295
 8013496:	69f9      	ldr	r1, [r7, #28]
 8013498:	6938      	ldr	r0, [r7, #16]
 801349a:	f7ff fe4f 	bl	801313c <put_fat>
 801349e:	4603      	mov	r3, r0
 80134a0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80134a2:	7dfb      	ldrb	r3, [r7, #23]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d109      	bne.n	80134bc <create_chain+0xe2>
 80134a8:	683b      	ldr	r3, [r7, #0]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d006      	beq.n	80134bc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80134ae:	69fa      	ldr	r2, [r7, #28]
 80134b0:	6839      	ldr	r1, [r7, #0]
 80134b2:	6938      	ldr	r0, [r7, #16]
 80134b4:	f7ff fe42 	bl	801313c <put_fat>
 80134b8:	4603      	mov	r3, r0
 80134ba:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80134bc:	7dfb      	ldrb	r3, [r7, #23]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d116      	bne.n	80134f0 <create_chain+0x116>
		fs->last_clst = ncl;
 80134c2:	693b      	ldr	r3, [r7, #16]
 80134c4:	69fa      	ldr	r2, [r7, #28]
 80134c6:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80134c8:	693b      	ldr	r3, [r7, #16]
 80134ca:	691a      	ldr	r2, [r3, #16]
 80134cc:	693b      	ldr	r3, [r7, #16]
 80134ce:	695b      	ldr	r3, [r3, #20]
 80134d0:	3b02      	subs	r3, #2
 80134d2:	429a      	cmp	r2, r3
 80134d4:	d804      	bhi.n	80134e0 <create_chain+0x106>
 80134d6:	693b      	ldr	r3, [r7, #16]
 80134d8:	691b      	ldr	r3, [r3, #16]
 80134da:	1e5a      	subs	r2, r3, #1
 80134dc:	693b      	ldr	r3, [r7, #16]
 80134de:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80134e0:	693b      	ldr	r3, [r7, #16]
 80134e2:	791b      	ldrb	r3, [r3, #4]
 80134e4:	f043 0301 	orr.w	r3, r3, #1
 80134e8:	b2da      	uxtb	r2, r3
 80134ea:	693b      	ldr	r3, [r7, #16]
 80134ec:	711a      	strb	r2, [r3, #4]
 80134ee:	e007      	b.n	8013500 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80134f0:	7dfb      	ldrb	r3, [r7, #23]
 80134f2:	2b01      	cmp	r3, #1
 80134f4:	d102      	bne.n	80134fc <create_chain+0x122>
 80134f6:	f04f 33ff 	mov.w	r3, #4294967295
 80134fa:	e000      	b.n	80134fe <create_chain+0x124>
 80134fc:	2301      	movs	r3, #1
 80134fe:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8013500:	69fb      	ldr	r3, [r7, #28]
}
 8013502:	4618      	mov	r0, r3
 8013504:	3720      	adds	r7, #32
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}

0801350a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801350a:	b480      	push	{r7}
 801350c:	b087      	sub	sp, #28
 801350e:	af00      	add	r7, sp, #0
 8013510:	6078      	str	r0, [r7, #4]
 8013512:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801351e:	3304      	adds	r3, #4
 8013520:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013522:	683b      	ldr	r3, [r7, #0]
 8013524:	0a5b      	lsrs	r3, r3, #9
 8013526:	68fa      	ldr	r2, [r7, #12]
 8013528:	8952      	ldrh	r2, [r2, #10]
 801352a:	fbb3 f3f2 	udiv	r3, r3, r2
 801352e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013530:	693b      	ldr	r3, [r7, #16]
 8013532:	1d1a      	adds	r2, r3, #4
 8013534:	613a      	str	r2, [r7, #16]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801353a:	68bb      	ldr	r3, [r7, #8]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d101      	bne.n	8013544 <clmt_clust+0x3a>
 8013540:	2300      	movs	r3, #0
 8013542:	e010      	b.n	8013566 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8013544:	697a      	ldr	r2, [r7, #20]
 8013546:	68bb      	ldr	r3, [r7, #8]
 8013548:	429a      	cmp	r2, r3
 801354a:	d307      	bcc.n	801355c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801354c:	697a      	ldr	r2, [r7, #20]
 801354e:	68bb      	ldr	r3, [r7, #8]
 8013550:	1ad3      	subs	r3, r2, r3
 8013552:	617b      	str	r3, [r7, #20]
 8013554:	693b      	ldr	r3, [r7, #16]
 8013556:	3304      	adds	r3, #4
 8013558:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801355a:	e7e9      	b.n	8013530 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801355c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801355e:	693b      	ldr	r3, [r7, #16]
 8013560:	681a      	ldr	r2, [r3, #0]
 8013562:	697b      	ldr	r3, [r7, #20]
 8013564:	4413      	add	r3, r2
}
 8013566:	4618      	mov	r0, r3
 8013568:	371c      	adds	r7, #28
 801356a:	46bd      	mov	sp, r7
 801356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013570:	4770      	bx	lr

08013572 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013572:	b580      	push	{r7, lr}
 8013574:	b086      	sub	sp, #24
 8013576:	af00      	add	r7, sp, #0
 8013578:	6078      	str	r0, [r7, #4]
 801357a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013582:	683b      	ldr	r3, [r7, #0]
 8013584:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8013588:	d204      	bcs.n	8013594 <dir_sdi+0x22>
 801358a:	683b      	ldr	r3, [r7, #0]
 801358c:	f003 031f 	and.w	r3, r3, #31
 8013590:	2b00      	cmp	r3, #0
 8013592:	d001      	beq.n	8013598 <dir_sdi+0x26>
		return FR_INT_ERR;
 8013594:	2302      	movs	r3, #2
 8013596:	e063      	b.n	8013660 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	683a      	ldr	r2, [r7, #0]
 801359c:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	689b      	ldr	r3, [r3, #8]
 80135a2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80135a4:	697b      	ldr	r3, [r7, #20]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d106      	bne.n	80135b8 <dir_sdi+0x46>
 80135aa:	693b      	ldr	r3, [r7, #16]
 80135ac:	781b      	ldrb	r3, [r3, #0]
 80135ae:	2b02      	cmp	r3, #2
 80135b0:	d902      	bls.n	80135b8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80135b2:	693b      	ldr	r3, [r7, #16]
 80135b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80135b6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80135b8:	697b      	ldr	r3, [r7, #20]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d10c      	bne.n	80135d8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80135be:	683b      	ldr	r3, [r7, #0]
 80135c0:	095b      	lsrs	r3, r3, #5
 80135c2:	693a      	ldr	r2, [r7, #16]
 80135c4:	8912      	ldrh	r2, [r2, #8]
 80135c6:	4293      	cmp	r3, r2
 80135c8:	d301      	bcc.n	80135ce <dir_sdi+0x5c>
 80135ca:	2302      	movs	r3, #2
 80135cc:	e048      	b.n	8013660 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80135ce:	693b      	ldr	r3, [r7, #16]
 80135d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	619a      	str	r2, [r3, #24]
 80135d6:	e029      	b.n	801362c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80135d8:	693b      	ldr	r3, [r7, #16]
 80135da:	895b      	ldrh	r3, [r3, #10]
 80135dc:	025b      	lsls	r3, r3, #9
 80135de:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80135e0:	e019      	b.n	8013616 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	6979      	ldr	r1, [r7, #20]
 80135e6:	4618      	mov	r0, r3
 80135e8:	f7ff fd01 	bl	8012fee <get_fat>
 80135ec:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80135ee:	697b      	ldr	r3, [r7, #20]
 80135f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135f4:	d101      	bne.n	80135fa <dir_sdi+0x88>
 80135f6:	2301      	movs	r3, #1
 80135f8:	e032      	b.n	8013660 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80135fa:	697b      	ldr	r3, [r7, #20]
 80135fc:	2b01      	cmp	r3, #1
 80135fe:	d904      	bls.n	801360a <dir_sdi+0x98>
 8013600:	693b      	ldr	r3, [r7, #16]
 8013602:	695b      	ldr	r3, [r3, #20]
 8013604:	697a      	ldr	r2, [r7, #20]
 8013606:	429a      	cmp	r2, r3
 8013608:	d301      	bcc.n	801360e <dir_sdi+0x9c>
 801360a:	2302      	movs	r3, #2
 801360c:	e028      	b.n	8013660 <dir_sdi+0xee>
			ofs -= csz;
 801360e:	683a      	ldr	r2, [r7, #0]
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	1ad3      	subs	r3, r2, r3
 8013614:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013616:	683a      	ldr	r2, [r7, #0]
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	429a      	cmp	r2, r3
 801361c:	d2e1      	bcs.n	80135e2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801361e:	6979      	ldr	r1, [r7, #20]
 8013620:	6938      	ldr	r0, [r7, #16]
 8013622:	f7ff fcc5 	bl	8012fb0 <clust2sect>
 8013626:	4602      	mov	r2, r0
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	697a      	ldr	r2, [r7, #20]
 8013630:	615a      	str	r2, [r3, #20]
	if (!dp->sect) return FR_INT_ERR;
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	699b      	ldr	r3, [r3, #24]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d101      	bne.n	801363e <dir_sdi+0xcc>
 801363a:	2302      	movs	r3, #2
 801363c:	e010      	b.n	8013660 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	699a      	ldr	r2, [r3, #24]
 8013642:	683b      	ldr	r3, [r7, #0]
 8013644:	0a5b      	lsrs	r3, r3, #9
 8013646:	441a      	add	r2, r3
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801364c:	693b      	ldr	r3, [r7, #16]
 801364e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013652:	683b      	ldr	r3, [r7, #0]
 8013654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013658:	441a      	add	r2, r3
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	61da      	str	r2, [r3, #28]

	return FR_OK;
 801365e:	2300      	movs	r3, #0
}
 8013660:	4618      	mov	r0, r3
 8013662:	3718      	adds	r7, #24
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}

08013668 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b086      	sub	sp, #24
 801366c:	af00      	add	r7, sp, #0
 801366e:	6078      	str	r0, [r7, #4]
 8013670:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	691b      	ldr	r3, [r3, #16]
 801367c:	3320      	adds	r3, #32
 801367e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	699b      	ldr	r3, [r3, #24]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d003      	beq.n	8013690 <dir_next+0x28>
 8013688:	68bb      	ldr	r3, [r7, #8]
 801368a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801368e:	d301      	bcc.n	8013694 <dir_next+0x2c>
 8013690:	2304      	movs	r3, #4
 8013692:	e0aa      	b.n	80137ea <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013694:	68bb      	ldr	r3, [r7, #8]
 8013696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801369a:	2b00      	cmp	r3, #0
 801369c:	f040 8098 	bne.w	80137d0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	699b      	ldr	r3, [r3, #24]
 80136a4:	1c5a      	adds	r2, r3, #1
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	619a      	str	r2, [r3, #24]

		if (!dp->clust) {		/* Static table */
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	695b      	ldr	r3, [r3, #20]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d10b      	bne.n	80136ca <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80136b2:	68bb      	ldr	r3, [r7, #8]
 80136b4:	095b      	lsrs	r3, r3, #5
 80136b6:	68fa      	ldr	r2, [r7, #12]
 80136b8:	8912      	ldrh	r2, [r2, #8]
 80136ba:	4293      	cmp	r3, r2
 80136bc:	f0c0 8088 	bcc.w	80137d0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	2200      	movs	r2, #0
 80136c4:	619a      	str	r2, [r3, #24]
 80136c6:	2304      	movs	r3, #4
 80136c8:	e08f      	b.n	80137ea <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80136ca:	68bb      	ldr	r3, [r7, #8]
 80136cc:	0a5b      	lsrs	r3, r3, #9
 80136ce:	68fa      	ldr	r2, [r7, #12]
 80136d0:	8952      	ldrh	r2, [r2, #10]
 80136d2:	3a01      	subs	r2, #1
 80136d4:	4013      	ands	r3, r2
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d17a      	bne.n	80137d0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80136da:	687a      	ldr	r2, [r7, #4]
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	695b      	ldr	r3, [r3, #20]
 80136e0:	4619      	mov	r1, r3
 80136e2:	4610      	mov	r0, r2
 80136e4:	f7ff fc83 	bl	8012fee <get_fat>
 80136e8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80136ea:	697b      	ldr	r3, [r7, #20]
 80136ec:	2b01      	cmp	r3, #1
 80136ee:	d801      	bhi.n	80136f4 <dir_next+0x8c>
 80136f0:	2302      	movs	r3, #2
 80136f2:	e07a      	b.n	80137ea <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80136f4:	697b      	ldr	r3, [r7, #20]
 80136f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136fa:	d101      	bne.n	8013700 <dir_next+0x98>
 80136fc:	2301      	movs	r3, #1
 80136fe:	e074      	b.n	80137ea <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	695b      	ldr	r3, [r3, #20]
 8013704:	697a      	ldr	r2, [r7, #20]
 8013706:	429a      	cmp	r2, r3
 8013708:	d358      	bcc.n	80137bc <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801370a:	683b      	ldr	r3, [r7, #0]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d104      	bne.n	801371a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	2200      	movs	r2, #0
 8013714:	619a      	str	r2, [r3, #24]
 8013716:	2304      	movs	r3, #4
 8013718:	e067      	b.n	80137ea <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801371a:	687a      	ldr	r2, [r7, #4]
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	695b      	ldr	r3, [r3, #20]
 8013720:	4619      	mov	r1, r3
 8013722:	4610      	mov	r0, r2
 8013724:	f7ff fe59 	bl	80133da <create_chain>
 8013728:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801372a:	697b      	ldr	r3, [r7, #20]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d101      	bne.n	8013734 <dir_next+0xcc>
 8013730:	2307      	movs	r3, #7
 8013732:	e05a      	b.n	80137ea <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013734:	697b      	ldr	r3, [r7, #20]
 8013736:	2b01      	cmp	r3, #1
 8013738:	d101      	bne.n	801373e <dir_next+0xd6>
 801373a:	2302      	movs	r3, #2
 801373c:	e055      	b.n	80137ea <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801373e:	697b      	ldr	r3, [r7, #20]
 8013740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013744:	d101      	bne.n	801374a <dir_next+0xe2>
 8013746:	2301      	movs	r3, #1
 8013748:	e04f      	b.n	80137ea <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801374a:	68f8      	ldr	r0, [r7, #12]
 801374c:	f7ff fb51 	bl	8012df2 <sync_window>
 8013750:	4603      	mov	r3, r0
 8013752:	2b00      	cmp	r3, #0
 8013754:	d001      	beq.n	801375a <dir_next+0xf2>
 8013756:	2301      	movs	r3, #1
 8013758:	e047      	b.n	80137ea <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	3330      	adds	r3, #48	@ 0x30
 801375e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013762:	2100      	movs	r1, #0
 8013764:	4618      	mov	r0, r3
 8013766:	f7ff fae7 	bl	8012d38 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801376a:	2300      	movs	r3, #0
 801376c:	613b      	str	r3, [r7, #16]
 801376e:	6979      	ldr	r1, [r7, #20]
 8013770:	68f8      	ldr	r0, [r7, #12]
 8013772:	f7ff fc1d 	bl	8012fb0 <clust2sect>
 8013776:	4602      	mov	r2, r0
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801377c:	e012      	b.n	80137a4 <dir_next+0x13c>
						fs->wflag = 1;
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	2201      	movs	r2, #1
 8013782:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013784:	68f8      	ldr	r0, [r7, #12]
 8013786:	f7ff fb34 	bl	8012df2 <sync_window>
 801378a:	4603      	mov	r3, r0
 801378c:	2b00      	cmp	r3, #0
 801378e:	d001      	beq.n	8013794 <dir_next+0x12c>
 8013790:	2301      	movs	r3, #1
 8013792:	e02a      	b.n	80137ea <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013794:	693b      	ldr	r3, [r7, #16]
 8013796:	3301      	adds	r3, #1
 8013798:	613b      	str	r3, [r7, #16]
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801379e:	1c5a      	adds	r2, r3, #1
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	895b      	ldrh	r3, [r3, #10]
 80137a8:	461a      	mov	r2, r3
 80137aa:	693b      	ldr	r3, [r7, #16]
 80137ac:	4293      	cmp	r3, r2
 80137ae:	d3e6      	bcc.n	801377e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80137b4:	693b      	ldr	r3, [r7, #16]
 80137b6:	1ad2      	subs	r2, r2, r3
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	697a      	ldr	r2, [r7, #20]
 80137c0:	615a      	str	r2, [r3, #20]
				dp->sect = clust2sect(fs, clst);
 80137c2:	6979      	ldr	r1, [r7, #20]
 80137c4:	68f8      	ldr	r0, [r7, #12]
 80137c6:	f7ff fbf3 	bl	8012fb0 <clust2sect>
 80137ca:	4602      	mov	r2, r0
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	68ba      	ldr	r2, [r7, #8]
 80137d4:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80137dc:	68bb      	ldr	r3, [r7, #8]
 80137de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80137e2:	441a      	add	r2, r3
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	61da      	str	r2, [r3, #28]

	return FR_OK;
 80137e8:	2300      	movs	r3, #0
}
 80137ea:	4618      	mov	r0, r3
 80137ec:	3718      	adds	r7, #24
 80137ee:	46bd      	mov	sp, r7
 80137f0:	bd80      	pop	{r7, pc}

080137f2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80137f2:	b580      	push	{r7, lr}
 80137f4:	b086      	sub	sp, #24
 80137f6:	af00      	add	r7, sp, #0
 80137f8:	6078      	str	r0, [r7, #4]
 80137fa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013802:	2100      	movs	r1, #0
 8013804:	6878      	ldr	r0, [r7, #4]
 8013806:	f7ff feb4 	bl	8013572 <dir_sdi>
 801380a:	4603      	mov	r3, r0
 801380c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801380e:	7dfb      	ldrb	r3, [r7, #23]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d12b      	bne.n	801386c <dir_alloc+0x7a>
		n = 0;
 8013814:	2300      	movs	r3, #0
 8013816:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	699b      	ldr	r3, [r3, #24]
 801381c:	4619      	mov	r1, r3
 801381e:	68f8      	ldr	r0, [r7, #12]
 8013820:	f7ff fb2b 	bl	8012e7a <move_window>
 8013824:	4603      	mov	r3, r0
 8013826:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013828:	7dfb      	ldrb	r3, [r7, #23]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d11d      	bne.n	801386a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	69db      	ldr	r3, [r3, #28]
 8013832:	781b      	ldrb	r3, [r3, #0]
 8013834:	2be5      	cmp	r3, #229	@ 0xe5
 8013836:	d004      	beq.n	8013842 <dir_alloc+0x50>
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	69db      	ldr	r3, [r3, #28]
 801383c:	781b      	ldrb	r3, [r3, #0]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d107      	bne.n	8013852 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013842:	693b      	ldr	r3, [r7, #16]
 8013844:	3301      	adds	r3, #1
 8013846:	613b      	str	r3, [r7, #16]
 8013848:	693a      	ldr	r2, [r7, #16]
 801384a:	683b      	ldr	r3, [r7, #0]
 801384c:	429a      	cmp	r2, r3
 801384e:	d102      	bne.n	8013856 <dir_alloc+0x64>
 8013850:	e00c      	b.n	801386c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013852:	2300      	movs	r3, #0
 8013854:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013856:	2101      	movs	r1, #1
 8013858:	6878      	ldr	r0, [r7, #4]
 801385a:	f7ff ff05 	bl	8013668 <dir_next>
 801385e:	4603      	mov	r3, r0
 8013860:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013862:	7dfb      	ldrb	r3, [r7, #23]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d0d7      	beq.n	8013818 <dir_alloc+0x26>
 8013868:	e000      	b.n	801386c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801386a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801386c:	7dfb      	ldrb	r3, [r7, #23]
 801386e:	2b04      	cmp	r3, #4
 8013870:	d101      	bne.n	8013876 <dir_alloc+0x84>
 8013872:	2307      	movs	r3, #7
 8013874:	75fb      	strb	r3, [r7, #23]
	return res;
 8013876:	7dfb      	ldrb	r3, [r7, #23]
}
 8013878:	4618      	mov	r0, r3
 801387a:	3718      	adds	r7, #24
 801387c:	46bd      	mov	sp, r7
 801387e:	bd80      	pop	{r7, pc}

08013880 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013880:	b580      	push	{r7, lr}
 8013882:	b084      	sub	sp, #16
 8013884:	af00      	add	r7, sp, #0
 8013886:	6078      	str	r0, [r7, #4]
 8013888:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801388a:	683b      	ldr	r3, [r7, #0]
 801388c:	331a      	adds	r3, #26
 801388e:	4618      	mov	r0, r3
 8013890:	f7ff f9ae 	bl	8012bf0 <ld_word>
 8013894:	4603      	mov	r3, r0
 8013896:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	781b      	ldrb	r3, [r3, #0]
 801389c:	2b03      	cmp	r3, #3
 801389e:	d109      	bne.n	80138b4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80138a0:	683b      	ldr	r3, [r7, #0]
 80138a2:	3314      	adds	r3, #20
 80138a4:	4618      	mov	r0, r3
 80138a6:	f7ff f9a3 	bl	8012bf0 <ld_word>
 80138aa:	4603      	mov	r3, r0
 80138ac:	041b      	lsls	r3, r3, #16
 80138ae:	68fa      	ldr	r2, [r7, #12]
 80138b0:	4313      	orrs	r3, r2
 80138b2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80138b4:	68fb      	ldr	r3, [r7, #12]
}
 80138b6:	4618      	mov	r0, r3
 80138b8:	3710      	adds	r7, #16
 80138ba:	46bd      	mov	sp, r7
 80138bc:	bd80      	pop	{r7, pc}

080138be <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80138be:	b580      	push	{r7, lr}
 80138c0:	b084      	sub	sp, #16
 80138c2:	af00      	add	r7, sp, #0
 80138c4:	60f8      	str	r0, [r7, #12]
 80138c6:	60b9      	str	r1, [r7, #8]
 80138c8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80138ca:	68bb      	ldr	r3, [r7, #8]
 80138cc:	331a      	adds	r3, #26
 80138ce:	687a      	ldr	r2, [r7, #4]
 80138d0:	b292      	uxth	r2, r2
 80138d2:	4611      	mov	r1, r2
 80138d4:	4618      	mov	r0, r3
 80138d6:	f7ff f9c7 	bl	8012c68 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	781b      	ldrb	r3, [r3, #0]
 80138de:	2b03      	cmp	r3, #3
 80138e0:	d109      	bne.n	80138f6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80138e2:	68bb      	ldr	r3, [r7, #8]
 80138e4:	f103 0214 	add.w	r2, r3, #20
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	0c1b      	lsrs	r3, r3, #16
 80138ec:	b29b      	uxth	r3, r3
 80138ee:	4619      	mov	r1, r3
 80138f0:	4610      	mov	r0, r2
 80138f2:	f7ff f9b9 	bl	8012c68 <st_word>
	}
}
 80138f6:	bf00      	nop
 80138f8:	3710      	adds	r7, #16
 80138fa:	46bd      	mov	sp, r7
 80138fc:	bd80      	pop	{r7, pc}

080138fe <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80138fe:	b580      	push	{r7, lr}
 8013900:	b086      	sub	sp, #24
 8013902:	af00      	add	r7, sp, #0
 8013904:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801390c:	2100      	movs	r1, #0
 801390e:	6878      	ldr	r0, [r7, #4]
 8013910:	f7ff fe2f 	bl	8013572 <dir_sdi>
 8013914:	4603      	mov	r3, r0
 8013916:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8013918:	7dfb      	ldrb	r3, [r7, #23]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d001      	beq.n	8013922 <dir_find+0x24>
 801391e:	7dfb      	ldrb	r3, [r7, #23]
 8013920:	e03e      	b.n	80139a0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	699b      	ldr	r3, [r3, #24]
 8013926:	4619      	mov	r1, r3
 8013928:	6938      	ldr	r0, [r7, #16]
 801392a:	f7ff faa6 	bl	8012e7a <move_window>
 801392e:	4603      	mov	r3, r0
 8013930:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013932:	7dfb      	ldrb	r3, [r7, #23]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d12f      	bne.n	8013998 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	69db      	ldr	r3, [r3, #28]
 801393c:	781b      	ldrb	r3, [r3, #0]
 801393e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013940:	7bfb      	ldrb	r3, [r7, #15]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d102      	bne.n	801394c <dir_find+0x4e>
 8013946:	2304      	movs	r3, #4
 8013948:	75fb      	strb	r3, [r7, #23]
 801394a:	e028      	b.n	801399e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	69db      	ldr	r3, [r3, #28]
 8013950:	330b      	adds	r3, #11
 8013952:	781b      	ldrb	r3, [r3, #0]
 8013954:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013958:	b2da      	uxtb	r2, r3
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	69db      	ldr	r3, [r3, #28]
 8013962:	330b      	adds	r3, #11
 8013964:	781b      	ldrb	r3, [r3, #0]
 8013966:	f003 0308 	and.w	r3, r3, #8
 801396a:	2b00      	cmp	r3, #0
 801396c:	d10a      	bne.n	8013984 <dir_find+0x86>
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	69d8      	ldr	r0, [r3, #28]
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	3320      	adds	r3, #32
 8013976:	220b      	movs	r2, #11
 8013978:	4619      	mov	r1, r3
 801397a:	f7ff f9f8 	bl	8012d6e <mem_cmp>
 801397e:	4603      	mov	r3, r0
 8013980:	2b00      	cmp	r3, #0
 8013982:	d00b      	beq.n	801399c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8013984:	2100      	movs	r1, #0
 8013986:	6878      	ldr	r0, [r7, #4]
 8013988:	f7ff fe6e 	bl	8013668 <dir_next>
 801398c:	4603      	mov	r3, r0
 801398e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013990:	7dfb      	ldrb	r3, [r7, #23]
 8013992:	2b00      	cmp	r3, #0
 8013994:	d0c5      	beq.n	8013922 <dir_find+0x24>
 8013996:	e002      	b.n	801399e <dir_find+0xa0>
		if (res != FR_OK) break;
 8013998:	bf00      	nop
 801399a:	e000      	b.n	801399e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801399c:	bf00      	nop

	return res;
 801399e:	7dfb      	ldrb	r3, [r7, #23]
}
 80139a0:	4618      	mov	r0, r3
 80139a2:	3718      	adds	r7, #24
 80139a4:	46bd      	mov	sp, r7
 80139a6:	bd80      	pop	{r7, pc}

080139a8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b084      	sub	sp, #16
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80139b6:	2101      	movs	r1, #1
 80139b8:	6878      	ldr	r0, [r7, #4]
 80139ba:	f7ff ff1a 	bl	80137f2 <dir_alloc>
 80139be:	4603      	mov	r3, r0
 80139c0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80139c2:	7bfb      	ldrb	r3, [r7, #15]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d11c      	bne.n	8013a02 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	699b      	ldr	r3, [r3, #24]
 80139cc:	4619      	mov	r1, r3
 80139ce:	68b8      	ldr	r0, [r7, #8]
 80139d0:	f7ff fa53 	bl	8012e7a <move_window>
 80139d4:	4603      	mov	r3, r0
 80139d6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80139d8:	7bfb      	ldrb	r3, [r7, #15]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d111      	bne.n	8013a02 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	69db      	ldr	r3, [r3, #28]
 80139e2:	2220      	movs	r2, #32
 80139e4:	2100      	movs	r1, #0
 80139e6:	4618      	mov	r0, r3
 80139e8:	f7ff f9a6 	bl	8012d38 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	69d8      	ldr	r0, [r3, #28]
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	3320      	adds	r3, #32
 80139f4:	220b      	movs	r2, #11
 80139f6:	4619      	mov	r1, r3
 80139f8:	f7ff f97d 	bl	8012cf6 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80139fc:	68bb      	ldr	r3, [r7, #8]
 80139fe:	2201      	movs	r2, #1
 8013a00:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8013a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a04:	4618      	mov	r0, r3
 8013a06:	3710      	adds	r7, #16
 8013a08:	46bd      	mov	sp, r7
 8013a0a:	bd80      	pop	{r7, pc}

08013a0c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013a0c:	b580      	push	{r7, lr}
 8013a0e:	b088      	sub	sp, #32
 8013a10:	af00      	add	r7, sp, #0
 8013a12:	6078      	str	r0, [r7, #4]
 8013a14:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8013a16:	683b      	ldr	r3, [r7, #0]
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	60fb      	str	r3, [r7, #12]
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	3320      	adds	r3, #32
 8013a20:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8013a22:	220b      	movs	r2, #11
 8013a24:	2120      	movs	r1, #32
 8013a26:	68b8      	ldr	r0, [r7, #8]
 8013a28:	f7ff f986 	bl	8012d38 <mem_set>
	si = i = 0; ni = 8;
 8013a2c:	2300      	movs	r3, #0
 8013a2e:	613b      	str	r3, [r7, #16]
 8013a30:	693b      	ldr	r3, [r7, #16]
 8013a32:	61fb      	str	r3, [r7, #28]
 8013a34:	2308      	movs	r3, #8
 8013a36:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8013a38:	69fb      	ldr	r3, [r7, #28]
 8013a3a:	1c5a      	adds	r2, r3, #1
 8013a3c:	61fa      	str	r2, [r7, #28]
 8013a3e:	68fa      	ldr	r2, [r7, #12]
 8013a40:	4413      	add	r3, r2
 8013a42:	781b      	ldrb	r3, [r3, #0]
 8013a44:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013a46:	7efb      	ldrb	r3, [r7, #27]
 8013a48:	2b20      	cmp	r3, #32
 8013a4a:	d94e      	bls.n	8013aea <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8013a4c:	7efb      	ldrb	r3, [r7, #27]
 8013a4e:	2b2f      	cmp	r3, #47	@ 0x2f
 8013a50:	d006      	beq.n	8013a60 <create_name+0x54>
 8013a52:	7efb      	ldrb	r3, [r7, #27]
 8013a54:	2b5c      	cmp	r3, #92	@ 0x5c
 8013a56:	d110      	bne.n	8013a7a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013a58:	e002      	b.n	8013a60 <create_name+0x54>
 8013a5a:	69fb      	ldr	r3, [r7, #28]
 8013a5c:	3301      	adds	r3, #1
 8013a5e:	61fb      	str	r3, [r7, #28]
 8013a60:	68fa      	ldr	r2, [r7, #12]
 8013a62:	69fb      	ldr	r3, [r7, #28]
 8013a64:	4413      	add	r3, r2
 8013a66:	781b      	ldrb	r3, [r3, #0]
 8013a68:	2b2f      	cmp	r3, #47	@ 0x2f
 8013a6a:	d0f6      	beq.n	8013a5a <create_name+0x4e>
 8013a6c:	68fa      	ldr	r2, [r7, #12]
 8013a6e:	69fb      	ldr	r3, [r7, #28]
 8013a70:	4413      	add	r3, r2
 8013a72:	781b      	ldrb	r3, [r3, #0]
 8013a74:	2b5c      	cmp	r3, #92	@ 0x5c
 8013a76:	d0f0      	beq.n	8013a5a <create_name+0x4e>
			break;
 8013a78:	e038      	b.n	8013aec <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8013a7a:	7efb      	ldrb	r3, [r7, #27]
 8013a7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8013a7e:	d003      	beq.n	8013a88 <create_name+0x7c>
 8013a80:	693a      	ldr	r2, [r7, #16]
 8013a82:	697b      	ldr	r3, [r7, #20]
 8013a84:	429a      	cmp	r2, r3
 8013a86:	d30c      	bcc.n	8013aa2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8013a88:	697b      	ldr	r3, [r7, #20]
 8013a8a:	2b0b      	cmp	r3, #11
 8013a8c:	d002      	beq.n	8013a94 <create_name+0x88>
 8013a8e:	7efb      	ldrb	r3, [r7, #27]
 8013a90:	2b2e      	cmp	r3, #46	@ 0x2e
 8013a92:	d001      	beq.n	8013a98 <create_name+0x8c>
 8013a94:	2306      	movs	r3, #6
 8013a96:	e044      	b.n	8013b22 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8013a98:	2308      	movs	r3, #8
 8013a9a:	613b      	str	r3, [r7, #16]
 8013a9c:	230b      	movs	r3, #11
 8013a9e:	617b      	str	r3, [r7, #20]
			continue;
 8013aa0:	e022      	b.n	8013ae8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8013aa2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	da04      	bge.n	8013ab4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8013aaa:	7efb      	ldrb	r3, [r7, #27]
 8013aac:	3b80      	subs	r3, #128	@ 0x80
 8013aae:	4a1f      	ldr	r2, [pc, #124]	@ (8013b2c <create_name+0x120>)
 8013ab0:	5cd3      	ldrb	r3, [r2, r3]
 8013ab2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8013ab4:	7efb      	ldrb	r3, [r7, #27]
 8013ab6:	4619      	mov	r1, r3
 8013ab8:	481d      	ldr	r0, [pc, #116]	@ (8013b30 <create_name+0x124>)
 8013aba:	f7ff f97f 	bl	8012dbc <chk_chr>
 8013abe:	4603      	mov	r3, r0
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d001      	beq.n	8013ac8 <create_name+0xbc>
 8013ac4:	2306      	movs	r3, #6
 8013ac6:	e02c      	b.n	8013b22 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8013ac8:	7efb      	ldrb	r3, [r7, #27]
 8013aca:	2b60      	cmp	r3, #96	@ 0x60
 8013acc:	d905      	bls.n	8013ada <create_name+0xce>
 8013ace:	7efb      	ldrb	r3, [r7, #27]
 8013ad0:	2b7a      	cmp	r3, #122	@ 0x7a
 8013ad2:	d802      	bhi.n	8013ada <create_name+0xce>
 8013ad4:	7efb      	ldrb	r3, [r7, #27]
 8013ad6:	3b20      	subs	r3, #32
 8013ad8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8013ada:	693b      	ldr	r3, [r7, #16]
 8013adc:	1c5a      	adds	r2, r3, #1
 8013ade:	613a      	str	r2, [r7, #16]
 8013ae0:	68ba      	ldr	r2, [r7, #8]
 8013ae2:	4413      	add	r3, r2
 8013ae4:	7efa      	ldrb	r2, [r7, #27]
 8013ae6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8013ae8:	e7a6      	b.n	8013a38 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013aea:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8013aec:	68fa      	ldr	r2, [r7, #12]
 8013aee:	69fb      	ldr	r3, [r7, #28]
 8013af0:	441a      	add	r2, r3
 8013af2:	683b      	ldr	r3, [r7, #0]
 8013af4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8013af6:	693b      	ldr	r3, [r7, #16]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d101      	bne.n	8013b00 <create_name+0xf4>
 8013afc:	2306      	movs	r3, #6
 8013afe:	e010      	b.n	8013b22 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013b00:	68bb      	ldr	r3, [r7, #8]
 8013b02:	781b      	ldrb	r3, [r3, #0]
 8013b04:	2be5      	cmp	r3, #229	@ 0xe5
 8013b06:	d102      	bne.n	8013b0e <create_name+0x102>
 8013b08:	68bb      	ldr	r3, [r7, #8]
 8013b0a:	2205      	movs	r2, #5
 8013b0c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013b0e:	7efb      	ldrb	r3, [r7, #27]
 8013b10:	2b20      	cmp	r3, #32
 8013b12:	d801      	bhi.n	8013b18 <create_name+0x10c>
 8013b14:	2204      	movs	r2, #4
 8013b16:	e000      	b.n	8013b1a <create_name+0x10e>
 8013b18:	2200      	movs	r2, #0
 8013b1a:	68bb      	ldr	r3, [r7, #8]
 8013b1c:	330b      	adds	r3, #11
 8013b1e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8013b20:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8013b22:	4618      	mov	r0, r3
 8013b24:	3720      	adds	r7, #32
 8013b26:	46bd      	mov	sp, r7
 8013b28:	bd80      	pop	{r7, pc}
 8013b2a:	bf00      	nop
 8013b2c:	0801d47c 	.word	0x0801d47c
 8013b30:	0801d3f0 	.word	0x0801d3f0

08013b34 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8013b34:	b580      	push	{r7, lr}
 8013b36:	b086      	sub	sp, #24
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	6078      	str	r0, [r7, #4]
 8013b3c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8013b42:	693b      	ldr	r3, [r7, #16]
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8013b48:	e002      	b.n	8013b50 <follow_path+0x1c>
 8013b4a:	683b      	ldr	r3, [r7, #0]
 8013b4c:	3301      	adds	r3, #1
 8013b4e:	603b      	str	r3, [r7, #0]
 8013b50:	683b      	ldr	r3, [r7, #0]
 8013b52:	781b      	ldrb	r3, [r3, #0]
 8013b54:	2b2f      	cmp	r3, #47	@ 0x2f
 8013b56:	d0f8      	beq.n	8013b4a <follow_path+0x16>
 8013b58:	683b      	ldr	r3, [r7, #0]
 8013b5a:	781b      	ldrb	r3, [r3, #0]
 8013b5c:	2b5c      	cmp	r3, #92	@ 0x5c
 8013b5e:	d0f4      	beq.n	8013b4a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013b60:	693b      	ldr	r3, [r7, #16]
 8013b62:	2200      	movs	r2, #0
 8013b64:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8013b66:	683b      	ldr	r3, [r7, #0]
 8013b68:	781b      	ldrb	r3, [r3, #0]
 8013b6a:	2b1f      	cmp	r3, #31
 8013b6c:	d80a      	bhi.n	8013b84 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	2280      	movs	r2, #128	@ 0x80
 8013b72:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		res = dir_sdi(dp, 0);
 8013b76:	2100      	movs	r1, #0
 8013b78:	6878      	ldr	r0, [r7, #4]
 8013b7a:	f7ff fcfa 	bl	8013572 <dir_sdi>
 8013b7e:	4603      	mov	r3, r0
 8013b80:	75fb      	strb	r3, [r7, #23]
 8013b82:	e043      	b.n	8013c0c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013b84:	463b      	mov	r3, r7
 8013b86:	4619      	mov	r1, r3
 8013b88:	6878      	ldr	r0, [r7, #4]
 8013b8a:	f7ff ff3f 	bl	8013a0c <create_name>
 8013b8e:	4603      	mov	r3, r0
 8013b90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013b92:	7dfb      	ldrb	r3, [r7, #23]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d134      	bne.n	8013c02 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013b98:	6878      	ldr	r0, [r7, #4]
 8013b9a:	f7ff feb0 	bl	80138fe <dir_find>
 8013b9e:	4603      	mov	r3, r0
 8013ba0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8013ba8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8013baa:	7dfb      	ldrb	r3, [r7, #23]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d00a      	beq.n	8013bc6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013bb0:	7dfb      	ldrb	r3, [r7, #23]
 8013bb2:	2b04      	cmp	r3, #4
 8013bb4:	d127      	bne.n	8013c06 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013bb6:	7afb      	ldrb	r3, [r7, #11]
 8013bb8:	f003 0304 	and.w	r3, r3, #4
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d122      	bne.n	8013c06 <follow_path+0xd2>
 8013bc0:	2305      	movs	r3, #5
 8013bc2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013bc4:	e01f      	b.n	8013c06 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013bc6:	7afb      	ldrb	r3, [r7, #11]
 8013bc8:	f003 0304 	and.w	r3, r3, #4
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d11c      	bne.n	8013c0a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013bd0:	693b      	ldr	r3, [r7, #16]
 8013bd2:	799b      	ldrb	r3, [r3, #6]
 8013bd4:	f003 0310 	and.w	r3, r3, #16
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d102      	bne.n	8013be2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013bdc:	2305      	movs	r3, #5
 8013bde:	75fb      	strb	r3, [r7, #23]
 8013be0:	e014      	b.n	8013c0c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	691b      	ldr	r3, [r3, #16]
 8013bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013bf0:	4413      	add	r3, r2
 8013bf2:	4619      	mov	r1, r3
 8013bf4:	68f8      	ldr	r0, [r7, #12]
 8013bf6:	f7ff fe43 	bl	8013880 <ld_clust>
 8013bfa:	4602      	mov	r2, r0
 8013bfc:	693b      	ldr	r3, [r7, #16]
 8013bfe:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013c00:	e7c0      	b.n	8013b84 <follow_path+0x50>
			if (res != FR_OK) break;
 8013c02:	bf00      	nop
 8013c04:	e002      	b.n	8013c0c <follow_path+0xd8>
				break;
 8013c06:	bf00      	nop
 8013c08:	e000      	b.n	8013c0c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013c0a:	bf00      	nop
			}
		}
	}

	return res;
 8013c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c0e:	4618      	mov	r0, r3
 8013c10:	3718      	adds	r7, #24
 8013c12:	46bd      	mov	sp, r7
 8013c14:	bd80      	pop	{r7, pc}

08013c16 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8013c16:	b480      	push	{r7}
 8013c18:	b087      	sub	sp, #28
 8013c1a:	af00      	add	r7, sp, #0
 8013c1c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8013c22:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d031      	beq.n	8013c90 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	617b      	str	r3, [r7, #20]
 8013c32:	e002      	b.n	8013c3a <get_ldnumber+0x24>
 8013c34:	697b      	ldr	r3, [r7, #20]
 8013c36:	3301      	adds	r3, #1
 8013c38:	617b      	str	r3, [r7, #20]
 8013c3a:	697b      	ldr	r3, [r7, #20]
 8013c3c:	781b      	ldrb	r3, [r3, #0]
 8013c3e:	2b20      	cmp	r3, #32
 8013c40:	d903      	bls.n	8013c4a <get_ldnumber+0x34>
 8013c42:	697b      	ldr	r3, [r7, #20]
 8013c44:	781b      	ldrb	r3, [r3, #0]
 8013c46:	2b3a      	cmp	r3, #58	@ 0x3a
 8013c48:	d1f4      	bne.n	8013c34 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013c4a:	697b      	ldr	r3, [r7, #20]
 8013c4c:	781b      	ldrb	r3, [r3, #0]
 8013c4e:	2b3a      	cmp	r3, #58	@ 0x3a
 8013c50:	d11c      	bne.n	8013c8c <get_ldnumber+0x76>
			tp = *path;
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	1c5a      	adds	r2, r3, #1
 8013c5c:	60fa      	str	r2, [r7, #12]
 8013c5e:	781b      	ldrb	r3, [r3, #0]
 8013c60:	3b30      	subs	r3, #48	@ 0x30
 8013c62:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013c64:	68bb      	ldr	r3, [r7, #8]
 8013c66:	2b09      	cmp	r3, #9
 8013c68:	d80e      	bhi.n	8013c88 <get_ldnumber+0x72>
 8013c6a:	68fa      	ldr	r2, [r7, #12]
 8013c6c:	697b      	ldr	r3, [r7, #20]
 8013c6e:	429a      	cmp	r2, r3
 8013c70:	d10a      	bne.n	8013c88 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013c72:	68bb      	ldr	r3, [r7, #8]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d107      	bne.n	8013c88 <get_ldnumber+0x72>
					vol = (int)i;
 8013c78:	68bb      	ldr	r3, [r7, #8]
 8013c7a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013c7c:	697b      	ldr	r3, [r7, #20]
 8013c7e:	3301      	adds	r3, #1
 8013c80:	617b      	str	r3, [r7, #20]
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	697a      	ldr	r2, [r7, #20]
 8013c86:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013c88:	693b      	ldr	r3, [r7, #16]
 8013c8a:	e002      	b.n	8013c92 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013c90:	693b      	ldr	r3, [r7, #16]
}
 8013c92:	4618      	mov	r0, r3
 8013c94:	371c      	adds	r7, #28
 8013c96:	46bd      	mov	sp, r7
 8013c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c9c:	4770      	bx	lr
	...

08013ca0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b082      	sub	sp, #8
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
 8013ca8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	2200      	movs	r2, #0
 8013cae:	70da      	strb	r2, [r3, #3]
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8013cb6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013cb8:	6839      	ldr	r1, [r7, #0]
 8013cba:	6878      	ldr	r0, [r7, #4]
 8013cbc:	f7ff f8dd 	bl	8012e7a <move_window>
 8013cc0:	4603      	mov	r3, r0
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d001      	beq.n	8013cca <check_fs+0x2a>
 8013cc6:	2304      	movs	r3, #4
 8013cc8:	e038      	b.n	8013d3c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	3330      	adds	r3, #48	@ 0x30
 8013cce:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	f7fe ff8c 	bl	8012bf0 <ld_word>
 8013cd8:	4603      	mov	r3, r0
 8013cda:	461a      	mov	r2, r3
 8013cdc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013ce0:	429a      	cmp	r2, r3
 8013ce2:	d001      	beq.n	8013ce8 <check_fs+0x48>
 8013ce4:	2303      	movs	r3, #3
 8013ce6:	e029      	b.n	8013d3c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013cee:	2be9      	cmp	r3, #233	@ 0xe9
 8013cf0:	d009      	beq.n	8013d06 <check_fs+0x66>
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013cf8:	2beb      	cmp	r3, #235	@ 0xeb
 8013cfa:	d11e      	bne.n	8013d3a <check_fs+0x9a>
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8013d02:	2b90      	cmp	r3, #144	@ 0x90
 8013d04:	d119      	bne.n	8013d3a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	3330      	adds	r3, #48	@ 0x30
 8013d0a:	3336      	adds	r3, #54	@ 0x36
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	f7fe ff88 	bl	8012c22 <ld_dword>
 8013d12:	4603      	mov	r3, r0
 8013d14:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8013d18:	4a0a      	ldr	r2, [pc, #40]	@ (8013d44 <check_fs+0xa4>)
 8013d1a:	4293      	cmp	r3, r2
 8013d1c:	d101      	bne.n	8013d22 <check_fs+0x82>
 8013d1e:	2300      	movs	r3, #0
 8013d20:	e00c      	b.n	8013d3c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	3330      	adds	r3, #48	@ 0x30
 8013d26:	3352      	adds	r3, #82	@ 0x52
 8013d28:	4618      	mov	r0, r3
 8013d2a:	f7fe ff7a 	bl	8012c22 <ld_dword>
 8013d2e:	4603      	mov	r3, r0
 8013d30:	4a05      	ldr	r2, [pc, #20]	@ (8013d48 <check_fs+0xa8>)
 8013d32:	4293      	cmp	r3, r2
 8013d34:	d101      	bne.n	8013d3a <check_fs+0x9a>
 8013d36:	2300      	movs	r3, #0
 8013d38:	e000      	b.n	8013d3c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8013d3a:	2302      	movs	r3, #2
}
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	3708      	adds	r7, #8
 8013d40:	46bd      	mov	sp, r7
 8013d42:	bd80      	pop	{r7, pc}
 8013d44:	00544146 	.word	0x00544146
 8013d48:	33544146 	.word	0x33544146

08013d4c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b096      	sub	sp, #88	@ 0x58
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	60f8      	str	r0, [r7, #12]
 8013d54:	60b9      	str	r1, [r7, #8]
 8013d56:	4613      	mov	r3, r2
 8013d58:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013d5a:	68bb      	ldr	r3, [r7, #8]
 8013d5c:	2200      	movs	r2, #0
 8013d5e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013d60:	68f8      	ldr	r0, [r7, #12]
 8013d62:	f7ff ff58 	bl	8013c16 <get_ldnumber>
 8013d66:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013d68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	da01      	bge.n	8013d72 <find_volume+0x26>
 8013d6e:	230b      	movs	r3, #11
 8013d70:	e22a      	b.n	80141c8 <find_volume+0x47c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013d72:	4aa1      	ldr	r2, [pc, #644]	@ (8013ff8 <find_volume+0x2ac>)
 8013d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d101      	bne.n	8013d86 <find_volume+0x3a>
 8013d82:	230c      	movs	r3, #12
 8013d84:	e220      	b.n	80141c8 <find_volume+0x47c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8013d86:	68bb      	ldr	r3, [r7, #8]
 8013d88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013d8a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013d8c:	79fb      	ldrb	r3, [r7, #7]
 8013d8e:	f023 0301 	bic.w	r3, r3, #1
 8013d92:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d96:	781b      	ldrb	r3, [r3, #0]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d01a      	beq.n	8013dd2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d9e:	785b      	ldrb	r3, [r3, #1]
 8013da0:	4618      	mov	r0, r3
 8013da2:	f7fe fe87 	bl	8012ab4 <disk_status>
 8013da6:	4603      	mov	r3, r0
 8013da8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013dac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013db0:	f003 0301 	and.w	r3, r3, #1
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d10c      	bne.n	8013dd2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013db8:	79fb      	ldrb	r3, [r7, #7]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d007      	beq.n	8013dce <find_volume+0x82>
 8013dbe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013dc2:	f003 0304 	and.w	r3, r3, #4
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d001      	beq.n	8013dce <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8013dca:	230a      	movs	r3, #10
 8013dcc:	e1fc      	b.n	80141c8 <find_volume+0x47c>
			}
			return FR_OK;				/* The file system object is valid */
 8013dce:	2300      	movs	r3, #0
 8013dd0:	e1fa      	b.n	80141c8 <find_volume+0x47c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013dd4:	2200      	movs	r2, #0
 8013dd6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013dda:	b2da      	uxtb	r2, r3
 8013ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013dde:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013de2:	785b      	ldrb	r3, [r3, #1]
 8013de4:	4618      	mov	r0, r3
 8013de6:	f7fe fe7f 	bl	8012ae8 <disk_initialize>
 8013dea:	4603      	mov	r3, r0
 8013dec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013df0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013df4:	f003 0301 	and.w	r3, r3, #1
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d001      	beq.n	8013e00 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013dfc:	2303      	movs	r3, #3
 8013dfe:	e1e3      	b.n	80141c8 <find_volume+0x47c>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013e00:	79fb      	ldrb	r3, [r7, #7]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d007      	beq.n	8013e16 <find_volume+0xca>
 8013e06:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013e0a:	f003 0304 	and.w	r3, r3, #4
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d001      	beq.n	8013e16 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8013e12:	230a      	movs	r3, #10
 8013e14:	e1d8      	b.n	80141c8 <find_volume+0x47c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013e16:	2300      	movs	r3, #0
 8013e18:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013e1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013e1c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013e1e:	f7ff ff3f 	bl	8013ca0 <check_fs>
 8013e22:	4603      	mov	r3, r0
 8013e24:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013e28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013e2c:	2b02      	cmp	r3, #2
 8013e2e:	d149      	bne.n	8013ec4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013e30:	2300      	movs	r3, #0
 8013e32:	643b      	str	r3, [r7, #64]	@ 0x40
 8013e34:	e01e      	b.n	8013e74 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e38:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013e3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013e3e:	011b      	lsls	r3, r3, #4
 8013e40:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8013e44:	4413      	add	r3, r2
 8013e46:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e4a:	3304      	adds	r3, #4
 8013e4c:	781b      	ldrb	r3, [r3, #0]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d006      	beq.n	8013e60 <find_volume+0x114>
 8013e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e54:	3308      	adds	r3, #8
 8013e56:	4618      	mov	r0, r3
 8013e58:	f7fe fee3 	bl	8012c22 <ld_dword>
 8013e5c:	4602      	mov	r2, r0
 8013e5e:	e000      	b.n	8013e62 <find_volume+0x116>
 8013e60:	2200      	movs	r2, #0
 8013e62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013e64:	009b      	lsls	r3, r3, #2
 8013e66:	3358      	adds	r3, #88	@ 0x58
 8013e68:	443b      	add	r3, r7
 8013e6a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013e6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013e70:	3301      	adds	r3, #1
 8013e72:	643b      	str	r3, [r7, #64]	@ 0x40
 8013e74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013e76:	2b03      	cmp	r3, #3
 8013e78:	d9dd      	bls.n	8013e36 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8013e7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d002      	beq.n	8013e8a <find_volume+0x13e>
 8013e84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013e86:	3b01      	subs	r3, #1
 8013e88:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013e8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013e8c:	009b      	lsls	r3, r3, #2
 8013e8e:	3358      	adds	r3, #88	@ 0x58
 8013e90:	443b      	add	r3, r7
 8013e92:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013e96:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013e98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d005      	beq.n	8013eaa <find_volume+0x15e>
 8013e9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013ea0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013ea2:	f7ff fefd 	bl	8013ca0 <check_fs>
 8013ea6:	4603      	mov	r3, r0
 8013ea8:	e000      	b.n	8013eac <find_volume+0x160>
 8013eaa:	2303      	movs	r3, #3
 8013eac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013eb0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013eb4:	2b01      	cmp	r3, #1
 8013eb6:	d905      	bls.n	8013ec4 <find_volume+0x178>
 8013eb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013eba:	3301      	adds	r3, #1
 8013ebc:	643b      	str	r3, [r7, #64]	@ 0x40
 8013ebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013ec0:	2b03      	cmp	r3, #3
 8013ec2:	d9e2      	bls.n	8013e8a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013ec4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013ec8:	2b04      	cmp	r3, #4
 8013eca:	d101      	bne.n	8013ed0 <find_volume+0x184>
 8013ecc:	2301      	movs	r3, #1
 8013ece:	e17b      	b.n	80141c8 <find_volume+0x47c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013ed0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013ed4:	2b01      	cmp	r3, #1
 8013ed6:	d901      	bls.n	8013edc <find_volume+0x190>
 8013ed8:	230d      	movs	r3, #13
 8013eda:	e175      	b.n	80141c8 <find_volume+0x47c>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ede:	3330      	adds	r3, #48	@ 0x30
 8013ee0:	330b      	adds	r3, #11
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	f7fe fe84 	bl	8012bf0 <ld_word>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013eee:	d001      	beq.n	8013ef4 <find_volume+0x1a8>
 8013ef0:	230d      	movs	r3, #13
 8013ef2:	e169      	b.n	80141c8 <find_volume+0x47c>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ef6:	3330      	adds	r3, #48	@ 0x30
 8013ef8:	3316      	adds	r3, #22
 8013efa:	4618      	mov	r0, r3
 8013efc:	f7fe fe78 	bl	8012bf0 <ld_word>
 8013f00:	4603      	mov	r3, r0
 8013f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013f04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d106      	bne.n	8013f18 <find_volume+0x1cc>
 8013f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f0c:	3330      	adds	r3, #48	@ 0x30
 8013f0e:	3324      	adds	r3, #36	@ 0x24
 8013f10:	4618      	mov	r0, r3
 8013f12:	f7fe fe86 	bl	8012c22 <ld_dword>
 8013f16:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8013f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013f1c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f20:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8013f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f26:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f2a:	789b      	ldrb	r3, [r3, #2]
 8013f2c:	2b01      	cmp	r3, #1
 8013f2e:	d005      	beq.n	8013f3c <find_volume+0x1f0>
 8013f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f32:	789b      	ldrb	r3, [r3, #2]
 8013f34:	2b02      	cmp	r3, #2
 8013f36:	d001      	beq.n	8013f3c <find_volume+0x1f0>
 8013f38:	230d      	movs	r3, #13
 8013f3a:	e145      	b.n	80141c8 <find_volume+0x47c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f3e:	789b      	ldrb	r3, [r3, #2]
 8013f40:	461a      	mov	r2, r3
 8013f42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013f44:	fb02 f303 	mul.w	r3, r2, r3
 8013f48:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013f50:	461a      	mov	r2, r3
 8013f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f54:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f58:	895b      	ldrh	r3, [r3, #10]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d008      	beq.n	8013f70 <find_volume+0x224>
 8013f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f60:	895b      	ldrh	r3, [r3, #10]
 8013f62:	461a      	mov	r2, r3
 8013f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f66:	895b      	ldrh	r3, [r3, #10]
 8013f68:	3b01      	subs	r3, #1
 8013f6a:	4013      	ands	r3, r2
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d001      	beq.n	8013f74 <find_volume+0x228>
 8013f70:	230d      	movs	r3, #13
 8013f72:	e129      	b.n	80141c8 <find_volume+0x47c>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f76:	3330      	adds	r3, #48	@ 0x30
 8013f78:	3311      	adds	r3, #17
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f7fe fe38 	bl	8012bf0 <ld_word>
 8013f80:	4603      	mov	r3, r0
 8013f82:	461a      	mov	r2, r3
 8013f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f86:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f8a:	891b      	ldrh	r3, [r3, #8]
 8013f8c:	f003 030f 	and.w	r3, r3, #15
 8013f90:	b29b      	uxth	r3, r3
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d001      	beq.n	8013f9a <find_volume+0x24e>
 8013f96:	230d      	movs	r3, #13
 8013f98:	e116      	b.n	80141c8 <find_volume+0x47c>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f9c:	3330      	adds	r3, #48	@ 0x30
 8013f9e:	3313      	adds	r3, #19
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	f7fe fe25 	bl	8012bf0 <ld_word>
 8013fa6:	4603      	mov	r3, r0
 8013fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013faa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d106      	bne.n	8013fbe <find_volume+0x272>
 8013fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fb2:	3330      	adds	r3, #48	@ 0x30
 8013fb4:	3320      	adds	r3, #32
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	f7fe fe33 	bl	8012c22 <ld_dword>
 8013fbc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fc0:	3330      	adds	r3, #48	@ 0x30
 8013fc2:	330e      	adds	r3, #14
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	f7fe fe13 	bl	8012bf0 <ld_word>
 8013fca:	4603      	mov	r3, r0
 8013fcc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013fce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d101      	bne.n	8013fd8 <find_volume+0x28c>
 8013fd4:	230d      	movs	r3, #13
 8013fd6:	e0f7      	b.n	80141c8 <find_volume+0x47c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013fd8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013fda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013fdc:	4413      	add	r3, r2
 8013fde:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013fe0:	8912      	ldrh	r2, [r2, #8]
 8013fe2:	0912      	lsrs	r2, r2, #4
 8013fe4:	b292      	uxth	r2, r2
 8013fe6:	4413      	add	r3, r2
 8013fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013fea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013fee:	429a      	cmp	r2, r3
 8013ff0:	d204      	bcs.n	8013ffc <find_volume+0x2b0>
 8013ff2:	230d      	movs	r3, #13
 8013ff4:	e0e8      	b.n	80141c8 <find_volume+0x47c>
 8013ff6:	bf00      	nop
 8013ff8:	20001d64 	.word	0x20001d64
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013ffc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014000:	1ad3      	subs	r3, r2, r3
 8014002:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014004:	8952      	ldrh	r2, [r2, #10]
 8014006:	fbb3 f3f2 	udiv	r3, r3, r2
 801400a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801400c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801400e:	2b00      	cmp	r3, #0
 8014010:	d101      	bne.n	8014016 <find_volume+0x2ca>
 8014012:	230d      	movs	r3, #13
 8014014:	e0d8      	b.n	80141c8 <find_volume+0x47c>
		fmt = FS_FAT32;
 8014016:	2303      	movs	r3, #3
 8014018:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801401c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801401e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8014022:	4293      	cmp	r3, r2
 8014024:	d802      	bhi.n	801402c <find_volume+0x2e0>
 8014026:	2302      	movs	r3, #2
 8014028:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801402c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801402e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8014032:	4293      	cmp	r3, r2
 8014034:	d802      	bhi.n	801403c <find_volume+0x2f0>
 8014036:	2301      	movs	r3, #1
 8014038:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801403c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801403e:	1c9a      	adds	r2, r3, #2
 8014040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014042:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8014044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014046:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014048:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801404a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801404c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801404e:	441a      	add	r2, r3
 8014050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014052:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8014054:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014058:	441a      	add	r2, r3
 801405a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801405c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 801405e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014062:	2b03      	cmp	r3, #3
 8014064:	d11e      	bne.n	80140a4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014068:	3330      	adds	r3, #48	@ 0x30
 801406a:	332a      	adds	r3, #42	@ 0x2a
 801406c:	4618      	mov	r0, r3
 801406e:	f7fe fdbf 	bl	8012bf0 <ld_word>
 8014072:	4603      	mov	r3, r0
 8014074:	2b00      	cmp	r3, #0
 8014076:	d001      	beq.n	801407c <find_volume+0x330>
 8014078:	230d      	movs	r3, #13
 801407a:	e0a5      	b.n	80141c8 <find_volume+0x47c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801407c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801407e:	891b      	ldrh	r3, [r3, #8]
 8014080:	2b00      	cmp	r3, #0
 8014082:	d001      	beq.n	8014088 <find_volume+0x33c>
 8014084:	230d      	movs	r3, #13
 8014086:	e09f      	b.n	80141c8 <find_volume+0x47c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8014088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801408a:	3330      	adds	r3, #48	@ 0x30
 801408c:	332c      	adds	r3, #44	@ 0x2c
 801408e:	4618      	mov	r0, r3
 8014090:	f7fe fdc7 	bl	8012c22 <ld_dword>
 8014094:	4602      	mov	r2, r0
 8014096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014098:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801409a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801409c:	695b      	ldr	r3, [r3, #20]
 801409e:	009b      	lsls	r3, r3, #2
 80140a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80140a2:	e01f      	b.n	80140e4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80140a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140a6:	891b      	ldrh	r3, [r3, #8]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d101      	bne.n	80140b0 <find_volume+0x364>
 80140ac:	230d      	movs	r3, #13
 80140ae:	e08b      	b.n	80141c8 <find_volume+0x47c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80140b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140b2:	6a1a      	ldr	r2, [r3, #32]
 80140b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80140b6:	441a      	add	r2, r3
 80140b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140ba:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80140bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80140c0:	2b02      	cmp	r3, #2
 80140c2:	d103      	bne.n	80140cc <find_volume+0x380>
 80140c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140c6:	695b      	ldr	r3, [r3, #20]
 80140c8:	005b      	lsls	r3, r3, #1
 80140ca:	e00a      	b.n	80140e2 <find_volume+0x396>
 80140cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140ce:	695a      	ldr	r2, [r3, #20]
 80140d0:	4613      	mov	r3, r2
 80140d2:	005b      	lsls	r3, r3, #1
 80140d4:	4413      	add	r3, r2
 80140d6:	085a      	lsrs	r2, r3, #1
 80140d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140da:	695b      	ldr	r3, [r3, #20]
 80140dc:	f003 0301 	and.w	r3, r3, #1
 80140e0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80140e2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80140e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140e6:	699a      	ldr	r2, [r3, #24]
 80140e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80140ea:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80140ee:	0a5b      	lsrs	r3, r3, #9
 80140f0:	429a      	cmp	r2, r3
 80140f2:	d201      	bcs.n	80140f8 <find_volume+0x3ac>
 80140f4:	230d      	movs	r3, #13
 80140f6:	e067      	b.n	80141c8 <find_volume+0x47c>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80140f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140fa:	f04f 32ff 	mov.w	r2, #4294967295
 80140fe:	611a      	str	r2, [r3, #16]
 8014100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014102:	691a      	ldr	r2, [r3, #16]
 8014104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014106:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8014108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801410a:	2280      	movs	r2, #128	@ 0x80
 801410c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801410e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014112:	2b03      	cmp	r3, #3
 8014114:	d149      	bne.n	80141aa <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8014116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014118:	3330      	adds	r3, #48	@ 0x30
 801411a:	3330      	adds	r3, #48	@ 0x30
 801411c:	4618      	mov	r0, r3
 801411e:	f7fe fd67 	bl	8012bf0 <ld_word>
 8014122:	4603      	mov	r3, r0
 8014124:	2b01      	cmp	r3, #1
 8014126:	d140      	bne.n	80141aa <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014128:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801412a:	3301      	adds	r3, #1
 801412c:	4619      	mov	r1, r3
 801412e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014130:	f7fe fea3 	bl	8012e7a <move_window>
 8014134:	4603      	mov	r3, r0
 8014136:	2b00      	cmp	r3, #0
 8014138:	d137      	bne.n	80141aa <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801413a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801413c:	2200      	movs	r2, #0
 801413e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014142:	3330      	adds	r3, #48	@ 0x30
 8014144:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014148:	4618      	mov	r0, r3
 801414a:	f7fe fd51 	bl	8012bf0 <ld_word>
 801414e:	4603      	mov	r3, r0
 8014150:	461a      	mov	r2, r3
 8014152:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8014156:	429a      	cmp	r2, r3
 8014158:	d127      	bne.n	80141aa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801415a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801415c:	3330      	adds	r3, #48	@ 0x30
 801415e:	4618      	mov	r0, r3
 8014160:	f7fe fd5f 	bl	8012c22 <ld_dword>
 8014164:	4603      	mov	r3, r0
 8014166:	4a1a      	ldr	r2, [pc, #104]	@ (80141d0 <find_volume+0x484>)
 8014168:	4293      	cmp	r3, r2
 801416a:	d11e      	bne.n	80141aa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801416c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801416e:	3330      	adds	r3, #48	@ 0x30
 8014170:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8014174:	4618      	mov	r0, r3
 8014176:	f7fe fd54 	bl	8012c22 <ld_dword>
 801417a:	4603      	mov	r3, r0
 801417c:	4a15      	ldr	r2, [pc, #84]	@ (80141d4 <find_volume+0x488>)
 801417e:	4293      	cmp	r3, r2
 8014180:	d113      	bne.n	80141aa <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014184:	3330      	adds	r3, #48	@ 0x30
 8014186:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801418a:	4618      	mov	r0, r3
 801418c:	f7fe fd49 	bl	8012c22 <ld_dword>
 8014190:	4602      	mov	r2, r0
 8014192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014194:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014198:	3330      	adds	r3, #48	@ 0x30
 801419a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801419e:	4618      	mov	r0, r3
 80141a0:	f7fe fd3f 	bl	8012c22 <ld_dword>
 80141a4:	4602      	mov	r2, r0
 80141a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141a8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80141aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141ac:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80141b0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80141b2:	4b09      	ldr	r3, [pc, #36]	@ (80141d8 <find_volume+0x48c>)
 80141b4:	881b      	ldrh	r3, [r3, #0]
 80141b6:	3301      	adds	r3, #1
 80141b8:	b29a      	uxth	r2, r3
 80141ba:	4b07      	ldr	r3, [pc, #28]	@ (80141d8 <find_volume+0x48c>)
 80141bc:	801a      	strh	r2, [r3, #0]
 80141be:	4b06      	ldr	r3, [pc, #24]	@ (80141d8 <find_volume+0x48c>)
 80141c0:	881a      	ldrh	r2, [r3, #0]
 80141c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141c4:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 80141c6:	2300      	movs	r3, #0
}
 80141c8:	4618      	mov	r0, r3
 80141ca:	3758      	adds	r7, #88	@ 0x58
 80141cc:	46bd      	mov	sp, r7
 80141ce:	bd80      	pop	{r7, pc}
 80141d0:	41615252 	.word	0x41615252
 80141d4:	61417272 	.word	0x61417272
 80141d8:	20001d68 	.word	0x20001d68

080141dc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80141dc:	b580      	push	{r7, lr}
 80141de:	b084      	sub	sp, #16
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	6078      	str	r0, [r7, #4]
 80141e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80141e6:	2309      	movs	r3, #9
 80141e8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d01c      	beq.n	801422a <validate+0x4e>
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d018      	beq.n	801422a <validate+0x4e>
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	781b      	ldrb	r3, [r3, #0]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d013      	beq.n	801422a <validate+0x4e>
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	889a      	ldrh	r2, [r3, #4]
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	88db      	ldrh	r3, [r3, #6]
 801420c:	429a      	cmp	r2, r3
 801420e:	d10c      	bne.n	801422a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	785b      	ldrb	r3, [r3, #1]
 8014216:	4618      	mov	r0, r3
 8014218:	f7fe fc4c 	bl	8012ab4 <disk_status>
 801421c:	4603      	mov	r3, r0
 801421e:	f003 0301 	and.w	r3, r3, #1
 8014222:	2b00      	cmp	r3, #0
 8014224:	d101      	bne.n	801422a <validate+0x4e>
			res = FR_OK;
 8014226:	2300      	movs	r3, #0
 8014228:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801422a:	7bfb      	ldrb	r3, [r7, #15]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d102      	bne.n	8014236 <validate+0x5a>
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	e000      	b.n	8014238 <validate+0x5c>
 8014236:	2300      	movs	r3, #0
 8014238:	683a      	ldr	r2, [r7, #0]
 801423a:	6013      	str	r3, [r2, #0]
	return res;
 801423c:	7bfb      	ldrb	r3, [r7, #15]
}
 801423e:	4618      	mov	r0, r3
 8014240:	3710      	adds	r7, #16
 8014242:	46bd      	mov	sp, r7
 8014244:	bd80      	pop	{r7, pc}
	...

08014248 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014248:	b580      	push	{r7, lr}
 801424a:	b088      	sub	sp, #32
 801424c:	af00      	add	r7, sp, #0
 801424e:	60f8      	str	r0, [r7, #12]
 8014250:	60b9      	str	r1, [r7, #8]
 8014252:	4613      	mov	r3, r2
 8014254:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8014256:	68bb      	ldr	r3, [r7, #8]
 8014258:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801425a:	f107 0310 	add.w	r3, r7, #16
 801425e:	4618      	mov	r0, r3
 8014260:	f7ff fcd9 	bl	8013c16 <get_ldnumber>
 8014264:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8014266:	69fb      	ldr	r3, [r7, #28]
 8014268:	2b00      	cmp	r3, #0
 801426a:	da01      	bge.n	8014270 <f_mount+0x28>
 801426c:	230b      	movs	r3, #11
 801426e:	e028      	b.n	80142c2 <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8014270:	4a16      	ldr	r2, [pc, #88]	@ (80142cc <f_mount+0x84>)
 8014272:	69fb      	ldr	r3, [r7, #28]
 8014274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014278:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801427a:	69bb      	ldr	r3, [r7, #24]
 801427c:	2b00      	cmp	r3, #0
 801427e:	d002      	beq.n	8014286 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8014280:	69bb      	ldr	r3, [r7, #24]
 8014282:	2200      	movs	r2, #0
 8014284:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d002      	beq.n	8014292 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	2200      	movs	r2, #0
 8014290:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014292:	68fa      	ldr	r2, [r7, #12]
 8014294:	490d      	ldr	r1, [pc, #52]	@ (80142cc <f_mount+0x84>)
 8014296:	69fb      	ldr	r3, [r7, #28]
 8014298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d002      	beq.n	80142a8 <f_mount+0x60>
 80142a2:	79fb      	ldrb	r3, [r7, #7]
 80142a4:	2b01      	cmp	r3, #1
 80142a6:	d001      	beq.n	80142ac <f_mount+0x64>
 80142a8:	2300      	movs	r3, #0
 80142aa:	e00a      	b.n	80142c2 <f_mount+0x7a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80142ac:	f107 010c 	add.w	r1, r7, #12
 80142b0:	f107 0308 	add.w	r3, r7, #8
 80142b4:	2200      	movs	r2, #0
 80142b6:	4618      	mov	r0, r3
 80142b8:	f7ff fd48 	bl	8013d4c <find_volume>
 80142bc:	4603      	mov	r3, r0
 80142be:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80142c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80142c2:	4618      	mov	r0, r3
 80142c4:	3720      	adds	r7, #32
 80142c6:	46bd      	mov	sp, r7
 80142c8:	bd80      	pop	{r7, pc}
 80142ca:	bf00      	nop
 80142cc:	20001d64 	.word	0x20001d64

080142d0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b098      	sub	sp, #96	@ 0x60
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	60f8      	str	r0, [r7, #12]
 80142d8:	60b9      	str	r1, [r7, #8]
 80142da:	4613      	mov	r3, r2
 80142dc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d101      	bne.n	80142e8 <f_open+0x18>
 80142e4:	2309      	movs	r3, #9
 80142e6:	e17a      	b.n	80145de <f_open+0x30e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80142e8:	79fb      	ldrb	r3, [r7, #7]
 80142ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80142ee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80142f0:	79fa      	ldrb	r2, [r7, #7]
 80142f2:	f107 0114 	add.w	r1, r7, #20
 80142f6:	f107 0308 	add.w	r3, r7, #8
 80142fa:	4618      	mov	r0, r3
 80142fc:	f7ff fd26 	bl	8013d4c <find_volume>
 8014300:	4603      	mov	r3, r0
 8014302:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8014306:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801430a:	2b00      	cmp	r3, #0
 801430c:	f040 815e 	bne.w	80145cc <f_open+0x2fc>
		dj.obj.fs = fs;
 8014310:	697b      	ldr	r3, [r7, #20]
 8014312:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014314:	68ba      	ldr	r2, [r7, #8]
 8014316:	f107 0318 	add.w	r3, r7, #24
 801431a:	4611      	mov	r1, r2
 801431c:	4618      	mov	r0, r3
 801431e:	f7ff fc09 	bl	8013b34 <follow_path>
 8014322:	4603      	mov	r3, r0
 8014324:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8014328:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801432c:	2b00      	cmp	r3, #0
 801432e:	d107      	bne.n	8014340 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014330:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8014334:	b25b      	sxtb	r3, r3
 8014336:	2b00      	cmp	r3, #0
 8014338:	da02      	bge.n	8014340 <f_open+0x70>
				res = FR_INVALID_NAME;
 801433a:	2306      	movs	r3, #6
 801433c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014340:	79fb      	ldrb	r3, [r7, #7]
 8014342:	f003 031c 	and.w	r3, r3, #28
 8014346:	2b00      	cmp	r3, #0
 8014348:	d078      	beq.n	801443c <f_open+0x16c>
			if (res != FR_OK) {					/* No file, create new */
 801434a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801434e:	2b00      	cmp	r3, #0
 8014350:	d010      	beq.n	8014374 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014352:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8014356:	2b04      	cmp	r3, #4
 8014358:	d107      	bne.n	801436a <f_open+0x9a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 801435a:	f107 0318 	add.w	r3, r7, #24
 801435e:	4618      	mov	r0, r3
 8014360:	f7ff fb22 	bl	80139a8 <dir_register>
 8014364:	4603      	mov	r3, r0
 8014366:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801436a:	79fb      	ldrb	r3, [r7, #7]
 801436c:	f043 0308 	orr.w	r3, r3, #8
 8014370:	71fb      	strb	r3, [r7, #7]
 8014372:	e010      	b.n	8014396 <f_open+0xc6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014374:	7fbb      	ldrb	r3, [r7, #30]
 8014376:	f003 0311 	and.w	r3, r3, #17
 801437a:	2b00      	cmp	r3, #0
 801437c:	d003      	beq.n	8014386 <f_open+0xb6>
					res = FR_DENIED;
 801437e:	2307      	movs	r3, #7
 8014380:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8014384:	e007      	b.n	8014396 <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014386:	79fb      	ldrb	r3, [r7, #7]
 8014388:	f003 0304 	and.w	r3, r3, #4
 801438c:	2b00      	cmp	r3, #0
 801438e:	d002      	beq.n	8014396 <f_open+0xc6>
 8014390:	2308      	movs	r3, #8
 8014392:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014396:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801439a:	2b00      	cmp	r3, #0
 801439c:	d168      	bne.n	8014470 <f_open+0x1a0>
 801439e:	79fb      	ldrb	r3, [r7, #7]
 80143a0:	f003 0308 	and.w	r3, r3, #8
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d063      	beq.n	8014470 <f_open+0x1a0>
				dw = GET_FATTIME();
 80143a8:	f7fd ff9e 	bl	80122e8 <get_fattime>
 80143ac:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80143ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143b0:	330e      	adds	r3, #14
 80143b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80143b4:	4618      	mov	r0, r3
 80143b6:	f7fe fc72 	bl	8012c9e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80143ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143bc:	3316      	adds	r3, #22
 80143be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80143c0:	4618      	mov	r0, r3
 80143c2:	f7fe fc6c 	bl	8012c9e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80143c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143c8:	330b      	adds	r3, #11
 80143ca:	2220      	movs	r2, #32
 80143cc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80143ce:	697b      	ldr	r3, [r7, #20]
 80143d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80143d2:	4611      	mov	r1, r2
 80143d4:	4618      	mov	r0, r3
 80143d6:	f7ff fa53 	bl	8013880 <ld_clust>
 80143da:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80143dc:	697b      	ldr	r3, [r7, #20]
 80143de:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80143e0:	2200      	movs	r2, #0
 80143e2:	4618      	mov	r0, r3
 80143e4:	f7ff fa6b 	bl	80138be <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80143e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143ea:	331c      	adds	r3, #28
 80143ec:	2100      	movs	r1, #0
 80143ee:	4618      	mov	r0, r3
 80143f0:	f7fe fc55 	bl	8012c9e <st_dword>
					fs->wflag = 1;
 80143f4:	697b      	ldr	r3, [r7, #20]
 80143f6:	2201      	movs	r2, #1
 80143f8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80143fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d037      	beq.n	8014470 <f_open+0x1a0>
						dw = fs->winsect;
 8014400:	697b      	ldr	r3, [r7, #20]
 8014402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014404:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8014406:	f107 0318 	add.w	r3, r7, #24
 801440a:	2200      	movs	r2, #0
 801440c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801440e:	4618      	mov	r0, r3
 8014410:	f7fe ff7e 	bl	8013310 <remove_chain>
 8014414:	4603      	mov	r3, r0
 8014416:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 801441a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801441e:	2b00      	cmp	r3, #0
 8014420:	d126      	bne.n	8014470 <f_open+0x1a0>
							res = move_window(fs, dw);
 8014422:	697b      	ldr	r3, [r7, #20]
 8014424:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8014426:	4618      	mov	r0, r3
 8014428:	f7fe fd27 	bl	8012e7a <move_window>
 801442c:	4603      	mov	r3, r0
 801442e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014432:	697b      	ldr	r3, [r7, #20]
 8014434:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014436:	3a01      	subs	r2, #1
 8014438:	60da      	str	r2, [r3, #12]
 801443a:	e019      	b.n	8014470 <f_open+0x1a0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801443c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8014440:	2b00      	cmp	r3, #0
 8014442:	d115      	bne.n	8014470 <f_open+0x1a0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014444:	7fbb      	ldrb	r3, [r7, #30]
 8014446:	f003 0310 	and.w	r3, r3, #16
 801444a:	2b00      	cmp	r3, #0
 801444c:	d003      	beq.n	8014456 <f_open+0x186>
					res = FR_NO_FILE;
 801444e:	2304      	movs	r3, #4
 8014450:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8014454:	e00c      	b.n	8014470 <f_open+0x1a0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8014456:	79fb      	ldrb	r3, [r7, #7]
 8014458:	f003 0302 	and.w	r3, r3, #2
 801445c:	2b00      	cmp	r3, #0
 801445e:	d007      	beq.n	8014470 <f_open+0x1a0>
 8014460:	7fbb      	ldrb	r3, [r7, #30]
 8014462:	f003 0301 	and.w	r3, r3, #1
 8014466:	2b00      	cmp	r3, #0
 8014468:	d002      	beq.n	8014470 <f_open+0x1a0>
						res = FR_DENIED;
 801446a:	2307      	movs	r3, #7
 801446c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8014470:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8014474:	2b00      	cmp	r3, #0
 8014476:	d10f      	bne.n	8014498 <f_open+0x1c8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014478:	79fb      	ldrb	r3, [r7, #7]
 801447a:	f003 0308 	and.w	r3, r3, #8
 801447e:	2b00      	cmp	r3, #0
 8014480:	d003      	beq.n	801448a <f_open+0x1ba>
				mode |= FA_MODIFIED;
 8014482:	79fb      	ldrb	r3, [r7, #7]
 8014484:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014488:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801448a:	697b      	ldr	r3, [r7, #20]
 801448c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8014492:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	625a      	str	r2, [r3, #36]	@ 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014498:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801449c:	2b00      	cmp	r3, #0
 801449e:	f040 8095 	bne.w	80145cc <f_open+0x2fc>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80144a2:	697b      	ldr	r3, [r7, #20]
 80144a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80144a6:	4611      	mov	r1, r2
 80144a8:	4618      	mov	r0, r3
 80144aa:	f7ff f9e9 	bl	8013880 <ld_clust>
 80144ae:	4602      	mov	r2, r0
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80144b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80144b6:	331c      	adds	r3, #28
 80144b8:	4618      	mov	r0, r3
 80144ba:	f7fe fbb2 	bl	8012c22 <ld_dword>
 80144be:	4602      	mov	r2, r0
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	2200      	movs	r2, #0
 80144c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80144ca:	697a      	ldr	r2, [r7, #20]
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80144d0:	697b      	ldr	r3, [r7, #20]
 80144d2:	88da      	ldrh	r2, [r3, #6]
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	79fa      	ldrb	r2, [r7, #7]
 80144dc:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	2200      	movs	r2, #0
 80144e2:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	2200      	movs	r2, #0
 80144e8:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	2200      	movs	r2, #0
 80144ee:	615a      	str	r2, [r3, #20]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	332c      	adds	r3, #44	@ 0x2c
 80144f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80144f8:	2100      	movs	r1, #0
 80144fa:	4618      	mov	r0, r3
 80144fc:	f7fe fc1c 	bl	8012d38 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014500:	79fb      	ldrb	r3, [r7, #7]
 8014502:	f003 0320 	and.w	r3, r3, #32
 8014506:	2b00      	cmp	r3, #0
 8014508:	d060      	beq.n	80145cc <f_open+0x2fc>
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	68db      	ldr	r3, [r3, #12]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d05c      	beq.n	80145cc <f_open+0x2fc>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	68da      	ldr	r2, [r3, #12]
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801451a:	697b      	ldr	r3, [r7, #20]
 801451c:	895b      	ldrh	r3, [r3, #10]
 801451e:	025b      	lsls	r3, r3, #9
 8014520:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	689b      	ldr	r3, [r3, #8]
 8014526:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	68db      	ldr	r3, [r3, #12]
 801452c:	657b      	str	r3, [r7, #84]	@ 0x54
 801452e:	e016      	b.n	801455e <f_open+0x28e>
					clst = get_fat(&fp->obj, clst);
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8014534:	4618      	mov	r0, r3
 8014536:	f7fe fd5a 	bl	8012fee <get_fat>
 801453a:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801453c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801453e:	2b01      	cmp	r3, #1
 8014540:	d802      	bhi.n	8014548 <f_open+0x278>
 8014542:	2302      	movs	r3, #2
 8014544:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014548:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801454a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801454e:	d102      	bne.n	8014556 <f_open+0x286>
 8014550:	2301      	movs	r3, #1
 8014552:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014556:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014558:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801455a:	1ad3      	subs	r3, r2, r3
 801455c:	657b      	str	r3, [r7, #84]	@ 0x54
 801455e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8014562:	2b00      	cmp	r3, #0
 8014564:	d103      	bne.n	801456e <f_open+0x29e>
 8014566:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014568:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801456a:	429a      	cmp	r2, r3
 801456c:	d8e0      	bhi.n	8014530 <f_open+0x260>
				}
				fp->clust = clst;
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014572:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014574:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8014578:	2b00      	cmp	r3, #0
 801457a:	d127      	bne.n	80145cc <f_open+0x2fc>
 801457c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801457e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014582:	2b00      	cmp	r3, #0
 8014584:	d022      	beq.n	80145cc <f_open+0x2fc>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014586:	697b      	ldr	r3, [r7, #20]
 8014588:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801458a:	4618      	mov	r0, r3
 801458c:	f7fe fd10 	bl	8012fb0 <clust2sect>
 8014590:	6478      	str	r0, [r7, #68]	@ 0x44
 8014592:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014594:	2b00      	cmp	r3, #0
 8014596:	d103      	bne.n	80145a0 <f_open+0x2d0>
						res = FR_INT_ERR;
 8014598:	2302      	movs	r3, #2
 801459a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801459e:	e015      	b.n	80145cc <f_open+0x2fc>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80145a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80145a2:	0a5a      	lsrs	r2, r3, #9
 80145a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80145a6:	441a      	add	r2, r3
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	61da      	str	r2, [r3, #28]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80145ac:	697b      	ldr	r3, [r7, #20]
 80145ae:	7858      	ldrb	r0, [r3, #1]
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	69da      	ldr	r2, [r3, #28]
 80145ba:	2301      	movs	r3, #1
 80145bc:	f7fe faba 	bl	8012b34 <disk_read>
 80145c0:	4603      	mov	r3, r0
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d002      	beq.n	80145cc <f_open+0x2fc>
 80145c6:	2301      	movs	r3, #1
 80145c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80145cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d002      	beq.n	80145da <f_open+0x30a>
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	2200      	movs	r2, #0
 80145d8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80145da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80145de:	4618      	mov	r0, r3
 80145e0:	3760      	adds	r7, #96	@ 0x60
 80145e2:	46bd      	mov	sp, r7
 80145e4:	bd80      	pop	{r7, pc}

080145e6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80145e6:	b580      	push	{r7, lr}
 80145e8:	b08c      	sub	sp, #48	@ 0x30
 80145ea:	af00      	add	r7, sp, #0
 80145ec:	60f8      	str	r0, [r7, #12]
 80145ee:	60b9      	str	r1, [r7, #8]
 80145f0:	607a      	str	r2, [r7, #4]
 80145f2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80145f4:	68bb      	ldr	r3, [r7, #8]
 80145f6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80145f8:	683b      	ldr	r3, [r7, #0]
 80145fa:	2200      	movs	r2, #0
 80145fc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	f107 0210 	add.w	r2, r7, #16
 8014604:	4611      	mov	r1, r2
 8014606:	4618      	mov	r0, r3
 8014608:	f7ff fde8 	bl	80141dc <validate>
 801460c:	4603      	mov	r3, r0
 801460e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014612:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014616:	2b00      	cmp	r3, #0
 8014618:	d107      	bne.n	801462a <f_write+0x44>
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	7c5b      	ldrb	r3, [r3, #17]
 801461e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8014622:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014626:	2b00      	cmp	r3, #0
 8014628:	d002      	beq.n	8014630 <f_write+0x4a>
 801462a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801462e:	e14b      	b.n	80148c8 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	7c1b      	ldrb	r3, [r3, #16]
 8014634:	f003 0302 	and.w	r3, r3, #2
 8014638:	2b00      	cmp	r3, #0
 801463a:	d101      	bne.n	8014640 <f_write+0x5a>
 801463c:	2307      	movs	r3, #7
 801463e:	e143      	b.n	80148c8 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	695a      	ldr	r2, [r3, #20]
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	441a      	add	r2, r3
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	695b      	ldr	r3, [r3, #20]
 801464c:	429a      	cmp	r2, r3
 801464e:	f080 812d 	bcs.w	80148ac <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	695b      	ldr	r3, [r3, #20]
 8014656:	43db      	mvns	r3, r3
 8014658:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801465a:	e127      	b.n	80148ac <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	695b      	ldr	r3, [r3, #20]
 8014660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014664:	2b00      	cmp	r3, #0
 8014666:	f040 80e3 	bne.w	8014830 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	695b      	ldr	r3, [r3, #20]
 801466e:	0a5b      	lsrs	r3, r3, #9
 8014670:	693a      	ldr	r2, [r7, #16]
 8014672:	8952      	ldrh	r2, [r2, #10]
 8014674:	3a01      	subs	r2, #1
 8014676:	4013      	ands	r3, r2
 8014678:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801467a:	69bb      	ldr	r3, [r7, #24]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d143      	bne.n	8014708 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	695b      	ldr	r3, [r3, #20]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d10c      	bne.n	80146a2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	689b      	ldr	r3, [r3, #8]
 801468c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801468e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014690:	2b00      	cmp	r3, #0
 8014692:	d11a      	bne.n	80146ca <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	2100      	movs	r1, #0
 8014698:	4618      	mov	r0, r3
 801469a:	f7fe fe9e 	bl	80133da <create_chain>
 801469e:	62b8      	str	r0, [r7, #40]	@ 0x28
 80146a0:	e013      	b.n	80146ca <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d007      	beq.n	80146ba <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	695b      	ldr	r3, [r3, #20]
 80146ae:	4619      	mov	r1, r3
 80146b0:	68f8      	ldr	r0, [r7, #12]
 80146b2:	f7fe ff2a 	bl	801350a <clmt_clust>
 80146b6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80146b8:	e007      	b.n	80146ca <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80146ba:	68fa      	ldr	r2, [r7, #12]
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	699b      	ldr	r3, [r3, #24]
 80146c0:	4619      	mov	r1, r3
 80146c2:	4610      	mov	r0, r2
 80146c4:	f7fe fe89 	bl	80133da <create_chain>
 80146c8:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80146ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	f000 80f2 	beq.w	80148b6 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80146d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146d4:	2b01      	cmp	r3, #1
 80146d6:	d104      	bne.n	80146e2 <f_write+0xfc>
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	2202      	movs	r2, #2
 80146dc:	745a      	strb	r2, [r3, #17]
 80146de:	2302      	movs	r3, #2
 80146e0:	e0f2      	b.n	80148c8 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80146e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146e8:	d104      	bne.n	80146f4 <f_write+0x10e>
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	2201      	movs	r2, #1
 80146ee:	745a      	strb	r2, [r3, #17]
 80146f0:	2301      	movs	r3, #1
 80146f2:	e0e9      	b.n	80148c8 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80146f8:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	689b      	ldr	r3, [r3, #8]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d102      	bne.n	8014708 <f_write+0x122>
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014706:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	7c1b      	ldrb	r3, [r3, #16]
 801470c:	b25b      	sxtb	r3, r3
 801470e:	2b00      	cmp	r3, #0
 8014710:	da18      	bge.n	8014744 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014712:	693b      	ldr	r3, [r7, #16]
 8014714:	7858      	ldrb	r0, [r3, #1]
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	69da      	ldr	r2, [r3, #28]
 8014720:	2301      	movs	r3, #1
 8014722:	f7fe fa27 	bl	8012b74 <disk_write>
 8014726:	4603      	mov	r3, r0
 8014728:	2b00      	cmp	r3, #0
 801472a:	d004      	beq.n	8014736 <f_write+0x150>
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	2201      	movs	r2, #1
 8014730:	745a      	strb	r2, [r3, #17]
 8014732:	2301      	movs	r3, #1
 8014734:	e0c8      	b.n	80148c8 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	7c1b      	ldrb	r3, [r3, #16]
 801473a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801473e:	b2da      	uxtb	r2, r3
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014744:	693a      	ldr	r2, [r7, #16]
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	699b      	ldr	r3, [r3, #24]
 801474a:	4619      	mov	r1, r3
 801474c:	4610      	mov	r0, r2
 801474e:	f7fe fc2f 	bl	8012fb0 <clust2sect>
 8014752:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014754:	697b      	ldr	r3, [r7, #20]
 8014756:	2b00      	cmp	r3, #0
 8014758:	d104      	bne.n	8014764 <f_write+0x17e>
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	2202      	movs	r2, #2
 801475e:	745a      	strb	r2, [r3, #17]
 8014760:	2302      	movs	r3, #2
 8014762:	e0b1      	b.n	80148c8 <f_write+0x2e2>
			sect += csect;
 8014764:	697a      	ldr	r2, [r7, #20]
 8014766:	69bb      	ldr	r3, [r7, #24]
 8014768:	4413      	add	r3, r2
 801476a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	0a5b      	lsrs	r3, r3, #9
 8014770:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8014772:	6a3b      	ldr	r3, [r7, #32]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d03c      	beq.n	80147f2 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014778:	69ba      	ldr	r2, [r7, #24]
 801477a:	6a3b      	ldr	r3, [r7, #32]
 801477c:	4413      	add	r3, r2
 801477e:	693a      	ldr	r2, [r7, #16]
 8014780:	8952      	ldrh	r2, [r2, #10]
 8014782:	4293      	cmp	r3, r2
 8014784:	d905      	bls.n	8014792 <f_write+0x1ac>
					cc = fs->csize - csect;
 8014786:	693b      	ldr	r3, [r7, #16]
 8014788:	895b      	ldrh	r3, [r3, #10]
 801478a:	461a      	mov	r2, r3
 801478c:	69bb      	ldr	r3, [r7, #24]
 801478e:	1ad3      	subs	r3, r2, r3
 8014790:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014792:	693b      	ldr	r3, [r7, #16]
 8014794:	7858      	ldrb	r0, [r3, #1]
 8014796:	6a3b      	ldr	r3, [r7, #32]
 8014798:	697a      	ldr	r2, [r7, #20]
 801479a:	69f9      	ldr	r1, [r7, #28]
 801479c:	f7fe f9ea 	bl	8012b74 <disk_write>
 80147a0:	4603      	mov	r3, r0
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d004      	beq.n	80147b0 <f_write+0x1ca>
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	2201      	movs	r2, #1
 80147aa:	745a      	strb	r2, [r3, #17]
 80147ac:	2301      	movs	r3, #1
 80147ae:	e08b      	b.n	80148c8 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	69da      	ldr	r2, [r3, #28]
 80147b4:	697b      	ldr	r3, [r7, #20]
 80147b6:	1ad3      	subs	r3, r2, r3
 80147b8:	6a3a      	ldr	r2, [r7, #32]
 80147ba:	429a      	cmp	r2, r3
 80147bc:	d915      	bls.n	80147ea <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	69da      	ldr	r2, [r3, #28]
 80147c8:	697b      	ldr	r3, [r7, #20]
 80147ca:	1ad3      	subs	r3, r2, r3
 80147cc:	025b      	lsls	r3, r3, #9
 80147ce:	69fa      	ldr	r2, [r7, #28]
 80147d0:	4413      	add	r3, r2
 80147d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80147d6:	4619      	mov	r1, r3
 80147d8:	f7fe fa8d 	bl	8012cf6 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	7c1b      	ldrb	r3, [r3, #16]
 80147e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80147e4:	b2da      	uxtb	r2, r3
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80147ea:	6a3b      	ldr	r3, [r7, #32]
 80147ec:	025b      	lsls	r3, r3, #9
 80147ee:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80147f0:	e03f      	b.n	8014872 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	69db      	ldr	r3, [r3, #28]
 80147f6:	697a      	ldr	r2, [r7, #20]
 80147f8:	429a      	cmp	r2, r3
 80147fa:	d016      	beq.n	801482a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	695a      	ldr	r2, [r3, #20]
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014804:	429a      	cmp	r2, r3
 8014806:	d210      	bcs.n	801482a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014808:	693b      	ldr	r3, [r7, #16]
 801480a:	7858      	ldrb	r0, [r3, #1]
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8014812:	2301      	movs	r3, #1
 8014814:	697a      	ldr	r2, [r7, #20]
 8014816:	f7fe f98d 	bl	8012b34 <disk_read>
 801481a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801481c:	2b00      	cmp	r3, #0
 801481e:	d004      	beq.n	801482a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	2201      	movs	r2, #1
 8014824:	745a      	strb	r2, [r3, #17]
 8014826:	2301      	movs	r3, #1
 8014828:	e04e      	b.n	80148c8 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	697a      	ldr	r2, [r7, #20]
 801482e:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	695b      	ldr	r3, [r3, #20]
 8014834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014838:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801483c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801483e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	429a      	cmp	r2, r3
 8014844:	d901      	bls.n	801484a <f_write+0x264>
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	695b      	ldr	r3, [r3, #20]
 8014854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014858:	4413      	add	r3, r2
 801485a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801485c:	69f9      	ldr	r1, [r7, #28]
 801485e:	4618      	mov	r0, r3
 8014860:	f7fe fa49 	bl	8012cf6 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	7c1b      	ldrb	r3, [r3, #16]
 8014868:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801486c:	b2da      	uxtb	r2, r3
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	741a      	strb	r2, [r3, #16]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014872:	69fa      	ldr	r2, [r7, #28]
 8014874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014876:	4413      	add	r3, r2
 8014878:	61fb      	str	r3, [r7, #28]
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	695a      	ldr	r2, [r3, #20]
 801487e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014880:	441a      	add	r2, r3
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	615a      	str	r2, [r3, #20]
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	68da      	ldr	r2, [r3, #12]
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	695b      	ldr	r3, [r3, #20]
 801488e:	429a      	cmp	r2, r3
 8014890:	bf38      	it	cc
 8014892:	461a      	movcc	r2, r3
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	60da      	str	r2, [r3, #12]
 8014898:	683b      	ldr	r3, [r7, #0]
 801489a:	681a      	ldr	r2, [r3, #0]
 801489c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801489e:	441a      	add	r2, r3
 80148a0:	683b      	ldr	r3, [r7, #0]
 80148a2:	601a      	str	r2, [r3, #0]
 80148a4:	687a      	ldr	r2, [r7, #4]
 80148a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148a8:	1ad3      	subs	r3, r2, r3
 80148aa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	f47f aed4 	bne.w	801465c <f_write+0x76>
 80148b4:	e000      	b.n	80148b8 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80148b6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	7c1b      	ldrb	r3, [r3, #16]
 80148bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80148c0:	b2da      	uxtb	r2, r3
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 80148c6:	2300      	movs	r3, #0
}
 80148c8:	4618      	mov	r0, r3
 80148ca:	3730      	adds	r7, #48	@ 0x30
 80148cc:	46bd      	mov	sp, r7
 80148ce:	bd80      	pop	{r7, pc}

080148d0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b086      	sub	sp, #24
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	f107 0208 	add.w	r2, r7, #8
 80148de:	4611      	mov	r1, r2
 80148e0:	4618      	mov	r0, r3
 80148e2:	f7ff fc7b 	bl	80141dc <validate>
 80148e6:	4603      	mov	r3, r0
 80148e8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80148ea:	7dfb      	ldrb	r3, [r7, #23]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d168      	bne.n	80149c2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	7c1b      	ldrb	r3, [r3, #16]
 80148f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d062      	beq.n	80149c2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	7c1b      	ldrb	r3, [r3, #16]
 8014900:	b25b      	sxtb	r3, r3
 8014902:	2b00      	cmp	r3, #0
 8014904:	da15      	bge.n	8014932 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014906:	68bb      	ldr	r3, [r7, #8]
 8014908:	7858      	ldrb	r0, [r3, #1]
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	69da      	ldr	r2, [r3, #28]
 8014914:	2301      	movs	r3, #1
 8014916:	f7fe f92d 	bl	8012b74 <disk_write>
 801491a:	4603      	mov	r3, r0
 801491c:	2b00      	cmp	r3, #0
 801491e:	d001      	beq.n	8014924 <f_sync+0x54>
 8014920:	2301      	movs	r3, #1
 8014922:	e04f      	b.n	80149c4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	7c1b      	ldrb	r3, [r3, #16]
 8014928:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801492c:	b2da      	uxtb	r2, r3
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014932:	f7fd fcd9 	bl	80122e8 <get_fattime>
 8014936:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014938:	68ba      	ldr	r2, [r7, #8]
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	6a1b      	ldr	r3, [r3, #32]
 801493e:	4619      	mov	r1, r3
 8014940:	4610      	mov	r0, r2
 8014942:	f7fe fa9a 	bl	8012e7a <move_window>
 8014946:	4603      	mov	r3, r0
 8014948:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801494a:	7dfb      	ldrb	r3, [r7, #23]
 801494c:	2b00      	cmp	r3, #0
 801494e:	d138      	bne.n	80149c2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014954:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	330b      	adds	r3, #11
 801495a:	781a      	ldrb	r2, [r3, #0]
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	330b      	adds	r3, #11
 8014960:	f042 0220 	orr.w	r2, r2, #32
 8014964:	b2d2      	uxtb	r2, r2
 8014966:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	6818      	ldr	r0, [r3, #0]
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	689b      	ldr	r3, [r3, #8]
 8014970:	461a      	mov	r2, r3
 8014972:	68f9      	ldr	r1, [r7, #12]
 8014974:	f7fe ffa3 	bl	80138be <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	f103 021c 	add.w	r2, r3, #28
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	68db      	ldr	r3, [r3, #12]
 8014982:	4619      	mov	r1, r3
 8014984:	4610      	mov	r0, r2
 8014986:	f7fe f98a 	bl	8012c9e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	3316      	adds	r3, #22
 801498e:	6939      	ldr	r1, [r7, #16]
 8014990:	4618      	mov	r0, r3
 8014992:	f7fe f984 	bl	8012c9e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	3312      	adds	r3, #18
 801499a:	2100      	movs	r1, #0
 801499c:	4618      	mov	r0, r3
 801499e:	f7fe f963 	bl	8012c68 <st_word>
					fs->wflag = 1;
 80149a2:	68bb      	ldr	r3, [r7, #8]
 80149a4:	2201      	movs	r2, #1
 80149a6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80149a8:	68bb      	ldr	r3, [r7, #8]
 80149aa:	4618      	mov	r0, r3
 80149ac:	f7fe fa92 	bl	8012ed4 <sync_fs>
 80149b0:	4603      	mov	r3, r0
 80149b2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	7c1b      	ldrb	r3, [r3, #16]
 80149b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80149bc:	b2da      	uxtb	r2, r3
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80149c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80149c4:	4618      	mov	r0, r3
 80149c6:	3718      	adds	r7, #24
 80149c8:	46bd      	mov	sp, r7
 80149ca:	bd80      	pop	{r7, pc}

080149cc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80149cc:	b580      	push	{r7, lr}
 80149ce:	b084      	sub	sp, #16
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80149d4:	6878      	ldr	r0, [r7, #4]
 80149d6:	f7ff ff7b 	bl	80148d0 <f_sync>
 80149da:	4603      	mov	r3, r0
 80149dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80149de:	7bfb      	ldrb	r3, [r7, #15]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d10e      	bne.n	8014a02 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	f107 0208 	add.w	r2, r7, #8
 80149ea:	4611      	mov	r1, r2
 80149ec:	4618      	mov	r0, r3
 80149ee:	f7ff fbf5 	bl	80141dc <validate>
 80149f2:	4603      	mov	r3, r0
 80149f4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80149f6:	7bfb      	ldrb	r3, [r7, #15]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d102      	bne.n	8014a02 <f_close+0x36>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	2200      	movs	r2, #0
 8014a00:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8014a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a04:	4618      	mov	r0, r3
 8014a06:	3710      	adds	r7, #16
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	bd80      	pop	{r7, pc}

08014a0c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b096      	sub	sp, #88	@ 0x58
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014a14:	f107 010c 	add.w	r1, r7, #12
 8014a18:	1d3b      	adds	r3, r7, #4
 8014a1a:	2202      	movs	r2, #2
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	f7ff f995 	bl	8013d4c <find_volume>
 8014a22:	4603      	mov	r3, r0
 8014a24:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 8014a2c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	f040 80ec 	bne.w	8014c0e <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8014a36:	687a      	ldr	r2, [r7, #4]
 8014a38:	f107 0310 	add.w	r3, r7, #16
 8014a3c:	4611      	mov	r1, r2
 8014a3e:	4618      	mov	r0, r3
 8014a40:	f7ff f878 	bl	8013b34 <follow_path>
 8014a44:	4603      	mov	r3, r0
 8014a46:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8014a4a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d102      	bne.n	8014a58 <f_mkdir+0x4c>
 8014a52:	2308      	movs	r3, #8
 8014a54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8014a58:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014a5c:	2b04      	cmp	r3, #4
 8014a5e:	f040 80d6 	bne.w	8014c0e <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8014a62:	f107 0310 	add.w	r3, r7, #16
 8014a66:	2100      	movs	r1, #0
 8014a68:	4618      	mov	r0, r3
 8014a6a:	f7fe fcb6 	bl	80133da <create_chain>
 8014a6e:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	895b      	ldrh	r3, [r3, #10]
 8014a74:	025b      	lsls	r3, r3, #9
 8014a76:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 8014a78:	2300      	movs	r3, #0
 8014a7a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8014a7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d102      	bne.n	8014a8a <f_mkdir+0x7e>
 8014a84:	2307      	movs	r3, #7
 8014a86:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8014a8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014a8c:	2b01      	cmp	r3, #1
 8014a8e:	d102      	bne.n	8014a96 <f_mkdir+0x8a>
 8014a90:	2302      	movs	r3, #2
 8014a92:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014a96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a9c:	d102      	bne.n	8014aa4 <f_mkdir+0x98>
 8014a9e:	2301      	movs	r3, #1
 8014aa0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8014aa4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d106      	bne.n	8014aba <f_mkdir+0xae>
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	4618      	mov	r0, r3
 8014ab0:	f7fe f99f 	bl	8012df2 <sync_window>
 8014ab4:	4603      	mov	r3, r0
 8014ab6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 8014aba:	f7fd fc15 	bl	80122e8 <get_fattime>
 8014abe:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8014ac0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d16a      	bne.n	8014b9e <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014acc:	4618      	mov	r0, r3
 8014ace:	f7fe fa6f 	bl	8012fb0 <clust2sect>
 8014ad2:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	3330      	adds	r3, #48	@ 0x30
 8014ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 8014ada:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014ade:	2100      	movs	r1, #0
 8014ae0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8014ae2:	f7fe f929 	bl	8012d38 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8014ae6:	220b      	movs	r2, #11
 8014ae8:	2120      	movs	r1, #32
 8014aea:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8014aec:	f7fe f924 	bl	8012d38 <mem_set>
					dir[DIR_Name] = '.';
 8014af0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014af2:	222e      	movs	r2, #46	@ 0x2e
 8014af4:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8014af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014af8:	330b      	adds	r3, #11
 8014afa:	2210      	movs	r2, #16
 8014afc:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8014afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014b00:	3316      	adds	r3, #22
 8014b02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014b04:	4618      	mov	r0, r3
 8014b06:	f7fe f8ca 	bl	8012c9e <st_dword>
					st_clust(fs, dir, dcl);
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014b0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014b10:	4618      	mov	r0, r3
 8014b12:	f7fe fed4 	bl	80138be <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8014b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014b18:	3320      	adds	r3, #32
 8014b1a:	2220      	movs	r2, #32
 8014b1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f7fe f8e9 	bl	8012cf6 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8014b24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014b26:	3321      	adds	r3, #33	@ 0x21
 8014b28:	222e      	movs	r2, #46	@ 0x2e
 8014b2a:	701a      	strb	r2, [r3, #0]
 8014b2c:	69bb      	ldr	r3, [r7, #24]
 8014b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	781b      	ldrb	r3, [r3, #0]
 8014b34:	2b03      	cmp	r3, #3
 8014b36:	d106      	bne.n	8014b46 <f_mkdir+0x13a>
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014b3e:	429a      	cmp	r2, r3
 8014b40:	d101      	bne.n	8014b46 <f_mkdir+0x13a>
 8014b42:	2300      	movs	r3, #0
 8014b44:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8014b46:	68f8      	ldr	r0, [r7, #12]
 8014b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014b4a:	3320      	adds	r3, #32
 8014b4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014b4e:	4619      	mov	r1, r3
 8014b50:	f7fe feb5 	bl	80138be <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	895b      	ldrh	r3, [r3, #10]
 8014b58:	653b      	str	r3, [r7, #80]	@ 0x50
 8014b5a:	e01b      	b.n	8014b94 <f_mkdir+0x188>
					fs->winsect = dsc++;
 8014b5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014b5e:	1c5a      	adds	r2, r3, #1
 8014b60:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8014b62:	68fa      	ldr	r2, [r7, #12]
 8014b64:	62d3      	str	r3, [r2, #44]	@ 0x2c
					fs->wflag = 1;
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	2201      	movs	r2, #1
 8014b6a:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f7fe f93f 	bl	8012df2 <sync_window>
 8014b74:	4603      	mov	r3, r0
 8014b76:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 8014b7a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d10c      	bne.n	8014b9c <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8014b82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014b86:	2100      	movs	r1, #0
 8014b88:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8014b8a:	f7fe f8d5 	bl	8012d38 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8014b8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014b90:	3b01      	subs	r3, #1
 8014b92:	653b      	str	r3, [r7, #80]	@ 0x50
 8014b94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d1e0      	bne.n	8014b5c <f_mkdir+0x150>
 8014b9a:	e000      	b.n	8014b9e <f_mkdir+0x192>
					if (res != FR_OK) break;
 8014b9c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8014b9e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d107      	bne.n	8014bb6 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8014ba6:	f107 0310 	add.w	r3, r7, #16
 8014baa:	4618      	mov	r0, r3
 8014bac:	f7fe fefc 	bl	80139a8 <dir_register>
 8014bb0:	4603      	mov	r3, r0
 8014bb2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 8014bb6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d120      	bne.n	8014c00 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8014bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8014bc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014bc4:	3316      	adds	r3, #22
 8014bc6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014bc8:	4618      	mov	r0, r3
 8014bca:	f7fe f868 	bl	8012c9e <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014bd2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	f7fe fe72 	bl	80138be <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8014bda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014bdc:	330b      	adds	r3, #11
 8014bde:	2210      	movs	r2, #16
 8014be0:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	2201      	movs	r2, #1
 8014be6:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8014be8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d10e      	bne.n	8014c0e <f_mkdir+0x202>
					res = sync_fs(fs);
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	f7fe f96e 	bl	8012ed4 <sync_fs>
 8014bf8:	4603      	mov	r3, r0
 8014bfa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8014bfe:	e006      	b.n	8014c0e <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8014c00:	f107 0310 	add.w	r3, r7, #16
 8014c04:	2200      	movs	r2, #0
 8014c06:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014c08:	4618      	mov	r0, r3
 8014c0a:	f7fe fb81 	bl	8013310 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014c0e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8014c12:	4618      	mov	r0, r3
 8014c14:	3758      	adds	r7, #88	@ 0x58
 8014c16:	46bd      	mov	sp, r7
 8014c18:	bd80      	pop	{r7, pc}
	...

08014c1c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8014c1c:	b590      	push	{r4, r7, lr}
 8014c1e:	b09d      	sub	sp, #116	@ 0x74
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	60f8      	str	r0, [r7, #12]
 8014c24:	607a      	str	r2, [r7, #4]
 8014c26:	603b      	str	r3, [r7, #0]
 8014c28:	460b      	mov	r3, r1
 8014c2a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8014c2c:	2301      	movs	r3, #1
 8014c2e:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8014c30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014c34:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8014c36:	f107 030c 	add.w	r3, r7, #12
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	f7fe ffeb 	bl	8013c16 <get_ldnumber>
 8014c40:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	da02      	bge.n	8014c4e <f_mkfs+0x32>
 8014c48:	230b      	movs	r3, #11
 8014c4a:	f000 bc0d 	b.w	8015468 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8014c4e:	4a94      	ldr	r2, [pc, #592]	@ (8014ea0 <f_mkfs+0x284>)
 8014c50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d005      	beq.n	8014c66 <f_mkfs+0x4a>
 8014c5a:	4a91      	ldr	r2, [pc, #580]	@ (8014ea0 <f_mkfs+0x284>)
 8014c5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014c62:	2200      	movs	r2, #0
 8014c64:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8014c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014c68:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8014c6c:	2300      	movs	r3, #0
 8014c6e:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8014c72:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8014c76:	4618      	mov	r0, r3
 8014c78:	f7fd ff36 	bl	8012ae8 <disk_initialize>
 8014c7c:	4603      	mov	r3, r0
 8014c7e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8014c82:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8014c86:	f003 0301 	and.w	r3, r3, #1
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d001      	beq.n	8014c92 <f_mkfs+0x76>
 8014c8e:	2303      	movs	r3, #3
 8014c90:	e3ea      	b.n	8015468 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8014c92:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8014c96:	f003 0304 	and.w	r3, r3, #4
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d001      	beq.n	8014ca2 <f_mkfs+0x86>
 8014c9e:	230a      	movs	r3, #10
 8014ca0:	e3e2      	b.n	8015468 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8014ca2:	f107 0214 	add.w	r2, r7, #20
 8014ca6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8014caa:	2103      	movs	r1, #3
 8014cac:	4618      	mov	r0, r3
 8014cae:	f7fd ff81 	bl	8012bb4 <disk_ioctl>
 8014cb2:	4603      	mov	r3, r0
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d10c      	bne.n	8014cd2 <f_mkfs+0xb6>
 8014cb8:	697b      	ldr	r3, [r7, #20]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d009      	beq.n	8014cd2 <f_mkfs+0xb6>
 8014cbe:	697b      	ldr	r3, [r7, #20]
 8014cc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014cc4:	d805      	bhi.n	8014cd2 <f_mkfs+0xb6>
 8014cc6:	697b      	ldr	r3, [r7, #20]
 8014cc8:	1e5a      	subs	r2, r3, #1
 8014cca:	697b      	ldr	r3, [r7, #20]
 8014ccc:	4013      	ands	r3, r2
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d001      	beq.n	8014cd6 <f_mkfs+0xba>
 8014cd2:	2301      	movs	r3, #1
 8014cd4:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8014cd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014cda:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d003      	beq.n	8014cea <f_mkfs+0xce>
 8014ce2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014ce4:	687a      	ldr	r2, [r7, #4]
 8014ce6:	429a      	cmp	r2, r3
 8014ce8:	d309      	bcc.n	8014cfe <f_mkfs+0xe2>
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014cf0:	d805      	bhi.n	8014cfe <f_mkfs+0xe2>
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	1e5a      	subs	r2, r3, #1
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	4013      	ands	r3, r2
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d001      	beq.n	8014d02 <f_mkfs+0xe6>
 8014cfe:	2313      	movs	r3, #19
 8014d00:	e3b2      	b.n	8015468 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8014d02:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014d04:	687a      	ldr	r2, [r7, #4]
 8014d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8014d0a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8014d0c:	683b      	ldr	r3, [r7, #0]
 8014d0e:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8014d10:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014d12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8014d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8014d1c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8014d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d20:	fb02 f303 	mul.w	r3, r2, r3
 8014d24:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8014d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d101      	bne.n	8014d30 <f_mkfs+0x114>
 8014d2c:	230e      	movs	r3, #14
 8014d2e:	e39b      	b.n	8015468 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8014d30:	f107 0210 	add.w	r2, r7, #16
 8014d34:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8014d38:	2101      	movs	r1, #1
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	f7fd ff3a 	bl	8012bb4 <disk_ioctl>
 8014d40:	4603      	mov	r3, r0
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d001      	beq.n	8014d4a <f_mkfs+0x12e>
 8014d46:	2301      	movs	r3, #1
 8014d48:	e38e      	b.n	8015468 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8014d4a:	7afb      	ldrb	r3, [r7, #11]
 8014d4c:	f003 0308 	and.w	r3, r3, #8
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d001      	beq.n	8014d58 <f_mkfs+0x13c>
 8014d54:	2300      	movs	r3, #0
 8014d56:	e000      	b.n	8014d5a <f_mkfs+0x13e>
 8014d58:	233f      	movs	r3, #63	@ 0x3f
 8014d5a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8014d5c:	693b      	ldr	r3, [r7, #16]
 8014d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d60:	429a      	cmp	r2, r3
 8014d62:	d901      	bls.n	8014d68 <f_mkfs+0x14c>
 8014d64:	230e      	movs	r3, #14
 8014d66:	e37f      	b.n	8015468 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8014d68:	693a      	ldr	r2, [r7, #16]
 8014d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d6c:	1ad3      	subs	r3, r2, r3
 8014d6e:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8014d70:	693b      	ldr	r3, [r7, #16]
 8014d72:	2b7f      	cmp	r3, #127	@ 0x7f
 8014d74:	d801      	bhi.n	8014d7a <f_mkfs+0x15e>
 8014d76:	230e      	movs	r3, #14
 8014d78:	e376      	b.n	8015468 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	2b80      	cmp	r3, #128	@ 0x80
 8014d7e:	d901      	bls.n	8014d84 <f_mkfs+0x168>
 8014d80:	2313      	movs	r3, #19
 8014d82:	e371      	b.n	8015468 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8014d84:	7afb      	ldrb	r3, [r7, #11]
 8014d86:	f003 0302 	and.w	r3, r3, #2
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d00d      	beq.n	8014daa <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8014d8e:	7afb      	ldrb	r3, [r7, #11]
 8014d90:	f003 0307 	and.w	r3, r3, #7
 8014d94:	2b02      	cmp	r3, #2
 8014d96:	d004      	beq.n	8014da2 <f_mkfs+0x186>
 8014d98:	7afb      	ldrb	r3, [r7, #11]
 8014d9a:	f003 0301 	and.w	r3, r3, #1
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d103      	bne.n	8014daa <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8014da2:	2303      	movs	r3, #3
 8014da4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8014da8:	e009      	b.n	8014dbe <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8014daa:	7afb      	ldrb	r3, [r7, #11]
 8014dac:	f003 0301 	and.w	r3, r3, #1
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d101      	bne.n	8014db8 <f_mkfs+0x19c>
 8014db4:	2313      	movs	r3, #19
 8014db6:	e357      	b.n	8015468 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8014db8:	2302      	movs	r3, #2
 8014dba:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8014dc2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014dc6:	2b03      	cmp	r3, #3
 8014dc8:	d13c      	bne.n	8014e44 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8014dca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d11b      	bne.n	8014e08 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8014dd0:	693b      	ldr	r3, [r7, #16]
 8014dd2:	0c5b      	lsrs	r3, r3, #17
 8014dd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014dda:	2301      	movs	r3, #1
 8014ddc:	653b      	str	r3, [r7, #80]	@ 0x50
 8014dde:	e005      	b.n	8014dec <f_mkfs+0x1d0>
 8014de0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014de2:	3301      	adds	r3, #1
 8014de4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014de6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014de8:	005b      	lsls	r3, r3, #1
 8014dea:	653b      	str	r3, [r7, #80]	@ 0x50
 8014dec:	4a2d      	ldr	r2, [pc, #180]	@ (8014ea4 <f_mkfs+0x288>)
 8014dee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014df0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d007      	beq.n	8014e08 <f_mkfs+0x1ec>
 8014df8:	4a2a      	ldr	r2, [pc, #168]	@ (8014ea4 <f_mkfs+0x288>)
 8014dfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014dfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014e00:	461a      	mov	r2, r3
 8014e02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014e04:	4293      	cmp	r3, r2
 8014e06:	d2eb      	bcs.n	8014de0 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8014e08:	693a      	ldr	r2, [r7, #16]
 8014e0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014e10:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8014e12:	6a3b      	ldr	r3, [r7, #32]
 8014e14:	3302      	adds	r3, #2
 8014e16:	009a      	lsls	r2, r3, #2
 8014e18:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014e1a:	4413      	add	r3, r2
 8014e1c:	1e5a      	subs	r2, r3, #1
 8014e1e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8014e24:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8014e26:	2320      	movs	r3, #32
 8014e28:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 8014e2a:	2300      	movs	r3, #0
 8014e2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8014e2e:	6a3b      	ldr	r3, [r7, #32]
 8014e30:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8014e34:	4293      	cmp	r3, r2
 8014e36:	d903      	bls.n	8014e40 <f_mkfs+0x224>
 8014e38:	6a3b      	ldr	r3, [r7, #32]
 8014e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8014ea8 <f_mkfs+0x28c>)
 8014e3c:	4293      	cmp	r3, r2
 8014e3e:	d952      	bls.n	8014ee6 <f_mkfs+0x2ca>
 8014e40:	230e      	movs	r3, #14
 8014e42:	e311      	b.n	8015468 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8014e44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d11b      	bne.n	8014e82 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8014e4a:	693b      	ldr	r3, [r7, #16]
 8014e4c:	0b1b      	lsrs	r3, r3, #12
 8014e4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8014e50:	2300      	movs	r3, #0
 8014e52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014e54:	2301      	movs	r3, #1
 8014e56:	653b      	str	r3, [r7, #80]	@ 0x50
 8014e58:	e005      	b.n	8014e66 <f_mkfs+0x24a>
 8014e5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014e5c:	3301      	adds	r3, #1
 8014e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014e60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014e62:	005b      	lsls	r3, r3, #1
 8014e64:	653b      	str	r3, [r7, #80]	@ 0x50
 8014e66:	4a11      	ldr	r2, [pc, #68]	@ (8014eac <f_mkfs+0x290>)
 8014e68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014e6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d007      	beq.n	8014e82 <f_mkfs+0x266>
 8014e72:	4a0e      	ldr	r2, [pc, #56]	@ (8014eac <f_mkfs+0x290>)
 8014e74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014e76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014e7a:	461a      	mov	r2, r3
 8014e7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014e7e:	4293      	cmp	r3, r2
 8014e80:	d2eb      	bcs.n	8014e5a <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8014e82:	693a      	ldr	r2, [r7, #16]
 8014e84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8014e8a:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8014e8c:	6a3b      	ldr	r3, [r7, #32]
 8014e8e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8014e92:	4293      	cmp	r3, r2
 8014e94:	d90c      	bls.n	8014eb0 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8014e96:	6a3b      	ldr	r3, [r7, #32]
 8014e98:	3302      	adds	r3, #2
 8014e9a:	005b      	lsls	r3, r3, #1
 8014e9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014e9e:	e012      	b.n	8014ec6 <f_mkfs+0x2aa>
 8014ea0:	20001d64 	.word	0x20001d64
 8014ea4:	0801d4fc 	.word	0x0801d4fc
 8014ea8:	0ffffff5 	.word	0x0ffffff5
 8014eac:	0801d50c 	.word	0x0801d50c
				} else {
					fmt = FS_FAT12;
 8014eb0:	2301      	movs	r3, #1
 8014eb2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8014eb6:	6a3a      	ldr	r2, [r7, #32]
 8014eb8:	4613      	mov	r3, r2
 8014eba:	005b      	lsls	r3, r3, #1
 8014ebc:	4413      	add	r3, r2
 8014ebe:	3301      	adds	r3, #1
 8014ec0:	085b      	lsrs	r3, r3, #1
 8014ec2:	3303      	adds	r3, #3
 8014ec4:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8014ec6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8014ec8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014eca:	4413      	add	r3, r2
 8014ecc:	1e5a      	subs	r2, r3, #1
 8014ece:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8014ed4:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8014ed6:	2301      	movs	r3, #1
 8014ed8:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8014eda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014edc:	015a      	lsls	r2, r3, #5
 8014ede:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8014ee4:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8014ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014ee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014eea:	4413      	add	r3, r2
 8014eec:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8014eee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014ef0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014ef2:	fb03 f202 	mul.w	r2, r3, r2
 8014ef6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014ef8:	4413      	add	r3, r2
 8014efa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8014efc:	4413      	add	r3, r2
 8014efe:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8014f00:	697a      	ldr	r2, [r7, #20]
 8014f02:	69fb      	ldr	r3, [r7, #28]
 8014f04:	4413      	add	r3, r2
 8014f06:	1e5a      	subs	r2, r3, #1
 8014f08:	697b      	ldr	r3, [r7, #20]
 8014f0a:	425b      	negs	r3, r3
 8014f0c:	401a      	ands	r2, r3
 8014f0e:	69fb      	ldr	r3, [r7, #28]
 8014f10:	1ad3      	subs	r3, r2, r3
 8014f12:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8014f14:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014f18:	2b03      	cmp	r3, #3
 8014f1a:	d108      	bne.n	8014f2e <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8014f1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014f1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014f20:	4413      	add	r3, r2
 8014f22:	657b      	str	r3, [r7, #84]	@ 0x54
 8014f24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014f26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014f28:	4413      	add	r3, r2
 8014f2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014f2c:	e006      	b.n	8014f3c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8014f2e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014f30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8014f36:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8014f38:	4413      	add	r3, r2
 8014f3a:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8014f3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014f3e:	011a      	lsls	r2, r3, #4
 8014f40:	69fb      	ldr	r3, [r7, #28]
 8014f42:	441a      	add	r2, r3
 8014f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f46:	1ad2      	subs	r2, r2, r3
 8014f48:	693b      	ldr	r3, [r7, #16]
 8014f4a:	429a      	cmp	r2, r3
 8014f4c:	d901      	bls.n	8014f52 <f_mkfs+0x336>
 8014f4e:	230e      	movs	r3, #14
 8014f50:	e28a      	b.n	8015468 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8014f52:	693a      	ldr	r2, [r7, #16]
 8014f54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014f56:	1ad2      	subs	r2, r2, r3
 8014f58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014f5a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014f5c:	fb01 f303 	mul.w	r3, r1, r3
 8014f60:	1ad2      	subs	r2, r2, r3
 8014f62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014f64:	1ad2      	subs	r2, r2, r3
 8014f66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8014f6c:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8014f6e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014f72:	2b03      	cmp	r3, #3
 8014f74:	d10f      	bne.n	8014f96 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8014f76:	6a3b      	ldr	r3, [r7, #32]
 8014f78:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8014f7c:	4293      	cmp	r3, r2
 8014f7e:	d80a      	bhi.n	8014f96 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d105      	bne.n	8014f92 <f_mkfs+0x376>
 8014f86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014f88:	085b      	lsrs	r3, r3, #1
 8014f8a:	607b      	str	r3, [r7, #4]
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d144      	bne.n	801501c <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8014f92:	230e      	movs	r3, #14
 8014f94:	e268      	b.n	8015468 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8014f96:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014f9a:	2b02      	cmp	r3, #2
 8014f9c:	d133      	bne.n	8015006 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8014f9e:	6a3b      	ldr	r3, [r7, #32]
 8014fa0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8014fa4:	4293      	cmp	r3, r2
 8014fa6:	d91e      	bls.n	8014fe6 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d107      	bne.n	8014fbe <f_mkfs+0x3a2>
 8014fae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014fb0:	005b      	lsls	r3, r3, #1
 8014fb2:	2b40      	cmp	r3, #64	@ 0x40
 8014fb4:	d803      	bhi.n	8014fbe <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8014fb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014fb8:	005b      	lsls	r3, r3, #1
 8014fba:	607b      	str	r3, [r7, #4]
 8014fbc:	e033      	b.n	8015026 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8014fbe:	7afb      	ldrb	r3, [r7, #11]
 8014fc0:	f003 0302 	and.w	r3, r3, #2
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d003      	beq.n	8014fd0 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8014fc8:	2303      	movs	r3, #3
 8014fca:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8014fce:	e02a      	b.n	8015026 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d105      	bne.n	8014fe2 <f_mkfs+0x3c6>
 8014fd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014fd8:	005b      	lsls	r3, r3, #1
 8014fda:	607b      	str	r3, [r7, #4]
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	2b80      	cmp	r3, #128	@ 0x80
 8014fe0:	d91e      	bls.n	8015020 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8014fe2:	230e      	movs	r3, #14
 8014fe4:	e240      	b.n	8015468 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8014fe6:	6a3b      	ldr	r3, [r7, #32]
 8014fe8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8014fec:	4293      	cmp	r3, r2
 8014fee:	d80a      	bhi.n	8015006 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d105      	bne.n	8015002 <f_mkfs+0x3e6>
 8014ff6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014ff8:	005b      	lsls	r3, r3, #1
 8014ffa:	607b      	str	r3, [r7, #4]
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	2b80      	cmp	r3, #128	@ 0x80
 8015000:	d910      	bls.n	8015024 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8015002:	230e      	movs	r3, #14
 8015004:	e230      	b.n	8015468 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8015006:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801500a:	2b01      	cmp	r3, #1
 801500c:	d10c      	bne.n	8015028 <f_mkfs+0x40c>
 801500e:	6a3b      	ldr	r3, [r7, #32]
 8015010:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8015014:	4293      	cmp	r3, r2
 8015016:	d907      	bls.n	8015028 <f_mkfs+0x40c>
 8015018:	230e      	movs	r3, #14
 801501a:	e225      	b.n	8015468 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 801501c:	bf00      	nop
 801501e:	e6ce      	b.n	8014dbe <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015020:	bf00      	nop
 8015022:	e6cc      	b.n	8014dbe <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015024:	bf00      	nop
			pau = au;
 8015026:	e6ca      	b.n	8014dbe <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8015028:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 801502a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801502c:	461a      	mov	r2, r3
 801502e:	2100      	movs	r1, #0
 8015030:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015032:	f7fd fe81 	bl	8012d38 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8015036:	220b      	movs	r2, #11
 8015038:	49b2      	ldr	r1, [pc, #712]	@ (8015304 <f_mkfs+0x6e8>)
 801503a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801503c:	f7fd fe5b 	bl	8012cf6 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8015040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015042:	330b      	adds	r3, #11
 8015044:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8015046:	4611      	mov	r1, r2
 8015048:	4618      	mov	r0, r3
 801504a:	f7fd fe0d 	bl	8012c68 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 801504e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015050:	330d      	adds	r3, #13
 8015052:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015054:	b2d2      	uxtb	r2, r2
 8015056:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8015058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801505a:	330e      	adds	r3, #14
 801505c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801505e:	b292      	uxth	r2, r2
 8015060:	4611      	mov	r1, r2
 8015062:	4618      	mov	r0, r3
 8015064:	f7fd fe00 	bl	8012c68 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8015068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801506a:	3310      	adds	r3, #16
 801506c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801506e:	b2d2      	uxtb	r2, r2
 8015070:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8015072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015074:	f103 0211 	add.w	r2, r3, #17
 8015078:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801507c:	2b03      	cmp	r3, #3
 801507e:	d002      	beq.n	8015086 <f_mkfs+0x46a>
 8015080:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015082:	b29b      	uxth	r3, r3
 8015084:	e000      	b.n	8015088 <f_mkfs+0x46c>
 8015086:	2300      	movs	r3, #0
 8015088:	4619      	mov	r1, r3
 801508a:	4610      	mov	r0, r2
 801508c:	f7fd fdec 	bl	8012c68 <st_word>
		if (sz_vol < 0x10000) {
 8015090:	693b      	ldr	r3, [r7, #16]
 8015092:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015096:	d208      	bcs.n	80150aa <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8015098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801509a:	3313      	adds	r3, #19
 801509c:	693a      	ldr	r2, [r7, #16]
 801509e:	b292      	uxth	r2, r2
 80150a0:	4611      	mov	r1, r2
 80150a2:	4618      	mov	r0, r3
 80150a4:	f7fd fde0 	bl	8012c68 <st_word>
 80150a8:	e006      	b.n	80150b8 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 80150aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150ac:	3320      	adds	r3, #32
 80150ae:	693a      	ldr	r2, [r7, #16]
 80150b0:	4611      	mov	r1, r2
 80150b2:	4618      	mov	r0, r3
 80150b4:	f7fd fdf3 	bl	8012c9e <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80150b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150ba:	3315      	adds	r3, #21
 80150bc:	22f8      	movs	r2, #248	@ 0xf8
 80150be:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 80150c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150c2:	3318      	adds	r3, #24
 80150c4:	213f      	movs	r1, #63	@ 0x3f
 80150c6:	4618      	mov	r0, r3
 80150c8:	f7fd fdce 	bl	8012c68 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 80150cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150ce:	331a      	adds	r3, #26
 80150d0:	21ff      	movs	r1, #255	@ 0xff
 80150d2:	4618      	mov	r0, r3
 80150d4:	f7fd fdc8 	bl	8012c68 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 80150d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150da:	331c      	adds	r3, #28
 80150dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80150de:	4618      	mov	r0, r3
 80150e0:	f7fd fddd 	bl	8012c9e <st_dword>
		if (fmt == FS_FAT32) {
 80150e4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80150e8:	2b03      	cmp	r3, #3
 80150ea:	d131      	bne.n	8015150 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 80150ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150ee:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 80150f2:	f7fd f8f9 	bl	80122e8 <get_fattime>
 80150f6:	4603      	mov	r3, r0
 80150f8:	4619      	mov	r1, r3
 80150fa:	4620      	mov	r0, r4
 80150fc:	f7fd fdcf 	bl	8012c9e <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8015100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015102:	3324      	adds	r3, #36	@ 0x24
 8015104:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8015106:	4618      	mov	r0, r3
 8015108:	f7fd fdc9 	bl	8012c9e <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 801510c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801510e:	332c      	adds	r3, #44	@ 0x2c
 8015110:	2102      	movs	r1, #2
 8015112:	4618      	mov	r0, r3
 8015114:	f7fd fdc3 	bl	8012c9e <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8015118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801511a:	3330      	adds	r3, #48	@ 0x30
 801511c:	2101      	movs	r1, #1
 801511e:	4618      	mov	r0, r3
 8015120:	f7fd fda2 	bl	8012c68 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8015124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015126:	3332      	adds	r3, #50	@ 0x32
 8015128:	2106      	movs	r1, #6
 801512a:	4618      	mov	r0, r3
 801512c:	f7fd fd9c 	bl	8012c68 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8015130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015132:	3340      	adds	r3, #64	@ 0x40
 8015134:	2280      	movs	r2, #128	@ 0x80
 8015136:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8015138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801513a:	3342      	adds	r3, #66	@ 0x42
 801513c:	2229      	movs	r2, #41	@ 0x29
 801513e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8015140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015142:	3347      	adds	r3, #71	@ 0x47
 8015144:	2213      	movs	r2, #19
 8015146:	4970      	ldr	r1, [pc, #448]	@ (8015308 <f_mkfs+0x6ec>)
 8015148:	4618      	mov	r0, r3
 801514a:	f7fd fdd4 	bl	8012cf6 <mem_cpy>
 801514e:	e020      	b.n	8015192 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8015150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015152:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 8015156:	f7fd f8c7 	bl	80122e8 <get_fattime>
 801515a:	4603      	mov	r3, r0
 801515c:	4619      	mov	r1, r3
 801515e:	4620      	mov	r0, r4
 8015160:	f7fd fd9d 	bl	8012c9e <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8015164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015166:	3316      	adds	r3, #22
 8015168:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801516a:	b292      	uxth	r2, r2
 801516c:	4611      	mov	r1, r2
 801516e:	4618      	mov	r0, r3
 8015170:	f7fd fd7a 	bl	8012c68 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8015174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015176:	3324      	adds	r3, #36	@ 0x24
 8015178:	2280      	movs	r2, #128	@ 0x80
 801517a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 801517c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801517e:	3326      	adds	r3, #38	@ 0x26
 8015180:	2229      	movs	r2, #41	@ 0x29
 8015182:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8015184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015186:	332b      	adds	r3, #43	@ 0x2b
 8015188:	2213      	movs	r2, #19
 801518a:	4960      	ldr	r1, [pc, #384]	@ (801530c <f_mkfs+0x6f0>)
 801518c:	4618      	mov	r0, r3
 801518e:	f7fd fdb2 	bl	8012cf6 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8015192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015194:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8015198:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801519c:	4618      	mov	r0, r3
 801519e:	f7fd fd63 	bl	8012c68 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 80151a2:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 80151a6:	2301      	movs	r3, #1
 80151a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80151aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80151ac:	f7fd fce2 	bl	8012b74 <disk_write>
 80151b0:	4603      	mov	r3, r0
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d001      	beq.n	80151ba <f_mkfs+0x59e>
 80151b6:	2301      	movs	r3, #1
 80151b8:	e156      	b.n	8015468 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 80151ba:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80151be:	2b03      	cmp	r3, #3
 80151c0:	d140      	bne.n	8015244 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80151c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151c4:	1d9a      	adds	r2, r3, #6
 80151c6:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 80151ca:	2301      	movs	r3, #1
 80151cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80151ce:	f7fd fcd1 	bl	8012b74 <disk_write>
			mem_set(buf, 0, ss);
 80151d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80151d4:	461a      	mov	r2, r3
 80151d6:	2100      	movs	r1, #0
 80151d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80151da:	f7fd fdad 	bl	8012d38 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 80151de:	494c      	ldr	r1, [pc, #304]	@ (8015310 <f_mkfs+0x6f4>)
 80151e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80151e2:	f7fd fd5c 	bl	8012c9e <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 80151e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151e8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80151ec:	4949      	ldr	r1, [pc, #292]	@ (8015314 <f_mkfs+0x6f8>)
 80151ee:	4618      	mov	r0, r3
 80151f0:	f7fd fd55 	bl	8012c9e <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 80151f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151f6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80151fa:	6a3b      	ldr	r3, [r7, #32]
 80151fc:	3b01      	subs	r3, #1
 80151fe:	4619      	mov	r1, r3
 8015200:	4610      	mov	r0, r2
 8015202:	f7fd fd4c 	bl	8012c9e <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8015206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015208:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801520c:	2102      	movs	r1, #2
 801520e:	4618      	mov	r0, r3
 8015210:	f7fd fd45 	bl	8012c9e <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8015214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015216:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801521a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801521e:	4618      	mov	r0, r3
 8015220:	f7fd fd22 	bl	8012c68 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8015224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015226:	1dda      	adds	r2, r3, #7
 8015228:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 801522c:	2301      	movs	r3, #1
 801522e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015230:	f7fd fca0 	bl	8012b74 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8015234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015236:	1c5a      	adds	r2, r3, #1
 8015238:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 801523c:	2301      	movs	r3, #1
 801523e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015240:	f7fd fc98 	bl	8012b74 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8015244:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015246:	2100      	movs	r1, #0
 8015248:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801524a:	f7fd fd75 	bl	8012d38 <mem_set>
		sect = b_fat;		/* FAT start sector */
 801524e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015250:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8015252:	2300      	movs	r3, #0
 8015254:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015256:	e04b      	b.n	80152f0 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8015258:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801525c:	2b03      	cmp	r3, #3
 801525e:	d113      	bne.n	8015288 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8015260:	f06f 0107 	mvn.w	r1, #7
 8015264:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015266:	f7fd fd1a 	bl	8012c9e <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 801526a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801526c:	3304      	adds	r3, #4
 801526e:	f04f 31ff 	mov.w	r1, #4294967295
 8015272:	4618      	mov	r0, r3
 8015274:	f7fd fd13 	bl	8012c9e <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8015278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801527a:	3308      	adds	r3, #8
 801527c:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8015280:	4618      	mov	r0, r3
 8015282:	f7fd fd0c 	bl	8012c9e <st_dword>
 8015286:	e00b      	b.n	80152a0 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8015288:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801528c:	2b01      	cmp	r3, #1
 801528e:	d101      	bne.n	8015294 <f_mkfs+0x678>
 8015290:	4b21      	ldr	r3, [pc, #132]	@ (8015318 <f_mkfs+0x6fc>)
 8015292:	e001      	b.n	8015298 <f_mkfs+0x67c>
 8015294:	f06f 0307 	mvn.w	r3, #7
 8015298:	4619      	mov	r1, r3
 801529a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801529c:	f7fd fcff 	bl	8012c9e <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 80152a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80152a2:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 80152a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80152a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152a8:	4293      	cmp	r3, r2
 80152aa:	bf28      	it	cs
 80152ac:	4613      	movcs	r3, r2
 80152ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80152b0:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 80152b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80152b6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80152b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80152ba:	f7fd fc5b 	bl	8012b74 <disk_write>
 80152be:	4603      	mov	r3, r0
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d001      	beq.n	80152c8 <f_mkfs+0x6ac>
 80152c4:	2301      	movs	r3, #1
 80152c6:	e0cf      	b.n	8015468 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 80152c8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80152ca:	461a      	mov	r2, r3
 80152cc:	2100      	movs	r1, #0
 80152ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80152d0:	f7fd fd32 	bl	8012d38 <mem_set>
				sect += n; nsect -= n;
 80152d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80152d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80152d8:	4413      	add	r3, r2
 80152da:	667b      	str	r3, [r7, #100]	@ 0x64
 80152dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80152de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80152e0:	1ad3      	subs	r3, r2, r3
 80152e2:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 80152e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d1dc      	bne.n	80152a4 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80152ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80152ec:	3301      	adds	r3, #1
 80152ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80152f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80152f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80152f4:	429a      	cmp	r2, r3
 80152f6:	d3af      	bcc.n	8015258 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 80152f8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80152fc:	2b03      	cmp	r3, #3
 80152fe:	d10d      	bne.n	801531c <f_mkfs+0x700>
 8015300:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015302:	e00c      	b.n	801531e <f_mkfs+0x702>
 8015304:	0801d400 	.word	0x0801d400
 8015308:	0801d40c 	.word	0x0801d40c
 801530c:	0801d420 	.word	0x0801d420
 8015310:	41615252 	.word	0x41615252
 8015314:	61417272 	.word	0x61417272
 8015318:	00fffff8 	.word	0x00fffff8
 801531c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801531e:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8015320:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8015322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015324:	4293      	cmp	r3, r2
 8015326:	bf28      	it	cs
 8015328:	4613      	movcs	r3, r2
 801532a:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 801532c:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8015330:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015332:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8015334:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015336:	f7fd fc1d 	bl	8012b74 <disk_write>
 801533a:	4603      	mov	r3, r0
 801533c:	2b00      	cmp	r3, #0
 801533e:	d001      	beq.n	8015344 <f_mkfs+0x728>
 8015340:	2301      	movs	r3, #1
 8015342:	e091      	b.n	8015468 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8015344:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8015346:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015348:	4413      	add	r3, r2
 801534a:	667b      	str	r3, [r7, #100]	@ 0x64
 801534c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801534e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015350:	1ad3      	subs	r3, r2, r3
 8015352:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 8015354:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015356:	2b00      	cmp	r3, #0
 8015358:	d1e2      	bne.n	8015320 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 801535a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801535e:	2b03      	cmp	r3, #3
 8015360:	d103      	bne.n	801536a <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8015362:	230c      	movs	r3, #12
 8015364:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8015368:	e010      	b.n	801538c <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 801536a:	693b      	ldr	r3, [r7, #16]
 801536c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015370:	d303      	bcc.n	801537a <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8015372:	2306      	movs	r3, #6
 8015374:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8015378:	e008      	b.n	801538c <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 801537a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801537e:	2b02      	cmp	r3, #2
 8015380:	d101      	bne.n	8015386 <f_mkfs+0x76a>
 8015382:	2304      	movs	r3, #4
 8015384:	e000      	b.n	8015388 <f_mkfs+0x76c>
 8015386:	2301      	movs	r3, #1
 8015388:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 801538c:	7afb      	ldrb	r3, [r7, #11]
 801538e:	f003 0308 	and.w	r3, r3, #8
 8015392:	2b00      	cmp	r3, #0
 8015394:	d15b      	bne.n	801544e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8015396:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015398:	461a      	mov	r2, r3
 801539a:	2100      	movs	r1, #0
 801539c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801539e:	f7fd fccb 	bl	8012d38 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 80153a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153a4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80153a8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80153ac:	4618      	mov	r0, r3
 80153ae:	f7fd fc5b 	bl	8012c68 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 80153b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153b4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80153b8:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 80153ba:	69bb      	ldr	r3, [r7, #24]
 80153bc:	2200      	movs	r2, #0
 80153be:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 80153c0:	69bb      	ldr	r3, [r7, #24]
 80153c2:	3301      	adds	r3, #1
 80153c4:	2201      	movs	r2, #1
 80153c6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 80153c8:	69bb      	ldr	r3, [r7, #24]
 80153ca:	3302      	adds	r3, #2
 80153cc:	2201      	movs	r2, #1
 80153ce:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 80153d0:	69bb      	ldr	r3, [r7, #24]
 80153d2:	3303      	adds	r3, #3
 80153d4:	2200      	movs	r2, #0
 80153d6:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 80153d8:	69bb      	ldr	r3, [r7, #24]
 80153da:	3304      	adds	r3, #4
 80153dc:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 80153e0:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80153e2:	693a      	ldr	r2, [r7, #16]
 80153e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153e6:	441a      	add	r2, r3
 80153e8:	4b21      	ldr	r3, [pc, #132]	@ (8015470 <f_mkfs+0x854>)
 80153ea:	fba3 1302 	umull	r1, r3, r3, r2
 80153ee:	1ad2      	subs	r2, r2, r3
 80153f0:	0852      	lsrs	r2, r2, #1
 80153f2:	4413      	add	r3, r2
 80153f4:	0b5b      	lsrs	r3, r3, #13
 80153f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 80153f8:	69bb      	ldr	r3, [r7, #24]
 80153fa:	3305      	adds	r3, #5
 80153fc:	22fe      	movs	r2, #254	@ 0xfe
 80153fe:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8015400:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015402:	089b      	lsrs	r3, r3, #2
 8015404:	b2da      	uxtb	r2, r3
 8015406:	69bb      	ldr	r3, [r7, #24]
 8015408:	3306      	adds	r3, #6
 801540a:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 801540e:	b2d2      	uxtb	r2, r2
 8015410:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8015412:	69bb      	ldr	r3, [r7, #24]
 8015414:	3307      	adds	r3, #7
 8015416:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8015418:	b2d2      	uxtb	r2, r2
 801541a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 801541c:	69bb      	ldr	r3, [r7, #24]
 801541e:	3308      	adds	r3, #8
 8015420:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015422:	4618      	mov	r0, r3
 8015424:	f7fd fc3b 	bl	8012c9e <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8015428:	69bb      	ldr	r3, [r7, #24]
 801542a:	330c      	adds	r3, #12
 801542c:	693a      	ldr	r2, [r7, #16]
 801542e:	4611      	mov	r1, r2
 8015430:	4618      	mov	r0, r3
 8015432:	f7fd fc34 	bl	8012c9e <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8015436:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 801543a:	2301      	movs	r3, #1
 801543c:	2200      	movs	r2, #0
 801543e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015440:	f7fd fb98 	bl	8012b74 <disk_write>
 8015444:	4603      	mov	r3, r0
 8015446:	2b00      	cmp	r3, #0
 8015448:	d001      	beq.n	801544e <f_mkfs+0x832>
 801544a:	2301      	movs	r3, #1
 801544c:	e00c      	b.n	8015468 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 801544e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8015452:	2200      	movs	r2, #0
 8015454:	2100      	movs	r1, #0
 8015456:	4618      	mov	r0, r3
 8015458:	f7fd fbac 	bl	8012bb4 <disk_ioctl>
 801545c:	4603      	mov	r3, r0
 801545e:	2b00      	cmp	r3, #0
 8015460:	d001      	beq.n	8015466 <f_mkfs+0x84a>
 8015462:	2301      	movs	r3, #1
 8015464:	e000      	b.n	8015468 <f_mkfs+0x84c>

	return FR_OK;
 8015466:	2300      	movs	r3, #0
}
 8015468:	4618      	mov	r0, r3
 801546a:	3774      	adds	r7, #116	@ 0x74
 801546c:	46bd      	mov	sp, r7
 801546e:	bd90      	pop	{r4, r7, pc}
 8015470:	0515565b 	.word	0x0515565b

08015474 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015474:	b480      	push	{r7}
 8015476:	b087      	sub	sp, #28
 8015478:	af00      	add	r7, sp, #0
 801547a:	60f8      	str	r0, [r7, #12]
 801547c:	60b9      	str	r1, [r7, #8]
 801547e:	4613      	mov	r3, r2
 8015480:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015482:	2301      	movs	r3, #1
 8015484:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015486:	2300      	movs	r3, #0
 8015488:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801548a:	4b1f      	ldr	r3, [pc, #124]	@ (8015508 <FATFS_LinkDriverEx+0x94>)
 801548c:	7a5b      	ldrb	r3, [r3, #9]
 801548e:	b2db      	uxtb	r3, r3
 8015490:	2b00      	cmp	r3, #0
 8015492:	d131      	bne.n	80154f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015494:	4b1c      	ldr	r3, [pc, #112]	@ (8015508 <FATFS_LinkDriverEx+0x94>)
 8015496:	7a5b      	ldrb	r3, [r3, #9]
 8015498:	b2db      	uxtb	r3, r3
 801549a:	461a      	mov	r2, r3
 801549c:	4b1a      	ldr	r3, [pc, #104]	@ (8015508 <FATFS_LinkDriverEx+0x94>)
 801549e:	2100      	movs	r1, #0
 80154a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80154a2:	4b19      	ldr	r3, [pc, #100]	@ (8015508 <FATFS_LinkDriverEx+0x94>)
 80154a4:	7a5b      	ldrb	r3, [r3, #9]
 80154a6:	b2db      	uxtb	r3, r3
 80154a8:	4a17      	ldr	r2, [pc, #92]	@ (8015508 <FATFS_LinkDriverEx+0x94>)
 80154aa:	009b      	lsls	r3, r3, #2
 80154ac:	4413      	add	r3, r2
 80154ae:	68fa      	ldr	r2, [r7, #12]
 80154b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80154b2:	4b15      	ldr	r3, [pc, #84]	@ (8015508 <FATFS_LinkDriverEx+0x94>)
 80154b4:	7a5b      	ldrb	r3, [r3, #9]
 80154b6:	b2db      	uxtb	r3, r3
 80154b8:	461a      	mov	r2, r3
 80154ba:	4b13      	ldr	r3, [pc, #76]	@ (8015508 <FATFS_LinkDriverEx+0x94>)
 80154bc:	4413      	add	r3, r2
 80154be:	79fa      	ldrb	r2, [r7, #7]
 80154c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80154c2:	4b11      	ldr	r3, [pc, #68]	@ (8015508 <FATFS_LinkDriverEx+0x94>)
 80154c4:	7a5b      	ldrb	r3, [r3, #9]
 80154c6:	b2db      	uxtb	r3, r3
 80154c8:	1c5a      	adds	r2, r3, #1
 80154ca:	b2d1      	uxtb	r1, r2
 80154cc:	4a0e      	ldr	r2, [pc, #56]	@ (8015508 <FATFS_LinkDriverEx+0x94>)
 80154ce:	7251      	strb	r1, [r2, #9]
 80154d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80154d2:	7dbb      	ldrb	r3, [r7, #22]
 80154d4:	3330      	adds	r3, #48	@ 0x30
 80154d6:	b2da      	uxtb	r2, r3
 80154d8:	68bb      	ldr	r3, [r7, #8]
 80154da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80154dc:	68bb      	ldr	r3, [r7, #8]
 80154de:	3301      	adds	r3, #1
 80154e0:	223a      	movs	r2, #58	@ 0x3a
 80154e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80154e4:	68bb      	ldr	r3, [r7, #8]
 80154e6:	3302      	adds	r3, #2
 80154e8:	222f      	movs	r2, #47	@ 0x2f
 80154ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80154ec:	68bb      	ldr	r3, [r7, #8]
 80154ee:	3303      	adds	r3, #3
 80154f0:	2200      	movs	r2, #0
 80154f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80154f4:	2300      	movs	r3, #0
 80154f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80154f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80154fa:	4618      	mov	r0, r3
 80154fc:	371c      	adds	r7, #28
 80154fe:	46bd      	mov	sp, r7
 8015500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015504:	4770      	bx	lr
 8015506:	bf00      	nop
 8015508:	20001d6c 	.word	0x20001d6c

0801550c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801550c:	b580      	push	{r7, lr}
 801550e:	b082      	sub	sp, #8
 8015510:	af00      	add	r7, sp, #0
 8015512:	6078      	str	r0, [r7, #4]
 8015514:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015516:	2200      	movs	r2, #0
 8015518:	6839      	ldr	r1, [r7, #0]
 801551a:	6878      	ldr	r0, [r7, #4]
 801551c:	f7ff ffaa 	bl	8015474 <FATFS_LinkDriverEx>
 8015520:	4603      	mov	r3, r0
}
 8015522:	4618      	mov	r0, r3
 8015524:	3708      	adds	r7, #8
 8015526:	46bd      	mov	sp, r7
 8015528:	bd80      	pop	{r7, pc}

0801552a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801552a:	b480      	push	{r7}
 801552c:	b085      	sub	sp, #20
 801552e:	af00      	add	r7, sp, #0
 8015530:	4603      	mov	r3, r0
 8015532:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8015534:	2300      	movs	r3, #0
 8015536:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8015538:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801553c:	2b84      	cmp	r3, #132	@ 0x84
 801553e:	d005      	beq.n	801554c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8015540:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	4413      	add	r3, r2
 8015548:	3303      	adds	r3, #3
 801554a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801554c:	68fb      	ldr	r3, [r7, #12]
}
 801554e:	4618      	mov	r0, r3
 8015550:	3714      	adds	r7, #20
 8015552:	46bd      	mov	sp, r7
 8015554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015558:	4770      	bx	lr

0801555a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801555a:	b480      	push	{r7}
 801555c:	b083      	sub	sp, #12
 801555e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015560:	f3ef 8305 	mrs	r3, IPSR
 8015564:	607b      	str	r3, [r7, #4]
  return(result);
 8015566:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8015568:	2b00      	cmp	r3, #0
 801556a:	bf14      	ite	ne
 801556c:	2301      	movne	r3, #1
 801556e:	2300      	moveq	r3, #0
 8015570:	b2db      	uxtb	r3, r3
}
 8015572:	4618      	mov	r0, r3
 8015574:	370c      	adds	r7, #12
 8015576:	46bd      	mov	sp, r7
 8015578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801557c:	4770      	bx	lr

0801557e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801557e:	b580      	push	{r7, lr}
 8015580:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8015582:	f001 f9cd 	bl	8016920 <vTaskStartScheduler>
  
  return osOK;
 8015586:	2300      	movs	r3, #0
}
 8015588:	4618      	mov	r0, r3
 801558a:	bd80      	pop	{r7, pc}

0801558c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 801558c:	b580      	push	{r7, lr}
 801558e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8015590:	f001 fe2e 	bl	80171f0 <xTaskGetSchedulerState>
 8015594:	4603      	mov	r3, r0
 8015596:	2b01      	cmp	r3, #1
 8015598:	d101      	bne.n	801559e <osKernelRunning+0x12>
    return 0;
 801559a:	2300      	movs	r3, #0
 801559c:	e000      	b.n	80155a0 <osKernelRunning+0x14>
  else
    return 1;
 801559e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80155a0:	4618      	mov	r0, r3
 80155a2:	bd80      	pop	{r7, pc}

080155a4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80155a4:	b580      	push	{r7, lr}
 80155a6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80155a8:	f7ff ffd7 	bl	801555a <inHandlerMode>
 80155ac:	4603      	mov	r3, r0
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d003      	beq.n	80155ba <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80155b2:	f001 fad9 	bl	8016b68 <xTaskGetTickCountFromISR>
 80155b6:	4603      	mov	r3, r0
 80155b8:	e002      	b.n	80155c0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80155ba:	f001 fac5 	bl	8016b48 <xTaskGetTickCount>
 80155be:	4603      	mov	r3, r0
  }
}
 80155c0:	4618      	mov	r0, r3
 80155c2:	bd80      	pop	{r7, pc}

080155c4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80155c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155c6:	b089      	sub	sp, #36	@ 0x24
 80155c8:	af04      	add	r7, sp, #16
 80155ca:	6078      	str	r0, [r7, #4]
 80155cc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	695b      	ldr	r3, [r3, #20]
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d020      	beq.n	8015618 <osThreadCreate+0x54>
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	699b      	ldr	r3, [r3, #24]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d01c      	beq.n	8015618 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	685c      	ldr	r4, [r3, #4]
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	691e      	ldr	r6, [r3, #16]
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80155f0:	4618      	mov	r0, r3
 80155f2:	f7ff ff9a 	bl	801552a <makeFreeRtosPriority>
 80155f6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	695b      	ldr	r3, [r3, #20]
 80155fc:	687a      	ldr	r2, [r7, #4]
 80155fe:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015600:	9202      	str	r2, [sp, #8]
 8015602:	9301      	str	r3, [sp, #4]
 8015604:	9100      	str	r1, [sp, #0]
 8015606:	683b      	ldr	r3, [r7, #0]
 8015608:	4632      	mov	r2, r6
 801560a:	4629      	mov	r1, r5
 801560c:	4620      	mov	r0, r4
 801560e:	f000 ffa5 	bl	801655c <xTaskCreateStatic>
 8015612:	4603      	mov	r3, r0
 8015614:	60fb      	str	r3, [r7, #12]
 8015616:	e01c      	b.n	8015652 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	685c      	ldr	r4, [r3, #4]
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015624:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801562c:	4618      	mov	r0, r3
 801562e:	f7ff ff7c 	bl	801552a <makeFreeRtosPriority>
 8015632:	4602      	mov	r2, r0
 8015634:	f107 030c 	add.w	r3, r7, #12
 8015638:	9301      	str	r3, [sp, #4]
 801563a:	9200      	str	r2, [sp, #0]
 801563c:	683b      	ldr	r3, [r7, #0]
 801563e:	4632      	mov	r2, r6
 8015640:	4629      	mov	r1, r5
 8015642:	4620      	mov	r0, r4
 8015644:	f000 fff0 	bl	8016628 <xTaskCreate>
 8015648:	4603      	mov	r3, r0
 801564a:	2b01      	cmp	r3, #1
 801564c:	d001      	beq.n	8015652 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801564e:	2300      	movs	r3, #0
 8015650:	e000      	b.n	8015654 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8015652:	68fb      	ldr	r3, [r7, #12]
}
 8015654:	4618      	mov	r0, r3
 8015656:	3714      	adds	r7, #20
 8015658:	46bd      	mov	sp, r7
 801565a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801565c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801565c:	b580      	push	{r7, lr}
 801565e:	b084      	sub	sp, #16
 8015660:	af00      	add	r7, sp, #0
 8015662:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d001      	beq.n	8015672 <osDelay+0x16>
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	e000      	b.n	8015674 <osDelay+0x18>
 8015672:	2301      	movs	r3, #1
 8015674:	4618      	mov	r0, r3
 8015676:	f001 f91b 	bl	80168b0 <vTaskDelay>
  
  return osOK;
 801567a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801567c:	4618      	mov	r0, r3
 801567e:	3710      	adds	r7, #16
 8015680:	46bd      	mov	sp, r7
 8015682:	bd80      	pop	{r7, pc}

08015684 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8015684:	b590      	push	{r4, r7, lr}
 8015686:	b085      	sub	sp, #20
 8015688:	af02      	add	r7, sp, #8
 801568a:	6078      	str	r0, [r7, #4]
 801568c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	689b      	ldr	r3, [r3, #8]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d011      	beq.n	80156ba <osMessageCreate+0x36>
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	68db      	ldr	r3, [r3, #12]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d00d      	beq.n	80156ba <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	6818      	ldr	r0, [r3, #0]
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	6859      	ldr	r1, [r3, #4]
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	689a      	ldr	r2, [r3, #8]
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	68db      	ldr	r3, [r3, #12]
 80156ae:	2400      	movs	r4, #0
 80156b0:	9400      	str	r4, [sp, #0]
 80156b2:	f000 f9f9 	bl	8015aa8 <xQueueGenericCreateStatic>
 80156b6:	4603      	mov	r3, r0
 80156b8:	e008      	b.n	80156cc <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	6818      	ldr	r0, [r3, #0]
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	685b      	ldr	r3, [r3, #4]
 80156c2:	2200      	movs	r2, #0
 80156c4:	4619      	mov	r1, r3
 80156c6:	f000 fa76 	bl	8015bb6 <xQueueGenericCreate>
 80156ca:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80156cc:	4618      	mov	r0, r3
 80156ce:	370c      	adds	r7, #12
 80156d0:	46bd      	mov	sp, r7
 80156d2:	bd90      	pop	{r4, r7, pc}

080156d4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80156d4:	b580      	push	{r7, lr}
 80156d6:	b086      	sub	sp, #24
 80156d8:	af00      	add	r7, sp, #0
 80156da:	60f8      	str	r0, [r7, #12]
 80156dc:	60b9      	str	r1, [r7, #8]
 80156de:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80156e0:	2300      	movs	r3, #0
 80156e2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80156e8:	697b      	ldr	r3, [r7, #20]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d101      	bne.n	80156f2 <osMessagePut+0x1e>
    ticks = 1;
 80156ee:	2301      	movs	r3, #1
 80156f0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80156f2:	f7ff ff32 	bl	801555a <inHandlerMode>
 80156f6:	4603      	mov	r3, r0
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d018      	beq.n	801572e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80156fc:	f107 0210 	add.w	r2, r7, #16
 8015700:	f107 0108 	add.w	r1, r7, #8
 8015704:	2300      	movs	r3, #0
 8015706:	68f8      	ldr	r0, [r7, #12]
 8015708:	f000 fbc2 	bl	8015e90 <xQueueGenericSendFromISR>
 801570c:	4603      	mov	r3, r0
 801570e:	2b01      	cmp	r3, #1
 8015710:	d001      	beq.n	8015716 <osMessagePut+0x42>
      return osErrorOS;
 8015712:	23ff      	movs	r3, #255	@ 0xff
 8015714:	e018      	b.n	8015748 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8015716:	693b      	ldr	r3, [r7, #16]
 8015718:	2b00      	cmp	r3, #0
 801571a:	d014      	beq.n	8015746 <osMessagePut+0x72>
 801571c:	4b0c      	ldr	r3, [pc, #48]	@ (8015750 <osMessagePut+0x7c>)
 801571e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015722:	601a      	str	r2, [r3, #0]
 8015724:	f3bf 8f4f 	dsb	sy
 8015728:	f3bf 8f6f 	isb	sy
 801572c:	e00b      	b.n	8015746 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801572e:	f107 0108 	add.w	r1, r7, #8
 8015732:	2300      	movs	r3, #0
 8015734:	697a      	ldr	r2, [r7, #20]
 8015736:	68f8      	ldr	r0, [r7, #12]
 8015738:	f000 faa0 	bl	8015c7c <xQueueGenericSend>
 801573c:	4603      	mov	r3, r0
 801573e:	2b01      	cmp	r3, #1
 8015740:	d001      	beq.n	8015746 <osMessagePut+0x72>
      return osErrorOS;
 8015742:	23ff      	movs	r3, #255	@ 0xff
 8015744:	e000      	b.n	8015748 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8015746:	2300      	movs	r3, #0
}
 8015748:	4618      	mov	r0, r3
 801574a:	3718      	adds	r7, #24
 801574c:	46bd      	mov	sp, r7
 801574e:	bd80      	pop	{r7, pc}
 8015750:	e000ed04 	.word	0xe000ed04

08015754 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8015754:	b590      	push	{r4, r7, lr}
 8015756:	b08b      	sub	sp, #44	@ 0x2c
 8015758:	af00      	add	r7, sp, #0
 801575a:	60f8      	str	r0, [r7, #12]
 801575c:	60b9      	str	r1, [r7, #8]
 801575e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8015760:	68bb      	ldr	r3, [r7, #8]
 8015762:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8015764:	2300      	movs	r3, #0
 8015766:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8015768:	68bb      	ldr	r3, [r7, #8]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d10a      	bne.n	8015784 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801576e:	2380      	movs	r3, #128	@ 0x80
 8015770:	617b      	str	r3, [r7, #20]
    return event;
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	461c      	mov	r4, r3
 8015776:	f107 0314 	add.w	r3, r7, #20
 801577a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801577e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015782:	e054      	b.n	801582e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8015784:	2300      	movs	r3, #0
 8015786:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8015788:	2300      	movs	r3, #0
 801578a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015792:	d103      	bne.n	801579c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8015794:	f04f 33ff 	mov.w	r3, #4294967295
 8015798:	627b      	str	r3, [r7, #36]	@ 0x24
 801579a:	e009      	b.n	80157b0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d006      	beq.n	80157b0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80157a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d101      	bne.n	80157b0 <osMessageGet+0x5c>
      ticks = 1;
 80157ac:	2301      	movs	r3, #1
 80157ae:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80157b0:	f7ff fed3 	bl	801555a <inHandlerMode>
 80157b4:	4603      	mov	r3, r0
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d01c      	beq.n	80157f4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80157ba:	f107 0220 	add.w	r2, r7, #32
 80157be:	f107 0314 	add.w	r3, r7, #20
 80157c2:	3304      	adds	r3, #4
 80157c4:	4619      	mov	r1, r3
 80157c6:	68b8      	ldr	r0, [r7, #8]
 80157c8:	f000 fcee 	bl	80161a8 <xQueueReceiveFromISR>
 80157cc:	4603      	mov	r3, r0
 80157ce:	2b01      	cmp	r3, #1
 80157d0:	d102      	bne.n	80157d8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80157d2:	2310      	movs	r3, #16
 80157d4:	617b      	str	r3, [r7, #20]
 80157d6:	e001      	b.n	80157dc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80157d8:	2300      	movs	r3, #0
 80157da:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80157dc:	6a3b      	ldr	r3, [r7, #32]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d01d      	beq.n	801581e <osMessageGet+0xca>
 80157e2:	4b15      	ldr	r3, [pc, #84]	@ (8015838 <osMessageGet+0xe4>)
 80157e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80157e8:	601a      	str	r2, [r3, #0]
 80157ea:	f3bf 8f4f 	dsb	sy
 80157ee:	f3bf 8f6f 	isb	sy
 80157f2:	e014      	b.n	801581e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80157f4:	f107 0314 	add.w	r3, r7, #20
 80157f8:	3304      	adds	r3, #4
 80157fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80157fc:	4619      	mov	r1, r3
 80157fe:	68b8      	ldr	r0, [r7, #8]
 8015800:	f000 fbea 	bl	8015fd8 <xQueueReceive>
 8015804:	4603      	mov	r3, r0
 8015806:	2b01      	cmp	r3, #1
 8015808:	d102      	bne.n	8015810 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 801580a:	2310      	movs	r3, #16
 801580c:	617b      	str	r3, [r7, #20]
 801580e:	e006      	b.n	801581e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8015810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015812:	2b00      	cmp	r3, #0
 8015814:	d101      	bne.n	801581a <osMessageGet+0xc6>
 8015816:	2300      	movs	r3, #0
 8015818:	e000      	b.n	801581c <osMessageGet+0xc8>
 801581a:	2340      	movs	r3, #64	@ 0x40
 801581c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	461c      	mov	r4, r3
 8015822:	f107 0314 	add.w	r3, r7, #20
 8015826:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801582a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801582e:	68f8      	ldr	r0, [r7, #12]
 8015830:	372c      	adds	r7, #44	@ 0x2c
 8015832:	46bd      	mov	sp, r7
 8015834:	bd90      	pop	{r4, r7, pc}
 8015836:	bf00      	nop
 8015838:	e000ed04 	.word	0xe000ed04

0801583c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 801583c:	b580      	push	{r7, lr}
 801583e:	b082      	sub	sp, #8
 8015840:	af00      	add	r7, sp, #0
 8015842:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8015844:	f7ff fe89 	bl	801555a <inHandlerMode>
 8015848:	4603      	mov	r3, r0
 801584a:	2b00      	cmp	r3, #0
 801584c:	d004      	beq.n	8015858 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 801584e:	6878      	ldr	r0, [r7, #4]
 8015850:	f000 fd53 	bl	80162fa <uxQueueMessagesWaitingFromISR>
 8015854:	4603      	mov	r3, r0
 8015856:	e003      	b.n	8015860 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8015858:	6878      	ldr	r0, [r7, #4]
 801585a:	f000 fd2d 	bl	80162b8 <uxQueueMessagesWaiting>
 801585e:	4603      	mov	r3, r0
  }
}
 8015860:	4618      	mov	r0, r3
 8015862:	3708      	adds	r7, #8
 8015864:	46bd      	mov	sp, r7
 8015866:	bd80      	pop	{r7, pc}

08015868 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015868:	b480      	push	{r7}
 801586a:	b083      	sub	sp, #12
 801586c:	af00      	add	r7, sp, #0
 801586e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	f103 0208 	add.w	r2, r3, #8
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	f04f 32ff 	mov.w	r2, #4294967295
 8015880:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	f103 0208 	add.w	r2, r3, #8
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	f103 0208 	add.w	r2, r3, #8
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	2200      	movs	r2, #0
 801589a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801589c:	bf00      	nop
 801589e:	370c      	adds	r7, #12
 80158a0:	46bd      	mov	sp, r7
 80158a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a6:	4770      	bx	lr

080158a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80158a8:	b480      	push	{r7}
 80158aa:	b083      	sub	sp, #12
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	2200      	movs	r2, #0
 80158b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80158b6:	bf00      	nop
 80158b8:	370c      	adds	r7, #12
 80158ba:	46bd      	mov	sp, r7
 80158bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c0:	4770      	bx	lr

080158c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80158c2:	b480      	push	{r7}
 80158c4:	b085      	sub	sp, #20
 80158c6:	af00      	add	r7, sp, #0
 80158c8:	6078      	str	r0, [r7, #4]
 80158ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	685b      	ldr	r3, [r3, #4]
 80158d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80158d2:	683b      	ldr	r3, [r7, #0]
 80158d4:	68fa      	ldr	r2, [r7, #12]
 80158d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	689a      	ldr	r2, [r3, #8]
 80158dc:	683b      	ldr	r3, [r7, #0]
 80158de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	689b      	ldr	r3, [r3, #8]
 80158e4:	683a      	ldr	r2, [r7, #0]
 80158e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	683a      	ldr	r2, [r7, #0]
 80158ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80158ee:	683b      	ldr	r3, [r7, #0]
 80158f0:	687a      	ldr	r2, [r7, #4]
 80158f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	1c5a      	adds	r2, r3, #1
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	601a      	str	r2, [r3, #0]
}
 80158fe:	bf00      	nop
 8015900:	3714      	adds	r7, #20
 8015902:	46bd      	mov	sp, r7
 8015904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015908:	4770      	bx	lr

0801590a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801590a:	b480      	push	{r7}
 801590c:	b085      	sub	sp, #20
 801590e:	af00      	add	r7, sp, #0
 8015910:	6078      	str	r0, [r7, #4]
 8015912:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015914:	683b      	ldr	r3, [r7, #0]
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801591a:	68bb      	ldr	r3, [r7, #8]
 801591c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015920:	d103      	bne.n	801592a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	691b      	ldr	r3, [r3, #16]
 8015926:	60fb      	str	r3, [r7, #12]
 8015928:	e00c      	b.n	8015944 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	3308      	adds	r3, #8
 801592e:	60fb      	str	r3, [r7, #12]
 8015930:	e002      	b.n	8015938 <vListInsert+0x2e>
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	685b      	ldr	r3, [r3, #4]
 8015936:	60fb      	str	r3, [r7, #12]
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	685b      	ldr	r3, [r3, #4]
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	68ba      	ldr	r2, [r7, #8]
 8015940:	429a      	cmp	r2, r3
 8015942:	d2f6      	bcs.n	8015932 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	685a      	ldr	r2, [r3, #4]
 8015948:	683b      	ldr	r3, [r7, #0]
 801594a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801594c:	683b      	ldr	r3, [r7, #0]
 801594e:	685b      	ldr	r3, [r3, #4]
 8015950:	683a      	ldr	r2, [r7, #0]
 8015952:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015954:	683b      	ldr	r3, [r7, #0]
 8015956:	68fa      	ldr	r2, [r7, #12]
 8015958:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	683a      	ldr	r2, [r7, #0]
 801595e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015960:	683b      	ldr	r3, [r7, #0]
 8015962:	687a      	ldr	r2, [r7, #4]
 8015964:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	1c5a      	adds	r2, r3, #1
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	601a      	str	r2, [r3, #0]
}
 8015970:	bf00      	nop
 8015972:	3714      	adds	r7, #20
 8015974:	46bd      	mov	sp, r7
 8015976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801597a:	4770      	bx	lr

0801597c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801597c:	b480      	push	{r7}
 801597e:	b085      	sub	sp, #20
 8015980:	af00      	add	r7, sp, #0
 8015982:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	691b      	ldr	r3, [r3, #16]
 8015988:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	685b      	ldr	r3, [r3, #4]
 801598e:	687a      	ldr	r2, [r7, #4]
 8015990:	6892      	ldr	r2, [r2, #8]
 8015992:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	689b      	ldr	r3, [r3, #8]
 8015998:	687a      	ldr	r2, [r7, #4]
 801599a:	6852      	ldr	r2, [r2, #4]
 801599c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	685b      	ldr	r3, [r3, #4]
 80159a2:	687a      	ldr	r2, [r7, #4]
 80159a4:	429a      	cmp	r2, r3
 80159a6:	d103      	bne.n	80159b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	689a      	ldr	r2, [r3, #8]
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	2200      	movs	r2, #0
 80159b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	1e5a      	subs	r2, r3, #1
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	681b      	ldr	r3, [r3, #0]
}
 80159c4:	4618      	mov	r0, r3
 80159c6:	3714      	adds	r7, #20
 80159c8:	46bd      	mov	sp, r7
 80159ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ce:	4770      	bx	lr

080159d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80159d0:	b580      	push	{r7, lr}
 80159d2:	b084      	sub	sp, #16
 80159d4:	af00      	add	r7, sp, #0
 80159d6:	6078      	str	r0, [r7, #4]
 80159d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d10d      	bne.n	8015a00 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80159e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159e8:	b672      	cpsid	i
 80159ea:	f383 8811 	msr	BASEPRI, r3
 80159ee:	f3bf 8f6f 	isb	sy
 80159f2:	f3bf 8f4f 	dsb	sy
 80159f6:	b662      	cpsie	i
 80159f8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80159fa:	bf00      	nop
 80159fc:	bf00      	nop
 80159fe:	e7fd      	b.n	80159fc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8015a00:	f001 fe14 	bl	801762c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	681a      	ldr	r2, [r3, #0]
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015a0c:	68f9      	ldr	r1, [r7, #12]
 8015a0e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8015a10:	fb01 f303 	mul.w	r3, r1, r3
 8015a14:	441a      	add	r2, r3
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	681a      	ldr	r2, [r3, #0]
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	681a      	ldr	r2, [r3, #0]
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015a30:	3b01      	subs	r3, #1
 8015a32:	68f9      	ldr	r1, [r7, #12]
 8015a34:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8015a36:	fb01 f303 	mul.w	r3, r1, r3
 8015a3a:	441a      	add	r2, r3
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	22ff      	movs	r2, #255	@ 0xff
 8015a44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	22ff      	movs	r2, #255	@ 0xff
 8015a4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8015a50:	683b      	ldr	r3, [r7, #0]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d114      	bne.n	8015a80 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	691b      	ldr	r3, [r3, #16]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d01a      	beq.n	8015a94 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	3310      	adds	r3, #16
 8015a62:	4618      	mov	r0, r3
 8015a64:	f001 f9fa 	bl	8016e5c <xTaskRemoveFromEventList>
 8015a68:	4603      	mov	r3, r0
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d012      	beq.n	8015a94 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8015aa4 <xQueueGenericReset+0xd4>)
 8015a70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015a74:	601a      	str	r2, [r3, #0]
 8015a76:	f3bf 8f4f 	dsb	sy
 8015a7a:	f3bf 8f6f 	isb	sy
 8015a7e:	e009      	b.n	8015a94 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	3310      	adds	r3, #16
 8015a84:	4618      	mov	r0, r3
 8015a86:	f7ff feef 	bl	8015868 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	3324      	adds	r3, #36	@ 0x24
 8015a8e:	4618      	mov	r0, r3
 8015a90:	f7ff feea 	bl	8015868 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015a94:	f001 fe00 	bl	8017698 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015a98:	2301      	movs	r3, #1
}
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	3710      	adds	r7, #16
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	bd80      	pop	{r7, pc}
 8015aa2:	bf00      	nop
 8015aa4:	e000ed04 	.word	0xe000ed04

08015aa8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b08e      	sub	sp, #56	@ 0x38
 8015aac:	af02      	add	r7, sp, #8
 8015aae:	60f8      	str	r0, [r7, #12]
 8015ab0:	60b9      	str	r1, [r7, #8]
 8015ab2:	607a      	str	r2, [r7, #4]
 8015ab4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d10d      	bne.n	8015ad8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8015abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ac0:	b672      	cpsid	i
 8015ac2:	f383 8811 	msr	BASEPRI, r3
 8015ac6:	f3bf 8f6f 	isb	sy
 8015aca:	f3bf 8f4f 	dsb	sy
 8015ace:	b662      	cpsie	i
 8015ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8015ad2:	bf00      	nop
 8015ad4:	bf00      	nop
 8015ad6:	e7fd      	b.n	8015ad4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015ad8:	683b      	ldr	r3, [r7, #0]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d10d      	bne.n	8015afa <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8015ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ae2:	b672      	cpsid	i
 8015ae4:	f383 8811 	msr	BASEPRI, r3
 8015ae8:	f3bf 8f6f 	isb	sy
 8015aec:	f3bf 8f4f 	dsb	sy
 8015af0:	b662      	cpsie	i
 8015af2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8015af4:	bf00      	nop
 8015af6:	bf00      	nop
 8015af8:	e7fd      	b.n	8015af6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d002      	beq.n	8015b06 <xQueueGenericCreateStatic+0x5e>
 8015b00:	68bb      	ldr	r3, [r7, #8]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d001      	beq.n	8015b0a <xQueueGenericCreateStatic+0x62>
 8015b06:	2301      	movs	r3, #1
 8015b08:	e000      	b.n	8015b0c <xQueueGenericCreateStatic+0x64>
 8015b0a:	2300      	movs	r3, #0
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d10d      	bne.n	8015b2c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8015b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b14:	b672      	cpsid	i
 8015b16:	f383 8811 	msr	BASEPRI, r3
 8015b1a:	f3bf 8f6f 	isb	sy
 8015b1e:	f3bf 8f4f 	dsb	sy
 8015b22:	b662      	cpsie	i
 8015b24:	623b      	str	r3, [r7, #32]
}
 8015b26:	bf00      	nop
 8015b28:	bf00      	nop
 8015b2a:	e7fd      	b.n	8015b28 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d102      	bne.n	8015b38 <xQueueGenericCreateStatic+0x90>
 8015b32:	68bb      	ldr	r3, [r7, #8]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d101      	bne.n	8015b3c <xQueueGenericCreateStatic+0x94>
 8015b38:	2301      	movs	r3, #1
 8015b3a:	e000      	b.n	8015b3e <xQueueGenericCreateStatic+0x96>
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d10d      	bne.n	8015b5e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8015b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b46:	b672      	cpsid	i
 8015b48:	f383 8811 	msr	BASEPRI, r3
 8015b4c:	f3bf 8f6f 	isb	sy
 8015b50:	f3bf 8f4f 	dsb	sy
 8015b54:	b662      	cpsie	i
 8015b56:	61fb      	str	r3, [r7, #28]
}
 8015b58:	bf00      	nop
 8015b5a:	bf00      	nop
 8015b5c:	e7fd      	b.n	8015b5a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015b5e:	2348      	movs	r3, #72	@ 0x48
 8015b60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8015b62:	697b      	ldr	r3, [r7, #20]
 8015b64:	2b48      	cmp	r3, #72	@ 0x48
 8015b66:	d00d      	beq.n	8015b84 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8015b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b6c:	b672      	cpsid	i
 8015b6e:	f383 8811 	msr	BASEPRI, r3
 8015b72:	f3bf 8f6f 	isb	sy
 8015b76:	f3bf 8f4f 	dsb	sy
 8015b7a:	b662      	cpsie	i
 8015b7c:	61bb      	str	r3, [r7, #24]
}
 8015b7e:	bf00      	nop
 8015b80:	bf00      	nop
 8015b82:	e7fd      	b.n	8015b80 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015b84:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015b86:	683b      	ldr	r3, [r7, #0]
 8015b88:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8015b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d00d      	beq.n	8015bac <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b92:	2201      	movs	r2, #1
 8015b94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015b98:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8015b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b9e:	9300      	str	r3, [sp, #0]
 8015ba0:	4613      	mov	r3, r2
 8015ba2:	687a      	ldr	r2, [r7, #4]
 8015ba4:	68b9      	ldr	r1, [r7, #8]
 8015ba6:	68f8      	ldr	r0, [r7, #12]
 8015ba8:	f000 f848 	bl	8015c3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8015bae:	4618      	mov	r0, r3
 8015bb0:	3730      	adds	r7, #48	@ 0x30
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bd80      	pop	{r7, pc}

08015bb6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015bb6:	b580      	push	{r7, lr}
 8015bb8:	b08a      	sub	sp, #40	@ 0x28
 8015bba:	af02      	add	r7, sp, #8
 8015bbc:	60f8      	str	r0, [r7, #12]
 8015bbe:	60b9      	str	r1, [r7, #8]
 8015bc0:	4613      	mov	r3, r2
 8015bc2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d10d      	bne.n	8015be6 <xQueueGenericCreate+0x30>
	__asm volatile
 8015bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015bce:	b672      	cpsid	i
 8015bd0:	f383 8811 	msr	BASEPRI, r3
 8015bd4:	f3bf 8f6f 	isb	sy
 8015bd8:	f3bf 8f4f 	dsb	sy
 8015bdc:	b662      	cpsie	i
 8015bde:	613b      	str	r3, [r7, #16]
}
 8015be0:	bf00      	nop
 8015be2:	bf00      	nop
 8015be4:	e7fd      	b.n	8015be2 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8015be6:	68bb      	ldr	r3, [r7, #8]
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d102      	bne.n	8015bf2 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8015bec:	2300      	movs	r3, #0
 8015bee:	61fb      	str	r3, [r7, #28]
 8015bf0:	e004      	b.n	8015bfc <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	68ba      	ldr	r2, [r7, #8]
 8015bf6:	fb02 f303 	mul.w	r3, r2, r3
 8015bfa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015bfc:	69fb      	ldr	r3, [r7, #28]
 8015bfe:	3348      	adds	r3, #72	@ 0x48
 8015c00:	4618      	mov	r0, r3
 8015c02:	f001 fe41 	bl	8017888 <pvPortMalloc>
 8015c06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015c08:	69bb      	ldr	r3, [r7, #24]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d011      	beq.n	8015c32 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8015c0e:	69bb      	ldr	r3, [r7, #24]
 8015c10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015c12:	697b      	ldr	r3, [r7, #20]
 8015c14:	3348      	adds	r3, #72	@ 0x48
 8015c16:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015c18:	69bb      	ldr	r3, [r7, #24]
 8015c1a:	2200      	movs	r2, #0
 8015c1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015c20:	79fa      	ldrb	r2, [r7, #7]
 8015c22:	69bb      	ldr	r3, [r7, #24]
 8015c24:	9300      	str	r3, [sp, #0]
 8015c26:	4613      	mov	r3, r2
 8015c28:	697a      	ldr	r2, [r7, #20]
 8015c2a:	68b9      	ldr	r1, [r7, #8]
 8015c2c:	68f8      	ldr	r0, [r7, #12]
 8015c2e:	f000 f805 	bl	8015c3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015c32:	69bb      	ldr	r3, [r7, #24]
	}
 8015c34:	4618      	mov	r0, r3
 8015c36:	3720      	adds	r7, #32
 8015c38:	46bd      	mov	sp, r7
 8015c3a:	bd80      	pop	{r7, pc}

08015c3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015c3c:	b580      	push	{r7, lr}
 8015c3e:	b084      	sub	sp, #16
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	60f8      	str	r0, [r7, #12]
 8015c44:	60b9      	str	r1, [r7, #8]
 8015c46:	607a      	str	r2, [r7, #4]
 8015c48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015c4a:	68bb      	ldr	r3, [r7, #8]
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d103      	bne.n	8015c58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015c50:	69bb      	ldr	r3, [r7, #24]
 8015c52:	69ba      	ldr	r2, [r7, #24]
 8015c54:	601a      	str	r2, [r3, #0]
 8015c56:	e002      	b.n	8015c5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015c58:	69bb      	ldr	r3, [r7, #24]
 8015c5a:	687a      	ldr	r2, [r7, #4]
 8015c5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015c5e:	69bb      	ldr	r3, [r7, #24]
 8015c60:	68fa      	ldr	r2, [r7, #12]
 8015c62:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015c64:	69bb      	ldr	r3, [r7, #24]
 8015c66:	68ba      	ldr	r2, [r7, #8]
 8015c68:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015c6a:	2101      	movs	r1, #1
 8015c6c:	69b8      	ldr	r0, [r7, #24]
 8015c6e:	f7ff feaf 	bl	80159d0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015c72:	bf00      	nop
 8015c74:	3710      	adds	r7, #16
 8015c76:	46bd      	mov	sp, r7
 8015c78:	bd80      	pop	{r7, pc}
	...

08015c7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	b08e      	sub	sp, #56	@ 0x38
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	60f8      	str	r0, [r7, #12]
 8015c84:	60b9      	str	r1, [r7, #8]
 8015c86:	607a      	str	r2, [r7, #4]
 8015c88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015c8a:	2300      	movs	r3, #0
 8015c8c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8015c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d10d      	bne.n	8015cb4 <xQueueGenericSend+0x38>
	__asm volatile
 8015c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c9c:	b672      	cpsid	i
 8015c9e:	f383 8811 	msr	BASEPRI, r3
 8015ca2:	f3bf 8f6f 	isb	sy
 8015ca6:	f3bf 8f4f 	dsb	sy
 8015caa:	b662      	cpsie	i
 8015cac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8015cae:	bf00      	nop
 8015cb0:	bf00      	nop
 8015cb2:	e7fd      	b.n	8015cb0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015cb4:	68bb      	ldr	r3, [r7, #8]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d103      	bne.n	8015cc2 <xQueueGenericSend+0x46>
 8015cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d101      	bne.n	8015cc6 <xQueueGenericSend+0x4a>
 8015cc2:	2301      	movs	r3, #1
 8015cc4:	e000      	b.n	8015cc8 <xQueueGenericSend+0x4c>
 8015cc6:	2300      	movs	r3, #0
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d10d      	bne.n	8015ce8 <xQueueGenericSend+0x6c>
	__asm volatile
 8015ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015cd0:	b672      	cpsid	i
 8015cd2:	f383 8811 	msr	BASEPRI, r3
 8015cd6:	f3bf 8f6f 	isb	sy
 8015cda:	f3bf 8f4f 	dsb	sy
 8015cde:	b662      	cpsie	i
 8015ce0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8015ce2:	bf00      	nop
 8015ce4:	bf00      	nop
 8015ce6:	e7fd      	b.n	8015ce4 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015ce8:	683b      	ldr	r3, [r7, #0]
 8015cea:	2b02      	cmp	r3, #2
 8015cec:	d103      	bne.n	8015cf6 <xQueueGenericSend+0x7a>
 8015cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015cf2:	2b01      	cmp	r3, #1
 8015cf4:	d101      	bne.n	8015cfa <xQueueGenericSend+0x7e>
 8015cf6:	2301      	movs	r3, #1
 8015cf8:	e000      	b.n	8015cfc <xQueueGenericSend+0x80>
 8015cfa:	2300      	movs	r3, #0
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d10d      	bne.n	8015d1c <xQueueGenericSend+0xa0>
	__asm volatile
 8015d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d04:	b672      	cpsid	i
 8015d06:	f383 8811 	msr	BASEPRI, r3
 8015d0a:	f3bf 8f6f 	isb	sy
 8015d0e:	f3bf 8f4f 	dsb	sy
 8015d12:	b662      	cpsie	i
 8015d14:	623b      	str	r3, [r7, #32]
}
 8015d16:	bf00      	nop
 8015d18:	bf00      	nop
 8015d1a:	e7fd      	b.n	8015d18 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015d1c:	f001 fa68 	bl	80171f0 <xTaskGetSchedulerState>
 8015d20:	4603      	mov	r3, r0
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d102      	bne.n	8015d2c <xQueueGenericSend+0xb0>
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d101      	bne.n	8015d30 <xQueueGenericSend+0xb4>
 8015d2c:	2301      	movs	r3, #1
 8015d2e:	e000      	b.n	8015d32 <xQueueGenericSend+0xb6>
 8015d30:	2300      	movs	r3, #0
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d10d      	bne.n	8015d52 <xQueueGenericSend+0xd6>
	__asm volatile
 8015d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d3a:	b672      	cpsid	i
 8015d3c:	f383 8811 	msr	BASEPRI, r3
 8015d40:	f3bf 8f6f 	isb	sy
 8015d44:	f3bf 8f4f 	dsb	sy
 8015d48:	b662      	cpsie	i
 8015d4a:	61fb      	str	r3, [r7, #28]
}
 8015d4c:	bf00      	nop
 8015d4e:	bf00      	nop
 8015d50:	e7fd      	b.n	8015d4e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015d52:	f001 fc6b 	bl	801762c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015d5e:	429a      	cmp	r2, r3
 8015d60:	d302      	bcc.n	8015d68 <xQueueGenericSend+0xec>
 8015d62:	683b      	ldr	r3, [r7, #0]
 8015d64:	2b02      	cmp	r3, #2
 8015d66:	d129      	bne.n	8015dbc <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015d68:	683a      	ldr	r2, [r7, #0]
 8015d6a:	68b9      	ldr	r1, [r7, #8]
 8015d6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015d6e:	f000 fae5 	bl	801633c <prvCopyDataToQueue>
 8015d72:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d010      	beq.n	8015d9e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d7e:	3324      	adds	r3, #36	@ 0x24
 8015d80:	4618      	mov	r0, r3
 8015d82:	f001 f86b 	bl	8016e5c <xTaskRemoveFromEventList>
 8015d86:	4603      	mov	r3, r0
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d013      	beq.n	8015db4 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015d8c:	4b3f      	ldr	r3, [pc, #252]	@ (8015e8c <xQueueGenericSend+0x210>)
 8015d8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015d92:	601a      	str	r2, [r3, #0]
 8015d94:	f3bf 8f4f 	dsb	sy
 8015d98:	f3bf 8f6f 	isb	sy
 8015d9c:	e00a      	b.n	8015db4 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d007      	beq.n	8015db4 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015da4:	4b39      	ldr	r3, [pc, #228]	@ (8015e8c <xQueueGenericSend+0x210>)
 8015da6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015daa:	601a      	str	r2, [r3, #0]
 8015dac:	f3bf 8f4f 	dsb	sy
 8015db0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015db4:	f001 fc70 	bl	8017698 <vPortExitCritical>
				return pdPASS;
 8015db8:	2301      	movs	r3, #1
 8015dba:	e063      	b.n	8015e84 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d103      	bne.n	8015dca <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015dc2:	f001 fc69 	bl	8017698 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	e05c      	b.n	8015e84 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d106      	bne.n	8015dde <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015dd0:	f107 0314 	add.w	r3, r7, #20
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	f001 f8a7 	bl	8016f28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015dda:	2301      	movs	r3, #1
 8015ddc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015dde:	f001 fc5b 	bl	8017698 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015de2:	f000 fe03 	bl	80169ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015de6:	f001 fc21 	bl	801762c <vPortEnterCritical>
 8015dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015dec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015df0:	b25b      	sxtb	r3, r3
 8015df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015df6:	d103      	bne.n	8015e00 <xQueueGenericSend+0x184>
 8015df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015e06:	b25b      	sxtb	r3, r3
 8015e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e0c:	d103      	bne.n	8015e16 <xQueueGenericSend+0x19a>
 8015e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e10:	2200      	movs	r2, #0
 8015e12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015e16:	f001 fc3f 	bl	8017698 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015e1a:	1d3a      	adds	r2, r7, #4
 8015e1c:	f107 0314 	add.w	r3, r7, #20
 8015e20:	4611      	mov	r1, r2
 8015e22:	4618      	mov	r0, r3
 8015e24:	f001 f896 	bl	8016f54 <xTaskCheckForTimeOut>
 8015e28:	4603      	mov	r3, r0
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d124      	bne.n	8015e78 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015e2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015e30:	f000 fb7c 	bl	801652c <prvIsQueueFull>
 8015e34:	4603      	mov	r3, r0
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d018      	beq.n	8015e6c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e3c:	3310      	adds	r3, #16
 8015e3e:	687a      	ldr	r2, [r7, #4]
 8015e40:	4611      	mov	r1, r2
 8015e42:	4618      	mov	r0, r3
 8015e44:	f000 ffe2 	bl	8016e0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015e48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015e4a:	f000 fb07 	bl	801645c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015e4e:	f000 fddb 	bl	8016a08 <xTaskResumeAll>
 8015e52:	4603      	mov	r3, r0
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	f47f af7c 	bne.w	8015d52 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8015e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8015e8c <xQueueGenericSend+0x210>)
 8015e5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015e60:	601a      	str	r2, [r3, #0]
 8015e62:	f3bf 8f4f 	dsb	sy
 8015e66:	f3bf 8f6f 	isb	sy
 8015e6a:	e772      	b.n	8015d52 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015e6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015e6e:	f000 faf5 	bl	801645c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015e72:	f000 fdc9 	bl	8016a08 <xTaskResumeAll>
 8015e76:	e76c      	b.n	8015d52 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015e78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015e7a:	f000 faef 	bl	801645c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015e7e:	f000 fdc3 	bl	8016a08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015e82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015e84:	4618      	mov	r0, r3
 8015e86:	3738      	adds	r7, #56	@ 0x38
 8015e88:	46bd      	mov	sp, r7
 8015e8a:	bd80      	pop	{r7, pc}
 8015e8c:	e000ed04 	.word	0xe000ed04

08015e90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015e90:	b580      	push	{r7, lr}
 8015e92:	b08e      	sub	sp, #56	@ 0x38
 8015e94:	af00      	add	r7, sp, #0
 8015e96:	60f8      	str	r0, [r7, #12]
 8015e98:	60b9      	str	r1, [r7, #8]
 8015e9a:	607a      	str	r2, [r7, #4]
 8015e9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8015ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d10d      	bne.n	8015ec4 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8015ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015eac:	b672      	cpsid	i
 8015eae:	f383 8811 	msr	BASEPRI, r3
 8015eb2:	f3bf 8f6f 	isb	sy
 8015eb6:	f3bf 8f4f 	dsb	sy
 8015eba:	b662      	cpsie	i
 8015ebc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8015ebe:	bf00      	nop
 8015ec0:	bf00      	nop
 8015ec2:	e7fd      	b.n	8015ec0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015ec4:	68bb      	ldr	r3, [r7, #8]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d103      	bne.n	8015ed2 <xQueueGenericSendFromISR+0x42>
 8015eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d101      	bne.n	8015ed6 <xQueueGenericSendFromISR+0x46>
 8015ed2:	2301      	movs	r3, #1
 8015ed4:	e000      	b.n	8015ed8 <xQueueGenericSendFromISR+0x48>
 8015ed6:	2300      	movs	r3, #0
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d10d      	bne.n	8015ef8 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8015edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ee0:	b672      	cpsid	i
 8015ee2:	f383 8811 	msr	BASEPRI, r3
 8015ee6:	f3bf 8f6f 	isb	sy
 8015eea:	f3bf 8f4f 	dsb	sy
 8015eee:	b662      	cpsie	i
 8015ef0:	623b      	str	r3, [r7, #32]
}
 8015ef2:	bf00      	nop
 8015ef4:	bf00      	nop
 8015ef6:	e7fd      	b.n	8015ef4 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015ef8:	683b      	ldr	r3, [r7, #0]
 8015efa:	2b02      	cmp	r3, #2
 8015efc:	d103      	bne.n	8015f06 <xQueueGenericSendFromISR+0x76>
 8015efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015f02:	2b01      	cmp	r3, #1
 8015f04:	d101      	bne.n	8015f0a <xQueueGenericSendFromISR+0x7a>
 8015f06:	2301      	movs	r3, #1
 8015f08:	e000      	b.n	8015f0c <xQueueGenericSendFromISR+0x7c>
 8015f0a:	2300      	movs	r3, #0
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d10d      	bne.n	8015f2c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8015f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f14:	b672      	cpsid	i
 8015f16:	f383 8811 	msr	BASEPRI, r3
 8015f1a:	f3bf 8f6f 	isb	sy
 8015f1e:	f3bf 8f4f 	dsb	sy
 8015f22:	b662      	cpsie	i
 8015f24:	61fb      	str	r3, [r7, #28]
}
 8015f26:	bf00      	nop
 8015f28:	bf00      	nop
 8015f2a:	e7fd      	b.n	8015f28 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015f2c:	f001 fc66 	bl	80177fc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015f30:	f3ef 8211 	mrs	r2, BASEPRI
 8015f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f38:	b672      	cpsid	i
 8015f3a:	f383 8811 	msr	BASEPRI, r3
 8015f3e:	f3bf 8f6f 	isb	sy
 8015f42:	f3bf 8f4f 	dsb	sy
 8015f46:	b662      	cpsie	i
 8015f48:	61ba      	str	r2, [r7, #24]
 8015f4a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015f4c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015f58:	429a      	cmp	r2, r3
 8015f5a:	d302      	bcc.n	8015f62 <xQueueGenericSendFromISR+0xd2>
 8015f5c:	683b      	ldr	r3, [r7, #0]
 8015f5e:	2b02      	cmp	r3, #2
 8015f60:	d12c      	bne.n	8015fbc <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015f68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015f6c:	683a      	ldr	r2, [r7, #0]
 8015f6e:	68b9      	ldr	r1, [r7, #8]
 8015f70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015f72:	f000 f9e3 	bl	801633c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015f76:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8015f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f7e:	d112      	bne.n	8015fa6 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d016      	beq.n	8015fb6 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f8a:	3324      	adds	r3, #36	@ 0x24
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	f000 ff65 	bl	8016e5c <xTaskRemoveFromEventList>
 8015f92:	4603      	mov	r3, r0
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d00e      	beq.n	8015fb6 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d00b      	beq.n	8015fb6 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	2201      	movs	r2, #1
 8015fa2:	601a      	str	r2, [r3, #0]
 8015fa4:	e007      	b.n	8015fb6 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015fa6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8015faa:	3301      	adds	r3, #1
 8015fac:	b2db      	uxtb	r3, r3
 8015fae:	b25a      	sxtb	r2, r3
 8015fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8015fb6:	2301      	movs	r3, #1
 8015fb8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8015fba:	e001      	b.n	8015fc0 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015fbc:	2300      	movs	r3, #0
 8015fbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8015fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fc2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015fc4:	693b      	ldr	r3, [r7, #16]
 8015fc6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015fca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8015fce:	4618      	mov	r0, r3
 8015fd0:	3738      	adds	r7, #56	@ 0x38
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bd80      	pop	{r7, pc}
	...

08015fd8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015fd8:	b580      	push	{r7, lr}
 8015fda:	b08c      	sub	sp, #48	@ 0x30
 8015fdc:	af00      	add	r7, sp, #0
 8015fde:	60f8      	str	r0, [r7, #12]
 8015fe0:	60b9      	str	r1, [r7, #8]
 8015fe2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015fe8:	68fb      	ldr	r3, [r7, #12]
 8015fea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d10d      	bne.n	801600e <xQueueReceive+0x36>
	__asm volatile
 8015ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ff6:	b672      	cpsid	i
 8015ff8:	f383 8811 	msr	BASEPRI, r3
 8015ffc:	f3bf 8f6f 	isb	sy
 8016000:	f3bf 8f4f 	dsb	sy
 8016004:	b662      	cpsie	i
 8016006:	623b      	str	r3, [r7, #32]
}
 8016008:	bf00      	nop
 801600a:	bf00      	nop
 801600c:	e7fd      	b.n	801600a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801600e:	68bb      	ldr	r3, [r7, #8]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d103      	bne.n	801601c <xQueueReceive+0x44>
 8016014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016018:	2b00      	cmp	r3, #0
 801601a:	d101      	bne.n	8016020 <xQueueReceive+0x48>
 801601c:	2301      	movs	r3, #1
 801601e:	e000      	b.n	8016022 <xQueueReceive+0x4a>
 8016020:	2300      	movs	r3, #0
 8016022:	2b00      	cmp	r3, #0
 8016024:	d10d      	bne.n	8016042 <xQueueReceive+0x6a>
	__asm volatile
 8016026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801602a:	b672      	cpsid	i
 801602c:	f383 8811 	msr	BASEPRI, r3
 8016030:	f3bf 8f6f 	isb	sy
 8016034:	f3bf 8f4f 	dsb	sy
 8016038:	b662      	cpsie	i
 801603a:	61fb      	str	r3, [r7, #28]
}
 801603c:	bf00      	nop
 801603e:	bf00      	nop
 8016040:	e7fd      	b.n	801603e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016042:	f001 f8d5 	bl	80171f0 <xTaskGetSchedulerState>
 8016046:	4603      	mov	r3, r0
 8016048:	2b00      	cmp	r3, #0
 801604a:	d102      	bne.n	8016052 <xQueueReceive+0x7a>
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	2b00      	cmp	r3, #0
 8016050:	d101      	bne.n	8016056 <xQueueReceive+0x7e>
 8016052:	2301      	movs	r3, #1
 8016054:	e000      	b.n	8016058 <xQueueReceive+0x80>
 8016056:	2300      	movs	r3, #0
 8016058:	2b00      	cmp	r3, #0
 801605a:	d10d      	bne.n	8016078 <xQueueReceive+0xa0>
	__asm volatile
 801605c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016060:	b672      	cpsid	i
 8016062:	f383 8811 	msr	BASEPRI, r3
 8016066:	f3bf 8f6f 	isb	sy
 801606a:	f3bf 8f4f 	dsb	sy
 801606e:	b662      	cpsie	i
 8016070:	61bb      	str	r3, [r7, #24]
}
 8016072:	bf00      	nop
 8016074:	bf00      	nop
 8016076:	e7fd      	b.n	8016074 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016078:	f001 fad8 	bl	801762c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801607c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801607e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016080:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016084:	2b00      	cmp	r3, #0
 8016086:	d01f      	beq.n	80160c8 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016088:	68b9      	ldr	r1, [r7, #8]
 801608a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801608c:	f000 f9c0 	bl	8016410 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016092:	1e5a      	subs	r2, r3, #1
 8016094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016096:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801609a:	691b      	ldr	r3, [r3, #16]
 801609c:	2b00      	cmp	r3, #0
 801609e:	d00f      	beq.n	80160c0 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80160a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160a2:	3310      	adds	r3, #16
 80160a4:	4618      	mov	r0, r3
 80160a6:	f000 fed9 	bl	8016e5c <xTaskRemoveFromEventList>
 80160aa:	4603      	mov	r3, r0
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d007      	beq.n	80160c0 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80160b0:	4b3c      	ldr	r3, [pc, #240]	@ (80161a4 <xQueueReceive+0x1cc>)
 80160b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80160b6:	601a      	str	r2, [r3, #0]
 80160b8:	f3bf 8f4f 	dsb	sy
 80160bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80160c0:	f001 faea 	bl	8017698 <vPortExitCritical>
				return pdPASS;
 80160c4:	2301      	movs	r3, #1
 80160c6:	e069      	b.n	801619c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d103      	bne.n	80160d6 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80160ce:	f001 fae3 	bl	8017698 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80160d2:	2300      	movs	r3, #0
 80160d4:	e062      	b.n	801619c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80160d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d106      	bne.n	80160ea <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80160dc:	f107 0310 	add.w	r3, r7, #16
 80160e0:	4618      	mov	r0, r3
 80160e2:	f000 ff21 	bl	8016f28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80160e6:	2301      	movs	r3, #1
 80160e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80160ea:	f001 fad5 	bl	8017698 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80160ee:	f000 fc7d 	bl	80169ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80160f2:	f001 fa9b 	bl	801762c <vPortEnterCritical>
 80160f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80160fc:	b25b      	sxtb	r3, r3
 80160fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016102:	d103      	bne.n	801610c <xQueueReceive+0x134>
 8016104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016106:	2200      	movs	r2, #0
 8016108:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801610c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801610e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8016112:	b25b      	sxtb	r3, r3
 8016114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016118:	d103      	bne.n	8016122 <xQueueReceive+0x14a>
 801611a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801611c:	2200      	movs	r2, #0
 801611e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016122:	f001 fab9 	bl	8017698 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016126:	1d3a      	adds	r2, r7, #4
 8016128:	f107 0310 	add.w	r3, r7, #16
 801612c:	4611      	mov	r1, r2
 801612e:	4618      	mov	r0, r3
 8016130:	f000 ff10 	bl	8016f54 <xTaskCheckForTimeOut>
 8016134:	4603      	mov	r3, r0
 8016136:	2b00      	cmp	r3, #0
 8016138:	d123      	bne.n	8016182 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801613a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801613c:	f000 f9e0 	bl	8016500 <prvIsQueueEmpty>
 8016140:	4603      	mov	r3, r0
 8016142:	2b00      	cmp	r3, #0
 8016144:	d017      	beq.n	8016176 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016148:	3324      	adds	r3, #36	@ 0x24
 801614a:	687a      	ldr	r2, [r7, #4]
 801614c:	4611      	mov	r1, r2
 801614e:	4618      	mov	r0, r3
 8016150:	f000 fe5c 	bl	8016e0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016154:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016156:	f000 f981 	bl	801645c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801615a:	f000 fc55 	bl	8016a08 <xTaskResumeAll>
 801615e:	4603      	mov	r3, r0
 8016160:	2b00      	cmp	r3, #0
 8016162:	d189      	bne.n	8016078 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8016164:	4b0f      	ldr	r3, [pc, #60]	@ (80161a4 <xQueueReceive+0x1cc>)
 8016166:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801616a:	601a      	str	r2, [r3, #0]
 801616c:	f3bf 8f4f 	dsb	sy
 8016170:	f3bf 8f6f 	isb	sy
 8016174:	e780      	b.n	8016078 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016176:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016178:	f000 f970 	bl	801645c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801617c:	f000 fc44 	bl	8016a08 <xTaskResumeAll>
 8016180:	e77a      	b.n	8016078 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8016182:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016184:	f000 f96a 	bl	801645c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016188:	f000 fc3e 	bl	8016a08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801618c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801618e:	f000 f9b7 	bl	8016500 <prvIsQueueEmpty>
 8016192:	4603      	mov	r3, r0
 8016194:	2b00      	cmp	r3, #0
 8016196:	f43f af6f 	beq.w	8016078 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801619a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801619c:	4618      	mov	r0, r3
 801619e:	3730      	adds	r7, #48	@ 0x30
 80161a0:	46bd      	mov	sp, r7
 80161a2:	bd80      	pop	{r7, pc}
 80161a4:	e000ed04 	.word	0xe000ed04

080161a8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80161a8:	b580      	push	{r7, lr}
 80161aa:	b08e      	sub	sp, #56	@ 0x38
 80161ac:	af00      	add	r7, sp, #0
 80161ae:	60f8      	str	r0, [r7, #12]
 80161b0:	60b9      	str	r1, [r7, #8]
 80161b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80161b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d10d      	bne.n	80161da <xQueueReceiveFromISR+0x32>
	__asm volatile
 80161be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80161c2:	b672      	cpsid	i
 80161c4:	f383 8811 	msr	BASEPRI, r3
 80161c8:	f3bf 8f6f 	isb	sy
 80161cc:	f3bf 8f4f 	dsb	sy
 80161d0:	b662      	cpsie	i
 80161d2:	623b      	str	r3, [r7, #32]
}
 80161d4:	bf00      	nop
 80161d6:	bf00      	nop
 80161d8:	e7fd      	b.n	80161d6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80161da:	68bb      	ldr	r3, [r7, #8]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d103      	bne.n	80161e8 <xQueueReceiveFromISR+0x40>
 80161e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d101      	bne.n	80161ec <xQueueReceiveFromISR+0x44>
 80161e8:	2301      	movs	r3, #1
 80161ea:	e000      	b.n	80161ee <xQueueReceiveFromISR+0x46>
 80161ec:	2300      	movs	r3, #0
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d10d      	bne.n	801620e <xQueueReceiveFromISR+0x66>
	__asm volatile
 80161f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80161f6:	b672      	cpsid	i
 80161f8:	f383 8811 	msr	BASEPRI, r3
 80161fc:	f3bf 8f6f 	isb	sy
 8016200:	f3bf 8f4f 	dsb	sy
 8016204:	b662      	cpsie	i
 8016206:	61fb      	str	r3, [r7, #28]
}
 8016208:	bf00      	nop
 801620a:	bf00      	nop
 801620c:	e7fd      	b.n	801620a <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801620e:	f001 faf5 	bl	80177fc <vPortValidateInterruptPriority>
	__asm volatile
 8016212:	f3ef 8211 	mrs	r2, BASEPRI
 8016216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801621a:	b672      	cpsid	i
 801621c:	f383 8811 	msr	BASEPRI, r3
 8016220:	f3bf 8f6f 	isb	sy
 8016224:	f3bf 8f4f 	dsb	sy
 8016228:	b662      	cpsie	i
 801622a:	61ba      	str	r2, [r7, #24]
 801622c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801622e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016230:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016236:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801623a:	2b00      	cmp	r3, #0
 801623c:	d02f      	beq.n	801629e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801623e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016240:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8016244:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016248:	68b9      	ldr	r1, [r7, #8]
 801624a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801624c:	f000 f8e0 	bl	8016410 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016252:	1e5a      	subs	r2, r3, #1
 8016254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016256:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8016258:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801625c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016260:	d112      	bne.n	8016288 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016264:	691b      	ldr	r3, [r3, #16]
 8016266:	2b00      	cmp	r3, #0
 8016268:	d016      	beq.n	8016298 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801626a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801626c:	3310      	adds	r3, #16
 801626e:	4618      	mov	r0, r3
 8016270:	f000 fdf4 	bl	8016e5c <xTaskRemoveFromEventList>
 8016274:	4603      	mov	r3, r0
 8016276:	2b00      	cmp	r3, #0
 8016278:	d00e      	beq.n	8016298 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d00b      	beq.n	8016298 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	2201      	movs	r2, #1
 8016284:	601a      	str	r2, [r3, #0]
 8016286:	e007      	b.n	8016298 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8016288:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801628c:	3301      	adds	r3, #1
 801628e:	b2db      	uxtb	r3, r3
 8016290:	b25a      	sxtb	r2, r3
 8016292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016294:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8016298:	2301      	movs	r3, #1
 801629a:	637b      	str	r3, [r7, #52]	@ 0x34
 801629c:	e001      	b.n	80162a2 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 801629e:	2300      	movs	r3, #0
 80162a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80162a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80162a6:	693b      	ldr	r3, [r7, #16]
 80162a8:	f383 8811 	msr	BASEPRI, r3
}
 80162ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80162ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80162b0:	4618      	mov	r0, r3
 80162b2:	3738      	adds	r7, #56	@ 0x38
 80162b4:	46bd      	mov	sp, r7
 80162b6:	bd80      	pop	{r7, pc}

080162b8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80162b8:	b580      	push	{r7, lr}
 80162ba:	b084      	sub	sp, #16
 80162bc:	af00      	add	r7, sp, #0
 80162be:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d10d      	bne.n	80162e2 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 80162c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162ca:	b672      	cpsid	i
 80162cc:	f383 8811 	msr	BASEPRI, r3
 80162d0:	f3bf 8f6f 	isb	sy
 80162d4:	f3bf 8f4f 	dsb	sy
 80162d8:	b662      	cpsie	i
 80162da:	60bb      	str	r3, [r7, #8]
}
 80162dc:	bf00      	nop
 80162de:	bf00      	nop
 80162e0:	e7fd      	b.n	80162de <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80162e2:	f001 f9a3 	bl	801762c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80162ea:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80162ec:	f001 f9d4 	bl	8017698 <vPortExitCritical>

	return uxReturn;
 80162f0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80162f2:	4618      	mov	r0, r3
 80162f4:	3710      	adds	r7, #16
 80162f6:	46bd      	mov	sp, r7
 80162f8:	bd80      	pop	{r7, pc}

080162fa <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80162fa:	b480      	push	{r7}
 80162fc:	b087      	sub	sp, #28
 80162fe:	af00      	add	r7, sp, #0
 8016300:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8016306:	697b      	ldr	r3, [r7, #20]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d10d      	bne.n	8016328 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 801630c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016310:	b672      	cpsid	i
 8016312:	f383 8811 	msr	BASEPRI, r3
 8016316:	f3bf 8f6f 	isb	sy
 801631a:	f3bf 8f4f 	dsb	sy
 801631e:	b662      	cpsie	i
 8016320:	60fb      	str	r3, [r7, #12]
}
 8016322:	bf00      	nop
 8016324:	bf00      	nop
 8016326:	e7fd      	b.n	8016324 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8016328:	697b      	ldr	r3, [r7, #20]
 801632a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801632c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 801632e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8016330:	4618      	mov	r0, r3
 8016332:	371c      	adds	r7, #28
 8016334:	46bd      	mov	sp, r7
 8016336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801633a:	4770      	bx	lr

0801633c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801633c:	b580      	push	{r7, lr}
 801633e:	b086      	sub	sp, #24
 8016340:	af00      	add	r7, sp, #0
 8016342:	60f8      	str	r0, [r7, #12]
 8016344:	60b9      	str	r1, [r7, #8]
 8016346:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8016348:	2300      	movs	r3, #0
 801634a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016350:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016356:	2b00      	cmp	r3, #0
 8016358:	d10d      	bne.n	8016376 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	2b00      	cmp	r3, #0
 8016360:	d14d      	bne.n	80163fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	689b      	ldr	r3, [r3, #8]
 8016366:	4618      	mov	r0, r3
 8016368:	f000 ff60 	bl	801722c <xTaskPriorityDisinherit>
 801636c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801636e:	68fb      	ldr	r3, [r7, #12]
 8016370:	2200      	movs	r2, #0
 8016372:	609a      	str	r2, [r3, #8]
 8016374:	e043      	b.n	80163fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	2b00      	cmp	r3, #0
 801637a:	d119      	bne.n	80163b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801637c:	68fb      	ldr	r3, [r7, #12]
 801637e:	6858      	ldr	r0, [r3, #4]
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016384:	461a      	mov	r2, r3
 8016386:	68b9      	ldr	r1, [r7, #8]
 8016388:	f002 f855 	bl	8018436 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	685a      	ldr	r2, [r3, #4]
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016394:	441a      	add	r2, r3
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801639a:	68fb      	ldr	r3, [r7, #12]
 801639c:	685a      	ldr	r2, [r3, #4]
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	689b      	ldr	r3, [r3, #8]
 80163a2:	429a      	cmp	r2, r3
 80163a4:	d32b      	bcc.n	80163fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	681a      	ldr	r2, [r3, #0]
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	605a      	str	r2, [r3, #4]
 80163ae:	e026      	b.n	80163fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	68d8      	ldr	r0, [r3, #12]
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80163b8:	461a      	mov	r2, r3
 80163ba:	68b9      	ldr	r1, [r7, #8]
 80163bc:	f002 f83b 	bl	8018436 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	68da      	ldr	r2, [r3, #12]
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80163c8:	425b      	negs	r3, r3
 80163ca:	441a      	add	r2, r3
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	68da      	ldr	r2, [r3, #12]
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	429a      	cmp	r2, r3
 80163da:	d207      	bcs.n	80163ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	689a      	ldr	r2, [r3, #8]
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80163e4:	425b      	negs	r3, r3
 80163e6:	441a      	add	r2, r3
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	2b02      	cmp	r3, #2
 80163f0:	d105      	bne.n	80163fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80163f2:	693b      	ldr	r3, [r7, #16]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d002      	beq.n	80163fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80163f8:	693b      	ldr	r3, [r7, #16]
 80163fa:	3b01      	subs	r3, #1
 80163fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80163fe:	693b      	ldr	r3, [r7, #16]
 8016400:	1c5a      	adds	r2, r3, #1
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8016406:	697b      	ldr	r3, [r7, #20]
}
 8016408:	4618      	mov	r0, r3
 801640a:	3718      	adds	r7, #24
 801640c:	46bd      	mov	sp, r7
 801640e:	bd80      	pop	{r7, pc}

08016410 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016410:	b580      	push	{r7, lr}
 8016412:	b082      	sub	sp, #8
 8016414:	af00      	add	r7, sp, #0
 8016416:	6078      	str	r0, [r7, #4]
 8016418:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801641e:	2b00      	cmp	r3, #0
 8016420:	d018      	beq.n	8016454 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	68da      	ldr	r2, [r3, #12]
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801642a:	441a      	add	r2, r3
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	68da      	ldr	r2, [r3, #12]
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	689b      	ldr	r3, [r3, #8]
 8016438:	429a      	cmp	r2, r3
 801643a:	d303      	bcc.n	8016444 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	681a      	ldr	r2, [r3, #0]
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	68d9      	ldr	r1, [r3, #12]
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801644c:	461a      	mov	r2, r3
 801644e:	6838      	ldr	r0, [r7, #0]
 8016450:	f001 fff1 	bl	8018436 <memcpy>
	}
}
 8016454:	bf00      	nop
 8016456:	3708      	adds	r7, #8
 8016458:	46bd      	mov	sp, r7
 801645a:	bd80      	pop	{r7, pc}

0801645c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801645c:	b580      	push	{r7, lr}
 801645e:	b084      	sub	sp, #16
 8016460:	af00      	add	r7, sp, #0
 8016462:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016464:	f001 f8e2 	bl	801762c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801646e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016470:	e011      	b.n	8016496 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016476:	2b00      	cmp	r3, #0
 8016478:	d012      	beq.n	80164a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	3324      	adds	r3, #36	@ 0x24
 801647e:	4618      	mov	r0, r3
 8016480:	f000 fcec 	bl	8016e5c <xTaskRemoveFromEventList>
 8016484:	4603      	mov	r3, r0
 8016486:	2b00      	cmp	r3, #0
 8016488:	d001      	beq.n	801648e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801648a:	f000 fdcb 	bl	8017024 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801648e:	7bfb      	ldrb	r3, [r7, #15]
 8016490:	3b01      	subs	r3, #1
 8016492:	b2db      	uxtb	r3, r3
 8016494:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801649a:	2b00      	cmp	r3, #0
 801649c:	dce9      	bgt.n	8016472 <prvUnlockQueue+0x16>
 801649e:	e000      	b.n	80164a2 <prvUnlockQueue+0x46>
					break;
 80164a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	22ff      	movs	r2, #255	@ 0xff
 80164a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80164aa:	f001 f8f5 	bl	8017698 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80164ae:	f001 f8bd 	bl	801762c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80164b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80164ba:	e011      	b.n	80164e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	691b      	ldr	r3, [r3, #16]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d012      	beq.n	80164ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	3310      	adds	r3, #16
 80164c8:	4618      	mov	r0, r3
 80164ca:	f000 fcc7 	bl	8016e5c <xTaskRemoveFromEventList>
 80164ce:	4603      	mov	r3, r0
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d001      	beq.n	80164d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80164d4:	f000 fda6 	bl	8017024 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80164d8:	7bbb      	ldrb	r3, [r7, #14]
 80164da:	3b01      	subs	r3, #1
 80164dc:	b2db      	uxtb	r3, r3
 80164de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80164e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	dce9      	bgt.n	80164bc <prvUnlockQueue+0x60>
 80164e8:	e000      	b.n	80164ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80164ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	22ff      	movs	r2, #255	@ 0xff
 80164f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80164f4:	f001 f8d0 	bl	8017698 <vPortExitCritical>
}
 80164f8:	bf00      	nop
 80164fa:	3710      	adds	r7, #16
 80164fc:	46bd      	mov	sp, r7
 80164fe:	bd80      	pop	{r7, pc}

08016500 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016500:	b580      	push	{r7, lr}
 8016502:	b084      	sub	sp, #16
 8016504:	af00      	add	r7, sp, #0
 8016506:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016508:	f001 f890 	bl	801762c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016510:	2b00      	cmp	r3, #0
 8016512:	d102      	bne.n	801651a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016514:	2301      	movs	r3, #1
 8016516:	60fb      	str	r3, [r7, #12]
 8016518:	e001      	b.n	801651e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801651a:	2300      	movs	r3, #0
 801651c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801651e:	f001 f8bb 	bl	8017698 <vPortExitCritical>

	return xReturn;
 8016522:	68fb      	ldr	r3, [r7, #12]
}
 8016524:	4618      	mov	r0, r3
 8016526:	3710      	adds	r7, #16
 8016528:	46bd      	mov	sp, r7
 801652a:	bd80      	pop	{r7, pc}

0801652c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801652c:	b580      	push	{r7, lr}
 801652e:	b084      	sub	sp, #16
 8016530:	af00      	add	r7, sp, #0
 8016532:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016534:	f001 f87a 	bl	801762c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016540:	429a      	cmp	r2, r3
 8016542:	d102      	bne.n	801654a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8016544:	2301      	movs	r3, #1
 8016546:	60fb      	str	r3, [r7, #12]
 8016548:	e001      	b.n	801654e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801654a:	2300      	movs	r3, #0
 801654c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801654e:	f001 f8a3 	bl	8017698 <vPortExitCritical>

	return xReturn;
 8016552:	68fb      	ldr	r3, [r7, #12]
}
 8016554:	4618      	mov	r0, r3
 8016556:	3710      	adds	r7, #16
 8016558:	46bd      	mov	sp, r7
 801655a:	bd80      	pop	{r7, pc}

0801655c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801655c:	b580      	push	{r7, lr}
 801655e:	b08e      	sub	sp, #56	@ 0x38
 8016560:	af04      	add	r7, sp, #16
 8016562:	60f8      	str	r0, [r7, #12]
 8016564:	60b9      	str	r1, [r7, #8]
 8016566:	607a      	str	r2, [r7, #4]
 8016568:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801656a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801656c:	2b00      	cmp	r3, #0
 801656e:	d10d      	bne.n	801658c <xTaskCreateStatic+0x30>
	__asm volatile
 8016570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016574:	b672      	cpsid	i
 8016576:	f383 8811 	msr	BASEPRI, r3
 801657a:	f3bf 8f6f 	isb	sy
 801657e:	f3bf 8f4f 	dsb	sy
 8016582:	b662      	cpsie	i
 8016584:	623b      	str	r3, [r7, #32]
}
 8016586:	bf00      	nop
 8016588:	bf00      	nop
 801658a:	e7fd      	b.n	8016588 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801658c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801658e:	2b00      	cmp	r3, #0
 8016590:	d10d      	bne.n	80165ae <xTaskCreateStatic+0x52>
	__asm volatile
 8016592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016596:	b672      	cpsid	i
 8016598:	f383 8811 	msr	BASEPRI, r3
 801659c:	f3bf 8f6f 	isb	sy
 80165a0:	f3bf 8f4f 	dsb	sy
 80165a4:	b662      	cpsie	i
 80165a6:	61fb      	str	r3, [r7, #28]
}
 80165a8:	bf00      	nop
 80165aa:	bf00      	nop
 80165ac:	e7fd      	b.n	80165aa <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80165ae:	2358      	movs	r3, #88	@ 0x58
 80165b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80165b2:	693b      	ldr	r3, [r7, #16]
 80165b4:	2b58      	cmp	r3, #88	@ 0x58
 80165b6:	d00d      	beq.n	80165d4 <xTaskCreateStatic+0x78>
	__asm volatile
 80165b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165bc:	b672      	cpsid	i
 80165be:	f383 8811 	msr	BASEPRI, r3
 80165c2:	f3bf 8f6f 	isb	sy
 80165c6:	f3bf 8f4f 	dsb	sy
 80165ca:	b662      	cpsie	i
 80165cc:	61bb      	str	r3, [r7, #24]
}
 80165ce:	bf00      	nop
 80165d0:	bf00      	nop
 80165d2:	e7fd      	b.n	80165d0 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80165d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80165d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d01e      	beq.n	801661a <xTaskCreateStatic+0xbe>
 80165dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d01b      	beq.n	801661a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80165e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165e4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80165e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80165ea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80165ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165ee:	2202      	movs	r2, #2
 80165f0:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80165f4:	2300      	movs	r3, #0
 80165f6:	9303      	str	r3, [sp, #12]
 80165f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165fa:	9302      	str	r3, [sp, #8]
 80165fc:	f107 0314 	add.w	r3, r7, #20
 8016600:	9301      	str	r3, [sp, #4]
 8016602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016604:	9300      	str	r3, [sp, #0]
 8016606:	683b      	ldr	r3, [r7, #0]
 8016608:	687a      	ldr	r2, [r7, #4]
 801660a:	68b9      	ldr	r1, [r7, #8]
 801660c:	68f8      	ldr	r0, [r7, #12]
 801660e:	f000 f850 	bl	80166b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016612:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016614:	f000 f8e2 	bl	80167dc <prvAddNewTaskToReadyList>
 8016618:	e001      	b.n	801661e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 801661a:	2300      	movs	r3, #0
 801661c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801661e:	697b      	ldr	r3, [r7, #20]
	}
 8016620:	4618      	mov	r0, r3
 8016622:	3728      	adds	r7, #40	@ 0x28
 8016624:	46bd      	mov	sp, r7
 8016626:	bd80      	pop	{r7, pc}

08016628 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016628:	b580      	push	{r7, lr}
 801662a:	b08c      	sub	sp, #48	@ 0x30
 801662c:	af04      	add	r7, sp, #16
 801662e:	60f8      	str	r0, [r7, #12]
 8016630:	60b9      	str	r1, [r7, #8]
 8016632:	603b      	str	r3, [r7, #0]
 8016634:	4613      	mov	r3, r2
 8016636:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016638:	88fb      	ldrh	r3, [r7, #6]
 801663a:	009b      	lsls	r3, r3, #2
 801663c:	4618      	mov	r0, r3
 801663e:	f001 f923 	bl	8017888 <pvPortMalloc>
 8016642:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016644:	697b      	ldr	r3, [r7, #20]
 8016646:	2b00      	cmp	r3, #0
 8016648:	d00e      	beq.n	8016668 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801664a:	2058      	movs	r0, #88	@ 0x58
 801664c:	f001 f91c 	bl	8017888 <pvPortMalloc>
 8016650:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016652:	69fb      	ldr	r3, [r7, #28]
 8016654:	2b00      	cmp	r3, #0
 8016656:	d003      	beq.n	8016660 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016658:	69fb      	ldr	r3, [r7, #28]
 801665a:	697a      	ldr	r2, [r7, #20]
 801665c:	631a      	str	r2, [r3, #48]	@ 0x30
 801665e:	e005      	b.n	801666c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016660:	6978      	ldr	r0, [r7, #20]
 8016662:	f001 f9e3 	bl	8017a2c <vPortFree>
 8016666:	e001      	b.n	801666c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016668:	2300      	movs	r3, #0
 801666a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801666c:	69fb      	ldr	r3, [r7, #28]
 801666e:	2b00      	cmp	r3, #0
 8016670:	d017      	beq.n	80166a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016672:	69fb      	ldr	r3, [r7, #28]
 8016674:	2200      	movs	r2, #0
 8016676:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801667a:	88fa      	ldrh	r2, [r7, #6]
 801667c:	2300      	movs	r3, #0
 801667e:	9303      	str	r3, [sp, #12]
 8016680:	69fb      	ldr	r3, [r7, #28]
 8016682:	9302      	str	r3, [sp, #8]
 8016684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016686:	9301      	str	r3, [sp, #4]
 8016688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801668a:	9300      	str	r3, [sp, #0]
 801668c:	683b      	ldr	r3, [r7, #0]
 801668e:	68b9      	ldr	r1, [r7, #8]
 8016690:	68f8      	ldr	r0, [r7, #12]
 8016692:	f000 f80e 	bl	80166b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016696:	69f8      	ldr	r0, [r7, #28]
 8016698:	f000 f8a0 	bl	80167dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801669c:	2301      	movs	r3, #1
 801669e:	61bb      	str	r3, [r7, #24]
 80166a0:	e002      	b.n	80166a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80166a2:	f04f 33ff 	mov.w	r3, #4294967295
 80166a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80166a8:	69bb      	ldr	r3, [r7, #24]
	}
 80166aa:	4618      	mov	r0, r3
 80166ac:	3720      	adds	r7, #32
 80166ae:	46bd      	mov	sp, r7
 80166b0:	bd80      	pop	{r7, pc}

080166b2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80166b2:	b580      	push	{r7, lr}
 80166b4:	b088      	sub	sp, #32
 80166b6:	af00      	add	r7, sp, #0
 80166b8:	60f8      	str	r0, [r7, #12]
 80166ba:	60b9      	str	r1, [r7, #8]
 80166bc:	607a      	str	r2, [r7, #4]
 80166be:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80166c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80166c2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	009b      	lsls	r3, r3, #2
 80166c8:	461a      	mov	r2, r3
 80166ca:	21a5      	movs	r1, #165	@ 0xa5
 80166cc:	f001 fdf2 	bl	80182b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80166d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80166d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80166d4:	6879      	ldr	r1, [r7, #4]
 80166d6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80166da:	440b      	add	r3, r1
 80166dc:	009b      	lsls	r3, r3, #2
 80166de:	4413      	add	r3, r2
 80166e0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80166e2:	69bb      	ldr	r3, [r7, #24]
 80166e4:	f023 0307 	bic.w	r3, r3, #7
 80166e8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80166ea:	69bb      	ldr	r3, [r7, #24]
 80166ec:	f003 0307 	and.w	r3, r3, #7
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d00d      	beq.n	8016710 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80166f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166f8:	b672      	cpsid	i
 80166fa:	f383 8811 	msr	BASEPRI, r3
 80166fe:	f3bf 8f6f 	isb	sy
 8016702:	f3bf 8f4f 	dsb	sy
 8016706:	b662      	cpsie	i
 8016708:	617b      	str	r3, [r7, #20]
}
 801670a:	bf00      	nop
 801670c:	bf00      	nop
 801670e:	e7fd      	b.n	801670c <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016710:	68bb      	ldr	r3, [r7, #8]
 8016712:	2b00      	cmp	r3, #0
 8016714:	d01f      	beq.n	8016756 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016716:	2300      	movs	r3, #0
 8016718:	61fb      	str	r3, [r7, #28]
 801671a:	e012      	b.n	8016742 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801671c:	68ba      	ldr	r2, [r7, #8]
 801671e:	69fb      	ldr	r3, [r7, #28]
 8016720:	4413      	add	r3, r2
 8016722:	7819      	ldrb	r1, [r3, #0]
 8016724:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016726:	69fb      	ldr	r3, [r7, #28]
 8016728:	4413      	add	r3, r2
 801672a:	3334      	adds	r3, #52	@ 0x34
 801672c:	460a      	mov	r2, r1
 801672e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016730:	68ba      	ldr	r2, [r7, #8]
 8016732:	69fb      	ldr	r3, [r7, #28]
 8016734:	4413      	add	r3, r2
 8016736:	781b      	ldrb	r3, [r3, #0]
 8016738:	2b00      	cmp	r3, #0
 801673a:	d006      	beq.n	801674a <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801673c:	69fb      	ldr	r3, [r7, #28]
 801673e:	3301      	adds	r3, #1
 8016740:	61fb      	str	r3, [r7, #28]
 8016742:	69fb      	ldr	r3, [r7, #28]
 8016744:	2b0f      	cmp	r3, #15
 8016746:	d9e9      	bls.n	801671c <prvInitialiseNewTask+0x6a>
 8016748:	e000      	b.n	801674c <prvInitialiseNewTask+0x9a>
			{
				break;
 801674a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801674c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801674e:	2200      	movs	r2, #0
 8016750:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8016754:	e003      	b.n	801675e <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016758:	2200      	movs	r2, #0
 801675a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801675e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016760:	2b06      	cmp	r3, #6
 8016762:	d901      	bls.n	8016768 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016764:	2306      	movs	r3, #6
 8016766:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801676a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801676c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801676e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016770:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016772:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8016774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016776:	2200      	movs	r2, #0
 8016778:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801677a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801677c:	3304      	adds	r3, #4
 801677e:	4618      	mov	r0, r3
 8016780:	f7ff f892 	bl	80158a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016786:	3318      	adds	r3, #24
 8016788:	4618      	mov	r0, r3
 801678a:	f7ff f88d 	bl	80158a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801678e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016790:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016792:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016796:	f1c3 0207 	rsb	r2, r3, #7
 801679a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801679c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801679e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80167a2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80167a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167a6:	2200      	movs	r2, #0
 80167a8:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80167aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167ac:	2200      	movs	r2, #0
 80167ae:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80167b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167b2:	2200      	movs	r2, #0
 80167b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80167b8:	683a      	ldr	r2, [r7, #0]
 80167ba:	68f9      	ldr	r1, [r7, #12]
 80167bc:	69b8      	ldr	r0, [r7, #24]
 80167be:	f000 fe27 	bl	8017410 <pxPortInitialiseStack>
 80167c2:	4602      	mov	r2, r0
 80167c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167c6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80167c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d002      	beq.n	80167d4 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80167ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80167d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80167d4:	bf00      	nop
 80167d6:	3720      	adds	r7, #32
 80167d8:	46bd      	mov	sp, r7
 80167da:	bd80      	pop	{r7, pc}

080167dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80167dc:	b580      	push	{r7, lr}
 80167de:	b082      	sub	sp, #8
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80167e4:	f000 ff22 	bl	801762c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80167e8:	4b2a      	ldr	r3, [pc, #168]	@ (8016894 <prvAddNewTaskToReadyList+0xb8>)
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	3301      	adds	r3, #1
 80167ee:	4a29      	ldr	r2, [pc, #164]	@ (8016894 <prvAddNewTaskToReadyList+0xb8>)
 80167f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80167f2:	4b29      	ldr	r3, [pc, #164]	@ (8016898 <prvAddNewTaskToReadyList+0xbc>)
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d109      	bne.n	801680e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80167fa:	4a27      	ldr	r2, [pc, #156]	@ (8016898 <prvAddNewTaskToReadyList+0xbc>)
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016800:	4b24      	ldr	r3, [pc, #144]	@ (8016894 <prvAddNewTaskToReadyList+0xb8>)
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	2b01      	cmp	r3, #1
 8016806:	d110      	bne.n	801682a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016808:	f000 fc32 	bl	8017070 <prvInitialiseTaskLists>
 801680c:	e00d      	b.n	801682a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801680e:	4b23      	ldr	r3, [pc, #140]	@ (801689c <prvAddNewTaskToReadyList+0xc0>)
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d109      	bne.n	801682a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016816:	4b20      	ldr	r3, [pc, #128]	@ (8016898 <prvAddNewTaskToReadyList+0xbc>)
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016820:	429a      	cmp	r2, r3
 8016822:	d802      	bhi.n	801682a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016824:	4a1c      	ldr	r2, [pc, #112]	@ (8016898 <prvAddNewTaskToReadyList+0xbc>)
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801682a:	4b1d      	ldr	r3, [pc, #116]	@ (80168a0 <prvAddNewTaskToReadyList+0xc4>)
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	3301      	adds	r3, #1
 8016830:	4a1b      	ldr	r2, [pc, #108]	@ (80168a0 <prvAddNewTaskToReadyList+0xc4>)
 8016832:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016838:	2201      	movs	r2, #1
 801683a:	409a      	lsls	r2, r3
 801683c:	4b19      	ldr	r3, [pc, #100]	@ (80168a4 <prvAddNewTaskToReadyList+0xc8>)
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	4313      	orrs	r3, r2
 8016842:	4a18      	ldr	r2, [pc, #96]	@ (80168a4 <prvAddNewTaskToReadyList+0xc8>)
 8016844:	6013      	str	r3, [r2, #0]
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801684a:	4613      	mov	r3, r2
 801684c:	009b      	lsls	r3, r3, #2
 801684e:	4413      	add	r3, r2
 8016850:	009b      	lsls	r3, r3, #2
 8016852:	4a15      	ldr	r2, [pc, #84]	@ (80168a8 <prvAddNewTaskToReadyList+0xcc>)
 8016854:	441a      	add	r2, r3
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	3304      	adds	r3, #4
 801685a:	4619      	mov	r1, r3
 801685c:	4610      	mov	r0, r2
 801685e:	f7ff f830 	bl	80158c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016862:	f000 ff19 	bl	8017698 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016866:	4b0d      	ldr	r3, [pc, #52]	@ (801689c <prvAddNewTaskToReadyList+0xc0>)
 8016868:	681b      	ldr	r3, [r3, #0]
 801686a:	2b00      	cmp	r3, #0
 801686c:	d00e      	beq.n	801688c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801686e:	4b0a      	ldr	r3, [pc, #40]	@ (8016898 <prvAddNewTaskToReadyList+0xbc>)
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016878:	429a      	cmp	r2, r3
 801687a:	d207      	bcs.n	801688c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801687c:	4b0b      	ldr	r3, [pc, #44]	@ (80168ac <prvAddNewTaskToReadyList+0xd0>)
 801687e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016882:	601a      	str	r2, [r3, #0]
 8016884:	f3bf 8f4f 	dsb	sy
 8016888:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801688c:	bf00      	nop
 801688e:	3708      	adds	r7, #8
 8016890:	46bd      	mov	sp, r7
 8016892:	bd80      	pop	{r7, pc}
 8016894:	20001e78 	.word	0x20001e78
 8016898:	20001d78 	.word	0x20001d78
 801689c:	20001e84 	.word	0x20001e84
 80168a0:	20001e94 	.word	0x20001e94
 80168a4:	20001e80 	.word	0x20001e80
 80168a8:	20001d7c 	.word	0x20001d7c
 80168ac:	e000ed04 	.word	0xe000ed04

080168b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b084      	sub	sp, #16
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80168b8:	2300      	movs	r3, #0
 80168ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d01a      	beq.n	80168f8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80168c2:	4b15      	ldr	r3, [pc, #84]	@ (8016918 <vTaskDelay+0x68>)
 80168c4:	681b      	ldr	r3, [r3, #0]
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d00d      	beq.n	80168e6 <vTaskDelay+0x36>
	__asm volatile
 80168ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80168ce:	b672      	cpsid	i
 80168d0:	f383 8811 	msr	BASEPRI, r3
 80168d4:	f3bf 8f6f 	isb	sy
 80168d8:	f3bf 8f4f 	dsb	sy
 80168dc:	b662      	cpsie	i
 80168de:	60bb      	str	r3, [r7, #8]
}
 80168e0:	bf00      	nop
 80168e2:	bf00      	nop
 80168e4:	e7fd      	b.n	80168e2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80168e6:	f000 f881 	bl	80169ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80168ea:	2100      	movs	r1, #0
 80168ec:	6878      	ldr	r0, [r7, #4]
 80168ee:	f000 fd29 	bl	8017344 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80168f2:	f000 f889 	bl	8016a08 <xTaskResumeAll>
 80168f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d107      	bne.n	801690e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80168fe:	4b07      	ldr	r3, [pc, #28]	@ (801691c <vTaskDelay+0x6c>)
 8016900:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016904:	601a      	str	r2, [r3, #0]
 8016906:	f3bf 8f4f 	dsb	sy
 801690a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801690e:	bf00      	nop
 8016910:	3710      	adds	r7, #16
 8016912:	46bd      	mov	sp, r7
 8016914:	bd80      	pop	{r7, pc}
 8016916:	bf00      	nop
 8016918:	20001ea0 	.word	0x20001ea0
 801691c:	e000ed04 	.word	0xe000ed04

08016920 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b08a      	sub	sp, #40	@ 0x28
 8016924:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016926:	2300      	movs	r3, #0
 8016928:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801692a:	2300      	movs	r3, #0
 801692c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801692e:	463a      	mov	r2, r7
 8016930:	1d39      	adds	r1, r7, #4
 8016932:	f107 0308 	add.w	r3, r7, #8
 8016936:	4618      	mov	r0, r3
 8016938:	f7eb fb28 	bl	8001f8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801693c:	6839      	ldr	r1, [r7, #0]
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	68ba      	ldr	r2, [r7, #8]
 8016942:	9202      	str	r2, [sp, #8]
 8016944:	9301      	str	r3, [sp, #4]
 8016946:	2300      	movs	r3, #0
 8016948:	9300      	str	r3, [sp, #0]
 801694a:	2300      	movs	r3, #0
 801694c:	460a      	mov	r2, r1
 801694e:	4921      	ldr	r1, [pc, #132]	@ (80169d4 <vTaskStartScheduler+0xb4>)
 8016950:	4821      	ldr	r0, [pc, #132]	@ (80169d8 <vTaskStartScheduler+0xb8>)
 8016952:	f7ff fe03 	bl	801655c <xTaskCreateStatic>
 8016956:	4603      	mov	r3, r0
 8016958:	4a20      	ldr	r2, [pc, #128]	@ (80169dc <vTaskStartScheduler+0xbc>)
 801695a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801695c:	4b1f      	ldr	r3, [pc, #124]	@ (80169dc <vTaskStartScheduler+0xbc>)
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	2b00      	cmp	r3, #0
 8016962:	d002      	beq.n	801696a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016964:	2301      	movs	r3, #1
 8016966:	617b      	str	r3, [r7, #20]
 8016968:	e001      	b.n	801696e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801696a:	2300      	movs	r3, #0
 801696c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801696e:	697b      	ldr	r3, [r7, #20]
 8016970:	2b01      	cmp	r3, #1
 8016972:	d118      	bne.n	80169a6 <vTaskStartScheduler+0x86>
	__asm volatile
 8016974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016978:	b672      	cpsid	i
 801697a:	f383 8811 	msr	BASEPRI, r3
 801697e:	f3bf 8f6f 	isb	sy
 8016982:	f3bf 8f4f 	dsb	sy
 8016986:	b662      	cpsie	i
 8016988:	613b      	str	r3, [r7, #16]
}
 801698a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801698c:	4b14      	ldr	r3, [pc, #80]	@ (80169e0 <vTaskStartScheduler+0xc0>)
 801698e:	f04f 32ff 	mov.w	r2, #4294967295
 8016992:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016994:	4b13      	ldr	r3, [pc, #76]	@ (80169e4 <vTaskStartScheduler+0xc4>)
 8016996:	2201      	movs	r2, #1
 8016998:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801699a:	4b13      	ldr	r3, [pc, #76]	@ (80169e8 <vTaskStartScheduler+0xc8>)
 801699c:	2200      	movs	r2, #0
 801699e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80169a0:	f000 fdc6 	bl	8017530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80169a4:	e011      	b.n	80169ca <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80169a6:	697b      	ldr	r3, [r7, #20]
 80169a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169ac:	d10d      	bne.n	80169ca <vTaskStartScheduler+0xaa>
	__asm volatile
 80169ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80169b2:	b672      	cpsid	i
 80169b4:	f383 8811 	msr	BASEPRI, r3
 80169b8:	f3bf 8f6f 	isb	sy
 80169bc:	f3bf 8f4f 	dsb	sy
 80169c0:	b662      	cpsie	i
 80169c2:	60fb      	str	r3, [r7, #12]
}
 80169c4:	bf00      	nop
 80169c6:	bf00      	nop
 80169c8:	e7fd      	b.n	80169c6 <vTaskStartScheduler+0xa6>
}
 80169ca:	bf00      	nop
 80169cc:	3718      	adds	r7, #24
 80169ce:	46bd      	mov	sp, r7
 80169d0:	bd80      	pop	{r7, pc}
 80169d2:	bf00      	nop
 80169d4:	0801d434 	.word	0x0801d434
 80169d8:	0801703d 	.word	0x0801703d
 80169dc:	20001e9c 	.word	0x20001e9c
 80169e0:	20001e98 	.word	0x20001e98
 80169e4:	20001e84 	.word	0x20001e84
 80169e8:	20001e7c 	.word	0x20001e7c

080169ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80169ec:	b480      	push	{r7}
 80169ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80169f0:	4b04      	ldr	r3, [pc, #16]	@ (8016a04 <vTaskSuspendAll+0x18>)
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	3301      	adds	r3, #1
 80169f6:	4a03      	ldr	r2, [pc, #12]	@ (8016a04 <vTaskSuspendAll+0x18>)
 80169f8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80169fa:	bf00      	nop
 80169fc:	46bd      	mov	sp, r7
 80169fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a02:	4770      	bx	lr
 8016a04:	20001ea0 	.word	0x20001ea0

08016a08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016a08:	b580      	push	{r7, lr}
 8016a0a:	b084      	sub	sp, #16
 8016a0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8016a0e:	2300      	movs	r3, #0
 8016a10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016a12:	2300      	movs	r3, #0
 8016a14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016a16:	4b43      	ldr	r3, [pc, #268]	@ (8016b24 <xTaskResumeAll+0x11c>)
 8016a18:	681b      	ldr	r3, [r3, #0]
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d10d      	bne.n	8016a3a <xTaskResumeAll+0x32>
	__asm volatile
 8016a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a22:	b672      	cpsid	i
 8016a24:	f383 8811 	msr	BASEPRI, r3
 8016a28:	f3bf 8f6f 	isb	sy
 8016a2c:	f3bf 8f4f 	dsb	sy
 8016a30:	b662      	cpsie	i
 8016a32:	603b      	str	r3, [r7, #0]
}
 8016a34:	bf00      	nop
 8016a36:	bf00      	nop
 8016a38:	e7fd      	b.n	8016a36 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016a3a:	f000 fdf7 	bl	801762c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016a3e:	4b39      	ldr	r3, [pc, #228]	@ (8016b24 <xTaskResumeAll+0x11c>)
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	3b01      	subs	r3, #1
 8016a44:	4a37      	ldr	r2, [pc, #220]	@ (8016b24 <xTaskResumeAll+0x11c>)
 8016a46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016a48:	4b36      	ldr	r3, [pc, #216]	@ (8016b24 <xTaskResumeAll+0x11c>)
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d161      	bne.n	8016b14 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016a50:	4b35      	ldr	r3, [pc, #212]	@ (8016b28 <xTaskResumeAll+0x120>)
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d05d      	beq.n	8016b14 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016a58:	e02e      	b.n	8016ab8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016a5a:	4b34      	ldr	r3, [pc, #208]	@ (8016b2c <xTaskResumeAll+0x124>)
 8016a5c:	68db      	ldr	r3, [r3, #12]
 8016a5e:	68db      	ldr	r3, [r3, #12]
 8016a60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	3318      	adds	r3, #24
 8016a66:	4618      	mov	r0, r3
 8016a68:	f7fe ff88 	bl	801597c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	3304      	adds	r3, #4
 8016a70:	4618      	mov	r0, r3
 8016a72:	f7fe ff83 	bl	801597c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016a7a:	2201      	movs	r2, #1
 8016a7c:	409a      	lsls	r2, r3
 8016a7e:	4b2c      	ldr	r3, [pc, #176]	@ (8016b30 <xTaskResumeAll+0x128>)
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	4313      	orrs	r3, r2
 8016a84:	4a2a      	ldr	r2, [pc, #168]	@ (8016b30 <xTaskResumeAll+0x128>)
 8016a86:	6013      	str	r3, [r2, #0]
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016a8c:	4613      	mov	r3, r2
 8016a8e:	009b      	lsls	r3, r3, #2
 8016a90:	4413      	add	r3, r2
 8016a92:	009b      	lsls	r3, r3, #2
 8016a94:	4a27      	ldr	r2, [pc, #156]	@ (8016b34 <xTaskResumeAll+0x12c>)
 8016a96:	441a      	add	r2, r3
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	3304      	adds	r3, #4
 8016a9c:	4619      	mov	r1, r3
 8016a9e:	4610      	mov	r0, r2
 8016aa0:	f7fe ff0f 	bl	80158c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016aa4:	68fb      	ldr	r3, [r7, #12]
 8016aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016aa8:	4b23      	ldr	r3, [pc, #140]	@ (8016b38 <xTaskResumeAll+0x130>)
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016aae:	429a      	cmp	r2, r3
 8016ab0:	d302      	bcc.n	8016ab8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8016ab2:	4b22      	ldr	r3, [pc, #136]	@ (8016b3c <xTaskResumeAll+0x134>)
 8016ab4:	2201      	movs	r2, #1
 8016ab6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8016b2c <xTaskResumeAll+0x124>)
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d1cc      	bne.n	8016a5a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016ac0:	68fb      	ldr	r3, [r7, #12]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d001      	beq.n	8016aca <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016ac6:	f000 fb73 	bl	80171b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8016aca:	4b1d      	ldr	r3, [pc, #116]	@ (8016b40 <xTaskResumeAll+0x138>)
 8016acc:	681b      	ldr	r3, [r3, #0]
 8016ace:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d010      	beq.n	8016af8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016ad6:	f000 f859 	bl	8016b8c <xTaskIncrementTick>
 8016ada:	4603      	mov	r3, r0
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d002      	beq.n	8016ae6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8016ae0:	4b16      	ldr	r3, [pc, #88]	@ (8016b3c <xTaskResumeAll+0x134>)
 8016ae2:	2201      	movs	r2, #1
 8016ae4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	3b01      	subs	r3, #1
 8016aea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d1f1      	bne.n	8016ad6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8016af2:	4b13      	ldr	r3, [pc, #76]	@ (8016b40 <xTaskResumeAll+0x138>)
 8016af4:	2200      	movs	r2, #0
 8016af6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016af8:	4b10      	ldr	r3, [pc, #64]	@ (8016b3c <xTaskResumeAll+0x134>)
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d009      	beq.n	8016b14 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016b00:	2301      	movs	r3, #1
 8016b02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016b04:	4b0f      	ldr	r3, [pc, #60]	@ (8016b44 <xTaskResumeAll+0x13c>)
 8016b06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016b0a:	601a      	str	r2, [r3, #0]
 8016b0c:	f3bf 8f4f 	dsb	sy
 8016b10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016b14:	f000 fdc0 	bl	8017698 <vPortExitCritical>

	return xAlreadyYielded;
 8016b18:	68bb      	ldr	r3, [r7, #8]
}
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	3710      	adds	r7, #16
 8016b1e:	46bd      	mov	sp, r7
 8016b20:	bd80      	pop	{r7, pc}
 8016b22:	bf00      	nop
 8016b24:	20001ea0 	.word	0x20001ea0
 8016b28:	20001e78 	.word	0x20001e78
 8016b2c:	20001e38 	.word	0x20001e38
 8016b30:	20001e80 	.word	0x20001e80
 8016b34:	20001d7c 	.word	0x20001d7c
 8016b38:	20001d78 	.word	0x20001d78
 8016b3c:	20001e8c 	.word	0x20001e8c
 8016b40:	20001e88 	.word	0x20001e88
 8016b44:	e000ed04 	.word	0xe000ed04

08016b48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016b48:	b480      	push	{r7}
 8016b4a:	b083      	sub	sp, #12
 8016b4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016b4e:	4b05      	ldr	r3, [pc, #20]	@ (8016b64 <xTaskGetTickCount+0x1c>)
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016b54:	687b      	ldr	r3, [r7, #4]
}
 8016b56:	4618      	mov	r0, r3
 8016b58:	370c      	adds	r7, #12
 8016b5a:	46bd      	mov	sp, r7
 8016b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b60:	4770      	bx	lr
 8016b62:	bf00      	nop
 8016b64:	20001e7c 	.word	0x20001e7c

08016b68 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8016b68:	b580      	push	{r7, lr}
 8016b6a:	b082      	sub	sp, #8
 8016b6c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016b6e:	f000 fe45 	bl	80177fc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8016b72:	2300      	movs	r3, #0
 8016b74:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8016b76:	4b04      	ldr	r3, [pc, #16]	@ (8016b88 <xTaskGetTickCountFromISR+0x20>)
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016b7c:	683b      	ldr	r3, [r7, #0]
}
 8016b7e:	4618      	mov	r0, r3
 8016b80:	3708      	adds	r7, #8
 8016b82:	46bd      	mov	sp, r7
 8016b84:	bd80      	pop	{r7, pc}
 8016b86:	bf00      	nop
 8016b88:	20001e7c 	.word	0x20001e7c

08016b8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016b8c:	b580      	push	{r7, lr}
 8016b8e:	b086      	sub	sp, #24
 8016b90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016b92:	2300      	movs	r3, #0
 8016b94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016b96:	4b50      	ldr	r3, [pc, #320]	@ (8016cd8 <xTaskIncrementTick+0x14c>)
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	f040 808b 	bne.w	8016cb6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016ba0:	4b4e      	ldr	r3, [pc, #312]	@ (8016cdc <xTaskIncrementTick+0x150>)
 8016ba2:	681b      	ldr	r3, [r3, #0]
 8016ba4:	3301      	adds	r3, #1
 8016ba6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016ba8:	4a4c      	ldr	r2, [pc, #304]	@ (8016cdc <xTaskIncrementTick+0x150>)
 8016baa:	693b      	ldr	r3, [r7, #16]
 8016bac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016bae:	693b      	ldr	r3, [r7, #16]
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d123      	bne.n	8016bfc <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8016bb4:	4b4a      	ldr	r3, [pc, #296]	@ (8016ce0 <xTaskIncrementTick+0x154>)
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d00d      	beq.n	8016bda <xTaskIncrementTick+0x4e>
	__asm volatile
 8016bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016bc2:	b672      	cpsid	i
 8016bc4:	f383 8811 	msr	BASEPRI, r3
 8016bc8:	f3bf 8f6f 	isb	sy
 8016bcc:	f3bf 8f4f 	dsb	sy
 8016bd0:	b662      	cpsie	i
 8016bd2:	603b      	str	r3, [r7, #0]
}
 8016bd4:	bf00      	nop
 8016bd6:	bf00      	nop
 8016bd8:	e7fd      	b.n	8016bd6 <xTaskIncrementTick+0x4a>
 8016bda:	4b41      	ldr	r3, [pc, #260]	@ (8016ce0 <xTaskIncrementTick+0x154>)
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	60fb      	str	r3, [r7, #12]
 8016be0:	4b40      	ldr	r3, [pc, #256]	@ (8016ce4 <xTaskIncrementTick+0x158>)
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	4a3e      	ldr	r2, [pc, #248]	@ (8016ce0 <xTaskIncrementTick+0x154>)
 8016be6:	6013      	str	r3, [r2, #0]
 8016be8:	4a3e      	ldr	r2, [pc, #248]	@ (8016ce4 <xTaskIncrementTick+0x158>)
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	6013      	str	r3, [r2, #0]
 8016bee:	4b3e      	ldr	r3, [pc, #248]	@ (8016ce8 <xTaskIncrementTick+0x15c>)
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	3301      	adds	r3, #1
 8016bf4:	4a3c      	ldr	r2, [pc, #240]	@ (8016ce8 <xTaskIncrementTick+0x15c>)
 8016bf6:	6013      	str	r3, [r2, #0]
 8016bf8:	f000 fada 	bl	80171b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016bfc:	4b3b      	ldr	r3, [pc, #236]	@ (8016cec <xTaskIncrementTick+0x160>)
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	693a      	ldr	r2, [r7, #16]
 8016c02:	429a      	cmp	r2, r3
 8016c04:	d348      	bcc.n	8016c98 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016c06:	4b36      	ldr	r3, [pc, #216]	@ (8016ce0 <xTaskIncrementTick+0x154>)
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d104      	bne.n	8016c1a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016c10:	4b36      	ldr	r3, [pc, #216]	@ (8016cec <xTaskIncrementTick+0x160>)
 8016c12:	f04f 32ff 	mov.w	r2, #4294967295
 8016c16:	601a      	str	r2, [r3, #0]
					break;
 8016c18:	e03e      	b.n	8016c98 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016c1a:	4b31      	ldr	r3, [pc, #196]	@ (8016ce0 <xTaskIncrementTick+0x154>)
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	68db      	ldr	r3, [r3, #12]
 8016c20:	68db      	ldr	r3, [r3, #12]
 8016c22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016c24:	68bb      	ldr	r3, [r7, #8]
 8016c26:	685b      	ldr	r3, [r3, #4]
 8016c28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016c2a:	693a      	ldr	r2, [r7, #16]
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	429a      	cmp	r2, r3
 8016c30:	d203      	bcs.n	8016c3a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016c32:	4a2e      	ldr	r2, [pc, #184]	@ (8016cec <xTaskIncrementTick+0x160>)
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016c38:	e02e      	b.n	8016c98 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016c3a:	68bb      	ldr	r3, [r7, #8]
 8016c3c:	3304      	adds	r3, #4
 8016c3e:	4618      	mov	r0, r3
 8016c40:	f7fe fe9c 	bl	801597c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016c44:	68bb      	ldr	r3, [r7, #8]
 8016c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d004      	beq.n	8016c56 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016c4c:	68bb      	ldr	r3, [r7, #8]
 8016c4e:	3318      	adds	r3, #24
 8016c50:	4618      	mov	r0, r3
 8016c52:	f7fe fe93 	bl	801597c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016c56:	68bb      	ldr	r3, [r7, #8]
 8016c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016c5a:	2201      	movs	r2, #1
 8016c5c:	409a      	lsls	r2, r3
 8016c5e:	4b24      	ldr	r3, [pc, #144]	@ (8016cf0 <xTaskIncrementTick+0x164>)
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	4313      	orrs	r3, r2
 8016c64:	4a22      	ldr	r2, [pc, #136]	@ (8016cf0 <xTaskIncrementTick+0x164>)
 8016c66:	6013      	str	r3, [r2, #0]
 8016c68:	68bb      	ldr	r3, [r7, #8]
 8016c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016c6c:	4613      	mov	r3, r2
 8016c6e:	009b      	lsls	r3, r3, #2
 8016c70:	4413      	add	r3, r2
 8016c72:	009b      	lsls	r3, r3, #2
 8016c74:	4a1f      	ldr	r2, [pc, #124]	@ (8016cf4 <xTaskIncrementTick+0x168>)
 8016c76:	441a      	add	r2, r3
 8016c78:	68bb      	ldr	r3, [r7, #8]
 8016c7a:	3304      	adds	r3, #4
 8016c7c:	4619      	mov	r1, r3
 8016c7e:	4610      	mov	r0, r2
 8016c80:	f7fe fe1f 	bl	80158c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016c84:	68bb      	ldr	r3, [r7, #8]
 8016c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016c88:	4b1b      	ldr	r3, [pc, #108]	@ (8016cf8 <xTaskIncrementTick+0x16c>)
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016c8e:	429a      	cmp	r2, r3
 8016c90:	d3b9      	bcc.n	8016c06 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8016c92:	2301      	movs	r3, #1
 8016c94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016c96:	e7b6      	b.n	8016c06 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016c98:	4b17      	ldr	r3, [pc, #92]	@ (8016cf8 <xTaskIncrementTick+0x16c>)
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016c9e:	4915      	ldr	r1, [pc, #84]	@ (8016cf4 <xTaskIncrementTick+0x168>)
 8016ca0:	4613      	mov	r3, r2
 8016ca2:	009b      	lsls	r3, r3, #2
 8016ca4:	4413      	add	r3, r2
 8016ca6:	009b      	lsls	r3, r3, #2
 8016ca8:	440b      	add	r3, r1
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	2b01      	cmp	r3, #1
 8016cae:	d907      	bls.n	8016cc0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8016cb0:	2301      	movs	r3, #1
 8016cb2:	617b      	str	r3, [r7, #20]
 8016cb4:	e004      	b.n	8016cc0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8016cb6:	4b11      	ldr	r3, [pc, #68]	@ (8016cfc <xTaskIncrementTick+0x170>)
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	3301      	adds	r3, #1
 8016cbc:	4a0f      	ldr	r2, [pc, #60]	@ (8016cfc <xTaskIncrementTick+0x170>)
 8016cbe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8016cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8016d00 <xTaskIncrementTick+0x174>)
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d001      	beq.n	8016ccc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8016cc8:	2301      	movs	r3, #1
 8016cca:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8016ccc:	697b      	ldr	r3, [r7, #20]
}
 8016cce:	4618      	mov	r0, r3
 8016cd0:	3718      	adds	r7, #24
 8016cd2:	46bd      	mov	sp, r7
 8016cd4:	bd80      	pop	{r7, pc}
 8016cd6:	bf00      	nop
 8016cd8:	20001ea0 	.word	0x20001ea0
 8016cdc:	20001e7c 	.word	0x20001e7c
 8016ce0:	20001e30 	.word	0x20001e30
 8016ce4:	20001e34 	.word	0x20001e34
 8016ce8:	20001e90 	.word	0x20001e90
 8016cec:	20001e98 	.word	0x20001e98
 8016cf0:	20001e80 	.word	0x20001e80
 8016cf4:	20001d7c 	.word	0x20001d7c
 8016cf8:	20001d78 	.word	0x20001d78
 8016cfc:	20001e88 	.word	0x20001e88
 8016d00:	20001e8c 	.word	0x20001e8c

08016d04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016d04:	b580      	push	{r7, lr}
 8016d06:	b088      	sub	sp, #32
 8016d08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8016df8 <vTaskSwitchContext+0xf4>)
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d003      	beq.n	8016d1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016d12:	4b3a      	ldr	r3, [pc, #232]	@ (8016dfc <vTaskSwitchContext+0xf8>)
 8016d14:	2201      	movs	r2, #1
 8016d16:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016d18:	e069      	b.n	8016dee <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 8016d1a:	4b38      	ldr	r3, [pc, #224]	@ (8016dfc <vTaskSwitchContext+0xf8>)
 8016d1c:	2200      	movs	r2, #0
 8016d1e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8016d20:	4b37      	ldr	r3, [pc, #220]	@ (8016e00 <vTaskSwitchContext+0xfc>)
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016d26:	61fb      	str	r3, [r7, #28]
 8016d28:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8016d2c:	61bb      	str	r3, [r7, #24]
 8016d2e:	69fb      	ldr	r3, [r7, #28]
 8016d30:	681b      	ldr	r3, [r3, #0]
 8016d32:	69ba      	ldr	r2, [r7, #24]
 8016d34:	429a      	cmp	r2, r3
 8016d36:	d111      	bne.n	8016d5c <vTaskSwitchContext+0x58>
 8016d38:	69fb      	ldr	r3, [r7, #28]
 8016d3a:	3304      	adds	r3, #4
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	69ba      	ldr	r2, [r7, #24]
 8016d40:	429a      	cmp	r2, r3
 8016d42:	d10b      	bne.n	8016d5c <vTaskSwitchContext+0x58>
 8016d44:	69fb      	ldr	r3, [r7, #28]
 8016d46:	3308      	adds	r3, #8
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	69ba      	ldr	r2, [r7, #24]
 8016d4c:	429a      	cmp	r2, r3
 8016d4e:	d105      	bne.n	8016d5c <vTaskSwitchContext+0x58>
 8016d50:	69fb      	ldr	r3, [r7, #28]
 8016d52:	330c      	adds	r3, #12
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	69ba      	ldr	r2, [r7, #24]
 8016d58:	429a      	cmp	r2, r3
 8016d5a:	d008      	beq.n	8016d6e <vTaskSwitchContext+0x6a>
 8016d5c:	4b28      	ldr	r3, [pc, #160]	@ (8016e00 <vTaskSwitchContext+0xfc>)
 8016d5e:	681a      	ldr	r2, [r3, #0]
 8016d60:	4b27      	ldr	r3, [pc, #156]	@ (8016e00 <vTaskSwitchContext+0xfc>)
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	3334      	adds	r3, #52	@ 0x34
 8016d66:	4619      	mov	r1, r3
 8016d68:	4610      	mov	r0, r2
 8016d6a:	f7eb f8fc 	bl	8001f66 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016d6e:	4b25      	ldr	r3, [pc, #148]	@ (8016e04 <vTaskSwitchContext+0x100>)
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	fab3 f383 	clz	r3, r3
 8016d7a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8016d7c:	7afb      	ldrb	r3, [r7, #11]
 8016d7e:	f1c3 031f 	rsb	r3, r3, #31
 8016d82:	617b      	str	r3, [r7, #20]
 8016d84:	4920      	ldr	r1, [pc, #128]	@ (8016e08 <vTaskSwitchContext+0x104>)
 8016d86:	697a      	ldr	r2, [r7, #20]
 8016d88:	4613      	mov	r3, r2
 8016d8a:	009b      	lsls	r3, r3, #2
 8016d8c:	4413      	add	r3, r2
 8016d8e:	009b      	lsls	r3, r3, #2
 8016d90:	440b      	add	r3, r1
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d10d      	bne.n	8016db4 <vTaskSwitchContext+0xb0>
	__asm volatile
 8016d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d9c:	b672      	cpsid	i
 8016d9e:	f383 8811 	msr	BASEPRI, r3
 8016da2:	f3bf 8f6f 	isb	sy
 8016da6:	f3bf 8f4f 	dsb	sy
 8016daa:	b662      	cpsie	i
 8016dac:	607b      	str	r3, [r7, #4]
}
 8016dae:	bf00      	nop
 8016db0:	bf00      	nop
 8016db2:	e7fd      	b.n	8016db0 <vTaskSwitchContext+0xac>
 8016db4:	697a      	ldr	r2, [r7, #20]
 8016db6:	4613      	mov	r3, r2
 8016db8:	009b      	lsls	r3, r3, #2
 8016dba:	4413      	add	r3, r2
 8016dbc:	009b      	lsls	r3, r3, #2
 8016dbe:	4a12      	ldr	r2, [pc, #72]	@ (8016e08 <vTaskSwitchContext+0x104>)
 8016dc0:	4413      	add	r3, r2
 8016dc2:	613b      	str	r3, [r7, #16]
 8016dc4:	693b      	ldr	r3, [r7, #16]
 8016dc6:	685b      	ldr	r3, [r3, #4]
 8016dc8:	685a      	ldr	r2, [r3, #4]
 8016dca:	693b      	ldr	r3, [r7, #16]
 8016dcc:	605a      	str	r2, [r3, #4]
 8016dce:	693b      	ldr	r3, [r7, #16]
 8016dd0:	685a      	ldr	r2, [r3, #4]
 8016dd2:	693b      	ldr	r3, [r7, #16]
 8016dd4:	3308      	adds	r3, #8
 8016dd6:	429a      	cmp	r2, r3
 8016dd8:	d104      	bne.n	8016de4 <vTaskSwitchContext+0xe0>
 8016dda:	693b      	ldr	r3, [r7, #16]
 8016ddc:	685b      	ldr	r3, [r3, #4]
 8016dde:	685a      	ldr	r2, [r3, #4]
 8016de0:	693b      	ldr	r3, [r7, #16]
 8016de2:	605a      	str	r2, [r3, #4]
 8016de4:	693b      	ldr	r3, [r7, #16]
 8016de6:	685b      	ldr	r3, [r3, #4]
 8016de8:	68db      	ldr	r3, [r3, #12]
 8016dea:	4a05      	ldr	r2, [pc, #20]	@ (8016e00 <vTaskSwitchContext+0xfc>)
 8016dec:	6013      	str	r3, [r2, #0]
}
 8016dee:	bf00      	nop
 8016df0:	3720      	adds	r7, #32
 8016df2:	46bd      	mov	sp, r7
 8016df4:	bd80      	pop	{r7, pc}
 8016df6:	bf00      	nop
 8016df8:	20001ea0 	.word	0x20001ea0
 8016dfc:	20001e8c 	.word	0x20001e8c
 8016e00:	20001d78 	.word	0x20001d78
 8016e04:	20001e80 	.word	0x20001e80
 8016e08:	20001d7c 	.word	0x20001d7c

08016e0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016e0c:	b580      	push	{r7, lr}
 8016e0e:	b084      	sub	sp, #16
 8016e10:	af00      	add	r7, sp, #0
 8016e12:	6078      	str	r0, [r7, #4]
 8016e14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d10d      	bne.n	8016e38 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8016e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e20:	b672      	cpsid	i
 8016e22:	f383 8811 	msr	BASEPRI, r3
 8016e26:	f3bf 8f6f 	isb	sy
 8016e2a:	f3bf 8f4f 	dsb	sy
 8016e2e:	b662      	cpsie	i
 8016e30:	60fb      	str	r3, [r7, #12]
}
 8016e32:	bf00      	nop
 8016e34:	bf00      	nop
 8016e36:	e7fd      	b.n	8016e34 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016e38:	4b07      	ldr	r3, [pc, #28]	@ (8016e58 <vTaskPlaceOnEventList+0x4c>)
 8016e3a:	681b      	ldr	r3, [r3, #0]
 8016e3c:	3318      	adds	r3, #24
 8016e3e:	4619      	mov	r1, r3
 8016e40:	6878      	ldr	r0, [r7, #4]
 8016e42:	f7fe fd62 	bl	801590a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016e46:	2101      	movs	r1, #1
 8016e48:	6838      	ldr	r0, [r7, #0]
 8016e4a:	f000 fa7b 	bl	8017344 <prvAddCurrentTaskToDelayedList>
}
 8016e4e:	bf00      	nop
 8016e50:	3710      	adds	r7, #16
 8016e52:	46bd      	mov	sp, r7
 8016e54:	bd80      	pop	{r7, pc}
 8016e56:	bf00      	nop
 8016e58:	20001d78 	.word	0x20001d78

08016e5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016e5c:	b580      	push	{r7, lr}
 8016e5e:	b086      	sub	sp, #24
 8016e60:	af00      	add	r7, sp, #0
 8016e62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	68db      	ldr	r3, [r3, #12]
 8016e68:	68db      	ldr	r3, [r3, #12]
 8016e6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016e6c:	693b      	ldr	r3, [r7, #16]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d10d      	bne.n	8016e8e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8016e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e76:	b672      	cpsid	i
 8016e78:	f383 8811 	msr	BASEPRI, r3
 8016e7c:	f3bf 8f6f 	isb	sy
 8016e80:	f3bf 8f4f 	dsb	sy
 8016e84:	b662      	cpsie	i
 8016e86:	60fb      	str	r3, [r7, #12]
}
 8016e88:	bf00      	nop
 8016e8a:	bf00      	nop
 8016e8c:	e7fd      	b.n	8016e8a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016e8e:	693b      	ldr	r3, [r7, #16]
 8016e90:	3318      	adds	r3, #24
 8016e92:	4618      	mov	r0, r3
 8016e94:	f7fe fd72 	bl	801597c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016e98:	4b1d      	ldr	r3, [pc, #116]	@ (8016f10 <xTaskRemoveFromEventList+0xb4>)
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d11c      	bne.n	8016eda <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016ea0:	693b      	ldr	r3, [r7, #16]
 8016ea2:	3304      	adds	r3, #4
 8016ea4:	4618      	mov	r0, r3
 8016ea6:	f7fe fd69 	bl	801597c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016eaa:	693b      	ldr	r3, [r7, #16]
 8016eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016eae:	2201      	movs	r2, #1
 8016eb0:	409a      	lsls	r2, r3
 8016eb2:	4b18      	ldr	r3, [pc, #96]	@ (8016f14 <xTaskRemoveFromEventList+0xb8>)
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	4313      	orrs	r3, r2
 8016eb8:	4a16      	ldr	r2, [pc, #88]	@ (8016f14 <xTaskRemoveFromEventList+0xb8>)
 8016eba:	6013      	str	r3, [r2, #0]
 8016ebc:	693b      	ldr	r3, [r7, #16]
 8016ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016ec0:	4613      	mov	r3, r2
 8016ec2:	009b      	lsls	r3, r3, #2
 8016ec4:	4413      	add	r3, r2
 8016ec6:	009b      	lsls	r3, r3, #2
 8016ec8:	4a13      	ldr	r2, [pc, #76]	@ (8016f18 <xTaskRemoveFromEventList+0xbc>)
 8016eca:	441a      	add	r2, r3
 8016ecc:	693b      	ldr	r3, [r7, #16]
 8016ece:	3304      	adds	r3, #4
 8016ed0:	4619      	mov	r1, r3
 8016ed2:	4610      	mov	r0, r2
 8016ed4:	f7fe fcf5 	bl	80158c2 <vListInsertEnd>
 8016ed8:	e005      	b.n	8016ee6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016eda:	693b      	ldr	r3, [r7, #16]
 8016edc:	3318      	adds	r3, #24
 8016ede:	4619      	mov	r1, r3
 8016ee0:	480e      	ldr	r0, [pc, #56]	@ (8016f1c <xTaskRemoveFromEventList+0xc0>)
 8016ee2:	f7fe fcee 	bl	80158c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016ee6:	693b      	ldr	r3, [r7, #16]
 8016ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016eea:	4b0d      	ldr	r3, [pc, #52]	@ (8016f20 <xTaskRemoveFromEventList+0xc4>)
 8016eec:	681b      	ldr	r3, [r3, #0]
 8016eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016ef0:	429a      	cmp	r2, r3
 8016ef2:	d905      	bls.n	8016f00 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016ef4:	2301      	movs	r3, #1
 8016ef6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8016f24 <xTaskRemoveFromEventList+0xc8>)
 8016efa:	2201      	movs	r2, #1
 8016efc:	601a      	str	r2, [r3, #0]
 8016efe:	e001      	b.n	8016f04 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8016f00:	2300      	movs	r3, #0
 8016f02:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016f04:	697b      	ldr	r3, [r7, #20]
}
 8016f06:	4618      	mov	r0, r3
 8016f08:	3718      	adds	r7, #24
 8016f0a:	46bd      	mov	sp, r7
 8016f0c:	bd80      	pop	{r7, pc}
 8016f0e:	bf00      	nop
 8016f10:	20001ea0 	.word	0x20001ea0
 8016f14:	20001e80 	.word	0x20001e80
 8016f18:	20001d7c 	.word	0x20001d7c
 8016f1c:	20001e38 	.word	0x20001e38
 8016f20:	20001d78 	.word	0x20001d78
 8016f24:	20001e8c 	.word	0x20001e8c

08016f28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016f28:	b480      	push	{r7}
 8016f2a:	b083      	sub	sp, #12
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016f30:	4b06      	ldr	r3, [pc, #24]	@ (8016f4c <vTaskInternalSetTimeOutState+0x24>)
 8016f32:	681a      	ldr	r2, [r3, #0]
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016f38:	4b05      	ldr	r3, [pc, #20]	@ (8016f50 <vTaskInternalSetTimeOutState+0x28>)
 8016f3a:	681a      	ldr	r2, [r3, #0]
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	605a      	str	r2, [r3, #4]
}
 8016f40:	bf00      	nop
 8016f42:	370c      	adds	r7, #12
 8016f44:	46bd      	mov	sp, r7
 8016f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f4a:	4770      	bx	lr
 8016f4c:	20001e90 	.word	0x20001e90
 8016f50:	20001e7c 	.word	0x20001e7c

08016f54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016f54:	b580      	push	{r7, lr}
 8016f56:	b088      	sub	sp, #32
 8016f58:	af00      	add	r7, sp, #0
 8016f5a:	6078      	str	r0, [r7, #4]
 8016f5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d10d      	bne.n	8016f80 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8016f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f68:	b672      	cpsid	i
 8016f6a:	f383 8811 	msr	BASEPRI, r3
 8016f6e:	f3bf 8f6f 	isb	sy
 8016f72:	f3bf 8f4f 	dsb	sy
 8016f76:	b662      	cpsie	i
 8016f78:	613b      	str	r3, [r7, #16]
}
 8016f7a:	bf00      	nop
 8016f7c:	bf00      	nop
 8016f7e:	e7fd      	b.n	8016f7c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8016f80:	683b      	ldr	r3, [r7, #0]
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d10d      	bne.n	8016fa2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8016f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f8a:	b672      	cpsid	i
 8016f8c:	f383 8811 	msr	BASEPRI, r3
 8016f90:	f3bf 8f6f 	isb	sy
 8016f94:	f3bf 8f4f 	dsb	sy
 8016f98:	b662      	cpsie	i
 8016f9a:	60fb      	str	r3, [r7, #12]
}
 8016f9c:	bf00      	nop
 8016f9e:	bf00      	nop
 8016fa0:	e7fd      	b.n	8016f9e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8016fa2:	f000 fb43 	bl	801762c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016fa6:	4b1d      	ldr	r3, [pc, #116]	@ (801701c <xTaskCheckForTimeOut+0xc8>)
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	685b      	ldr	r3, [r3, #4]
 8016fb0:	69ba      	ldr	r2, [r7, #24]
 8016fb2:	1ad3      	subs	r3, r2, r3
 8016fb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016fb6:	683b      	ldr	r3, [r7, #0]
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016fbe:	d102      	bne.n	8016fc6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016fc0:	2300      	movs	r3, #0
 8016fc2:	61fb      	str	r3, [r7, #28]
 8016fc4:	e023      	b.n	801700e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	681a      	ldr	r2, [r3, #0]
 8016fca:	4b15      	ldr	r3, [pc, #84]	@ (8017020 <xTaskCheckForTimeOut+0xcc>)
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	429a      	cmp	r2, r3
 8016fd0:	d007      	beq.n	8016fe2 <xTaskCheckForTimeOut+0x8e>
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	685b      	ldr	r3, [r3, #4]
 8016fd6:	69ba      	ldr	r2, [r7, #24]
 8016fd8:	429a      	cmp	r2, r3
 8016fda:	d302      	bcc.n	8016fe2 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016fdc:	2301      	movs	r3, #1
 8016fde:	61fb      	str	r3, [r7, #28]
 8016fe0:	e015      	b.n	801700e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016fe2:	683b      	ldr	r3, [r7, #0]
 8016fe4:	681b      	ldr	r3, [r3, #0]
 8016fe6:	697a      	ldr	r2, [r7, #20]
 8016fe8:	429a      	cmp	r2, r3
 8016fea:	d20b      	bcs.n	8017004 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016fec:	683b      	ldr	r3, [r7, #0]
 8016fee:	681a      	ldr	r2, [r3, #0]
 8016ff0:	697b      	ldr	r3, [r7, #20]
 8016ff2:	1ad2      	subs	r2, r2, r3
 8016ff4:	683b      	ldr	r3, [r7, #0]
 8016ff6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016ff8:	6878      	ldr	r0, [r7, #4]
 8016ffa:	f7ff ff95 	bl	8016f28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016ffe:	2300      	movs	r3, #0
 8017000:	61fb      	str	r3, [r7, #28]
 8017002:	e004      	b.n	801700e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8017004:	683b      	ldr	r3, [r7, #0]
 8017006:	2200      	movs	r2, #0
 8017008:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801700a:	2301      	movs	r3, #1
 801700c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801700e:	f000 fb43 	bl	8017698 <vPortExitCritical>

	return xReturn;
 8017012:	69fb      	ldr	r3, [r7, #28]
}
 8017014:	4618      	mov	r0, r3
 8017016:	3720      	adds	r7, #32
 8017018:	46bd      	mov	sp, r7
 801701a:	bd80      	pop	{r7, pc}
 801701c:	20001e7c 	.word	0x20001e7c
 8017020:	20001e90 	.word	0x20001e90

08017024 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017024:	b480      	push	{r7}
 8017026:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017028:	4b03      	ldr	r3, [pc, #12]	@ (8017038 <vTaskMissedYield+0x14>)
 801702a:	2201      	movs	r2, #1
 801702c:	601a      	str	r2, [r3, #0]
}
 801702e:	bf00      	nop
 8017030:	46bd      	mov	sp, r7
 8017032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017036:	4770      	bx	lr
 8017038:	20001e8c 	.word	0x20001e8c

0801703c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801703c:	b580      	push	{r7, lr}
 801703e:	b082      	sub	sp, #8
 8017040:	af00      	add	r7, sp, #0
 8017042:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017044:	f000 f854 	bl	80170f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017048:	4b07      	ldr	r3, [pc, #28]	@ (8017068 <prvIdleTask+0x2c>)
 801704a:	681b      	ldr	r3, [r3, #0]
 801704c:	2b01      	cmp	r3, #1
 801704e:	d907      	bls.n	8017060 <prvIdleTask+0x24>
			{
				taskYIELD();
 8017050:	4b06      	ldr	r3, [pc, #24]	@ (801706c <prvIdleTask+0x30>)
 8017052:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017056:	601a      	str	r2, [r3, #0]
 8017058:	f3bf 8f4f 	dsb	sy
 801705c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8017060:	f7ea ff7a 	bl	8001f58 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8017064:	e7ee      	b.n	8017044 <prvIdleTask+0x8>
 8017066:	bf00      	nop
 8017068:	20001d7c 	.word	0x20001d7c
 801706c:	e000ed04 	.word	0xe000ed04

08017070 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017070:	b580      	push	{r7, lr}
 8017072:	b082      	sub	sp, #8
 8017074:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017076:	2300      	movs	r3, #0
 8017078:	607b      	str	r3, [r7, #4]
 801707a:	e00c      	b.n	8017096 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801707c:	687a      	ldr	r2, [r7, #4]
 801707e:	4613      	mov	r3, r2
 8017080:	009b      	lsls	r3, r3, #2
 8017082:	4413      	add	r3, r2
 8017084:	009b      	lsls	r3, r3, #2
 8017086:	4a12      	ldr	r2, [pc, #72]	@ (80170d0 <prvInitialiseTaskLists+0x60>)
 8017088:	4413      	add	r3, r2
 801708a:	4618      	mov	r0, r3
 801708c:	f7fe fbec 	bl	8015868 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	3301      	adds	r3, #1
 8017094:	607b      	str	r3, [r7, #4]
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	2b06      	cmp	r3, #6
 801709a:	d9ef      	bls.n	801707c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801709c:	480d      	ldr	r0, [pc, #52]	@ (80170d4 <prvInitialiseTaskLists+0x64>)
 801709e:	f7fe fbe3 	bl	8015868 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80170a2:	480d      	ldr	r0, [pc, #52]	@ (80170d8 <prvInitialiseTaskLists+0x68>)
 80170a4:	f7fe fbe0 	bl	8015868 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80170a8:	480c      	ldr	r0, [pc, #48]	@ (80170dc <prvInitialiseTaskLists+0x6c>)
 80170aa:	f7fe fbdd 	bl	8015868 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80170ae:	480c      	ldr	r0, [pc, #48]	@ (80170e0 <prvInitialiseTaskLists+0x70>)
 80170b0:	f7fe fbda 	bl	8015868 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80170b4:	480b      	ldr	r0, [pc, #44]	@ (80170e4 <prvInitialiseTaskLists+0x74>)
 80170b6:	f7fe fbd7 	bl	8015868 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80170ba:	4b0b      	ldr	r3, [pc, #44]	@ (80170e8 <prvInitialiseTaskLists+0x78>)
 80170bc:	4a05      	ldr	r2, [pc, #20]	@ (80170d4 <prvInitialiseTaskLists+0x64>)
 80170be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80170c0:	4b0a      	ldr	r3, [pc, #40]	@ (80170ec <prvInitialiseTaskLists+0x7c>)
 80170c2:	4a05      	ldr	r2, [pc, #20]	@ (80170d8 <prvInitialiseTaskLists+0x68>)
 80170c4:	601a      	str	r2, [r3, #0]
}
 80170c6:	bf00      	nop
 80170c8:	3708      	adds	r7, #8
 80170ca:	46bd      	mov	sp, r7
 80170cc:	bd80      	pop	{r7, pc}
 80170ce:	bf00      	nop
 80170d0:	20001d7c 	.word	0x20001d7c
 80170d4:	20001e08 	.word	0x20001e08
 80170d8:	20001e1c 	.word	0x20001e1c
 80170dc:	20001e38 	.word	0x20001e38
 80170e0:	20001e4c 	.word	0x20001e4c
 80170e4:	20001e64 	.word	0x20001e64
 80170e8:	20001e30 	.word	0x20001e30
 80170ec:	20001e34 	.word	0x20001e34

080170f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80170f0:	b580      	push	{r7, lr}
 80170f2:	b082      	sub	sp, #8
 80170f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80170f6:	e019      	b.n	801712c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80170f8:	f000 fa98 	bl	801762c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80170fc:	4b10      	ldr	r3, [pc, #64]	@ (8017140 <prvCheckTasksWaitingTermination+0x50>)
 80170fe:	68db      	ldr	r3, [r3, #12]
 8017100:	68db      	ldr	r3, [r3, #12]
 8017102:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	3304      	adds	r3, #4
 8017108:	4618      	mov	r0, r3
 801710a:	f7fe fc37 	bl	801597c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801710e:	4b0d      	ldr	r3, [pc, #52]	@ (8017144 <prvCheckTasksWaitingTermination+0x54>)
 8017110:	681b      	ldr	r3, [r3, #0]
 8017112:	3b01      	subs	r3, #1
 8017114:	4a0b      	ldr	r2, [pc, #44]	@ (8017144 <prvCheckTasksWaitingTermination+0x54>)
 8017116:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017118:	4b0b      	ldr	r3, [pc, #44]	@ (8017148 <prvCheckTasksWaitingTermination+0x58>)
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	3b01      	subs	r3, #1
 801711e:	4a0a      	ldr	r2, [pc, #40]	@ (8017148 <prvCheckTasksWaitingTermination+0x58>)
 8017120:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017122:	f000 fab9 	bl	8017698 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017126:	6878      	ldr	r0, [r7, #4]
 8017128:	f000 f810 	bl	801714c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801712c:	4b06      	ldr	r3, [pc, #24]	@ (8017148 <prvCheckTasksWaitingTermination+0x58>)
 801712e:	681b      	ldr	r3, [r3, #0]
 8017130:	2b00      	cmp	r3, #0
 8017132:	d1e1      	bne.n	80170f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017134:	bf00      	nop
 8017136:	bf00      	nop
 8017138:	3708      	adds	r7, #8
 801713a:	46bd      	mov	sp, r7
 801713c:	bd80      	pop	{r7, pc}
 801713e:	bf00      	nop
 8017140:	20001e4c 	.word	0x20001e4c
 8017144:	20001e78 	.word	0x20001e78
 8017148:	20001e60 	.word	0x20001e60

0801714c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801714c:	b580      	push	{r7, lr}
 801714e:	b084      	sub	sp, #16
 8017150:	af00      	add	r7, sp, #0
 8017152:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 801715a:	2b00      	cmp	r3, #0
 801715c:	d108      	bne.n	8017170 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017162:	4618      	mov	r0, r3
 8017164:	f000 fc62 	bl	8017a2c <vPortFree>
				vPortFree( pxTCB );
 8017168:	6878      	ldr	r0, [r7, #4]
 801716a:	f000 fc5f 	bl	8017a2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801716e:	e01b      	b.n	80171a8 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8017176:	2b01      	cmp	r3, #1
 8017178:	d103      	bne.n	8017182 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801717a:	6878      	ldr	r0, [r7, #4]
 801717c:	f000 fc56 	bl	8017a2c <vPortFree>
	}
 8017180:	e012      	b.n	80171a8 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8017188:	2b02      	cmp	r3, #2
 801718a:	d00d      	beq.n	80171a8 <prvDeleteTCB+0x5c>
	__asm volatile
 801718c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017190:	b672      	cpsid	i
 8017192:	f383 8811 	msr	BASEPRI, r3
 8017196:	f3bf 8f6f 	isb	sy
 801719a:	f3bf 8f4f 	dsb	sy
 801719e:	b662      	cpsie	i
 80171a0:	60fb      	str	r3, [r7, #12]
}
 80171a2:	bf00      	nop
 80171a4:	bf00      	nop
 80171a6:	e7fd      	b.n	80171a4 <prvDeleteTCB+0x58>
	}
 80171a8:	bf00      	nop
 80171aa:	3710      	adds	r7, #16
 80171ac:	46bd      	mov	sp, r7
 80171ae:	bd80      	pop	{r7, pc}

080171b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80171b0:	b480      	push	{r7}
 80171b2:	b083      	sub	sp, #12
 80171b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80171b6:	4b0c      	ldr	r3, [pc, #48]	@ (80171e8 <prvResetNextTaskUnblockTime+0x38>)
 80171b8:	681b      	ldr	r3, [r3, #0]
 80171ba:	681b      	ldr	r3, [r3, #0]
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d104      	bne.n	80171ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80171c0:	4b0a      	ldr	r3, [pc, #40]	@ (80171ec <prvResetNextTaskUnblockTime+0x3c>)
 80171c2:	f04f 32ff 	mov.w	r2, #4294967295
 80171c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80171c8:	e008      	b.n	80171dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80171ca:	4b07      	ldr	r3, [pc, #28]	@ (80171e8 <prvResetNextTaskUnblockTime+0x38>)
 80171cc:	681b      	ldr	r3, [r3, #0]
 80171ce:	68db      	ldr	r3, [r3, #12]
 80171d0:	68db      	ldr	r3, [r3, #12]
 80171d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	685b      	ldr	r3, [r3, #4]
 80171d8:	4a04      	ldr	r2, [pc, #16]	@ (80171ec <prvResetNextTaskUnblockTime+0x3c>)
 80171da:	6013      	str	r3, [r2, #0]
}
 80171dc:	bf00      	nop
 80171de:	370c      	adds	r7, #12
 80171e0:	46bd      	mov	sp, r7
 80171e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171e6:	4770      	bx	lr
 80171e8:	20001e30 	.word	0x20001e30
 80171ec:	20001e98 	.word	0x20001e98

080171f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80171f0:	b480      	push	{r7}
 80171f2:	b083      	sub	sp, #12
 80171f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80171f6:	4b0b      	ldr	r3, [pc, #44]	@ (8017224 <xTaskGetSchedulerState+0x34>)
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d102      	bne.n	8017204 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80171fe:	2301      	movs	r3, #1
 8017200:	607b      	str	r3, [r7, #4]
 8017202:	e008      	b.n	8017216 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017204:	4b08      	ldr	r3, [pc, #32]	@ (8017228 <xTaskGetSchedulerState+0x38>)
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	2b00      	cmp	r3, #0
 801720a:	d102      	bne.n	8017212 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801720c:	2302      	movs	r3, #2
 801720e:	607b      	str	r3, [r7, #4]
 8017210:	e001      	b.n	8017216 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017212:	2300      	movs	r3, #0
 8017214:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017216:	687b      	ldr	r3, [r7, #4]
	}
 8017218:	4618      	mov	r0, r3
 801721a:	370c      	adds	r7, #12
 801721c:	46bd      	mov	sp, r7
 801721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017222:	4770      	bx	lr
 8017224:	20001e84 	.word	0x20001e84
 8017228:	20001ea0 	.word	0x20001ea0

0801722c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801722c:	b580      	push	{r7, lr}
 801722e:	b086      	sub	sp, #24
 8017230:	af00      	add	r7, sp, #0
 8017232:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017238:	2300      	movs	r3, #0
 801723a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	2b00      	cmp	r3, #0
 8017240:	d074      	beq.n	801732c <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017242:	4b3d      	ldr	r3, [pc, #244]	@ (8017338 <xTaskPriorityDisinherit+0x10c>)
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	693a      	ldr	r2, [r7, #16]
 8017248:	429a      	cmp	r2, r3
 801724a:	d00d      	beq.n	8017268 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 801724c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017250:	b672      	cpsid	i
 8017252:	f383 8811 	msr	BASEPRI, r3
 8017256:	f3bf 8f6f 	isb	sy
 801725a:	f3bf 8f4f 	dsb	sy
 801725e:	b662      	cpsie	i
 8017260:	60fb      	str	r3, [r7, #12]
}
 8017262:	bf00      	nop
 8017264:	bf00      	nop
 8017266:	e7fd      	b.n	8017264 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8017268:	693b      	ldr	r3, [r7, #16]
 801726a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801726c:	2b00      	cmp	r3, #0
 801726e:	d10d      	bne.n	801728c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8017270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017274:	b672      	cpsid	i
 8017276:	f383 8811 	msr	BASEPRI, r3
 801727a:	f3bf 8f6f 	isb	sy
 801727e:	f3bf 8f4f 	dsb	sy
 8017282:	b662      	cpsie	i
 8017284:	60bb      	str	r3, [r7, #8]
}
 8017286:	bf00      	nop
 8017288:	bf00      	nop
 801728a:	e7fd      	b.n	8017288 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 801728c:	693b      	ldr	r3, [r7, #16]
 801728e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017290:	1e5a      	subs	r2, r3, #1
 8017292:	693b      	ldr	r3, [r7, #16]
 8017294:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8017296:	693b      	ldr	r3, [r7, #16]
 8017298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801729a:	693b      	ldr	r3, [r7, #16]
 801729c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801729e:	429a      	cmp	r2, r3
 80172a0:	d044      	beq.n	801732c <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80172a2:	693b      	ldr	r3, [r7, #16]
 80172a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d140      	bne.n	801732c <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80172aa:	693b      	ldr	r3, [r7, #16]
 80172ac:	3304      	adds	r3, #4
 80172ae:	4618      	mov	r0, r3
 80172b0:	f7fe fb64 	bl	801597c <uxListRemove>
 80172b4:	4603      	mov	r3, r0
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	d115      	bne.n	80172e6 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80172ba:	693b      	ldr	r3, [r7, #16]
 80172bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80172be:	491f      	ldr	r1, [pc, #124]	@ (801733c <xTaskPriorityDisinherit+0x110>)
 80172c0:	4613      	mov	r3, r2
 80172c2:	009b      	lsls	r3, r3, #2
 80172c4:	4413      	add	r3, r2
 80172c6:	009b      	lsls	r3, r3, #2
 80172c8:	440b      	add	r3, r1
 80172ca:	681b      	ldr	r3, [r3, #0]
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d10a      	bne.n	80172e6 <xTaskPriorityDisinherit+0xba>
 80172d0:	693b      	ldr	r3, [r7, #16]
 80172d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80172d4:	2201      	movs	r2, #1
 80172d6:	fa02 f303 	lsl.w	r3, r2, r3
 80172da:	43da      	mvns	r2, r3
 80172dc:	4b18      	ldr	r3, [pc, #96]	@ (8017340 <xTaskPriorityDisinherit+0x114>)
 80172de:	681b      	ldr	r3, [r3, #0]
 80172e0:	4013      	ands	r3, r2
 80172e2:	4a17      	ldr	r2, [pc, #92]	@ (8017340 <xTaskPriorityDisinherit+0x114>)
 80172e4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80172e6:	693b      	ldr	r3, [r7, #16]
 80172e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80172ea:	693b      	ldr	r3, [r7, #16]
 80172ec:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80172ee:	693b      	ldr	r3, [r7, #16]
 80172f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80172f2:	f1c3 0207 	rsb	r2, r3, #7
 80172f6:	693b      	ldr	r3, [r7, #16]
 80172f8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80172fa:	693b      	ldr	r3, [r7, #16]
 80172fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80172fe:	2201      	movs	r2, #1
 8017300:	409a      	lsls	r2, r3
 8017302:	4b0f      	ldr	r3, [pc, #60]	@ (8017340 <xTaskPriorityDisinherit+0x114>)
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	4313      	orrs	r3, r2
 8017308:	4a0d      	ldr	r2, [pc, #52]	@ (8017340 <xTaskPriorityDisinherit+0x114>)
 801730a:	6013      	str	r3, [r2, #0]
 801730c:	693b      	ldr	r3, [r7, #16]
 801730e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017310:	4613      	mov	r3, r2
 8017312:	009b      	lsls	r3, r3, #2
 8017314:	4413      	add	r3, r2
 8017316:	009b      	lsls	r3, r3, #2
 8017318:	4a08      	ldr	r2, [pc, #32]	@ (801733c <xTaskPriorityDisinherit+0x110>)
 801731a:	441a      	add	r2, r3
 801731c:	693b      	ldr	r3, [r7, #16]
 801731e:	3304      	adds	r3, #4
 8017320:	4619      	mov	r1, r3
 8017322:	4610      	mov	r0, r2
 8017324:	f7fe facd 	bl	80158c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017328:	2301      	movs	r3, #1
 801732a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801732c:	697b      	ldr	r3, [r7, #20]
	}
 801732e:	4618      	mov	r0, r3
 8017330:	3718      	adds	r7, #24
 8017332:	46bd      	mov	sp, r7
 8017334:	bd80      	pop	{r7, pc}
 8017336:	bf00      	nop
 8017338:	20001d78 	.word	0x20001d78
 801733c:	20001d7c 	.word	0x20001d7c
 8017340:	20001e80 	.word	0x20001e80

08017344 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017344:	b580      	push	{r7, lr}
 8017346:	b084      	sub	sp, #16
 8017348:	af00      	add	r7, sp, #0
 801734a:	6078      	str	r0, [r7, #4]
 801734c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801734e:	4b29      	ldr	r3, [pc, #164]	@ (80173f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8017350:	681b      	ldr	r3, [r3, #0]
 8017352:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017354:	4b28      	ldr	r3, [pc, #160]	@ (80173f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017356:	681b      	ldr	r3, [r3, #0]
 8017358:	3304      	adds	r3, #4
 801735a:	4618      	mov	r0, r3
 801735c:	f7fe fb0e 	bl	801597c <uxListRemove>
 8017360:	4603      	mov	r3, r0
 8017362:	2b00      	cmp	r3, #0
 8017364:	d10b      	bne.n	801737e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8017366:	4b24      	ldr	r3, [pc, #144]	@ (80173f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017368:	681b      	ldr	r3, [r3, #0]
 801736a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801736c:	2201      	movs	r2, #1
 801736e:	fa02 f303 	lsl.w	r3, r2, r3
 8017372:	43da      	mvns	r2, r3
 8017374:	4b21      	ldr	r3, [pc, #132]	@ (80173fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	4013      	ands	r3, r2
 801737a:	4a20      	ldr	r2, [pc, #128]	@ (80173fc <prvAddCurrentTaskToDelayedList+0xb8>)
 801737c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017384:	d10a      	bne.n	801739c <prvAddCurrentTaskToDelayedList+0x58>
 8017386:	683b      	ldr	r3, [r7, #0]
 8017388:	2b00      	cmp	r3, #0
 801738a:	d007      	beq.n	801739c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801738c:	4b1a      	ldr	r3, [pc, #104]	@ (80173f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801738e:	681b      	ldr	r3, [r3, #0]
 8017390:	3304      	adds	r3, #4
 8017392:	4619      	mov	r1, r3
 8017394:	481a      	ldr	r0, [pc, #104]	@ (8017400 <prvAddCurrentTaskToDelayedList+0xbc>)
 8017396:	f7fe fa94 	bl	80158c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801739a:	e026      	b.n	80173ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801739c:	68fa      	ldr	r2, [r7, #12]
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	4413      	add	r3, r2
 80173a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80173a4:	4b14      	ldr	r3, [pc, #80]	@ (80173f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80173a6:	681b      	ldr	r3, [r3, #0]
 80173a8:	68ba      	ldr	r2, [r7, #8]
 80173aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80173ac:	68ba      	ldr	r2, [r7, #8]
 80173ae:	68fb      	ldr	r3, [r7, #12]
 80173b0:	429a      	cmp	r2, r3
 80173b2:	d209      	bcs.n	80173c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80173b4:	4b13      	ldr	r3, [pc, #76]	@ (8017404 <prvAddCurrentTaskToDelayedList+0xc0>)
 80173b6:	681a      	ldr	r2, [r3, #0]
 80173b8:	4b0f      	ldr	r3, [pc, #60]	@ (80173f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80173ba:	681b      	ldr	r3, [r3, #0]
 80173bc:	3304      	adds	r3, #4
 80173be:	4619      	mov	r1, r3
 80173c0:	4610      	mov	r0, r2
 80173c2:	f7fe faa2 	bl	801590a <vListInsert>
}
 80173c6:	e010      	b.n	80173ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80173c8:	4b0f      	ldr	r3, [pc, #60]	@ (8017408 <prvAddCurrentTaskToDelayedList+0xc4>)
 80173ca:	681a      	ldr	r2, [r3, #0]
 80173cc:	4b0a      	ldr	r3, [pc, #40]	@ (80173f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	3304      	adds	r3, #4
 80173d2:	4619      	mov	r1, r3
 80173d4:	4610      	mov	r0, r2
 80173d6:	f7fe fa98 	bl	801590a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80173da:	4b0c      	ldr	r3, [pc, #48]	@ (801740c <prvAddCurrentTaskToDelayedList+0xc8>)
 80173dc:	681b      	ldr	r3, [r3, #0]
 80173de:	68ba      	ldr	r2, [r7, #8]
 80173e0:	429a      	cmp	r2, r3
 80173e2:	d202      	bcs.n	80173ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80173e4:	4a09      	ldr	r2, [pc, #36]	@ (801740c <prvAddCurrentTaskToDelayedList+0xc8>)
 80173e6:	68bb      	ldr	r3, [r7, #8]
 80173e8:	6013      	str	r3, [r2, #0]
}
 80173ea:	bf00      	nop
 80173ec:	3710      	adds	r7, #16
 80173ee:	46bd      	mov	sp, r7
 80173f0:	bd80      	pop	{r7, pc}
 80173f2:	bf00      	nop
 80173f4:	20001e7c 	.word	0x20001e7c
 80173f8:	20001d78 	.word	0x20001d78
 80173fc:	20001e80 	.word	0x20001e80
 8017400:	20001e64 	.word	0x20001e64
 8017404:	20001e34 	.word	0x20001e34
 8017408:	20001e30 	.word	0x20001e30
 801740c:	20001e98 	.word	0x20001e98

08017410 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8017410:	b480      	push	{r7}
 8017412:	b085      	sub	sp, #20
 8017414:	af00      	add	r7, sp, #0
 8017416:	60f8      	str	r0, [r7, #12]
 8017418:	60b9      	str	r1, [r7, #8]
 801741a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	3b04      	subs	r3, #4
 8017420:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8017428:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	3b04      	subs	r3, #4
 801742e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017430:	68bb      	ldr	r3, [r7, #8]
 8017432:	f023 0201 	bic.w	r2, r3, #1
 8017436:	68fb      	ldr	r3, [r7, #12]
 8017438:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	3b04      	subs	r3, #4
 801743e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017440:	4a0c      	ldr	r2, [pc, #48]	@ (8017474 <pxPortInitialiseStack+0x64>)
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8017446:	68fb      	ldr	r3, [r7, #12]
 8017448:	3b14      	subs	r3, #20
 801744a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801744c:	687a      	ldr	r2, [r7, #4]
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8017452:	68fb      	ldr	r3, [r7, #12]
 8017454:	3b04      	subs	r3, #4
 8017456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	f06f 0202 	mvn.w	r2, #2
 801745e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	3b20      	subs	r3, #32
 8017464:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8017466:	68fb      	ldr	r3, [r7, #12]
}
 8017468:	4618      	mov	r0, r3
 801746a:	3714      	adds	r7, #20
 801746c:	46bd      	mov	sp, r7
 801746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017472:	4770      	bx	lr
 8017474:	08017479 	.word	0x08017479

08017478 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017478:	b480      	push	{r7}
 801747a:	b085      	sub	sp, #20
 801747c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801747e:	2300      	movs	r3, #0
 8017480:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8017482:	4b15      	ldr	r3, [pc, #84]	@ (80174d8 <prvTaskExitError+0x60>)
 8017484:	681b      	ldr	r3, [r3, #0]
 8017486:	f1b3 3fff 	cmp.w	r3, #4294967295
 801748a:	d00d      	beq.n	80174a8 <prvTaskExitError+0x30>
	__asm volatile
 801748c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017490:	b672      	cpsid	i
 8017492:	f383 8811 	msr	BASEPRI, r3
 8017496:	f3bf 8f6f 	isb	sy
 801749a:	f3bf 8f4f 	dsb	sy
 801749e:	b662      	cpsie	i
 80174a0:	60fb      	str	r3, [r7, #12]
}
 80174a2:	bf00      	nop
 80174a4:	bf00      	nop
 80174a6:	e7fd      	b.n	80174a4 <prvTaskExitError+0x2c>
	__asm volatile
 80174a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80174ac:	b672      	cpsid	i
 80174ae:	f383 8811 	msr	BASEPRI, r3
 80174b2:	f3bf 8f6f 	isb	sy
 80174b6:	f3bf 8f4f 	dsb	sy
 80174ba:	b662      	cpsie	i
 80174bc:	60bb      	str	r3, [r7, #8]
}
 80174be:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80174c0:	bf00      	nop
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d0fc      	beq.n	80174c2 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80174c8:	bf00      	nop
 80174ca:	bf00      	nop
 80174cc:	3714      	adds	r7, #20
 80174ce:	46bd      	mov	sp, r7
 80174d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174d4:	4770      	bx	lr
 80174d6:	bf00      	nop
 80174d8:	20000078 	.word	0x20000078
 80174dc:	00000000 	.word	0x00000000

080174e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80174e0:	4b07      	ldr	r3, [pc, #28]	@ (8017500 <pxCurrentTCBConst2>)
 80174e2:	6819      	ldr	r1, [r3, #0]
 80174e4:	6808      	ldr	r0, [r1, #0]
 80174e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174ea:	f380 8809 	msr	PSP, r0
 80174ee:	f3bf 8f6f 	isb	sy
 80174f2:	f04f 0000 	mov.w	r0, #0
 80174f6:	f380 8811 	msr	BASEPRI, r0
 80174fa:	4770      	bx	lr
 80174fc:	f3af 8000 	nop.w

08017500 <pxCurrentTCBConst2>:
 8017500:	20001d78 	.word	0x20001d78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8017504:	bf00      	nop
 8017506:	bf00      	nop

08017508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8017508:	4808      	ldr	r0, [pc, #32]	@ (801752c <prvPortStartFirstTask+0x24>)
 801750a:	6800      	ldr	r0, [r0, #0]
 801750c:	6800      	ldr	r0, [r0, #0]
 801750e:	f380 8808 	msr	MSP, r0
 8017512:	f04f 0000 	mov.w	r0, #0
 8017516:	f380 8814 	msr	CONTROL, r0
 801751a:	b662      	cpsie	i
 801751c:	b661      	cpsie	f
 801751e:	f3bf 8f4f 	dsb	sy
 8017522:	f3bf 8f6f 	isb	sy
 8017526:	df00      	svc	0
 8017528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801752a:	bf00      	nop
 801752c:	e000ed08 	.word	0xe000ed08

08017530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017530:	b580      	push	{r7, lr}
 8017532:	b084      	sub	sp, #16
 8017534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8017536:	4b37      	ldr	r3, [pc, #220]	@ (8017614 <xPortStartScheduler+0xe4>)
 8017538:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	781b      	ldrb	r3, [r3, #0]
 801753e:	b2db      	uxtb	r3, r3
 8017540:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	22ff      	movs	r2, #255	@ 0xff
 8017546:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	781b      	ldrb	r3, [r3, #0]
 801754c:	b2db      	uxtb	r3, r3
 801754e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017550:	78fb      	ldrb	r3, [r7, #3]
 8017552:	b2db      	uxtb	r3, r3
 8017554:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8017558:	b2da      	uxtb	r2, r3
 801755a:	4b2f      	ldr	r3, [pc, #188]	@ (8017618 <xPortStartScheduler+0xe8>)
 801755c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801755e:	4b2f      	ldr	r3, [pc, #188]	@ (801761c <xPortStartScheduler+0xec>)
 8017560:	2207      	movs	r2, #7
 8017562:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017564:	e009      	b.n	801757a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8017566:	4b2d      	ldr	r3, [pc, #180]	@ (801761c <xPortStartScheduler+0xec>)
 8017568:	681b      	ldr	r3, [r3, #0]
 801756a:	3b01      	subs	r3, #1
 801756c:	4a2b      	ldr	r2, [pc, #172]	@ (801761c <xPortStartScheduler+0xec>)
 801756e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017570:	78fb      	ldrb	r3, [r7, #3]
 8017572:	b2db      	uxtb	r3, r3
 8017574:	005b      	lsls	r3, r3, #1
 8017576:	b2db      	uxtb	r3, r3
 8017578:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801757a:	78fb      	ldrb	r3, [r7, #3]
 801757c:	b2db      	uxtb	r3, r3
 801757e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017582:	2b80      	cmp	r3, #128	@ 0x80
 8017584:	d0ef      	beq.n	8017566 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8017586:	4b25      	ldr	r3, [pc, #148]	@ (801761c <xPortStartScheduler+0xec>)
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	f1c3 0307 	rsb	r3, r3, #7
 801758e:	2b04      	cmp	r3, #4
 8017590:	d00d      	beq.n	80175ae <xPortStartScheduler+0x7e>
	__asm volatile
 8017592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017596:	b672      	cpsid	i
 8017598:	f383 8811 	msr	BASEPRI, r3
 801759c:	f3bf 8f6f 	isb	sy
 80175a0:	f3bf 8f4f 	dsb	sy
 80175a4:	b662      	cpsie	i
 80175a6:	60bb      	str	r3, [r7, #8]
}
 80175a8:	bf00      	nop
 80175aa:	bf00      	nop
 80175ac:	e7fd      	b.n	80175aa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80175ae:	4b1b      	ldr	r3, [pc, #108]	@ (801761c <xPortStartScheduler+0xec>)
 80175b0:	681b      	ldr	r3, [r3, #0]
 80175b2:	021b      	lsls	r3, r3, #8
 80175b4:	4a19      	ldr	r2, [pc, #100]	@ (801761c <xPortStartScheduler+0xec>)
 80175b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80175b8:	4b18      	ldr	r3, [pc, #96]	@ (801761c <xPortStartScheduler+0xec>)
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80175c0:	4a16      	ldr	r2, [pc, #88]	@ (801761c <xPortStartScheduler+0xec>)
 80175c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	b2da      	uxtb	r2, r3
 80175c8:	68fb      	ldr	r3, [r7, #12]
 80175ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80175cc:	4b14      	ldr	r3, [pc, #80]	@ (8017620 <xPortStartScheduler+0xf0>)
 80175ce:	681b      	ldr	r3, [r3, #0]
 80175d0:	4a13      	ldr	r2, [pc, #76]	@ (8017620 <xPortStartScheduler+0xf0>)
 80175d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80175d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80175d8:	4b11      	ldr	r3, [pc, #68]	@ (8017620 <xPortStartScheduler+0xf0>)
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	4a10      	ldr	r2, [pc, #64]	@ (8017620 <xPortStartScheduler+0xf0>)
 80175de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80175e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80175e4:	f000 f8dc 	bl	80177a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80175e8:	4b0e      	ldr	r3, [pc, #56]	@ (8017624 <xPortStartScheduler+0xf4>)
 80175ea:	2200      	movs	r2, #0
 80175ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80175ee:	f000 f8fb 	bl	80177e8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80175f2:	4b0d      	ldr	r3, [pc, #52]	@ (8017628 <xPortStartScheduler+0xf8>)
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	4a0c      	ldr	r2, [pc, #48]	@ (8017628 <xPortStartScheduler+0xf8>)
 80175f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80175fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80175fe:	f7ff ff83 	bl	8017508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8017602:	f7ff fb7f 	bl	8016d04 <vTaskSwitchContext>
	prvTaskExitError();
 8017606:	f7ff ff37 	bl	8017478 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801760a:	2300      	movs	r3, #0
}
 801760c:	4618      	mov	r0, r3
 801760e:	3710      	adds	r7, #16
 8017610:	46bd      	mov	sp, r7
 8017612:	bd80      	pop	{r7, pc}
 8017614:	e000e400 	.word	0xe000e400
 8017618:	20001ea4 	.word	0x20001ea4
 801761c:	20001ea8 	.word	0x20001ea8
 8017620:	e000ed20 	.word	0xe000ed20
 8017624:	20000078 	.word	0x20000078
 8017628:	e000ef34 	.word	0xe000ef34

0801762c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801762c:	b480      	push	{r7}
 801762e:	b083      	sub	sp, #12
 8017630:	af00      	add	r7, sp, #0
	__asm volatile
 8017632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017636:	b672      	cpsid	i
 8017638:	f383 8811 	msr	BASEPRI, r3
 801763c:	f3bf 8f6f 	isb	sy
 8017640:	f3bf 8f4f 	dsb	sy
 8017644:	b662      	cpsie	i
 8017646:	607b      	str	r3, [r7, #4]
}
 8017648:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801764a:	4b11      	ldr	r3, [pc, #68]	@ (8017690 <vPortEnterCritical+0x64>)
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	3301      	adds	r3, #1
 8017650:	4a0f      	ldr	r2, [pc, #60]	@ (8017690 <vPortEnterCritical+0x64>)
 8017652:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8017654:	4b0e      	ldr	r3, [pc, #56]	@ (8017690 <vPortEnterCritical+0x64>)
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	2b01      	cmp	r3, #1
 801765a:	d112      	bne.n	8017682 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801765c:	4b0d      	ldr	r3, [pc, #52]	@ (8017694 <vPortEnterCritical+0x68>)
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	b2db      	uxtb	r3, r3
 8017662:	2b00      	cmp	r3, #0
 8017664:	d00d      	beq.n	8017682 <vPortEnterCritical+0x56>
	__asm volatile
 8017666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801766a:	b672      	cpsid	i
 801766c:	f383 8811 	msr	BASEPRI, r3
 8017670:	f3bf 8f6f 	isb	sy
 8017674:	f3bf 8f4f 	dsb	sy
 8017678:	b662      	cpsie	i
 801767a:	603b      	str	r3, [r7, #0]
}
 801767c:	bf00      	nop
 801767e:	bf00      	nop
 8017680:	e7fd      	b.n	801767e <vPortEnterCritical+0x52>
	}
}
 8017682:	bf00      	nop
 8017684:	370c      	adds	r7, #12
 8017686:	46bd      	mov	sp, r7
 8017688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801768c:	4770      	bx	lr
 801768e:	bf00      	nop
 8017690:	20000078 	.word	0x20000078
 8017694:	e000ed04 	.word	0xe000ed04

08017698 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8017698:	b480      	push	{r7}
 801769a:	b083      	sub	sp, #12
 801769c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801769e:	4b13      	ldr	r3, [pc, #76]	@ (80176ec <vPortExitCritical+0x54>)
 80176a0:	681b      	ldr	r3, [r3, #0]
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d10d      	bne.n	80176c2 <vPortExitCritical+0x2a>
	__asm volatile
 80176a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80176aa:	b672      	cpsid	i
 80176ac:	f383 8811 	msr	BASEPRI, r3
 80176b0:	f3bf 8f6f 	isb	sy
 80176b4:	f3bf 8f4f 	dsb	sy
 80176b8:	b662      	cpsie	i
 80176ba:	607b      	str	r3, [r7, #4]
}
 80176bc:	bf00      	nop
 80176be:	bf00      	nop
 80176c0:	e7fd      	b.n	80176be <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80176c2:	4b0a      	ldr	r3, [pc, #40]	@ (80176ec <vPortExitCritical+0x54>)
 80176c4:	681b      	ldr	r3, [r3, #0]
 80176c6:	3b01      	subs	r3, #1
 80176c8:	4a08      	ldr	r2, [pc, #32]	@ (80176ec <vPortExitCritical+0x54>)
 80176ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80176cc:	4b07      	ldr	r3, [pc, #28]	@ (80176ec <vPortExitCritical+0x54>)
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d105      	bne.n	80176e0 <vPortExitCritical+0x48>
 80176d4:	2300      	movs	r3, #0
 80176d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80176d8:	683b      	ldr	r3, [r7, #0]
 80176da:	f383 8811 	msr	BASEPRI, r3
}
 80176de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80176e0:	bf00      	nop
 80176e2:	370c      	adds	r7, #12
 80176e4:	46bd      	mov	sp, r7
 80176e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ea:	4770      	bx	lr
 80176ec:	20000078 	.word	0x20000078

080176f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80176f0:	f3ef 8009 	mrs	r0, PSP
 80176f4:	f3bf 8f6f 	isb	sy
 80176f8:	4b15      	ldr	r3, [pc, #84]	@ (8017750 <pxCurrentTCBConst>)
 80176fa:	681a      	ldr	r2, [r3, #0]
 80176fc:	f01e 0f10 	tst.w	lr, #16
 8017700:	bf08      	it	eq
 8017702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8017706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801770a:	6010      	str	r0, [r2, #0]
 801770c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8017710:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8017714:	b672      	cpsid	i
 8017716:	f380 8811 	msr	BASEPRI, r0
 801771a:	f3bf 8f4f 	dsb	sy
 801771e:	f3bf 8f6f 	isb	sy
 8017722:	b662      	cpsie	i
 8017724:	f7ff faee 	bl	8016d04 <vTaskSwitchContext>
 8017728:	f04f 0000 	mov.w	r0, #0
 801772c:	f380 8811 	msr	BASEPRI, r0
 8017730:	bc09      	pop	{r0, r3}
 8017732:	6819      	ldr	r1, [r3, #0]
 8017734:	6808      	ldr	r0, [r1, #0]
 8017736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801773a:	f01e 0f10 	tst.w	lr, #16
 801773e:	bf08      	it	eq
 8017740:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017744:	f380 8809 	msr	PSP, r0
 8017748:	f3bf 8f6f 	isb	sy
 801774c:	4770      	bx	lr
 801774e:	bf00      	nop

08017750 <pxCurrentTCBConst>:
 8017750:	20001d78 	.word	0x20001d78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017754:	bf00      	nop
 8017756:	bf00      	nop

08017758 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017758:	b580      	push	{r7, lr}
 801775a:	b082      	sub	sp, #8
 801775c:	af00      	add	r7, sp, #0
	__asm volatile
 801775e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017762:	b672      	cpsid	i
 8017764:	f383 8811 	msr	BASEPRI, r3
 8017768:	f3bf 8f6f 	isb	sy
 801776c:	f3bf 8f4f 	dsb	sy
 8017770:	b662      	cpsie	i
 8017772:	607b      	str	r3, [r7, #4]
}
 8017774:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8017776:	f7ff fa09 	bl	8016b8c <xTaskIncrementTick>
 801777a:	4603      	mov	r3, r0
 801777c:	2b00      	cmp	r3, #0
 801777e:	d003      	beq.n	8017788 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8017780:	4b06      	ldr	r3, [pc, #24]	@ (801779c <SysTick_Handler+0x44>)
 8017782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017786:	601a      	str	r2, [r3, #0]
 8017788:	2300      	movs	r3, #0
 801778a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801778c:	683b      	ldr	r3, [r7, #0]
 801778e:	f383 8811 	msr	BASEPRI, r3
}
 8017792:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8017794:	bf00      	nop
 8017796:	3708      	adds	r7, #8
 8017798:	46bd      	mov	sp, r7
 801779a:	bd80      	pop	{r7, pc}
 801779c:	e000ed04 	.word	0xe000ed04

080177a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80177a0:	b480      	push	{r7}
 80177a2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80177a4:	4b0b      	ldr	r3, [pc, #44]	@ (80177d4 <vPortSetupTimerInterrupt+0x34>)
 80177a6:	2200      	movs	r2, #0
 80177a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80177aa:	4b0b      	ldr	r3, [pc, #44]	@ (80177d8 <vPortSetupTimerInterrupt+0x38>)
 80177ac:	2200      	movs	r2, #0
 80177ae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80177b0:	4b0a      	ldr	r3, [pc, #40]	@ (80177dc <vPortSetupTimerInterrupt+0x3c>)
 80177b2:	681b      	ldr	r3, [r3, #0]
 80177b4:	4a0a      	ldr	r2, [pc, #40]	@ (80177e0 <vPortSetupTimerInterrupt+0x40>)
 80177b6:	fba2 2303 	umull	r2, r3, r2, r3
 80177ba:	099b      	lsrs	r3, r3, #6
 80177bc:	4a09      	ldr	r2, [pc, #36]	@ (80177e4 <vPortSetupTimerInterrupt+0x44>)
 80177be:	3b01      	subs	r3, #1
 80177c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80177c2:	4b04      	ldr	r3, [pc, #16]	@ (80177d4 <vPortSetupTimerInterrupt+0x34>)
 80177c4:	2207      	movs	r2, #7
 80177c6:	601a      	str	r2, [r3, #0]
}
 80177c8:	bf00      	nop
 80177ca:	46bd      	mov	sp, r7
 80177cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177d0:	4770      	bx	lr
 80177d2:	bf00      	nop
 80177d4:	e000e010 	.word	0xe000e010
 80177d8:	e000e018 	.word	0xe000e018
 80177dc:	20000020 	.word	0x20000020
 80177e0:	10624dd3 	.word	0x10624dd3
 80177e4:	e000e014 	.word	0xe000e014

080177e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80177e8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80177f8 <vPortEnableVFP+0x10>
 80177ec:	6801      	ldr	r1, [r0, #0]
 80177ee:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80177f2:	6001      	str	r1, [r0, #0]
 80177f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80177f6:	bf00      	nop
 80177f8:	e000ed88 	.word	0xe000ed88

080177fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80177fc:	b480      	push	{r7}
 80177fe:	b085      	sub	sp, #20
 8017800:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8017802:	f3ef 8305 	mrs	r3, IPSR
 8017806:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	2b0f      	cmp	r3, #15
 801780c:	d917      	bls.n	801783e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801780e:	4a1a      	ldr	r2, [pc, #104]	@ (8017878 <vPortValidateInterruptPriority+0x7c>)
 8017810:	68fb      	ldr	r3, [r7, #12]
 8017812:	4413      	add	r3, r2
 8017814:	781b      	ldrb	r3, [r3, #0]
 8017816:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8017818:	4b18      	ldr	r3, [pc, #96]	@ (801787c <vPortValidateInterruptPriority+0x80>)
 801781a:	781b      	ldrb	r3, [r3, #0]
 801781c:	7afa      	ldrb	r2, [r7, #11]
 801781e:	429a      	cmp	r2, r3
 8017820:	d20d      	bcs.n	801783e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8017822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017826:	b672      	cpsid	i
 8017828:	f383 8811 	msr	BASEPRI, r3
 801782c:	f3bf 8f6f 	isb	sy
 8017830:	f3bf 8f4f 	dsb	sy
 8017834:	b662      	cpsie	i
 8017836:	607b      	str	r3, [r7, #4]
}
 8017838:	bf00      	nop
 801783a:	bf00      	nop
 801783c:	e7fd      	b.n	801783a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801783e:	4b10      	ldr	r3, [pc, #64]	@ (8017880 <vPortValidateInterruptPriority+0x84>)
 8017840:	681b      	ldr	r3, [r3, #0]
 8017842:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8017846:	4b0f      	ldr	r3, [pc, #60]	@ (8017884 <vPortValidateInterruptPriority+0x88>)
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	429a      	cmp	r2, r3
 801784c:	d90d      	bls.n	801786a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 801784e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017852:	b672      	cpsid	i
 8017854:	f383 8811 	msr	BASEPRI, r3
 8017858:	f3bf 8f6f 	isb	sy
 801785c:	f3bf 8f4f 	dsb	sy
 8017860:	b662      	cpsie	i
 8017862:	603b      	str	r3, [r7, #0]
}
 8017864:	bf00      	nop
 8017866:	bf00      	nop
 8017868:	e7fd      	b.n	8017866 <vPortValidateInterruptPriority+0x6a>
	}
 801786a:	bf00      	nop
 801786c:	3714      	adds	r7, #20
 801786e:	46bd      	mov	sp, r7
 8017870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017874:	4770      	bx	lr
 8017876:	bf00      	nop
 8017878:	e000e3f0 	.word	0xe000e3f0
 801787c:	20001ea4 	.word	0x20001ea4
 8017880:	e000ed0c 	.word	0xe000ed0c
 8017884:	20001ea8 	.word	0x20001ea8

08017888 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8017888:	b580      	push	{r7, lr}
 801788a:	b08a      	sub	sp, #40	@ 0x28
 801788c:	af00      	add	r7, sp, #0
 801788e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017890:	2300      	movs	r3, #0
 8017892:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017894:	f7ff f8aa 	bl	80169ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8017898:	4b5f      	ldr	r3, [pc, #380]	@ (8017a18 <pvPortMalloc+0x190>)
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	2b00      	cmp	r3, #0
 801789e:	d101      	bne.n	80178a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80178a0:	f000 f924 	bl	8017aec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80178a4:	4b5d      	ldr	r3, [pc, #372]	@ (8017a1c <pvPortMalloc+0x194>)
 80178a6:	681a      	ldr	r2, [r3, #0]
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	4013      	ands	r3, r2
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	f040 8094 	bne.w	80179da <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d020      	beq.n	80178fa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80178b8:	2208      	movs	r2, #8
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	4413      	add	r3, r2
 80178be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	f003 0307 	and.w	r3, r3, #7
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d017      	beq.n	80178fa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	f023 0307 	bic.w	r3, r3, #7
 80178d0:	3308      	adds	r3, #8
 80178d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	f003 0307 	and.w	r3, r3, #7
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d00d      	beq.n	80178fa <pvPortMalloc+0x72>
	__asm volatile
 80178de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80178e2:	b672      	cpsid	i
 80178e4:	f383 8811 	msr	BASEPRI, r3
 80178e8:	f3bf 8f6f 	isb	sy
 80178ec:	f3bf 8f4f 	dsb	sy
 80178f0:	b662      	cpsie	i
 80178f2:	617b      	str	r3, [r7, #20]
}
 80178f4:	bf00      	nop
 80178f6:	bf00      	nop
 80178f8:	e7fd      	b.n	80178f6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d06c      	beq.n	80179da <pvPortMalloc+0x152>
 8017900:	4b47      	ldr	r3, [pc, #284]	@ (8017a20 <pvPortMalloc+0x198>)
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	687a      	ldr	r2, [r7, #4]
 8017906:	429a      	cmp	r2, r3
 8017908:	d867      	bhi.n	80179da <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801790a:	4b46      	ldr	r3, [pc, #280]	@ (8017a24 <pvPortMalloc+0x19c>)
 801790c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801790e:	4b45      	ldr	r3, [pc, #276]	@ (8017a24 <pvPortMalloc+0x19c>)
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017914:	e004      	b.n	8017920 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8017916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017918:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801791a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017922:	685b      	ldr	r3, [r3, #4]
 8017924:	687a      	ldr	r2, [r7, #4]
 8017926:	429a      	cmp	r2, r3
 8017928:	d903      	bls.n	8017932 <pvPortMalloc+0xaa>
 801792a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	2b00      	cmp	r3, #0
 8017930:	d1f1      	bne.n	8017916 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8017932:	4b39      	ldr	r3, [pc, #228]	@ (8017a18 <pvPortMalloc+0x190>)
 8017934:	681b      	ldr	r3, [r3, #0]
 8017936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017938:	429a      	cmp	r2, r3
 801793a:	d04e      	beq.n	80179da <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801793c:	6a3b      	ldr	r3, [r7, #32]
 801793e:	681b      	ldr	r3, [r3, #0]
 8017940:	2208      	movs	r2, #8
 8017942:	4413      	add	r3, r2
 8017944:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017948:	681a      	ldr	r2, [r3, #0]
 801794a:	6a3b      	ldr	r3, [r7, #32]
 801794c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801794e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017950:	685a      	ldr	r2, [r3, #4]
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	1ad2      	subs	r2, r2, r3
 8017956:	2308      	movs	r3, #8
 8017958:	005b      	lsls	r3, r3, #1
 801795a:	429a      	cmp	r2, r3
 801795c:	d922      	bls.n	80179a4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801795e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	4413      	add	r3, r2
 8017964:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017966:	69bb      	ldr	r3, [r7, #24]
 8017968:	f003 0307 	and.w	r3, r3, #7
 801796c:	2b00      	cmp	r3, #0
 801796e:	d00d      	beq.n	801798c <pvPortMalloc+0x104>
	__asm volatile
 8017970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017974:	b672      	cpsid	i
 8017976:	f383 8811 	msr	BASEPRI, r3
 801797a:	f3bf 8f6f 	isb	sy
 801797e:	f3bf 8f4f 	dsb	sy
 8017982:	b662      	cpsie	i
 8017984:	613b      	str	r3, [r7, #16]
}
 8017986:	bf00      	nop
 8017988:	bf00      	nop
 801798a:	e7fd      	b.n	8017988 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801798c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801798e:	685a      	ldr	r2, [r3, #4]
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	1ad2      	subs	r2, r2, r3
 8017994:	69bb      	ldr	r3, [r7, #24]
 8017996:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801799a:	687a      	ldr	r2, [r7, #4]
 801799c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801799e:	69b8      	ldr	r0, [r7, #24]
 80179a0:	f000 f906 	bl	8017bb0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80179a4:	4b1e      	ldr	r3, [pc, #120]	@ (8017a20 <pvPortMalloc+0x198>)
 80179a6:	681a      	ldr	r2, [r3, #0]
 80179a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179aa:	685b      	ldr	r3, [r3, #4]
 80179ac:	1ad3      	subs	r3, r2, r3
 80179ae:	4a1c      	ldr	r2, [pc, #112]	@ (8017a20 <pvPortMalloc+0x198>)
 80179b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80179b2:	4b1b      	ldr	r3, [pc, #108]	@ (8017a20 <pvPortMalloc+0x198>)
 80179b4:	681a      	ldr	r2, [r3, #0]
 80179b6:	4b1c      	ldr	r3, [pc, #112]	@ (8017a28 <pvPortMalloc+0x1a0>)
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	429a      	cmp	r2, r3
 80179bc:	d203      	bcs.n	80179c6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80179be:	4b18      	ldr	r3, [pc, #96]	@ (8017a20 <pvPortMalloc+0x198>)
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	4a19      	ldr	r2, [pc, #100]	@ (8017a28 <pvPortMalloc+0x1a0>)
 80179c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80179c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179c8:	685a      	ldr	r2, [r3, #4]
 80179ca:	4b14      	ldr	r3, [pc, #80]	@ (8017a1c <pvPortMalloc+0x194>)
 80179cc:	681b      	ldr	r3, [r3, #0]
 80179ce:	431a      	orrs	r2, r3
 80179d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80179d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179d6:	2200      	movs	r2, #0
 80179d8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80179da:	f7ff f815 	bl	8016a08 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80179de:	69fb      	ldr	r3, [r7, #28]
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d101      	bne.n	80179e8 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80179e4:	f7ea faca 	bl	8001f7c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80179e8:	69fb      	ldr	r3, [r7, #28]
 80179ea:	f003 0307 	and.w	r3, r3, #7
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d00d      	beq.n	8017a0e <pvPortMalloc+0x186>
	__asm volatile
 80179f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80179f6:	b672      	cpsid	i
 80179f8:	f383 8811 	msr	BASEPRI, r3
 80179fc:	f3bf 8f6f 	isb	sy
 8017a00:	f3bf 8f4f 	dsb	sy
 8017a04:	b662      	cpsie	i
 8017a06:	60fb      	str	r3, [r7, #12]
}
 8017a08:	bf00      	nop
 8017a0a:	bf00      	nop
 8017a0c:	e7fd      	b.n	8017a0a <pvPortMalloc+0x182>
	return pvReturn;
 8017a0e:	69fb      	ldr	r3, [r7, #28]
}
 8017a10:	4618      	mov	r0, r3
 8017a12:	3728      	adds	r7, #40	@ 0x28
 8017a14:	46bd      	mov	sp, r7
 8017a16:	bd80      	pop	{r7, pc}
 8017a18:	20011eb4 	.word	0x20011eb4
 8017a1c:	20011ec0 	.word	0x20011ec0
 8017a20:	20011eb8 	.word	0x20011eb8
 8017a24:	20011eac 	.word	0x20011eac
 8017a28:	20011ebc 	.word	0x20011ebc

08017a2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017a2c:	b580      	push	{r7, lr}
 8017a2e:	b086      	sub	sp, #24
 8017a30:	af00      	add	r7, sp, #0
 8017a32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d04e      	beq.n	8017adc <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8017a3e:	2308      	movs	r3, #8
 8017a40:	425b      	negs	r3, r3
 8017a42:	697a      	ldr	r2, [r7, #20]
 8017a44:	4413      	add	r3, r2
 8017a46:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017a48:	697b      	ldr	r3, [r7, #20]
 8017a4a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017a4c:	693b      	ldr	r3, [r7, #16]
 8017a4e:	685a      	ldr	r2, [r3, #4]
 8017a50:	4b24      	ldr	r3, [pc, #144]	@ (8017ae4 <vPortFree+0xb8>)
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	4013      	ands	r3, r2
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d10d      	bne.n	8017a76 <vPortFree+0x4a>
	__asm volatile
 8017a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017a5e:	b672      	cpsid	i
 8017a60:	f383 8811 	msr	BASEPRI, r3
 8017a64:	f3bf 8f6f 	isb	sy
 8017a68:	f3bf 8f4f 	dsb	sy
 8017a6c:	b662      	cpsie	i
 8017a6e:	60fb      	str	r3, [r7, #12]
}
 8017a70:	bf00      	nop
 8017a72:	bf00      	nop
 8017a74:	e7fd      	b.n	8017a72 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017a76:	693b      	ldr	r3, [r7, #16]
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	d00d      	beq.n	8017a9a <vPortFree+0x6e>
	__asm volatile
 8017a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017a82:	b672      	cpsid	i
 8017a84:	f383 8811 	msr	BASEPRI, r3
 8017a88:	f3bf 8f6f 	isb	sy
 8017a8c:	f3bf 8f4f 	dsb	sy
 8017a90:	b662      	cpsie	i
 8017a92:	60bb      	str	r3, [r7, #8]
}
 8017a94:	bf00      	nop
 8017a96:	bf00      	nop
 8017a98:	e7fd      	b.n	8017a96 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8017a9a:	693b      	ldr	r3, [r7, #16]
 8017a9c:	685a      	ldr	r2, [r3, #4]
 8017a9e:	4b11      	ldr	r3, [pc, #68]	@ (8017ae4 <vPortFree+0xb8>)
 8017aa0:	681b      	ldr	r3, [r3, #0]
 8017aa2:	4013      	ands	r3, r2
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d019      	beq.n	8017adc <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8017aa8:	693b      	ldr	r3, [r7, #16]
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d115      	bne.n	8017adc <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017ab0:	693b      	ldr	r3, [r7, #16]
 8017ab2:	685a      	ldr	r2, [r3, #4]
 8017ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8017ae4 <vPortFree+0xb8>)
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	43db      	mvns	r3, r3
 8017aba:	401a      	ands	r2, r3
 8017abc:	693b      	ldr	r3, [r7, #16]
 8017abe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017ac0:	f7fe ff94 	bl	80169ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017ac4:	693b      	ldr	r3, [r7, #16]
 8017ac6:	685a      	ldr	r2, [r3, #4]
 8017ac8:	4b07      	ldr	r3, [pc, #28]	@ (8017ae8 <vPortFree+0xbc>)
 8017aca:	681b      	ldr	r3, [r3, #0]
 8017acc:	4413      	add	r3, r2
 8017ace:	4a06      	ldr	r2, [pc, #24]	@ (8017ae8 <vPortFree+0xbc>)
 8017ad0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017ad2:	6938      	ldr	r0, [r7, #16]
 8017ad4:	f000 f86c 	bl	8017bb0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8017ad8:	f7fe ff96 	bl	8016a08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8017adc:	bf00      	nop
 8017ade:	3718      	adds	r7, #24
 8017ae0:	46bd      	mov	sp, r7
 8017ae2:	bd80      	pop	{r7, pc}
 8017ae4:	20011ec0 	.word	0x20011ec0
 8017ae8:	20011eb8 	.word	0x20011eb8

08017aec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017aec:	b480      	push	{r7}
 8017aee:	b085      	sub	sp, #20
 8017af0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017af2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8017af6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8017af8:	4b27      	ldr	r3, [pc, #156]	@ (8017b98 <prvHeapInit+0xac>)
 8017afa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017afc:	68fb      	ldr	r3, [r7, #12]
 8017afe:	f003 0307 	and.w	r3, r3, #7
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d00c      	beq.n	8017b20 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017b06:	68fb      	ldr	r3, [r7, #12]
 8017b08:	3307      	adds	r3, #7
 8017b0a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017b0c:	68fb      	ldr	r3, [r7, #12]
 8017b0e:	f023 0307 	bic.w	r3, r3, #7
 8017b12:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017b14:	68ba      	ldr	r2, [r7, #8]
 8017b16:	68fb      	ldr	r3, [r7, #12]
 8017b18:	1ad3      	subs	r3, r2, r3
 8017b1a:	4a1f      	ldr	r2, [pc, #124]	@ (8017b98 <prvHeapInit+0xac>)
 8017b1c:	4413      	add	r3, r2
 8017b1e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017b20:	68fb      	ldr	r3, [r7, #12]
 8017b22:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017b24:	4a1d      	ldr	r2, [pc, #116]	@ (8017b9c <prvHeapInit+0xb0>)
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8017b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8017b9c <prvHeapInit+0xb0>)
 8017b2c:	2200      	movs	r2, #0
 8017b2e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	68ba      	ldr	r2, [r7, #8]
 8017b34:	4413      	add	r3, r2
 8017b36:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8017b38:	2208      	movs	r2, #8
 8017b3a:	68fb      	ldr	r3, [r7, #12]
 8017b3c:	1a9b      	subs	r3, r3, r2
 8017b3e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	f023 0307 	bic.w	r3, r3, #7
 8017b46:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8017b48:	68fb      	ldr	r3, [r7, #12]
 8017b4a:	4a15      	ldr	r2, [pc, #84]	@ (8017ba0 <prvHeapInit+0xb4>)
 8017b4c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017b4e:	4b14      	ldr	r3, [pc, #80]	@ (8017ba0 <prvHeapInit+0xb4>)
 8017b50:	681b      	ldr	r3, [r3, #0]
 8017b52:	2200      	movs	r2, #0
 8017b54:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8017b56:	4b12      	ldr	r3, [pc, #72]	@ (8017ba0 <prvHeapInit+0xb4>)
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	2200      	movs	r2, #0
 8017b5c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017b62:	683b      	ldr	r3, [r7, #0]
 8017b64:	68fa      	ldr	r2, [r7, #12]
 8017b66:	1ad2      	subs	r2, r2, r3
 8017b68:	683b      	ldr	r3, [r7, #0]
 8017b6a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8017b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8017ba0 <prvHeapInit+0xb4>)
 8017b6e:	681a      	ldr	r2, [r3, #0]
 8017b70:	683b      	ldr	r3, [r7, #0]
 8017b72:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017b74:	683b      	ldr	r3, [r7, #0]
 8017b76:	685b      	ldr	r3, [r3, #4]
 8017b78:	4a0a      	ldr	r2, [pc, #40]	@ (8017ba4 <prvHeapInit+0xb8>)
 8017b7a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017b7c:	683b      	ldr	r3, [r7, #0]
 8017b7e:	685b      	ldr	r3, [r3, #4]
 8017b80:	4a09      	ldr	r2, [pc, #36]	@ (8017ba8 <prvHeapInit+0xbc>)
 8017b82:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017b84:	4b09      	ldr	r3, [pc, #36]	@ (8017bac <prvHeapInit+0xc0>)
 8017b86:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8017b8a:	601a      	str	r2, [r3, #0]
}
 8017b8c:	bf00      	nop
 8017b8e:	3714      	adds	r7, #20
 8017b90:	46bd      	mov	sp, r7
 8017b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b96:	4770      	bx	lr
 8017b98:	20001eac 	.word	0x20001eac
 8017b9c:	20011eac 	.word	0x20011eac
 8017ba0:	20011eb4 	.word	0x20011eb4
 8017ba4:	20011ebc 	.word	0x20011ebc
 8017ba8:	20011eb8 	.word	0x20011eb8
 8017bac:	20011ec0 	.word	0x20011ec0

08017bb0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017bb0:	b480      	push	{r7}
 8017bb2:	b085      	sub	sp, #20
 8017bb4:	af00      	add	r7, sp, #0
 8017bb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017bb8:	4b28      	ldr	r3, [pc, #160]	@ (8017c5c <prvInsertBlockIntoFreeList+0xac>)
 8017bba:	60fb      	str	r3, [r7, #12]
 8017bbc:	e002      	b.n	8017bc4 <prvInsertBlockIntoFreeList+0x14>
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	681b      	ldr	r3, [r3, #0]
 8017bc2:	60fb      	str	r3, [r7, #12]
 8017bc4:	68fb      	ldr	r3, [r7, #12]
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	687a      	ldr	r2, [r7, #4]
 8017bca:	429a      	cmp	r2, r3
 8017bcc:	d8f7      	bhi.n	8017bbe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017bce:	68fb      	ldr	r3, [r7, #12]
 8017bd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017bd2:	68fb      	ldr	r3, [r7, #12]
 8017bd4:	685b      	ldr	r3, [r3, #4]
 8017bd6:	68ba      	ldr	r2, [r7, #8]
 8017bd8:	4413      	add	r3, r2
 8017bda:	687a      	ldr	r2, [r7, #4]
 8017bdc:	429a      	cmp	r2, r3
 8017bde:	d108      	bne.n	8017bf2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	685a      	ldr	r2, [r3, #4]
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	685b      	ldr	r3, [r3, #4]
 8017be8:	441a      	add	r2, r3
 8017bea:	68fb      	ldr	r3, [r7, #12]
 8017bec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017bee:	68fb      	ldr	r3, [r7, #12]
 8017bf0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	685b      	ldr	r3, [r3, #4]
 8017bfa:	68ba      	ldr	r2, [r7, #8]
 8017bfc:	441a      	add	r2, r3
 8017bfe:	68fb      	ldr	r3, [r7, #12]
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	429a      	cmp	r2, r3
 8017c04:	d118      	bne.n	8017c38 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8017c06:	68fb      	ldr	r3, [r7, #12]
 8017c08:	681a      	ldr	r2, [r3, #0]
 8017c0a:	4b15      	ldr	r3, [pc, #84]	@ (8017c60 <prvInsertBlockIntoFreeList+0xb0>)
 8017c0c:	681b      	ldr	r3, [r3, #0]
 8017c0e:	429a      	cmp	r2, r3
 8017c10:	d00d      	beq.n	8017c2e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	685a      	ldr	r2, [r3, #4]
 8017c16:	68fb      	ldr	r3, [r7, #12]
 8017c18:	681b      	ldr	r3, [r3, #0]
 8017c1a:	685b      	ldr	r3, [r3, #4]
 8017c1c:	441a      	add	r2, r3
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017c22:	68fb      	ldr	r3, [r7, #12]
 8017c24:	681b      	ldr	r3, [r3, #0]
 8017c26:	681a      	ldr	r2, [r3, #0]
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	601a      	str	r2, [r3, #0]
 8017c2c:	e008      	b.n	8017c40 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8017c60 <prvInsertBlockIntoFreeList+0xb0>)
 8017c30:	681a      	ldr	r2, [r3, #0]
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	601a      	str	r2, [r3, #0]
 8017c36:	e003      	b.n	8017c40 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017c38:	68fb      	ldr	r3, [r7, #12]
 8017c3a:	681a      	ldr	r2, [r3, #0]
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017c40:	68fa      	ldr	r2, [r7, #12]
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	429a      	cmp	r2, r3
 8017c46:	d002      	beq.n	8017c4e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017c48:	68fb      	ldr	r3, [r7, #12]
 8017c4a:	687a      	ldr	r2, [r7, #4]
 8017c4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017c4e:	bf00      	nop
 8017c50:	3714      	adds	r7, #20
 8017c52:	46bd      	mov	sp, r7
 8017c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c58:	4770      	bx	lr
 8017c5a:	bf00      	nop
 8017c5c:	20011eac 	.word	0x20011eac
 8017c60:	20011eb4 	.word	0x20011eb4

08017c64 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8017c64:	b580      	push	{r7, lr}
 8017c66:	b082      	sub	sp, #8
 8017c68:	af00      	add	r7, sp, #0
 8017c6a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8017c72:	4618      	mov	r0, r3
 8017c74:	f7fa fe36 	bl	80128e4 <USBH_LL_IncTimer>
}
 8017c78:	bf00      	nop
 8017c7a:	3708      	adds	r7, #8
 8017c7c:	46bd      	mov	sp, r7
 8017c7e:	bd80      	pop	{r7, pc}

08017c80 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8017c80:	b580      	push	{r7, lr}
 8017c82:	b082      	sub	sp, #8
 8017c84:	af00      	add	r7, sp, #0
 8017c86:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8017c8e:	4618      	mov	r0, r3
 8017c90:	f7fa fe76 	bl	8012980 <USBH_LL_Connect>
}
 8017c94:	bf00      	nop
 8017c96:	3708      	adds	r7, #8
 8017c98:	46bd      	mov	sp, r7
 8017c9a:	bd80      	pop	{r7, pc}

08017c9c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8017c9c:	b580      	push	{r7, lr}
 8017c9e:	b082      	sub	sp, #8
 8017ca0:	af00      	add	r7, sp, #0
 8017ca2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8017caa:	4618      	mov	r0, r3
 8017cac:	f7fa fe83 	bl	80129b6 <USBH_LL_Disconnect>
}
 8017cb0:	bf00      	nop
 8017cb2:	3708      	adds	r7, #8
 8017cb4:	46bd      	mov	sp, r7
 8017cb6:	bd80      	pop	{r7, pc}

08017cb8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8017cb8:	b580      	push	{r7, lr}
 8017cba:	b082      	sub	sp, #8
 8017cbc:	af00      	add	r7, sp, #0
 8017cbe:	6078      	str	r0, [r7, #4]
 8017cc0:	460b      	mov	r3, r1
 8017cc2:	70fb      	strb	r3, [r7, #3]
 8017cc4:	4613      	mov	r3, r2
 8017cc6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8017cce:	4618      	mov	r0, r3
 8017cd0:	f7fa fec2 	bl	8012a58 <USBH_LL_NotifyURBChange>
#endif
}
 8017cd4:	bf00      	nop
 8017cd6:	3708      	adds	r7, #8
 8017cd8:	46bd      	mov	sp, r7
 8017cda:	bd80      	pop	{r7, pc}

08017cdc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8017cdc:	b580      	push	{r7, lr}
 8017cde:	b082      	sub	sp, #8
 8017ce0:	af00      	add	r7, sp, #0
 8017ce2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8017cea:	4618      	mov	r0, r3
 8017cec:	f7fa fe24 	bl	8012938 <USBH_LL_PortEnabled>
}
 8017cf0:	bf00      	nop
 8017cf2:	3708      	adds	r7, #8
 8017cf4:	46bd      	mov	sp, r7
 8017cf6:	bd80      	pop	{r7, pc}

08017cf8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8017cf8:	b580      	push	{r7, lr}
 8017cfa:	b082      	sub	sp, #8
 8017cfc:	af00      	add	r7, sp, #0
 8017cfe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8017d06:	4618      	mov	r0, r3
 8017d08:	f7fa fe28 	bl	801295c <USBH_LL_PortDisabled>
}
 8017d0c:	bf00      	nop
 8017d0e:	3708      	adds	r7, #8
 8017d10:	46bd      	mov	sp, r7
 8017d12:	bd80      	pop	{r7, pc}

08017d14 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8017d14:	b580      	push	{r7, lr}
 8017d16:	b084      	sub	sp, #16
 8017d18:	af00      	add	r7, sp, #0
 8017d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d1c:	2300      	movs	r3, #0
 8017d1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017d20:	2300      	movs	r3, #0
 8017d22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8017d2a:	4618      	mov	r0, r3
 8017d2c:	f7f1 f86d 	bl	8008e0a <HAL_HCD_Stop>
 8017d30:	4603      	mov	r3, r0
 8017d32:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017d34:	7bfb      	ldrb	r3, [r7, #15]
 8017d36:	4618      	mov	r0, r3
 8017d38:	f000 f808 	bl	8017d4c <USBH_Get_USB_Status>
 8017d3c:	4603      	mov	r3, r0
 8017d3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017d40:	7bbb      	ldrb	r3, [r7, #14]
}
 8017d42:	4618      	mov	r0, r3
 8017d44:	3710      	adds	r7, #16
 8017d46:	46bd      	mov	sp, r7
 8017d48:	bd80      	pop	{r7, pc}
	...

08017d4c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017d4c:	b480      	push	{r7}
 8017d4e:	b085      	sub	sp, #20
 8017d50:	af00      	add	r7, sp, #0
 8017d52:	4603      	mov	r3, r0
 8017d54:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017d56:	2300      	movs	r3, #0
 8017d58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017d5a:	79fb      	ldrb	r3, [r7, #7]
 8017d5c:	2b03      	cmp	r3, #3
 8017d5e:	d817      	bhi.n	8017d90 <USBH_Get_USB_Status+0x44>
 8017d60:	a201      	add	r2, pc, #4	@ (adr r2, 8017d68 <USBH_Get_USB_Status+0x1c>)
 8017d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017d66:	bf00      	nop
 8017d68:	08017d79 	.word	0x08017d79
 8017d6c:	08017d7f 	.word	0x08017d7f
 8017d70:	08017d85 	.word	0x08017d85
 8017d74:	08017d8b 	.word	0x08017d8b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8017d78:	2300      	movs	r3, #0
 8017d7a:	73fb      	strb	r3, [r7, #15]
    break;
 8017d7c:	e00b      	b.n	8017d96 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8017d7e:	2302      	movs	r3, #2
 8017d80:	73fb      	strb	r3, [r7, #15]
    break;
 8017d82:	e008      	b.n	8017d96 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8017d84:	2301      	movs	r3, #1
 8017d86:	73fb      	strb	r3, [r7, #15]
    break;
 8017d88:	e005      	b.n	8017d96 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8017d8a:	2302      	movs	r3, #2
 8017d8c:	73fb      	strb	r3, [r7, #15]
    break;
 8017d8e:	e002      	b.n	8017d96 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8017d90:	2302      	movs	r3, #2
 8017d92:	73fb      	strb	r3, [r7, #15]
    break;
 8017d94:	bf00      	nop
  }
  return usb_status;
 8017d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d98:	4618      	mov	r0, r3
 8017d9a:	3714      	adds	r7, #20
 8017d9c:	46bd      	mov	sp, r7
 8017d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017da2:	4770      	bx	lr

08017da4 <sbrk_aligned>:
 8017da4:	b570      	push	{r4, r5, r6, lr}
 8017da6:	4e0f      	ldr	r6, [pc, #60]	@ (8017de4 <sbrk_aligned+0x40>)
 8017da8:	460c      	mov	r4, r1
 8017daa:	6831      	ldr	r1, [r6, #0]
 8017dac:	4605      	mov	r5, r0
 8017dae:	b911      	cbnz	r1, 8017db6 <sbrk_aligned+0x12>
 8017db0:	f000 faf2 	bl	8018398 <_sbrk_r>
 8017db4:	6030      	str	r0, [r6, #0]
 8017db6:	4621      	mov	r1, r4
 8017db8:	4628      	mov	r0, r5
 8017dba:	f000 faed 	bl	8018398 <_sbrk_r>
 8017dbe:	1c43      	adds	r3, r0, #1
 8017dc0:	d103      	bne.n	8017dca <sbrk_aligned+0x26>
 8017dc2:	f04f 34ff 	mov.w	r4, #4294967295
 8017dc6:	4620      	mov	r0, r4
 8017dc8:	bd70      	pop	{r4, r5, r6, pc}
 8017dca:	1cc4      	adds	r4, r0, #3
 8017dcc:	f024 0403 	bic.w	r4, r4, #3
 8017dd0:	42a0      	cmp	r0, r4
 8017dd2:	d0f8      	beq.n	8017dc6 <sbrk_aligned+0x22>
 8017dd4:	1a21      	subs	r1, r4, r0
 8017dd6:	4628      	mov	r0, r5
 8017dd8:	f000 fade 	bl	8018398 <_sbrk_r>
 8017ddc:	3001      	adds	r0, #1
 8017dde:	d1f2      	bne.n	8017dc6 <sbrk_aligned+0x22>
 8017de0:	e7ef      	b.n	8017dc2 <sbrk_aligned+0x1e>
 8017de2:	bf00      	nop
 8017de4:	200122a4 	.word	0x200122a4

08017de8 <_malloc_r>:
 8017de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017dec:	1ccd      	adds	r5, r1, #3
 8017dee:	f025 0503 	bic.w	r5, r5, #3
 8017df2:	3508      	adds	r5, #8
 8017df4:	2d0c      	cmp	r5, #12
 8017df6:	bf38      	it	cc
 8017df8:	250c      	movcc	r5, #12
 8017dfa:	2d00      	cmp	r5, #0
 8017dfc:	4606      	mov	r6, r0
 8017dfe:	db01      	blt.n	8017e04 <_malloc_r+0x1c>
 8017e00:	42a9      	cmp	r1, r5
 8017e02:	d904      	bls.n	8017e0e <_malloc_r+0x26>
 8017e04:	230c      	movs	r3, #12
 8017e06:	6033      	str	r3, [r6, #0]
 8017e08:	2000      	movs	r0, #0
 8017e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017e0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017ee4 <_malloc_r+0xfc>
 8017e12:	f000 f869 	bl	8017ee8 <__malloc_lock>
 8017e16:	f8d8 3000 	ldr.w	r3, [r8]
 8017e1a:	461c      	mov	r4, r3
 8017e1c:	bb44      	cbnz	r4, 8017e70 <_malloc_r+0x88>
 8017e1e:	4629      	mov	r1, r5
 8017e20:	4630      	mov	r0, r6
 8017e22:	f7ff ffbf 	bl	8017da4 <sbrk_aligned>
 8017e26:	1c43      	adds	r3, r0, #1
 8017e28:	4604      	mov	r4, r0
 8017e2a:	d158      	bne.n	8017ede <_malloc_r+0xf6>
 8017e2c:	f8d8 4000 	ldr.w	r4, [r8]
 8017e30:	4627      	mov	r7, r4
 8017e32:	2f00      	cmp	r7, #0
 8017e34:	d143      	bne.n	8017ebe <_malloc_r+0xd6>
 8017e36:	2c00      	cmp	r4, #0
 8017e38:	d04b      	beq.n	8017ed2 <_malloc_r+0xea>
 8017e3a:	6823      	ldr	r3, [r4, #0]
 8017e3c:	4639      	mov	r1, r7
 8017e3e:	4630      	mov	r0, r6
 8017e40:	eb04 0903 	add.w	r9, r4, r3
 8017e44:	f000 faa8 	bl	8018398 <_sbrk_r>
 8017e48:	4581      	cmp	r9, r0
 8017e4a:	d142      	bne.n	8017ed2 <_malloc_r+0xea>
 8017e4c:	6821      	ldr	r1, [r4, #0]
 8017e4e:	1a6d      	subs	r5, r5, r1
 8017e50:	4629      	mov	r1, r5
 8017e52:	4630      	mov	r0, r6
 8017e54:	f7ff ffa6 	bl	8017da4 <sbrk_aligned>
 8017e58:	3001      	adds	r0, #1
 8017e5a:	d03a      	beq.n	8017ed2 <_malloc_r+0xea>
 8017e5c:	6823      	ldr	r3, [r4, #0]
 8017e5e:	442b      	add	r3, r5
 8017e60:	6023      	str	r3, [r4, #0]
 8017e62:	f8d8 3000 	ldr.w	r3, [r8]
 8017e66:	685a      	ldr	r2, [r3, #4]
 8017e68:	bb62      	cbnz	r2, 8017ec4 <_malloc_r+0xdc>
 8017e6a:	f8c8 7000 	str.w	r7, [r8]
 8017e6e:	e00f      	b.n	8017e90 <_malloc_r+0xa8>
 8017e70:	6822      	ldr	r2, [r4, #0]
 8017e72:	1b52      	subs	r2, r2, r5
 8017e74:	d420      	bmi.n	8017eb8 <_malloc_r+0xd0>
 8017e76:	2a0b      	cmp	r2, #11
 8017e78:	d917      	bls.n	8017eaa <_malloc_r+0xc2>
 8017e7a:	1961      	adds	r1, r4, r5
 8017e7c:	42a3      	cmp	r3, r4
 8017e7e:	6025      	str	r5, [r4, #0]
 8017e80:	bf18      	it	ne
 8017e82:	6059      	strne	r1, [r3, #4]
 8017e84:	6863      	ldr	r3, [r4, #4]
 8017e86:	bf08      	it	eq
 8017e88:	f8c8 1000 	streq.w	r1, [r8]
 8017e8c:	5162      	str	r2, [r4, r5]
 8017e8e:	604b      	str	r3, [r1, #4]
 8017e90:	4630      	mov	r0, r6
 8017e92:	f000 f82f 	bl	8017ef4 <__malloc_unlock>
 8017e96:	f104 000b 	add.w	r0, r4, #11
 8017e9a:	1d23      	adds	r3, r4, #4
 8017e9c:	f020 0007 	bic.w	r0, r0, #7
 8017ea0:	1ac2      	subs	r2, r0, r3
 8017ea2:	bf1c      	itt	ne
 8017ea4:	1a1b      	subne	r3, r3, r0
 8017ea6:	50a3      	strne	r3, [r4, r2]
 8017ea8:	e7af      	b.n	8017e0a <_malloc_r+0x22>
 8017eaa:	6862      	ldr	r2, [r4, #4]
 8017eac:	42a3      	cmp	r3, r4
 8017eae:	bf0c      	ite	eq
 8017eb0:	f8c8 2000 	streq.w	r2, [r8]
 8017eb4:	605a      	strne	r2, [r3, #4]
 8017eb6:	e7eb      	b.n	8017e90 <_malloc_r+0xa8>
 8017eb8:	4623      	mov	r3, r4
 8017eba:	6864      	ldr	r4, [r4, #4]
 8017ebc:	e7ae      	b.n	8017e1c <_malloc_r+0x34>
 8017ebe:	463c      	mov	r4, r7
 8017ec0:	687f      	ldr	r7, [r7, #4]
 8017ec2:	e7b6      	b.n	8017e32 <_malloc_r+0x4a>
 8017ec4:	461a      	mov	r2, r3
 8017ec6:	685b      	ldr	r3, [r3, #4]
 8017ec8:	42a3      	cmp	r3, r4
 8017eca:	d1fb      	bne.n	8017ec4 <_malloc_r+0xdc>
 8017ecc:	2300      	movs	r3, #0
 8017ece:	6053      	str	r3, [r2, #4]
 8017ed0:	e7de      	b.n	8017e90 <_malloc_r+0xa8>
 8017ed2:	230c      	movs	r3, #12
 8017ed4:	6033      	str	r3, [r6, #0]
 8017ed6:	4630      	mov	r0, r6
 8017ed8:	f000 f80c 	bl	8017ef4 <__malloc_unlock>
 8017edc:	e794      	b.n	8017e08 <_malloc_r+0x20>
 8017ede:	6005      	str	r5, [r0, #0]
 8017ee0:	e7d6      	b.n	8017e90 <_malloc_r+0xa8>
 8017ee2:	bf00      	nop
 8017ee4:	200122a8 	.word	0x200122a8

08017ee8 <__malloc_lock>:
 8017ee8:	4801      	ldr	r0, [pc, #4]	@ (8017ef0 <__malloc_lock+0x8>)
 8017eea:	f000 baa2 	b.w	8018432 <__retarget_lock_acquire_recursive>
 8017eee:	bf00      	nop
 8017ef0:	200123ec 	.word	0x200123ec

08017ef4 <__malloc_unlock>:
 8017ef4:	4801      	ldr	r0, [pc, #4]	@ (8017efc <__malloc_unlock+0x8>)
 8017ef6:	f000 ba9d 	b.w	8018434 <__retarget_lock_release_recursive>
 8017efa:	bf00      	nop
 8017efc:	200123ec 	.word	0x200123ec

08017f00 <std>:
 8017f00:	2300      	movs	r3, #0
 8017f02:	b510      	push	{r4, lr}
 8017f04:	4604      	mov	r4, r0
 8017f06:	e9c0 3300 	strd	r3, r3, [r0]
 8017f0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017f0e:	6083      	str	r3, [r0, #8]
 8017f10:	8181      	strh	r1, [r0, #12]
 8017f12:	6643      	str	r3, [r0, #100]	@ 0x64
 8017f14:	81c2      	strh	r2, [r0, #14]
 8017f16:	6183      	str	r3, [r0, #24]
 8017f18:	4619      	mov	r1, r3
 8017f1a:	2208      	movs	r2, #8
 8017f1c:	305c      	adds	r0, #92	@ 0x5c
 8017f1e:	f000 f9c9 	bl	80182b4 <memset>
 8017f22:	4b0d      	ldr	r3, [pc, #52]	@ (8017f58 <std+0x58>)
 8017f24:	6263      	str	r3, [r4, #36]	@ 0x24
 8017f26:	4b0d      	ldr	r3, [pc, #52]	@ (8017f5c <std+0x5c>)
 8017f28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8017f60 <std+0x60>)
 8017f2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8017f64 <std+0x64>)
 8017f30:	6323      	str	r3, [r4, #48]	@ 0x30
 8017f32:	4b0d      	ldr	r3, [pc, #52]	@ (8017f68 <std+0x68>)
 8017f34:	6224      	str	r4, [r4, #32]
 8017f36:	429c      	cmp	r4, r3
 8017f38:	d006      	beq.n	8017f48 <std+0x48>
 8017f3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017f3e:	4294      	cmp	r4, r2
 8017f40:	d002      	beq.n	8017f48 <std+0x48>
 8017f42:	33d0      	adds	r3, #208	@ 0xd0
 8017f44:	429c      	cmp	r4, r3
 8017f46:	d105      	bne.n	8017f54 <std+0x54>
 8017f48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f50:	f000 ba6e 	b.w	8018430 <__retarget_lock_init_recursive>
 8017f54:	bd10      	pop	{r4, pc}
 8017f56:	bf00      	nop
 8017f58:	080181b1 	.word	0x080181b1
 8017f5c:	080181d7 	.word	0x080181d7
 8017f60:	0801820f 	.word	0x0801820f
 8017f64:	08018233 	.word	0x08018233
 8017f68:	200122ac 	.word	0x200122ac

08017f6c <stdio_exit_handler>:
 8017f6c:	4a02      	ldr	r2, [pc, #8]	@ (8017f78 <stdio_exit_handler+0xc>)
 8017f6e:	4903      	ldr	r1, [pc, #12]	@ (8017f7c <stdio_exit_handler+0x10>)
 8017f70:	4803      	ldr	r0, [pc, #12]	@ (8017f80 <stdio_exit_handler+0x14>)
 8017f72:	f000 b869 	b.w	8018048 <_fwalk_sglue>
 8017f76:	bf00      	nop
 8017f78:	2000007c 	.word	0x2000007c
 8017f7c:	08019479 	.word	0x08019479
 8017f80:	2000008c 	.word	0x2000008c

08017f84 <cleanup_stdio>:
 8017f84:	6841      	ldr	r1, [r0, #4]
 8017f86:	4b0c      	ldr	r3, [pc, #48]	@ (8017fb8 <cleanup_stdio+0x34>)
 8017f88:	4299      	cmp	r1, r3
 8017f8a:	b510      	push	{r4, lr}
 8017f8c:	4604      	mov	r4, r0
 8017f8e:	d001      	beq.n	8017f94 <cleanup_stdio+0x10>
 8017f90:	f001 fa72 	bl	8019478 <_fflush_r>
 8017f94:	68a1      	ldr	r1, [r4, #8]
 8017f96:	4b09      	ldr	r3, [pc, #36]	@ (8017fbc <cleanup_stdio+0x38>)
 8017f98:	4299      	cmp	r1, r3
 8017f9a:	d002      	beq.n	8017fa2 <cleanup_stdio+0x1e>
 8017f9c:	4620      	mov	r0, r4
 8017f9e:	f001 fa6b 	bl	8019478 <_fflush_r>
 8017fa2:	68e1      	ldr	r1, [r4, #12]
 8017fa4:	4b06      	ldr	r3, [pc, #24]	@ (8017fc0 <cleanup_stdio+0x3c>)
 8017fa6:	4299      	cmp	r1, r3
 8017fa8:	d004      	beq.n	8017fb4 <cleanup_stdio+0x30>
 8017faa:	4620      	mov	r0, r4
 8017fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017fb0:	f001 ba62 	b.w	8019478 <_fflush_r>
 8017fb4:	bd10      	pop	{r4, pc}
 8017fb6:	bf00      	nop
 8017fb8:	200122ac 	.word	0x200122ac
 8017fbc:	20012314 	.word	0x20012314
 8017fc0:	2001237c 	.word	0x2001237c

08017fc4 <global_stdio_init.part.0>:
 8017fc4:	b510      	push	{r4, lr}
 8017fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8017ff4 <global_stdio_init.part.0+0x30>)
 8017fc8:	4c0b      	ldr	r4, [pc, #44]	@ (8017ff8 <global_stdio_init.part.0+0x34>)
 8017fca:	4a0c      	ldr	r2, [pc, #48]	@ (8017ffc <global_stdio_init.part.0+0x38>)
 8017fcc:	601a      	str	r2, [r3, #0]
 8017fce:	4620      	mov	r0, r4
 8017fd0:	2200      	movs	r2, #0
 8017fd2:	2104      	movs	r1, #4
 8017fd4:	f7ff ff94 	bl	8017f00 <std>
 8017fd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017fdc:	2201      	movs	r2, #1
 8017fde:	2109      	movs	r1, #9
 8017fe0:	f7ff ff8e 	bl	8017f00 <std>
 8017fe4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017fe8:	2202      	movs	r2, #2
 8017fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017fee:	2112      	movs	r1, #18
 8017ff0:	f7ff bf86 	b.w	8017f00 <std>
 8017ff4:	200123e4 	.word	0x200123e4
 8017ff8:	200122ac 	.word	0x200122ac
 8017ffc:	08017f6d 	.word	0x08017f6d

08018000 <__sfp_lock_acquire>:
 8018000:	4801      	ldr	r0, [pc, #4]	@ (8018008 <__sfp_lock_acquire+0x8>)
 8018002:	f000 ba16 	b.w	8018432 <__retarget_lock_acquire_recursive>
 8018006:	bf00      	nop
 8018008:	200123ed 	.word	0x200123ed

0801800c <__sfp_lock_release>:
 801800c:	4801      	ldr	r0, [pc, #4]	@ (8018014 <__sfp_lock_release+0x8>)
 801800e:	f000 ba11 	b.w	8018434 <__retarget_lock_release_recursive>
 8018012:	bf00      	nop
 8018014:	200123ed 	.word	0x200123ed

08018018 <__sinit>:
 8018018:	b510      	push	{r4, lr}
 801801a:	4604      	mov	r4, r0
 801801c:	f7ff fff0 	bl	8018000 <__sfp_lock_acquire>
 8018020:	6a23      	ldr	r3, [r4, #32]
 8018022:	b11b      	cbz	r3, 801802c <__sinit+0x14>
 8018024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018028:	f7ff bff0 	b.w	801800c <__sfp_lock_release>
 801802c:	4b04      	ldr	r3, [pc, #16]	@ (8018040 <__sinit+0x28>)
 801802e:	6223      	str	r3, [r4, #32]
 8018030:	4b04      	ldr	r3, [pc, #16]	@ (8018044 <__sinit+0x2c>)
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	2b00      	cmp	r3, #0
 8018036:	d1f5      	bne.n	8018024 <__sinit+0xc>
 8018038:	f7ff ffc4 	bl	8017fc4 <global_stdio_init.part.0>
 801803c:	e7f2      	b.n	8018024 <__sinit+0xc>
 801803e:	bf00      	nop
 8018040:	08017f85 	.word	0x08017f85
 8018044:	200123e4 	.word	0x200123e4

08018048 <_fwalk_sglue>:
 8018048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801804c:	4607      	mov	r7, r0
 801804e:	4688      	mov	r8, r1
 8018050:	4614      	mov	r4, r2
 8018052:	2600      	movs	r6, #0
 8018054:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018058:	f1b9 0901 	subs.w	r9, r9, #1
 801805c:	d505      	bpl.n	801806a <_fwalk_sglue+0x22>
 801805e:	6824      	ldr	r4, [r4, #0]
 8018060:	2c00      	cmp	r4, #0
 8018062:	d1f7      	bne.n	8018054 <_fwalk_sglue+0xc>
 8018064:	4630      	mov	r0, r6
 8018066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801806a:	89ab      	ldrh	r3, [r5, #12]
 801806c:	2b01      	cmp	r3, #1
 801806e:	d907      	bls.n	8018080 <_fwalk_sglue+0x38>
 8018070:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018074:	3301      	adds	r3, #1
 8018076:	d003      	beq.n	8018080 <_fwalk_sglue+0x38>
 8018078:	4629      	mov	r1, r5
 801807a:	4638      	mov	r0, r7
 801807c:	47c0      	blx	r8
 801807e:	4306      	orrs	r6, r0
 8018080:	3568      	adds	r5, #104	@ 0x68
 8018082:	e7e9      	b.n	8018058 <_fwalk_sglue+0x10>

08018084 <iprintf>:
 8018084:	b40f      	push	{r0, r1, r2, r3}
 8018086:	b507      	push	{r0, r1, r2, lr}
 8018088:	4906      	ldr	r1, [pc, #24]	@ (80180a4 <iprintf+0x20>)
 801808a:	ab04      	add	r3, sp, #16
 801808c:	6808      	ldr	r0, [r1, #0]
 801808e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018092:	6881      	ldr	r1, [r0, #8]
 8018094:	9301      	str	r3, [sp, #4]
 8018096:	f000 fd79 	bl	8018b8c <_vfiprintf_r>
 801809a:	b003      	add	sp, #12
 801809c:	f85d eb04 	ldr.w	lr, [sp], #4
 80180a0:	b004      	add	sp, #16
 80180a2:	4770      	bx	lr
 80180a4:	20000088 	.word	0x20000088

080180a8 <sniprintf>:
 80180a8:	b40c      	push	{r2, r3}
 80180aa:	b530      	push	{r4, r5, lr}
 80180ac:	4b18      	ldr	r3, [pc, #96]	@ (8018110 <sniprintf+0x68>)
 80180ae:	1e0c      	subs	r4, r1, #0
 80180b0:	681d      	ldr	r5, [r3, #0]
 80180b2:	b09d      	sub	sp, #116	@ 0x74
 80180b4:	da08      	bge.n	80180c8 <sniprintf+0x20>
 80180b6:	238b      	movs	r3, #139	@ 0x8b
 80180b8:	602b      	str	r3, [r5, #0]
 80180ba:	f04f 30ff 	mov.w	r0, #4294967295
 80180be:	b01d      	add	sp, #116	@ 0x74
 80180c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80180c4:	b002      	add	sp, #8
 80180c6:	4770      	bx	lr
 80180c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80180cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80180d0:	f04f 0300 	mov.w	r3, #0
 80180d4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80180d6:	bf14      	ite	ne
 80180d8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80180dc:	4623      	moveq	r3, r4
 80180de:	9304      	str	r3, [sp, #16]
 80180e0:	9307      	str	r3, [sp, #28]
 80180e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80180e6:	9002      	str	r0, [sp, #8]
 80180e8:	9006      	str	r0, [sp, #24]
 80180ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 80180ee:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80180f0:	ab21      	add	r3, sp, #132	@ 0x84
 80180f2:	a902      	add	r1, sp, #8
 80180f4:	4628      	mov	r0, r5
 80180f6:	9301      	str	r3, [sp, #4]
 80180f8:	f000 fa52 	bl	80185a0 <_svfiprintf_r>
 80180fc:	1c43      	adds	r3, r0, #1
 80180fe:	bfbc      	itt	lt
 8018100:	238b      	movlt	r3, #139	@ 0x8b
 8018102:	602b      	strlt	r3, [r5, #0]
 8018104:	2c00      	cmp	r4, #0
 8018106:	d0da      	beq.n	80180be <sniprintf+0x16>
 8018108:	9b02      	ldr	r3, [sp, #8]
 801810a:	2200      	movs	r2, #0
 801810c:	701a      	strb	r2, [r3, #0]
 801810e:	e7d6      	b.n	80180be <sniprintf+0x16>
 8018110:	20000088 	.word	0x20000088

08018114 <siprintf>:
 8018114:	b40e      	push	{r1, r2, r3}
 8018116:	b510      	push	{r4, lr}
 8018118:	b09d      	sub	sp, #116	@ 0x74
 801811a:	ab1f      	add	r3, sp, #124	@ 0x7c
 801811c:	9002      	str	r0, [sp, #8]
 801811e:	9006      	str	r0, [sp, #24]
 8018120:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018124:	480a      	ldr	r0, [pc, #40]	@ (8018150 <siprintf+0x3c>)
 8018126:	9107      	str	r1, [sp, #28]
 8018128:	9104      	str	r1, [sp, #16]
 801812a:	490a      	ldr	r1, [pc, #40]	@ (8018154 <siprintf+0x40>)
 801812c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018130:	9105      	str	r1, [sp, #20]
 8018132:	2400      	movs	r4, #0
 8018134:	a902      	add	r1, sp, #8
 8018136:	6800      	ldr	r0, [r0, #0]
 8018138:	9301      	str	r3, [sp, #4]
 801813a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801813c:	f000 fa30 	bl	80185a0 <_svfiprintf_r>
 8018140:	9b02      	ldr	r3, [sp, #8]
 8018142:	701c      	strb	r4, [r3, #0]
 8018144:	b01d      	add	sp, #116	@ 0x74
 8018146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801814a:	b003      	add	sp, #12
 801814c:	4770      	bx	lr
 801814e:	bf00      	nop
 8018150:	20000088 	.word	0x20000088
 8018154:	ffff0208 	.word	0xffff0208

08018158 <siscanf>:
 8018158:	b40e      	push	{r1, r2, r3}
 801815a:	b570      	push	{r4, r5, r6, lr}
 801815c:	b09d      	sub	sp, #116	@ 0x74
 801815e:	ac21      	add	r4, sp, #132	@ 0x84
 8018160:	2500      	movs	r5, #0
 8018162:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8018166:	f854 6b04 	ldr.w	r6, [r4], #4
 801816a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801816e:	951b      	str	r5, [sp, #108]	@ 0x6c
 8018170:	9002      	str	r0, [sp, #8]
 8018172:	9006      	str	r0, [sp, #24]
 8018174:	f7e8 f856 	bl	8000224 <strlen>
 8018178:	4b0b      	ldr	r3, [pc, #44]	@ (80181a8 <siscanf+0x50>)
 801817a:	9003      	str	r0, [sp, #12]
 801817c:	9007      	str	r0, [sp, #28]
 801817e:	480b      	ldr	r0, [pc, #44]	@ (80181ac <siscanf+0x54>)
 8018180:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018182:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018186:	f8ad 3016 	strh.w	r3, [sp, #22]
 801818a:	4632      	mov	r2, r6
 801818c:	4623      	mov	r3, r4
 801818e:	a902      	add	r1, sp, #8
 8018190:	6800      	ldr	r0, [r0, #0]
 8018192:	950f      	str	r5, [sp, #60]	@ 0x3c
 8018194:	9514      	str	r5, [sp, #80]	@ 0x50
 8018196:	9401      	str	r4, [sp, #4]
 8018198:	f000 fb58 	bl	801884c <__ssvfiscanf_r>
 801819c:	b01d      	add	sp, #116	@ 0x74
 801819e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80181a2:	b003      	add	sp, #12
 80181a4:	4770      	bx	lr
 80181a6:	bf00      	nop
 80181a8:	080181d3 	.word	0x080181d3
 80181ac:	20000088 	.word	0x20000088

080181b0 <__sread>:
 80181b0:	b510      	push	{r4, lr}
 80181b2:	460c      	mov	r4, r1
 80181b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181b8:	f000 f8dc 	bl	8018374 <_read_r>
 80181bc:	2800      	cmp	r0, #0
 80181be:	bfab      	itete	ge
 80181c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80181c2:	89a3      	ldrhlt	r3, [r4, #12]
 80181c4:	181b      	addge	r3, r3, r0
 80181c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80181ca:	bfac      	ite	ge
 80181cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80181ce:	81a3      	strhlt	r3, [r4, #12]
 80181d0:	bd10      	pop	{r4, pc}

080181d2 <__seofread>:
 80181d2:	2000      	movs	r0, #0
 80181d4:	4770      	bx	lr

080181d6 <__swrite>:
 80181d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181da:	461f      	mov	r7, r3
 80181dc:	898b      	ldrh	r3, [r1, #12]
 80181de:	05db      	lsls	r3, r3, #23
 80181e0:	4605      	mov	r5, r0
 80181e2:	460c      	mov	r4, r1
 80181e4:	4616      	mov	r6, r2
 80181e6:	d505      	bpl.n	80181f4 <__swrite+0x1e>
 80181e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181ec:	2302      	movs	r3, #2
 80181ee:	2200      	movs	r2, #0
 80181f0:	f000 f8ae 	bl	8018350 <_lseek_r>
 80181f4:	89a3      	ldrh	r3, [r4, #12]
 80181f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80181fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80181fe:	81a3      	strh	r3, [r4, #12]
 8018200:	4632      	mov	r2, r6
 8018202:	463b      	mov	r3, r7
 8018204:	4628      	mov	r0, r5
 8018206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801820a:	f000 b8d5 	b.w	80183b8 <_write_r>

0801820e <__sseek>:
 801820e:	b510      	push	{r4, lr}
 8018210:	460c      	mov	r4, r1
 8018212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018216:	f000 f89b 	bl	8018350 <_lseek_r>
 801821a:	1c43      	adds	r3, r0, #1
 801821c:	89a3      	ldrh	r3, [r4, #12]
 801821e:	bf15      	itete	ne
 8018220:	6560      	strne	r0, [r4, #84]	@ 0x54
 8018222:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8018226:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801822a:	81a3      	strheq	r3, [r4, #12]
 801822c:	bf18      	it	ne
 801822e:	81a3      	strhne	r3, [r4, #12]
 8018230:	bd10      	pop	{r4, pc}

08018232 <__sclose>:
 8018232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018236:	f000 b87b 	b.w	8018330 <_close_r>

0801823a <_vsniprintf_r>:
 801823a:	b530      	push	{r4, r5, lr}
 801823c:	4614      	mov	r4, r2
 801823e:	2c00      	cmp	r4, #0
 8018240:	b09b      	sub	sp, #108	@ 0x6c
 8018242:	4605      	mov	r5, r0
 8018244:	461a      	mov	r2, r3
 8018246:	da05      	bge.n	8018254 <_vsniprintf_r+0x1a>
 8018248:	238b      	movs	r3, #139	@ 0x8b
 801824a:	6003      	str	r3, [r0, #0]
 801824c:	f04f 30ff 	mov.w	r0, #4294967295
 8018250:	b01b      	add	sp, #108	@ 0x6c
 8018252:	bd30      	pop	{r4, r5, pc}
 8018254:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8018258:	f8ad 300c 	strh.w	r3, [sp, #12]
 801825c:	f04f 0300 	mov.w	r3, #0
 8018260:	9319      	str	r3, [sp, #100]	@ 0x64
 8018262:	bf14      	ite	ne
 8018264:	f104 33ff 	addne.w	r3, r4, #4294967295
 8018268:	4623      	moveq	r3, r4
 801826a:	9302      	str	r3, [sp, #8]
 801826c:	9305      	str	r3, [sp, #20]
 801826e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018272:	9100      	str	r1, [sp, #0]
 8018274:	9104      	str	r1, [sp, #16]
 8018276:	f8ad 300e 	strh.w	r3, [sp, #14]
 801827a:	4669      	mov	r1, sp
 801827c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801827e:	f000 f98f 	bl	80185a0 <_svfiprintf_r>
 8018282:	1c43      	adds	r3, r0, #1
 8018284:	bfbc      	itt	lt
 8018286:	238b      	movlt	r3, #139	@ 0x8b
 8018288:	602b      	strlt	r3, [r5, #0]
 801828a:	2c00      	cmp	r4, #0
 801828c:	d0e0      	beq.n	8018250 <_vsniprintf_r+0x16>
 801828e:	9b00      	ldr	r3, [sp, #0]
 8018290:	2200      	movs	r2, #0
 8018292:	701a      	strb	r2, [r3, #0]
 8018294:	e7dc      	b.n	8018250 <_vsniprintf_r+0x16>
	...

08018298 <vsniprintf>:
 8018298:	b507      	push	{r0, r1, r2, lr}
 801829a:	9300      	str	r3, [sp, #0]
 801829c:	4613      	mov	r3, r2
 801829e:	460a      	mov	r2, r1
 80182a0:	4601      	mov	r1, r0
 80182a2:	4803      	ldr	r0, [pc, #12]	@ (80182b0 <vsniprintf+0x18>)
 80182a4:	6800      	ldr	r0, [r0, #0]
 80182a6:	f7ff ffc8 	bl	801823a <_vsniprintf_r>
 80182aa:	b003      	add	sp, #12
 80182ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80182b0:	20000088 	.word	0x20000088

080182b4 <memset>:
 80182b4:	4402      	add	r2, r0
 80182b6:	4603      	mov	r3, r0
 80182b8:	4293      	cmp	r3, r2
 80182ba:	d100      	bne.n	80182be <memset+0xa>
 80182bc:	4770      	bx	lr
 80182be:	f803 1b01 	strb.w	r1, [r3], #1
 80182c2:	e7f9      	b.n	80182b8 <memset+0x4>

080182c4 <strchr>:
 80182c4:	b2c9      	uxtb	r1, r1
 80182c6:	4603      	mov	r3, r0
 80182c8:	4618      	mov	r0, r3
 80182ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80182ce:	b112      	cbz	r2, 80182d6 <strchr+0x12>
 80182d0:	428a      	cmp	r2, r1
 80182d2:	d1f9      	bne.n	80182c8 <strchr+0x4>
 80182d4:	4770      	bx	lr
 80182d6:	2900      	cmp	r1, #0
 80182d8:	bf18      	it	ne
 80182da:	2000      	movne	r0, #0
 80182dc:	4770      	bx	lr

080182de <strncpy>:
 80182de:	b510      	push	{r4, lr}
 80182e0:	3901      	subs	r1, #1
 80182e2:	4603      	mov	r3, r0
 80182e4:	b132      	cbz	r2, 80182f4 <strncpy+0x16>
 80182e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80182ea:	f803 4b01 	strb.w	r4, [r3], #1
 80182ee:	3a01      	subs	r2, #1
 80182f0:	2c00      	cmp	r4, #0
 80182f2:	d1f7      	bne.n	80182e4 <strncpy+0x6>
 80182f4:	441a      	add	r2, r3
 80182f6:	2100      	movs	r1, #0
 80182f8:	4293      	cmp	r3, r2
 80182fa:	d100      	bne.n	80182fe <strncpy+0x20>
 80182fc:	bd10      	pop	{r4, pc}
 80182fe:	f803 1b01 	strb.w	r1, [r3], #1
 8018302:	e7f9      	b.n	80182f8 <strncpy+0x1a>

08018304 <strstr>:
 8018304:	780a      	ldrb	r2, [r1, #0]
 8018306:	b570      	push	{r4, r5, r6, lr}
 8018308:	b96a      	cbnz	r2, 8018326 <strstr+0x22>
 801830a:	bd70      	pop	{r4, r5, r6, pc}
 801830c:	429a      	cmp	r2, r3
 801830e:	d109      	bne.n	8018324 <strstr+0x20>
 8018310:	460c      	mov	r4, r1
 8018312:	4605      	mov	r5, r0
 8018314:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8018318:	2b00      	cmp	r3, #0
 801831a:	d0f6      	beq.n	801830a <strstr+0x6>
 801831c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8018320:	429e      	cmp	r6, r3
 8018322:	d0f7      	beq.n	8018314 <strstr+0x10>
 8018324:	3001      	adds	r0, #1
 8018326:	7803      	ldrb	r3, [r0, #0]
 8018328:	2b00      	cmp	r3, #0
 801832a:	d1ef      	bne.n	801830c <strstr+0x8>
 801832c:	4618      	mov	r0, r3
 801832e:	e7ec      	b.n	801830a <strstr+0x6>

08018330 <_close_r>:
 8018330:	b538      	push	{r3, r4, r5, lr}
 8018332:	4d06      	ldr	r5, [pc, #24]	@ (801834c <_close_r+0x1c>)
 8018334:	2300      	movs	r3, #0
 8018336:	4604      	mov	r4, r0
 8018338:	4608      	mov	r0, r1
 801833a:	602b      	str	r3, [r5, #0]
 801833c:	f7ed f91d 	bl	800557a <_close>
 8018340:	1c43      	adds	r3, r0, #1
 8018342:	d102      	bne.n	801834a <_close_r+0x1a>
 8018344:	682b      	ldr	r3, [r5, #0]
 8018346:	b103      	cbz	r3, 801834a <_close_r+0x1a>
 8018348:	6023      	str	r3, [r4, #0]
 801834a:	bd38      	pop	{r3, r4, r5, pc}
 801834c:	200123e8 	.word	0x200123e8

08018350 <_lseek_r>:
 8018350:	b538      	push	{r3, r4, r5, lr}
 8018352:	4d07      	ldr	r5, [pc, #28]	@ (8018370 <_lseek_r+0x20>)
 8018354:	4604      	mov	r4, r0
 8018356:	4608      	mov	r0, r1
 8018358:	4611      	mov	r1, r2
 801835a:	2200      	movs	r2, #0
 801835c:	602a      	str	r2, [r5, #0]
 801835e:	461a      	mov	r2, r3
 8018360:	f7ed f932 	bl	80055c8 <_lseek>
 8018364:	1c43      	adds	r3, r0, #1
 8018366:	d102      	bne.n	801836e <_lseek_r+0x1e>
 8018368:	682b      	ldr	r3, [r5, #0]
 801836a:	b103      	cbz	r3, 801836e <_lseek_r+0x1e>
 801836c:	6023      	str	r3, [r4, #0]
 801836e:	bd38      	pop	{r3, r4, r5, pc}
 8018370:	200123e8 	.word	0x200123e8

08018374 <_read_r>:
 8018374:	b538      	push	{r3, r4, r5, lr}
 8018376:	4d07      	ldr	r5, [pc, #28]	@ (8018394 <_read_r+0x20>)
 8018378:	4604      	mov	r4, r0
 801837a:	4608      	mov	r0, r1
 801837c:	4611      	mov	r1, r2
 801837e:	2200      	movs	r2, #0
 8018380:	602a      	str	r2, [r5, #0]
 8018382:	461a      	mov	r2, r3
 8018384:	f7ed f8c0 	bl	8005508 <_read>
 8018388:	1c43      	adds	r3, r0, #1
 801838a:	d102      	bne.n	8018392 <_read_r+0x1e>
 801838c:	682b      	ldr	r3, [r5, #0]
 801838e:	b103      	cbz	r3, 8018392 <_read_r+0x1e>
 8018390:	6023      	str	r3, [r4, #0]
 8018392:	bd38      	pop	{r3, r4, r5, pc}
 8018394:	200123e8 	.word	0x200123e8

08018398 <_sbrk_r>:
 8018398:	b538      	push	{r3, r4, r5, lr}
 801839a:	4d06      	ldr	r5, [pc, #24]	@ (80183b4 <_sbrk_r+0x1c>)
 801839c:	2300      	movs	r3, #0
 801839e:	4604      	mov	r4, r0
 80183a0:	4608      	mov	r0, r1
 80183a2:	602b      	str	r3, [r5, #0]
 80183a4:	f7ed f91e 	bl	80055e4 <_sbrk>
 80183a8:	1c43      	adds	r3, r0, #1
 80183aa:	d102      	bne.n	80183b2 <_sbrk_r+0x1a>
 80183ac:	682b      	ldr	r3, [r5, #0]
 80183ae:	b103      	cbz	r3, 80183b2 <_sbrk_r+0x1a>
 80183b0:	6023      	str	r3, [r4, #0]
 80183b2:	bd38      	pop	{r3, r4, r5, pc}
 80183b4:	200123e8 	.word	0x200123e8

080183b8 <_write_r>:
 80183b8:	b538      	push	{r3, r4, r5, lr}
 80183ba:	4d07      	ldr	r5, [pc, #28]	@ (80183d8 <_write_r+0x20>)
 80183bc:	4604      	mov	r4, r0
 80183be:	4608      	mov	r0, r1
 80183c0:	4611      	mov	r1, r2
 80183c2:	2200      	movs	r2, #0
 80183c4:	602a      	str	r2, [r5, #0]
 80183c6:	461a      	mov	r2, r3
 80183c8:	f7ed f8bb 	bl	8005542 <_write>
 80183cc:	1c43      	adds	r3, r0, #1
 80183ce:	d102      	bne.n	80183d6 <_write_r+0x1e>
 80183d0:	682b      	ldr	r3, [r5, #0]
 80183d2:	b103      	cbz	r3, 80183d6 <_write_r+0x1e>
 80183d4:	6023      	str	r3, [r4, #0]
 80183d6:	bd38      	pop	{r3, r4, r5, pc}
 80183d8:	200123e8 	.word	0x200123e8

080183dc <__errno>:
 80183dc:	4b01      	ldr	r3, [pc, #4]	@ (80183e4 <__errno+0x8>)
 80183de:	6818      	ldr	r0, [r3, #0]
 80183e0:	4770      	bx	lr
 80183e2:	bf00      	nop
 80183e4:	20000088 	.word	0x20000088

080183e8 <__libc_init_array>:
 80183e8:	b570      	push	{r4, r5, r6, lr}
 80183ea:	4d0d      	ldr	r5, [pc, #52]	@ (8018420 <__libc_init_array+0x38>)
 80183ec:	4c0d      	ldr	r4, [pc, #52]	@ (8018424 <__libc_init_array+0x3c>)
 80183ee:	1b64      	subs	r4, r4, r5
 80183f0:	10a4      	asrs	r4, r4, #2
 80183f2:	2600      	movs	r6, #0
 80183f4:	42a6      	cmp	r6, r4
 80183f6:	d109      	bne.n	801840c <__libc_init_array+0x24>
 80183f8:	4d0b      	ldr	r5, [pc, #44]	@ (8018428 <__libc_init_array+0x40>)
 80183fa:	4c0c      	ldr	r4, [pc, #48]	@ (801842c <__libc_init_array+0x44>)
 80183fc:	f001 fb2c 	bl	8019a58 <_init>
 8018400:	1b64      	subs	r4, r4, r5
 8018402:	10a4      	asrs	r4, r4, #2
 8018404:	2600      	movs	r6, #0
 8018406:	42a6      	cmp	r6, r4
 8018408:	d105      	bne.n	8018416 <__libc_init_array+0x2e>
 801840a:	bd70      	pop	{r4, r5, r6, pc}
 801840c:	f855 3b04 	ldr.w	r3, [r5], #4
 8018410:	4798      	blx	r3
 8018412:	3601      	adds	r6, #1
 8018414:	e7ee      	b.n	80183f4 <__libc_init_array+0xc>
 8018416:	f855 3b04 	ldr.w	r3, [r5], #4
 801841a:	4798      	blx	r3
 801841c:	3601      	adds	r6, #1
 801841e:	e7f2      	b.n	8018406 <__libc_init_array+0x1e>
 8018420:	0801d674 	.word	0x0801d674
 8018424:	0801d674 	.word	0x0801d674
 8018428:	0801d674 	.word	0x0801d674
 801842c:	0801d678 	.word	0x0801d678

08018430 <__retarget_lock_init_recursive>:
 8018430:	4770      	bx	lr

08018432 <__retarget_lock_acquire_recursive>:
 8018432:	4770      	bx	lr

08018434 <__retarget_lock_release_recursive>:
 8018434:	4770      	bx	lr

08018436 <memcpy>:
 8018436:	440a      	add	r2, r1
 8018438:	4291      	cmp	r1, r2
 801843a:	f100 33ff 	add.w	r3, r0, #4294967295
 801843e:	d100      	bne.n	8018442 <memcpy+0xc>
 8018440:	4770      	bx	lr
 8018442:	b510      	push	{r4, lr}
 8018444:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018448:	f803 4f01 	strb.w	r4, [r3, #1]!
 801844c:	4291      	cmp	r1, r2
 801844e:	d1f9      	bne.n	8018444 <memcpy+0xe>
 8018450:	bd10      	pop	{r4, pc}
	...

08018454 <_free_r>:
 8018454:	b538      	push	{r3, r4, r5, lr}
 8018456:	4605      	mov	r5, r0
 8018458:	2900      	cmp	r1, #0
 801845a:	d041      	beq.n	80184e0 <_free_r+0x8c>
 801845c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018460:	1f0c      	subs	r4, r1, #4
 8018462:	2b00      	cmp	r3, #0
 8018464:	bfb8      	it	lt
 8018466:	18e4      	addlt	r4, r4, r3
 8018468:	f7ff fd3e 	bl	8017ee8 <__malloc_lock>
 801846c:	4a1d      	ldr	r2, [pc, #116]	@ (80184e4 <_free_r+0x90>)
 801846e:	6813      	ldr	r3, [r2, #0]
 8018470:	b933      	cbnz	r3, 8018480 <_free_r+0x2c>
 8018472:	6063      	str	r3, [r4, #4]
 8018474:	6014      	str	r4, [r2, #0]
 8018476:	4628      	mov	r0, r5
 8018478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801847c:	f7ff bd3a 	b.w	8017ef4 <__malloc_unlock>
 8018480:	42a3      	cmp	r3, r4
 8018482:	d908      	bls.n	8018496 <_free_r+0x42>
 8018484:	6820      	ldr	r0, [r4, #0]
 8018486:	1821      	adds	r1, r4, r0
 8018488:	428b      	cmp	r3, r1
 801848a:	bf01      	itttt	eq
 801848c:	6819      	ldreq	r1, [r3, #0]
 801848e:	685b      	ldreq	r3, [r3, #4]
 8018490:	1809      	addeq	r1, r1, r0
 8018492:	6021      	streq	r1, [r4, #0]
 8018494:	e7ed      	b.n	8018472 <_free_r+0x1e>
 8018496:	461a      	mov	r2, r3
 8018498:	685b      	ldr	r3, [r3, #4]
 801849a:	b10b      	cbz	r3, 80184a0 <_free_r+0x4c>
 801849c:	42a3      	cmp	r3, r4
 801849e:	d9fa      	bls.n	8018496 <_free_r+0x42>
 80184a0:	6811      	ldr	r1, [r2, #0]
 80184a2:	1850      	adds	r0, r2, r1
 80184a4:	42a0      	cmp	r0, r4
 80184a6:	d10b      	bne.n	80184c0 <_free_r+0x6c>
 80184a8:	6820      	ldr	r0, [r4, #0]
 80184aa:	4401      	add	r1, r0
 80184ac:	1850      	adds	r0, r2, r1
 80184ae:	4283      	cmp	r3, r0
 80184b0:	6011      	str	r1, [r2, #0]
 80184b2:	d1e0      	bne.n	8018476 <_free_r+0x22>
 80184b4:	6818      	ldr	r0, [r3, #0]
 80184b6:	685b      	ldr	r3, [r3, #4]
 80184b8:	6053      	str	r3, [r2, #4]
 80184ba:	4408      	add	r0, r1
 80184bc:	6010      	str	r0, [r2, #0]
 80184be:	e7da      	b.n	8018476 <_free_r+0x22>
 80184c0:	d902      	bls.n	80184c8 <_free_r+0x74>
 80184c2:	230c      	movs	r3, #12
 80184c4:	602b      	str	r3, [r5, #0]
 80184c6:	e7d6      	b.n	8018476 <_free_r+0x22>
 80184c8:	6820      	ldr	r0, [r4, #0]
 80184ca:	1821      	adds	r1, r4, r0
 80184cc:	428b      	cmp	r3, r1
 80184ce:	bf04      	itt	eq
 80184d0:	6819      	ldreq	r1, [r3, #0]
 80184d2:	685b      	ldreq	r3, [r3, #4]
 80184d4:	6063      	str	r3, [r4, #4]
 80184d6:	bf04      	itt	eq
 80184d8:	1809      	addeq	r1, r1, r0
 80184da:	6021      	streq	r1, [r4, #0]
 80184dc:	6054      	str	r4, [r2, #4]
 80184de:	e7ca      	b.n	8018476 <_free_r+0x22>
 80184e0:	bd38      	pop	{r3, r4, r5, pc}
 80184e2:	bf00      	nop
 80184e4:	200122a8 	.word	0x200122a8

080184e8 <__ssputs_r>:
 80184e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80184ec:	688e      	ldr	r6, [r1, #8]
 80184ee:	461f      	mov	r7, r3
 80184f0:	42be      	cmp	r6, r7
 80184f2:	680b      	ldr	r3, [r1, #0]
 80184f4:	4682      	mov	sl, r0
 80184f6:	460c      	mov	r4, r1
 80184f8:	4690      	mov	r8, r2
 80184fa:	d82d      	bhi.n	8018558 <__ssputs_r+0x70>
 80184fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018500:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8018504:	d026      	beq.n	8018554 <__ssputs_r+0x6c>
 8018506:	6965      	ldr	r5, [r4, #20]
 8018508:	6909      	ldr	r1, [r1, #16]
 801850a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801850e:	eba3 0901 	sub.w	r9, r3, r1
 8018512:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018516:	1c7b      	adds	r3, r7, #1
 8018518:	444b      	add	r3, r9
 801851a:	106d      	asrs	r5, r5, #1
 801851c:	429d      	cmp	r5, r3
 801851e:	bf38      	it	cc
 8018520:	461d      	movcc	r5, r3
 8018522:	0553      	lsls	r3, r2, #21
 8018524:	d527      	bpl.n	8018576 <__ssputs_r+0x8e>
 8018526:	4629      	mov	r1, r5
 8018528:	f7ff fc5e 	bl	8017de8 <_malloc_r>
 801852c:	4606      	mov	r6, r0
 801852e:	b360      	cbz	r0, 801858a <__ssputs_r+0xa2>
 8018530:	6921      	ldr	r1, [r4, #16]
 8018532:	464a      	mov	r2, r9
 8018534:	f7ff ff7f 	bl	8018436 <memcpy>
 8018538:	89a3      	ldrh	r3, [r4, #12]
 801853a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801853e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018542:	81a3      	strh	r3, [r4, #12]
 8018544:	6126      	str	r6, [r4, #16]
 8018546:	6165      	str	r5, [r4, #20]
 8018548:	444e      	add	r6, r9
 801854a:	eba5 0509 	sub.w	r5, r5, r9
 801854e:	6026      	str	r6, [r4, #0]
 8018550:	60a5      	str	r5, [r4, #8]
 8018552:	463e      	mov	r6, r7
 8018554:	42be      	cmp	r6, r7
 8018556:	d900      	bls.n	801855a <__ssputs_r+0x72>
 8018558:	463e      	mov	r6, r7
 801855a:	6820      	ldr	r0, [r4, #0]
 801855c:	4632      	mov	r2, r6
 801855e:	4641      	mov	r1, r8
 8018560:	f001 f8ba 	bl	80196d8 <memmove>
 8018564:	68a3      	ldr	r3, [r4, #8]
 8018566:	1b9b      	subs	r3, r3, r6
 8018568:	60a3      	str	r3, [r4, #8]
 801856a:	6823      	ldr	r3, [r4, #0]
 801856c:	4433      	add	r3, r6
 801856e:	6023      	str	r3, [r4, #0]
 8018570:	2000      	movs	r0, #0
 8018572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018576:	462a      	mov	r2, r5
 8018578:	f001 f8c8 	bl	801970c <_realloc_r>
 801857c:	4606      	mov	r6, r0
 801857e:	2800      	cmp	r0, #0
 8018580:	d1e0      	bne.n	8018544 <__ssputs_r+0x5c>
 8018582:	6921      	ldr	r1, [r4, #16]
 8018584:	4650      	mov	r0, sl
 8018586:	f7ff ff65 	bl	8018454 <_free_r>
 801858a:	230c      	movs	r3, #12
 801858c:	f8ca 3000 	str.w	r3, [sl]
 8018590:	89a3      	ldrh	r3, [r4, #12]
 8018592:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018596:	81a3      	strh	r3, [r4, #12]
 8018598:	f04f 30ff 	mov.w	r0, #4294967295
 801859c:	e7e9      	b.n	8018572 <__ssputs_r+0x8a>
	...

080185a0 <_svfiprintf_r>:
 80185a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185a4:	4698      	mov	r8, r3
 80185a6:	898b      	ldrh	r3, [r1, #12]
 80185a8:	061b      	lsls	r3, r3, #24
 80185aa:	b09d      	sub	sp, #116	@ 0x74
 80185ac:	4607      	mov	r7, r0
 80185ae:	460d      	mov	r5, r1
 80185b0:	4614      	mov	r4, r2
 80185b2:	d510      	bpl.n	80185d6 <_svfiprintf_r+0x36>
 80185b4:	690b      	ldr	r3, [r1, #16]
 80185b6:	b973      	cbnz	r3, 80185d6 <_svfiprintf_r+0x36>
 80185b8:	2140      	movs	r1, #64	@ 0x40
 80185ba:	f7ff fc15 	bl	8017de8 <_malloc_r>
 80185be:	6028      	str	r0, [r5, #0]
 80185c0:	6128      	str	r0, [r5, #16]
 80185c2:	b930      	cbnz	r0, 80185d2 <_svfiprintf_r+0x32>
 80185c4:	230c      	movs	r3, #12
 80185c6:	603b      	str	r3, [r7, #0]
 80185c8:	f04f 30ff 	mov.w	r0, #4294967295
 80185cc:	b01d      	add	sp, #116	@ 0x74
 80185ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185d2:	2340      	movs	r3, #64	@ 0x40
 80185d4:	616b      	str	r3, [r5, #20]
 80185d6:	2300      	movs	r3, #0
 80185d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80185da:	2320      	movs	r3, #32
 80185dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80185e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80185e4:	2330      	movs	r3, #48	@ 0x30
 80185e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018784 <_svfiprintf_r+0x1e4>
 80185ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80185ee:	f04f 0901 	mov.w	r9, #1
 80185f2:	4623      	mov	r3, r4
 80185f4:	469a      	mov	sl, r3
 80185f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80185fa:	b10a      	cbz	r2, 8018600 <_svfiprintf_r+0x60>
 80185fc:	2a25      	cmp	r2, #37	@ 0x25
 80185fe:	d1f9      	bne.n	80185f4 <_svfiprintf_r+0x54>
 8018600:	ebba 0b04 	subs.w	fp, sl, r4
 8018604:	d00b      	beq.n	801861e <_svfiprintf_r+0x7e>
 8018606:	465b      	mov	r3, fp
 8018608:	4622      	mov	r2, r4
 801860a:	4629      	mov	r1, r5
 801860c:	4638      	mov	r0, r7
 801860e:	f7ff ff6b 	bl	80184e8 <__ssputs_r>
 8018612:	3001      	adds	r0, #1
 8018614:	f000 80a7 	beq.w	8018766 <_svfiprintf_r+0x1c6>
 8018618:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801861a:	445a      	add	r2, fp
 801861c:	9209      	str	r2, [sp, #36]	@ 0x24
 801861e:	f89a 3000 	ldrb.w	r3, [sl]
 8018622:	2b00      	cmp	r3, #0
 8018624:	f000 809f 	beq.w	8018766 <_svfiprintf_r+0x1c6>
 8018628:	2300      	movs	r3, #0
 801862a:	f04f 32ff 	mov.w	r2, #4294967295
 801862e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018632:	f10a 0a01 	add.w	sl, sl, #1
 8018636:	9304      	str	r3, [sp, #16]
 8018638:	9307      	str	r3, [sp, #28]
 801863a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801863e:	931a      	str	r3, [sp, #104]	@ 0x68
 8018640:	4654      	mov	r4, sl
 8018642:	2205      	movs	r2, #5
 8018644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018648:	484e      	ldr	r0, [pc, #312]	@ (8018784 <_svfiprintf_r+0x1e4>)
 801864a:	f7e7 fdf9 	bl	8000240 <memchr>
 801864e:	9a04      	ldr	r2, [sp, #16]
 8018650:	b9d8      	cbnz	r0, 801868a <_svfiprintf_r+0xea>
 8018652:	06d0      	lsls	r0, r2, #27
 8018654:	bf44      	itt	mi
 8018656:	2320      	movmi	r3, #32
 8018658:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801865c:	0711      	lsls	r1, r2, #28
 801865e:	bf44      	itt	mi
 8018660:	232b      	movmi	r3, #43	@ 0x2b
 8018662:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018666:	f89a 3000 	ldrb.w	r3, [sl]
 801866a:	2b2a      	cmp	r3, #42	@ 0x2a
 801866c:	d015      	beq.n	801869a <_svfiprintf_r+0xfa>
 801866e:	9a07      	ldr	r2, [sp, #28]
 8018670:	4654      	mov	r4, sl
 8018672:	2000      	movs	r0, #0
 8018674:	f04f 0c0a 	mov.w	ip, #10
 8018678:	4621      	mov	r1, r4
 801867a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801867e:	3b30      	subs	r3, #48	@ 0x30
 8018680:	2b09      	cmp	r3, #9
 8018682:	d94b      	bls.n	801871c <_svfiprintf_r+0x17c>
 8018684:	b1b0      	cbz	r0, 80186b4 <_svfiprintf_r+0x114>
 8018686:	9207      	str	r2, [sp, #28]
 8018688:	e014      	b.n	80186b4 <_svfiprintf_r+0x114>
 801868a:	eba0 0308 	sub.w	r3, r0, r8
 801868e:	fa09 f303 	lsl.w	r3, r9, r3
 8018692:	4313      	orrs	r3, r2
 8018694:	9304      	str	r3, [sp, #16]
 8018696:	46a2      	mov	sl, r4
 8018698:	e7d2      	b.n	8018640 <_svfiprintf_r+0xa0>
 801869a:	9b03      	ldr	r3, [sp, #12]
 801869c:	1d19      	adds	r1, r3, #4
 801869e:	681b      	ldr	r3, [r3, #0]
 80186a0:	9103      	str	r1, [sp, #12]
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	bfbb      	ittet	lt
 80186a6:	425b      	neglt	r3, r3
 80186a8:	f042 0202 	orrlt.w	r2, r2, #2
 80186ac:	9307      	strge	r3, [sp, #28]
 80186ae:	9307      	strlt	r3, [sp, #28]
 80186b0:	bfb8      	it	lt
 80186b2:	9204      	strlt	r2, [sp, #16]
 80186b4:	7823      	ldrb	r3, [r4, #0]
 80186b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80186b8:	d10a      	bne.n	80186d0 <_svfiprintf_r+0x130>
 80186ba:	7863      	ldrb	r3, [r4, #1]
 80186bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80186be:	d132      	bne.n	8018726 <_svfiprintf_r+0x186>
 80186c0:	9b03      	ldr	r3, [sp, #12]
 80186c2:	1d1a      	adds	r2, r3, #4
 80186c4:	681b      	ldr	r3, [r3, #0]
 80186c6:	9203      	str	r2, [sp, #12]
 80186c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80186cc:	3402      	adds	r4, #2
 80186ce:	9305      	str	r3, [sp, #20]
 80186d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018794 <_svfiprintf_r+0x1f4>
 80186d4:	7821      	ldrb	r1, [r4, #0]
 80186d6:	2203      	movs	r2, #3
 80186d8:	4650      	mov	r0, sl
 80186da:	f7e7 fdb1 	bl	8000240 <memchr>
 80186de:	b138      	cbz	r0, 80186f0 <_svfiprintf_r+0x150>
 80186e0:	9b04      	ldr	r3, [sp, #16]
 80186e2:	eba0 000a 	sub.w	r0, r0, sl
 80186e6:	2240      	movs	r2, #64	@ 0x40
 80186e8:	4082      	lsls	r2, r0
 80186ea:	4313      	orrs	r3, r2
 80186ec:	3401      	adds	r4, #1
 80186ee:	9304      	str	r3, [sp, #16]
 80186f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80186f4:	4824      	ldr	r0, [pc, #144]	@ (8018788 <_svfiprintf_r+0x1e8>)
 80186f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80186fa:	2206      	movs	r2, #6
 80186fc:	f7e7 fda0 	bl	8000240 <memchr>
 8018700:	2800      	cmp	r0, #0
 8018702:	d036      	beq.n	8018772 <_svfiprintf_r+0x1d2>
 8018704:	4b21      	ldr	r3, [pc, #132]	@ (801878c <_svfiprintf_r+0x1ec>)
 8018706:	bb1b      	cbnz	r3, 8018750 <_svfiprintf_r+0x1b0>
 8018708:	9b03      	ldr	r3, [sp, #12]
 801870a:	3307      	adds	r3, #7
 801870c:	f023 0307 	bic.w	r3, r3, #7
 8018710:	3308      	adds	r3, #8
 8018712:	9303      	str	r3, [sp, #12]
 8018714:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018716:	4433      	add	r3, r6
 8018718:	9309      	str	r3, [sp, #36]	@ 0x24
 801871a:	e76a      	b.n	80185f2 <_svfiprintf_r+0x52>
 801871c:	fb0c 3202 	mla	r2, ip, r2, r3
 8018720:	460c      	mov	r4, r1
 8018722:	2001      	movs	r0, #1
 8018724:	e7a8      	b.n	8018678 <_svfiprintf_r+0xd8>
 8018726:	2300      	movs	r3, #0
 8018728:	3401      	adds	r4, #1
 801872a:	9305      	str	r3, [sp, #20]
 801872c:	4619      	mov	r1, r3
 801872e:	f04f 0c0a 	mov.w	ip, #10
 8018732:	4620      	mov	r0, r4
 8018734:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018738:	3a30      	subs	r2, #48	@ 0x30
 801873a:	2a09      	cmp	r2, #9
 801873c:	d903      	bls.n	8018746 <_svfiprintf_r+0x1a6>
 801873e:	2b00      	cmp	r3, #0
 8018740:	d0c6      	beq.n	80186d0 <_svfiprintf_r+0x130>
 8018742:	9105      	str	r1, [sp, #20]
 8018744:	e7c4      	b.n	80186d0 <_svfiprintf_r+0x130>
 8018746:	fb0c 2101 	mla	r1, ip, r1, r2
 801874a:	4604      	mov	r4, r0
 801874c:	2301      	movs	r3, #1
 801874e:	e7f0      	b.n	8018732 <_svfiprintf_r+0x192>
 8018750:	ab03      	add	r3, sp, #12
 8018752:	9300      	str	r3, [sp, #0]
 8018754:	462a      	mov	r2, r5
 8018756:	4b0e      	ldr	r3, [pc, #56]	@ (8018790 <_svfiprintf_r+0x1f0>)
 8018758:	a904      	add	r1, sp, #16
 801875a:	4638      	mov	r0, r7
 801875c:	f3af 8000 	nop.w
 8018760:	1c42      	adds	r2, r0, #1
 8018762:	4606      	mov	r6, r0
 8018764:	d1d6      	bne.n	8018714 <_svfiprintf_r+0x174>
 8018766:	89ab      	ldrh	r3, [r5, #12]
 8018768:	065b      	lsls	r3, r3, #25
 801876a:	f53f af2d 	bmi.w	80185c8 <_svfiprintf_r+0x28>
 801876e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018770:	e72c      	b.n	80185cc <_svfiprintf_r+0x2c>
 8018772:	ab03      	add	r3, sp, #12
 8018774:	9300      	str	r3, [sp, #0]
 8018776:	462a      	mov	r2, r5
 8018778:	4b05      	ldr	r3, [pc, #20]	@ (8018790 <_svfiprintf_r+0x1f0>)
 801877a:	a904      	add	r1, sp, #16
 801877c:	4638      	mov	r0, r7
 801877e:	f000 fb8b 	bl	8018e98 <_printf_i>
 8018782:	e7ed      	b.n	8018760 <_svfiprintf_r+0x1c0>
 8018784:	0801d51a 	.word	0x0801d51a
 8018788:	0801d524 	.word	0x0801d524
 801878c:	00000000 	.word	0x00000000
 8018790:	080184e9 	.word	0x080184e9
 8018794:	0801d520 	.word	0x0801d520

08018798 <_sungetc_r>:
 8018798:	b538      	push	{r3, r4, r5, lr}
 801879a:	1c4b      	adds	r3, r1, #1
 801879c:	4614      	mov	r4, r2
 801879e:	d103      	bne.n	80187a8 <_sungetc_r+0x10>
 80187a0:	f04f 35ff 	mov.w	r5, #4294967295
 80187a4:	4628      	mov	r0, r5
 80187a6:	bd38      	pop	{r3, r4, r5, pc}
 80187a8:	8993      	ldrh	r3, [r2, #12]
 80187aa:	f023 0320 	bic.w	r3, r3, #32
 80187ae:	8193      	strh	r3, [r2, #12]
 80187b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80187b2:	6852      	ldr	r2, [r2, #4]
 80187b4:	b2cd      	uxtb	r5, r1
 80187b6:	b18b      	cbz	r3, 80187dc <_sungetc_r+0x44>
 80187b8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80187ba:	4293      	cmp	r3, r2
 80187bc:	dd08      	ble.n	80187d0 <_sungetc_r+0x38>
 80187be:	6823      	ldr	r3, [r4, #0]
 80187c0:	1e5a      	subs	r2, r3, #1
 80187c2:	6022      	str	r2, [r4, #0]
 80187c4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80187c8:	6863      	ldr	r3, [r4, #4]
 80187ca:	3301      	adds	r3, #1
 80187cc:	6063      	str	r3, [r4, #4]
 80187ce:	e7e9      	b.n	80187a4 <_sungetc_r+0xc>
 80187d0:	4621      	mov	r1, r4
 80187d2:	f000 feb2 	bl	801953a <__submore>
 80187d6:	2800      	cmp	r0, #0
 80187d8:	d0f1      	beq.n	80187be <_sungetc_r+0x26>
 80187da:	e7e1      	b.n	80187a0 <_sungetc_r+0x8>
 80187dc:	6921      	ldr	r1, [r4, #16]
 80187de:	6823      	ldr	r3, [r4, #0]
 80187e0:	b151      	cbz	r1, 80187f8 <_sungetc_r+0x60>
 80187e2:	4299      	cmp	r1, r3
 80187e4:	d208      	bcs.n	80187f8 <_sungetc_r+0x60>
 80187e6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80187ea:	42a9      	cmp	r1, r5
 80187ec:	d104      	bne.n	80187f8 <_sungetc_r+0x60>
 80187ee:	3b01      	subs	r3, #1
 80187f0:	3201      	adds	r2, #1
 80187f2:	6023      	str	r3, [r4, #0]
 80187f4:	6062      	str	r2, [r4, #4]
 80187f6:	e7d5      	b.n	80187a4 <_sungetc_r+0xc>
 80187f8:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80187fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018800:	6363      	str	r3, [r4, #52]	@ 0x34
 8018802:	2303      	movs	r3, #3
 8018804:	63a3      	str	r3, [r4, #56]	@ 0x38
 8018806:	4623      	mov	r3, r4
 8018808:	f803 5f46 	strb.w	r5, [r3, #70]!
 801880c:	6023      	str	r3, [r4, #0]
 801880e:	2301      	movs	r3, #1
 8018810:	e7dc      	b.n	80187cc <_sungetc_r+0x34>

08018812 <__ssrefill_r>:
 8018812:	b510      	push	{r4, lr}
 8018814:	460c      	mov	r4, r1
 8018816:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8018818:	b169      	cbz	r1, 8018836 <__ssrefill_r+0x24>
 801881a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801881e:	4299      	cmp	r1, r3
 8018820:	d001      	beq.n	8018826 <__ssrefill_r+0x14>
 8018822:	f7ff fe17 	bl	8018454 <_free_r>
 8018826:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018828:	6063      	str	r3, [r4, #4]
 801882a:	2000      	movs	r0, #0
 801882c:	6360      	str	r0, [r4, #52]	@ 0x34
 801882e:	b113      	cbz	r3, 8018836 <__ssrefill_r+0x24>
 8018830:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018832:	6023      	str	r3, [r4, #0]
 8018834:	bd10      	pop	{r4, pc}
 8018836:	6923      	ldr	r3, [r4, #16]
 8018838:	6023      	str	r3, [r4, #0]
 801883a:	2300      	movs	r3, #0
 801883c:	6063      	str	r3, [r4, #4]
 801883e:	89a3      	ldrh	r3, [r4, #12]
 8018840:	f043 0320 	orr.w	r3, r3, #32
 8018844:	81a3      	strh	r3, [r4, #12]
 8018846:	f04f 30ff 	mov.w	r0, #4294967295
 801884a:	e7f3      	b.n	8018834 <__ssrefill_r+0x22>

0801884c <__ssvfiscanf_r>:
 801884c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018850:	460c      	mov	r4, r1
 8018852:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8018856:	2100      	movs	r1, #0
 8018858:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801885c:	49a6      	ldr	r1, [pc, #664]	@ (8018af8 <__ssvfiscanf_r+0x2ac>)
 801885e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8018860:	f10d 0804 	add.w	r8, sp, #4
 8018864:	49a5      	ldr	r1, [pc, #660]	@ (8018afc <__ssvfiscanf_r+0x2b0>)
 8018866:	4fa6      	ldr	r7, [pc, #664]	@ (8018b00 <__ssvfiscanf_r+0x2b4>)
 8018868:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801886c:	4606      	mov	r6, r0
 801886e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8018870:	9300      	str	r3, [sp, #0]
 8018872:	f892 9000 	ldrb.w	r9, [r2]
 8018876:	f1b9 0f00 	cmp.w	r9, #0
 801887a:	f000 8158 	beq.w	8018b2e <__ssvfiscanf_r+0x2e2>
 801887e:	f817 3009 	ldrb.w	r3, [r7, r9]
 8018882:	f013 0308 	ands.w	r3, r3, #8
 8018886:	f102 0501 	add.w	r5, r2, #1
 801888a:	d019      	beq.n	80188c0 <__ssvfiscanf_r+0x74>
 801888c:	6863      	ldr	r3, [r4, #4]
 801888e:	2b00      	cmp	r3, #0
 8018890:	dd0f      	ble.n	80188b2 <__ssvfiscanf_r+0x66>
 8018892:	6823      	ldr	r3, [r4, #0]
 8018894:	781a      	ldrb	r2, [r3, #0]
 8018896:	5cba      	ldrb	r2, [r7, r2]
 8018898:	0712      	lsls	r2, r2, #28
 801889a:	d401      	bmi.n	80188a0 <__ssvfiscanf_r+0x54>
 801889c:	462a      	mov	r2, r5
 801889e:	e7e8      	b.n	8018872 <__ssvfiscanf_r+0x26>
 80188a0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80188a2:	3201      	adds	r2, #1
 80188a4:	9245      	str	r2, [sp, #276]	@ 0x114
 80188a6:	6862      	ldr	r2, [r4, #4]
 80188a8:	3301      	adds	r3, #1
 80188aa:	3a01      	subs	r2, #1
 80188ac:	6062      	str	r2, [r4, #4]
 80188ae:	6023      	str	r3, [r4, #0]
 80188b0:	e7ec      	b.n	801888c <__ssvfiscanf_r+0x40>
 80188b2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80188b4:	4621      	mov	r1, r4
 80188b6:	4630      	mov	r0, r6
 80188b8:	4798      	blx	r3
 80188ba:	2800      	cmp	r0, #0
 80188bc:	d0e9      	beq.n	8018892 <__ssvfiscanf_r+0x46>
 80188be:	e7ed      	b.n	801889c <__ssvfiscanf_r+0x50>
 80188c0:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80188c4:	f040 8085 	bne.w	80189d2 <__ssvfiscanf_r+0x186>
 80188c8:	9341      	str	r3, [sp, #260]	@ 0x104
 80188ca:	9343      	str	r3, [sp, #268]	@ 0x10c
 80188cc:	7853      	ldrb	r3, [r2, #1]
 80188ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80188d0:	bf02      	ittt	eq
 80188d2:	2310      	moveq	r3, #16
 80188d4:	1c95      	addeq	r5, r2, #2
 80188d6:	9341      	streq	r3, [sp, #260]	@ 0x104
 80188d8:	220a      	movs	r2, #10
 80188da:	46aa      	mov	sl, r5
 80188dc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80188e0:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80188e4:	2b09      	cmp	r3, #9
 80188e6:	d91e      	bls.n	8018926 <__ssvfiscanf_r+0xda>
 80188e8:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8018b04 <__ssvfiscanf_r+0x2b8>
 80188ec:	2203      	movs	r2, #3
 80188ee:	4658      	mov	r0, fp
 80188f0:	f7e7 fca6 	bl	8000240 <memchr>
 80188f4:	b138      	cbz	r0, 8018906 <__ssvfiscanf_r+0xba>
 80188f6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80188f8:	eba0 000b 	sub.w	r0, r0, fp
 80188fc:	2301      	movs	r3, #1
 80188fe:	4083      	lsls	r3, r0
 8018900:	4313      	orrs	r3, r2
 8018902:	9341      	str	r3, [sp, #260]	@ 0x104
 8018904:	4655      	mov	r5, sl
 8018906:	f815 3b01 	ldrb.w	r3, [r5], #1
 801890a:	2b78      	cmp	r3, #120	@ 0x78
 801890c:	d806      	bhi.n	801891c <__ssvfiscanf_r+0xd0>
 801890e:	2b57      	cmp	r3, #87	@ 0x57
 8018910:	d810      	bhi.n	8018934 <__ssvfiscanf_r+0xe8>
 8018912:	2b25      	cmp	r3, #37	@ 0x25
 8018914:	d05d      	beq.n	80189d2 <__ssvfiscanf_r+0x186>
 8018916:	d857      	bhi.n	80189c8 <__ssvfiscanf_r+0x17c>
 8018918:	2b00      	cmp	r3, #0
 801891a:	d075      	beq.n	8018a08 <__ssvfiscanf_r+0x1bc>
 801891c:	2303      	movs	r3, #3
 801891e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8018920:	230a      	movs	r3, #10
 8018922:	9342      	str	r3, [sp, #264]	@ 0x108
 8018924:	e088      	b.n	8018a38 <__ssvfiscanf_r+0x1ec>
 8018926:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8018928:	fb02 1103 	mla	r1, r2, r3, r1
 801892c:	3930      	subs	r1, #48	@ 0x30
 801892e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8018930:	4655      	mov	r5, sl
 8018932:	e7d2      	b.n	80188da <__ssvfiscanf_r+0x8e>
 8018934:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8018938:	2a20      	cmp	r2, #32
 801893a:	d8ef      	bhi.n	801891c <__ssvfiscanf_r+0xd0>
 801893c:	a101      	add	r1, pc, #4	@ (adr r1, 8018944 <__ssvfiscanf_r+0xf8>)
 801893e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8018942:	bf00      	nop
 8018944:	08018a17 	.word	0x08018a17
 8018948:	0801891d 	.word	0x0801891d
 801894c:	0801891d 	.word	0x0801891d
 8018950:	08018a71 	.word	0x08018a71
 8018954:	0801891d 	.word	0x0801891d
 8018958:	0801891d 	.word	0x0801891d
 801895c:	0801891d 	.word	0x0801891d
 8018960:	0801891d 	.word	0x0801891d
 8018964:	0801891d 	.word	0x0801891d
 8018968:	0801891d 	.word	0x0801891d
 801896c:	0801891d 	.word	0x0801891d
 8018970:	08018a87 	.word	0x08018a87
 8018974:	08018a6d 	.word	0x08018a6d
 8018978:	080189cf 	.word	0x080189cf
 801897c:	080189cf 	.word	0x080189cf
 8018980:	080189cf 	.word	0x080189cf
 8018984:	0801891d 	.word	0x0801891d
 8018988:	08018a29 	.word	0x08018a29
 801898c:	0801891d 	.word	0x0801891d
 8018990:	0801891d 	.word	0x0801891d
 8018994:	0801891d 	.word	0x0801891d
 8018998:	0801891d 	.word	0x0801891d
 801899c:	08018a97 	.word	0x08018a97
 80189a0:	08018a31 	.word	0x08018a31
 80189a4:	08018a0f 	.word	0x08018a0f
 80189a8:	0801891d 	.word	0x0801891d
 80189ac:	0801891d 	.word	0x0801891d
 80189b0:	08018a93 	.word	0x08018a93
 80189b4:	0801891d 	.word	0x0801891d
 80189b8:	08018a6d 	.word	0x08018a6d
 80189bc:	0801891d 	.word	0x0801891d
 80189c0:	0801891d 	.word	0x0801891d
 80189c4:	08018a17 	.word	0x08018a17
 80189c8:	3b45      	subs	r3, #69	@ 0x45
 80189ca:	2b02      	cmp	r3, #2
 80189cc:	d8a6      	bhi.n	801891c <__ssvfiscanf_r+0xd0>
 80189ce:	2305      	movs	r3, #5
 80189d0:	e031      	b.n	8018a36 <__ssvfiscanf_r+0x1ea>
 80189d2:	6863      	ldr	r3, [r4, #4]
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	dd0d      	ble.n	80189f4 <__ssvfiscanf_r+0x1a8>
 80189d8:	6823      	ldr	r3, [r4, #0]
 80189da:	781a      	ldrb	r2, [r3, #0]
 80189dc:	454a      	cmp	r2, r9
 80189de:	f040 80a6 	bne.w	8018b2e <__ssvfiscanf_r+0x2e2>
 80189e2:	3301      	adds	r3, #1
 80189e4:	6862      	ldr	r2, [r4, #4]
 80189e6:	6023      	str	r3, [r4, #0]
 80189e8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80189ea:	3a01      	subs	r2, #1
 80189ec:	3301      	adds	r3, #1
 80189ee:	6062      	str	r2, [r4, #4]
 80189f0:	9345      	str	r3, [sp, #276]	@ 0x114
 80189f2:	e753      	b.n	801889c <__ssvfiscanf_r+0x50>
 80189f4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80189f6:	4621      	mov	r1, r4
 80189f8:	4630      	mov	r0, r6
 80189fa:	4798      	blx	r3
 80189fc:	2800      	cmp	r0, #0
 80189fe:	d0eb      	beq.n	80189d8 <__ssvfiscanf_r+0x18c>
 8018a00:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8018a02:	2800      	cmp	r0, #0
 8018a04:	f040 808b 	bne.w	8018b1e <__ssvfiscanf_r+0x2d2>
 8018a08:	f04f 30ff 	mov.w	r0, #4294967295
 8018a0c:	e08b      	b.n	8018b26 <__ssvfiscanf_r+0x2da>
 8018a0e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8018a10:	f042 0220 	orr.w	r2, r2, #32
 8018a14:	9241      	str	r2, [sp, #260]	@ 0x104
 8018a16:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8018a18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8018a1c:	9241      	str	r2, [sp, #260]	@ 0x104
 8018a1e:	2210      	movs	r2, #16
 8018a20:	2b6e      	cmp	r3, #110	@ 0x6e
 8018a22:	9242      	str	r2, [sp, #264]	@ 0x108
 8018a24:	d902      	bls.n	8018a2c <__ssvfiscanf_r+0x1e0>
 8018a26:	e005      	b.n	8018a34 <__ssvfiscanf_r+0x1e8>
 8018a28:	2300      	movs	r3, #0
 8018a2a:	9342      	str	r3, [sp, #264]	@ 0x108
 8018a2c:	2303      	movs	r3, #3
 8018a2e:	e002      	b.n	8018a36 <__ssvfiscanf_r+0x1ea>
 8018a30:	2308      	movs	r3, #8
 8018a32:	9342      	str	r3, [sp, #264]	@ 0x108
 8018a34:	2304      	movs	r3, #4
 8018a36:	9347      	str	r3, [sp, #284]	@ 0x11c
 8018a38:	6863      	ldr	r3, [r4, #4]
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	dd39      	ble.n	8018ab2 <__ssvfiscanf_r+0x266>
 8018a3e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8018a40:	0659      	lsls	r1, r3, #25
 8018a42:	d404      	bmi.n	8018a4e <__ssvfiscanf_r+0x202>
 8018a44:	6823      	ldr	r3, [r4, #0]
 8018a46:	781a      	ldrb	r2, [r3, #0]
 8018a48:	5cba      	ldrb	r2, [r7, r2]
 8018a4a:	0712      	lsls	r2, r2, #28
 8018a4c:	d438      	bmi.n	8018ac0 <__ssvfiscanf_r+0x274>
 8018a4e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8018a50:	2b02      	cmp	r3, #2
 8018a52:	dc47      	bgt.n	8018ae4 <__ssvfiscanf_r+0x298>
 8018a54:	466b      	mov	r3, sp
 8018a56:	4622      	mov	r2, r4
 8018a58:	a941      	add	r1, sp, #260	@ 0x104
 8018a5a:	4630      	mov	r0, r6
 8018a5c:	f000 fb3a 	bl	80190d4 <_scanf_chars>
 8018a60:	2801      	cmp	r0, #1
 8018a62:	d064      	beq.n	8018b2e <__ssvfiscanf_r+0x2e2>
 8018a64:	2802      	cmp	r0, #2
 8018a66:	f47f af19 	bne.w	801889c <__ssvfiscanf_r+0x50>
 8018a6a:	e7c9      	b.n	8018a00 <__ssvfiscanf_r+0x1b4>
 8018a6c:	220a      	movs	r2, #10
 8018a6e:	e7d7      	b.n	8018a20 <__ssvfiscanf_r+0x1d4>
 8018a70:	4629      	mov	r1, r5
 8018a72:	4640      	mov	r0, r8
 8018a74:	f000 fd28 	bl	80194c8 <__sccl>
 8018a78:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8018a7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018a7e:	9341      	str	r3, [sp, #260]	@ 0x104
 8018a80:	4605      	mov	r5, r0
 8018a82:	2301      	movs	r3, #1
 8018a84:	e7d7      	b.n	8018a36 <__ssvfiscanf_r+0x1ea>
 8018a86:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8018a88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018a8c:	9341      	str	r3, [sp, #260]	@ 0x104
 8018a8e:	2300      	movs	r3, #0
 8018a90:	e7d1      	b.n	8018a36 <__ssvfiscanf_r+0x1ea>
 8018a92:	2302      	movs	r3, #2
 8018a94:	e7cf      	b.n	8018a36 <__ssvfiscanf_r+0x1ea>
 8018a96:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8018a98:	06c3      	lsls	r3, r0, #27
 8018a9a:	f53f aeff 	bmi.w	801889c <__ssvfiscanf_r+0x50>
 8018a9e:	9b00      	ldr	r3, [sp, #0]
 8018aa0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8018aa2:	1d19      	adds	r1, r3, #4
 8018aa4:	9100      	str	r1, [sp, #0]
 8018aa6:	681b      	ldr	r3, [r3, #0]
 8018aa8:	07c0      	lsls	r0, r0, #31
 8018aaa:	bf4c      	ite	mi
 8018aac:	801a      	strhmi	r2, [r3, #0]
 8018aae:	601a      	strpl	r2, [r3, #0]
 8018ab0:	e6f4      	b.n	801889c <__ssvfiscanf_r+0x50>
 8018ab2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8018ab4:	4621      	mov	r1, r4
 8018ab6:	4630      	mov	r0, r6
 8018ab8:	4798      	blx	r3
 8018aba:	2800      	cmp	r0, #0
 8018abc:	d0bf      	beq.n	8018a3e <__ssvfiscanf_r+0x1f2>
 8018abe:	e79f      	b.n	8018a00 <__ssvfiscanf_r+0x1b4>
 8018ac0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8018ac2:	3201      	adds	r2, #1
 8018ac4:	9245      	str	r2, [sp, #276]	@ 0x114
 8018ac6:	6862      	ldr	r2, [r4, #4]
 8018ac8:	3a01      	subs	r2, #1
 8018aca:	2a00      	cmp	r2, #0
 8018acc:	6062      	str	r2, [r4, #4]
 8018ace:	dd02      	ble.n	8018ad6 <__ssvfiscanf_r+0x28a>
 8018ad0:	3301      	adds	r3, #1
 8018ad2:	6023      	str	r3, [r4, #0]
 8018ad4:	e7b6      	b.n	8018a44 <__ssvfiscanf_r+0x1f8>
 8018ad6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8018ad8:	4621      	mov	r1, r4
 8018ada:	4630      	mov	r0, r6
 8018adc:	4798      	blx	r3
 8018ade:	2800      	cmp	r0, #0
 8018ae0:	d0b0      	beq.n	8018a44 <__ssvfiscanf_r+0x1f8>
 8018ae2:	e78d      	b.n	8018a00 <__ssvfiscanf_r+0x1b4>
 8018ae4:	2b04      	cmp	r3, #4
 8018ae6:	dc0f      	bgt.n	8018b08 <__ssvfiscanf_r+0x2bc>
 8018ae8:	466b      	mov	r3, sp
 8018aea:	4622      	mov	r2, r4
 8018aec:	a941      	add	r1, sp, #260	@ 0x104
 8018aee:	4630      	mov	r0, r6
 8018af0:	f000 fb4a 	bl	8019188 <_scanf_i>
 8018af4:	e7b4      	b.n	8018a60 <__ssvfiscanf_r+0x214>
 8018af6:	bf00      	nop
 8018af8:	08018799 	.word	0x08018799
 8018afc:	08018813 	.word	0x08018813
 8018b00:	0801d569 	.word	0x0801d569
 8018b04:	0801d520 	.word	0x0801d520
 8018b08:	4b0a      	ldr	r3, [pc, #40]	@ (8018b34 <__ssvfiscanf_r+0x2e8>)
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	f43f aec6 	beq.w	801889c <__ssvfiscanf_r+0x50>
 8018b10:	466b      	mov	r3, sp
 8018b12:	4622      	mov	r2, r4
 8018b14:	a941      	add	r1, sp, #260	@ 0x104
 8018b16:	4630      	mov	r0, r6
 8018b18:	f3af 8000 	nop.w
 8018b1c:	e7a0      	b.n	8018a60 <__ssvfiscanf_r+0x214>
 8018b1e:	89a3      	ldrh	r3, [r4, #12]
 8018b20:	065b      	lsls	r3, r3, #25
 8018b22:	f53f af71 	bmi.w	8018a08 <__ssvfiscanf_r+0x1bc>
 8018b26:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8018b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b2e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8018b30:	e7f9      	b.n	8018b26 <__ssvfiscanf_r+0x2da>
 8018b32:	bf00      	nop
 8018b34:	00000000 	.word	0x00000000

08018b38 <__sfputc_r>:
 8018b38:	6893      	ldr	r3, [r2, #8]
 8018b3a:	3b01      	subs	r3, #1
 8018b3c:	2b00      	cmp	r3, #0
 8018b3e:	b410      	push	{r4}
 8018b40:	6093      	str	r3, [r2, #8]
 8018b42:	da08      	bge.n	8018b56 <__sfputc_r+0x1e>
 8018b44:	6994      	ldr	r4, [r2, #24]
 8018b46:	42a3      	cmp	r3, r4
 8018b48:	db01      	blt.n	8018b4e <__sfputc_r+0x16>
 8018b4a:	290a      	cmp	r1, #10
 8018b4c:	d103      	bne.n	8018b56 <__sfputc_r+0x1e>
 8018b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018b52:	f000 bd2c 	b.w	80195ae <__swbuf_r>
 8018b56:	6813      	ldr	r3, [r2, #0]
 8018b58:	1c58      	adds	r0, r3, #1
 8018b5a:	6010      	str	r0, [r2, #0]
 8018b5c:	7019      	strb	r1, [r3, #0]
 8018b5e:	4608      	mov	r0, r1
 8018b60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018b64:	4770      	bx	lr

08018b66 <__sfputs_r>:
 8018b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b68:	4606      	mov	r6, r0
 8018b6a:	460f      	mov	r7, r1
 8018b6c:	4614      	mov	r4, r2
 8018b6e:	18d5      	adds	r5, r2, r3
 8018b70:	42ac      	cmp	r4, r5
 8018b72:	d101      	bne.n	8018b78 <__sfputs_r+0x12>
 8018b74:	2000      	movs	r0, #0
 8018b76:	e007      	b.n	8018b88 <__sfputs_r+0x22>
 8018b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b7c:	463a      	mov	r2, r7
 8018b7e:	4630      	mov	r0, r6
 8018b80:	f7ff ffda 	bl	8018b38 <__sfputc_r>
 8018b84:	1c43      	adds	r3, r0, #1
 8018b86:	d1f3      	bne.n	8018b70 <__sfputs_r+0xa>
 8018b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018b8c <_vfiprintf_r>:
 8018b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b90:	460d      	mov	r5, r1
 8018b92:	b09d      	sub	sp, #116	@ 0x74
 8018b94:	4614      	mov	r4, r2
 8018b96:	4698      	mov	r8, r3
 8018b98:	4606      	mov	r6, r0
 8018b9a:	b118      	cbz	r0, 8018ba4 <_vfiprintf_r+0x18>
 8018b9c:	6a03      	ldr	r3, [r0, #32]
 8018b9e:	b90b      	cbnz	r3, 8018ba4 <_vfiprintf_r+0x18>
 8018ba0:	f7ff fa3a 	bl	8018018 <__sinit>
 8018ba4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018ba6:	07d9      	lsls	r1, r3, #31
 8018ba8:	d405      	bmi.n	8018bb6 <_vfiprintf_r+0x2a>
 8018baa:	89ab      	ldrh	r3, [r5, #12]
 8018bac:	059a      	lsls	r2, r3, #22
 8018bae:	d402      	bmi.n	8018bb6 <_vfiprintf_r+0x2a>
 8018bb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018bb2:	f7ff fc3e 	bl	8018432 <__retarget_lock_acquire_recursive>
 8018bb6:	89ab      	ldrh	r3, [r5, #12]
 8018bb8:	071b      	lsls	r3, r3, #28
 8018bba:	d501      	bpl.n	8018bc0 <_vfiprintf_r+0x34>
 8018bbc:	692b      	ldr	r3, [r5, #16]
 8018bbe:	b99b      	cbnz	r3, 8018be8 <_vfiprintf_r+0x5c>
 8018bc0:	4629      	mov	r1, r5
 8018bc2:	4630      	mov	r0, r6
 8018bc4:	f000 fd32 	bl	801962c <__swsetup_r>
 8018bc8:	b170      	cbz	r0, 8018be8 <_vfiprintf_r+0x5c>
 8018bca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018bcc:	07dc      	lsls	r4, r3, #31
 8018bce:	d504      	bpl.n	8018bda <_vfiprintf_r+0x4e>
 8018bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8018bd4:	b01d      	add	sp, #116	@ 0x74
 8018bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bda:	89ab      	ldrh	r3, [r5, #12]
 8018bdc:	0598      	lsls	r0, r3, #22
 8018bde:	d4f7      	bmi.n	8018bd0 <_vfiprintf_r+0x44>
 8018be0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018be2:	f7ff fc27 	bl	8018434 <__retarget_lock_release_recursive>
 8018be6:	e7f3      	b.n	8018bd0 <_vfiprintf_r+0x44>
 8018be8:	2300      	movs	r3, #0
 8018bea:	9309      	str	r3, [sp, #36]	@ 0x24
 8018bec:	2320      	movs	r3, #32
 8018bee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018bf2:	f8cd 800c 	str.w	r8, [sp, #12]
 8018bf6:	2330      	movs	r3, #48	@ 0x30
 8018bf8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018da8 <_vfiprintf_r+0x21c>
 8018bfc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018c00:	f04f 0901 	mov.w	r9, #1
 8018c04:	4623      	mov	r3, r4
 8018c06:	469a      	mov	sl, r3
 8018c08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018c0c:	b10a      	cbz	r2, 8018c12 <_vfiprintf_r+0x86>
 8018c0e:	2a25      	cmp	r2, #37	@ 0x25
 8018c10:	d1f9      	bne.n	8018c06 <_vfiprintf_r+0x7a>
 8018c12:	ebba 0b04 	subs.w	fp, sl, r4
 8018c16:	d00b      	beq.n	8018c30 <_vfiprintf_r+0xa4>
 8018c18:	465b      	mov	r3, fp
 8018c1a:	4622      	mov	r2, r4
 8018c1c:	4629      	mov	r1, r5
 8018c1e:	4630      	mov	r0, r6
 8018c20:	f7ff ffa1 	bl	8018b66 <__sfputs_r>
 8018c24:	3001      	adds	r0, #1
 8018c26:	f000 80a7 	beq.w	8018d78 <_vfiprintf_r+0x1ec>
 8018c2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018c2c:	445a      	add	r2, fp
 8018c2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8018c30:	f89a 3000 	ldrb.w	r3, [sl]
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	f000 809f 	beq.w	8018d78 <_vfiprintf_r+0x1ec>
 8018c3a:	2300      	movs	r3, #0
 8018c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8018c40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018c44:	f10a 0a01 	add.w	sl, sl, #1
 8018c48:	9304      	str	r3, [sp, #16]
 8018c4a:	9307      	str	r3, [sp, #28]
 8018c4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018c50:	931a      	str	r3, [sp, #104]	@ 0x68
 8018c52:	4654      	mov	r4, sl
 8018c54:	2205      	movs	r2, #5
 8018c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c5a:	4853      	ldr	r0, [pc, #332]	@ (8018da8 <_vfiprintf_r+0x21c>)
 8018c5c:	f7e7 faf0 	bl	8000240 <memchr>
 8018c60:	9a04      	ldr	r2, [sp, #16]
 8018c62:	b9d8      	cbnz	r0, 8018c9c <_vfiprintf_r+0x110>
 8018c64:	06d1      	lsls	r1, r2, #27
 8018c66:	bf44      	itt	mi
 8018c68:	2320      	movmi	r3, #32
 8018c6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018c6e:	0713      	lsls	r3, r2, #28
 8018c70:	bf44      	itt	mi
 8018c72:	232b      	movmi	r3, #43	@ 0x2b
 8018c74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018c78:	f89a 3000 	ldrb.w	r3, [sl]
 8018c7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8018c7e:	d015      	beq.n	8018cac <_vfiprintf_r+0x120>
 8018c80:	9a07      	ldr	r2, [sp, #28]
 8018c82:	4654      	mov	r4, sl
 8018c84:	2000      	movs	r0, #0
 8018c86:	f04f 0c0a 	mov.w	ip, #10
 8018c8a:	4621      	mov	r1, r4
 8018c8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018c90:	3b30      	subs	r3, #48	@ 0x30
 8018c92:	2b09      	cmp	r3, #9
 8018c94:	d94b      	bls.n	8018d2e <_vfiprintf_r+0x1a2>
 8018c96:	b1b0      	cbz	r0, 8018cc6 <_vfiprintf_r+0x13a>
 8018c98:	9207      	str	r2, [sp, #28]
 8018c9a:	e014      	b.n	8018cc6 <_vfiprintf_r+0x13a>
 8018c9c:	eba0 0308 	sub.w	r3, r0, r8
 8018ca0:	fa09 f303 	lsl.w	r3, r9, r3
 8018ca4:	4313      	orrs	r3, r2
 8018ca6:	9304      	str	r3, [sp, #16]
 8018ca8:	46a2      	mov	sl, r4
 8018caa:	e7d2      	b.n	8018c52 <_vfiprintf_r+0xc6>
 8018cac:	9b03      	ldr	r3, [sp, #12]
 8018cae:	1d19      	adds	r1, r3, #4
 8018cb0:	681b      	ldr	r3, [r3, #0]
 8018cb2:	9103      	str	r1, [sp, #12]
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	bfbb      	ittet	lt
 8018cb8:	425b      	neglt	r3, r3
 8018cba:	f042 0202 	orrlt.w	r2, r2, #2
 8018cbe:	9307      	strge	r3, [sp, #28]
 8018cc0:	9307      	strlt	r3, [sp, #28]
 8018cc2:	bfb8      	it	lt
 8018cc4:	9204      	strlt	r2, [sp, #16]
 8018cc6:	7823      	ldrb	r3, [r4, #0]
 8018cc8:	2b2e      	cmp	r3, #46	@ 0x2e
 8018cca:	d10a      	bne.n	8018ce2 <_vfiprintf_r+0x156>
 8018ccc:	7863      	ldrb	r3, [r4, #1]
 8018cce:	2b2a      	cmp	r3, #42	@ 0x2a
 8018cd0:	d132      	bne.n	8018d38 <_vfiprintf_r+0x1ac>
 8018cd2:	9b03      	ldr	r3, [sp, #12]
 8018cd4:	1d1a      	adds	r2, r3, #4
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	9203      	str	r2, [sp, #12]
 8018cda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018cde:	3402      	adds	r4, #2
 8018ce0:	9305      	str	r3, [sp, #20]
 8018ce2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018db8 <_vfiprintf_r+0x22c>
 8018ce6:	7821      	ldrb	r1, [r4, #0]
 8018ce8:	2203      	movs	r2, #3
 8018cea:	4650      	mov	r0, sl
 8018cec:	f7e7 faa8 	bl	8000240 <memchr>
 8018cf0:	b138      	cbz	r0, 8018d02 <_vfiprintf_r+0x176>
 8018cf2:	9b04      	ldr	r3, [sp, #16]
 8018cf4:	eba0 000a 	sub.w	r0, r0, sl
 8018cf8:	2240      	movs	r2, #64	@ 0x40
 8018cfa:	4082      	lsls	r2, r0
 8018cfc:	4313      	orrs	r3, r2
 8018cfe:	3401      	adds	r4, #1
 8018d00:	9304      	str	r3, [sp, #16]
 8018d02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018d06:	4829      	ldr	r0, [pc, #164]	@ (8018dac <_vfiprintf_r+0x220>)
 8018d08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018d0c:	2206      	movs	r2, #6
 8018d0e:	f7e7 fa97 	bl	8000240 <memchr>
 8018d12:	2800      	cmp	r0, #0
 8018d14:	d03f      	beq.n	8018d96 <_vfiprintf_r+0x20a>
 8018d16:	4b26      	ldr	r3, [pc, #152]	@ (8018db0 <_vfiprintf_r+0x224>)
 8018d18:	bb1b      	cbnz	r3, 8018d62 <_vfiprintf_r+0x1d6>
 8018d1a:	9b03      	ldr	r3, [sp, #12]
 8018d1c:	3307      	adds	r3, #7
 8018d1e:	f023 0307 	bic.w	r3, r3, #7
 8018d22:	3308      	adds	r3, #8
 8018d24:	9303      	str	r3, [sp, #12]
 8018d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018d28:	443b      	add	r3, r7
 8018d2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8018d2c:	e76a      	b.n	8018c04 <_vfiprintf_r+0x78>
 8018d2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8018d32:	460c      	mov	r4, r1
 8018d34:	2001      	movs	r0, #1
 8018d36:	e7a8      	b.n	8018c8a <_vfiprintf_r+0xfe>
 8018d38:	2300      	movs	r3, #0
 8018d3a:	3401      	adds	r4, #1
 8018d3c:	9305      	str	r3, [sp, #20]
 8018d3e:	4619      	mov	r1, r3
 8018d40:	f04f 0c0a 	mov.w	ip, #10
 8018d44:	4620      	mov	r0, r4
 8018d46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018d4a:	3a30      	subs	r2, #48	@ 0x30
 8018d4c:	2a09      	cmp	r2, #9
 8018d4e:	d903      	bls.n	8018d58 <_vfiprintf_r+0x1cc>
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	d0c6      	beq.n	8018ce2 <_vfiprintf_r+0x156>
 8018d54:	9105      	str	r1, [sp, #20]
 8018d56:	e7c4      	b.n	8018ce2 <_vfiprintf_r+0x156>
 8018d58:	fb0c 2101 	mla	r1, ip, r1, r2
 8018d5c:	4604      	mov	r4, r0
 8018d5e:	2301      	movs	r3, #1
 8018d60:	e7f0      	b.n	8018d44 <_vfiprintf_r+0x1b8>
 8018d62:	ab03      	add	r3, sp, #12
 8018d64:	9300      	str	r3, [sp, #0]
 8018d66:	462a      	mov	r2, r5
 8018d68:	4b12      	ldr	r3, [pc, #72]	@ (8018db4 <_vfiprintf_r+0x228>)
 8018d6a:	a904      	add	r1, sp, #16
 8018d6c:	4630      	mov	r0, r6
 8018d6e:	f3af 8000 	nop.w
 8018d72:	4607      	mov	r7, r0
 8018d74:	1c78      	adds	r0, r7, #1
 8018d76:	d1d6      	bne.n	8018d26 <_vfiprintf_r+0x19a>
 8018d78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018d7a:	07d9      	lsls	r1, r3, #31
 8018d7c:	d405      	bmi.n	8018d8a <_vfiprintf_r+0x1fe>
 8018d7e:	89ab      	ldrh	r3, [r5, #12]
 8018d80:	059a      	lsls	r2, r3, #22
 8018d82:	d402      	bmi.n	8018d8a <_vfiprintf_r+0x1fe>
 8018d84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018d86:	f7ff fb55 	bl	8018434 <__retarget_lock_release_recursive>
 8018d8a:	89ab      	ldrh	r3, [r5, #12]
 8018d8c:	065b      	lsls	r3, r3, #25
 8018d8e:	f53f af1f 	bmi.w	8018bd0 <_vfiprintf_r+0x44>
 8018d92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018d94:	e71e      	b.n	8018bd4 <_vfiprintf_r+0x48>
 8018d96:	ab03      	add	r3, sp, #12
 8018d98:	9300      	str	r3, [sp, #0]
 8018d9a:	462a      	mov	r2, r5
 8018d9c:	4b05      	ldr	r3, [pc, #20]	@ (8018db4 <_vfiprintf_r+0x228>)
 8018d9e:	a904      	add	r1, sp, #16
 8018da0:	4630      	mov	r0, r6
 8018da2:	f000 f879 	bl	8018e98 <_printf_i>
 8018da6:	e7e4      	b.n	8018d72 <_vfiprintf_r+0x1e6>
 8018da8:	0801d51a 	.word	0x0801d51a
 8018dac:	0801d524 	.word	0x0801d524
 8018db0:	00000000 	.word	0x00000000
 8018db4:	08018b67 	.word	0x08018b67
 8018db8:	0801d520 	.word	0x0801d520

08018dbc <_printf_common>:
 8018dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018dc0:	4616      	mov	r6, r2
 8018dc2:	4698      	mov	r8, r3
 8018dc4:	688a      	ldr	r2, [r1, #8]
 8018dc6:	690b      	ldr	r3, [r1, #16]
 8018dc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018dcc:	4293      	cmp	r3, r2
 8018dce:	bfb8      	it	lt
 8018dd0:	4613      	movlt	r3, r2
 8018dd2:	6033      	str	r3, [r6, #0]
 8018dd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018dd8:	4607      	mov	r7, r0
 8018dda:	460c      	mov	r4, r1
 8018ddc:	b10a      	cbz	r2, 8018de2 <_printf_common+0x26>
 8018dde:	3301      	adds	r3, #1
 8018de0:	6033      	str	r3, [r6, #0]
 8018de2:	6823      	ldr	r3, [r4, #0]
 8018de4:	0699      	lsls	r1, r3, #26
 8018de6:	bf42      	ittt	mi
 8018de8:	6833      	ldrmi	r3, [r6, #0]
 8018dea:	3302      	addmi	r3, #2
 8018dec:	6033      	strmi	r3, [r6, #0]
 8018dee:	6825      	ldr	r5, [r4, #0]
 8018df0:	f015 0506 	ands.w	r5, r5, #6
 8018df4:	d106      	bne.n	8018e04 <_printf_common+0x48>
 8018df6:	f104 0a19 	add.w	sl, r4, #25
 8018dfa:	68e3      	ldr	r3, [r4, #12]
 8018dfc:	6832      	ldr	r2, [r6, #0]
 8018dfe:	1a9b      	subs	r3, r3, r2
 8018e00:	42ab      	cmp	r3, r5
 8018e02:	dc26      	bgt.n	8018e52 <_printf_common+0x96>
 8018e04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018e08:	6822      	ldr	r2, [r4, #0]
 8018e0a:	3b00      	subs	r3, #0
 8018e0c:	bf18      	it	ne
 8018e0e:	2301      	movne	r3, #1
 8018e10:	0692      	lsls	r2, r2, #26
 8018e12:	d42b      	bmi.n	8018e6c <_printf_common+0xb0>
 8018e14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018e18:	4641      	mov	r1, r8
 8018e1a:	4638      	mov	r0, r7
 8018e1c:	47c8      	blx	r9
 8018e1e:	3001      	adds	r0, #1
 8018e20:	d01e      	beq.n	8018e60 <_printf_common+0xa4>
 8018e22:	6823      	ldr	r3, [r4, #0]
 8018e24:	6922      	ldr	r2, [r4, #16]
 8018e26:	f003 0306 	and.w	r3, r3, #6
 8018e2a:	2b04      	cmp	r3, #4
 8018e2c:	bf02      	ittt	eq
 8018e2e:	68e5      	ldreq	r5, [r4, #12]
 8018e30:	6833      	ldreq	r3, [r6, #0]
 8018e32:	1aed      	subeq	r5, r5, r3
 8018e34:	68a3      	ldr	r3, [r4, #8]
 8018e36:	bf0c      	ite	eq
 8018e38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018e3c:	2500      	movne	r5, #0
 8018e3e:	4293      	cmp	r3, r2
 8018e40:	bfc4      	itt	gt
 8018e42:	1a9b      	subgt	r3, r3, r2
 8018e44:	18ed      	addgt	r5, r5, r3
 8018e46:	2600      	movs	r6, #0
 8018e48:	341a      	adds	r4, #26
 8018e4a:	42b5      	cmp	r5, r6
 8018e4c:	d11a      	bne.n	8018e84 <_printf_common+0xc8>
 8018e4e:	2000      	movs	r0, #0
 8018e50:	e008      	b.n	8018e64 <_printf_common+0xa8>
 8018e52:	2301      	movs	r3, #1
 8018e54:	4652      	mov	r2, sl
 8018e56:	4641      	mov	r1, r8
 8018e58:	4638      	mov	r0, r7
 8018e5a:	47c8      	blx	r9
 8018e5c:	3001      	adds	r0, #1
 8018e5e:	d103      	bne.n	8018e68 <_printf_common+0xac>
 8018e60:	f04f 30ff 	mov.w	r0, #4294967295
 8018e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e68:	3501      	adds	r5, #1
 8018e6a:	e7c6      	b.n	8018dfa <_printf_common+0x3e>
 8018e6c:	18e1      	adds	r1, r4, r3
 8018e6e:	1c5a      	adds	r2, r3, #1
 8018e70:	2030      	movs	r0, #48	@ 0x30
 8018e72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018e76:	4422      	add	r2, r4
 8018e78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018e7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018e80:	3302      	adds	r3, #2
 8018e82:	e7c7      	b.n	8018e14 <_printf_common+0x58>
 8018e84:	2301      	movs	r3, #1
 8018e86:	4622      	mov	r2, r4
 8018e88:	4641      	mov	r1, r8
 8018e8a:	4638      	mov	r0, r7
 8018e8c:	47c8      	blx	r9
 8018e8e:	3001      	adds	r0, #1
 8018e90:	d0e6      	beq.n	8018e60 <_printf_common+0xa4>
 8018e92:	3601      	adds	r6, #1
 8018e94:	e7d9      	b.n	8018e4a <_printf_common+0x8e>
	...

08018e98 <_printf_i>:
 8018e98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018e9c:	7e0f      	ldrb	r7, [r1, #24]
 8018e9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018ea0:	2f78      	cmp	r7, #120	@ 0x78
 8018ea2:	4691      	mov	r9, r2
 8018ea4:	4680      	mov	r8, r0
 8018ea6:	460c      	mov	r4, r1
 8018ea8:	469a      	mov	sl, r3
 8018eaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018eae:	d807      	bhi.n	8018ec0 <_printf_i+0x28>
 8018eb0:	2f62      	cmp	r7, #98	@ 0x62
 8018eb2:	d80a      	bhi.n	8018eca <_printf_i+0x32>
 8018eb4:	2f00      	cmp	r7, #0
 8018eb6:	f000 80d1 	beq.w	801905c <_printf_i+0x1c4>
 8018eba:	2f58      	cmp	r7, #88	@ 0x58
 8018ebc:	f000 80b8 	beq.w	8019030 <_printf_i+0x198>
 8018ec0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018ec4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018ec8:	e03a      	b.n	8018f40 <_printf_i+0xa8>
 8018eca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018ece:	2b15      	cmp	r3, #21
 8018ed0:	d8f6      	bhi.n	8018ec0 <_printf_i+0x28>
 8018ed2:	a101      	add	r1, pc, #4	@ (adr r1, 8018ed8 <_printf_i+0x40>)
 8018ed4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018ed8:	08018f31 	.word	0x08018f31
 8018edc:	08018f45 	.word	0x08018f45
 8018ee0:	08018ec1 	.word	0x08018ec1
 8018ee4:	08018ec1 	.word	0x08018ec1
 8018ee8:	08018ec1 	.word	0x08018ec1
 8018eec:	08018ec1 	.word	0x08018ec1
 8018ef0:	08018f45 	.word	0x08018f45
 8018ef4:	08018ec1 	.word	0x08018ec1
 8018ef8:	08018ec1 	.word	0x08018ec1
 8018efc:	08018ec1 	.word	0x08018ec1
 8018f00:	08018ec1 	.word	0x08018ec1
 8018f04:	08019043 	.word	0x08019043
 8018f08:	08018f6f 	.word	0x08018f6f
 8018f0c:	08018ffd 	.word	0x08018ffd
 8018f10:	08018ec1 	.word	0x08018ec1
 8018f14:	08018ec1 	.word	0x08018ec1
 8018f18:	08019065 	.word	0x08019065
 8018f1c:	08018ec1 	.word	0x08018ec1
 8018f20:	08018f6f 	.word	0x08018f6f
 8018f24:	08018ec1 	.word	0x08018ec1
 8018f28:	08018ec1 	.word	0x08018ec1
 8018f2c:	08019005 	.word	0x08019005
 8018f30:	6833      	ldr	r3, [r6, #0]
 8018f32:	1d1a      	adds	r2, r3, #4
 8018f34:	681b      	ldr	r3, [r3, #0]
 8018f36:	6032      	str	r2, [r6, #0]
 8018f38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018f3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018f40:	2301      	movs	r3, #1
 8018f42:	e09c      	b.n	801907e <_printf_i+0x1e6>
 8018f44:	6833      	ldr	r3, [r6, #0]
 8018f46:	6820      	ldr	r0, [r4, #0]
 8018f48:	1d19      	adds	r1, r3, #4
 8018f4a:	6031      	str	r1, [r6, #0]
 8018f4c:	0606      	lsls	r6, r0, #24
 8018f4e:	d501      	bpl.n	8018f54 <_printf_i+0xbc>
 8018f50:	681d      	ldr	r5, [r3, #0]
 8018f52:	e003      	b.n	8018f5c <_printf_i+0xc4>
 8018f54:	0645      	lsls	r5, r0, #25
 8018f56:	d5fb      	bpl.n	8018f50 <_printf_i+0xb8>
 8018f58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018f5c:	2d00      	cmp	r5, #0
 8018f5e:	da03      	bge.n	8018f68 <_printf_i+0xd0>
 8018f60:	232d      	movs	r3, #45	@ 0x2d
 8018f62:	426d      	negs	r5, r5
 8018f64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018f68:	4858      	ldr	r0, [pc, #352]	@ (80190cc <_printf_i+0x234>)
 8018f6a:	230a      	movs	r3, #10
 8018f6c:	e011      	b.n	8018f92 <_printf_i+0xfa>
 8018f6e:	6821      	ldr	r1, [r4, #0]
 8018f70:	6833      	ldr	r3, [r6, #0]
 8018f72:	0608      	lsls	r0, r1, #24
 8018f74:	f853 5b04 	ldr.w	r5, [r3], #4
 8018f78:	d402      	bmi.n	8018f80 <_printf_i+0xe8>
 8018f7a:	0649      	lsls	r1, r1, #25
 8018f7c:	bf48      	it	mi
 8018f7e:	b2ad      	uxthmi	r5, r5
 8018f80:	2f6f      	cmp	r7, #111	@ 0x6f
 8018f82:	4852      	ldr	r0, [pc, #328]	@ (80190cc <_printf_i+0x234>)
 8018f84:	6033      	str	r3, [r6, #0]
 8018f86:	bf14      	ite	ne
 8018f88:	230a      	movne	r3, #10
 8018f8a:	2308      	moveq	r3, #8
 8018f8c:	2100      	movs	r1, #0
 8018f8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018f92:	6866      	ldr	r6, [r4, #4]
 8018f94:	60a6      	str	r6, [r4, #8]
 8018f96:	2e00      	cmp	r6, #0
 8018f98:	db05      	blt.n	8018fa6 <_printf_i+0x10e>
 8018f9a:	6821      	ldr	r1, [r4, #0]
 8018f9c:	432e      	orrs	r6, r5
 8018f9e:	f021 0104 	bic.w	r1, r1, #4
 8018fa2:	6021      	str	r1, [r4, #0]
 8018fa4:	d04b      	beq.n	801903e <_printf_i+0x1a6>
 8018fa6:	4616      	mov	r6, r2
 8018fa8:	fbb5 f1f3 	udiv	r1, r5, r3
 8018fac:	fb03 5711 	mls	r7, r3, r1, r5
 8018fb0:	5dc7      	ldrb	r7, [r0, r7]
 8018fb2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018fb6:	462f      	mov	r7, r5
 8018fb8:	42bb      	cmp	r3, r7
 8018fba:	460d      	mov	r5, r1
 8018fbc:	d9f4      	bls.n	8018fa8 <_printf_i+0x110>
 8018fbe:	2b08      	cmp	r3, #8
 8018fc0:	d10b      	bne.n	8018fda <_printf_i+0x142>
 8018fc2:	6823      	ldr	r3, [r4, #0]
 8018fc4:	07df      	lsls	r7, r3, #31
 8018fc6:	d508      	bpl.n	8018fda <_printf_i+0x142>
 8018fc8:	6923      	ldr	r3, [r4, #16]
 8018fca:	6861      	ldr	r1, [r4, #4]
 8018fcc:	4299      	cmp	r1, r3
 8018fce:	bfde      	ittt	le
 8018fd0:	2330      	movle	r3, #48	@ 0x30
 8018fd2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018fd6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018fda:	1b92      	subs	r2, r2, r6
 8018fdc:	6122      	str	r2, [r4, #16]
 8018fde:	f8cd a000 	str.w	sl, [sp]
 8018fe2:	464b      	mov	r3, r9
 8018fe4:	aa03      	add	r2, sp, #12
 8018fe6:	4621      	mov	r1, r4
 8018fe8:	4640      	mov	r0, r8
 8018fea:	f7ff fee7 	bl	8018dbc <_printf_common>
 8018fee:	3001      	adds	r0, #1
 8018ff0:	d14a      	bne.n	8019088 <_printf_i+0x1f0>
 8018ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8018ff6:	b004      	add	sp, #16
 8018ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ffc:	6823      	ldr	r3, [r4, #0]
 8018ffe:	f043 0320 	orr.w	r3, r3, #32
 8019002:	6023      	str	r3, [r4, #0]
 8019004:	4832      	ldr	r0, [pc, #200]	@ (80190d0 <_printf_i+0x238>)
 8019006:	2778      	movs	r7, #120	@ 0x78
 8019008:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801900c:	6823      	ldr	r3, [r4, #0]
 801900e:	6831      	ldr	r1, [r6, #0]
 8019010:	061f      	lsls	r7, r3, #24
 8019012:	f851 5b04 	ldr.w	r5, [r1], #4
 8019016:	d402      	bmi.n	801901e <_printf_i+0x186>
 8019018:	065f      	lsls	r7, r3, #25
 801901a:	bf48      	it	mi
 801901c:	b2ad      	uxthmi	r5, r5
 801901e:	6031      	str	r1, [r6, #0]
 8019020:	07d9      	lsls	r1, r3, #31
 8019022:	bf44      	itt	mi
 8019024:	f043 0320 	orrmi.w	r3, r3, #32
 8019028:	6023      	strmi	r3, [r4, #0]
 801902a:	b11d      	cbz	r5, 8019034 <_printf_i+0x19c>
 801902c:	2310      	movs	r3, #16
 801902e:	e7ad      	b.n	8018f8c <_printf_i+0xf4>
 8019030:	4826      	ldr	r0, [pc, #152]	@ (80190cc <_printf_i+0x234>)
 8019032:	e7e9      	b.n	8019008 <_printf_i+0x170>
 8019034:	6823      	ldr	r3, [r4, #0]
 8019036:	f023 0320 	bic.w	r3, r3, #32
 801903a:	6023      	str	r3, [r4, #0]
 801903c:	e7f6      	b.n	801902c <_printf_i+0x194>
 801903e:	4616      	mov	r6, r2
 8019040:	e7bd      	b.n	8018fbe <_printf_i+0x126>
 8019042:	6833      	ldr	r3, [r6, #0]
 8019044:	6825      	ldr	r5, [r4, #0]
 8019046:	6961      	ldr	r1, [r4, #20]
 8019048:	1d18      	adds	r0, r3, #4
 801904a:	6030      	str	r0, [r6, #0]
 801904c:	062e      	lsls	r6, r5, #24
 801904e:	681b      	ldr	r3, [r3, #0]
 8019050:	d501      	bpl.n	8019056 <_printf_i+0x1be>
 8019052:	6019      	str	r1, [r3, #0]
 8019054:	e002      	b.n	801905c <_printf_i+0x1c4>
 8019056:	0668      	lsls	r0, r5, #25
 8019058:	d5fb      	bpl.n	8019052 <_printf_i+0x1ba>
 801905a:	8019      	strh	r1, [r3, #0]
 801905c:	2300      	movs	r3, #0
 801905e:	6123      	str	r3, [r4, #16]
 8019060:	4616      	mov	r6, r2
 8019062:	e7bc      	b.n	8018fde <_printf_i+0x146>
 8019064:	6833      	ldr	r3, [r6, #0]
 8019066:	1d1a      	adds	r2, r3, #4
 8019068:	6032      	str	r2, [r6, #0]
 801906a:	681e      	ldr	r6, [r3, #0]
 801906c:	6862      	ldr	r2, [r4, #4]
 801906e:	2100      	movs	r1, #0
 8019070:	4630      	mov	r0, r6
 8019072:	f7e7 f8e5 	bl	8000240 <memchr>
 8019076:	b108      	cbz	r0, 801907c <_printf_i+0x1e4>
 8019078:	1b80      	subs	r0, r0, r6
 801907a:	6060      	str	r0, [r4, #4]
 801907c:	6863      	ldr	r3, [r4, #4]
 801907e:	6123      	str	r3, [r4, #16]
 8019080:	2300      	movs	r3, #0
 8019082:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019086:	e7aa      	b.n	8018fde <_printf_i+0x146>
 8019088:	6923      	ldr	r3, [r4, #16]
 801908a:	4632      	mov	r2, r6
 801908c:	4649      	mov	r1, r9
 801908e:	4640      	mov	r0, r8
 8019090:	47d0      	blx	sl
 8019092:	3001      	adds	r0, #1
 8019094:	d0ad      	beq.n	8018ff2 <_printf_i+0x15a>
 8019096:	6823      	ldr	r3, [r4, #0]
 8019098:	079b      	lsls	r3, r3, #30
 801909a:	d413      	bmi.n	80190c4 <_printf_i+0x22c>
 801909c:	68e0      	ldr	r0, [r4, #12]
 801909e:	9b03      	ldr	r3, [sp, #12]
 80190a0:	4298      	cmp	r0, r3
 80190a2:	bfb8      	it	lt
 80190a4:	4618      	movlt	r0, r3
 80190a6:	e7a6      	b.n	8018ff6 <_printf_i+0x15e>
 80190a8:	2301      	movs	r3, #1
 80190aa:	4632      	mov	r2, r6
 80190ac:	4649      	mov	r1, r9
 80190ae:	4640      	mov	r0, r8
 80190b0:	47d0      	blx	sl
 80190b2:	3001      	adds	r0, #1
 80190b4:	d09d      	beq.n	8018ff2 <_printf_i+0x15a>
 80190b6:	3501      	adds	r5, #1
 80190b8:	68e3      	ldr	r3, [r4, #12]
 80190ba:	9903      	ldr	r1, [sp, #12]
 80190bc:	1a5b      	subs	r3, r3, r1
 80190be:	42ab      	cmp	r3, r5
 80190c0:	dcf2      	bgt.n	80190a8 <_printf_i+0x210>
 80190c2:	e7eb      	b.n	801909c <_printf_i+0x204>
 80190c4:	2500      	movs	r5, #0
 80190c6:	f104 0619 	add.w	r6, r4, #25
 80190ca:	e7f5      	b.n	80190b8 <_printf_i+0x220>
 80190cc:	0801d52b 	.word	0x0801d52b
 80190d0:	0801d53c 	.word	0x0801d53c

080190d4 <_scanf_chars>:
 80190d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80190d8:	4615      	mov	r5, r2
 80190da:	688a      	ldr	r2, [r1, #8]
 80190dc:	4680      	mov	r8, r0
 80190de:	460c      	mov	r4, r1
 80190e0:	b932      	cbnz	r2, 80190f0 <_scanf_chars+0x1c>
 80190e2:	698a      	ldr	r2, [r1, #24]
 80190e4:	2a00      	cmp	r2, #0
 80190e6:	bf14      	ite	ne
 80190e8:	f04f 32ff 	movne.w	r2, #4294967295
 80190ec:	2201      	moveq	r2, #1
 80190ee:	608a      	str	r2, [r1, #8]
 80190f0:	6822      	ldr	r2, [r4, #0]
 80190f2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8019184 <_scanf_chars+0xb0>
 80190f6:	06d1      	lsls	r1, r2, #27
 80190f8:	bf5f      	itttt	pl
 80190fa:	681a      	ldrpl	r2, [r3, #0]
 80190fc:	1d11      	addpl	r1, r2, #4
 80190fe:	6019      	strpl	r1, [r3, #0]
 8019100:	6816      	ldrpl	r6, [r2, #0]
 8019102:	2700      	movs	r7, #0
 8019104:	69a0      	ldr	r0, [r4, #24]
 8019106:	b188      	cbz	r0, 801912c <_scanf_chars+0x58>
 8019108:	2801      	cmp	r0, #1
 801910a:	d107      	bne.n	801911c <_scanf_chars+0x48>
 801910c:	682b      	ldr	r3, [r5, #0]
 801910e:	781a      	ldrb	r2, [r3, #0]
 8019110:	6963      	ldr	r3, [r4, #20]
 8019112:	5c9b      	ldrb	r3, [r3, r2]
 8019114:	b953      	cbnz	r3, 801912c <_scanf_chars+0x58>
 8019116:	2f00      	cmp	r7, #0
 8019118:	d031      	beq.n	801917e <_scanf_chars+0xaa>
 801911a:	e022      	b.n	8019162 <_scanf_chars+0x8e>
 801911c:	2802      	cmp	r0, #2
 801911e:	d120      	bne.n	8019162 <_scanf_chars+0x8e>
 8019120:	682b      	ldr	r3, [r5, #0]
 8019122:	781b      	ldrb	r3, [r3, #0]
 8019124:	f819 3003 	ldrb.w	r3, [r9, r3]
 8019128:	071b      	lsls	r3, r3, #28
 801912a:	d41a      	bmi.n	8019162 <_scanf_chars+0x8e>
 801912c:	6823      	ldr	r3, [r4, #0]
 801912e:	06da      	lsls	r2, r3, #27
 8019130:	bf5e      	ittt	pl
 8019132:	682b      	ldrpl	r3, [r5, #0]
 8019134:	781b      	ldrbpl	r3, [r3, #0]
 8019136:	f806 3b01 	strbpl.w	r3, [r6], #1
 801913a:	682a      	ldr	r2, [r5, #0]
 801913c:	686b      	ldr	r3, [r5, #4]
 801913e:	3201      	adds	r2, #1
 8019140:	602a      	str	r2, [r5, #0]
 8019142:	68a2      	ldr	r2, [r4, #8]
 8019144:	3b01      	subs	r3, #1
 8019146:	3a01      	subs	r2, #1
 8019148:	606b      	str	r3, [r5, #4]
 801914a:	3701      	adds	r7, #1
 801914c:	60a2      	str	r2, [r4, #8]
 801914e:	b142      	cbz	r2, 8019162 <_scanf_chars+0x8e>
 8019150:	2b00      	cmp	r3, #0
 8019152:	dcd7      	bgt.n	8019104 <_scanf_chars+0x30>
 8019154:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8019158:	4629      	mov	r1, r5
 801915a:	4640      	mov	r0, r8
 801915c:	4798      	blx	r3
 801915e:	2800      	cmp	r0, #0
 8019160:	d0d0      	beq.n	8019104 <_scanf_chars+0x30>
 8019162:	6823      	ldr	r3, [r4, #0]
 8019164:	f013 0310 	ands.w	r3, r3, #16
 8019168:	d105      	bne.n	8019176 <_scanf_chars+0xa2>
 801916a:	68e2      	ldr	r2, [r4, #12]
 801916c:	3201      	adds	r2, #1
 801916e:	60e2      	str	r2, [r4, #12]
 8019170:	69a2      	ldr	r2, [r4, #24]
 8019172:	b102      	cbz	r2, 8019176 <_scanf_chars+0xa2>
 8019174:	7033      	strb	r3, [r6, #0]
 8019176:	6923      	ldr	r3, [r4, #16]
 8019178:	443b      	add	r3, r7
 801917a:	6123      	str	r3, [r4, #16]
 801917c:	2000      	movs	r0, #0
 801917e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019182:	bf00      	nop
 8019184:	0801d569 	.word	0x0801d569

08019188 <_scanf_i>:
 8019188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801918c:	4698      	mov	r8, r3
 801918e:	4b74      	ldr	r3, [pc, #464]	@ (8019360 <_scanf_i+0x1d8>)
 8019190:	460c      	mov	r4, r1
 8019192:	4682      	mov	sl, r0
 8019194:	4616      	mov	r6, r2
 8019196:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801919a:	b087      	sub	sp, #28
 801919c:	ab03      	add	r3, sp, #12
 801919e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80191a2:	4b70      	ldr	r3, [pc, #448]	@ (8019364 <_scanf_i+0x1dc>)
 80191a4:	69a1      	ldr	r1, [r4, #24]
 80191a6:	4a70      	ldr	r2, [pc, #448]	@ (8019368 <_scanf_i+0x1e0>)
 80191a8:	2903      	cmp	r1, #3
 80191aa:	bf08      	it	eq
 80191ac:	461a      	moveq	r2, r3
 80191ae:	68a3      	ldr	r3, [r4, #8]
 80191b0:	9201      	str	r2, [sp, #4]
 80191b2:	1e5a      	subs	r2, r3, #1
 80191b4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80191b8:	bf88      	it	hi
 80191ba:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80191be:	4627      	mov	r7, r4
 80191c0:	bf82      	ittt	hi
 80191c2:	eb03 0905 	addhi.w	r9, r3, r5
 80191c6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80191ca:	60a3      	strhi	r3, [r4, #8]
 80191cc:	f857 3b1c 	ldr.w	r3, [r7], #28
 80191d0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80191d4:	bf98      	it	ls
 80191d6:	f04f 0900 	movls.w	r9, #0
 80191da:	6023      	str	r3, [r4, #0]
 80191dc:	463d      	mov	r5, r7
 80191de:	f04f 0b00 	mov.w	fp, #0
 80191e2:	6831      	ldr	r1, [r6, #0]
 80191e4:	ab03      	add	r3, sp, #12
 80191e6:	7809      	ldrb	r1, [r1, #0]
 80191e8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80191ec:	2202      	movs	r2, #2
 80191ee:	f7e7 f827 	bl	8000240 <memchr>
 80191f2:	b328      	cbz	r0, 8019240 <_scanf_i+0xb8>
 80191f4:	f1bb 0f01 	cmp.w	fp, #1
 80191f8:	d159      	bne.n	80192ae <_scanf_i+0x126>
 80191fa:	6862      	ldr	r2, [r4, #4]
 80191fc:	b92a      	cbnz	r2, 801920a <_scanf_i+0x82>
 80191fe:	6822      	ldr	r2, [r4, #0]
 8019200:	2108      	movs	r1, #8
 8019202:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8019206:	6061      	str	r1, [r4, #4]
 8019208:	6022      	str	r2, [r4, #0]
 801920a:	6822      	ldr	r2, [r4, #0]
 801920c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8019210:	6022      	str	r2, [r4, #0]
 8019212:	68a2      	ldr	r2, [r4, #8]
 8019214:	1e51      	subs	r1, r2, #1
 8019216:	60a1      	str	r1, [r4, #8]
 8019218:	b192      	cbz	r2, 8019240 <_scanf_i+0xb8>
 801921a:	6832      	ldr	r2, [r6, #0]
 801921c:	1c51      	adds	r1, r2, #1
 801921e:	6031      	str	r1, [r6, #0]
 8019220:	7812      	ldrb	r2, [r2, #0]
 8019222:	f805 2b01 	strb.w	r2, [r5], #1
 8019226:	6872      	ldr	r2, [r6, #4]
 8019228:	3a01      	subs	r2, #1
 801922a:	2a00      	cmp	r2, #0
 801922c:	6072      	str	r2, [r6, #4]
 801922e:	dc07      	bgt.n	8019240 <_scanf_i+0xb8>
 8019230:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8019234:	4631      	mov	r1, r6
 8019236:	4650      	mov	r0, sl
 8019238:	4790      	blx	r2
 801923a:	2800      	cmp	r0, #0
 801923c:	f040 8085 	bne.w	801934a <_scanf_i+0x1c2>
 8019240:	f10b 0b01 	add.w	fp, fp, #1
 8019244:	f1bb 0f03 	cmp.w	fp, #3
 8019248:	d1cb      	bne.n	80191e2 <_scanf_i+0x5a>
 801924a:	6863      	ldr	r3, [r4, #4]
 801924c:	b90b      	cbnz	r3, 8019252 <_scanf_i+0xca>
 801924e:	230a      	movs	r3, #10
 8019250:	6063      	str	r3, [r4, #4]
 8019252:	6863      	ldr	r3, [r4, #4]
 8019254:	4945      	ldr	r1, [pc, #276]	@ (801936c <_scanf_i+0x1e4>)
 8019256:	6960      	ldr	r0, [r4, #20]
 8019258:	1ac9      	subs	r1, r1, r3
 801925a:	f000 f935 	bl	80194c8 <__sccl>
 801925e:	f04f 0b00 	mov.w	fp, #0
 8019262:	68a3      	ldr	r3, [r4, #8]
 8019264:	6822      	ldr	r2, [r4, #0]
 8019266:	2b00      	cmp	r3, #0
 8019268:	d03d      	beq.n	80192e6 <_scanf_i+0x15e>
 801926a:	6831      	ldr	r1, [r6, #0]
 801926c:	6960      	ldr	r0, [r4, #20]
 801926e:	f891 c000 	ldrb.w	ip, [r1]
 8019272:	f810 000c 	ldrb.w	r0, [r0, ip]
 8019276:	2800      	cmp	r0, #0
 8019278:	d035      	beq.n	80192e6 <_scanf_i+0x15e>
 801927a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801927e:	d124      	bne.n	80192ca <_scanf_i+0x142>
 8019280:	0510      	lsls	r0, r2, #20
 8019282:	d522      	bpl.n	80192ca <_scanf_i+0x142>
 8019284:	f10b 0b01 	add.w	fp, fp, #1
 8019288:	f1b9 0f00 	cmp.w	r9, #0
 801928c:	d003      	beq.n	8019296 <_scanf_i+0x10e>
 801928e:	3301      	adds	r3, #1
 8019290:	f109 39ff 	add.w	r9, r9, #4294967295
 8019294:	60a3      	str	r3, [r4, #8]
 8019296:	6873      	ldr	r3, [r6, #4]
 8019298:	3b01      	subs	r3, #1
 801929a:	2b00      	cmp	r3, #0
 801929c:	6073      	str	r3, [r6, #4]
 801929e:	dd1b      	ble.n	80192d8 <_scanf_i+0x150>
 80192a0:	6833      	ldr	r3, [r6, #0]
 80192a2:	3301      	adds	r3, #1
 80192a4:	6033      	str	r3, [r6, #0]
 80192a6:	68a3      	ldr	r3, [r4, #8]
 80192a8:	3b01      	subs	r3, #1
 80192aa:	60a3      	str	r3, [r4, #8]
 80192ac:	e7d9      	b.n	8019262 <_scanf_i+0xda>
 80192ae:	f1bb 0f02 	cmp.w	fp, #2
 80192b2:	d1ae      	bne.n	8019212 <_scanf_i+0x8a>
 80192b4:	6822      	ldr	r2, [r4, #0]
 80192b6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80192ba:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80192be:	d1c4      	bne.n	801924a <_scanf_i+0xc2>
 80192c0:	2110      	movs	r1, #16
 80192c2:	6061      	str	r1, [r4, #4]
 80192c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80192c8:	e7a2      	b.n	8019210 <_scanf_i+0x88>
 80192ca:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80192ce:	6022      	str	r2, [r4, #0]
 80192d0:	780b      	ldrb	r3, [r1, #0]
 80192d2:	f805 3b01 	strb.w	r3, [r5], #1
 80192d6:	e7de      	b.n	8019296 <_scanf_i+0x10e>
 80192d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80192dc:	4631      	mov	r1, r6
 80192de:	4650      	mov	r0, sl
 80192e0:	4798      	blx	r3
 80192e2:	2800      	cmp	r0, #0
 80192e4:	d0df      	beq.n	80192a6 <_scanf_i+0x11e>
 80192e6:	6823      	ldr	r3, [r4, #0]
 80192e8:	05d9      	lsls	r1, r3, #23
 80192ea:	d50d      	bpl.n	8019308 <_scanf_i+0x180>
 80192ec:	42bd      	cmp	r5, r7
 80192ee:	d909      	bls.n	8019304 <_scanf_i+0x17c>
 80192f0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80192f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80192f8:	4632      	mov	r2, r6
 80192fa:	4650      	mov	r0, sl
 80192fc:	4798      	blx	r3
 80192fe:	f105 39ff 	add.w	r9, r5, #4294967295
 8019302:	464d      	mov	r5, r9
 8019304:	42bd      	cmp	r5, r7
 8019306:	d028      	beq.n	801935a <_scanf_i+0x1d2>
 8019308:	6822      	ldr	r2, [r4, #0]
 801930a:	f012 0210 	ands.w	r2, r2, #16
 801930e:	d113      	bne.n	8019338 <_scanf_i+0x1b0>
 8019310:	702a      	strb	r2, [r5, #0]
 8019312:	6863      	ldr	r3, [r4, #4]
 8019314:	9e01      	ldr	r6, [sp, #4]
 8019316:	4639      	mov	r1, r7
 8019318:	4650      	mov	r0, sl
 801931a:	47b0      	blx	r6
 801931c:	f8d8 3000 	ldr.w	r3, [r8]
 8019320:	6821      	ldr	r1, [r4, #0]
 8019322:	1d1a      	adds	r2, r3, #4
 8019324:	f8c8 2000 	str.w	r2, [r8]
 8019328:	f011 0f20 	tst.w	r1, #32
 801932c:	681b      	ldr	r3, [r3, #0]
 801932e:	d00f      	beq.n	8019350 <_scanf_i+0x1c8>
 8019330:	6018      	str	r0, [r3, #0]
 8019332:	68e3      	ldr	r3, [r4, #12]
 8019334:	3301      	adds	r3, #1
 8019336:	60e3      	str	r3, [r4, #12]
 8019338:	6923      	ldr	r3, [r4, #16]
 801933a:	1bed      	subs	r5, r5, r7
 801933c:	445d      	add	r5, fp
 801933e:	442b      	add	r3, r5
 8019340:	6123      	str	r3, [r4, #16]
 8019342:	2000      	movs	r0, #0
 8019344:	b007      	add	sp, #28
 8019346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801934a:	f04f 0b00 	mov.w	fp, #0
 801934e:	e7ca      	b.n	80192e6 <_scanf_i+0x15e>
 8019350:	07ca      	lsls	r2, r1, #31
 8019352:	bf4c      	ite	mi
 8019354:	8018      	strhmi	r0, [r3, #0]
 8019356:	6018      	strpl	r0, [r3, #0]
 8019358:	e7eb      	b.n	8019332 <_scanf_i+0x1aa>
 801935a:	2001      	movs	r0, #1
 801935c:	e7f2      	b.n	8019344 <_scanf_i+0x1bc>
 801935e:	bf00      	nop
 8019360:	0801d43c 	.word	0x0801d43c
 8019364:	0801985d 	.word	0x0801985d
 8019368:	0801993d 	.word	0x0801993d
 801936c:	0801d55d 	.word	0x0801d55d

08019370 <__sflush_r>:
 8019370:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019378:	0716      	lsls	r6, r2, #28
 801937a:	4605      	mov	r5, r0
 801937c:	460c      	mov	r4, r1
 801937e:	d454      	bmi.n	801942a <__sflush_r+0xba>
 8019380:	684b      	ldr	r3, [r1, #4]
 8019382:	2b00      	cmp	r3, #0
 8019384:	dc02      	bgt.n	801938c <__sflush_r+0x1c>
 8019386:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019388:	2b00      	cmp	r3, #0
 801938a:	dd48      	ble.n	801941e <__sflush_r+0xae>
 801938c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801938e:	2e00      	cmp	r6, #0
 8019390:	d045      	beq.n	801941e <__sflush_r+0xae>
 8019392:	2300      	movs	r3, #0
 8019394:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019398:	682f      	ldr	r7, [r5, #0]
 801939a:	6a21      	ldr	r1, [r4, #32]
 801939c:	602b      	str	r3, [r5, #0]
 801939e:	d030      	beq.n	8019402 <__sflush_r+0x92>
 80193a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80193a2:	89a3      	ldrh	r3, [r4, #12]
 80193a4:	0759      	lsls	r1, r3, #29
 80193a6:	d505      	bpl.n	80193b4 <__sflush_r+0x44>
 80193a8:	6863      	ldr	r3, [r4, #4]
 80193aa:	1ad2      	subs	r2, r2, r3
 80193ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80193ae:	b10b      	cbz	r3, 80193b4 <__sflush_r+0x44>
 80193b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80193b2:	1ad2      	subs	r2, r2, r3
 80193b4:	2300      	movs	r3, #0
 80193b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80193b8:	6a21      	ldr	r1, [r4, #32]
 80193ba:	4628      	mov	r0, r5
 80193bc:	47b0      	blx	r6
 80193be:	1c43      	adds	r3, r0, #1
 80193c0:	89a3      	ldrh	r3, [r4, #12]
 80193c2:	d106      	bne.n	80193d2 <__sflush_r+0x62>
 80193c4:	6829      	ldr	r1, [r5, #0]
 80193c6:	291d      	cmp	r1, #29
 80193c8:	d82b      	bhi.n	8019422 <__sflush_r+0xb2>
 80193ca:	4a2a      	ldr	r2, [pc, #168]	@ (8019474 <__sflush_r+0x104>)
 80193cc:	40ca      	lsrs	r2, r1
 80193ce:	07d6      	lsls	r6, r2, #31
 80193d0:	d527      	bpl.n	8019422 <__sflush_r+0xb2>
 80193d2:	2200      	movs	r2, #0
 80193d4:	6062      	str	r2, [r4, #4]
 80193d6:	04d9      	lsls	r1, r3, #19
 80193d8:	6922      	ldr	r2, [r4, #16]
 80193da:	6022      	str	r2, [r4, #0]
 80193dc:	d504      	bpl.n	80193e8 <__sflush_r+0x78>
 80193de:	1c42      	adds	r2, r0, #1
 80193e0:	d101      	bne.n	80193e6 <__sflush_r+0x76>
 80193e2:	682b      	ldr	r3, [r5, #0]
 80193e4:	b903      	cbnz	r3, 80193e8 <__sflush_r+0x78>
 80193e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80193e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80193ea:	602f      	str	r7, [r5, #0]
 80193ec:	b1b9      	cbz	r1, 801941e <__sflush_r+0xae>
 80193ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80193f2:	4299      	cmp	r1, r3
 80193f4:	d002      	beq.n	80193fc <__sflush_r+0x8c>
 80193f6:	4628      	mov	r0, r5
 80193f8:	f7ff f82c 	bl	8018454 <_free_r>
 80193fc:	2300      	movs	r3, #0
 80193fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8019400:	e00d      	b.n	801941e <__sflush_r+0xae>
 8019402:	2301      	movs	r3, #1
 8019404:	4628      	mov	r0, r5
 8019406:	47b0      	blx	r6
 8019408:	4602      	mov	r2, r0
 801940a:	1c50      	adds	r0, r2, #1
 801940c:	d1c9      	bne.n	80193a2 <__sflush_r+0x32>
 801940e:	682b      	ldr	r3, [r5, #0]
 8019410:	2b00      	cmp	r3, #0
 8019412:	d0c6      	beq.n	80193a2 <__sflush_r+0x32>
 8019414:	2b1d      	cmp	r3, #29
 8019416:	d001      	beq.n	801941c <__sflush_r+0xac>
 8019418:	2b16      	cmp	r3, #22
 801941a:	d11e      	bne.n	801945a <__sflush_r+0xea>
 801941c:	602f      	str	r7, [r5, #0]
 801941e:	2000      	movs	r0, #0
 8019420:	e022      	b.n	8019468 <__sflush_r+0xf8>
 8019422:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019426:	b21b      	sxth	r3, r3
 8019428:	e01b      	b.n	8019462 <__sflush_r+0xf2>
 801942a:	690f      	ldr	r7, [r1, #16]
 801942c:	2f00      	cmp	r7, #0
 801942e:	d0f6      	beq.n	801941e <__sflush_r+0xae>
 8019430:	0793      	lsls	r3, r2, #30
 8019432:	680e      	ldr	r6, [r1, #0]
 8019434:	bf08      	it	eq
 8019436:	694b      	ldreq	r3, [r1, #20]
 8019438:	600f      	str	r7, [r1, #0]
 801943a:	bf18      	it	ne
 801943c:	2300      	movne	r3, #0
 801943e:	eba6 0807 	sub.w	r8, r6, r7
 8019442:	608b      	str	r3, [r1, #8]
 8019444:	f1b8 0f00 	cmp.w	r8, #0
 8019448:	dde9      	ble.n	801941e <__sflush_r+0xae>
 801944a:	6a21      	ldr	r1, [r4, #32]
 801944c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801944e:	4643      	mov	r3, r8
 8019450:	463a      	mov	r2, r7
 8019452:	4628      	mov	r0, r5
 8019454:	47b0      	blx	r6
 8019456:	2800      	cmp	r0, #0
 8019458:	dc08      	bgt.n	801946c <__sflush_r+0xfc>
 801945a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801945e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019462:	81a3      	strh	r3, [r4, #12]
 8019464:	f04f 30ff 	mov.w	r0, #4294967295
 8019468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801946c:	4407      	add	r7, r0
 801946e:	eba8 0800 	sub.w	r8, r8, r0
 8019472:	e7e7      	b.n	8019444 <__sflush_r+0xd4>
 8019474:	20400001 	.word	0x20400001

08019478 <_fflush_r>:
 8019478:	b538      	push	{r3, r4, r5, lr}
 801947a:	690b      	ldr	r3, [r1, #16]
 801947c:	4605      	mov	r5, r0
 801947e:	460c      	mov	r4, r1
 8019480:	b913      	cbnz	r3, 8019488 <_fflush_r+0x10>
 8019482:	2500      	movs	r5, #0
 8019484:	4628      	mov	r0, r5
 8019486:	bd38      	pop	{r3, r4, r5, pc}
 8019488:	b118      	cbz	r0, 8019492 <_fflush_r+0x1a>
 801948a:	6a03      	ldr	r3, [r0, #32]
 801948c:	b90b      	cbnz	r3, 8019492 <_fflush_r+0x1a>
 801948e:	f7fe fdc3 	bl	8018018 <__sinit>
 8019492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019496:	2b00      	cmp	r3, #0
 8019498:	d0f3      	beq.n	8019482 <_fflush_r+0xa>
 801949a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801949c:	07d0      	lsls	r0, r2, #31
 801949e:	d404      	bmi.n	80194aa <_fflush_r+0x32>
 80194a0:	0599      	lsls	r1, r3, #22
 80194a2:	d402      	bmi.n	80194aa <_fflush_r+0x32>
 80194a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80194a6:	f7fe ffc4 	bl	8018432 <__retarget_lock_acquire_recursive>
 80194aa:	4628      	mov	r0, r5
 80194ac:	4621      	mov	r1, r4
 80194ae:	f7ff ff5f 	bl	8019370 <__sflush_r>
 80194b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80194b4:	07da      	lsls	r2, r3, #31
 80194b6:	4605      	mov	r5, r0
 80194b8:	d4e4      	bmi.n	8019484 <_fflush_r+0xc>
 80194ba:	89a3      	ldrh	r3, [r4, #12]
 80194bc:	059b      	lsls	r3, r3, #22
 80194be:	d4e1      	bmi.n	8019484 <_fflush_r+0xc>
 80194c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80194c2:	f7fe ffb7 	bl	8018434 <__retarget_lock_release_recursive>
 80194c6:	e7dd      	b.n	8019484 <_fflush_r+0xc>

080194c8 <__sccl>:
 80194c8:	b570      	push	{r4, r5, r6, lr}
 80194ca:	780b      	ldrb	r3, [r1, #0]
 80194cc:	4604      	mov	r4, r0
 80194ce:	2b5e      	cmp	r3, #94	@ 0x5e
 80194d0:	bf0b      	itete	eq
 80194d2:	784b      	ldrbeq	r3, [r1, #1]
 80194d4:	1c4a      	addne	r2, r1, #1
 80194d6:	1c8a      	addeq	r2, r1, #2
 80194d8:	2100      	movne	r1, #0
 80194da:	bf08      	it	eq
 80194dc:	2101      	moveq	r1, #1
 80194de:	3801      	subs	r0, #1
 80194e0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80194e4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80194e8:	42a8      	cmp	r0, r5
 80194ea:	d1fb      	bne.n	80194e4 <__sccl+0x1c>
 80194ec:	b90b      	cbnz	r3, 80194f2 <__sccl+0x2a>
 80194ee:	1e50      	subs	r0, r2, #1
 80194f0:	bd70      	pop	{r4, r5, r6, pc}
 80194f2:	f081 0101 	eor.w	r1, r1, #1
 80194f6:	54e1      	strb	r1, [r4, r3]
 80194f8:	4610      	mov	r0, r2
 80194fa:	4602      	mov	r2, r0
 80194fc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8019500:	2d2d      	cmp	r5, #45	@ 0x2d
 8019502:	d005      	beq.n	8019510 <__sccl+0x48>
 8019504:	2d5d      	cmp	r5, #93	@ 0x5d
 8019506:	d016      	beq.n	8019536 <__sccl+0x6e>
 8019508:	2d00      	cmp	r5, #0
 801950a:	d0f1      	beq.n	80194f0 <__sccl+0x28>
 801950c:	462b      	mov	r3, r5
 801950e:	e7f2      	b.n	80194f6 <__sccl+0x2e>
 8019510:	7846      	ldrb	r6, [r0, #1]
 8019512:	2e5d      	cmp	r6, #93	@ 0x5d
 8019514:	d0fa      	beq.n	801950c <__sccl+0x44>
 8019516:	42b3      	cmp	r3, r6
 8019518:	dcf8      	bgt.n	801950c <__sccl+0x44>
 801951a:	3002      	adds	r0, #2
 801951c:	461a      	mov	r2, r3
 801951e:	3201      	adds	r2, #1
 8019520:	4296      	cmp	r6, r2
 8019522:	54a1      	strb	r1, [r4, r2]
 8019524:	dcfb      	bgt.n	801951e <__sccl+0x56>
 8019526:	1af2      	subs	r2, r6, r3
 8019528:	3a01      	subs	r2, #1
 801952a:	1c5d      	adds	r5, r3, #1
 801952c:	42b3      	cmp	r3, r6
 801952e:	bfa8      	it	ge
 8019530:	2200      	movge	r2, #0
 8019532:	18ab      	adds	r3, r5, r2
 8019534:	e7e1      	b.n	80194fa <__sccl+0x32>
 8019536:	4610      	mov	r0, r2
 8019538:	e7da      	b.n	80194f0 <__sccl+0x28>

0801953a <__submore>:
 801953a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801953e:	460c      	mov	r4, r1
 8019540:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8019542:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019546:	4299      	cmp	r1, r3
 8019548:	d11d      	bne.n	8019586 <__submore+0x4c>
 801954a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801954e:	f7fe fc4b 	bl	8017de8 <_malloc_r>
 8019552:	b918      	cbnz	r0, 801955c <__submore+0x22>
 8019554:	f04f 30ff 	mov.w	r0, #4294967295
 8019558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801955c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019560:	63a3      	str	r3, [r4, #56]	@ 0x38
 8019562:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8019566:	6360      	str	r0, [r4, #52]	@ 0x34
 8019568:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801956c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8019570:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8019574:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8019578:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801957c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8019580:	6020      	str	r0, [r4, #0]
 8019582:	2000      	movs	r0, #0
 8019584:	e7e8      	b.n	8019558 <__submore+0x1e>
 8019586:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8019588:	0077      	lsls	r7, r6, #1
 801958a:	463a      	mov	r2, r7
 801958c:	f000 f8be 	bl	801970c <_realloc_r>
 8019590:	4605      	mov	r5, r0
 8019592:	2800      	cmp	r0, #0
 8019594:	d0de      	beq.n	8019554 <__submore+0x1a>
 8019596:	eb00 0806 	add.w	r8, r0, r6
 801959a:	4601      	mov	r1, r0
 801959c:	4632      	mov	r2, r6
 801959e:	4640      	mov	r0, r8
 80195a0:	f7fe ff49 	bl	8018436 <memcpy>
 80195a4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80195a8:	f8c4 8000 	str.w	r8, [r4]
 80195ac:	e7e9      	b.n	8019582 <__submore+0x48>

080195ae <__swbuf_r>:
 80195ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195b0:	460e      	mov	r6, r1
 80195b2:	4614      	mov	r4, r2
 80195b4:	4605      	mov	r5, r0
 80195b6:	b118      	cbz	r0, 80195c0 <__swbuf_r+0x12>
 80195b8:	6a03      	ldr	r3, [r0, #32]
 80195ba:	b90b      	cbnz	r3, 80195c0 <__swbuf_r+0x12>
 80195bc:	f7fe fd2c 	bl	8018018 <__sinit>
 80195c0:	69a3      	ldr	r3, [r4, #24]
 80195c2:	60a3      	str	r3, [r4, #8]
 80195c4:	89a3      	ldrh	r3, [r4, #12]
 80195c6:	071a      	lsls	r2, r3, #28
 80195c8:	d501      	bpl.n	80195ce <__swbuf_r+0x20>
 80195ca:	6923      	ldr	r3, [r4, #16]
 80195cc:	b943      	cbnz	r3, 80195e0 <__swbuf_r+0x32>
 80195ce:	4621      	mov	r1, r4
 80195d0:	4628      	mov	r0, r5
 80195d2:	f000 f82b 	bl	801962c <__swsetup_r>
 80195d6:	b118      	cbz	r0, 80195e0 <__swbuf_r+0x32>
 80195d8:	f04f 37ff 	mov.w	r7, #4294967295
 80195dc:	4638      	mov	r0, r7
 80195de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80195e0:	6823      	ldr	r3, [r4, #0]
 80195e2:	6922      	ldr	r2, [r4, #16]
 80195e4:	1a98      	subs	r0, r3, r2
 80195e6:	6963      	ldr	r3, [r4, #20]
 80195e8:	b2f6      	uxtb	r6, r6
 80195ea:	4283      	cmp	r3, r0
 80195ec:	4637      	mov	r7, r6
 80195ee:	dc05      	bgt.n	80195fc <__swbuf_r+0x4e>
 80195f0:	4621      	mov	r1, r4
 80195f2:	4628      	mov	r0, r5
 80195f4:	f7ff ff40 	bl	8019478 <_fflush_r>
 80195f8:	2800      	cmp	r0, #0
 80195fa:	d1ed      	bne.n	80195d8 <__swbuf_r+0x2a>
 80195fc:	68a3      	ldr	r3, [r4, #8]
 80195fe:	3b01      	subs	r3, #1
 8019600:	60a3      	str	r3, [r4, #8]
 8019602:	6823      	ldr	r3, [r4, #0]
 8019604:	1c5a      	adds	r2, r3, #1
 8019606:	6022      	str	r2, [r4, #0]
 8019608:	701e      	strb	r6, [r3, #0]
 801960a:	6962      	ldr	r2, [r4, #20]
 801960c:	1c43      	adds	r3, r0, #1
 801960e:	429a      	cmp	r2, r3
 8019610:	d004      	beq.n	801961c <__swbuf_r+0x6e>
 8019612:	89a3      	ldrh	r3, [r4, #12]
 8019614:	07db      	lsls	r3, r3, #31
 8019616:	d5e1      	bpl.n	80195dc <__swbuf_r+0x2e>
 8019618:	2e0a      	cmp	r6, #10
 801961a:	d1df      	bne.n	80195dc <__swbuf_r+0x2e>
 801961c:	4621      	mov	r1, r4
 801961e:	4628      	mov	r0, r5
 8019620:	f7ff ff2a 	bl	8019478 <_fflush_r>
 8019624:	2800      	cmp	r0, #0
 8019626:	d0d9      	beq.n	80195dc <__swbuf_r+0x2e>
 8019628:	e7d6      	b.n	80195d8 <__swbuf_r+0x2a>
	...

0801962c <__swsetup_r>:
 801962c:	b538      	push	{r3, r4, r5, lr}
 801962e:	4b29      	ldr	r3, [pc, #164]	@ (80196d4 <__swsetup_r+0xa8>)
 8019630:	4605      	mov	r5, r0
 8019632:	6818      	ldr	r0, [r3, #0]
 8019634:	460c      	mov	r4, r1
 8019636:	b118      	cbz	r0, 8019640 <__swsetup_r+0x14>
 8019638:	6a03      	ldr	r3, [r0, #32]
 801963a:	b90b      	cbnz	r3, 8019640 <__swsetup_r+0x14>
 801963c:	f7fe fcec 	bl	8018018 <__sinit>
 8019640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019644:	0719      	lsls	r1, r3, #28
 8019646:	d422      	bmi.n	801968e <__swsetup_r+0x62>
 8019648:	06da      	lsls	r2, r3, #27
 801964a:	d407      	bmi.n	801965c <__swsetup_r+0x30>
 801964c:	2209      	movs	r2, #9
 801964e:	602a      	str	r2, [r5, #0]
 8019650:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019654:	81a3      	strh	r3, [r4, #12]
 8019656:	f04f 30ff 	mov.w	r0, #4294967295
 801965a:	e033      	b.n	80196c4 <__swsetup_r+0x98>
 801965c:	0758      	lsls	r0, r3, #29
 801965e:	d512      	bpl.n	8019686 <__swsetup_r+0x5a>
 8019660:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019662:	b141      	cbz	r1, 8019676 <__swsetup_r+0x4a>
 8019664:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019668:	4299      	cmp	r1, r3
 801966a:	d002      	beq.n	8019672 <__swsetup_r+0x46>
 801966c:	4628      	mov	r0, r5
 801966e:	f7fe fef1 	bl	8018454 <_free_r>
 8019672:	2300      	movs	r3, #0
 8019674:	6363      	str	r3, [r4, #52]	@ 0x34
 8019676:	89a3      	ldrh	r3, [r4, #12]
 8019678:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801967c:	81a3      	strh	r3, [r4, #12]
 801967e:	2300      	movs	r3, #0
 8019680:	6063      	str	r3, [r4, #4]
 8019682:	6923      	ldr	r3, [r4, #16]
 8019684:	6023      	str	r3, [r4, #0]
 8019686:	89a3      	ldrh	r3, [r4, #12]
 8019688:	f043 0308 	orr.w	r3, r3, #8
 801968c:	81a3      	strh	r3, [r4, #12]
 801968e:	6923      	ldr	r3, [r4, #16]
 8019690:	b94b      	cbnz	r3, 80196a6 <__swsetup_r+0x7a>
 8019692:	89a3      	ldrh	r3, [r4, #12]
 8019694:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019698:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801969c:	d003      	beq.n	80196a6 <__swsetup_r+0x7a>
 801969e:	4621      	mov	r1, r4
 80196a0:	4628      	mov	r0, r5
 80196a2:	f000 f973 	bl	801998c <__smakebuf_r>
 80196a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80196aa:	f013 0201 	ands.w	r2, r3, #1
 80196ae:	d00a      	beq.n	80196c6 <__swsetup_r+0x9a>
 80196b0:	2200      	movs	r2, #0
 80196b2:	60a2      	str	r2, [r4, #8]
 80196b4:	6962      	ldr	r2, [r4, #20]
 80196b6:	4252      	negs	r2, r2
 80196b8:	61a2      	str	r2, [r4, #24]
 80196ba:	6922      	ldr	r2, [r4, #16]
 80196bc:	b942      	cbnz	r2, 80196d0 <__swsetup_r+0xa4>
 80196be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80196c2:	d1c5      	bne.n	8019650 <__swsetup_r+0x24>
 80196c4:	bd38      	pop	{r3, r4, r5, pc}
 80196c6:	0799      	lsls	r1, r3, #30
 80196c8:	bf58      	it	pl
 80196ca:	6962      	ldrpl	r2, [r4, #20]
 80196cc:	60a2      	str	r2, [r4, #8]
 80196ce:	e7f4      	b.n	80196ba <__swsetup_r+0x8e>
 80196d0:	2000      	movs	r0, #0
 80196d2:	e7f7      	b.n	80196c4 <__swsetup_r+0x98>
 80196d4:	20000088 	.word	0x20000088

080196d8 <memmove>:
 80196d8:	4288      	cmp	r0, r1
 80196da:	b510      	push	{r4, lr}
 80196dc:	eb01 0402 	add.w	r4, r1, r2
 80196e0:	d902      	bls.n	80196e8 <memmove+0x10>
 80196e2:	4284      	cmp	r4, r0
 80196e4:	4623      	mov	r3, r4
 80196e6:	d807      	bhi.n	80196f8 <memmove+0x20>
 80196e8:	1e43      	subs	r3, r0, #1
 80196ea:	42a1      	cmp	r1, r4
 80196ec:	d008      	beq.n	8019700 <memmove+0x28>
 80196ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80196f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80196f6:	e7f8      	b.n	80196ea <memmove+0x12>
 80196f8:	4402      	add	r2, r0
 80196fa:	4601      	mov	r1, r0
 80196fc:	428a      	cmp	r2, r1
 80196fe:	d100      	bne.n	8019702 <memmove+0x2a>
 8019700:	bd10      	pop	{r4, pc}
 8019702:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019706:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801970a:	e7f7      	b.n	80196fc <memmove+0x24>

0801970c <_realloc_r>:
 801970c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019710:	4607      	mov	r7, r0
 8019712:	4614      	mov	r4, r2
 8019714:	460d      	mov	r5, r1
 8019716:	b921      	cbnz	r1, 8019722 <_realloc_r+0x16>
 8019718:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801971c:	4611      	mov	r1, r2
 801971e:	f7fe bb63 	b.w	8017de8 <_malloc_r>
 8019722:	b92a      	cbnz	r2, 8019730 <_realloc_r+0x24>
 8019724:	f7fe fe96 	bl	8018454 <_free_r>
 8019728:	4625      	mov	r5, r4
 801972a:	4628      	mov	r0, r5
 801972c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019730:	f000 f98a 	bl	8019a48 <_malloc_usable_size_r>
 8019734:	4284      	cmp	r4, r0
 8019736:	4606      	mov	r6, r0
 8019738:	d802      	bhi.n	8019740 <_realloc_r+0x34>
 801973a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801973e:	d8f4      	bhi.n	801972a <_realloc_r+0x1e>
 8019740:	4621      	mov	r1, r4
 8019742:	4638      	mov	r0, r7
 8019744:	f7fe fb50 	bl	8017de8 <_malloc_r>
 8019748:	4680      	mov	r8, r0
 801974a:	b908      	cbnz	r0, 8019750 <_realloc_r+0x44>
 801974c:	4645      	mov	r5, r8
 801974e:	e7ec      	b.n	801972a <_realloc_r+0x1e>
 8019750:	42b4      	cmp	r4, r6
 8019752:	4622      	mov	r2, r4
 8019754:	4629      	mov	r1, r5
 8019756:	bf28      	it	cs
 8019758:	4632      	movcs	r2, r6
 801975a:	f7fe fe6c 	bl	8018436 <memcpy>
 801975e:	4629      	mov	r1, r5
 8019760:	4638      	mov	r0, r7
 8019762:	f7fe fe77 	bl	8018454 <_free_r>
 8019766:	e7f1      	b.n	801974c <_realloc_r+0x40>

08019768 <_strtol_l.isra.0>:
 8019768:	2b24      	cmp	r3, #36	@ 0x24
 801976a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801976e:	4686      	mov	lr, r0
 8019770:	4690      	mov	r8, r2
 8019772:	d801      	bhi.n	8019778 <_strtol_l.isra.0+0x10>
 8019774:	2b01      	cmp	r3, #1
 8019776:	d106      	bne.n	8019786 <_strtol_l.isra.0+0x1e>
 8019778:	f7fe fe30 	bl	80183dc <__errno>
 801977c:	2316      	movs	r3, #22
 801977e:	6003      	str	r3, [r0, #0]
 8019780:	2000      	movs	r0, #0
 8019782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019786:	4834      	ldr	r0, [pc, #208]	@ (8019858 <_strtol_l.isra.0+0xf0>)
 8019788:	460d      	mov	r5, r1
 801978a:	462a      	mov	r2, r5
 801978c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019790:	5d06      	ldrb	r6, [r0, r4]
 8019792:	f016 0608 	ands.w	r6, r6, #8
 8019796:	d1f8      	bne.n	801978a <_strtol_l.isra.0+0x22>
 8019798:	2c2d      	cmp	r4, #45	@ 0x2d
 801979a:	d110      	bne.n	80197be <_strtol_l.isra.0+0x56>
 801979c:	782c      	ldrb	r4, [r5, #0]
 801979e:	2601      	movs	r6, #1
 80197a0:	1c95      	adds	r5, r2, #2
 80197a2:	f033 0210 	bics.w	r2, r3, #16
 80197a6:	d115      	bne.n	80197d4 <_strtol_l.isra.0+0x6c>
 80197a8:	2c30      	cmp	r4, #48	@ 0x30
 80197aa:	d10d      	bne.n	80197c8 <_strtol_l.isra.0+0x60>
 80197ac:	782a      	ldrb	r2, [r5, #0]
 80197ae:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80197b2:	2a58      	cmp	r2, #88	@ 0x58
 80197b4:	d108      	bne.n	80197c8 <_strtol_l.isra.0+0x60>
 80197b6:	786c      	ldrb	r4, [r5, #1]
 80197b8:	3502      	adds	r5, #2
 80197ba:	2310      	movs	r3, #16
 80197bc:	e00a      	b.n	80197d4 <_strtol_l.isra.0+0x6c>
 80197be:	2c2b      	cmp	r4, #43	@ 0x2b
 80197c0:	bf04      	itt	eq
 80197c2:	782c      	ldrbeq	r4, [r5, #0]
 80197c4:	1c95      	addeq	r5, r2, #2
 80197c6:	e7ec      	b.n	80197a2 <_strtol_l.isra.0+0x3a>
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	d1f6      	bne.n	80197ba <_strtol_l.isra.0+0x52>
 80197cc:	2c30      	cmp	r4, #48	@ 0x30
 80197ce:	bf14      	ite	ne
 80197d0:	230a      	movne	r3, #10
 80197d2:	2308      	moveq	r3, #8
 80197d4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80197d8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80197dc:	2200      	movs	r2, #0
 80197de:	fbbc f9f3 	udiv	r9, ip, r3
 80197e2:	4610      	mov	r0, r2
 80197e4:	fb03 ca19 	mls	sl, r3, r9, ip
 80197e8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80197ec:	2f09      	cmp	r7, #9
 80197ee:	d80f      	bhi.n	8019810 <_strtol_l.isra.0+0xa8>
 80197f0:	463c      	mov	r4, r7
 80197f2:	42a3      	cmp	r3, r4
 80197f4:	dd1b      	ble.n	801982e <_strtol_l.isra.0+0xc6>
 80197f6:	1c57      	adds	r7, r2, #1
 80197f8:	d007      	beq.n	801980a <_strtol_l.isra.0+0xa2>
 80197fa:	4581      	cmp	r9, r0
 80197fc:	d314      	bcc.n	8019828 <_strtol_l.isra.0+0xc0>
 80197fe:	d101      	bne.n	8019804 <_strtol_l.isra.0+0x9c>
 8019800:	45a2      	cmp	sl, r4
 8019802:	db11      	blt.n	8019828 <_strtol_l.isra.0+0xc0>
 8019804:	fb00 4003 	mla	r0, r0, r3, r4
 8019808:	2201      	movs	r2, #1
 801980a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801980e:	e7eb      	b.n	80197e8 <_strtol_l.isra.0+0x80>
 8019810:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8019814:	2f19      	cmp	r7, #25
 8019816:	d801      	bhi.n	801981c <_strtol_l.isra.0+0xb4>
 8019818:	3c37      	subs	r4, #55	@ 0x37
 801981a:	e7ea      	b.n	80197f2 <_strtol_l.isra.0+0x8a>
 801981c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8019820:	2f19      	cmp	r7, #25
 8019822:	d804      	bhi.n	801982e <_strtol_l.isra.0+0xc6>
 8019824:	3c57      	subs	r4, #87	@ 0x57
 8019826:	e7e4      	b.n	80197f2 <_strtol_l.isra.0+0x8a>
 8019828:	f04f 32ff 	mov.w	r2, #4294967295
 801982c:	e7ed      	b.n	801980a <_strtol_l.isra.0+0xa2>
 801982e:	1c53      	adds	r3, r2, #1
 8019830:	d108      	bne.n	8019844 <_strtol_l.isra.0+0xdc>
 8019832:	2322      	movs	r3, #34	@ 0x22
 8019834:	f8ce 3000 	str.w	r3, [lr]
 8019838:	4660      	mov	r0, ip
 801983a:	f1b8 0f00 	cmp.w	r8, #0
 801983e:	d0a0      	beq.n	8019782 <_strtol_l.isra.0+0x1a>
 8019840:	1e69      	subs	r1, r5, #1
 8019842:	e006      	b.n	8019852 <_strtol_l.isra.0+0xea>
 8019844:	b106      	cbz	r6, 8019848 <_strtol_l.isra.0+0xe0>
 8019846:	4240      	negs	r0, r0
 8019848:	f1b8 0f00 	cmp.w	r8, #0
 801984c:	d099      	beq.n	8019782 <_strtol_l.isra.0+0x1a>
 801984e:	2a00      	cmp	r2, #0
 8019850:	d1f6      	bne.n	8019840 <_strtol_l.isra.0+0xd8>
 8019852:	f8c8 1000 	str.w	r1, [r8]
 8019856:	e794      	b.n	8019782 <_strtol_l.isra.0+0x1a>
 8019858:	0801d569 	.word	0x0801d569

0801985c <_strtol_r>:
 801985c:	f7ff bf84 	b.w	8019768 <_strtol_l.isra.0>

08019860 <_strtoul_l.isra.0>:
 8019860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019864:	4e34      	ldr	r6, [pc, #208]	@ (8019938 <_strtoul_l.isra.0+0xd8>)
 8019866:	4686      	mov	lr, r0
 8019868:	460d      	mov	r5, r1
 801986a:	4628      	mov	r0, r5
 801986c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019870:	5d37      	ldrb	r7, [r6, r4]
 8019872:	f017 0708 	ands.w	r7, r7, #8
 8019876:	d1f8      	bne.n	801986a <_strtoul_l.isra.0+0xa>
 8019878:	2c2d      	cmp	r4, #45	@ 0x2d
 801987a:	d110      	bne.n	801989e <_strtoul_l.isra.0+0x3e>
 801987c:	782c      	ldrb	r4, [r5, #0]
 801987e:	2701      	movs	r7, #1
 8019880:	1c85      	adds	r5, r0, #2
 8019882:	f033 0010 	bics.w	r0, r3, #16
 8019886:	d115      	bne.n	80198b4 <_strtoul_l.isra.0+0x54>
 8019888:	2c30      	cmp	r4, #48	@ 0x30
 801988a:	d10d      	bne.n	80198a8 <_strtoul_l.isra.0+0x48>
 801988c:	7828      	ldrb	r0, [r5, #0]
 801988e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8019892:	2858      	cmp	r0, #88	@ 0x58
 8019894:	d108      	bne.n	80198a8 <_strtoul_l.isra.0+0x48>
 8019896:	786c      	ldrb	r4, [r5, #1]
 8019898:	3502      	adds	r5, #2
 801989a:	2310      	movs	r3, #16
 801989c:	e00a      	b.n	80198b4 <_strtoul_l.isra.0+0x54>
 801989e:	2c2b      	cmp	r4, #43	@ 0x2b
 80198a0:	bf04      	itt	eq
 80198a2:	782c      	ldrbeq	r4, [r5, #0]
 80198a4:	1c85      	addeq	r5, r0, #2
 80198a6:	e7ec      	b.n	8019882 <_strtoul_l.isra.0+0x22>
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	d1f6      	bne.n	801989a <_strtoul_l.isra.0+0x3a>
 80198ac:	2c30      	cmp	r4, #48	@ 0x30
 80198ae:	bf14      	ite	ne
 80198b0:	230a      	movne	r3, #10
 80198b2:	2308      	moveq	r3, #8
 80198b4:	f04f 38ff 	mov.w	r8, #4294967295
 80198b8:	2600      	movs	r6, #0
 80198ba:	fbb8 f8f3 	udiv	r8, r8, r3
 80198be:	fb03 f908 	mul.w	r9, r3, r8
 80198c2:	ea6f 0909 	mvn.w	r9, r9
 80198c6:	4630      	mov	r0, r6
 80198c8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80198cc:	f1bc 0f09 	cmp.w	ip, #9
 80198d0:	d810      	bhi.n	80198f4 <_strtoul_l.isra.0+0x94>
 80198d2:	4664      	mov	r4, ip
 80198d4:	42a3      	cmp	r3, r4
 80198d6:	dd1e      	ble.n	8019916 <_strtoul_l.isra.0+0xb6>
 80198d8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80198dc:	d007      	beq.n	80198ee <_strtoul_l.isra.0+0x8e>
 80198de:	4580      	cmp	r8, r0
 80198e0:	d316      	bcc.n	8019910 <_strtoul_l.isra.0+0xb0>
 80198e2:	d101      	bne.n	80198e8 <_strtoul_l.isra.0+0x88>
 80198e4:	45a1      	cmp	r9, r4
 80198e6:	db13      	blt.n	8019910 <_strtoul_l.isra.0+0xb0>
 80198e8:	fb00 4003 	mla	r0, r0, r3, r4
 80198ec:	2601      	movs	r6, #1
 80198ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80198f2:	e7e9      	b.n	80198c8 <_strtoul_l.isra.0+0x68>
 80198f4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80198f8:	f1bc 0f19 	cmp.w	ip, #25
 80198fc:	d801      	bhi.n	8019902 <_strtoul_l.isra.0+0xa2>
 80198fe:	3c37      	subs	r4, #55	@ 0x37
 8019900:	e7e8      	b.n	80198d4 <_strtoul_l.isra.0+0x74>
 8019902:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8019906:	f1bc 0f19 	cmp.w	ip, #25
 801990a:	d804      	bhi.n	8019916 <_strtoul_l.isra.0+0xb6>
 801990c:	3c57      	subs	r4, #87	@ 0x57
 801990e:	e7e1      	b.n	80198d4 <_strtoul_l.isra.0+0x74>
 8019910:	f04f 36ff 	mov.w	r6, #4294967295
 8019914:	e7eb      	b.n	80198ee <_strtoul_l.isra.0+0x8e>
 8019916:	1c73      	adds	r3, r6, #1
 8019918:	d106      	bne.n	8019928 <_strtoul_l.isra.0+0xc8>
 801991a:	2322      	movs	r3, #34	@ 0x22
 801991c:	f8ce 3000 	str.w	r3, [lr]
 8019920:	4630      	mov	r0, r6
 8019922:	b932      	cbnz	r2, 8019932 <_strtoul_l.isra.0+0xd2>
 8019924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019928:	b107      	cbz	r7, 801992c <_strtoul_l.isra.0+0xcc>
 801992a:	4240      	negs	r0, r0
 801992c:	2a00      	cmp	r2, #0
 801992e:	d0f9      	beq.n	8019924 <_strtoul_l.isra.0+0xc4>
 8019930:	b106      	cbz	r6, 8019934 <_strtoul_l.isra.0+0xd4>
 8019932:	1e69      	subs	r1, r5, #1
 8019934:	6011      	str	r1, [r2, #0]
 8019936:	e7f5      	b.n	8019924 <_strtoul_l.isra.0+0xc4>
 8019938:	0801d569 	.word	0x0801d569

0801993c <_strtoul_r>:
 801993c:	f7ff bf90 	b.w	8019860 <_strtoul_l.isra.0>

08019940 <__swhatbuf_r>:
 8019940:	b570      	push	{r4, r5, r6, lr}
 8019942:	460c      	mov	r4, r1
 8019944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019948:	2900      	cmp	r1, #0
 801994a:	b096      	sub	sp, #88	@ 0x58
 801994c:	4615      	mov	r5, r2
 801994e:	461e      	mov	r6, r3
 8019950:	da0d      	bge.n	801996e <__swhatbuf_r+0x2e>
 8019952:	89a3      	ldrh	r3, [r4, #12]
 8019954:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019958:	f04f 0100 	mov.w	r1, #0
 801995c:	bf14      	ite	ne
 801995e:	2340      	movne	r3, #64	@ 0x40
 8019960:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019964:	2000      	movs	r0, #0
 8019966:	6031      	str	r1, [r6, #0]
 8019968:	602b      	str	r3, [r5, #0]
 801996a:	b016      	add	sp, #88	@ 0x58
 801996c:	bd70      	pop	{r4, r5, r6, pc}
 801996e:	466a      	mov	r2, sp
 8019970:	f000 f848 	bl	8019a04 <_fstat_r>
 8019974:	2800      	cmp	r0, #0
 8019976:	dbec      	blt.n	8019952 <__swhatbuf_r+0x12>
 8019978:	9901      	ldr	r1, [sp, #4]
 801997a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801997e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019982:	4259      	negs	r1, r3
 8019984:	4159      	adcs	r1, r3
 8019986:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801998a:	e7eb      	b.n	8019964 <__swhatbuf_r+0x24>

0801998c <__smakebuf_r>:
 801998c:	898b      	ldrh	r3, [r1, #12]
 801998e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019990:	079d      	lsls	r5, r3, #30
 8019992:	4606      	mov	r6, r0
 8019994:	460c      	mov	r4, r1
 8019996:	d507      	bpl.n	80199a8 <__smakebuf_r+0x1c>
 8019998:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801999c:	6023      	str	r3, [r4, #0]
 801999e:	6123      	str	r3, [r4, #16]
 80199a0:	2301      	movs	r3, #1
 80199a2:	6163      	str	r3, [r4, #20]
 80199a4:	b003      	add	sp, #12
 80199a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199a8:	ab01      	add	r3, sp, #4
 80199aa:	466a      	mov	r2, sp
 80199ac:	f7ff ffc8 	bl	8019940 <__swhatbuf_r>
 80199b0:	9f00      	ldr	r7, [sp, #0]
 80199b2:	4605      	mov	r5, r0
 80199b4:	4639      	mov	r1, r7
 80199b6:	4630      	mov	r0, r6
 80199b8:	f7fe fa16 	bl	8017de8 <_malloc_r>
 80199bc:	b948      	cbnz	r0, 80199d2 <__smakebuf_r+0x46>
 80199be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80199c2:	059a      	lsls	r2, r3, #22
 80199c4:	d4ee      	bmi.n	80199a4 <__smakebuf_r+0x18>
 80199c6:	f023 0303 	bic.w	r3, r3, #3
 80199ca:	f043 0302 	orr.w	r3, r3, #2
 80199ce:	81a3      	strh	r3, [r4, #12]
 80199d0:	e7e2      	b.n	8019998 <__smakebuf_r+0xc>
 80199d2:	89a3      	ldrh	r3, [r4, #12]
 80199d4:	6020      	str	r0, [r4, #0]
 80199d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80199da:	81a3      	strh	r3, [r4, #12]
 80199dc:	9b01      	ldr	r3, [sp, #4]
 80199de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80199e2:	b15b      	cbz	r3, 80199fc <__smakebuf_r+0x70>
 80199e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80199e8:	4630      	mov	r0, r6
 80199ea:	f000 f81d 	bl	8019a28 <_isatty_r>
 80199ee:	b128      	cbz	r0, 80199fc <__smakebuf_r+0x70>
 80199f0:	89a3      	ldrh	r3, [r4, #12]
 80199f2:	f023 0303 	bic.w	r3, r3, #3
 80199f6:	f043 0301 	orr.w	r3, r3, #1
 80199fa:	81a3      	strh	r3, [r4, #12]
 80199fc:	89a3      	ldrh	r3, [r4, #12]
 80199fe:	431d      	orrs	r5, r3
 8019a00:	81a5      	strh	r5, [r4, #12]
 8019a02:	e7cf      	b.n	80199a4 <__smakebuf_r+0x18>

08019a04 <_fstat_r>:
 8019a04:	b538      	push	{r3, r4, r5, lr}
 8019a06:	4d07      	ldr	r5, [pc, #28]	@ (8019a24 <_fstat_r+0x20>)
 8019a08:	2300      	movs	r3, #0
 8019a0a:	4604      	mov	r4, r0
 8019a0c:	4608      	mov	r0, r1
 8019a0e:	4611      	mov	r1, r2
 8019a10:	602b      	str	r3, [r5, #0]
 8019a12:	f7eb fdbe 	bl	8005592 <_fstat>
 8019a16:	1c43      	adds	r3, r0, #1
 8019a18:	d102      	bne.n	8019a20 <_fstat_r+0x1c>
 8019a1a:	682b      	ldr	r3, [r5, #0]
 8019a1c:	b103      	cbz	r3, 8019a20 <_fstat_r+0x1c>
 8019a1e:	6023      	str	r3, [r4, #0]
 8019a20:	bd38      	pop	{r3, r4, r5, pc}
 8019a22:	bf00      	nop
 8019a24:	200123e8 	.word	0x200123e8

08019a28 <_isatty_r>:
 8019a28:	b538      	push	{r3, r4, r5, lr}
 8019a2a:	4d06      	ldr	r5, [pc, #24]	@ (8019a44 <_isatty_r+0x1c>)
 8019a2c:	2300      	movs	r3, #0
 8019a2e:	4604      	mov	r4, r0
 8019a30:	4608      	mov	r0, r1
 8019a32:	602b      	str	r3, [r5, #0]
 8019a34:	f7eb fdbd 	bl	80055b2 <_isatty>
 8019a38:	1c43      	adds	r3, r0, #1
 8019a3a:	d102      	bne.n	8019a42 <_isatty_r+0x1a>
 8019a3c:	682b      	ldr	r3, [r5, #0]
 8019a3e:	b103      	cbz	r3, 8019a42 <_isatty_r+0x1a>
 8019a40:	6023      	str	r3, [r4, #0]
 8019a42:	bd38      	pop	{r3, r4, r5, pc}
 8019a44:	200123e8 	.word	0x200123e8

08019a48 <_malloc_usable_size_r>:
 8019a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019a4c:	1f18      	subs	r0, r3, #4
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	bfbc      	itt	lt
 8019a52:	580b      	ldrlt	r3, [r1, r0]
 8019a54:	18c0      	addlt	r0, r0, r3
 8019a56:	4770      	bx	lr

08019a58 <_init>:
 8019a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a5a:	bf00      	nop
 8019a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019a5e:	bc08      	pop	{r3}
 8019a60:	469e      	mov	lr, r3
 8019a62:	4770      	bx	lr

08019a64 <_fini>:
 8019a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a66:	bf00      	nop
 8019a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019a6a:	bc08      	pop	{r3}
 8019a6c:	469e      	mov	lr, r3
 8019a6e:	4770      	bx	lr
