
lora_tester_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014df0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000064c  08014fc0  08014fc0  00015fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801560c  0801560c  00017208  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801560c  0801560c  0001660c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015614  08015614  00017208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015614  08015614  00016614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015618  08015618  00016618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c8  20000000  0801561c  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000c8  080156e4  000170c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000168  08015784  00017168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00009744  20000208  08015824  00017208  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000994c  08015824  0001794c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00017208  2**0
                  CONTENTS, READONLY
 14 .debug_info   00040451  00000000  00000000  00017238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008c9f  00000000  00000000  00057689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003508  00000000  00000000  00060328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000028fa  00000000  00000000  00063830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00035b30  00000000  00000000  0006612a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00047b75  00000000  00000000  0009bc5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012b9a2  00000000  00000000  000e37cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0020f171  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000e6dc  00000000  00000000  0020f1b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000082  00000000  00000000  0021d890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000208 	.word	0x20000208
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014fa8 	.word	0x08014fa8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000020c 	.word	0x2000020c
 800020c:	08014fa8 	.word	0x08014fa8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005fa:	b480      	push	{r7}
 80005fc:	b083      	sub	sp, #12
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
 8000602:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
	...

08000620 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4a07      	ldr	r2, [pc, #28]	@ (800064c <vApplicationGetIdleTaskMemory+0x2c>)
 8000630:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	4a06      	ldr	r2, [pc, #24]	@ (8000650 <vApplicationGetIdleTaskMemory+0x30>)
 8000636:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2280      	movs	r2, #128	@ 0x80
 800063c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800063e:	bf00      	nop
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000224 	.word	0x20000224
 8000650:	2000027c 	.word	0x2000027c

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b5b0      	push	{r4, r5, r7, lr}
 8000656:	b0a2      	sub	sp, #136	@ 0x88
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f002 ff56 	bl	800350a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f871 	bl	8000744 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000662:	f000 f8e1 	bl	8000828 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000666:	f001 f89f 	bl	80017a8 <MX_GPIO_Init>
  MX_ADC3_Init();
 800066a:	f000 f90f 	bl	800088c <MX_ADC3_Init>
  MX_CRC_Init();
 800066e:	f000 f95f 	bl	8000930 <MX_CRC_Init>
  MX_DCMI_Init();
 8000672:	f000 f97f 	bl	8000974 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000676:	f000 f9b1 	bl	80009dc <MX_DMA2D_Init>
  MX_ETH_Init();
 800067a:	f000 f9e1 	bl	8000a40 <MX_ETH_Init>
  MX_FMC_Init();
 800067e:	f001 f843 	bl	8001708 <MX_FMC_Init>
  MX_I2C1_Init();
 8000682:	f000 fa2b 	bl	8000adc <MX_I2C1_Init>
  MX_I2C3_Init();
 8000686:	f000 fa69 	bl	8000b5c <MX_I2C3_Init>
  MX_LTDC_Init();
 800068a:	f000 faa7 	bl	8000bdc <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800068e:	f000 fb27 	bl	8000ce0 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000692:	f000 fb51 	bl	8000d38 <MX_RTC_Init>
  MX_SAI2_Init();
 8000696:	f000 fbf3 	bl	8000e80 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 800069a:	f000 fc99 	bl	8000fd0 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 800069e:	f000 fcb9 	bl	8001014 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 80006a2:	f000 fce7 	bl	8001074 <MX_SPI2_Init>
  MX_TIM1_Init();
 80006a6:	f000 fd23 	bl	80010f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006aa:	f000 fdcd 	bl	8001248 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006ae:	f000 fe41 	bl	8001334 <MX_TIM3_Init>
  MX_TIM5_Init();
 80006b2:	f000 feb7 	bl	8001424 <MX_TIM5_Init>
  MX_TIM8_Init();
 80006b6:	f000 ff2d 	bl	8001514 <MX_TIM8_Init>
  MX_TIM12_Init();
 80006ba:	f000 ff7f 	bl	80015bc <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80006be:	f000 ffc3 	bl	8001648 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80006c2:	f000 fff1 	bl	80016a8 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80006c6:	f00e fc37 	bl	800ef38 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  UART_Connect(NULL);
 80006ca:	2000      	movs	r0, #0
 80006cc:	f002 fd40 	bl	8003150 <UART_Connect>

  // 1. AT 커맨드 송신
  UART_Send("AT\r\n");
 80006d0:	4818      	ldr	r0, [pc, #96]	@ (8000734 <main+0xe0>)
 80006d2:	f002 fd75 	bl	80031c0 <UART_Send>
  // 2. OK 응답 수신
  char rx_buffer[100] = {0};
 80006d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006da:	2264      	movs	r2, #100	@ 0x64
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f014 f868 	bl	80147b4 <memset>
  int bytes_received = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	623b      	str	r3, [r7, #32]
  if (UART_Receive(rx_buffer, sizeof(rx_buffer), &bytes_received) == UART_STATUS_OK) {
 80006e8:	f107 0220 	add.w	r2, r7, #32
 80006ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006f0:	2164      	movs	r1, #100	@ 0x64
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 fda8 	bl	8003248 <UART_Receive>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d105      	bne.n	800070a <main+0xb6>
	  if (strstr(rx_buffer, "OK") != NULL) {
 80006fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000702:	490d      	ldr	r1, [pc, #52]	@ (8000738 <main+0xe4>)
 8000704:	4618      	mov	r0, r3
 8000706:	f014 f870 	bl	80147ea <strstr>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800070a:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <main+0xe8>)
 800070c:	1d3c      	adds	r4, r7, #4
 800070e:	461d      	mov	r5, r3
 8000710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000714:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000718:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f011 f8cf 	bl	80118c4 <osThreadCreate>
 8000726:	4603      	mov	r3, r0
 8000728:	4a05      	ldr	r2, [pc, #20]	@ (8000740 <main+0xec>)
 800072a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800072c:	f011 f8a7 	bl	801187e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <main+0xdc>
 8000734:	08014fc0 	.word	0x08014fc0
 8000738:	08014fc8 	.word	0x08014fc8
 800073c:	08014fd8 	.word	0x08014fd8
 8000740:	20000d64 	.word	0x20000d64

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b094      	sub	sp, #80	@ 0x50
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	2230      	movs	r2, #48	@ 0x30
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f014 f82e 	bl	80147b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000768:	f007 f932 	bl	80079d0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800076c:	4b2c      	ldr	r3, [pc, #176]	@ (8000820 <SystemClock_Config+0xdc>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000770:	4a2b      	ldr	r2, [pc, #172]	@ (8000820 <SystemClock_Config+0xdc>)
 8000772:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000776:	6413      	str	r3, [r2, #64]	@ 0x40
 8000778:	4b29      	ldr	r3, [pc, #164]	@ (8000820 <SystemClock_Config+0xdc>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000784:	4b27      	ldr	r3, [pc, #156]	@ (8000824 <SystemClock_Config+0xe0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a26      	ldr	r2, [pc, #152]	@ (8000824 <SystemClock_Config+0xe0>)
 800078a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800078e:	6013      	str	r3, [r2, #0]
 8000790:	4b24      	ldr	r3, [pc, #144]	@ (8000824 <SystemClock_Config+0xe0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800079c:	2309      	movs	r3, #9
 800079e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007a6:	2301      	movs	r3, #1
 80007a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007aa:	2302      	movs	r3, #2
 80007ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007b4:	2319      	movs	r3, #25
 80007b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80007b8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80007bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007be:	2302      	movs	r3, #2
 80007c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80007c2:	2309      	movs	r3, #9
 80007c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c6:	f107 0320 	add.w	r3, r7, #32
 80007ca:	4618      	mov	r0, r3
 80007cc:	f007 fa22 	bl	8007c14 <HAL_RCC_OscConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007d6:	f001 fa2f 	bl	8001c38 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007da:	f007 f909 	bl	80079f0 <HAL_PWREx_EnableOverDrive>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80007e4:	f001 fa28 	bl	8001c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e8:	230f      	movs	r3, #15
 80007ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ec:	2302      	movs	r3, #2
 80007ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007f4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	2106      	movs	r1, #6
 8000806:	4618      	mov	r0, r3
 8000808:	f007 fca8 	bl	800815c <HAL_RCC_ClockConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000812:	f001 fa11 	bl	8001c38 <Error_Handler>
  }
}
 8000816:	bf00      	nop
 8000818:	3750      	adds	r7, #80	@ 0x50
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800
 8000824:	40007000 	.word	0x40007000

08000828 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b0a2      	sub	sp, #136	@ 0x88
 800082c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2284      	movs	r2, #132	@ 0x84
 8000832:	2100      	movs	r1, #0
 8000834:	4618      	mov	r0, r3
 8000836:	f013 ffbd 	bl	80147b4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 800083a:	4b13      	ldr	r3, [pc, #76]	@ (8000888 <PeriphCommonClock_Config+0x60>)
 800083c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800083e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000842:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000844:	2305      	movs	r3, #5
 8000846:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000848:	2302      	movs	r3, #2
 800084a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800084c:	2303      	movs	r3, #3
 800084e:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000850:	2301      	movs	r3, #1
 8000852:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000854:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000858:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800085a:	2300      	movs	r3, #0
 800085c:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800085e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000862:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000866:	2300      	movs	r3, #0
 8000868:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	4618      	mov	r0, r3
 8000870:	f007 fe8c 	bl	800858c <HAL_RCCEx_PeriphCLKConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800087a:	f001 f9dd 	bl	8001c38 <Error_Handler>
  }
}
 800087e:	bf00      	nop
 8000880:	3788      	adds	r7, #136	@ 0x88
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	00b00008 	.word	0x00b00008

0800088c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000892:	463b      	mov	r3, r7
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800089e:	4b21      	ldr	r3, [pc, #132]	@ (8000924 <MX_ADC3_Init+0x98>)
 80008a0:	4a21      	ldr	r2, [pc, #132]	@ (8000928 <MX_ADC3_Init+0x9c>)
 80008a2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000924 <MX_ADC3_Init+0x98>)
 80008a6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80008aa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80008ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000924 <MX_ADC3_Init+0x98>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <MX_ADC3_Init+0x98>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80008b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000924 <MX_ADC3_Init+0x98>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008be:	4b19      	ldr	r3, [pc, #100]	@ (8000924 <MX_ADC3_Init+0x98>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008c6:	4b17      	ldr	r3, [pc, #92]	@ (8000924 <MX_ADC3_Init+0x98>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008cc:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <MX_ADC3_Init+0x98>)
 80008ce:	4a17      	ldr	r2, [pc, #92]	@ (800092c <MX_ADC3_Init+0xa0>)
 80008d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008d2:	4b14      	ldr	r3, [pc, #80]	@ (8000924 <MX_ADC3_Init+0x98>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80008d8:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <MX_ADC3_Init+0x98>)
 80008da:	2201      	movs	r2, #1
 80008dc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80008de:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <MX_ADC3_Init+0x98>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <MX_ADC3_Init+0x98>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008ec:	480d      	ldr	r0, [pc, #52]	@ (8000924 <MX_ADC3_Init+0x98>)
 80008ee:	f002 fe5d 	bl	80035ac <HAL_ADC_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80008f8:	f001 f99e 	bl	8001c38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008fc:	2304      	movs	r3, #4
 80008fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000900:	2301      	movs	r3, #1
 8000902:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000904:	2300      	movs	r3, #0
 8000906:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	4619      	mov	r1, r3
 800090c:	4805      	ldr	r0, [pc, #20]	@ (8000924 <MX_ADC3_Init+0x98>)
 800090e:	f002 fe91 	bl	8003634 <HAL_ADC_ConfigChannel>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000918:	f001 f98e 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	200004b4 	.word	0x200004b4
 8000928:	40012200 	.word	0x40012200
 800092c:	0f000001 	.word	0x0f000001

08000930 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000934:	4b0d      	ldr	r3, [pc, #52]	@ (800096c <MX_CRC_Init+0x3c>)
 8000936:	4a0e      	ldr	r2, [pc, #56]	@ (8000970 <MX_CRC_Init+0x40>)
 8000938:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800093a:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <MX_CRC_Init+0x3c>)
 800093c:	2200      	movs	r2, #0
 800093e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000940:	4b0a      	ldr	r3, [pc, #40]	@ (800096c <MX_CRC_Init+0x3c>)
 8000942:	2200      	movs	r2, #0
 8000944:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000946:	4b09      	ldr	r3, [pc, #36]	@ (800096c <MX_CRC_Init+0x3c>)
 8000948:	2200      	movs	r2, #0
 800094a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800094c:	4b07      	ldr	r3, [pc, #28]	@ (800096c <MX_CRC_Init+0x3c>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000952:	4b06      	ldr	r3, [pc, #24]	@ (800096c <MX_CRC_Init+0x3c>)
 8000954:	2201      	movs	r2, #1
 8000956:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	@ (800096c <MX_CRC_Init+0x3c>)
 800095a:	f003 f9a1 	bl	8003ca0 <HAL_CRC_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000964:	f001 f968 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200004fc 	.word	0x200004fc
 8000970:	40023000 	.word	0x40023000

08000974 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000978:	4b16      	ldr	r3, [pc, #88]	@ (80009d4 <MX_DCMI_Init+0x60>)
 800097a:	4a17      	ldr	r2, [pc, #92]	@ (80009d8 <MX_DCMI_Init+0x64>)
 800097c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800097e:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <MX_DCMI_Init+0x60>)
 8000980:	2200      	movs	r2, #0
 8000982:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000984:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <MX_DCMI_Init+0x60>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800098a:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <MX_DCMI_Init+0x60>)
 800098c:	2200      	movs	r2, #0
 800098e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000990:	4b10      	ldr	r3, [pc, #64]	@ (80009d4 <MX_DCMI_Init+0x60>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000996:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <MX_DCMI_Init+0x60>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800099c:	4b0d      	ldr	r3, [pc, #52]	@ (80009d4 <MX_DCMI_Init+0x60>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80009a2:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <MX_DCMI_Init+0x60>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80009a8:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <MX_DCMI_Init+0x60>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80009ae:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <MX_DCMI_Init+0x60>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80009b4:	4b07      	ldr	r3, [pc, #28]	@ (80009d4 <MX_DCMI_Init+0x60>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80009ba:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <MX_DCMI_Init+0x60>)
 80009bc:	2200      	movs	r2, #0
 80009be:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80009c0:	4804      	ldr	r0, [pc, #16]	@ (80009d4 <MX_DCMI_Init+0x60>)
 80009c2:	f003 fa5f 	bl	8003e84 <HAL_DCMI_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80009cc:	f001 f934 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000520 	.word	0x20000520
 80009d8:	50050000 	.word	0x50050000

080009dc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80009e0:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <MX_DMA2D_Init+0x5c>)
 80009e2:	4a16      	ldr	r2, [pc, #88]	@ (8000a3c <MX_DMA2D_Init+0x60>)
 80009e4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80009e6:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <MX_DMA2D_Init+0x5c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80009ec:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <MX_DMA2D_Init+0x5c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80009f2:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <MX_DMA2D_Init+0x5c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a38 <MX_DMA2D_Init+0x5c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <MX_DMA2D_Init+0x5c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <MX_DMA2D_Init+0x5c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a38 <MX_DMA2D_Init+0x5c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a10:	4809      	ldr	r0, [pc, #36]	@ (8000a38 <MX_DMA2D_Init+0x5c>)
 8000a12:	f003 fb4b 	bl	80040ac <HAL_DMA2D_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000a1c:	f001 f90c 	bl	8001c38 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a20:	2101      	movs	r1, #1
 8000a22:	4805      	ldr	r0, [pc, #20]	@ (8000a38 <MX_DMA2D_Init+0x5c>)
 8000a24:	f003 fc9c 	bl	8004360 <HAL_DMA2D_ConfigLayer>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a2e:	f001 f903 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000570 	.word	0x20000570
 8000a3c:	4002b000 	.word	0x4002b000

08000a40 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a44:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac4 <MX_ETH_Init+0x84>)
 8000a46:	4a20      	ldr	r2, [pc, #128]	@ (8000ac8 <MX_ETH_Init+0x88>)
 8000a48:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a4a:	4b20      	ldr	r3, [pc, #128]	@ (8000acc <MX_ETH_Init+0x8c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a50:	4b1e      	ldr	r3, [pc, #120]	@ (8000acc <MX_ETH_Init+0x8c>)
 8000a52:	2280      	movs	r2, #128	@ 0x80
 8000a54:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a56:	4b1d      	ldr	r3, [pc, #116]	@ (8000acc <MX_ETH_Init+0x8c>)
 8000a58:	22e1      	movs	r2, #225	@ 0xe1
 8000a5a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000acc <MX_ETH_Init+0x8c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a62:	4b1a      	ldr	r3, [pc, #104]	@ (8000acc <MX_ETH_Init+0x8c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a68:	4b18      	ldr	r3, [pc, #96]	@ (8000acc <MX_ETH_Init+0x8c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <MX_ETH_Init+0x84>)
 8000a70:	4a16      	ldr	r2, [pc, #88]	@ (8000acc <MX_ETH_Init+0x8c>)
 8000a72:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a74:	4b13      	ldr	r3, [pc, #76]	@ (8000ac4 <MX_ETH_Init+0x84>)
 8000a76:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000a7a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <MX_ETH_Init+0x84>)
 8000a7e:	4a14      	ldr	r2, [pc, #80]	@ (8000ad0 <MX_ETH_Init+0x90>)
 8000a80:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a82:	4b10      	ldr	r3, [pc, #64]	@ (8000ac4 <MX_ETH_Init+0x84>)
 8000a84:	4a13      	ldr	r2, [pc, #76]	@ (8000ad4 <MX_ETH_Init+0x94>)
 8000a86:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a88:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <MX_ETH_Init+0x84>)
 8000a8a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000a8e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a90:	480c      	ldr	r0, [pc, #48]	@ (8000ac4 <MX_ETH_Init+0x84>)
 8000a92:	f003 fcf7 	bl	8004484 <HAL_ETH_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a9c:	f001 f8cc 	bl	8001c38 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000aa0:	2238      	movs	r2, #56	@ 0x38
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	480c      	ldr	r0, [pc, #48]	@ (8000ad8 <MX_ETH_Init+0x98>)
 8000aa6:	f013 fe85 	bl	80147b4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad8 <MX_ETH_Init+0x98>)
 8000aac:	2221      	movs	r2, #33	@ 0x21
 8000aae:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <MX_ETH_Init+0x98>)
 8000ab2:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000ab6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ab8:	4b07      	ldr	r3, [pc, #28]	@ (8000ad8 <MX_ETH_Init+0x98>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200005b0 	.word	0x200005b0
 8000ac8:	40028000 	.word	0x40028000
 8000acc:	20000d68 	.word	0x20000d68
 8000ad0:	20000168 	.word	0x20000168
 8000ad4:	200000c8 	.word	0x200000c8
 8000ad8:	2000047c 	.word	0x2000047c

08000adc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b50 <MX_I2C1_Init+0x74>)
 8000ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8000b54 <MX_I2C1_Init+0x78>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b50 <MX_I2C1_Init+0x74>)
 8000ae8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b58 <MX_I2C1_Init+0x7c>)
 8000aea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000aec:	4b18      	ldr	r3, [pc, #96]	@ (8000b50 <MX_I2C1_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af2:	4b17      	ldr	r3, [pc, #92]	@ (8000b50 <MX_I2C1_Init+0x74>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af8:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <MX_I2C1_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000afe:	4b14      	ldr	r3, [pc, #80]	@ (8000b50 <MX_I2C1_Init+0x74>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b04:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <MX_I2C1_Init+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <MX_I2C1_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	@ (8000b50 <MX_I2C1_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b16:	480e      	ldr	r0, [pc, #56]	@ (8000b50 <MX_I2C1_Init+0x74>)
 8000b18:	f006 fb14 	bl	8007144 <HAL_I2C_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b22:	f001 f889 	bl	8001c38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b26:	2100      	movs	r1, #0
 8000b28:	4809      	ldr	r0, [pc, #36]	@ (8000b50 <MX_I2C1_Init+0x74>)
 8000b2a:	f006 fba7 	bl	800727c <HAL_I2CEx_ConfigAnalogFilter>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b34:	f001 f880 	bl	8001c38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <MX_I2C1_Init+0x74>)
 8000b3c:	f006 fbe9 	bl	8007312 <HAL_I2CEx_ConfigDigitalFilter>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b46:	f001 f877 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000660 	.word	0x20000660
 8000b54:	40005400 	.word	0x40005400
 8000b58:	00c0eaff 	.word	0x00c0eaff

08000b5c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b60:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd0 <MX_I2C3_Init+0x74>)
 8000b62:	4a1c      	ldr	r2, [pc, #112]	@ (8000bd4 <MX_I2C3_Init+0x78>)
 8000b64:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000b66:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd0 <MX_I2C3_Init+0x74>)
 8000b68:	4a1b      	ldr	r2, [pc, #108]	@ (8000bd8 <MX_I2C3_Init+0x7c>)
 8000b6a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000b6c:	4b18      	ldr	r3, [pc, #96]	@ (8000bd0 <MX_I2C3_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b72:	4b17      	ldr	r3, [pc, #92]	@ (8000bd0 <MX_I2C3_Init+0x74>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b78:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <MX_I2C3_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000b7e:	4b14      	ldr	r3, [pc, #80]	@ (8000bd0 <MX_I2C3_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b84:	4b12      	ldr	r3, [pc, #72]	@ (8000bd0 <MX_I2C3_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <MX_I2C3_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <MX_I2C3_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b96:	480e      	ldr	r0, [pc, #56]	@ (8000bd0 <MX_I2C3_Init+0x74>)
 8000b98:	f006 fad4 	bl	8007144 <HAL_I2C_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000ba2:	f001 f849 	bl	8001c38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4809      	ldr	r0, [pc, #36]	@ (8000bd0 <MX_I2C3_Init+0x74>)
 8000baa:	f006 fb67 	bl	800727c <HAL_I2CEx_ConfigAnalogFilter>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000bb4:	f001 f840 	bl	8001c38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4805      	ldr	r0, [pc, #20]	@ (8000bd0 <MX_I2C3_Init+0x74>)
 8000bbc:	f006 fba9 	bl	8007312 <HAL_I2CEx_ConfigDigitalFilter>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000bc6:	f001 f837 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200006b4 	.word	0x200006b4
 8000bd4:	40005c00 	.word	0x40005c00
 8000bd8:	00c0eaff 	.word	0x00c0eaff

08000bdc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08e      	sub	sp, #56	@ 0x38
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2234      	movs	r2, #52	@ 0x34
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f013 fde3 	bl	80147b4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000bee:	4b3a      	ldr	r3, [pc, #232]	@ (8000cd8 <MX_LTDC_Init+0xfc>)
 8000bf0:	4a3a      	ldr	r2, [pc, #232]	@ (8000cdc <MX_LTDC_Init+0x100>)
 8000bf2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000bf4:	4b38      	ldr	r3, [pc, #224]	@ (8000cd8 <MX_LTDC_Init+0xfc>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000bfa:	4b37      	ldr	r3, [pc, #220]	@ (8000cd8 <MX_LTDC_Init+0xfc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c00:	4b35      	ldr	r3, [pc, #212]	@ (8000cd8 <MX_LTDC_Init+0xfc>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c06:	4b34      	ldr	r3, [pc, #208]	@ (8000cd8 <MX_LTDC_Init+0xfc>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000c0c:	4b32      	ldr	r3, [pc, #200]	@ (8000cd8 <MX_LTDC_Init+0xfc>)
 8000c0e:	2228      	movs	r2, #40	@ 0x28
 8000c10:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000c12:	4b31      	ldr	r3, [pc, #196]	@ (8000cd8 <MX_LTDC_Init+0xfc>)
 8000c14:	2209      	movs	r2, #9
 8000c16:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000c18:	4b2f      	ldr	r3, [pc, #188]	@ (8000cd8 <MX_LTDC_Init+0xfc>)
 8000c1a:	2235      	movs	r2, #53	@ 0x35
 8000c1c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000c1e:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd8 <MX_LTDC_Init+0xfc>)
 8000c20:	220b      	movs	r2, #11
 8000c22:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000c24:	4b2c      	ldr	r3, [pc, #176]	@ (8000cd8 <MX_LTDC_Init+0xfc>)
 8000c26:	f240 2215 	movw	r2, #533	@ 0x215
 8000c2a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000c2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd8 <MX_LTDC_Init+0xfc>)
 8000c2e:	f240 121b 	movw	r2, #283	@ 0x11b
 8000c32:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8000c34:	4b28      	ldr	r3, [pc, #160]	@ (8000cd8 <MX_LTDC_Init+0xfc>)
 8000c36:	f240 2235 	movw	r2, #565	@ 0x235
 8000c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000c3c:	4b26      	ldr	r3, [pc, #152]	@ (8000cd8 <MX_LTDC_Init+0xfc>)
 8000c3e:	f240 121d 	movw	r2, #285	@ 0x11d
 8000c42:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c44:	4b24      	ldr	r3, [pc, #144]	@ (8000cd8 <MX_LTDC_Init+0xfc>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000c4c:	4b22      	ldr	r3, [pc, #136]	@ (8000cd8 <MX_LTDC_Init+0xfc>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000c54:	4b20      	ldr	r3, [pc, #128]	@ (8000cd8 <MX_LTDC_Init+0xfc>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c5c:	481e      	ldr	r0, [pc, #120]	@ (8000cd8 <MX_LTDC_Init+0xfc>)
 8000c5e:	f006 fba4 	bl	80073aa <HAL_LTDC_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000c68:	f000 ffe6 	bl	8001c38 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000c70:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000c74:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000c7a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000c7e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000c80:	2302      	movs	r3, #2
 8000c82:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000c84:	23ff      	movs	r3, #255	@ 0xff
 8000c86:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000c8c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c90:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000c92:	2307      	movs	r3, #7
 8000c94:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000c96:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8000c9c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8000ca2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000ca6:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4805      	ldr	r0, [pc, #20]	@ (8000cd8 <MX_LTDC_Init+0xfc>)
 8000cc2:	f006 fcd1 	bl	8007668 <HAL_LTDC_ConfigLayer>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000ccc:	f000 ffb4 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	3738      	adds	r7, #56	@ 0x38
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000708 	.word	0x20000708
 8000cdc:	40016800 	.word	0x40016800

08000ce0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000ce4:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <MX_QUADSPI_Init+0x50>)
 8000ce6:	4a13      	ldr	r2, [pc, #76]	@ (8000d34 <MX_QUADSPI_Init+0x54>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000cea:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <MX_QUADSPI_Init+0x50>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d30 <MX_QUADSPI_Init+0x50>)
 8000cf2:	2204      	movs	r2, #4
 8000cf4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <MX_QUADSPI_Init+0x50>)
 8000cf8:	2210      	movs	r2, #16
 8000cfa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d30 <MX_QUADSPI_Init+0x50>)
 8000cfe:	2218      	movs	r2, #24
 8000d00:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	@ (8000d30 <MX_QUADSPI_Init+0x50>)
 8000d04:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000d08:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000d0a:	4b09      	ldr	r3, [pc, #36]	@ (8000d30 <MX_QUADSPI_Init+0x50>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <MX_QUADSPI_Init+0x50>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000d16:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <MX_QUADSPI_Init+0x50>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d1c:	4804      	ldr	r0, [pc, #16]	@ (8000d30 <MX_QUADSPI_Init+0x50>)
 8000d1e:	f006 feb7 	bl	8007a90 <HAL_QSPI_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000d28:	f000 ff86 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	200007b0 	.word	0x200007b0
 8000d34:	a0001000 	.word	0xa0001000

08000d38 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b090      	sub	sp, #64	@ 0x40
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000d52:	463b      	mov	r3, r7
 8000d54:	2228      	movs	r2, #40	@ 0x28
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f013 fd2b 	bl	80147b4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d5e:	4b46      	ldr	r3, [pc, #280]	@ (8000e78 <MX_RTC_Init+0x140>)
 8000d60:	4a46      	ldr	r2, [pc, #280]	@ (8000e7c <MX_RTC_Init+0x144>)
 8000d62:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d64:	4b44      	ldr	r3, [pc, #272]	@ (8000e78 <MX_RTC_Init+0x140>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d6a:	4b43      	ldr	r3, [pc, #268]	@ (8000e78 <MX_RTC_Init+0x140>)
 8000d6c:	227f      	movs	r2, #127	@ 0x7f
 8000d6e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d70:	4b41      	ldr	r3, [pc, #260]	@ (8000e78 <MX_RTC_Init+0x140>)
 8000d72:	22ff      	movs	r2, #255	@ 0xff
 8000d74:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d76:	4b40      	ldr	r3, [pc, #256]	@ (8000e78 <MX_RTC_Init+0x140>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d7c:	4b3e      	ldr	r3, [pc, #248]	@ (8000e78 <MX_RTC_Init+0x140>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d82:	4b3d      	ldr	r3, [pc, #244]	@ (8000e78 <MX_RTC_Init+0x140>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d88:	483b      	ldr	r0, [pc, #236]	@ (8000e78 <MX_RTC_Init+0x140>)
 8000d8a:	f008 f92f 	bl	8008fec <HAL_RTC_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000d94:	f000 ff50 	bl	8001c38 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000dae:	2300      	movs	r3, #0
 8000db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000db2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000db6:	2201      	movs	r2, #1
 8000db8:	4619      	mov	r1, r3
 8000dba:	482f      	ldr	r0, [pc, #188]	@ (8000e78 <MX_RTC_Init+0x140>)
 8000dbc:	f008 f998 	bl	80090f0 <HAL_RTC_SetTime>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000dc6:	f000 ff37 	bl	8001c38 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000de2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000de6:	2201      	movs	r2, #1
 8000de8:	4619      	mov	r1, r3
 8000dea:	4823      	ldr	r0, [pc, #140]	@ (8000e78 <MX_RTC_Init+0x140>)
 8000dec:	f008 fa1a 	bl	8009224 <HAL_RTC_SetDate>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000df6:	f000 ff1f 	bl	8001c38 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000e24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e28:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4811      	ldr	r0, [pc, #68]	@ (8000e78 <MX_RTC_Init+0x140>)
 8000e32:	f008 fa7b 	bl	800932c <HAL_RTC_SetAlarm>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000e3c:	f000 fefc 	bl	8001c38 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000e40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e46:	463b      	mov	r3, r7
 8000e48:	2201      	movs	r2, #1
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480a      	ldr	r0, [pc, #40]	@ (8000e78 <MX_RTC_Init+0x140>)
 8000e4e:	f008 fa6d 	bl	800932c <HAL_RTC_SetAlarm>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8000e58:	f000 feee 	bl	8001c38 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4805      	ldr	r0, [pc, #20]	@ (8000e78 <MX_RTC_Init+0x140>)
 8000e62:	f008 fc2d 	bl	80096c0 <HAL_RTCEx_SetTimeStamp>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8000e6c:	f000 fee4 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e70:	bf00      	nop
 8000e72:	3740      	adds	r7, #64	@ 0x40
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	200007fc 	.word	0x200007fc
 8000e7c:	40002800 	.word	0x40002800

08000e80 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000e84:	4b4d      	ldr	r3, [pc, #308]	@ (8000fbc <MX_SAI2_Init+0x13c>)
 8000e86:	4a4e      	ldr	r2, [pc, #312]	@ (8000fc0 <MX_SAI2_Init+0x140>)
 8000e88:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e8a:	4b4c      	ldr	r3, [pc, #304]	@ (8000fbc <MX_SAI2_Init+0x13c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000e90:	4b4a      	ldr	r3, [pc, #296]	@ (8000fbc <MX_SAI2_Init+0x13c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000e96:	4b49      	ldr	r3, [pc, #292]	@ (8000fbc <MX_SAI2_Init+0x13c>)
 8000e98:	2240      	movs	r2, #64	@ 0x40
 8000e9a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e9c:	4b47      	ldr	r3, [pc, #284]	@ (8000fbc <MX_SAI2_Init+0x13c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000ea2:	4b46      	ldr	r3, [pc, #280]	@ (8000fbc <MX_SAI2_Init+0x13c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000ea8:	4b44      	ldr	r3, [pc, #272]	@ (8000fbc <MX_SAI2_Init+0x13c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000eae:	4b43      	ldr	r3, [pc, #268]	@ (8000fbc <MX_SAI2_Init+0x13c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000eb4:	4b41      	ldr	r3, [pc, #260]	@ (8000fbc <MX_SAI2_Init+0x13c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000eba:	4b40      	ldr	r3, [pc, #256]	@ (8000fbc <MX_SAI2_Init+0x13c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000ec0:	4b3e      	ldr	r3, [pc, #248]	@ (8000fbc <MX_SAI2_Init+0x13c>)
 8000ec2:	4a40      	ldr	r2, [pc, #256]	@ (8000fc4 <MX_SAI2_Init+0x144>)
 8000ec4:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000ec6:	4b3d      	ldr	r3, [pc, #244]	@ (8000fbc <MX_SAI2_Init+0x13c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ecc:	4b3b      	ldr	r3, [pc, #236]	@ (8000fbc <MX_SAI2_Init+0x13c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ed2:	4b3a      	ldr	r3, [pc, #232]	@ (8000fbc <MX_SAI2_Init+0x13c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000ed8:	4b38      	ldr	r3, [pc, #224]	@ (8000fbc <MX_SAI2_Init+0x13c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000ede:	4b37      	ldr	r3, [pc, #220]	@ (8000fbc <MX_SAI2_Init+0x13c>)
 8000ee0:	2208      	movs	r2, #8
 8000ee2:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000ee4:	4b35      	ldr	r3, [pc, #212]	@ (8000fbc <MX_SAI2_Init+0x13c>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000eea:	4b34      	ldr	r3, [pc, #208]	@ (8000fbc <MX_SAI2_Init+0x13c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000ef0:	4b32      	ldr	r3, [pc, #200]	@ (8000fbc <MX_SAI2_Init+0x13c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000ef6:	4b31      	ldr	r3, [pc, #196]	@ (8000fbc <MX_SAI2_Init+0x13c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000efc:	4b2f      	ldr	r3, [pc, #188]	@ (8000fbc <MX_SAI2_Init+0x13c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000f02:	4b2e      	ldr	r3, [pc, #184]	@ (8000fbc <MX_SAI2_Init+0x13c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000f08:	4b2c      	ldr	r3, [pc, #176]	@ (8000fbc <MX_SAI2_Init+0x13c>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000f0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000fbc <MX_SAI2_Init+0x13c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000f14:	4829      	ldr	r0, [pc, #164]	@ (8000fbc <MX_SAI2_Init+0x13c>)
 8000f16:	f008 fc3b 	bl	8009790 <HAL_SAI_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000f20:	f000 fe8a 	bl	8001c38 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000f24:	4b28      	ldr	r3, [pc, #160]	@ (8000fc8 <MX_SAI2_Init+0x148>)
 8000f26:	4a29      	ldr	r2, [pc, #164]	@ (8000fcc <MX_SAI2_Init+0x14c>)
 8000f28:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f2a:	4b27      	ldr	r3, [pc, #156]	@ (8000fc8 <MX_SAI2_Init+0x148>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000f30:	4b25      	ldr	r3, [pc, #148]	@ (8000fc8 <MX_SAI2_Init+0x148>)
 8000f32:	2203      	movs	r2, #3
 8000f34:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000f36:	4b24      	ldr	r3, [pc, #144]	@ (8000fc8 <MX_SAI2_Init+0x148>)
 8000f38:	2240      	movs	r2, #64	@ 0x40
 8000f3a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f3c:	4b22      	ldr	r3, [pc, #136]	@ (8000fc8 <MX_SAI2_Init+0x148>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f42:	4b21      	ldr	r3, [pc, #132]	@ (8000fc8 <MX_SAI2_Init+0x148>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000f48:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc8 <MX_SAI2_Init+0x148>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc8 <MX_SAI2_Init+0x148>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f54:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc8 <MX_SAI2_Init+0x148>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc8 <MX_SAI2_Init+0x148>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f60:	4b19      	ldr	r3, [pc, #100]	@ (8000fc8 <MX_SAI2_Init+0x148>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f66:	4b18      	ldr	r3, [pc, #96]	@ (8000fc8 <MX_SAI2_Init+0x148>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f6c:	4b16      	ldr	r3, [pc, #88]	@ (8000fc8 <MX_SAI2_Init+0x148>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000f72:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <MX_SAI2_Init+0x148>)
 8000f74:	2208      	movs	r2, #8
 8000f76:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000f78:	4b13      	ldr	r3, [pc, #76]	@ (8000fc8 <MX_SAI2_Init+0x148>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000f7e:	4b12      	ldr	r3, [pc, #72]	@ (8000fc8 <MX_SAI2_Init+0x148>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000f84:	4b10      	ldr	r3, [pc, #64]	@ (8000fc8 <MX_SAI2_Init+0x148>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc8 <MX_SAI2_Init+0x148>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000f90:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc8 <MX_SAI2_Init+0x148>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000f96:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <MX_SAI2_Init+0x148>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc8 <MX_SAI2_Init+0x148>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000fa2:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <MX_SAI2_Init+0x148>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000fa8:	4807      	ldr	r0, [pc, #28]	@ (8000fc8 <MX_SAI2_Init+0x148>)
 8000faa:	f008 fbf1 	bl	8009790 <HAL_SAI_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000fb4:	f000 fe40 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	2000081c 	.word	0x2000081c
 8000fc0:	40015c04 	.word	0x40015c04
 8000fc4:	0002ee00 	.word	0x0002ee00
 8000fc8:	200008a0 	.word	0x200008a0
 8000fcc:	40015c24 	.word	0x40015c24

08000fd0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800100c <MX_SDMMC1_SD_Init+0x3c>)
 8000fd6:	4a0e      	ldr	r2, [pc, #56]	@ (8001010 <MX_SDMMC1_SD_Init+0x40>)
 8000fd8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000fda:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <MX_SDMMC1_SD_Init+0x3c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <MX_SDMMC1_SD_Init+0x3c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000fe6:	4b09      	ldr	r3, [pc, #36]	@ (800100c <MX_SDMMC1_SD_Init+0x3c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000fec:	4b07      	ldr	r3, [pc, #28]	@ (800100c <MX_SDMMC1_SD_Init+0x3c>)
 8000fee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ff2:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ff4:	4b05      	ldr	r3, [pc, #20]	@ (800100c <MX_SDMMC1_SD_Init+0x3c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000ffa:	4b04      	ldr	r3, [pc, #16]	@ (800100c <MX_SDMMC1_SD_Init+0x3c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000924 	.word	0x20000924
 8001010:	40012c00 	.word	0x40012c00

08001014 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001018:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <MX_SPDIFRX_Init+0x5c>)
 800101a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800101e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001020:	4b13      	ldr	r3, [pc, #76]	@ (8001070 <MX_SPDIFRX_Init+0x5c>)
 8001022:	2200      	movs	r2, #0
 8001024:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001026:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <MX_SPDIFRX_Init+0x5c>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 800102c:	4b10      	ldr	r3, [pc, #64]	@ (8001070 <MX_SPDIFRX_Init+0x5c>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001032:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <MX_SPDIFRX_Init+0x5c>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001038:	4b0d      	ldr	r3, [pc, #52]	@ (8001070 <MX_SPDIFRX_Init+0x5c>)
 800103a:	2200      	movs	r2, #0
 800103c:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800103e:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <MX_SPDIFRX_Init+0x5c>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001044:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <MX_SPDIFRX_Init+0x5c>)
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800104a:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <MX_SPDIFRX_Init+0x5c>)
 800104c:	2200      	movs	r2, #0
 800104e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001050:	4b07      	ldr	r3, [pc, #28]	@ (8001070 <MX_SPDIFRX_Init+0x5c>)
 8001052:	2200      	movs	r2, #0
 8001054:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001056:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <MX_SPDIFRX_Init+0x5c>)
 8001058:	2200      	movs	r2, #0
 800105a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800105c:	4804      	ldr	r0, [pc, #16]	@ (8001070 <MX_SPDIFRX_Init+0x5c>)
 800105e:	f009 fe1b 	bl	800ac98 <HAL_SPDIFRX_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001068:	f000 fde6 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	200009a8 	.word	0x200009a8

08001074 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001078:	4b1b      	ldr	r3, [pc, #108]	@ (80010e8 <MX_SPI2_Init+0x74>)
 800107a:	4a1c      	ldr	r2, [pc, #112]	@ (80010ec <MX_SPI2_Init+0x78>)
 800107c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800107e:	4b1a      	ldr	r3, [pc, #104]	@ (80010e8 <MX_SPI2_Init+0x74>)
 8001080:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001084:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001086:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <MX_SPI2_Init+0x74>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800108c:	4b16      	ldr	r3, [pc, #88]	@ (80010e8 <MX_SPI2_Init+0x74>)
 800108e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001092:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001094:	4b14      	ldr	r3, [pc, #80]	@ (80010e8 <MX_SPI2_Init+0x74>)
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800109a:	4b13      	ldr	r3, [pc, #76]	@ (80010e8 <MX_SPI2_Init+0x74>)
 800109c:	2200      	movs	r2, #0
 800109e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010a0:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <MX_SPI2_Init+0x74>)
 80010a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010a6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <MX_SPI2_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	@ (80010e8 <MX_SPI2_Init+0x74>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <MX_SPI2_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	@ (80010e8 <MX_SPI2_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80010c0:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <MX_SPI2_Init+0x74>)
 80010c2:	2207      	movs	r2, #7
 80010c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010c6:	4b08      	ldr	r3, [pc, #32]	@ (80010e8 <MX_SPI2_Init+0x74>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010cc:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <MX_SPI2_Init+0x74>)
 80010ce:	2208      	movs	r2, #8
 80010d0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010d2:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <MX_SPI2_Init+0x74>)
 80010d4:	f009 fe3c 	bl	800ad50 <HAL_SPI_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80010de:	f000 fdab 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200009f4 	.word	0x200009f4
 80010ec:	40003800 	.word	0x40003800

080010f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b09a      	sub	sp, #104	@ 0x68
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010f6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001104:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001110:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
 8001120:	615a      	str	r2, [r3, #20]
 8001122:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	222c      	movs	r2, #44	@ 0x2c
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f013 fb42 	bl	80147b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001130:	4b43      	ldr	r3, [pc, #268]	@ (8001240 <MX_TIM1_Init+0x150>)
 8001132:	4a44      	ldr	r2, [pc, #272]	@ (8001244 <MX_TIM1_Init+0x154>)
 8001134:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001136:	4b42      	ldr	r3, [pc, #264]	@ (8001240 <MX_TIM1_Init+0x150>)
 8001138:	2200      	movs	r2, #0
 800113a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113c:	4b40      	ldr	r3, [pc, #256]	@ (8001240 <MX_TIM1_Init+0x150>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001142:	4b3f      	ldr	r3, [pc, #252]	@ (8001240 <MX_TIM1_Init+0x150>)
 8001144:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001148:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114a:	4b3d      	ldr	r3, [pc, #244]	@ (8001240 <MX_TIM1_Init+0x150>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001150:	4b3b      	ldr	r3, [pc, #236]	@ (8001240 <MX_TIM1_Init+0x150>)
 8001152:	2200      	movs	r2, #0
 8001154:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001156:	4b3a      	ldr	r3, [pc, #232]	@ (8001240 <MX_TIM1_Init+0x150>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800115c:	4838      	ldr	r0, [pc, #224]	@ (8001240 <MX_TIM1_Init+0x150>)
 800115e:	f009 fea2 	bl	800aea6 <HAL_TIM_Base_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001168:	f000 fd66 	bl	8001c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800116c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001170:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001172:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001176:	4619      	mov	r1, r3
 8001178:	4831      	ldr	r0, [pc, #196]	@ (8001240 <MX_TIM1_Init+0x150>)
 800117a:	f00a f9d5 	bl	800b528 <HAL_TIM_ConfigClockSource>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001184:	f000 fd58 	bl	8001c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001188:	482d      	ldr	r0, [pc, #180]	@ (8001240 <MX_TIM1_Init+0x150>)
 800118a:	f009 ff5b 	bl	800b044 <HAL_TIM_PWM_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001194:	f000 fd50 	bl	8001c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001198:	2300      	movs	r3, #0
 800119a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800119c:	2300      	movs	r3, #0
 800119e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011a4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80011a8:	4619      	mov	r1, r3
 80011aa:	4825      	ldr	r0, [pc, #148]	@ (8001240 <MX_TIM1_Init+0x150>)
 80011ac:	f00a fe4c 	bl	800be48 <HAL_TIMEx_MasterConfigSynchronization>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80011b6:	f000 fd3f 	bl	8001c38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ba:	2360      	movs	r3, #96	@ 0x60
 80011bc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011c2:	2300      	movs	r3, #0
 80011c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011c6:	2300      	movs	r3, #0
 80011c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011d2:	2300      	movs	r3, #0
 80011d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011da:	2200      	movs	r2, #0
 80011dc:	4619      	mov	r1, r3
 80011de:	4818      	ldr	r0, [pc, #96]	@ (8001240 <MX_TIM1_Init+0x150>)
 80011e0:	f00a f88e 	bl	800b300 <HAL_TIM_PWM_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80011ea:	f000 fd25 	bl	8001c38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001202:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001206:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001210:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	4619      	mov	r1, r3
 8001222:	4807      	ldr	r0, [pc, #28]	@ (8001240 <MX_TIM1_Init+0x150>)
 8001224:	f00a fe9e 	bl	800bf64 <HAL_TIMEx_ConfigBreakDeadTime>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800122e:	f000 fd03 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001232:	4803      	ldr	r0, [pc, #12]	@ (8001240 <MX_TIM1_Init+0x150>)
 8001234:	f001 fb08 	bl	8002848 <HAL_TIM_MspPostInit>

}
 8001238:	bf00      	nop
 800123a:	3768      	adds	r7, #104	@ 0x68
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000a58 	.word	0x20000a58
 8001244:	40010000 	.word	0x40010000

08001248 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08e      	sub	sp, #56	@ 0x38
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001268:	463b      	mov	r3, r7
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]
 8001276:	615a      	str	r2, [r3, #20]
 8001278:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800127a:	4b2d      	ldr	r3, [pc, #180]	@ (8001330 <MX_TIM2_Init+0xe8>)
 800127c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001280:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001282:	4b2b      	ldr	r3, [pc, #172]	@ (8001330 <MX_TIM2_Init+0xe8>)
 8001284:	2200      	movs	r2, #0
 8001286:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001288:	4b29      	ldr	r3, [pc, #164]	@ (8001330 <MX_TIM2_Init+0xe8>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800128e:	4b28      	ldr	r3, [pc, #160]	@ (8001330 <MX_TIM2_Init+0xe8>)
 8001290:	f04f 32ff 	mov.w	r2, #4294967295
 8001294:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001296:	4b26      	ldr	r3, [pc, #152]	@ (8001330 <MX_TIM2_Init+0xe8>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129c:	4b24      	ldr	r3, [pc, #144]	@ (8001330 <MX_TIM2_Init+0xe8>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012a2:	4823      	ldr	r0, [pc, #140]	@ (8001330 <MX_TIM2_Init+0xe8>)
 80012a4:	f009 fdff 	bl	800aea6 <HAL_TIM_Base_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80012ae:	f000 fcc3 	bl	8001c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012bc:	4619      	mov	r1, r3
 80012be:	481c      	ldr	r0, [pc, #112]	@ (8001330 <MX_TIM2_Init+0xe8>)
 80012c0:	f00a f932 	bl	800b528 <HAL_TIM_ConfigClockSource>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80012ca:	f000 fcb5 	bl	8001c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012ce:	4818      	ldr	r0, [pc, #96]	@ (8001330 <MX_TIM2_Init+0xe8>)
 80012d0:	f009 feb8 	bl	800b044 <HAL_TIM_PWM_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80012da:	f000 fcad 	bl	8001c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	4619      	mov	r1, r3
 80012ec:	4810      	ldr	r0, [pc, #64]	@ (8001330 <MX_TIM2_Init+0xe8>)
 80012ee:	f00a fdab 	bl	800be48 <HAL_TIMEx_MasterConfigSynchronization>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80012f8:	f000 fc9e 	bl	8001c38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012fc:	2360      	movs	r3, #96	@ 0x60
 80012fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001304:	2300      	movs	r3, #0
 8001306:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800130c:	463b      	mov	r3, r7
 800130e:	2200      	movs	r2, #0
 8001310:	4619      	mov	r1, r3
 8001312:	4807      	ldr	r0, [pc, #28]	@ (8001330 <MX_TIM2_Init+0xe8>)
 8001314:	f009 fff4 	bl	800b300 <HAL_TIM_PWM_ConfigChannel>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800131e:	f000 fc8b 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001322:	4803      	ldr	r0, [pc, #12]	@ (8001330 <MX_TIM2_Init+0xe8>)
 8001324:	f001 fa90 	bl	8002848 <HAL_TIM_MspPostInit>

}
 8001328:	bf00      	nop
 800132a:	3738      	adds	r7, #56	@ 0x38
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000aa4 	.word	0x20000aa4

08001334 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08e      	sub	sp, #56	@ 0x38
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001354:	463b      	mov	r3, r7
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]
 8001362:	615a      	str	r2, [r3, #20]
 8001364:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001366:	4b2d      	ldr	r3, [pc, #180]	@ (800141c <MX_TIM3_Init+0xe8>)
 8001368:	4a2d      	ldr	r2, [pc, #180]	@ (8001420 <MX_TIM3_Init+0xec>)
 800136a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800136c:	4b2b      	ldr	r3, [pc, #172]	@ (800141c <MX_TIM3_Init+0xe8>)
 800136e:	2200      	movs	r2, #0
 8001370:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001372:	4b2a      	ldr	r3, [pc, #168]	@ (800141c <MX_TIM3_Init+0xe8>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001378:	4b28      	ldr	r3, [pc, #160]	@ (800141c <MX_TIM3_Init+0xe8>)
 800137a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800137e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001380:	4b26      	ldr	r3, [pc, #152]	@ (800141c <MX_TIM3_Init+0xe8>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001386:	4b25      	ldr	r3, [pc, #148]	@ (800141c <MX_TIM3_Init+0xe8>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800138c:	4823      	ldr	r0, [pc, #140]	@ (800141c <MX_TIM3_Init+0xe8>)
 800138e:	f009 fd8a 	bl	800aea6 <HAL_TIM_Base_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001398:	f000 fc4e 	bl	8001c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800139c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013a6:	4619      	mov	r1, r3
 80013a8:	481c      	ldr	r0, [pc, #112]	@ (800141c <MX_TIM3_Init+0xe8>)
 80013aa:	f00a f8bd 	bl	800b528 <HAL_TIM_ConfigClockSource>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80013b4:	f000 fc40 	bl	8001c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013b8:	4818      	ldr	r0, [pc, #96]	@ (800141c <MX_TIM3_Init+0xe8>)
 80013ba:	f009 fe43 	bl	800b044 <HAL_TIM_PWM_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80013c4:	f000 fc38 	bl	8001c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013d0:	f107 031c 	add.w	r3, r7, #28
 80013d4:	4619      	mov	r1, r3
 80013d6:	4811      	ldr	r0, [pc, #68]	@ (800141c <MX_TIM3_Init+0xe8>)
 80013d8:	f00a fd36 	bl	800be48 <HAL_TIMEx_MasterConfigSynchronization>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80013e2:	f000 fc29 	bl	8001c38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e6:	2360      	movs	r3, #96	@ 0x60
 80013e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f6:	463b      	mov	r3, r7
 80013f8:	2200      	movs	r2, #0
 80013fa:	4619      	mov	r1, r3
 80013fc:	4807      	ldr	r0, [pc, #28]	@ (800141c <MX_TIM3_Init+0xe8>)
 80013fe:	f009 ff7f 	bl	800b300 <HAL_TIM_PWM_ConfigChannel>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001408:	f000 fc16 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800140c:	4803      	ldr	r0, [pc, #12]	@ (800141c <MX_TIM3_Init+0xe8>)
 800140e:	f001 fa1b 	bl	8002848 <HAL_TIM_MspPostInit>

}
 8001412:	bf00      	nop
 8001414:	3738      	adds	r7, #56	@ 0x38
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000af0 	.word	0x20000af0
 8001420:	40000400 	.word	0x40000400

08001424 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08e      	sub	sp, #56	@ 0x38
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001438:	f107 031c 	add.w	r3, r7, #28
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001444:	463b      	mov	r3, r7
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]
 8001452:	615a      	str	r2, [r3, #20]
 8001454:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001456:	4b2d      	ldr	r3, [pc, #180]	@ (800150c <MX_TIM5_Init+0xe8>)
 8001458:	4a2d      	ldr	r2, [pc, #180]	@ (8001510 <MX_TIM5_Init+0xec>)
 800145a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800145c:	4b2b      	ldr	r3, [pc, #172]	@ (800150c <MX_TIM5_Init+0xe8>)
 800145e:	2200      	movs	r2, #0
 8001460:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001462:	4b2a      	ldr	r3, [pc, #168]	@ (800150c <MX_TIM5_Init+0xe8>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001468:	4b28      	ldr	r3, [pc, #160]	@ (800150c <MX_TIM5_Init+0xe8>)
 800146a:	f04f 32ff 	mov.w	r2, #4294967295
 800146e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001470:	4b26      	ldr	r3, [pc, #152]	@ (800150c <MX_TIM5_Init+0xe8>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001476:	4b25      	ldr	r3, [pc, #148]	@ (800150c <MX_TIM5_Init+0xe8>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800147c:	4823      	ldr	r0, [pc, #140]	@ (800150c <MX_TIM5_Init+0xe8>)
 800147e:	f009 fd12 	bl	800aea6 <HAL_TIM_Base_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001488:	f000 fbd6 	bl	8001c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001490:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001492:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001496:	4619      	mov	r1, r3
 8001498:	481c      	ldr	r0, [pc, #112]	@ (800150c <MX_TIM5_Init+0xe8>)
 800149a:	f00a f845 	bl	800b528 <HAL_TIM_ConfigClockSource>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80014a4:	f000 fbc8 	bl	8001c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80014a8:	4818      	ldr	r0, [pc, #96]	@ (800150c <MX_TIM5_Init+0xe8>)
 80014aa:	f009 fdcb 	bl	800b044 <HAL_TIM_PWM_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80014b4:	f000 fbc0 	bl	8001c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	4619      	mov	r1, r3
 80014c6:	4811      	ldr	r0, [pc, #68]	@ (800150c <MX_TIM5_Init+0xe8>)
 80014c8:	f00a fcbe 	bl	800be48 <HAL_TIMEx_MasterConfigSynchronization>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80014d2:	f000 fbb1 	bl	8001c38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d6:	2360      	movs	r3, #96	@ 0x60
 80014d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014e6:	463b      	mov	r3, r7
 80014e8:	220c      	movs	r2, #12
 80014ea:	4619      	mov	r1, r3
 80014ec:	4807      	ldr	r0, [pc, #28]	@ (800150c <MX_TIM5_Init+0xe8>)
 80014ee:	f009 ff07 	bl	800b300 <HAL_TIM_PWM_ConfigChannel>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80014f8:	f000 fb9e 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80014fc:	4803      	ldr	r0, [pc, #12]	@ (800150c <MX_TIM5_Init+0xe8>)
 80014fe:	f001 f9a3 	bl	8002848 <HAL_TIM_MspPostInit>

}
 8001502:	bf00      	nop
 8001504:	3738      	adds	r7, #56	@ 0x38
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000b3c 	.word	0x20000b3c
 8001510:	40000c00 	.word	0x40000c00

08001514 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800151a:	f107 0310 	add.w	r3, r7, #16
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001532:	4b20      	ldr	r3, [pc, #128]	@ (80015b4 <MX_TIM8_Init+0xa0>)
 8001534:	4a20      	ldr	r2, [pc, #128]	@ (80015b8 <MX_TIM8_Init+0xa4>)
 8001536:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001538:	4b1e      	ldr	r3, [pc, #120]	@ (80015b4 <MX_TIM8_Init+0xa0>)
 800153a:	2200      	movs	r2, #0
 800153c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153e:	4b1d      	ldr	r3, [pc, #116]	@ (80015b4 <MX_TIM8_Init+0xa0>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001544:	4b1b      	ldr	r3, [pc, #108]	@ (80015b4 <MX_TIM8_Init+0xa0>)
 8001546:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800154a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154c:	4b19      	ldr	r3, [pc, #100]	@ (80015b4 <MX_TIM8_Init+0xa0>)
 800154e:	2200      	movs	r2, #0
 8001550:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001552:	4b18      	ldr	r3, [pc, #96]	@ (80015b4 <MX_TIM8_Init+0xa0>)
 8001554:	2200      	movs	r2, #0
 8001556:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001558:	4b16      	ldr	r3, [pc, #88]	@ (80015b4 <MX_TIM8_Init+0xa0>)
 800155a:	2200      	movs	r2, #0
 800155c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800155e:	4815      	ldr	r0, [pc, #84]	@ (80015b4 <MX_TIM8_Init+0xa0>)
 8001560:	f009 fca1 	bl	800aea6 <HAL_TIM_Base_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800156a:	f000 fb65 	bl	8001c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800156e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001572:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001574:	f107 0310 	add.w	r3, r7, #16
 8001578:	4619      	mov	r1, r3
 800157a:	480e      	ldr	r0, [pc, #56]	@ (80015b4 <MX_TIM8_Init+0xa0>)
 800157c:	f009 ffd4 	bl	800b528 <HAL_TIM_ConfigClockSource>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001586:	f000 fb57 	bl	8001c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	4619      	mov	r1, r3
 800159a:	4806      	ldr	r0, [pc, #24]	@ (80015b4 <MX_TIM8_Init+0xa0>)
 800159c:	f00a fc54 	bl	800be48 <HAL_TIMEx_MasterConfigSynchronization>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80015a6:	f000 fb47 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	3720      	adds	r7, #32
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000b88 	.word	0x20000b88
 80015b8:	40010400 	.word	0x40010400

080015bc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
 80015d0:	615a      	str	r2, [r3, #20]
 80015d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80015d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001640 <MX_TIM12_Init+0x84>)
 80015d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001644 <MX_TIM12_Init+0x88>)
 80015d8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80015da:	4b19      	ldr	r3, [pc, #100]	@ (8001640 <MX_TIM12_Init+0x84>)
 80015dc:	2200      	movs	r2, #0
 80015de:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e0:	4b17      	ldr	r3, [pc, #92]	@ (8001640 <MX_TIM12_Init+0x84>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80015e6:	4b16      	ldr	r3, [pc, #88]	@ (8001640 <MX_TIM12_Init+0x84>)
 80015e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015ec:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ee:	4b14      	ldr	r3, [pc, #80]	@ (8001640 <MX_TIM12_Init+0x84>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f4:	4b12      	ldr	r3, [pc, #72]	@ (8001640 <MX_TIM12_Init+0x84>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80015fa:	4811      	ldr	r0, [pc, #68]	@ (8001640 <MX_TIM12_Init+0x84>)
 80015fc:	f009 fd22 	bl	800b044 <HAL_TIM_PWM_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001606:	f000 fb17 	bl	8001c38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800160a:	2360      	movs	r3, #96	@ 0x60
 800160c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	2200      	movs	r2, #0
 800161e:	4619      	mov	r1, r3
 8001620:	4807      	ldr	r0, [pc, #28]	@ (8001640 <MX_TIM12_Init+0x84>)
 8001622:	f009 fe6d 	bl	800b300 <HAL_TIM_PWM_ConfigChannel>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800162c:	f000 fb04 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001630:	4803      	ldr	r0, [pc, #12]	@ (8001640 <MX_TIM12_Init+0x84>)
 8001632:	f001 f909 	bl	8002848 <HAL_TIM_MspPostInit>

}
 8001636:	bf00      	nop
 8001638:	3720      	adds	r7, #32
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000bd4 	.word	0x20000bd4
 8001644:	40001800 	.word	0x40001800

08001648 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800164c:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <MX_USART1_UART_Init+0x58>)
 800164e:	4a15      	ldr	r2, [pc, #84]	@ (80016a4 <MX_USART1_UART_Init+0x5c>)
 8001650:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001652:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <MX_USART1_UART_Init+0x58>)
 8001654:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001658:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800165a:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <MX_USART1_UART_Init+0x58>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001660:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <MX_USART1_UART_Init+0x58>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001666:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <MX_USART1_UART_Init+0x58>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <MX_USART1_UART_Init+0x58>)
 800166e:	220c      	movs	r2, #12
 8001670:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001672:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <MX_USART1_UART_Init+0x58>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001678:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <MX_USART1_UART_Init+0x58>)
 800167a:	2200      	movs	r2, #0
 800167c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800167e:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <MX_USART1_UART_Init+0x58>)
 8001680:	2200      	movs	r2, #0
 8001682:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001684:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <MX_USART1_UART_Init+0x58>)
 8001686:	2200      	movs	r2, #0
 8001688:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800168a:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <MX_USART1_UART_Init+0x58>)
 800168c:	f00a fd06 	bl	800c09c <HAL_UART_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001696:	f000 facf 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000c20 	.word	0x20000c20
 80016a4:	40011000 	.word	0x40011000

080016a8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80016ac:	4b14      	ldr	r3, [pc, #80]	@ (8001700 <MX_USART6_UART_Init+0x58>)
 80016ae:	4a15      	ldr	r2, [pc, #84]	@ (8001704 <MX_USART6_UART_Init+0x5c>)
 80016b0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80016b2:	4b13      	ldr	r3, [pc, #76]	@ (8001700 <MX_USART6_UART_Init+0x58>)
 80016b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016b8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80016ba:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <MX_USART6_UART_Init+0x58>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001700 <MX_USART6_UART_Init+0x58>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001700 <MX_USART6_UART_Init+0x58>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001700 <MX_USART6_UART_Init+0x58>)
 80016ce:	220c      	movs	r2, #12
 80016d0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001700 <MX_USART6_UART_Init+0x58>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d8:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <MX_USART6_UART_Init+0x58>)
 80016da:	2200      	movs	r2, #0
 80016dc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016de:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <MX_USART6_UART_Init+0x58>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016e4:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <MX_USART6_UART_Init+0x58>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80016ea:	4805      	ldr	r0, [pc, #20]	@ (8001700 <MX_USART6_UART_Init+0x58>)
 80016ec:	f00a fcd6 	bl	800c09c <HAL_UART_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80016f6:	f000 fa9f 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000ca8 	.word	0x20000ca8
 8001704:	40011400 	.word	0x40011400

08001708 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
 800171c:	615a      	str	r2, [r3, #20]
 800171e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001720:	4b1f      	ldr	r3, [pc, #124]	@ (80017a0 <MX_FMC_Init+0x98>)
 8001722:	4a20      	ldr	r2, [pc, #128]	@ (80017a4 <MX_FMC_Init+0x9c>)
 8001724:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001726:	4b1e      	ldr	r3, [pc, #120]	@ (80017a0 <MX_FMC_Init+0x98>)
 8001728:	2200      	movs	r2, #0
 800172a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800172c:	4b1c      	ldr	r3, [pc, #112]	@ (80017a0 <MX_FMC_Init+0x98>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001732:	4b1b      	ldr	r3, [pc, #108]	@ (80017a0 <MX_FMC_Init+0x98>)
 8001734:	2204      	movs	r2, #4
 8001736:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001738:	4b19      	ldr	r3, [pc, #100]	@ (80017a0 <MX_FMC_Init+0x98>)
 800173a:	2210      	movs	r2, #16
 800173c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800173e:	4b18      	ldr	r3, [pc, #96]	@ (80017a0 <MX_FMC_Init+0x98>)
 8001740:	2240      	movs	r2, #64	@ 0x40
 8001742:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001744:	4b16      	ldr	r3, [pc, #88]	@ (80017a0 <MX_FMC_Init+0x98>)
 8001746:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800174a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800174c:	4b14      	ldr	r3, [pc, #80]	@ (80017a0 <MX_FMC_Init+0x98>)
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001752:	4b13      	ldr	r3, [pc, #76]	@ (80017a0 <MX_FMC_Init+0x98>)
 8001754:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001758:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800175a:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <MX_FMC_Init+0x98>)
 800175c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001760:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001762:	4b0f      	ldr	r3, [pc, #60]	@ (80017a0 <MX_FMC_Init+0x98>)
 8001764:	2200      	movs	r2, #0
 8001766:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001768:	2302      	movs	r3, #2
 800176a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800176c:	2307      	movs	r3, #7
 800176e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001770:	2304      	movs	r3, #4
 8001772:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001774:	2307      	movs	r3, #7
 8001776:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001778:	2303      	movs	r3, #3
 800177a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800177c:	2302      	movs	r3, #2
 800177e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001780:	2302      	movs	r3, #2
 8001782:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	4619      	mov	r1, r3
 8001788:	4805      	ldr	r0, [pc, #20]	@ (80017a0 <MX_FMC_Init+0x98>)
 800178a:	f009 fa50 	bl	800ac2e <HAL_SDRAM_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001794:	f000 fa50 	bl	8001c38 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001798:	bf00      	nop
 800179a:	3720      	adds	r7, #32
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000d30 	.word	0x20000d30
 80017a4:	a0000140 	.word	0xa0000140

080017a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b090      	sub	sp, #64	@ 0x40
 80017ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
 80017bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017be:	4bb0      	ldr	r3, [pc, #704]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	4aaf      	ldr	r2, [pc, #700]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 80017c4:	f043 0310 	orr.w	r3, r3, #16
 80017c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ca:	4bad      	ldr	r3, [pc, #692]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	f003 0310 	and.w	r3, r3, #16
 80017d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017d6:	4baa      	ldr	r3, [pc, #680]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	4aa9      	ldr	r2, [pc, #676]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 80017dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e2:	4ba7      	ldr	r3, [pc, #668]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80017ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ee:	4ba4      	ldr	r3, [pc, #656]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	4aa3      	ldr	r2, [pc, #652]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fa:	4ba1      	ldr	r3, [pc, #644]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	623b      	str	r3, [r7, #32]
 8001804:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001806:	4b9e      	ldr	r3, [pc, #632]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	4a9d      	ldr	r2, [pc, #628]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 800180c:	f043 0308 	orr.w	r3, r3, #8
 8001810:	6313      	str	r3, [r2, #48]	@ 0x30
 8001812:	4b9b      	ldr	r3, [pc, #620]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	61fb      	str	r3, [r7, #28]
 800181c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800181e:	4b98      	ldr	r3, [pc, #608]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	4a97      	ldr	r2, [pc, #604]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 8001824:	f043 0304 	orr.w	r3, r3, #4
 8001828:	6313      	str	r3, [r2, #48]	@ 0x30
 800182a:	4b95      	ldr	r3, [pc, #596]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	61bb      	str	r3, [r7, #24]
 8001834:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	4b92      	ldr	r3, [pc, #584]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	4a91      	ldr	r2, [pc, #580]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6313      	str	r3, [r2, #48]	@ 0x30
 8001842:	4b8f      	ldr	r3, [pc, #572]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800184e:	4b8c      	ldr	r3, [pc, #560]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	4a8b      	ldr	r2, [pc, #556]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 8001854:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001858:	6313      	str	r3, [r2, #48]	@ 0x30
 800185a:	4b89      	ldr	r3, [pc, #548]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001866:	4b86      	ldr	r3, [pc, #536]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	4a85      	ldr	r2, [pc, #532]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 800186c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001870:	6313      	str	r3, [r2, #48]	@ 0x30
 8001872:	4b83      	ldr	r3, [pc, #524]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800187e:	4b80      	ldr	r3, [pc, #512]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	4a7f      	ldr	r2, [pc, #508]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 8001884:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001888:	6313      	str	r3, [r2, #48]	@ 0x30
 800188a:	4b7d      	ldr	r3, [pc, #500]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001896:	4b7a      	ldr	r3, [pc, #488]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	4a79      	ldr	r2, [pc, #484]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 800189c:	f043 0320 	orr.w	r3, r3, #32
 80018a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a2:	4b77      	ldr	r3, [pc, #476]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	f003 0320 	and.w	r3, r3, #32
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ae:	4b74      	ldr	r3, [pc, #464]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	4a73      	ldr	r2, [pc, #460]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 80018b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ba:	4b71      	ldr	r3, [pc, #452]	@ (8001a80 <MX_GPIO_Init+0x2d8>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80018c6:	2201      	movs	r2, #1
 80018c8:	2120      	movs	r1, #32
 80018ca:	486e      	ldr	r0, [pc, #440]	@ (8001a84 <MX_GPIO_Init+0x2dc>)
 80018cc:	f003 faec 	bl	8004ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80018d0:	2200      	movs	r2, #0
 80018d2:	210c      	movs	r1, #12
 80018d4:	486c      	ldr	r0, [pc, #432]	@ (8001a88 <MX_GPIO_Init+0x2e0>)
 80018d6:	f003 fae7 	bl	8004ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80018da:	2201      	movs	r2, #1
 80018dc:	2108      	movs	r1, #8
 80018de:	486b      	ldr	r0, [pc, #428]	@ (8001a8c <MX_GPIO_Init+0x2e4>)
 80018e0:	f003 fae2 	bl	8004ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80018e4:	2201      	movs	r2, #1
 80018e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018ea:	4867      	ldr	r0, [pc, #412]	@ (8001a88 <MX_GPIO_Init+0x2e0>)
 80018ec:	f003 fadc 	bl	8004ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80018f0:	2200      	movs	r2, #0
 80018f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018f6:	4866      	ldr	r0, [pc, #408]	@ (8001a90 <MX_GPIO_Init+0x2e8>)
 80018f8:	f003 fad6 	bl	8004ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80018fc:	2200      	movs	r2, #0
 80018fe:	21c8      	movs	r1, #200	@ 0xc8
 8001900:	4864      	ldr	r0, [pc, #400]	@ (8001a94 <MX_GPIO_Init+0x2ec>)
 8001902:	f003 fad1 	bl	8004ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001906:	2308      	movs	r3, #8
 8001908:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800190a:	2300      	movs	r3, #0
 800190c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001912:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001916:	4619      	mov	r1, r3
 8001918:	485f      	ldr	r0, [pc, #380]	@ (8001a98 <MX_GPIO_Init+0x2f0>)
 800191a:	f003 f901 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800191e:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8001922:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001930:	230a      	movs	r3, #10
 8001932:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001934:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001938:	4619      	mov	r1, r3
 800193a:	4858      	ldr	r0, [pc, #352]	@ (8001a9c <MX_GPIO_Init+0x2f4>)
 800193c:	f003 f8f0 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001940:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001944:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001946:	2300      	movs	r3, #0
 8001948:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800194e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001952:	4619      	mov	r1, r3
 8001954:	4852      	ldr	r0, [pc, #328]	@ (8001aa0 <MX_GPIO_Init+0x2f8>)
 8001956:	f003 f8e3 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800195a:	2340      	movs	r3, #64	@ 0x40
 800195c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800195e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001962:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001968:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800196c:	4619      	mov	r1, r3
 800196e:	4845      	ldr	r0, [pc, #276]	@ (8001a84 <MX_GPIO_Init+0x2dc>)
 8001970:	f003 f8d6 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001974:	2320      	movs	r3, #32
 8001976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001978:	2301      	movs	r3, #1
 800197a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001984:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001988:	4619      	mov	r1, r3
 800198a:	483e      	ldr	r0, [pc, #248]	@ (8001a84 <MX_GPIO_Init+0x2dc>)
 800198c:	f003 f8c8 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001990:	f241 030c 	movw	r3, #4108	@ 0x100c
 8001994:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001996:	2301      	movs	r3, #1
 8001998:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2300      	movs	r3, #0
 80019a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80019a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019a6:	4619      	mov	r1, r3
 80019a8:	4837      	ldr	r0, [pc, #220]	@ (8001a88 <MX_GPIO_Init+0x2e0>)
 80019aa:	f003 f8b9 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80019ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b4:	2300      	movs	r3, #0
 80019b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80019bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019c0:	4619      	mov	r1, r3
 80019c2:	4838      	ldr	r0, [pc, #224]	@ (8001aa4 <MX_GPIO_Init+0x2fc>)
 80019c4:	f003 f8ac 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80019c8:	2308      	movs	r3, #8
 80019ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019cc:	2301      	movs	r3, #1
 80019ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d4:	2300      	movs	r3, #0
 80019d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80019d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019dc:	4619      	mov	r1, r3
 80019de:	482b      	ldr	r0, [pc, #172]	@ (8001a8c <MX_GPIO_Init+0x2e4>)
 80019e0:	f003 f89e 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80019e4:	2310      	movs	r3, #16
 80019e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e8:	2300      	movs	r3, #0
 80019ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019f4:	4619      	mov	r1, r3
 80019f6:	4823      	ldr	r0, [pc, #140]	@ (8001a84 <MX_GPIO_Init+0x2dc>)
 80019f8:	f003 f892 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80019fc:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a02:	2300      	movs	r3, #0
 8001a04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a0e:	4619      	mov	r1, r3
 8001a10:	481f      	ldr	r0, [pc, #124]	@ (8001a90 <MX_GPIO_Init+0x2e8>)
 8001a12:	f003 f885 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001a16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001a28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4818      	ldr	r0, [pc, #96]	@ (8001a90 <MX_GPIO_Init+0x2e8>)
 8001a30:	f003 f876 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001a34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a3a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001a3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001a44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a48:	4619      	mov	r1, r3
 8001a4a:	480f      	ldr	r0, [pc, #60]	@ (8001a88 <MX_GPIO_Init+0x2e0>)
 8001a4c:	f003 f868 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001a50:	2310      	movs	r3, #16
 8001a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a60:	230a      	movs	r3, #10
 8001a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001a64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4809      	ldr	r0, [pc, #36]	@ (8001a90 <MX_GPIO_Init+0x2e8>)
 8001a6c:	f003 f858 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001a70:	23c8      	movs	r3, #200	@ 0xc8
 8001a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a74:	2301      	movs	r3, #1
 8001a76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a7c:	e014      	b.n	8001aa8 <MX_GPIO_Init+0x300>
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020c00 	.word	0x40020c00
 8001a88:	40022000 	.word	0x40022000
 8001a8c:	40022800 	.word	0x40022800
 8001a90:	40021c00 	.word	0x40021c00
 8001a94:	40021800 	.word	0x40021800
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40020400 	.word	0x40020400
 8001aa0:	40022400 	.word	0x40022400
 8001aa4:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001aac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4819      	ldr	r0, [pc, #100]	@ (8001b18 <MX_GPIO_Init+0x370>)
 8001ab4:	f003 f834 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001ab8:	2305      	movs	r3, #5
 8001aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	2302      	movs	r3, #2
 8001abe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ac8:	230a      	movs	r3, #10
 8001aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001acc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4812      	ldr	r0, [pc, #72]	@ (8001b1c <MX_GPIO_Init+0x374>)
 8001ad4:	f003 f824 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001ad8:	2304      	movs	r3, #4
 8001ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001adc:	2300      	movs	r3, #0
 8001ade:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001ae4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ae8:	4619      	mov	r1, r3
 8001aea:	480b      	ldr	r0, [pc, #44]	@ (8001b18 <MX_GPIO_Init+0x370>)
 8001aec:	f003 f818 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001af0:	2328      	movs	r3, #40	@ 0x28
 8001af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afc:	2303      	movs	r3, #3
 8001afe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b00:	230a      	movs	r3, #10
 8001b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4805      	ldr	r0, [pc, #20]	@ (8001b20 <MX_GPIO_Init+0x378>)
 8001b0c:	f003 f808 	bl	8004b20 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b10:	bf00      	nop
 8001b12:	3740      	adds	r7, #64	@ 0x40
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40021800 	.word	0x40021800
 8001b1c:	40020800 	.word	0x40020800
 8001b20:	40020000 	.word	0x40020000

08001b24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001b2c:	f012 fa1a 	bl	8013f64 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  
  // Logger 초기화 (STM32에서는 단순히 연결 상태 설정)
  LOGGER_Connect("STM32", 0);
 8001b30:	2100      	movs	r1, #0
 8001b32:	482d      	ldr	r0, [pc, #180]	@ (8001be8 <StartDefaultTask+0xc4>)
 8001b34:	f001 fa28 	bl	8002f88 <LOGGER_Connect>
  
  // 간단한 로그 테스트
  LOG_INFO("=== STM32F746G-DISCO Log Test Started ===");
 8001b38:	492c      	ldr	r1, [pc, #176]	@ (8001bec <StartDefaultTask+0xc8>)
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f001 fa6c 	bl	8003018 <LOGGER_SendFormatted>
  LOG_DEBUG("This is a DEBUG message");
 8001b40:	492b      	ldr	r1, [pc, #172]	@ (8001bf0 <StartDefaultTask+0xcc>)
 8001b42:	2000      	movs	r0, #0
 8001b44:	f001 fa68 	bl	8003018 <LOGGER_SendFormatted>
  LOG_INFO("This is an INFO message");
 8001b48:	492a      	ldr	r1, [pc, #168]	@ (8001bf4 <StartDefaultTask+0xd0>)
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	f001 fa64 	bl	8003018 <LOGGER_SendFormatted>
  LOG_WARN("This is a WARNING message");
 8001b50:	4929      	ldr	r1, [pc, #164]	@ (8001bf8 <StartDefaultTask+0xd4>)
 8001b52:	2002      	movs	r0, #2
 8001b54:	f001 fa60 	bl	8003018 <LOGGER_SendFormatted>
  LOG_ERROR("This is an ERROR message");
 8001b58:	4928      	ldr	r1, [pc, #160]	@ (8001bfc <StartDefaultTask+0xd8>)
 8001b5a:	2003      	movs	r0, #3
 8001b5c:	f001 fa5c 	bl	8003018 <LOGGER_SendFormatted>
  LOG_INFO("=== Log Test Completed ===");
 8001b60:	4927      	ldr	r1, [pc, #156]	@ (8001c00 <StartDefaultTask+0xdc>)
 8001b62:	2001      	movs	r0, #1
 8001b64:	f001 fa58 	bl	8003018 <LOGGER_SendFormatted>
  
  uint32_t counter = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  uint32_t last_log_time = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	613b      	str	r3, [r7, #16]
  
  /* Infinite loop */
  for(;;)
  {
    uint32_t current_time = HAL_GetTick();
 8001b70:	f001 fcec 	bl	800354c <HAL_GetTick>
 8001b74:	60f8      	str	r0, [r7, #12]
    
    // 3초마다 로그 출력
    if (current_time - last_log_time >= 3000) {
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d92d      	bls.n	8001be0 <StartDefaultTask+0xbc>
      last_log_time = current_time;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	613b      	str	r3, [r7, #16]
      counter++;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	617b      	str	r3, [r7, #20]
      
      LOG_INFO("[%lu] System running... Counter: %lu, Uptime: %lu ms", 
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	491b      	ldr	r1, [pc, #108]	@ (8001c04 <StartDefaultTask+0xe0>)
 8001b98:	2001      	movs	r0, #1
 8001b9a:	f001 fa3d 	bl	8003018 <LOGGER_SendFormatted>
               counter, counter, current_time);
      
      // 5번마다 다른 레벨 로그도 출력
      if (counter % 5 == 0) {
 8001b9e:	6979      	ldr	r1, [r7, #20]
 8001ba0:	4b19      	ldr	r3, [pc, #100]	@ (8001c08 <StartDefaultTask+0xe4>)
 8001ba2:	fba3 2301 	umull	r2, r3, r3, r1
 8001ba6:	089a      	lsrs	r2, r3, #2
 8001ba8:	4613      	mov	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	1aca      	subs	r2, r1, r3
 8001bb0:	2a00      	cmp	r2, #0
 8001bb2:	d104      	bne.n	8001bbe <StartDefaultTask+0x9a>
        LOG_WARN("Warning test message - Counter reached %lu", counter);
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	4915      	ldr	r1, [pc, #84]	@ (8001c0c <StartDefaultTask+0xe8>)
 8001bb8:	2002      	movs	r0, #2
 8001bba:	f001 fa2d 	bl	8003018 <LOGGER_SendFormatted>
      }
      
      if (counter % 10 == 0) {
 8001bbe:	6979      	ldr	r1, [r7, #20]
 8001bc0:	4b11      	ldr	r3, [pc, #68]	@ (8001c08 <StartDefaultTask+0xe4>)
 8001bc2:	fba3 2301 	umull	r2, r3, r3, r1
 8001bc6:	08da      	lsrs	r2, r3, #3
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	1aca      	subs	r2, r1, r3
 8001bd2:	2a00      	cmp	r2, #0
 8001bd4:	d104      	bne.n	8001be0 <StartDefaultTask+0xbc>
        LOG_ERROR("Error test message - Counter reached %lu", counter);
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	490d      	ldr	r1, [pc, #52]	@ (8001c10 <StartDefaultTask+0xec>)
 8001bda:	2003      	movs	r0, #3
 8001bdc:	f001 fa1c 	bl	8003018 <LOGGER_SendFormatted>
      }
    }
    
    osDelay(100);  // 100ms 대기
 8001be0:	2064      	movs	r0, #100	@ 0x64
 8001be2:	f00f febb 	bl	801195c <osDelay>
  {
 8001be6:	e7c3      	b.n	8001b70 <StartDefaultTask+0x4c>
 8001be8:	08014ff4 	.word	0x08014ff4
 8001bec:	08014ffc 	.word	0x08014ffc
 8001bf0:	08015028 	.word	0x08015028
 8001bf4:	08015040 	.word	0x08015040
 8001bf8:	08015058 	.word	0x08015058
 8001bfc:	08015074 	.word	0x08015074
 8001c00:	08015090 	.word	0x08015090
 8001c04:	080150ac 	.word	0x080150ac
 8001c08:	cccccccd 	.word	0xcccccccd
 8001c0c:	080150e4 	.word	0x080150e4
 8001c10:	08015110 	.word	0x08015110

08001c14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a04      	ldr	r2, [pc, #16]	@ (8001c34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d101      	bne.n	8001c2a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001c26:	f001 fc7d 	bl	8003524 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40001000 	.word	0x40001000

08001c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c3c:	b672      	cpsid	i
}
 8001c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <Error_Handler+0x8>

08001c44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4a:	4b11      	ldr	r3, [pc, #68]	@ (8001c90 <HAL_MspInit+0x4c>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	4a10      	ldr	r2, [pc, #64]	@ (8001c90 <HAL_MspInit+0x4c>)
 8001c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c56:	4b0e      	ldr	r3, [pc, #56]	@ (8001c90 <HAL_MspInit+0x4c>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c62:	4b0b      	ldr	r3, [pc, #44]	@ (8001c90 <HAL_MspInit+0x4c>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c66:	4a0a      	ldr	r2, [pc, #40]	@ (8001c90 <HAL_MspInit+0x4c>)
 8001c68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c6e:	4b08      	ldr	r3, [pc, #32]	@ (8001c90 <HAL_MspInit+0x4c>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	210f      	movs	r1, #15
 8001c7e:	f06f 0001 	mvn.w	r0, #1
 8001c82:	f001 ffe3 	bl	8003c4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800

08001c94 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	@ 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a21      	ldr	r2, [pc, #132]	@ (8001d38 <HAL_ADC_MspInit+0xa4>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d13c      	bne.n	8001d30 <HAL_ADC_MspInit+0x9c>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001cb6:	4b21      	ldr	r3, [pc, #132]	@ (8001d3c <HAL_ADC_MspInit+0xa8>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cba:	4a20      	ldr	r2, [pc, #128]	@ (8001d3c <HAL_ADC_MspInit+0xa8>)
 8001cbc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d3c <HAL_ADC_MspInit+0xa8>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cce:	4b1b      	ldr	r3, [pc, #108]	@ (8001d3c <HAL_ADC_MspInit+0xa8>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	4a1a      	ldr	r2, [pc, #104]	@ (8001d3c <HAL_ADC_MspInit+0xa8>)
 8001cd4:	f043 0320 	orr.w	r3, r3, #32
 8001cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cda:	4b18      	ldr	r3, [pc, #96]	@ (8001d3c <HAL_ADC_MspInit+0xa8>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	f003 0320 	and.w	r3, r3, #32
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	4b15      	ldr	r3, [pc, #84]	@ (8001d3c <HAL_ADC_MspInit+0xa8>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	4a14      	ldr	r2, [pc, #80]	@ (8001d3c <HAL_ADC_MspInit+0xa8>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf2:	4b12      	ldr	r3, [pc, #72]	@ (8001d3c <HAL_ADC_MspInit+0xa8>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001cfe:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8001d02:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d04:	2303      	movs	r3, #3
 8001d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4619      	mov	r1, r3
 8001d12:	480b      	ldr	r0, [pc, #44]	@ (8001d40 <HAL_ADC_MspInit+0xac>)
 8001d14:	f002 ff04 	bl	8004b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4806      	ldr	r0, [pc, #24]	@ (8001d44 <HAL_ADC_MspInit+0xb0>)
 8001d2c:	f002 fef8 	bl	8004b20 <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 8001d30:	bf00      	nop
 8001d32:	3728      	adds	r7, #40	@ 0x28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40012200 	.word	0x40012200
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40021400 	.word	0x40021400
 8001d44:	40020000 	.word	0x40020000

08001d48 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0a      	ldr	r2, [pc, #40]	@ (8001d80 <HAL_CRC_MspInit+0x38>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d10b      	bne.n	8001d72 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d84 <HAL_CRC_MspInit+0x3c>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	4a09      	ldr	r2, [pc, #36]	@ (8001d84 <HAL_CRC_MspInit+0x3c>)
 8001d60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d66:	4b07      	ldr	r3, [pc, #28]	@ (8001d84 <HAL_CRC_MspInit+0x3c>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001d72:	bf00      	nop
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40023000 	.word	0x40023000
 8001d84:	40023800 	.word	0x40023800

08001d88 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08e      	sub	sp, #56	@ 0x38
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a50      	ldr	r2, [pc, #320]	@ (8001ee8 <HAL_DCMI_MspInit+0x160>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	f040 809a 	bne.w	8001ee0 <HAL_DCMI_MspInit+0x158>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001dac:	4b4f      	ldr	r3, [pc, #316]	@ (8001eec <HAL_DCMI_MspInit+0x164>)
 8001dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001db0:	4a4e      	ldr	r2, [pc, #312]	@ (8001eec <HAL_DCMI_MspInit+0x164>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6353      	str	r3, [r2, #52]	@ 0x34
 8001db8:	4b4c      	ldr	r3, [pc, #304]	@ (8001eec <HAL_DCMI_MspInit+0x164>)
 8001dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	623b      	str	r3, [r7, #32]
 8001dc2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dc4:	4b49      	ldr	r3, [pc, #292]	@ (8001eec <HAL_DCMI_MspInit+0x164>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc8:	4a48      	ldr	r2, [pc, #288]	@ (8001eec <HAL_DCMI_MspInit+0x164>)
 8001dca:	f043 0310 	orr.w	r3, r3, #16
 8001dce:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd0:	4b46      	ldr	r3, [pc, #280]	@ (8001eec <HAL_DCMI_MspInit+0x164>)
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ddc:	4b43      	ldr	r3, [pc, #268]	@ (8001eec <HAL_DCMI_MspInit+0x164>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de0:	4a42      	ldr	r2, [pc, #264]	@ (8001eec <HAL_DCMI_MspInit+0x164>)
 8001de2:	f043 0308 	orr.w	r3, r3, #8
 8001de6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de8:	4b40      	ldr	r3, [pc, #256]	@ (8001eec <HAL_DCMI_MspInit+0x164>)
 8001dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	61bb      	str	r3, [r7, #24]
 8001df2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001df4:	4b3d      	ldr	r3, [pc, #244]	@ (8001eec <HAL_DCMI_MspInit+0x164>)
 8001df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df8:	4a3c      	ldr	r2, [pc, #240]	@ (8001eec <HAL_DCMI_MspInit+0x164>)
 8001dfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dfe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e00:	4b3a      	ldr	r3, [pc, #232]	@ (8001eec <HAL_DCMI_MspInit+0x164>)
 8001e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e0c:	4b37      	ldr	r3, [pc, #220]	@ (8001eec <HAL_DCMI_MspInit+0x164>)
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e10:	4a36      	ldr	r2, [pc, #216]	@ (8001eec <HAL_DCMI_MspInit+0x164>)
 8001e12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e16:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e18:	4b34      	ldr	r3, [pc, #208]	@ (8001eec <HAL_DCMI_MspInit+0x164>)
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e24:	4b31      	ldr	r3, [pc, #196]	@ (8001eec <HAL_DCMI_MspInit+0x164>)
 8001e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e28:	4a30      	ldr	r2, [pc, #192]	@ (8001eec <HAL_DCMI_MspInit+0x164>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e30:	4b2e      	ldr	r3, [pc, #184]	@ (8001eec <HAL_DCMI_MspInit+0x164>)
 8001e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001e3c:	2360      	movs	r3, #96	@ 0x60
 8001e3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e4c:	230d      	movs	r3, #13
 8001e4e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e54:	4619      	mov	r1, r3
 8001e56:	4826      	ldr	r0, [pc, #152]	@ (8001ef0 <HAL_DCMI_MspInit+0x168>)
 8001e58:	f002 fe62 	bl	8004b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001e5c:	2308      	movs	r3, #8
 8001e5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e6c:	230d      	movs	r3, #13
 8001e6e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001e70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e74:	4619      	mov	r1, r3
 8001e76:	481f      	ldr	r0, [pc, #124]	@ (8001ef4 <HAL_DCMI_MspInit+0x16c>)
 8001e78:	f002 fe52 	bl	8004b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001e7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e8e:	230d      	movs	r3, #13
 8001e90:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001e92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e96:	4619      	mov	r1, r3
 8001e98:	4817      	ldr	r0, [pc, #92]	@ (8001ef8 <HAL_DCMI_MspInit+0x170>)
 8001e9a:	f002 fe41 	bl	8004b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001e9e:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8001ea2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eac:	2300      	movs	r3, #0
 8001eae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001eb0:	230d      	movs	r3, #13
 8001eb2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001eb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4810      	ldr	r0, [pc, #64]	@ (8001efc <HAL_DCMI_MspInit+0x174>)
 8001ebc:	f002 fe30 	bl	8004b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001ec0:	2350      	movs	r3, #80	@ 0x50
 8001ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ed0:	230d      	movs	r3, #13
 8001ed2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4809      	ldr	r0, [pc, #36]	@ (8001f00 <HAL_DCMI_MspInit+0x178>)
 8001edc:	f002 fe20 	bl	8004b20 <HAL_GPIO_Init>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8001ee0:	bf00      	nop
 8001ee2:	3738      	adds	r7, #56	@ 0x38
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	50050000 	.word	0x50050000
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40020c00 	.word	0x40020c00
 8001ef8:	40021800 	.word	0x40021800
 8001efc:	40021c00 	.word	0x40021c00
 8001f00:	40020000 	.word	0x40020000

08001f04 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a0d      	ldr	r2, [pc, #52]	@ (8001f48 <HAL_DMA2D_MspInit+0x44>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d113      	bne.n	8001f3e <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f16:	4b0d      	ldr	r3, [pc, #52]	@ (8001f4c <HAL_DMA2D_MspInit+0x48>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	4a0c      	ldr	r2, [pc, #48]	@ (8001f4c <HAL_DMA2D_MspInit+0x48>)
 8001f1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f22:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <HAL_DMA2D_MspInit+0x48>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2105      	movs	r1, #5
 8001f32:	205a      	movs	r0, #90	@ 0x5a
 8001f34:	f001 fe8a 	bl	8003c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001f38:	205a      	movs	r0, #90	@ 0x5a
 8001f3a:	f001 fea3 	bl	8003c84 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001f3e:	bf00      	nop
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	4002b000 	.word	0x4002b000
 8001f4c:	40023800 	.word	0x40023800

08001f50 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08e      	sub	sp, #56	@ 0x38
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a3f      	ldr	r2, [pc, #252]	@ (800206c <HAL_ETH_MspInit+0x11c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d178      	bne.n	8002064 <HAL_ETH_MspInit+0x114>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001f72:	4b3f      	ldr	r3, [pc, #252]	@ (8002070 <HAL_ETH_MspInit+0x120>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f76:	4a3e      	ldr	r2, [pc, #248]	@ (8002070 <HAL_ETH_MspInit+0x120>)
 8001f78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f7e:	4b3c      	ldr	r3, [pc, #240]	@ (8002070 <HAL_ETH_MspInit+0x120>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f86:	623b      	str	r3, [r7, #32]
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	4b39      	ldr	r3, [pc, #228]	@ (8002070 <HAL_ETH_MspInit+0x120>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	4a38      	ldr	r2, [pc, #224]	@ (8002070 <HAL_ETH_MspInit+0x120>)
 8001f90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f96:	4b36      	ldr	r3, [pc, #216]	@ (8002070 <HAL_ETH_MspInit+0x120>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f9e:	61fb      	str	r3, [r7, #28]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	4b33      	ldr	r3, [pc, #204]	@ (8002070 <HAL_ETH_MspInit+0x120>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	4a32      	ldr	r2, [pc, #200]	@ (8002070 <HAL_ETH_MspInit+0x120>)
 8001fa8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fae:	4b30      	ldr	r3, [pc, #192]	@ (8002070 <HAL_ETH_MspInit+0x120>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001fb6:	61bb      	str	r3, [r7, #24]
 8001fb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fba:	4b2d      	ldr	r3, [pc, #180]	@ (8002070 <HAL_ETH_MspInit+0x120>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	4a2c      	ldr	r2, [pc, #176]	@ (8002070 <HAL_ETH_MspInit+0x120>)
 8001fc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc6:	4b2a      	ldr	r3, [pc, #168]	@ (8002070 <HAL_ETH_MspInit+0x120>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd2:	4b27      	ldr	r3, [pc, #156]	@ (8002070 <HAL_ETH_MspInit+0x120>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd6:	4a26      	ldr	r2, [pc, #152]	@ (8002070 <HAL_ETH_MspInit+0x120>)
 8001fd8:	f043 0304 	orr.w	r3, r3, #4
 8001fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fde:	4b24      	ldr	r3, [pc, #144]	@ (8002070 <HAL_ETH_MspInit+0x120>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fea:	4b21      	ldr	r3, [pc, #132]	@ (8002070 <HAL_ETH_MspInit+0x120>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	4a20      	ldr	r2, [pc, #128]	@ (8002070 <HAL_ETH_MspInit+0x120>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8002070 <HAL_ETH_MspInit+0x120>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002002:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8002006:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002008:	2302      	movs	r3, #2
 800200a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002010:	2303      	movs	r3, #3
 8002012:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002014:	230b      	movs	r3, #11
 8002016:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002018:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800201c:	4619      	mov	r1, r3
 800201e:	4815      	ldr	r0, [pc, #84]	@ (8002074 <HAL_ETH_MspInit+0x124>)
 8002020:	f002 fd7e 	bl	8004b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002024:	2332      	movs	r3, #50	@ 0x32
 8002026:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002028:	2302      	movs	r3, #2
 800202a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002030:	2303      	movs	r3, #3
 8002032:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002034:	230b      	movs	r3, #11
 8002036:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002038:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800203c:	4619      	mov	r1, r3
 800203e:	480e      	ldr	r0, [pc, #56]	@ (8002078 <HAL_ETH_MspInit+0x128>)
 8002040:	f002 fd6e 	bl	8004b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002044:	2386      	movs	r3, #134	@ 0x86
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002048:	2302      	movs	r3, #2
 800204a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002050:	2303      	movs	r3, #3
 8002052:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002054:	230b      	movs	r3, #11
 8002056:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002058:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800205c:	4619      	mov	r1, r3
 800205e:	4807      	ldr	r0, [pc, #28]	@ (800207c <HAL_ETH_MspInit+0x12c>)
 8002060:	f002 fd5e 	bl	8004b20 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8002064:	bf00      	nop
 8002066:	3738      	adds	r7, #56	@ 0x38
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40028000 	.word	0x40028000
 8002070:	40023800 	.word	0x40023800
 8002074:	40021800 	.word	0x40021800
 8002078:	40020800 	.word	0x40020800
 800207c:	40020000 	.word	0x40020000

08002080 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b0ac      	sub	sp, #176	@ 0xb0
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002098:	f107 0318 	add.w	r3, r7, #24
 800209c:	2284      	movs	r2, #132	@ 0x84
 800209e:	2100      	movs	r1, #0
 80020a0:	4618      	mov	r0, r3
 80020a2:	f012 fb87 	bl	80147b4 <memset>
  if(hi2c->Instance==I2C1)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a44      	ldr	r2, [pc, #272]	@ (80021bc <HAL_I2C_MspInit+0x13c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d13d      	bne.n	800212c <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80020b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80020b6:	2300      	movs	r3, #0
 80020b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ba:	f107 0318 	add.w	r3, r7, #24
 80020be:	4618      	mov	r0, r3
 80020c0:	f006 fa64 	bl	800858c <HAL_RCCEx_PeriphCLKConfig>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80020ca:	f7ff fdb5 	bl	8001c38 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ce:	4b3c      	ldr	r3, [pc, #240]	@ (80021c0 <HAL_I2C_MspInit+0x140>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	4a3b      	ldr	r2, [pc, #236]	@ (80021c0 <HAL_I2C_MspInit+0x140>)
 80020d4:	f043 0302 	orr.w	r3, r3, #2
 80020d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020da:	4b39      	ldr	r3, [pc, #228]	@ (80021c0 <HAL_I2C_MspInit+0x140>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80020e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80020ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ee:	2312      	movs	r3, #18
 80020f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020f4:	2301      	movs	r3, #1
 80020f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002100:	2304      	movs	r3, #4
 8002102:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002106:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800210a:	4619      	mov	r1, r3
 800210c:	482d      	ldr	r0, [pc, #180]	@ (80021c4 <HAL_I2C_MspInit+0x144>)
 800210e:	f002 fd07 	bl	8004b20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002112:	4b2b      	ldr	r3, [pc, #172]	@ (80021c0 <HAL_I2C_MspInit+0x140>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002116:	4a2a      	ldr	r2, [pc, #168]	@ (80021c0 <HAL_I2C_MspInit+0x140>)
 8002118:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800211c:	6413      	str	r3, [r2, #64]	@ 0x40
 800211e:	4b28      	ldr	r3, [pc, #160]	@ (80021c0 <HAL_I2C_MspInit+0x140>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002122:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 800212a:	e042      	b.n	80021b2 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a25      	ldr	r2, [pc, #148]	@ (80021c8 <HAL_I2C_MspInit+0x148>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d13d      	bne.n	80021b2 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002136:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800213a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800213c:	2300      	movs	r3, #0
 800213e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002142:	f107 0318 	add.w	r3, r7, #24
 8002146:	4618      	mov	r0, r3
 8002148:	f006 fa20 	bl	800858c <HAL_RCCEx_PeriphCLKConfig>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8002152:	f7ff fd71 	bl	8001c38 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002156:	4b1a      	ldr	r3, [pc, #104]	@ (80021c0 <HAL_I2C_MspInit+0x140>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215a:	4a19      	ldr	r2, [pc, #100]	@ (80021c0 <HAL_I2C_MspInit+0x140>)
 800215c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002160:	6313      	str	r3, [r2, #48]	@ 0x30
 8002162:	4b17      	ldr	r3, [pc, #92]	@ (80021c0 <HAL_I2C_MspInit+0x140>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800216e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002172:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002176:	2312      	movs	r3, #18
 8002178:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800217c:	2301      	movs	r3, #1
 800217e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002182:	2303      	movs	r3, #3
 8002184:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002188:	2304      	movs	r3, #4
 800218a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800218e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002192:	4619      	mov	r1, r3
 8002194:	480d      	ldr	r0, [pc, #52]	@ (80021cc <HAL_I2C_MspInit+0x14c>)
 8002196:	f002 fcc3 	bl	8004b20 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800219a:	4b09      	ldr	r3, [pc, #36]	@ (80021c0 <HAL_I2C_MspInit+0x140>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219e:	4a08      	ldr	r2, [pc, #32]	@ (80021c0 <HAL_I2C_MspInit+0x140>)
 80021a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021a6:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <HAL_I2C_MspInit+0x140>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
}
 80021b2:	bf00      	nop
 80021b4:	37b0      	adds	r7, #176	@ 0xb0
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40005400 	.word	0x40005400
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40020400 	.word	0x40020400
 80021c8:	40005c00 	.word	0x40005c00
 80021cc:	40021c00 	.word	0x40021c00

080021d0 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08e      	sub	sp, #56	@ 0x38
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a55      	ldr	r2, [pc, #340]	@ (8002344 <HAL_LTDC_MspInit+0x174>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	f040 80a3 	bne.w	800233a <HAL_LTDC_MspInit+0x16a>
  {
    /* USER CODE BEGIN LTDC_MspInit 0 */

    /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80021f4:	4b54      	ldr	r3, [pc, #336]	@ (8002348 <HAL_LTDC_MspInit+0x178>)
 80021f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f8:	4a53      	ldr	r2, [pc, #332]	@ (8002348 <HAL_LTDC_MspInit+0x178>)
 80021fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80021fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8002200:	4b51      	ldr	r3, [pc, #324]	@ (8002348 <HAL_LTDC_MspInit+0x178>)
 8002202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002204:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002208:	623b      	str	r3, [r7, #32]
 800220a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800220c:	4b4e      	ldr	r3, [pc, #312]	@ (8002348 <HAL_LTDC_MspInit+0x178>)
 800220e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002210:	4a4d      	ldr	r2, [pc, #308]	@ (8002348 <HAL_LTDC_MspInit+0x178>)
 8002212:	f043 0310 	orr.w	r3, r3, #16
 8002216:	6313      	str	r3, [r2, #48]	@ 0x30
 8002218:	4b4b      	ldr	r3, [pc, #300]	@ (8002348 <HAL_LTDC_MspInit+0x178>)
 800221a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221c:	f003 0310 	and.w	r3, r3, #16
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002224:	4b48      	ldr	r3, [pc, #288]	@ (8002348 <HAL_LTDC_MspInit+0x178>)
 8002226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002228:	4a47      	ldr	r2, [pc, #284]	@ (8002348 <HAL_LTDC_MspInit+0x178>)
 800222a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800222e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002230:	4b45      	ldr	r3, [pc, #276]	@ (8002348 <HAL_LTDC_MspInit+0x178>)
 8002232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002234:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002238:	61bb      	str	r3, [r7, #24]
 800223a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800223c:	4b42      	ldr	r3, [pc, #264]	@ (8002348 <HAL_LTDC_MspInit+0x178>)
 800223e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002240:	4a41      	ldr	r2, [pc, #260]	@ (8002348 <HAL_LTDC_MspInit+0x178>)
 8002242:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002246:	6313      	str	r3, [r2, #48]	@ 0x30
 8002248:	4b3f      	ldr	r3, [pc, #252]	@ (8002348 <HAL_LTDC_MspInit+0x178>)
 800224a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002254:	4b3c      	ldr	r3, [pc, #240]	@ (8002348 <HAL_LTDC_MspInit+0x178>)
 8002256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002258:	4a3b      	ldr	r2, [pc, #236]	@ (8002348 <HAL_LTDC_MspInit+0x178>)
 800225a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800225e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002260:	4b39      	ldr	r3, [pc, #228]	@ (8002348 <HAL_LTDC_MspInit+0x178>)
 8002262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800226c:	4b36      	ldr	r3, [pc, #216]	@ (8002348 <HAL_LTDC_MspInit+0x178>)
 800226e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002270:	4a35      	ldr	r2, [pc, #212]	@ (8002348 <HAL_LTDC_MspInit+0x178>)
 8002272:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002276:	6313      	str	r3, [r2, #48]	@ 0x30
 8002278:	4b33      	ldr	r3, [pc, #204]	@ (8002348 <HAL_LTDC_MspInit+0x178>)
 800227a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002284:	2310      	movs	r3, #16
 8002286:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002288:	2302      	movs	r3, #2
 800228a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002290:	2300      	movs	r3, #0
 8002292:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002294:	230e      	movs	r3, #14
 8002296:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002298:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800229c:	4619      	mov	r1, r3
 800229e:	482b      	ldr	r0, [pc, #172]	@ (800234c <HAL_LTDC_MspInit+0x17c>)
 80022a0:	f002 fc3e 	bl	8004b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80022a4:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80022a8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022aa:	2302      	movs	r3, #2
 80022ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	2300      	movs	r3, #0
 80022b4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022b6:	230e      	movs	r3, #14
 80022b8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80022ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022be:	4619      	mov	r1, r3
 80022c0:	4823      	ldr	r0, [pc, #140]	@ (8002350 <HAL_LTDC_MspInit+0x180>)
 80022c2:	f002 fc2d 	bl	8004b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80022c6:	23f7      	movs	r3, #247	@ 0xf7
 80022c8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ca:	2302      	movs	r3, #2
 80022cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d2:	2300      	movs	r3, #0
 80022d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022d6:	230e      	movs	r3, #14
 80022d8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80022da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022de:	4619      	mov	r1, r3
 80022e0:	481c      	ldr	r0, [pc, #112]	@ (8002354 <HAL_LTDC_MspInit+0x184>)
 80022e2:	f002 fc1d 	bl	8004b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80022e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ec:	2302      	movs	r3, #2
 80022ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80022f8:	2309      	movs	r3, #9
 80022fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80022fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002300:	4619      	mov	r1, r3
 8002302:	4815      	ldr	r0, [pc, #84]	@ (8002358 <HAL_LTDC_MspInit+0x188>)
 8002304:	f002 fc0c 	bl	8004b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002308:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 800230c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230e:	2302      	movs	r3, #2
 8002310:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002316:	2300      	movs	r3, #0
 8002318:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800231a:	230e      	movs	r3, #14
 800231c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800231e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002322:	4619      	mov	r1, r3
 8002324:	480d      	ldr	r0, [pc, #52]	@ (800235c <HAL_LTDC_MspInit+0x18c>)
 8002326:	f002 fbfb 	bl	8004b20 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800232a:	2200      	movs	r2, #0
 800232c:	2105      	movs	r1, #5
 800232e:	2058      	movs	r0, #88	@ 0x58
 8002330:	f001 fc8c 	bl	8003c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002334:	2058      	movs	r0, #88	@ 0x58
 8002336:	f001 fca5 	bl	8003c84 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 800233a:	bf00      	nop
 800233c:	3738      	adds	r7, #56	@ 0x38
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40016800 	.word	0x40016800
 8002348:	40023800 	.word	0x40023800
 800234c:	40021000 	.word	0x40021000
 8002350:	40022400 	.word	0x40022400
 8002354:	40022800 	.word	0x40022800
 8002358:	40021800 	.word	0x40021800
 800235c:	40022000 	.word	0x40022000

08002360 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08c      	sub	sp, #48	@ 0x30
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 031c 	add.w	r3, r7, #28
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a3b      	ldr	r2, [pc, #236]	@ (800246c <HAL_QSPI_MspInit+0x10c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d170      	bne.n	8002464 <HAL_QSPI_MspInit+0x104>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002382:	4b3b      	ldr	r3, [pc, #236]	@ (8002470 <HAL_QSPI_MspInit+0x110>)
 8002384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002386:	4a3a      	ldr	r2, [pc, #232]	@ (8002470 <HAL_QSPI_MspInit+0x110>)
 8002388:	f043 0302 	orr.w	r3, r3, #2
 800238c:	6393      	str	r3, [r2, #56]	@ 0x38
 800238e:	4b38      	ldr	r3, [pc, #224]	@ (8002470 <HAL_QSPI_MspInit+0x110>)
 8002390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	61bb      	str	r3, [r7, #24]
 8002398:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800239a:	4b35      	ldr	r3, [pc, #212]	@ (8002470 <HAL_QSPI_MspInit+0x110>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239e:	4a34      	ldr	r2, [pc, #208]	@ (8002470 <HAL_QSPI_MspInit+0x110>)
 80023a0:	f043 0310 	orr.w	r3, r3, #16
 80023a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023a6:	4b32      	ldr	r3, [pc, #200]	@ (8002470 <HAL_QSPI_MspInit+0x110>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	617b      	str	r3, [r7, #20]
 80023b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002470 <HAL_QSPI_MspInit+0x110>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b6:	4a2e      	ldr	r2, [pc, #184]	@ (8002470 <HAL_QSPI_MspInit+0x110>)
 80023b8:	f043 0302 	orr.w	r3, r3, #2
 80023bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023be:	4b2c      	ldr	r3, [pc, #176]	@ (8002470 <HAL_QSPI_MspInit+0x110>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ca:	4b29      	ldr	r3, [pc, #164]	@ (8002470 <HAL_QSPI_MspInit+0x110>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ce:	4a28      	ldr	r2, [pc, #160]	@ (8002470 <HAL_QSPI_MspInit+0x110>)
 80023d0:	f043 0308 	orr.w	r3, r3, #8
 80023d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d6:	4b26      	ldr	r3, [pc, #152]	@ (8002470 <HAL_QSPI_MspInit+0x110>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80023e2:	2304      	movs	r3, #4
 80023e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ee:	2303      	movs	r3, #3
 80023f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80023f2:	2309      	movs	r3, #9
 80023f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80023f6:	f107 031c 	add.w	r3, r7, #28
 80023fa:	4619      	mov	r1, r3
 80023fc:	481d      	ldr	r0, [pc, #116]	@ (8002474 <HAL_QSPI_MspInit+0x114>)
 80023fe:	f002 fb8f 	bl	8004b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002402:	2340      	movs	r3, #64	@ 0x40
 8002404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002406:	2302      	movs	r3, #2
 8002408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240a:	2300      	movs	r3, #0
 800240c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240e:	2303      	movs	r3, #3
 8002410:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002412:	230a      	movs	r3, #10
 8002414:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002416:	f107 031c 	add.w	r3, r7, #28
 800241a:	4619      	mov	r1, r3
 800241c:	4816      	ldr	r0, [pc, #88]	@ (8002478 <HAL_QSPI_MspInit+0x118>)
 800241e:	f002 fb7f 	bl	8004b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002422:	2304      	movs	r3, #4
 8002424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002426:	2302      	movs	r3, #2
 8002428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242e:	2303      	movs	r3, #3
 8002430:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002432:	2309      	movs	r3, #9
 8002434:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002436:	f107 031c 	add.w	r3, r7, #28
 800243a:	4619      	mov	r1, r3
 800243c:	480e      	ldr	r0, [pc, #56]	@ (8002478 <HAL_QSPI_MspInit+0x118>)
 800243e:	f002 fb6f 	bl	8004b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002442:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002448:	2302      	movs	r3, #2
 800244a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002450:	2303      	movs	r3, #3
 8002452:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002454:	2309      	movs	r3, #9
 8002456:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002458:	f107 031c 	add.w	r3, r7, #28
 800245c:	4619      	mov	r1, r3
 800245e:	4807      	ldr	r0, [pc, #28]	@ (800247c <HAL_QSPI_MspInit+0x11c>)
 8002460:	f002 fb5e 	bl	8004b20 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8002464:	bf00      	nop
 8002466:	3730      	adds	r7, #48	@ 0x30
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	a0001000 	.word	0xa0001000
 8002470:	40023800 	.word	0x40023800
 8002474:	40021000 	.word	0x40021000
 8002478:	40020400 	.word	0x40020400
 800247c:	40020c00 	.word	0x40020c00

08002480 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b0a4      	sub	sp, #144	@ 0x90
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002488:	f107 030c 	add.w	r3, r7, #12
 800248c:	2284      	movs	r2, #132	@ 0x84
 800248e:	2100      	movs	r1, #0
 8002490:	4618      	mov	r0, r3
 8002492:	f012 f98f 	bl	80147b4 <memset>
  if(hrtc->Instance==RTC)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a0e      	ldr	r2, [pc, #56]	@ (80024d4 <HAL_RTC_MspInit+0x54>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d114      	bne.n	80024ca <HAL_RTC_MspInit+0x4a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80024a0:	2320      	movs	r3, #32
 80024a2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80024a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024aa:	f107 030c 	add.w	r3, r7, #12
 80024ae:	4618      	mov	r0, r3
 80024b0:	f006 f86c 	bl	800858c <HAL_RCCEx_PeriphCLKConfig>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80024ba:	f7ff fbbd 	bl	8001c38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80024be:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <HAL_RTC_MspInit+0x58>)
 80024c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024c2:	4a05      	ldr	r2, [pc, #20]	@ (80024d8 <HAL_RTC_MspInit+0x58>)
 80024c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024c8:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80024ca:	bf00      	nop
 80024cc:	3790      	adds	r7, #144	@ 0x90
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40002800 	.word	0x40002800
 80024d8:	40023800 	.word	0x40023800

080024dc <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	@ 0x28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
 80024f2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a25      	ldr	r2, [pc, #148]	@ (8002590 <HAL_SD_MspInit+0xb4>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d144      	bne.n	8002588 <HAL_SD_MspInit+0xac>
  {
    /* USER CODE BEGIN SDMMC1_MspInit 0 */

    /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80024fe:	4b25      	ldr	r3, [pc, #148]	@ (8002594 <HAL_SD_MspInit+0xb8>)
 8002500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002502:	4a24      	ldr	r2, [pc, #144]	@ (8002594 <HAL_SD_MspInit+0xb8>)
 8002504:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002508:	6453      	str	r3, [r2, #68]	@ 0x44
 800250a:	4b22      	ldr	r3, [pc, #136]	@ (8002594 <HAL_SD_MspInit+0xb8>)
 800250c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002516:	4b1f      	ldr	r3, [pc, #124]	@ (8002594 <HAL_SD_MspInit+0xb8>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251a:	4a1e      	ldr	r2, [pc, #120]	@ (8002594 <HAL_SD_MspInit+0xb8>)
 800251c:	f043 0304 	orr.w	r3, r3, #4
 8002520:	6313      	str	r3, [r2, #48]	@ 0x30
 8002522:	4b1c      	ldr	r3, [pc, #112]	@ (8002594 <HAL_SD_MspInit+0xb8>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800252e:	4b19      	ldr	r3, [pc, #100]	@ (8002594 <HAL_SD_MspInit+0xb8>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	4a18      	ldr	r2, [pc, #96]	@ (8002594 <HAL_SD_MspInit+0xb8>)
 8002534:	f043 0308 	orr.w	r3, r3, #8
 8002538:	6313      	str	r3, [r2, #48]	@ 0x30
 800253a:	4b16      	ldr	r3, [pc, #88]	@ (8002594 <HAL_SD_MspInit+0xb8>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002546:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800254a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254c:	2302      	movs	r3, #2
 800254e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002554:	2303      	movs	r3, #3
 8002556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002558:	230c      	movs	r3, #12
 800255a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	4619      	mov	r1, r3
 8002562:	480d      	ldr	r0, [pc, #52]	@ (8002598 <HAL_SD_MspInit+0xbc>)
 8002564:	f002 fadc 	bl	8004b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002568:	2304      	movs	r3, #4
 800256a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256c:	2302      	movs	r3, #2
 800256e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002574:	2303      	movs	r3, #3
 8002576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002578:	230c      	movs	r3, #12
 800257a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	4619      	mov	r1, r3
 8002582:	4806      	ldr	r0, [pc, #24]	@ (800259c <HAL_SD_MspInit+0xc0>)
 8002584:	f002 facc 	bl	8004b20 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8002588:	bf00      	nop
 800258a:	3728      	adds	r7, #40	@ 0x28
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40012c00 	.word	0x40012c00
 8002594:	40023800 	.word	0x40023800
 8002598:	40020800 	.word	0x40020800
 800259c:	40020c00 	.word	0x40020c00

080025a0 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b0aa      	sub	sp, #168	@ 0xa8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025b8:	f107 0310 	add.w	r3, r7, #16
 80025bc:	2284      	movs	r2, #132	@ 0x84
 80025be:	2100      	movs	r1, #0
 80025c0:	4618      	mov	r0, r3
 80025c2:	f012 f8f7 	bl	80147b4 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 80025ce:	d143      	bne.n	8002658 <HAL_SPDIFRX_MspInit+0xb8>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 80025d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025d4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80025d6:	2364      	movs	r3, #100	@ 0x64
 80025d8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80025da:	2302      	movs	r3, #2
 80025dc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80025de:	2302      	movs	r3, #2
 80025e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80025e2:	2302      	movs	r3, #2
 80025e4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 80025e6:	2301      	movs	r3, #1
 80025e8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025ea:	f107 0310 	add.w	r3, r7, #16
 80025ee:	4618      	mov	r0, r3
 80025f0:	f005 ffcc 	bl	800858c <HAL_RCCEx_PeriphCLKConfig>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 80025fa:	f7ff fb1d 	bl	8001c38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80025fe:	4b18      	ldr	r3, [pc, #96]	@ (8002660 <HAL_SPDIFRX_MspInit+0xc0>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002602:	4a17      	ldr	r2, [pc, #92]	@ (8002660 <HAL_SPDIFRX_MspInit+0xc0>)
 8002604:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002608:	6413      	str	r3, [r2, #64]	@ 0x40
 800260a:	4b15      	ldr	r3, [pc, #84]	@ (8002660 <HAL_SPDIFRX_MspInit+0xc0>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002616:	4b12      	ldr	r3, [pc, #72]	@ (8002660 <HAL_SPDIFRX_MspInit+0xc0>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261a:	4a11      	ldr	r2, [pc, #68]	@ (8002660 <HAL_SPDIFRX_MspInit+0xc0>)
 800261c:	f043 0308 	orr.w	r3, r3, #8
 8002620:	6313      	str	r3, [r2, #48]	@ 0x30
 8002622:	4b0f      	ldr	r3, [pc, #60]	@ (8002660 <HAL_SPDIFRX_MspInit+0xc0>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800262e:	2380      	movs	r3, #128	@ 0x80
 8002630:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002634:	2302      	movs	r3, #2
 8002636:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	2300      	movs	r3, #0
 800263c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002640:	2300      	movs	r3, #0
 8002642:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002646:	2308      	movs	r3, #8
 8002648:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800264c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002650:	4619      	mov	r1, r3
 8002652:	4804      	ldr	r0, [pc, #16]	@ (8002664 <HAL_SPDIFRX_MspInit+0xc4>)
 8002654:	f002 fa64 	bl	8004b20 <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 8002658:	bf00      	nop
 800265a:	37a8      	adds	r7, #168	@ 0xa8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40023800 	.word	0x40023800
 8002664:	40020c00 	.word	0x40020c00

08002668 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08a      	sub	sp, #40	@ 0x28
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a25      	ldr	r2, [pc, #148]	@ (800271c <HAL_SPI_MspInit+0xb4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d144      	bne.n	8002714 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800268a:	4b25      	ldr	r3, [pc, #148]	@ (8002720 <HAL_SPI_MspInit+0xb8>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268e:	4a24      	ldr	r2, [pc, #144]	@ (8002720 <HAL_SPI_MspInit+0xb8>)
 8002690:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002694:	6413      	str	r3, [r2, #64]	@ 0x40
 8002696:	4b22      	ldr	r3, [pc, #136]	@ (8002720 <HAL_SPI_MspInit+0xb8>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80026a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002720 <HAL_SPI_MspInit+0xb8>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002720 <HAL_SPI_MspInit+0xb8>)
 80026a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002720 <HAL_SPI_MspInit+0xb8>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ba:	4b19      	ldr	r3, [pc, #100]	@ (8002720 <HAL_SPI_MspInit+0xb8>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026be:	4a18      	ldr	r2, [pc, #96]	@ (8002720 <HAL_SPI_MspInit+0xb8>)
 80026c0:	f043 0302 	orr.w	r3, r3, #2
 80026c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026c6:	4b16      	ldr	r3, [pc, #88]	@ (8002720 <HAL_SPI_MspInit+0xb8>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80026d2:	2302      	movs	r3, #2
 80026d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d6:	2302      	movs	r3, #2
 80026d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026de:	2300      	movs	r3, #0
 80026e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026e2:	2305      	movs	r3, #5
 80026e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80026e6:	f107 0314 	add.w	r3, r7, #20
 80026ea:	4619      	mov	r1, r3
 80026ec:	480d      	ldr	r0, [pc, #52]	@ (8002724 <HAL_SPI_MspInit+0xbc>)
 80026ee:	f002 fa17 	bl	8004b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80026f2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80026f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f8:	2302      	movs	r3, #2
 80026fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002700:	2300      	movs	r3, #0
 8002702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002704:	2305      	movs	r3, #5
 8002706:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	4619      	mov	r1, r3
 800270e:	4806      	ldr	r0, [pc, #24]	@ (8002728 <HAL_SPI_MspInit+0xc0>)
 8002710:	f002 fa06 	bl	8004b20 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002714:	bf00      	nop
 8002716:	3728      	adds	r7, #40	@ 0x28
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40003800 	.word	0x40003800
 8002720:	40023800 	.word	0x40023800
 8002724:	40022000 	.word	0x40022000
 8002728:	40020400 	.word	0x40020400

0800272c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800272c:	b480      	push	{r7}
 800272e:	b089      	sub	sp, #36	@ 0x24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a2e      	ldr	r2, [pc, #184]	@ (80027f4 <HAL_TIM_Base_MspInit+0xc8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d10c      	bne.n	8002758 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800273e:	4b2e      	ldr	r3, [pc, #184]	@ (80027f8 <HAL_TIM_Base_MspInit+0xcc>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002742:	4a2d      	ldr	r2, [pc, #180]	@ (80027f8 <HAL_TIM_Base_MspInit+0xcc>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	6453      	str	r3, [r2, #68]	@ 0x44
 800274a:	4b2b      	ldr	r3, [pc, #172]	@ (80027f8 <HAL_TIM_Base_MspInit+0xcc>)
 800274c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	61fb      	str	r3, [r7, #28]
 8002754:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002756:	e046      	b.n	80027e6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002760:	d10c      	bne.n	800277c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002762:	4b25      	ldr	r3, [pc, #148]	@ (80027f8 <HAL_TIM_Base_MspInit+0xcc>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002766:	4a24      	ldr	r2, [pc, #144]	@ (80027f8 <HAL_TIM_Base_MspInit+0xcc>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6413      	str	r3, [r2, #64]	@ 0x40
 800276e:	4b22      	ldr	r3, [pc, #136]	@ (80027f8 <HAL_TIM_Base_MspInit+0xcc>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	61bb      	str	r3, [r7, #24]
 8002778:	69bb      	ldr	r3, [r7, #24]
}
 800277a:	e034      	b.n	80027e6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a1e      	ldr	r2, [pc, #120]	@ (80027fc <HAL_TIM_Base_MspInit+0xd0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d10c      	bne.n	80027a0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002786:	4b1c      	ldr	r3, [pc, #112]	@ (80027f8 <HAL_TIM_Base_MspInit+0xcc>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278a:	4a1b      	ldr	r2, [pc, #108]	@ (80027f8 <HAL_TIM_Base_MspInit+0xcc>)
 800278c:	f043 0302 	orr.w	r3, r3, #2
 8002790:	6413      	str	r3, [r2, #64]	@ 0x40
 8002792:	4b19      	ldr	r3, [pc, #100]	@ (80027f8 <HAL_TIM_Base_MspInit+0xcc>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	697b      	ldr	r3, [r7, #20]
}
 800279e:	e022      	b.n	80027e6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a16      	ldr	r2, [pc, #88]	@ (8002800 <HAL_TIM_Base_MspInit+0xd4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d10c      	bne.n	80027c4 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80027aa:	4b13      	ldr	r3, [pc, #76]	@ (80027f8 <HAL_TIM_Base_MspInit+0xcc>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ae:	4a12      	ldr	r2, [pc, #72]	@ (80027f8 <HAL_TIM_Base_MspInit+0xcc>)
 80027b0:	f043 0308 	orr.w	r3, r3, #8
 80027b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027b6:	4b10      	ldr	r3, [pc, #64]	@ (80027f8 <HAL_TIM_Base_MspInit+0xcc>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	693b      	ldr	r3, [r7, #16]
}
 80027c2:	e010      	b.n	80027e6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a0e      	ldr	r2, [pc, #56]	@ (8002804 <HAL_TIM_Base_MspInit+0xd8>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d10b      	bne.n	80027e6 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80027ce:	4b0a      	ldr	r3, [pc, #40]	@ (80027f8 <HAL_TIM_Base_MspInit+0xcc>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d2:	4a09      	ldr	r2, [pc, #36]	@ (80027f8 <HAL_TIM_Base_MspInit+0xcc>)
 80027d4:	f043 0302 	orr.w	r3, r3, #2
 80027d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80027da:	4b07      	ldr	r3, [pc, #28]	@ (80027f8 <HAL_TIM_Base_MspInit+0xcc>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
}
 80027e6:	bf00      	nop
 80027e8:	3724      	adds	r7, #36	@ 0x24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40010000 	.word	0x40010000
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40000400 	.word	0x40000400
 8002800:	40000c00 	.word	0x40000c00
 8002804:	40010400 	.word	0x40010400

08002808 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0a      	ldr	r2, [pc, #40]	@ (8002840 <HAL_TIM_PWM_MspInit+0x38>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d10b      	bne.n	8002832 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM12_MspInit 0 */

    /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800281a:	4b0a      	ldr	r3, [pc, #40]	@ (8002844 <HAL_TIM_PWM_MspInit+0x3c>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281e:	4a09      	ldr	r2, [pc, #36]	@ (8002844 <HAL_TIM_PWM_MspInit+0x3c>)
 8002820:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002824:	6413      	str	r3, [r2, #64]	@ 0x40
 8002826:	4b07      	ldr	r3, [pc, #28]	@ (8002844 <HAL_TIM_PWM_MspInit+0x3c>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM12_MspInit 1 */

  }

}
 8002832:	bf00      	nop
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40001800 	.word	0x40001800
 8002844:	40023800 	.word	0x40023800

08002848 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08c      	sub	sp, #48	@ 0x30
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002850:	f107 031c 	add.w	r3, r7, #28
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	60da      	str	r2, [r3, #12]
 800285e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a56      	ldr	r2, [pc, #344]	@ (80029c0 <HAL_TIM_MspPostInit+0x178>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d11d      	bne.n	80028a6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286a:	4b56      	ldr	r3, [pc, #344]	@ (80029c4 <HAL_TIM_MspPostInit+0x17c>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286e:	4a55      	ldr	r2, [pc, #340]	@ (80029c4 <HAL_TIM_MspPostInit+0x17c>)
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	6313      	str	r3, [r2, #48]	@ 0x30
 8002876:	4b53      	ldr	r3, [pc, #332]	@ (80029c4 <HAL_TIM_MspPostInit+0x17c>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	61bb      	str	r3, [r7, #24]
 8002880:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002882:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002888:	2302      	movs	r3, #2
 800288a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002890:	2300      	movs	r3, #0
 8002892:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002894:	2301      	movs	r3, #1
 8002896:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002898:	f107 031c 	add.w	r3, r7, #28
 800289c:	4619      	mov	r1, r3
 800289e:	484a      	ldr	r0, [pc, #296]	@ (80029c8 <HAL_TIM_MspPostInit+0x180>)
 80028a0:	f002 f93e 	bl	8004b20 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80028a4:	e087      	b.n	80029b6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ae:	d11d      	bne.n	80028ec <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b0:	4b44      	ldr	r3, [pc, #272]	@ (80029c4 <HAL_TIM_MspPostInit+0x17c>)
 80028b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b4:	4a43      	ldr	r2, [pc, #268]	@ (80029c4 <HAL_TIM_MspPostInit+0x17c>)
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80028bc:	4b41      	ldr	r3, [pc, #260]	@ (80029c4 <HAL_TIM_MspPostInit+0x17c>)
 80028be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80028c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ce:	2302      	movs	r3, #2
 80028d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d6:	2300      	movs	r3, #0
 80028d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028da:	2301      	movs	r3, #1
 80028dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80028de:	f107 031c 	add.w	r3, r7, #28
 80028e2:	4619      	mov	r1, r3
 80028e4:	4838      	ldr	r0, [pc, #224]	@ (80029c8 <HAL_TIM_MspPostInit+0x180>)
 80028e6:	f002 f91b 	bl	8004b20 <HAL_GPIO_Init>
}
 80028ea:	e064      	b.n	80029b6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a36      	ldr	r2, [pc, #216]	@ (80029cc <HAL_TIM_MspPostInit+0x184>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d11c      	bne.n	8002930 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f6:	4b33      	ldr	r3, [pc, #204]	@ (80029c4 <HAL_TIM_MspPostInit+0x17c>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fa:	4a32      	ldr	r2, [pc, #200]	@ (80029c4 <HAL_TIM_MspPostInit+0x17c>)
 80028fc:	f043 0302 	orr.w	r3, r3, #2
 8002900:	6313      	str	r3, [r2, #48]	@ 0x30
 8002902:	4b30      	ldr	r3, [pc, #192]	@ (80029c4 <HAL_TIM_MspPostInit+0x17c>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800290e:	2310      	movs	r3, #16
 8002910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002912:	2302      	movs	r3, #2
 8002914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291a:	2300      	movs	r3, #0
 800291c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800291e:	2302      	movs	r3, #2
 8002920:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002922:	f107 031c 	add.w	r3, r7, #28
 8002926:	4619      	mov	r1, r3
 8002928:	4829      	ldr	r0, [pc, #164]	@ (80029d0 <HAL_TIM_MspPostInit+0x188>)
 800292a:	f002 f8f9 	bl	8004b20 <HAL_GPIO_Init>
}
 800292e:	e042      	b.n	80029b6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a27      	ldr	r2, [pc, #156]	@ (80029d4 <HAL_TIM_MspPostInit+0x18c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d11c      	bne.n	8002974 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800293a:	4b22      	ldr	r3, [pc, #136]	@ (80029c4 <HAL_TIM_MspPostInit+0x17c>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	4a21      	ldr	r2, [pc, #132]	@ (80029c4 <HAL_TIM_MspPostInit+0x17c>)
 8002940:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002944:	6313      	str	r3, [r2, #48]	@ 0x30
 8002946:	4b1f      	ldr	r3, [pc, #124]	@ (80029c4 <HAL_TIM_MspPostInit+0x17c>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002952:	2301      	movs	r3, #1
 8002954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002956:	2302      	movs	r3, #2
 8002958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295a:	2300      	movs	r3, #0
 800295c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295e:	2300      	movs	r3, #0
 8002960:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002962:	2302      	movs	r3, #2
 8002964:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002966:	f107 031c 	add.w	r3, r7, #28
 800296a:	4619      	mov	r1, r3
 800296c:	481a      	ldr	r0, [pc, #104]	@ (80029d8 <HAL_TIM_MspPostInit+0x190>)
 800296e:	f002 f8d7 	bl	8004b20 <HAL_GPIO_Init>
}
 8002972:	e020      	b.n	80029b6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a18      	ldr	r2, [pc, #96]	@ (80029dc <HAL_TIM_MspPostInit+0x194>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d11b      	bne.n	80029b6 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800297e:	4b11      	ldr	r3, [pc, #68]	@ (80029c4 <HAL_TIM_MspPostInit+0x17c>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002982:	4a10      	ldr	r2, [pc, #64]	@ (80029c4 <HAL_TIM_MspPostInit+0x17c>)
 8002984:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002988:	6313      	str	r3, [r2, #48]	@ 0x30
 800298a:	4b0e      	ldr	r3, [pc, #56]	@ (80029c4 <HAL_TIM_MspPostInit+0x17c>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002992:	60bb      	str	r3, [r7, #8]
 8002994:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002996:	2340      	movs	r3, #64	@ 0x40
 8002998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299a:	2302      	movs	r3, #2
 800299c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a2:	2300      	movs	r3, #0
 80029a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80029a6:	2309      	movs	r3, #9
 80029a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80029aa:	f107 031c 	add.w	r3, r7, #28
 80029ae:	4619      	mov	r1, r3
 80029b0:	480b      	ldr	r0, [pc, #44]	@ (80029e0 <HAL_TIM_MspPostInit+0x198>)
 80029b2:	f002 f8b5 	bl	8004b20 <HAL_GPIO_Init>
}
 80029b6:	bf00      	nop
 80029b8:	3730      	adds	r7, #48	@ 0x30
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40010000 	.word	0x40010000
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40020000 	.word	0x40020000
 80029cc:	40000400 	.word	0x40000400
 80029d0:	40020400 	.word	0x40020400
 80029d4:	40000c00 	.word	0x40000c00
 80029d8:	40022000 	.word	0x40022000
 80029dc:	40001800 	.word	0x40001800
 80029e0:	40021c00 	.word	0x40021c00

080029e4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b0ae      	sub	sp, #184	@ 0xb8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ec:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029fc:	f107 0320 	add.w	r3, r7, #32
 8002a00:	2284      	movs	r2, #132	@ 0x84
 8002a02:	2100      	movs	r1, #0
 8002a04:	4618      	mov	r0, r3
 8002a06:	f011 fed5 	bl	80147b4 <memset>
  if(huart->Instance==USART1)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a53      	ldr	r2, [pc, #332]	@ (8002b5c <HAL_UART_MspInit+0x178>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d15d      	bne.n	8002ad0 <HAL_UART_MspInit+0xec>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a14:	2340      	movs	r3, #64	@ 0x40
 8002a16:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a1c:	f107 0320 	add.w	r3, r7, #32
 8002a20:	4618      	mov	r0, r3
 8002a22:	f005 fdb3 	bl	800858c <HAL_RCCEx_PeriphCLKConfig>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a2c:	f7ff f904 	bl	8001c38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a30:	4b4b      	ldr	r3, [pc, #300]	@ (8002b60 <HAL_UART_MspInit+0x17c>)
 8002a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a34:	4a4a      	ldr	r2, [pc, #296]	@ (8002b60 <HAL_UART_MspInit+0x17c>)
 8002a36:	f043 0310 	orr.w	r3, r3, #16
 8002a3a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a3c:	4b48      	ldr	r3, [pc, #288]	@ (8002b60 <HAL_UART_MspInit+0x17c>)
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a48:	4b45      	ldr	r3, [pc, #276]	@ (8002b60 <HAL_UART_MspInit+0x17c>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4c:	4a44      	ldr	r2, [pc, #272]	@ (8002b60 <HAL_UART_MspInit+0x17c>)
 8002a4e:	f043 0302 	orr.w	r3, r3, #2
 8002a52:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a54:	4b42      	ldr	r3, [pc, #264]	@ (8002b60 <HAL_UART_MspInit+0x17c>)
 8002a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	61bb      	str	r3, [r7, #24]
 8002a5e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a60:	4b3f      	ldr	r3, [pc, #252]	@ (8002b60 <HAL_UART_MspInit+0x17c>)
 8002a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a64:	4a3e      	ldr	r2, [pc, #248]	@ (8002b60 <HAL_UART_MspInit+0x17c>)
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a6c:	4b3c      	ldr	r3, [pc, #240]	@ (8002b60 <HAL_UART_MspInit+0x17c>)
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002a78:	2380      	movs	r3, #128	@ 0x80
 8002a7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a90:	2307      	movs	r3, #7
 8002a92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002a96:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4831      	ldr	r0, [pc, #196]	@ (8002b64 <HAL_UART_MspInit+0x180>)
 8002a9e:	f002 f83f 	bl	8004b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002aa2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002aa6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002abc:	2307      	movs	r3, #7
 8002abe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002ac2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4827      	ldr	r0, [pc, #156]	@ (8002b68 <HAL_UART_MspInit+0x184>)
 8002aca:	f002 f829 	bl	8004b20 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8002ace:	e040      	b.n	8002b52 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a25      	ldr	r2, [pc, #148]	@ (8002b6c <HAL_UART_MspInit+0x188>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d13b      	bne.n	8002b52 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002ada:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ade:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ae4:	f107 0320 	add.w	r3, r7, #32
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f005 fd4f 	bl	800858c <HAL_RCCEx_PeriphCLKConfig>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8002af4:	f7ff f8a0 	bl	8001c38 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002af8:	4b19      	ldr	r3, [pc, #100]	@ (8002b60 <HAL_UART_MspInit+0x17c>)
 8002afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afc:	4a18      	ldr	r2, [pc, #96]	@ (8002b60 <HAL_UART_MspInit+0x17c>)
 8002afe:	f043 0320 	orr.w	r3, r3, #32
 8002b02:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b04:	4b16      	ldr	r3, [pc, #88]	@ (8002b60 <HAL_UART_MspInit+0x17c>)
 8002b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b08:	f003 0320 	and.w	r3, r3, #32
 8002b0c:	613b      	str	r3, [r7, #16]
 8002b0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b10:	4b13      	ldr	r3, [pc, #76]	@ (8002b60 <HAL_UART_MspInit+0x17c>)
 8002b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b14:	4a12      	ldr	r2, [pc, #72]	@ (8002b60 <HAL_UART_MspInit+0x17c>)
 8002b16:	f043 0304 	orr.w	r3, r3, #4
 8002b1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b1c:	4b10      	ldr	r3, [pc, #64]	@ (8002b60 <HAL_UART_MspInit+0x17c>)
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002b28:	23c0      	movs	r3, #192	@ 0xc0
 8002b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002b40:	2308      	movs	r3, #8
 8002b42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b46:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4808      	ldr	r0, [pc, #32]	@ (8002b70 <HAL_UART_MspInit+0x18c>)
 8002b4e:	f001 ffe7 	bl	8004b20 <HAL_GPIO_Init>
}
 8002b52:	bf00      	nop
 8002b54:	37b8      	adds	r7, #184	@ 0xb8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40011000 	.word	0x40011000
 8002b60:	40023800 	.word	0x40023800
 8002b64:	40020400 	.word	0x40020400
 8002b68:	40020000 	.word	0x40020000
 8002b6c:	40011400 	.word	0x40011400
 8002b70:	40020800 	.word	0x40020800

08002b74 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002b7a:	1d3b      	adds	r3, r7, #4
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002b88:	4b3a      	ldr	r3, [pc, #232]	@ (8002c74 <HAL_FMC_MspInit+0x100>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d16d      	bne.n	8002c6c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002b90:	4b38      	ldr	r3, [pc, #224]	@ (8002c74 <HAL_FMC_MspInit+0x100>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002b96:	4b38      	ldr	r3, [pc, #224]	@ (8002c78 <HAL_FMC_MspInit+0x104>)
 8002b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9a:	4a37      	ldr	r2, [pc, #220]	@ (8002c78 <HAL_FMC_MspInit+0x104>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	6393      	str	r3, [r2, #56]	@ 0x38
 8002ba2:	4b35      	ldr	r3, [pc, #212]	@ (8002c78 <HAL_FMC_MspInit+0x104>)
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002bae:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002bb2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bc0:	230c      	movs	r3, #12
 8002bc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bc4:	1d3b      	adds	r3, r7, #4
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	482c      	ldr	r0, [pc, #176]	@ (8002c7c <HAL_FMC_MspInit+0x108>)
 8002bca:	f001 ffa9 	bl	8004b20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002bce:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002bd2:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002be0:	230c      	movs	r3, #12
 8002be2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002be4:	1d3b      	adds	r3, r7, #4
 8002be6:	4619      	mov	r1, r3
 8002be8:	4825      	ldr	r0, [pc, #148]	@ (8002c80 <HAL_FMC_MspInit+0x10c>)
 8002bea:	f001 ff99 	bl	8004b20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002bee:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002bf2:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c00:	230c      	movs	r3, #12
 8002c02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c04:	1d3b      	adds	r3, r7, #4
 8002c06:	4619      	mov	r1, r3
 8002c08:	481e      	ldr	r0, [pc, #120]	@ (8002c84 <HAL_FMC_MspInit+0x110>)
 8002c0a:	f001 ff89 	bl	8004b20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002c0e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002c12:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c14:	2302      	movs	r3, #2
 8002c16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c20:	230c      	movs	r3, #12
 8002c22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c24:	1d3b      	adds	r3, r7, #4
 8002c26:	4619      	mov	r1, r3
 8002c28:	4817      	ldr	r0, [pc, #92]	@ (8002c88 <HAL_FMC_MspInit+0x114>)
 8002c2a:	f001 ff79 	bl	8004b20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002c2e:	2328      	movs	r3, #40	@ 0x28
 8002c30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c32:	2302      	movs	r3, #2
 8002c34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c3e:	230c      	movs	r3, #12
 8002c40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002c42:	1d3b      	adds	r3, r7, #4
 8002c44:	4619      	mov	r1, r3
 8002c46:	4811      	ldr	r0, [pc, #68]	@ (8002c8c <HAL_FMC_MspInit+0x118>)
 8002c48:	f001 ff6a 	bl	8004b20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002c4c:	2308      	movs	r3, #8
 8002c4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c50:	2302      	movs	r3, #2
 8002c52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c54:	2300      	movs	r3, #0
 8002c56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c5c:	230c      	movs	r3, #12
 8002c5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002c60:	1d3b      	adds	r3, r7, #4
 8002c62:	4619      	mov	r1, r3
 8002c64:	480a      	ldr	r0, [pc, #40]	@ (8002c90 <HAL_FMC_MspInit+0x11c>)
 8002c66:	f001 ff5b 	bl	8004b20 <HAL_GPIO_Init>
 8002c6a:	e000      	b.n	8002c6e <HAL_FMC_MspInit+0xfa>
    return;
 8002c6c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	20000d70 	.word	0x20000d70
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	40021800 	.word	0x40021800
 8002c84:	40020c00 	.word	0x40020c00
 8002c88:	40021400 	.word	0x40021400
 8002c8c:	40021c00 	.word	0x40021c00
 8002c90:	40020800 	.word	0x40020800

08002c94 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002c9c:	f7ff ff6a 	bl	8002b74 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08a      	sub	sp, #40	@ 0x28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a2b      	ldr	r2, [pc, #172]	@ (8002d64 <HAL_SAI_MspInit+0xbc>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d124      	bne.n	8002d04 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002cba:	4b2b      	ldr	r3, [pc, #172]	@ (8002d68 <HAL_SAI_MspInit+0xc0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10b      	bne.n	8002cda <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002cc2:	4b2a      	ldr	r3, [pc, #168]	@ (8002d6c <HAL_SAI_MspInit+0xc4>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc6:	4a29      	ldr	r2, [pc, #164]	@ (8002d6c <HAL_SAI_MspInit+0xc4>)
 8002cc8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cce:	4b27      	ldr	r3, [pc, #156]	@ (8002d6c <HAL_SAI_MspInit+0xc4>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002cda:	4b23      	ldr	r3, [pc, #140]	@ (8002d68 <HAL_SAI_MspInit+0xc0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	4a21      	ldr	r2, [pc, #132]	@ (8002d68 <HAL_SAI_MspInit+0xc0>)
 8002ce2:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002ce4:	23f0      	movs	r3, #240	@ 0xf0
 8002ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002cf4:	230a      	movs	r3, #10
 8002cf6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002cf8:	f107 0314 	add.w	r3, r7, #20
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	481c      	ldr	r0, [pc, #112]	@ (8002d70 <HAL_SAI_MspInit+0xc8>)
 8002d00:	f001 ff0e 	bl	8004b20 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a1a      	ldr	r2, [pc, #104]	@ (8002d74 <HAL_SAI_MspInit+0xcc>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d125      	bne.n	8002d5a <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002d0e:	4b16      	ldr	r3, [pc, #88]	@ (8002d68 <HAL_SAI_MspInit+0xc0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10b      	bne.n	8002d2e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002d16:	4b15      	ldr	r3, [pc, #84]	@ (8002d6c <HAL_SAI_MspInit+0xc4>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1a:	4a14      	ldr	r2, [pc, #80]	@ (8002d6c <HAL_SAI_MspInit+0xc4>)
 8002d1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d22:	4b12      	ldr	r3, [pc, #72]	@ (8002d6c <HAL_SAI_MspInit+0xc4>)
 8002d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d68 <HAL_SAI_MspInit+0xc0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3301      	adds	r3, #1
 8002d34:	4a0c      	ldr	r2, [pc, #48]	@ (8002d68 <HAL_SAI_MspInit+0xc0>)
 8002d36:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002d38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d46:	2300      	movs	r3, #0
 8002d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002d4a:	230a      	movs	r3, #10
 8002d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002d4e:	f107 0314 	add.w	r3, r7, #20
 8002d52:	4619      	mov	r1, r3
 8002d54:	4808      	ldr	r0, [pc, #32]	@ (8002d78 <HAL_SAI_MspInit+0xd0>)
 8002d56:	f001 fee3 	bl	8004b20 <HAL_GPIO_Init>

    }
}
 8002d5a:	bf00      	nop
 8002d5c:	3728      	adds	r7, #40	@ 0x28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40015c04 	.word	0x40015c04
 8002d68:	20000d74 	.word	0x20000d74
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40022000 	.word	0x40022000
 8002d74:	40015c24 	.word	0x40015c24
 8002d78:	40021800 	.word	0x40021800

08002d7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08e      	sub	sp, #56	@ 0x38
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002d8c:	4b33      	ldr	r3, [pc, #204]	@ (8002e5c <HAL_InitTick+0xe0>)
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d90:	4a32      	ldr	r2, [pc, #200]	@ (8002e5c <HAL_InitTick+0xe0>)
 8002d92:	f043 0310 	orr.w	r3, r3, #16
 8002d96:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d98:	4b30      	ldr	r3, [pc, #192]	@ (8002e5c <HAL_InitTick+0xe0>)
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002da4:	f107 0210 	add.w	r2, r7, #16
 8002da8:	f107 0314 	add.w	r3, r7, #20
 8002dac:	4611      	mov	r1, r2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f005 fbba 	bl	8008528 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d103      	bne.n	8002dc6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002dbe:	f005 fb8b 	bl	80084d8 <HAL_RCC_GetPCLK1Freq>
 8002dc2:	6378      	str	r0, [r7, #52]	@ 0x34
 8002dc4:	e004      	b.n	8002dd0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002dc6:	f005 fb87 	bl	80084d8 <HAL_RCC_GetPCLK1Freq>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dd2:	4a23      	ldr	r2, [pc, #140]	@ (8002e60 <HAL_InitTick+0xe4>)
 8002dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd8:	0c9b      	lsrs	r3, r3, #18
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002dde:	4b21      	ldr	r3, [pc, #132]	@ (8002e64 <HAL_InitTick+0xe8>)
 8002de0:	4a21      	ldr	r2, [pc, #132]	@ (8002e68 <HAL_InitTick+0xec>)
 8002de2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002de4:	4b1f      	ldr	r3, [pc, #124]	@ (8002e64 <HAL_InitTick+0xe8>)
 8002de6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002dea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002dec:	4a1d      	ldr	r2, [pc, #116]	@ (8002e64 <HAL_InitTick+0xe8>)
 8002dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002df2:	4b1c      	ldr	r3, [pc, #112]	@ (8002e64 <HAL_InitTick+0xe8>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e64 <HAL_InitTick+0xe8>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dfe:	4b19      	ldr	r3, [pc, #100]	@ (8002e64 <HAL_InitTick+0xe8>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002e04:	4817      	ldr	r0, [pc, #92]	@ (8002e64 <HAL_InitTick+0xe8>)
 8002e06:	f008 f84e 	bl	800aea6 <HAL_TIM_Base_Init>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002e10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d11b      	bne.n	8002e50 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002e18:	4812      	ldr	r0, [pc, #72]	@ (8002e64 <HAL_InitTick+0xe8>)
 8002e1a:	f008 f89b 	bl	800af54 <HAL_TIM_Base_Start_IT>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002e24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d111      	bne.n	8002e50 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e2c:	2036      	movs	r0, #54	@ 0x36
 8002e2e:	f000 ff29 	bl	8003c84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b0f      	cmp	r3, #15
 8002e36:	d808      	bhi.n	8002e4a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002e38:	2200      	movs	r2, #0
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	2036      	movs	r0, #54	@ 0x36
 8002e3e:	f000 ff05 	bl	8003c4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e42:	4a0a      	ldr	r2, [pc, #40]	@ (8002e6c <HAL_InitTick+0xf0>)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	e002      	b.n	8002e50 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002e50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3738      	adds	r7, #56	@ 0x38
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	431bde83 	.word	0x431bde83
 8002e64:	20000d78 	.word	0x20000d78
 8002e68:	40001000 	.word	0x40001000
 8002e6c:	2000004c 	.word	0x2000004c

08002e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e74:	bf00      	nop
 8002e76:	e7fd      	b.n	8002e74 <NMI_Handler+0x4>

08002e78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e7c:	bf00      	nop
 8002e7e:	e7fd      	b.n	8002e7c <HardFault_Handler+0x4>

08002e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e84:	bf00      	nop
 8002e86:	e7fd      	b.n	8002e84 <MemManage_Handler+0x4>

08002e88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e8c:	bf00      	nop
 8002e8e:	e7fd      	b.n	8002e8c <BusFault_Handler+0x4>

08002e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e94:	bf00      	nop
 8002e96:	e7fd      	b.n	8002e94 <UsageFault_Handler+0x4>

08002e98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e9c:	bf00      	nop
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
	...

08002ea8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002eac:	4802      	ldr	r0, [pc, #8]	@ (8002eb8 <TIM6_DAC_IRQHandler+0x10>)
 8002eae:	f008 f920 	bl	800b0f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20000d78 	.word	0x20000d78

08002ebc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002ec0:	4802      	ldr	r0, [pc, #8]	@ (8002ecc <OTG_FS_IRQHandler+0x10>)
 8002ec2:	f002 faeb 	bl	800549c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002ec6:	bf00      	nop
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20009424 	.word	0x20009424

08002ed0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002ed4:	4802      	ldr	r0, [pc, #8]	@ (8002ee0 <LTDC_IRQHandler+0x10>)
 8002ed6:	f004 fb05 	bl	80074e4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000708 	.word	0x20000708

08002ee4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002ee8:	4802      	ldr	r0, [pc, #8]	@ (8002ef4 <DMA2D_IRQHandler+0x10>)
 8002eea:	f001 f929 	bl	8004140 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	20000570 	.word	0x20000570

08002ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f00:	4a14      	ldr	r2, [pc, #80]	@ (8002f54 <_sbrk+0x5c>)
 8002f02:	4b15      	ldr	r3, [pc, #84]	@ (8002f58 <_sbrk+0x60>)
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f0c:	4b13      	ldr	r3, [pc, #76]	@ (8002f5c <_sbrk+0x64>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d102      	bne.n	8002f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f14:	4b11      	ldr	r3, [pc, #68]	@ (8002f5c <_sbrk+0x64>)
 8002f16:	4a12      	ldr	r2, [pc, #72]	@ (8002f60 <_sbrk+0x68>)
 8002f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f1a:	4b10      	ldr	r3, [pc, #64]	@ (8002f5c <_sbrk+0x64>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d207      	bcs.n	8002f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f28:	f011 fc86 	bl	8014838 <__errno>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	220c      	movs	r2, #12
 8002f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f32:	f04f 33ff 	mov.w	r3, #4294967295
 8002f36:	e009      	b.n	8002f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f38:	4b08      	ldr	r3, [pc, #32]	@ (8002f5c <_sbrk+0x64>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f3e:	4b07      	ldr	r3, [pc, #28]	@ (8002f5c <_sbrk+0x64>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	4a05      	ldr	r2, [pc, #20]	@ (8002f5c <_sbrk+0x64>)
 8002f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20050000 	.word	0x20050000
 8002f58:	00000400 	.word	0x00000400
 8002f5c:	20000dc4 	.word	0x20000dc4
 8002f60:	20009950 	.word	0x20009950

08002f64 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f68:	4b06      	ldr	r3, [pc, #24]	@ (8002f84 <SystemInit+0x20>)
 8002f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f6e:	4a05      	ldr	r2, [pc, #20]	@ (8002f84 <SystemInit+0x20>)
 8002f70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <LOGGER_Connect>:
    .enable_network = true,
    .server_ip = "",
    .server_port = 0
};

LoggerStatus LOGGER_Connect(const char* server_ip, int port) {
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
    if (server_ip == NULL) return LOGGER_STATUS_ERROR;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d102      	bne.n	8002f9e <LOGGER_Connect+0x16>
 8002f98:	f04f 33ff 	mov.w	r3, #4294967295
 8002f9c:	e016      	b.n	8002fcc <LOGGER_Connect+0x44>
    strncpy(current_config.server_ip, server_ip, sizeof(current_config.server_ip) - 1);
 8002f9e:	223f      	movs	r2, #63	@ 0x3f
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	480c      	ldr	r0, [pc, #48]	@ (8002fd4 <LOGGER_Connect+0x4c>)
 8002fa4:	f011 fc0e 	bl	80147c4 <strncpy>
    current_config.server_port = port;
 8002fa8:	4a0b      	ldr	r2, [pc, #44]	@ (8002fd8 <LOGGER_Connect+0x50>)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	6453      	str	r3, [r2, #68]	@ 0x44
    LoggerStatus status = LOGGER_Platform_Connect(server_ip, port);
 8002fae:	6839      	ldr	r1, [r7, #0]
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f891 	bl	80030d8 <LOGGER_Platform_Connect>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	73fb      	strb	r3, [r7, #15]
    if (status == LOGGER_STATUS_OK) {
 8002fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d102      	bne.n	8002fc8 <LOGGER_Connect+0x40>
        logger_connected = true;
 8002fc2:	4b06      	ldr	r3, [pc, #24]	@ (8002fdc <LOGGER_Connect+0x54>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	701a      	strb	r2, [r3, #0]
    }
    return status;
 8002fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20000007 	.word	0x20000007
 8002fd8:	20000004 	.word	0x20000004
 8002fdc:	20000dc8 	.word	0x20000dc8

08002fe0 <LOGGER_Send>:
        logger_connected = false;
    }
    return status;
}

LoggerStatus LOGGER_Send(const char* message) {
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
    if (!logger_connected || message == NULL) return LOGGER_STATUS_ERROR;
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8003014 <LOGGER_Send+0x34>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	f083 0301 	eor.w	r3, r3, #1
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d102      	bne.n	8002ffc <LOGGER_Send+0x1c>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d102      	bne.n	8003002 <LOGGER_Send+0x22>
 8002ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8003000:	e003      	b.n	800300a <LOGGER_Send+0x2a>
    return LOGGER_Platform_Send(message);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f874 	bl	80030f0 <LOGGER_Platform_Send>
 8003008:	4603      	mov	r3, r0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000dc8 	.word	0x20000dc8

08003018 <LOGGER_SendFormatted>:

bool LOGGER_IsConnected(void) {
    return logger_connected;
}

void LOGGER_SendFormatted(LogLevel level, const char* format, ...) {
 8003018:	b40e      	push	{r1, r2, r3}
 800301a:	b590      	push	{r4, r7, lr}
 800301c:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8003020:	af00      	add	r7, sp, #0
 8003022:	4602      	mov	r2, r0
 8003024:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003028:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 800302c:	701a      	strb	r2, [r3, #0]
    if (level < current_config.level) return;
 800302e:	4b27      	ldr	r3, [pc, #156]	@ (80030cc <LOGGER_SendFormatted+0xb4>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003036:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 800303a:	7812      	ldrb	r2, [r2, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d33c      	bcc.n	80030ba <LOGGER_SendFormatted+0xa2>
    
    char buffer[512];
    const char* level_str[] = {"[DEBUG]", "[INFO]", "[WARN]", "[ERROR]"};
 8003040:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003044:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003048:	4a21      	ldr	r2, [pc, #132]	@ (80030d0 <LOGGER_SendFormatted+0xb8>)
 800304a:	461c      	mov	r4, r3
 800304c:	4613      	mov	r3, r2
 800304e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003050:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    // 레벨 문자열 추가
    int offset = snprintf(buffer, sizeof(buffer), "%s ", level_str[level]);
 8003054:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003058:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 800305c:	781a      	ldrb	r2, [r3, #0]
 800305e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003062:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800306a:	f107 001c 	add.w	r0, r7, #28
 800306e:	4a19      	ldr	r2, [pc, #100]	@ (80030d4 <LOGGER_SendFormatted+0xbc>)
 8003070:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003074:	f011 fb2c 	bl	80146d0 <sniprintf>
 8003078:	f8c7 021c 	str.w	r0, [r7, #540]	@ 0x21c
    
    // 가변 인수 처리
    va_list args;
    va_start(args, format);
 800307c:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8003080:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003084:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003088:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer + offset, sizeof(buffer) - offset, format, args);
 800308a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800308e:	f107 021c 	add.w	r2, r7, #28
 8003092:	18d0      	adds	r0, r2, r3
 8003094:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003098:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 800309c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80030a0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 80030aa:	f011 fb75 	bl	8014798 <vsniprintf>
    va_end(args);
    
    LOGGER_Send(buffer);
 80030ae:	f107 031c 	add.w	r3, r7, #28
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff ff94 	bl	8002fe0 <LOGGER_Send>
 80030b8:	e000      	b.n	80030bc <LOGGER_SendFormatted+0xa4>
    if (level < current_config.level) return;
 80030ba:	bf00      	nop
}
 80030bc:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80030c0:	46bd      	mov	sp, r7
 80030c2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80030c6:	b003      	add	sp, #12
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	20000004 	.word	0x20000004
 80030d0:	08015168 	.word	0x08015168
 80030d4:	08015178 	.word	0x08015178

080030d8 <LOGGER_Platform_Connect>:
#include "stm32f7xx_hal.h"
#include <string.h>

extern UART_HandleTypeDef huart1; // CubeMX가 생성한 UART1 (Virtual COM Port)

LoggerStatus LOGGER_Platform_Connect(const char* server_ip, int port) {
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
    (void)server_ip; (void)port;
    // STM32에서는 UART1이 이미 초기화되어 있으므로 추가 설정 불필요
    return LOGGER_STATUS_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <LOGGER_Platform_Send>:

LoggerStatus LOGGER_Platform_Disconnect(void) {
    return LOGGER_STATUS_OK;
}

LoggerStatus LOGGER_Platform_Send(const char* message) {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
    if (message == NULL) return LOGGER_STATUS_ERROR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d102      	bne.n	8003104 <LOGGER_Platform_Send+0x14>
 80030fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003102:	e01c      	b.n	800313e <LOGGER_Platform_Send+0x4e>
    
    // UART1을 통해 메시지 전송 (Virtual COM Port)
    int len = strlen(message);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7fd f883 	bl	8000210 <strlen>
 800310a:	4603      	mov	r3, r0
 800310c:	60fb      	str	r3, [r7, #12]
    if (len > 0) {
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2b00      	cmp	r3, #0
 8003112:	dd12      	ble.n	800313a <LOGGER_Platform_Send+0x4a>
        if (HAL_UART_Transmit(&huart1, (uint8_t*)message, len, 1000) == HAL_OK) {
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	b29a      	uxth	r2, r3
 8003118:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	480a      	ldr	r0, [pc, #40]	@ (8003148 <LOGGER_Platform_Send+0x58>)
 8003120:	f009 f80a 	bl	800c138 <HAL_UART_Transmit>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d107      	bne.n	800313a <LOGGER_Platform_Send+0x4a>
            // 줄바꿈 추가
            HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 800312a:	2364      	movs	r3, #100	@ 0x64
 800312c:	2202      	movs	r2, #2
 800312e:	4907      	ldr	r1, [pc, #28]	@ (800314c <LOGGER_Platform_Send+0x5c>)
 8003130:	4805      	ldr	r0, [pc, #20]	@ (8003148 <LOGGER_Platform_Send+0x58>)
 8003132:	f009 f801 	bl	800c138 <HAL_UART_Transmit>
            return LOGGER_STATUS_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	e001      	b.n	800313e <LOGGER_Platform_Send+0x4e>
        }
    }
    return LOGGER_STATUS_ERROR;
 800313a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20000c20 	.word	0x20000c20
 800314c:	0801517c 	.word	0x0801517c

08003150 <UART_Connect>:
    .timeout_ms = UART_DEFAULT_TIMEOUT_MS
};

// 공통 함수들 (테스트와 실제 빌드 모두에서 사용)
UartStatus UART_Connect(const char* port)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
    if (port == NULL) {
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d105      	bne.n	800316a <UART_Connect+0x1a>
        LOG_ERROR("[UART] Connect failed: NULL port");
 800315e:	4913      	ldr	r1, [pc, #76]	@ (80031ac <UART_Connect+0x5c>)
 8003160:	2003      	movs	r0, #3
 8003162:	f7ff ff59 	bl	8003018 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e01c      	b.n	80031a4 <UART_Connect+0x54>
    }

    LOG_INFO("[UART] Connecting to %s", port);
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	4910      	ldr	r1, [pc, #64]	@ (80031b0 <UART_Connect+0x60>)
 800316e:	2001      	movs	r0, #1
 8003170:	f7ff ff52 	bl	8003018 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Connect(port);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f8e1 	bl	800333c <UART_Platform_Connect>
 800317a:	4603      	mov	r3, r0
 800317c:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 800317e:	7bfb      	ldrb	r3, [r7, #15]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d108      	bne.n	8003196 <UART_Connect+0x46>
        uart_connected = true;
 8003184:	4b0b      	ldr	r3, [pc, #44]	@ (80031b4 <UART_Connect+0x64>)
 8003186:	2201      	movs	r2, #1
 8003188:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART] Successfully connected to %s", port);
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	490a      	ldr	r1, [pc, #40]	@ (80031b8 <UART_Connect+0x68>)
 800318e:	2001      	movs	r0, #1
 8003190:	f7ff ff42 	bl	8003018 <LOGGER_SendFormatted>
 8003194:	e005      	b.n	80031a2 <UART_Connect+0x52>
    } else {
        LOG_ERROR("[UART] Failed to connect to %s (status: %d)", port, status);
 8003196:	7bfb      	ldrb	r3, [r7, #15]
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	4908      	ldr	r1, [pc, #32]	@ (80031bc <UART_Connect+0x6c>)
 800319c:	2003      	movs	r0, #3
 800319e:	f7ff ff3b 	bl	8003018 <LOGGER_SendFormatted>
    }

    return status;
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	08015180 	.word	0x08015180
 80031b0:	080151a4 	.word	0x080151a4
 80031b4:	20000dc9 	.word	0x20000dc9
 80031b8:	080151bc 	.word	0x080151bc
 80031bc:	080151e0 	.word	0x080151e0

080031c0 <UART_Send>:

    return status;
}

UartStatus UART_Send(const char* data)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
    if (!uart_connected) {
 80031c8:	4b19      	ldr	r3, [pc, #100]	@ (8003230 <UART_Send+0x70>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	f083 0301 	eor.w	r3, r3, #1
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d005      	beq.n	80031e2 <UART_Send+0x22>
        LOG_ERROR("[UART] Send failed: not connected");
 80031d6:	4917      	ldr	r1, [pc, #92]	@ (8003234 <UART_Send+0x74>)
 80031d8:	2003      	movs	r0, #3
 80031da:	f7ff ff1d 	bl	8003018 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e022      	b.n	8003228 <UART_Send+0x68>
    }

    if (data == NULL) {
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d105      	bne.n	80031f4 <UART_Send+0x34>
        LOG_ERROR("[UART] Send failed: NULL data");
 80031e8:	4913      	ldr	r1, [pc, #76]	@ (8003238 <UART_Send+0x78>)
 80031ea:	2003      	movs	r0, #3
 80031ec:	f7ff ff14 	bl	8003018 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e019      	b.n	8003228 <UART_Send+0x68>
    }

    LOG_DEBUG("[UART] Sending data: %s", data);
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	4911      	ldr	r1, [pc, #68]	@ (800323c <UART_Send+0x7c>)
 80031f8:	2000      	movs	r0, #0
 80031fa:	f7ff ff0d 	bl	8003018 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Send(data);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f8c4 	bl	800338c <UART_Platform_Send>
 8003204:	4603      	mov	r3, r0
 8003206:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d105      	bne.n	800321a <UART_Send+0x5a>
        LOG_DEBUG("[UART] Send successful: %s", data);
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	490b      	ldr	r1, [pc, #44]	@ (8003240 <UART_Send+0x80>)
 8003212:	2000      	movs	r0, #0
 8003214:	f7ff ff00 	bl	8003018 <LOGGER_SendFormatted>
 8003218:	e005      	b.n	8003226 <UART_Send+0x66>
    } else {
        LOG_ERROR("[UART] Send failed: %s (status: %d)", data, status);
 800321a:	7bfb      	ldrb	r3, [r7, #15]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	4909      	ldr	r1, [pc, #36]	@ (8003244 <UART_Send+0x84>)
 8003220:	2003      	movs	r0, #3
 8003222:	f7ff fef9 	bl	8003018 <LOGGER_SendFormatted>
    }

    return status;
 8003226:	7bfb      	ldrb	r3, [r7, #15]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20000dc9 	.word	0x20000dc9
 8003234:	0801520c 	.word	0x0801520c
 8003238:	08015230 	.word	0x08015230
 800323c:	08015250 	.word	0x08015250
 8003240:	08015268 	.word	0x08015268
 8003244:	08015284 	.word	0x08015284

08003248 <UART_Receive>:

UartStatus UART_Receive(char* buffer, int buffer_size, int* bytes_received)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
    if (!uart_connected) {
 8003254:	4b22      	ldr	r3, [pc, #136]	@ (80032e0 <UART_Receive+0x98>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	f083 0301 	eor.w	r3, r3, #1
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <UART_Receive+0x26>
        LOG_ERROR("[UART] Receive failed: not connected");
 8003262:	4920      	ldr	r1, [pc, #128]	@ (80032e4 <UART_Receive+0x9c>)
 8003264:	2003      	movs	r0, #3
 8003266:	f7ff fed7 	bl	8003018 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e034      	b.n	80032d8 <UART_Receive+0x90>
    }

    if (buffer == NULL || buffer_size <= 0 || bytes_received == NULL) {
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <UART_Receive+0x38>
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	dd02      	ble.n	8003280 <UART_Receive+0x38>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d105      	bne.n	800328c <UART_Receive+0x44>
        LOG_ERROR("[UART] Receive failed: invalid parameters");
 8003280:	4919      	ldr	r1, [pc, #100]	@ (80032e8 <UART_Receive+0xa0>)
 8003282:	2003      	movs	r0, #3
 8003284:	f7ff fec8 	bl	8003018 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e025      	b.n	80032d8 <UART_Receive+0x90>
    }

    LOG_DEBUG("[UART] Receiving data (buffer_size: %d)", buffer_size);
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	4917      	ldr	r1, [pc, #92]	@ (80032ec <UART_Receive+0xa4>)
 8003290:	2000      	movs	r0, #0
 8003292:	f7ff fec1 	bl	8003018 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Receive(buffer, buffer_size, bytes_received);
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	68b9      	ldr	r1, [r7, #8]
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 f8a6 	bl	80033ec <UART_Platform_Receive>
 80032a0:	4603      	mov	r3, r0
 80032a2:	75fb      	strb	r3, [r7, #23]

    if (status == UART_STATUS_OK) {
 80032a4:	7dfb      	ldrb	r3, [r7, #23]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d107      	bne.n	80032ba <UART_Receive+0x72>
        LOG_DEBUG("[UART] Received %d bytes: %s", *bytes_received, buffer);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	490f      	ldr	r1, [pc, #60]	@ (80032f0 <UART_Receive+0xa8>)
 80032b2:	2000      	movs	r0, #0
 80032b4:	f7ff feb0 	bl	8003018 <LOGGER_SendFormatted>
 80032b8:	e00d      	b.n	80032d6 <UART_Receive+0x8e>
    } else if (status == UART_STATUS_TIMEOUT) {
 80032ba:	7dfb      	ldrb	r3, [r7, #23]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d104      	bne.n	80032ca <UART_Receive+0x82>
        LOG_DEBUG("[UART] Receive timeout");
 80032c0:	490c      	ldr	r1, [pc, #48]	@ (80032f4 <UART_Receive+0xac>)
 80032c2:	2000      	movs	r0, #0
 80032c4:	f7ff fea8 	bl	8003018 <LOGGER_SendFormatted>
 80032c8:	e005      	b.n	80032d6 <UART_Receive+0x8e>
    } else {
        LOG_ERROR("[UART] Receive failed (status: %d)", status);
 80032ca:	7dfb      	ldrb	r3, [r7, #23]
 80032cc:	461a      	mov	r2, r3
 80032ce:	490a      	ldr	r1, [pc, #40]	@ (80032f8 <UART_Receive+0xb0>)
 80032d0:	2003      	movs	r0, #3
 80032d2:	f7ff fea1 	bl	8003018 <LOGGER_SendFormatted>
    }

    return status;
 80032d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	20000dc9 	.word	0x20000dc9
 80032e4:	080152a8 	.word	0x080152a8
 80032e8:	080152d0 	.word	0x080152d0
 80032ec:	080152fc 	.word	0x080152fc
 80032f0:	08015324 	.word	0x08015324
 80032f4:	08015344 	.word	0x08015344
 80032f8:	0801535c 	.word	0x0801535c

080032fc <HAL_UART_RxCpltCallback>:
static uint8_t rx_buffer[256];  // 수신 버퍼 (uint8_t로 변경)
static volatile bool data_received = false;
static volatile int received_bytes = 0;

// 인터럽트 콜백 함수
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
    if (huart->Instance == huart6.Instance) {
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	4b08      	ldr	r3, [pc, #32]	@ (800332c <HAL_UART_RxCpltCallback+0x30>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d109      	bne.n	8003324 <HAL_UART_RxCpltCallback+0x28>
        data_received = true;
 8003310:	4b07      	ldr	r3, [pc, #28]	@ (8003330 <HAL_UART_RxCpltCallback+0x34>)
 8003312:	2201      	movs	r2, #1
 8003314:	701a      	strb	r2, [r3, #0]
        received_bytes = strlen((char*)rx_buffer);
 8003316:	4807      	ldr	r0, [pc, #28]	@ (8003334 <HAL_UART_RxCpltCallback+0x38>)
 8003318:	f7fc ff7a 	bl	8000210 <strlen>
 800331c:	4603      	mov	r3, r0
 800331e:	461a      	mov	r2, r3
 8003320:	4b05      	ldr	r3, [pc, #20]	@ (8003338 <HAL_UART_RxCpltCallback+0x3c>)
 8003322:	601a      	str	r2, [r3, #0]
    }
}
 8003324:	bf00      	nop
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20000ca8 	.word	0x20000ca8
 8003330:	20000ecc 	.word	0x20000ecc
 8003334:	20000dcc 	.word	0x20000dcc
 8003338:	20000ed0 	.word	0x20000ed0

0800333c <UART_Platform_Connect>:
        data_received = false;
        received_bytes = 0;
    }
}

UartStatus UART_Platform_Connect(const char* port) {
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
    // STM32에서는 이미 HAL_UART_Init()이 실행됨
    // 인터럽트 수신 시작
    if (HAL_UART_Receive_IT(&huart6, rx_buffer, sizeof(rx_buffer)) == HAL_OK) {
 8003344:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003348:	490b      	ldr	r1, [pc, #44]	@ (8003378 <UART_Platform_Connect+0x3c>)
 800334a:	480c      	ldr	r0, [pc, #48]	@ (800337c <UART_Platform_Connect+0x40>)
 800334c:	f008 ff7d 	bl	800c24a <HAL_UART_Receive_IT>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10a      	bne.n	800336c <UART_Platform_Connect+0x30>
        uart_initialized = true;
 8003356:	4b0a      	ldr	r3, [pc, #40]	@ (8003380 <UART_Platform_Connect+0x44>)
 8003358:	2201      	movs	r2, #1
 800335a:	701a      	strb	r2, [r3, #0]
        data_received = false;
 800335c:	4b09      	ldr	r3, [pc, #36]	@ (8003384 <UART_Platform_Connect+0x48>)
 800335e:	2200      	movs	r2, #0
 8003360:	701a      	strb	r2, [r3, #0]
        received_bytes = 0;
 8003362:	4b09      	ldr	r3, [pc, #36]	@ (8003388 <UART_Platform_Connect+0x4c>)
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
        return UART_STATUS_OK;
 8003368:	2300      	movs	r3, #0
 800336a:	e000      	b.n	800336e <UART_Platform_Connect+0x32>
    }
    return UART_STATUS_ERROR;
 800336c:	2301      	movs	r3, #1
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	20000dcc 	.word	0x20000dcc
 800337c:	20000ca8 	.word	0x20000ca8
 8003380:	20000dca 	.word	0x20000dca
 8003384:	20000ecc 	.word	0x20000ecc
 8003388:	20000ed0 	.word	0x20000ed0

0800338c <UART_Platform_Send>:
    data_received = false;
    received_bytes = 0;
    return UART_STATUS_OK;
}

UartStatus UART_Platform_Send(const char* data) {
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
    if (data == NULL || !uart_initialized) return UART_STATUS_ERROR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d006      	beq.n	80033a8 <UART_Platform_Send+0x1c>
 800339a:	4b12      	ldr	r3, [pc, #72]	@ (80033e4 <UART_Platform_Send+0x58>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	f083 0301 	eor.w	r3, r3, #1
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <UART_Platform_Send+0x20>
 80033a8:	2301      	movs	r3, #1
 80033aa:	e017      	b.n	80033dc <UART_Platform_Send+0x50>
    
    int len = strlen(data);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7fc ff2f 	bl	8000210 <strlen>
 80033b2:	4603      	mov	r3, r0
 80033b4:	60fb      	str	r3, [r7, #12]
    if (len == 0) return UART_STATUS_OK;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <UART_Platform_Send+0x34>
 80033bc:	2300      	movs	r3, #0
 80033be:	e00d      	b.n	80033dc <UART_Platform_Send+0x50>
    
    if (HAL_UART_Transmit(&huart6, (uint8_t*)data, len, 1000) == HAL_OK) {
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4807      	ldr	r0, [pc, #28]	@ (80033e8 <UART_Platform_Send+0x5c>)
 80033cc:	f008 feb4 	bl	800c138 <HAL_UART_Transmit>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <UART_Platform_Send+0x4e>
        return UART_STATUS_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e000      	b.n	80033dc <UART_Platform_Send+0x50>
    } else {
        return UART_STATUS_ERROR;
 80033da:	2301      	movs	r3, #1
    }
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	20000dca 	.word	0x20000dca
 80033e8:	20000ca8 	.word	0x20000ca8

080033ec <UART_Platform_Receive>:

UartStatus UART_Platform_Receive(char* buffer, int buffer_size, int* bytes_received) {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
    if (buffer == NULL || bytes_received == NULL || !uart_initialized) {
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d009      	beq.n	8003412 <UART_Platform_Receive+0x26>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d006      	beq.n	8003412 <UART_Platform_Receive+0x26>
 8003404:	4b27      	ldr	r3, [pc, #156]	@ (80034a4 <UART_Platform_Receive+0xb8>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	f083 0301 	eor.w	r3, r3, #1
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <UART_Platform_Receive+0x2a>
        return UART_STATUS_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e042      	b.n	800349c <UART_Platform_Receive+0xb0>
    }
    
    if (buffer_size <= 0) {
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	dc04      	bgt.n	8003426 <UART_Platform_Receive+0x3a>
        *bytes_received = 0;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
        return UART_STATUS_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e03a      	b.n	800349c <UART_Platform_Receive+0xb0>
    }
    
    // 인터럽트로 수신된 데이터가 있는지 확인
    if (data_received && received_bytes > 0) {
 8003426:	4b20      	ldr	r3, [pc, #128]	@ (80034a8 <UART_Platform_Receive+0xbc>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d031      	beq.n	8003494 <UART_Platform_Receive+0xa8>
 8003430:	4b1e      	ldr	r3, [pc, #120]	@ (80034ac <UART_Platform_Receive+0xc0>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	dd2d      	ble.n	8003494 <UART_Platform_Receive+0xa8>
        int copy_size = (received_bytes < buffer_size - 1) ? received_bytes : buffer_size - 1;
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	1e5a      	subs	r2, r3, #1
 800343c:	4b1b      	ldr	r3, [pc, #108]	@ (80034ac <UART_Platform_Receive+0xc0>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	dc02      	bgt.n	800344a <UART_Platform_Receive+0x5e>
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	3b01      	subs	r3, #1
 8003448:	e001      	b.n	800344e <UART_Platform_Receive+0x62>
 800344a:	4b18      	ldr	r3, [pc, #96]	@ (80034ac <UART_Platform_Receive+0xc0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	617b      	str	r3, [r7, #20]
        memcpy(buffer, rx_buffer, copy_size);
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	461a      	mov	r2, r3
 8003454:	4916      	ldr	r1, [pc, #88]	@ (80034b0 <UART_Platform_Receive+0xc4>)
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f011 fa1a 	bl	8014890 <memcpy>
        buffer[copy_size] = '\0';
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	4413      	add	r3, r2
 8003462:	2200      	movs	r2, #0
 8003464:	701a      	strb	r2, [r3, #0]
        *bytes_received = copy_size;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	601a      	str	r2, [r3, #0]
        
        // 버퍼 초기화 및 인터럽트 재시작
        memset(rx_buffer, 0, sizeof(rx_buffer));
 800346c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003470:	2100      	movs	r1, #0
 8003472:	480f      	ldr	r0, [pc, #60]	@ (80034b0 <UART_Platform_Receive+0xc4>)
 8003474:	f011 f99e 	bl	80147b4 <memset>
        data_received = false;
 8003478:	4b0b      	ldr	r3, [pc, #44]	@ (80034a8 <UART_Platform_Receive+0xbc>)
 800347a:	2200      	movs	r2, #0
 800347c:	701a      	strb	r2, [r3, #0]
        received_bytes = 0;
 800347e:	4b0b      	ldr	r3, [pc, #44]	@ (80034ac <UART_Platform_Receive+0xc0>)
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart6, rx_buffer, sizeof(rx_buffer));
 8003484:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003488:	4909      	ldr	r1, [pc, #36]	@ (80034b0 <UART_Platform_Receive+0xc4>)
 800348a:	480a      	ldr	r0, [pc, #40]	@ (80034b4 <UART_Platform_Receive+0xc8>)
 800348c:	f008 fedd 	bl	800c24a <HAL_UART_Receive_IT>
        
        return UART_STATUS_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	e003      	b.n	800349c <UART_Platform_Receive+0xb0>
    }
    
    // 데이터가 없으면 타임아웃
    *bytes_received = 0;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]
    return UART_STATUS_TIMEOUT;
 800349a:	2302      	movs	r3, #2
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	20000dca 	.word	0x20000dca
 80034a8:	20000ecc 	.word	0x20000ecc
 80034ac:	20000ed0 	.word	0x20000ed0
 80034b0:	20000dcc 	.word	0x20000dcc
 80034b4:	20000ca8 	.word	0x20000ca8

080034b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80034b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80034f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80034bc:	f7ff fd52 	bl	8002f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034c0:	480c      	ldr	r0, [pc, #48]	@ (80034f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80034c2:	490d      	ldr	r1, [pc, #52]	@ (80034f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80034c4:	4a0d      	ldr	r2, [pc, #52]	@ (80034fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80034c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034c8:	e002      	b.n	80034d0 <LoopCopyDataInit>

080034ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034ce:	3304      	adds	r3, #4

080034d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034d4:	d3f9      	bcc.n	80034ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003500 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80034d8:	4c0a      	ldr	r4, [pc, #40]	@ (8003504 <LoopFillZerobss+0x22>)
  movs r3, #0
 80034da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034dc:	e001      	b.n	80034e2 <LoopFillZerobss>

080034de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034e0:	3204      	adds	r2, #4

080034e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034e4:	d3fb      	bcc.n	80034de <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80034e6:	f011 f9ad 	bl	8014844 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034ea:	f7fd f8b3 	bl	8000654 <main>
  bx  lr    
 80034ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80034f0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80034f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034f8:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 80034fc:	0801561c 	.word	0x0801561c
  ldr r2, =_sbss
 8003500:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8003504:	2000994c 	.word	0x2000994c

08003508 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003508:	e7fe      	b.n	8003508 <ADC_IRQHandler>

0800350a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800350e:	2003      	movs	r0, #3
 8003510:	f000 fb91 	bl	8003c36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003514:	2000      	movs	r0, #0
 8003516:	f7ff fc31 	bl	8002d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800351a:	f7fe fb93 	bl	8001c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003528:	4b06      	ldr	r3, [pc, #24]	@ (8003544 <HAL_IncTick+0x20>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	461a      	mov	r2, r3
 800352e:	4b06      	ldr	r3, [pc, #24]	@ (8003548 <HAL_IncTick+0x24>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4413      	add	r3, r2
 8003534:	4a04      	ldr	r2, [pc, #16]	@ (8003548 <HAL_IncTick+0x24>)
 8003536:	6013      	str	r3, [r2, #0]
}
 8003538:	bf00      	nop
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	20000050 	.word	0x20000050
 8003548:	20000ed4 	.word	0x20000ed4

0800354c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  return uwTick;
 8003550:	4b03      	ldr	r3, [pc, #12]	@ (8003560 <HAL_GetTick+0x14>)
 8003552:	681b      	ldr	r3, [r3, #0]
}
 8003554:	4618      	mov	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	20000ed4 	.word	0x20000ed4

08003564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800356c:	f7ff ffee 	bl	800354c <HAL_GetTick>
 8003570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357c:	d005      	beq.n	800358a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800357e:	4b0a      	ldr	r3, [pc, #40]	@ (80035a8 <HAL_Delay+0x44>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4413      	add	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800358a:	bf00      	nop
 800358c:	f7ff ffde 	bl	800354c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	429a      	cmp	r2, r3
 800359a:	d8f7      	bhi.n	800358c <HAL_Delay+0x28>
  {
  }
}
 800359c:	bf00      	nop
 800359e:	bf00      	nop
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000050 	.word	0x20000050

080035ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035b4:	2300      	movs	r3, #0
 80035b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e031      	b.n	8003626 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d109      	bne.n	80035de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fe fb62 	bl	8001c94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d116      	bne.n	8003618 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035ee:	4b10      	ldr	r3, [pc, #64]	@ (8003630 <HAL_ADC_Init+0x84>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	f043 0202 	orr.w	r2, r3, #2
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f974 	bl	80038e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360a:	f023 0303 	bic.w	r3, r3, #3
 800360e:	f043 0201 	orr.w	r2, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	641a      	str	r2, [r3, #64]	@ 0x40
 8003616:	e001      	b.n	800361c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003624:	7bfb      	ldrb	r3, [r7, #15]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	ffffeefd 	.word	0xffffeefd

08003634 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <HAL_ADC_ConfigChannel+0x1c>
 800364c:	2302      	movs	r3, #2
 800364e:	e13a      	b.n	80038c6 <HAL_ADC_ConfigChannel+0x292>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b09      	cmp	r3, #9
 800365e:	d93a      	bls.n	80036d6 <HAL_ADC_ConfigChannel+0xa2>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003668:	d035      	beq.n	80036d6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68d9      	ldr	r1, [r3, #12]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	b29b      	uxth	r3, r3
 8003676:	461a      	mov	r2, r3
 8003678:	4613      	mov	r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	4413      	add	r3, r2
 800367e:	3b1e      	subs	r3, #30
 8003680:	2207      	movs	r2, #7
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	43da      	mvns	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	400a      	ands	r2, r1
 800368e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a8f      	ldr	r2, [pc, #572]	@ (80038d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d10a      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68d9      	ldr	r1, [r3, #12]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	061a      	lsls	r2, r3, #24
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036ae:	e039      	b.n	8003724 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68d9      	ldr	r1, [r3, #12]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	b29b      	uxth	r3, r3
 80036c0:	4618      	mov	r0, r3
 80036c2:	4603      	mov	r3, r0
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	4403      	add	r3, r0
 80036c8:	3b1e      	subs	r3, #30
 80036ca:	409a      	lsls	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036d4:	e026      	b.n	8003724 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6919      	ldr	r1, [r3, #16]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	461a      	mov	r2, r3
 80036e4:	4613      	mov	r3, r2
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	4413      	add	r3, r2
 80036ea:	f003 031f 	and.w	r3, r3, #31
 80036ee:	2207      	movs	r2, #7
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	43da      	mvns	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	400a      	ands	r2, r1
 80036fc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6919      	ldr	r1, [r3, #16]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	b29b      	uxth	r3, r3
 800370e:	4618      	mov	r0, r3
 8003710:	4603      	mov	r3, r0
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	4403      	add	r3, r0
 8003716:	f003 031f 	and.w	r3, r3, #31
 800371a:	409a      	lsls	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b06      	cmp	r3, #6
 800372a:	d824      	bhi.n	8003776 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	3b05      	subs	r3, #5
 800373e:	221f      	movs	r2, #31
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	43da      	mvns	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	400a      	ands	r2, r1
 800374c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	b29b      	uxth	r3, r3
 800375a:	4618      	mov	r0, r3
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	4613      	mov	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	3b05      	subs	r3, #5
 8003768:	fa00 f203 	lsl.w	r2, r0, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	635a      	str	r2, [r3, #52]	@ 0x34
 8003774:	e04c      	b.n	8003810 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b0c      	cmp	r3, #12
 800377c:	d824      	bhi.n	80037c8 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	3b23      	subs	r3, #35	@ 0x23
 8003790:	221f      	movs	r2, #31
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43da      	mvns	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	400a      	ands	r2, r1
 800379e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	4618      	mov	r0, r3
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	3b23      	subs	r3, #35	@ 0x23
 80037ba:	fa00 f203 	lsl.w	r2, r0, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80037c6:	e023      	b.n	8003810 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	3b41      	subs	r3, #65	@ 0x41
 80037da:	221f      	movs	r2, #31
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	43da      	mvns	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	400a      	ands	r2, r1
 80037e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	4618      	mov	r0, r3
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	4613      	mov	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	3b41      	subs	r3, #65	@ 0x41
 8003804:	fa00 f203 	lsl.w	r2, r0, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a30      	ldr	r2, [pc, #192]	@ (80038d8 <HAL_ADC_ConfigChannel+0x2a4>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d10a      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x1fc>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003822:	d105      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003824:	4b2d      	ldr	r3, [pc, #180]	@ (80038dc <HAL_ADC_ConfigChannel+0x2a8>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	4a2c      	ldr	r2, [pc, #176]	@ (80038dc <HAL_ADC_ConfigChannel+0x2a8>)
 800382a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800382e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a28      	ldr	r2, [pc, #160]	@ (80038d8 <HAL_ADC_ConfigChannel+0x2a4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d10f      	bne.n	800385a <HAL_ADC_ConfigChannel+0x226>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b12      	cmp	r3, #18
 8003840:	d10b      	bne.n	800385a <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003842:	4b26      	ldr	r3, [pc, #152]	@ (80038dc <HAL_ADC_ConfigChannel+0x2a8>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	4a25      	ldr	r2, [pc, #148]	@ (80038dc <HAL_ADC_ConfigChannel+0x2a8>)
 8003848:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800384c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800384e:	4b23      	ldr	r3, [pc, #140]	@ (80038dc <HAL_ADC_ConfigChannel+0x2a8>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	4a22      	ldr	r2, [pc, #136]	@ (80038dc <HAL_ADC_ConfigChannel+0x2a8>)
 8003854:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003858:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a1e      	ldr	r2, [pc, #120]	@ (80038d8 <HAL_ADC_ConfigChannel+0x2a4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d12b      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x288>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a1a      	ldr	r2, [pc, #104]	@ (80038d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d003      	beq.n	8003876 <HAL_ADC_ConfigChannel+0x242>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b11      	cmp	r3, #17
 8003874:	d122      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003876:	4b19      	ldr	r3, [pc, #100]	@ (80038dc <HAL_ADC_ConfigChannel+0x2a8>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	4a18      	ldr	r2, [pc, #96]	@ (80038dc <HAL_ADC_ConfigChannel+0x2a8>)
 800387c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003880:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003882:	4b16      	ldr	r3, [pc, #88]	@ (80038dc <HAL_ADC_ConfigChannel+0x2a8>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	4a15      	ldr	r2, [pc, #84]	@ (80038dc <HAL_ADC_ConfigChannel+0x2a8>)
 8003888:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800388c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a10      	ldr	r2, [pc, #64]	@ (80038d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d111      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003898:	4b11      	ldr	r3, [pc, #68]	@ (80038e0 <HAL_ADC_ConfigChannel+0x2ac>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a11      	ldr	r2, [pc, #68]	@ (80038e4 <HAL_ADC_ConfigChannel+0x2b0>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	0c9a      	lsrs	r2, r3, #18
 80038a4:	4613      	mov	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80038ae:	e002      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1f9      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	10000012 	.word	0x10000012
 80038d8:	40012000 	.word	0x40012000
 80038dc:	40012300 	.word	0x40012300
 80038e0:	20000000 	.word	0x20000000
 80038e4:	431bde83 	.word	0x431bde83

080038e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80038f0:	4b78      	ldr	r3, [pc, #480]	@ (8003ad4 <ADC_Init+0x1ec>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	4a77      	ldr	r2, [pc, #476]	@ (8003ad4 <ADC_Init+0x1ec>)
 80038f6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80038fa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80038fc:	4b75      	ldr	r3, [pc, #468]	@ (8003ad4 <ADC_Init+0x1ec>)
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	4973      	ldr	r1, [pc, #460]	@ (8003ad4 <ADC_Init+0x1ec>)
 8003906:	4313      	orrs	r3, r2
 8003908:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003918:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6859      	ldr	r1, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	021a      	lsls	r2, r3, #8
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800393c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6859      	ldr	r1, [r3, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800395e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6899      	ldr	r1, [r3, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003976:	4a58      	ldr	r2, [pc, #352]	@ (8003ad8 <ADC_Init+0x1f0>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d022      	beq.n	80039c2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800398a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6899      	ldr	r1, [r3, #8]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80039ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6899      	ldr	r1, [r3, #8]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	609a      	str	r2, [r3, #8]
 80039c0:	e00f      	b.n	80039e2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80039d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80039e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0202 	bic.w	r2, r2, #2
 80039f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6899      	ldr	r1, [r3, #8]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	005a      	lsls	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d01b      	beq.n	8003a48 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003a2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6859      	ldr	r1, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	035a      	lsls	r2, r3, #13
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	605a      	str	r2, [r3, #4]
 8003a46:	e007      	b.n	8003a58 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003a66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	051a      	lsls	r2, r3, #20
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003a8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6899      	ldr	r1, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003a9a:	025a      	lsls	r2, r3, #9
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ab2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6899      	ldr	r1, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	029a      	lsls	r2, r3, #10
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	609a      	str	r2, [r3, #8]
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	40012300 	.word	0x40012300
 8003ad8:	0f000001 	.word	0x0f000001

08003adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aec:	4b0b      	ldr	r3, [pc, #44]	@ (8003b1c <__NVIC_SetPriorityGrouping+0x40>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003af8:	4013      	ands	r3, r2
 8003afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003b04:	4b06      	ldr	r3, [pc, #24]	@ (8003b20 <__NVIC_SetPriorityGrouping+0x44>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b0a:	4a04      	ldr	r2, [pc, #16]	@ (8003b1c <__NVIC_SetPriorityGrouping+0x40>)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	60d3      	str	r3, [r2, #12]
}
 8003b10:	bf00      	nop
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	e000ed00 	.word	0xe000ed00
 8003b20:	05fa0000 	.word	0x05fa0000

08003b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b28:	4b04      	ldr	r3, [pc, #16]	@ (8003b3c <__NVIC_GetPriorityGrouping+0x18>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	0a1b      	lsrs	r3, r3, #8
 8003b2e:	f003 0307 	and.w	r3, r3, #7
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	e000ed00 	.word	0xe000ed00

08003b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4603      	mov	r3, r0
 8003b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	db0b      	blt.n	8003b6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	f003 021f 	and.w	r2, r3, #31
 8003b58:	4907      	ldr	r1, [pc, #28]	@ (8003b78 <__NVIC_EnableIRQ+0x38>)
 8003b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	2001      	movs	r0, #1
 8003b62:	fa00 f202 	lsl.w	r2, r0, r2
 8003b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	e000e100 	.word	0xe000e100

08003b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	4603      	mov	r3, r0
 8003b84:	6039      	str	r1, [r7, #0]
 8003b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	db0a      	blt.n	8003ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	490c      	ldr	r1, [pc, #48]	@ (8003bc8 <__NVIC_SetPriority+0x4c>)
 8003b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9a:	0112      	lsls	r2, r2, #4
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ba4:	e00a      	b.n	8003bbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	4908      	ldr	r1, [pc, #32]	@ (8003bcc <__NVIC_SetPriority+0x50>)
 8003bac:	79fb      	ldrb	r3, [r7, #7]
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	3b04      	subs	r3, #4
 8003bb4:	0112      	lsls	r2, r2, #4
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	440b      	add	r3, r1
 8003bba:	761a      	strb	r2, [r3, #24]
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	e000e100 	.word	0xe000e100
 8003bcc:	e000ed00 	.word	0xe000ed00

08003bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b089      	sub	sp, #36	@ 0x24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	f1c3 0307 	rsb	r3, r3, #7
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	bf28      	it	cs
 8003bee:	2304      	movcs	r3, #4
 8003bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	2b06      	cmp	r3, #6
 8003bf8:	d902      	bls.n	8003c00 <NVIC_EncodePriority+0x30>
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	3b03      	subs	r3, #3
 8003bfe:	e000      	b.n	8003c02 <NVIC_EncodePriority+0x32>
 8003c00:	2300      	movs	r3, #0
 8003c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c04:	f04f 32ff 	mov.w	r2, #4294967295
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	43da      	mvns	r2, r3
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	401a      	ands	r2, r3
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c18:	f04f 31ff 	mov.w	r1, #4294967295
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c22:	43d9      	mvns	r1, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c28:	4313      	orrs	r3, r2
         );
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3724      	adds	r7, #36	@ 0x24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b082      	sub	sp, #8
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7ff ff4c 	bl	8003adc <__NVIC_SetPriorityGrouping>
}
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	4603      	mov	r3, r0
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
 8003c58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c5e:	f7ff ff61 	bl	8003b24 <__NVIC_GetPriorityGrouping>
 8003c62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	68b9      	ldr	r1, [r7, #8]
 8003c68:	6978      	ldr	r0, [r7, #20]
 8003c6a:	f7ff ffb1 	bl	8003bd0 <NVIC_EncodePriority>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c74:	4611      	mov	r1, r2
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff ff80 	bl	8003b7c <__NVIC_SetPriority>
}
 8003c7c:	bf00      	nop
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff ff54 	bl	8003b40 <__NVIC_EnableIRQ>
}
 8003c98:	bf00      	nop
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e054      	b.n	8003d5c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	7f5b      	ldrb	r3, [r3, #29]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d105      	bne.n	8003cc8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7fe f840 	bl	8001d48 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	791b      	ldrb	r3, [r3, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10c      	bne.n	8003cf0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a22      	ldr	r2, [pc, #136]	@ (8003d64 <HAL_CRC_Init+0xc4>)
 8003cdc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0218 	bic.w	r2, r2, #24
 8003cec:	609a      	str	r2, [r3, #8]
 8003cee:	e00c      	b.n	8003d0a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6899      	ldr	r1, [r3, #8]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f834 	bl	8003d68 <HAL_CRCEx_Polynomial_Set>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e028      	b.n	8003d5c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	795b      	ldrb	r3, [r3, #5]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d105      	bne.n	8003d1e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f04f 32ff 	mov.w	r2, #4294967295
 8003d1a:	611a      	str	r2, [r3, #16]
 8003d1c:	e004      	b.n	8003d28 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6912      	ldr	r2, [r2, #16]
 8003d26:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695a      	ldr	r2, [r3, #20]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699a      	ldr	r2, [r3, #24]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	04c11db7 	.word	0x04c11db7

08003d68 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003d78:	231f      	movs	r3, #31
 8003d7a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d102      	bne.n	8003d8c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	75fb      	strb	r3, [r7, #23]
 8003d8a:	e063      	b.n	8003e54 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003d8c:	bf00      	nop
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1e5a      	subs	r2, r3, #1
 8003d92:	613a      	str	r2, [r7, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d009      	beq.n	8003dac <HAL_CRCEx_Polynomial_Set+0x44>
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	f003 031f 	and.w	r3, r3, #31
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	fa22 f303 	lsr.w	r3, r2, r3
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0f0      	beq.n	8003d8e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b18      	cmp	r3, #24
 8003db0:	d846      	bhi.n	8003e40 <HAL_CRCEx_Polynomial_Set+0xd8>
 8003db2:	a201      	add	r2, pc, #4	@ (adr r2, 8003db8 <HAL_CRCEx_Polynomial_Set+0x50>)
 8003db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db8:	08003e47 	.word	0x08003e47
 8003dbc:	08003e41 	.word	0x08003e41
 8003dc0:	08003e41 	.word	0x08003e41
 8003dc4:	08003e41 	.word	0x08003e41
 8003dc8:	08003e41 	.word	0x08003e41
 8003dcc:	08003e41 	.word	0x08003e41
 8003dd0:	08003e41 	.word	0x08003e41
 8003dd4:	08003e41 	.word	0x08003e41
 8003dd8:	08003e35 	.word	0x08003e35
 8003ddc:	08003e41 	.word	0x08003e41
 8003de0:	08003e41 	.word	0x08003e41
 8003de4:	08003e41 	.word	0x08003e41
 8003de8:	08003e41 	.word	0x08003e41
 8003dec:	08003e41 	.word	0x08003e41
 8003df0:	08003e41 	.word	0x08003e41
 8003df4:	08003e41 	.word	0x08003e41
 8003df8:	08003e29 	.word	0x08003e29
 8003dfc:	08003e41 	.word	0x08003e41
 8003e00:	08003e41 	.word	0x08003e41
 8003e04:	08003e41 	.word	0x08003e41
 8003e08:	08003e41 	.word	0x08003e41
 8003e0c:	08003e41 	.word	0x08003e41
 8003e10:	08003e41 	.word	0x08003e41
 8003e14:	08003e41 	.word	0x08003e41
 8003e18:	08003e1d 	.word	0x08003e1d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	2b06      	cmp	r3, #6
 8003e20:	d913      	bls.n	8003e4a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003e26:	e010      	b.n	8003e4a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	2b07      	cmp	r3, #7
 8003e2c:	d90f      	bls.n	8003e4e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003e32:	e00c      	b.n	8003e4e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	2b0f      	cmp	r3, #15
 8003e38:	d90b      	bls.n	8003e52 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003e3e:	e008      	b.n	8003e52 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	75fb      	strb	r3, [r7, #23]
        break;
 8003e44:	e006      	b.n	8003e54 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003e46:	bf00      	nop
 8003e48:	e004      	b.n	8003e54 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003e4a:	bf00      	nop
 8003e4c:	e002      	b.n	8003e54 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003e4e:	bf00      	nop
 8003e50:	e000      	b.n	8003e54 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003e52:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003e54:	7dfb      	ldrb	r3, [r7, #23]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10d      	bne.n	8003e76 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f023 0118 	bic.w	r1, r3, #24
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	371c      	adds	r7, #28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e069      	b.n	8003f6a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d102      	bne.n	8003ea8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7fd ff70 	bl	8001d88 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d002      	beq.n	8003ebe <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6819      	ldr	r1, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	4b2a      	ldr	r3, [pc, #168]	@ (8003f74 <HAL_DCMI_Init+0xf0>)
 8003eca:	400b      	ands	r3, r1
 8003ecc:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6819      	ldr	r1, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003ee2:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003eee:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003efa:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f00:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003f06:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003f12:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b10      	cmp	r3, #16
 8003f22:	d112      	bne.n	8003f4a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	7f1b      	ldrb	r3, [r3, #28]
 8003f28:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	7f5b      	ldrb	r3, [r3, #29]
 8003f2e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003f30:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	7f9b      	ldrb	r3, [r3, #30]
 8003f36:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003f38:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	7fdb      	ldrb	r3, [r3, #31]
 8003f40:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003f46:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003f48:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68da      	ldr	r2, [r3, #12]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f042 021e 	orr.w	r2, r2, #30
 8003f58:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	ffe0f007 	.word	0xffe0f007

08003f78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d101      	bne.n	8003f9e <HAL_DMA_Start_IT+0x26>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e048      	b.n	8004030 <HAL_DMA_Start_IT+0xb8>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d137      	bne.n	8004022 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	68b9      	ldr	r1, [r7, #8]
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f000 f842 	bl	8004050 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd0:	223f      	movs	r2, #63	@ 0x3f
 8003fd2:	409a      	lsls	r2, r3
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0216 	orr.w	r2, r2, #22
 8003fe6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	695a      	ldr	r2, [r3, #20]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003ff6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d007      	beq.n	8004010 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0208 	orr.w	r2, r2, #8
 800400e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	e005      	b.n	800402e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800402a:	2302      	movs	r3, #2
 800402c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800402e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004044:	4618      	mov	r0, r3
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800406c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	2b40      	cmp	r3, #64	@ 0x40
 800407c:	d108      	bne.n	8004090 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800408e:	e007      	b.n	80040a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	60da      	str	r2, [r3, #12]
}
 80040a0:	bf00      	nop
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e039      	b.n	8004132 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7fd ff16 	bl	8001f04 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040fc:	f023 0107 	bic.w	r1, r3, #7
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004112:	4b0a      	ldr	r3, [pc, #40]	@ (800413c <HAL_DMA2D_Init+0x90>)
 8004114:	4013      	ands	r3, r2
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	68d1      	ldr	r1, [r2, #12]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6812      	ldr	r2, [r2, #0]
 800411e:	430b      	orrs	r3, r1
 8004120:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	ffffc000 	.word	0xffffc000

08004140 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d026      	beq.n	80041b0 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004168:	2b00      	cmp	r3, #0
 800416a:	d021      	beq.n	80041b0 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800417a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004180:	f043 0201 	orr.w	r2, r3, #1
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2201      	movs	r2, #1
 800418e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2204      	movs	r2, #4
 8004194:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d003      	beq.n	80041b0 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 0320 	and.w	r3, r3, #32
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d026      	beq.n	8004208 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d021      	beq.n	8004208 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041d2:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2220      	movs	r2, #32
 80041da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e0:	f043 0202 	orr.w	r2, r3, #2
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2204      	movs	r2, #4
 80041ec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b00      	cmp	r3, #0
 8004210:	d026      	beq.n	8004260 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004218:	2b00      	cmp	r3, #0
 800421a:	d021      	beq.n	8004260 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800422a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2208      	movs	r2, #8
 8004232:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004238:	f043 0204 	orr.w	r2, r3, #4
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2204      	movs	r2, #4
 8004244:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f003 0304 	and.w	r3, r3, #4
 8004266:	2b00      	cmp	r3, #0
 8004268:	d013      	beq.n	8004292 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00e      	beq.n	8004292 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004282:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2204      	movs	r2, #4
 800428a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f853 	bl	8004338 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d024      	beq.n	80042e6 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d01f      	beq.n	80042e6 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80042b4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2202      	movs	r2, #2
 80042bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f003 0310 	and.w	r3, r3, #16
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d01f      	beq.n	8004330 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d01a      	beq.n	8004330 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004308:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2210      	movs	r2, #16
 8004310:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f80e 	bl	800434c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004330:	bf00      	nop
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004360:	b480      	push	{r7}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004378:	2b01      	cmp	r3, #1
 800437a:	d101      	bne.n	8004380 <HAL_DMA2D_ConfigLayer+0x20>
 800437c:	2302      	movs	r3, #2
 800437e:	e079      	b.n	8004474 <HAL_DMA2D_ConfigLayer+0x114>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	3318      	adds	r3, #24
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	4413      	add	r3, r2
 800439a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	041b      	lsls	r3, r3, #16
 80043a6:	4313      	orrs	r3, r2
 80043a8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80043aa:	4b35      	ldr	r3, [pc, #212]	@ (8004480 <HAL_DMA2D_ConfigLayer+0x120>)
 80043ac:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b0a      	cmp	r3, #10
 80043b4:	d003      	beq.n	80043be <HAL_DMA2D_ConfigLayer+0x5e>
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2b09      	cmp	r3, #9
 80043bc:	d107      	bne.n	80043ce <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	e005      	b.n	80043da <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	061b      	lsls	r3, r3, #24
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d120      	bne.n	8004422 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	43db      	mvns	r3, r3
 80043ea:	ea02 0103 	and.w	r1, r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	6812      	ldr	r2, [r2, #0]
 8004400:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2b0a      	cmp	r3, #10
 8004408:	d003      	beq.n	8004412 <HAL_DMA2D_ConfigLayer+0xb2>
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2b09      	cmp	r3, #9
 8004410:	d127      	bne.n	8004462 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800441e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004420:	e01f      	b.n	8004462 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	69da      	ldr	r2, [r3, #28]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	43db      	mvns	r3, r3
 800442c:	ea02 0103 	and.w	r1, r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	430a      	orrs	r2, r1
 8004438:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	6812      	ldr	r2, [r2, #0]
 8004442:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b0a      	cmp	r3, #10
 800444a:	d003      	beq.n	8004454 <HAL_DMA2D_ConfigLayer+0xf4>
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b09      	cmp	r3, #9
 8004452:	d106      	bne.n	8004462 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	68da      	ldr	r2, [r3, #12]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004460:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	371c      	adds	r7, #28
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	ff03000f 	.word	0xff03000f

08004484 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e086      	b.n	80045a4 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800449c:	2b00      	cmp	r3, #0
 800449e:	d106      	bne.n	80044ae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7fd fd51 	bl	8001f50 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ae:	4b3f      	ldr	r3, [pc, #252]	@ (80045ac <HAL_ETH_Init+0x128>)
 80044b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b2:	4a3e      	ldr	r2, [pc, #248]	@ (80045ac <HAL_ETH_Init+0x128>)
 80044b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80044ba:	4b3c      	ldr	r3, [pc, #240]	@ (80045ac <HAL_ETH_Init+0x128>)
 80044bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044c2:	60bb      	str	r3, [r7, #8]
 80044c4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80044c6:	4b3a      	ldr	r3, [pc, #232]	@ (80045b0 <HAL_ETH_Init+0x12c>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	4a39      	ldr	r2, [pc, #228]	@ (80045b0 <HAL_ETH_Init+0x12c>)
 80044cc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80044d0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80044d2:	4b37      	ldr	r3, [pc, #220]	@ (80045b0 <HAL_ETH_Init+0x12c>)
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	4935      	ldr	r1, [pc, #212]	@ (80045b0 <HAL_ETH_Init+0x12c>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80044e0:	4b33      	ldr	r3, [pc, #204]	@ (80045b0 <HAL_ETH_Init+0x12c>)
 80044e2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6812      	ldr	r2, [r2, #0]
 80044f2:	f043 0301 	orr.w	r3, r3, #1
 80044f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044fc:	f7ff f826 	bl	800354c <HAL_GetTick>
 8004500:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004502:	e011      	b.n	8004528 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004504:	f7ff f822 	bl	800354c <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004512:	d909      	bls.n	8004528 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2204      	movs	r2, #4
 8004518:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	22e0      	movs	r2, #224	@ 0xe0
 8004520:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e03d      	b.n	80045a4 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1e4      	bne.n	8004504 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f97a 	bl	8004834 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 fa25 	bl	8004990 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fa7b 	bl	8004a42 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	461a      	mov	r2, r3
 8004552:	2100      	movs	r1, #0
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f9e3 	bl	8004920 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8004568:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	4b0f      	ldr	r3, [pc, #60]	@ (80045b4 <HAL_ETH_Init+0x130>)
 8004578:	430b      	orrs	r3, r1
 800457a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800458e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2210      	movs	r2, #16
 800459e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40023800 	.word	0x40023800
 80045b0:	40013800 	.word	0x40013800
 80045b4:	00020060 	.word	0x00020060

080045b8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	4b53      	ldr	r3, [pc, #332]	@ (800471c <ETH_SetMACConfig+0x164>)
 80045ce:	4013      	ands	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	7b9b      	ldrb	r3, [r3, #14]
 80045d6:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	7c12      	ldrb	r2, [r2, #16]
 80045dc:	2a00      	cmp	r2, #0
 80045de:	d102      	bne.n	80045e6 <ETH_SetMACConfig+0x2e>
 80045e0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80045e4:	e000      	b.n	80045e8 <ETH_SetMACConfig+0x30>
 80045e6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80045e8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	7c52      	ldrb	r2, [r2, #17]
 80045ee:	2a00      	cmp	r2, #0
 80045f0:	d102      	bne.n	80045f8 <ETH_SetMACConfig+0x40>
 80045f2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80045f6:	e000      	b.n	80045fa <ETH_SetMACConfig+0x42>
 80045f8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80045fa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004600:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	7fdb      	ldrb	r3, [r3, #31]
 8004606:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004608:	431a      	orrs	r2, r3
                        macconf->Speed |
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800460e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	7f92      	ldrb	r2, [r2, #30]
 8004614:	2a00      	cmp	r2, #0
 8004616:	d102      	bne.n	800461e <ETH_SetMACConfig+0x66>
 8004618:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800461c:	e000      	b.n	8004620 <ETH_SetMACConfig+0x68>
 800461e:	2200      	movs	r2, #0
                        macconf->Speed |
 8004620:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	7f1b      	ldrb	r3, [r3, #28]
 8004626:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004628:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800462e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	791b      	ldrb	r3, [r3, #4]
 8004634:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004636:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800463e:	2a00      	cmp	r2, #0
 8004640:	d102      	bne.n	8004648 <ETH_SetMACConfig+0x90>
 8004642:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004646:	e000      	b.n	800464a <ETH_SetMACConfig+0x92>
 8004648:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800464a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	7bdb      	ldrb	r3, [r3, #15]
 8004650:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004652:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004658:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004660:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004662:	4313      	orrs	r3, r2
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4313      	orrs	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800467a:	2001      	movs	r0, #1
 800467c:	f7fe ff72 	bl	8003564 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8004696:	4013      	ands	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800469e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80046a6:	2a00      	cmp	r2, #0
 80046a8:	d101      	bne.n	80046ae <ETH_SetMACConfig+0xf6>
 80046aa:	2280      	movs	r2, #128	@ 0x80
 80046ac:	e000      	b.n	80046b0 <ETH_SetMACConfig+0xf8>
 80046ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80046b0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80046b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80046be:	2a01      	cmp	r2, #1
 80046c0:	d101      	bne.n	80046c6 <ETH_SetMACConfig+0x10e>
 80046c2:	2208      	movs	r2, #8
 80046c4:	e000      	b.n	80046c8 <ETH_SetMACConfig+0x110>
 80046c6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80046c8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80046d0:	2a01      	cmp	r2, #1
 80046d2:	d101      	bne.n	80046d8 <ETH_SetMACConfig+0x120>
 80046d4:	2204      	movs	r2, #4
 80046d6:	e000      	b.n	80046da <ETH_SetMACConfig+0x122>
 80046d8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80046da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80046e2:	2a01      	cmp	r2, #1
 80046e4:	d101      	bne.n	80046ea <ETH_SetMACConfig+0x132>
 80046e6:	2202      	movs	r2, #2
 80046e8:	e000      	b.n	80046ec <ETH_SetMACConfig+0x134>
 80046ea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80046ec:	4313      	orrs	r3, r2
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004704:	2001      	movs	r0, #1
 8004706:	f7fe ff2d 	bl	8003564 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	619a      	str	r2, [r3, #24]
}
 8004712:	bf00      	nop
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	fd20810f 	.word	0xfd20810f

08004720 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	4b3d      	ldr	r3, [pc, #244]	@ (8004830 <ETH_SetDMAConfig+0x110>)
 800473a:	4013      	ands	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	7b1b      	ldrb	r3, [r3, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d102      	bne.n	800474c <ETH_SetDMAConfig+0x2c>
 8004746:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800474a:	e000      	b.n	800474e <ETH_SetDMAConfig+0x2e>
 800474c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	7b5b      	ldrb	r3, [r3, #13]
 8004752:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004754:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	7f52      	ldrb	r2, [r2, #29]
 800475a:	2a00      	cmp	r2, #0
 800475c:	d102      	bne.n	8004764 <ETH_SetDMAConfig+0x44>
 800475e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004762:	e000      	b.n	8004766 <ETH_SetDMAConfig+0x46>
 8004764:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004766:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	7b9b      	ldrb	r3, [r3, #14]
 800476c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800476e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004774:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	7f1b      	ldrb	r3, [r3, #28]
 800477a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800477c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	7f9b      	ldrb	r3, [r3, #30]
 8004782:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004784:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800478a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004792:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004794:	4313      	orrs	r3, r2
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4313      	orrs	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047a4:	461a      	mov	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80047b6:	2001      	movs	r0, #1
 80047b8:	f7fe fed4 	bl	8003564 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047c4:	461a      	mov	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	791b      	ldrb	r3, [r3, #4]
 80047ce:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80047d4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80047da:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80047e0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80047e8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80047ea:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80047f2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80047f8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004802:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004806:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004814:	2001      	movs	r0, #1
 8004816:	f7fe fea5 	bl	8003564 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004822:	461a      	mov	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6013      	str	r3, [r2, #0]
}
 8004828:	bf00      	nop
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	f8de3f23 	.word	0xf8de3f23

08004834 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b0a6      	sub	sp, #152	@ 0x98
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800483c:	2301      	movs	r3, #1
 800483e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004842:	2301      	movs	r3, #1
 8004844:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004848:	2300      	movs	r3, #0
 800484a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800484c:	2300      	movs	r3, #0
 800484e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004852:	2301      	movs	r3, #1
 8004854:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004858:	2300      	movs	r3, #0
 800485a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800485e:	2301      	movs	r3, #1
 8004860:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8004864:	2301      	movs	r3, #1
 8004866:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800486a:	2300      	movs	r3, #0
 800486c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004870:	2300      	movs	r3, #0
 8004872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004876:	2300      	movs	r3, #0
 8004878:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800487a:	2300      	movs	r3, #0
 800487c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004880:	2300      	movs	r3, #0
 8004882:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004884:	2300      	movs	r3, #0
 8004886:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800488a:	2300      	movs	r3, #0
 800488c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004890:	2300      	movs	r3, #0
 8004892:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004896:	2300      	movs	r3, #0
 8004898:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800489c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80048a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80048a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80048a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80048a8:	2300      	movs	r3, #0
 80048aa:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80048ae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80048b2:	4619      	mov	r1, r3
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7ff fe7f 	bl	80045b8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80048ba:	2301      	movs	r3, #1
 80048bc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80048be:	2301      	movs	r3, #1
 80048c0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80048c2:	2301      	movs	r3, #1
 80048c4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80048c8:	2301      	movs	r3, #1
 80048ca:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80048cc:	2300      	movs	r3, #0
 80048ce:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80048d0:	2300      	movs	r3, #0
 80048d2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80048d6:	2300      	movs	r3, #0
 80048d8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80048dc:	2300      	movs	r3, #0
 80048de:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80048e0:	2301      	movs	r3, #1
 80048e2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80048e6:	2301      	movs	r3, #1
 80048e8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80048ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80048ee:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80048f0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80048f4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80048f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80048fa:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80048fc:	2301      	movs	r3, #1
 80048fe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004902:	2300      	movs	r3, #0
 8004904:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004906:	2300      	movs	r3, #0
 8004908:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800490a:	f107 0308 	add.w	r3, r7, #8
 800490e:	4619      	mov	r1, r3
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7ff ff05 	bl	8004720 <ETH_SetDMAConfig>
}
 8004916:	bf00      	nop
 8004918:	3798      	adds	r7, #152	@ 0x98
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
	...

08004920 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004920:	b480      	push	{r7}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3305      	adds	r3, #5
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	3204      	adds	r2, #4
 8004938:	7812      	ldrb	r2, [r2, #0]
 800493a:	4313      	orrs	r3, r2
 800493c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	4b11      	ldr	r3, [pc, #68]	@ (8004988 <ETH_MACAddressConfig+0x68>)
 8004942:	4413      	add	r3, r2
 8004944:	461a      	mov	r2, r3
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3303      	adds	r3, #3
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	061a      	lsls	r2, r3, #24
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	3302      	adds	r3, #2
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	041b      	lsls	r3, r3, #16
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3301      	adds	r3, #1
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	021b      	lsls	r3, r3, #8
 8004964:	4313      	orrs	r3, r2
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	7812      	ldrb	r2, [r2, #0]
 800496a:	4313      	orrs	r3, r2
 800496c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	4b06      	ldr	r3, [pc, #24]	@ (800498c <ETH_MACAddressConfig+0x6c>)
 8004972:	4413      	add	r3, r2
 8004974:	461a      	mov	r2, r3
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	6013      	str	r3, [r2, #0]
}
 800497a:	bf00      	nop
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40028040 	.word	0x40028040
 800498c:	40028044 	.word	0x40028044

08004990 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004998:	2300      	movs	r3, #0
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	e03e      	b.n	8004a1c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68d9      	ldr	r1, [r3, #12]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4613      	mov	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	440b      	add	r3, r1
 80049ae:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2200      	movs	r2, #0
 80049ba:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2200      	movs	r2, #0
 80049c0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	2200      	movs	r2, #0
 80049c6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80049c8:	68b9      	ldr	r1, [r7, #8]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	3206      	adds	r2, #6
 80049d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d80c      	bhi.n	8004a00 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68d9      	ldr	r1, [r3, #12]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	4613      	mov	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	440b      	add	r3, r1
 80049f8:	461a      	mov	r2, r3
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	60da      	str	r2, [r3, #12]
 80049fe:	e004      	b.n	8004a0a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	461a      	mov	r2, r3
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d9bd      	bls.n	800499e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68da      	ldr	r2, [r3, #12]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a34:	611a      	str	r2, [r3, #16]
}
 8004a36:	bf00      	nop
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b085      	sub	sp, #20
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	e048      	b.n	8004ae2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6919      	ldr	r1, [r3, #16]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	4613      	mov	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	440b      	add	r3, r1
 8004a60:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	2200      	movs	r2, #0
 8004a72:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2200      	movs	r2, #0
 8004a78:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2200      	movs	r2, #0
 8004a84:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004a8c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004aa6:	68b9      	ldr	r1, [r7, #8]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	3212      	adds	r2, #18
 8004aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d80c      	bhi.n	8004ad2 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6919      	ldr	r1, [r3, #16]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	440b      	add	r3, r1
 8004aca:	461a      	mov	r2, r3
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	60da      	str	r2, [r3, #12]
 8004ad0:	e004      	b.n	8004adc <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2b03      	cmp	r3, #3
 8004ae6:	d9b3      	bls.n	8004a50 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691a      	ldr	r2, [r3, #16]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b12:	60da      	str	r2, [r3, #12]
}
 8004b14:	bf00      	nop
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b089      	sub	sp, #36	@ 0x24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004b32:	2300      	movs	r3, #0
 8004b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004b36:	2300      	movs	r3, #0
 8004b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61fb      	str	r3, [r7, #28]
 8004b3e:	e175      	b.n	8004e2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004b40:	2201      	movs	r2, #1
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	fa02 f303 	lsl.w	r3, r2, r3
 8004b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	4013      	ands	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	f040 8164 	bne.w	8004e26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f003 0303 	and.w	r3, r3, #3
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d005      	beq.n	8004b76 <HAL_GPIO_Init+0x56>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d130      	bne.n	8004bd8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	2203      	movs	r2, #3
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	43db      	mvns	r3, r3
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bac:	2201      	movs	r2, #1
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	091b      	lsrs	r3, r3, #4
 8004bc2:	f003 0201 	and.w	r2, r3, #1
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f003 0303 	and.w	r3, r3, #3
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	d017      	beq.n	8004c14 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	2203      	movs	r2, #3
 8004bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf4:	43db      	mvns	r3, r3
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	fa02 f303 	lsl.w	r3, r2, r3
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f003 0303 	and.w	r3, r3, #3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d123      	bne.n	8004c68 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	08da      	lsrs	r2, r3, #3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3208      	adds	r2, #8
 8004c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	220f      	movs	r2, #15
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	4013      	ands	r3, r2
 8004c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	fa02 f303 	lsl.w	r3, r2, r3
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	08da      	lsrs	r2, r3, #3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	3208      	adds	r2, #8
 8004c62:	69b9      	ldr	r1, [r7, #24]
 8004c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	2203      	movs	r2, #3
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f003 0203 	and.w	r2, r3, #3
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 80be 	beq.w	8004e26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004caa:	4b66      	ldr	r3, [pc, #408]	@ (8004e44 <HAL_GPIO_Init+0x324>)
 8004cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cae:	4a65      	ldr	r2, [pc, #404]	@ (8004e44 <HAL_GPIO_Init+0x324>)
 8004cb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004cb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004cb6:	4b63      	ldr	r3, [pc, #396]	@ (8004e44 <HAL_GPIO_Init+0x324>)
 8004cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004cc2:	4a61      	ldr	r2, [pc, #388]	@ (8004e48 <HAL_GPIO_Init+0x328>)
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	089b      	lsrs	r3, r3, #2
 8004cc8:	3302      	adds	r3, #2
 8004cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	220f      	movs	r2, #15
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	43db      	mvns	r3, r3
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a58      	ldr	r2, [pc, #352]	@ (8004e4c <HAL_GPIO_Init+0x32c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d037      	beq.n	8004d5e <HAL_GPIO_Init+0x23e>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a57      	ldr	r2, [pc, #348]	@ (8004e50 <HAL_GPIO_Init+0x330>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d031      	beq.n	8004d5a <HAL_GPIO_Init+0x23a>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a56      	ldr	r2, [pc, #344]	@ (8004e54 <HAL_GPIO_Init+0x334>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d02b      	beq.n	8004d56 <HAL_GPIO_Init+0x236>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a55      	ldr	r2, [pc, #340]	@ (8004e58 <HAL_GPIO_Init+0x338>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d025      	beq.n	8004d52 <HAL_GPIO_Init+0x232>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a54      	ldr	r2, [pc, #336]	@ (8004e5c <HAL_GPIO_Init+0x33c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d01f      	beq.n	8004d4e <HAL_GPIO_Init+0x22e>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a53      	ldr	r2, [pc, #332]	@ (8004e60 <HAL_GPIO_Init+0x340>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d019      	beq.n	8004d4a <HAL_GPIO_Init+0x22a>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a52      	ldr	r2, [pc, #328]	@ (8004e64 <HAL_GPIO_Init+0x344>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d013      	beq.n	8004d46 <HAL_GPIO_Init+0x226>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a51      	ldr	r2, [pc, #324]	@ (8004e68 <HAL_GPIO_Init+0x348>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d00d      	beq.n	8004d42 <HAL_GPIO_Init+0x222>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a50      	ldr	r2, [pc, #320]	@ (8004e6c <HAL_GPIO_Init+0x34c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d007      	beq.n	8004d3e <HAL_GPIO_Init+0x21e>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a4f      	ldr	r2, [pc, #316]	@ (8004e70 <HAL_GPIO_Init+0x350>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d101      	bne.n	8004d3a <HAL_GPIO_Init+0x21a>
 8004d36:	2309      	movs	r3, #9
 8004d38:	e012      	b.n	8004d60 <HAL_GPIO_Init+0x240>
 8004d3a:	230a      	movs	r3, #10
 8004d3c:	e010      	b.n	8004d60 <HAL_GPIO_Init+0x240>
 8004d3e:	2308      	movs	r3, #8
 8004d40:	e00e      	b.n	8004d60 <HAL_GPIO_Init+0x240>
 8004d42:	2307      	movs	r3, #7
 8004d44:	e00c      	b.n	8004d60 <HAL_GPIO_Init+0x240>
 8004d46:	2306      	movs	r3, #6
 8004d48:	e00a      	b.n	8004d60 <HAL_GPIO_Init+0x240>
 8004d4a:	2305      	movs	r3, #5
 8004d4c:	e008      	b.n	8004d60 <HAL_GPIO_Init+0x240>
 8004d4e:	2304      	movs	r3, #4
 8004d50:	e006      	b.n	8004d60 <HAL_GPIO_Init+0x240>
 8004d52:	2303      	movs	r3, #3
 8004d54:	e004      	b.n	8004d60 <HAL_GPIO_Init+0x240>
 8004d56:	2302      	movs	r3, #2
 8004d58:	e002      	b.n	8004d60 <HAL_GPIO_Init+0x240>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e000      	b.n	8004d60 <HAL_GPIO_Init+0x240>
 8004d5e:	2300      	movs	r3, #0
 8004d60:	69fa      	ldr	r2, [r7, #28]
 8004d62:	f002 0203 	and.w	r2, r2, #3
 8004d66:	0092      	lsls	r2, r2, #2
 8004d68:	4093      	lsls	r3, r2
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004d70:	4935      	ldr	r1, [pc, #212]	@ (8004e48 <HAL_GPIO_Init+0x328>)
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	089b      	lsrs	r3, r3, #2
 8004d76:	3302      	adds	r3, #2
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d7e:	4b3d      	ldr	r3, [pc, #244]	@ (8004e74 <HAL_GPIO_Init+0x354>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	43db      	mvns	r3, r3
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004da2:	4a34      	ldr	r2, [pc, #208]	@ (8004e74 <HAL_GPIO_Init+0x354>)
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004da8:	4b32      	ldr	r3, [pc, #200]	@ (8004e74 <HAL_GPIO_Init+0x354>)
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	43db      	mvns	r3, r3
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	4013      	ands	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d003      	beq.n	8004dcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004dcc:	4a29      	ldr	r2, [pc, #164]	@ (8004e74 <HAL_GPIO_Init+0x354>)
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004dd2:	4b28      	ldr	r3, [pc, #160]	@ (8004e74 <HAL_GPIO_Init+0x354>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	43db      	mvns	r3, r3
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	4013      	ands	r3, r2
 8004de0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004df6:	4a1f      	ldr	r2, [pc, #124]	@ (8004e74 <HAL_GPIO_Init+0x354>)
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8004e74 <HAL_GPIO_Init+0x354>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	43db      	mvns	r3, r3
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e20:	4a14      	ldr	r2, [pc, #80]	@ (8004e74 <HAL_GPIO_Init+0x354>)
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	61fb      	str	r3, [r7, #28]
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	2b0f      	cmp	r3, #15
 8004e30:	f67f ae86 	bls.w	8004b40 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop
 8004e38:	3724      	adds	r7, #36	@ 0x24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	40023800 	.word	0x40023800
 8004e48:	40013800 	.word	0x40013800
 8004e4c:	40020000 	.word	0x40020000
 8004e50:	40020400 	.word	0x40020400
 8004e54:	40020800 	.word	0x40020800
 8004e58:	40020c00 	.word	0x40020c00
 8004e5c:	40021000 	.word	0x40021000
 8004e60:	40021400 	.word	0x40021400
 8004e64:	40021800 	.word	0x40021800
 8004e68:	40021c00 	.word	0x40021c00
 8004e6c:	40022000 	.word	0x40022000
 8004e70:	40022400 	.word	0x40022400
 8004e74:	40013c00 	.word	0x40013c00

08004e78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	460b      	mov	r3, r1
 8004e82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691a      	ldr	r2, [r3, #16]
 8004e88:	887b      	ldrh	r3, [r7, #2]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e90:	2301      	movs	r3, #1
 8004e92:	73fb      	strb	r3, [r7, #15]
 8004e94:	e001      	b.n	8004e9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e96:	2300      	movs	r3, #0
 8004e98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	807b      	strh	r3, [r7, #2]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004eb8:	787b      	ldrb	r3, [r7, #1]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ebe:	887a      	ldrh	r2, [r7, #2]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004ec4:	e003      	b.n	8004ece <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004ec6:	887b      	ldrh	r3, [r7, #2]
 8004ec8:	041a      	lsls	r2, r3, #16
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	619a      	str	r2, [r3, #24]
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b086      	sub	sp, #24
 8004ede:	af02      	add	r7, sp, #8
 8004ee0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e059      	b.n	8004fa0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d106      	bne.n	8004f0c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f00f f880 	bl	801400c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2203      	movs	r2, #3
 8004f10:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f1a:	d102      	bne.n	8004f22 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f008 ff13 	bl	800dd52 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6818      	ldr	r0, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	7c1a      	ldrb	r2, [r3, #16]
 8004f34:	f88d 2000 	strb.w	r2, [sp]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f3c:	f008 fe9e 	bl	800dc7c <USB_CoreInit>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d005      	beq.n	8004f52 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2202      	movs	r2, #2
 8004f4a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e026      	b.n	8004fa0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2101      	movs	r1, #1
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f008 ff0b 	bl	800dd74 <USB_SetCurrentMode>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d005      	beq.n	8004f70 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e017      	b.n	8004fa0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6818      	ldr	r0, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	7c1a      	ldrb	r2, [r3, #16]
 8004f78:	f88d 2000 	strb.w	r2, [sp]
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f80:	f009 f8b4 	bl	800e0ec <USB_HostInit>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d005      	beq.n	8004f96 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e004      	b.n	8004fa0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004fa8:	b590      	push	{r4, r7, lr}
 8004faa:	b08b      	sub	sp, #44	@ 0x2c
 8004fac:	af04      	add	r7, sp, #16
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	4608      	mov	r0, r1
 8004fb2:	4611      	mov	r1, r2
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	70fb      	strb	r3, [r7, #3]
 8004fba:	460b      	mov	r3, r1
 8004fbc:	70bb      	strb	r3, [r7, #2]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8004fc2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004fc4:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d101      	bne.n	8004fd4 <HAL_HCD_HC_Init+0x2c>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e09d      	b.n	8005110 <HAL_HCD_HC_Init+0x168>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8004fdc:	78fa      	ldrb	r2, [r7, #3]
 8004fde:	6879      	ldr	r1, [r7, #4]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	011b      	lsls	r3, r3, #4
 8004fe4:	1a9b      	subs	r3, r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	440b      	add	r3, r1
 8004fea:	3319      	adds	r3, #25
 8004fec:	2200      	movs	r2, #0
 8004fee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004ff0:	78fa      	ldrb	r2, [r7, #3]
 8004ff2:	6879      	ldr	r1, [r7, #4]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	1a9b      	subs	r3, r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	440b      	add	r3, r1
 8004ffe:	3314      	adds	r3, #20
 8005000:	787a      	ldrb	r2, [r7, #1]
 8005002:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005004:	78fa      	ldrb	r2, [r7, #3]
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	4613      	mov	r3, r2
 800500a:	011b      	lsls	r3, r3, #4
 800500c:	1a9b      	subs	r3, r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	440b      	add	r3, r1
 8005012:	3315      	adds	r3, #21
 8005014:	78fa      	ldrb	r2, [r7, #3]
 8005016:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8005018:	78fa      	ldrb	r2, [r7, #3]
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	4613      	mov	r3, r2
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	1a9b      	subs	r3, r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	440b      	add	r3, r1
 8005026:	3326      	adds	r3, #38	@ 0x26
 8005028:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800502c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800502e:	78fa      	ldrb	r2, [r7, #3]
 8005030:	78bb      	ldrb	r3, [r7, #2]
 8005032:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005036:	b2d8      	uxtb	r0, r3
 8005038:	6879      	ldr	r1, [r7, #4]
 800503a:	4613      	mov	r3, r2
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	1a9b      	subs	r3, r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	440b      	add	r3, r1
 8005044:	3316      	adds	r3, #22
 8005046:	4602      	mov	r2, r0
 8005048:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800504a:	78fb      	ldrb	r3, [r7, #3]
 800504c:	4619      	mov	r1, r3
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 fbc8 	bl	80057e4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8005054:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005058:	2b00      	cmp	r3, #0
 800505a:	da0a      	bge.n	8005072 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800505c:	78fa      	ldrb	r2, [r7, #3]
 800505e:	6879      	ldr	r1, [r7, #4]
 8005060:	4613      	mov	r3, r2
 8005062:	011b      	lsls	r3, r3, #4
 8005064:	1a9b      	subs	r3, r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	440b      	add	r3, r1
 800506a:	3317      	adds	r3, #23
 800506c:	2201      	movs	r2, #1
 800506e:	701a      	strb	r2, [r3, #0]
 8005070:	e009      	b.n	8005086 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005072:	78fa      	ldrb	r2, [r7, #3]
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	4613      	mov	r3, r2
 8005078:	011b      	lsls	r3, r3, #4
 800507a:	1a9b      	subs	r3, r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	440b      	add	r3, r1
 8005080:	3317      	adds	r3, #23
 8005082:	2200      	movs	r2, #0
 8005084:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f009 f986 	bl	800e39c <USB_GetHostSpeed>
 8005090:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8005092:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005096:	2b01      	cmp	r3, #1
 8005098:	d10b      	bne.n	80050b2 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800509a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d107      	bne.n	80050b2 <HAL_HCD_HC_Init+0x10a>
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d104      	bne.n	80050b2 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2bbc      	cmp	r3, #188	@ 0xbc
 80050ac:	d901      	bls.n	80050b2 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80050ae:	23bc      	movs	r3, #188	@ 0xbc
 80050b0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80050b2:	78fa      	ldrb	r2, [r7, #3]
 80050b4:	6879      	ldr	r1, [r7, #4]
 80050b6:	4613      	mov	r3, r2
 80050b8:	011b      	lsls	r3, r3, #4
 80050ba:	1a9b      	subs	r3, r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	440b      	add	r3, r1
 80050c0:	3318      	adds	r3, #24
 80050c2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80050c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80050c8:	78fa      	ldrb	r2, [r7, #3]
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	b298      	uxth	r0, r3
 80050ce:	6879      	ldr	r1, [r7, #4]
 80050d0:	4613      	mov	r3, r2
 80050d2:	011b      	lsls	r3, r3, #4
 80050d4:	1a9b      	subs	r3, r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	440b      	add	r3, r1
 80050da:	3328      	adds	r3, #40	@ 0x28
 80050dc:	4602      	mov	r2, r0
 80050de:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6818      	ldr	r0, [r3, #0]
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	787c      	ldrb	r4, [r7, #1]
 80050ea:	78ba      	ldrb	r2, [r7, #2]
 80050ec:	78f9      	ldrb	r1, [r7, #3]
 80050ee:	9302      	str	r3, [sp, #8]
 80050f0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80050f4:	9301      	str	r3, [sp, #4]
 80050f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	4623      	mov	r3, r4
 80050fe:	f009 f975 	bl	800e3ec <USB_HC_Init>
 8005102:	4603      	mov	r3, r0
 8005104:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800510e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005110:	4618      	mov	r0, r3
 8005112:	371c      	adds	r7, #28
 8005114:	46bd      	mov	sp, r7
 8005116:	bd90      	pop	{r4, r7, pc}

08005118 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	460b      	mov	r3, r1
 8005122:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005124:	2300      	movs	r3, #0
 8005126:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800512e:	2b01      	cmp	r3, #1
 8005130:	d101      	bne.n	8005136 <HAL_HCD_HC_Halt+0x1e>
 8005132:	2302      	movs	r3, #2
 8005134:	e00f      	b.n	8005156 <HAL_HCD_HC_Halt+0x3e>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	78fa      	ldrb	r2, [r7, #3]
 8005144:	4611      	mov	r1, r2
 8005146:	4618      	mov	r0, r3
 8005148:	f009 fd07 	bl	800eb5a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8005154:	7bfb      	ldrb	r3, [r7, #15]
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
	...

08005160 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	4608      	mov	r0, r1
 800516a:	4611      	mov	r1, r2
 800516c:	461a      	mov	r2, r3
 800516e:	4603      	mov	r3, r0
 8005170:	70fb      	strb	r3, [r7, #3]
 8005172:	460b      	mov	r3, r1
 8005174:	70bb      	strb	r3, [r7, #2]
 8005176:	4613      	mov	r3, r2
 8005178:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800517a:	78fa      	ldrb	r2, [r7, #3]
 800517c:	6879      	ldr	r1, [r7, #4]
 800517e:	4613      	mov	r3, r2
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	1a9b      	subs	r3, r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	440b      	add	r3, r1
 8005188:	3317      	adds	r3, #23
 800518a:	78ba      	ldrb	r2, [r7, #2]
 800518c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800518e:	78fa      	ldrb	r2, [r7, #3]
 8005190:	6879      	ldr	r1, [r7, #4]
 8005192:	4613      	mov	r3, r2
 8005194:	011b      	lsls	r3, r3, #4
 8005196:	1a9b      	subs	r3, r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	440b      	add	r3, r1
 800519c:	3326      	adds	r3, #38	@ 0x26
 800519e:	787a      	ldrb	r2, [r7, #1]
 80051a0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80051a2:	7c3b      	ldrb	r3, [r7, #16]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d114      	bne.n	80051d2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80051a8:	78fa      	ldrb	r2, [r7, #3]
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	4613      	mov	r3, r2
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	1a9b      	subs	r3, r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	332a      	adds	r3, #42	@ 0x2a
 80051b8:	2203      	movs	r2, #3
 80051ba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80051bc:	78fa      	ldrb	r2, [r7, #3]
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	4613      	mov	r3, r2
 80051c2:	011b      	lsls	r3, r3, #4
 80051c4:	1a9b      	subs	r3, r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	440b      	add	r3, r1
 80051ca:	3319      	adds	r3, #25
 80051cc:	7f3a      	ldrb	r2, [r7, #28]
 80051ce:	701a      	strb	r2, [r3, #0]
 80051d0:	e009      	b.n	80051e6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80051d2:	78fa      	ldrb	r2, [r7, #3]
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	4613      	mov	r3, r2
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	1a9b      	subs	r3, r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	440b      	add	r3, r1
 80051e0:	332a      	adds	r3, #42	@ 0x2a
 80051e2:	2202      	movs	r2, #2
 80051e4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80051e6:	787b      	ldrb	r3, [r7, #1]
 80051e8:	2b03      	cmp	r3, #3
 80051ea:	f200 8102 	bhi.w	80053f2 <HAL_HCD_HC_SubmitRequest+0x292>
 80051ee:	a201      	add	r2, pc, #4	@ (adr r2, 80051f4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80051f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f4:	08005205 	.word	0x08005205
 80051f8:	080053dd 	.word	0x080053dd
 80051fc:	080052c9 	.word	0x080052c9
 8005200:	08005353 	.word	0x08005353
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8005204:	7c3b      	ldrb	r3, [r7, #16]
 8005206:	2b01      	cmp	r3, #1
 8005208:	f040 80f5 	bne.w	80053f6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800520c:	78bb      	ldrb	r3, [r7, #2]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d12d      	bne.n	800526e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8005212:	8b3b      	ldrh	r3, [r7, #24]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d109      	bne.n	800522c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8005218:	78fa      	ldrb	r2, [r7, #3]
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	4613      	mov	r3, r2
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	1a9b      	subs	r3, r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	440b      	add	r3, r1
 8005226:	333d      	adds	r3, #61	@ 0x3d
 8005228:	2201      	movs	r2, #1
 800522a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800522c:	78fa      	ldrb	r2, [r7, #3]
 800522e:	6879      	ldr	r1, [r7, #4]
 8005230:	4613      	mov	r3, r2
 8005232:	011b      	lsls	r3, r3, #4
 8005234:	1a9b      	subs	r3, r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	440b      	add	r3, r1
 800523a:	333d      	adds	r3, #61	@ 0x3d
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10a      	bne.n	8005258 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005242:	78fa      	ldrb	r2, [r7, #3]
 8005244:	6879      	ldr	r1, [r7, #4]
 8005246:	4613      	mov	r3, r2
 8005248:	011b      	lsls	r3, r3, #4
 800524a:	1a9b      	subs	r3, r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	440b      	add	r3, r1
 8005250:	332a      	adds	r3, #42	@ 0x2a
 8005252:	2200      	movs	r2, #0
 8005254:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8005256:	e0ce      	b.n	80053f6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005258:	78fa      	ldrb	r2, [r7, #3]
 800525a:	6879      	ldr	r1, [r7, #4]
 800525c:	4613      	mov	r3, r2
 800525e:	011b      	lsls	r3, r3, #4
 8005260:	1a9b      	subs	r3, r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	440b      	add	r3, r1
 8005266:	332a      	adds	r3, #42	@ 0x2a
 8005268:	2202      	movs	r2, #2
 800526a:	701a      	strb	r2, [r3, #0]
      break;
 800526c:	e0c3      	b.n	80053f6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800526e:	78fa      	ldrb	r2, [r7, #3]
 8005270:	6879      	ldr	r1, [r7, #4]
 8005272:	4613      	mov	r3, r2
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	1a9b      	subs	r3, r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	440b      	add	r3, r1
 800527c:	331a      	adds	r3, #26
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	2b01      	cmp	r3, #1
 8005282:	f040 80b8 	bne.w	80053f6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8005286:	78fa      	ldrb	r2, [r7, #3]
 8005288:	6879      	ldr	r1, [r7, #4]
 800528a:	4613      	mov	r3, r2
 800528c:	011b      	lsls	r3, r3, #4
 800528e:	1a9b      	subs	r3, r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	440b      	add	r3, r1
 8005294:	333c      	adds	r3, #60	@ 0x3c
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10a      	bne.n	80052b2 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800529c:	78fa      	ldrb	r2, [r7, #3]
 800529e:	6879      	ldr	r1, [r7, #4]
 80052a0:	4613      	mov	r3, r2
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	1a9b      	subs	r3, r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	440b      	add	r3, r1
 80052aa:	332a      	adds	r3, #42	@ 0x2a
 80052ac:	2200      	movs	r2, #0
 80052ae:	701a      	strb	r2, [r3, #0]
      break;
 80052b0:	e0a1      	b.n	80053f6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80052b2:	78fa      	ldrb	r2, [r7, #3]
 80052b4:	6879      	ldr	r1, [r7, #4]
 80052b6:	4613      	mov	r3, r2
 80052b8:	011b      	lsls	r3, r3, #4
 80052ba:	1a9b      	subs	r3, r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	440b      	add	r3, r1
 80052c0:	332a      	adds	r3, #42	@ 0x2a
 80052c2:	2202      	movs	r2, #2
 80052c4:	701a      	strb	r2, [r3, #0]
      break;
 80052c6:	e096      	b.n	80053f6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80052c8:	78bb      	ldrb	r3, [r7, #2]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d120      	bne.n	8005310 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80052ce:	78fa      	ldrb	r2, [r7, #3]
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	4613      	mov	r3, r2
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	1a9b      	subs	r3, r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	440b      	add	r3, r1
 80052dc:	333d      	adds	r3, #61	@ 0x3d
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10a      	bne.n	80052fa <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80052e4:	78fa      	ldrb	r2, [r7, #3]
 80052e6:	6879      	ldr	r1, [r7, #4]
 80052e8:	4613      	mov	r3, r2
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	1a9b      	subs	r3, r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	440b      	add	r3, r1
 80052f2:	332a      	adds	r3, #42	@ 0x2a
 80052f4:	2200      	movs	r2, #0
 80052f6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80052f8:	e07e      	b.n	80053f8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80052fa:	78fa      	ldrb	r2, [r7, #3]
 80052fc:	6879      	ldr	r1, [r7, #4]
 80052fe:	4613      	mov	r3, r2
 8005300:	011b      	lsls	r3, r3, #4
 8005302:	1a9b      	subs	r3, r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	440b      	add	r3, r1
 8005308:	332a      	adds	r3, #42	@ 0x2a
 800530a:	2202      	movs	r2, #2
 800530c:	701a      	strb	r2, [r3, #0]
      break;
 800530e:	e073      	b.n	80053f8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005310:	78fa      	ldrb	r2, [r7, #3]
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	4613      	mov	r3, r2
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	1a9b      	subs	r3, r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	440b      	add	r3, r1
 800531e:	333c      	adds	r3, #60	@ 0x3c
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10a      	bne.n	800533c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005326:	78fa      	ldrb	r2, [r7, #3]
 8005328:	6879      	ldr	r1, [r7, #4]
 800532a:	4613      	mov	r3, r2
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	1a9b      	subs	r3, r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	440b      	add	r3, r1
 8005334:	332a      	adds	r3, #42	@ 0x2a
 8005336:	2200      	movs	r2, #0
 8005338:	701a      	strb	r2, [r3, #0]
      break;
 800533a:	e05d      	b.n	80053f8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800533c:	78fa      	ldrb	r2, [r7, #3]
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	4613      	mov	r3, r2
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	1a9b      	subs	r3, r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	440b      	add	r3, r1
 800534a:	332a      	adds	r3, #42	@ 0x2a
 800534c:	2202      	movs	r2, #2
 800534e:	701a      	strb	r2, [r3, #0]
      break;
 8005350:	e052      	b.n	80053f8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005352:	78bb      	ldrb	r3, [r7, #2]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d120      	bne.n	800539a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005358:	78fa      	ldrb	r2, [r7, #3]
 800535a:	6879      	ldr	r1, [r7, #4]
 800535c:	4613      	mov	r3, r2
 800535e:	011b      	lsls	r3, r3, #4
 8005360:	1a9b      	subs	r3, r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	440b      	add	r3, r1
 8005366:	333d      	adds	r3, #61	@ 0x3d
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10a      	bne.n	8005384 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800536e:	78fa      	ldrb	r2, [r7, #3]
 8005370:	6879      	ldr	r1, [r7, #4]
 8005372:	4613      	mov	r3, r2
 8005374:	011b      	lsls	r3, r3, #4
 8005376:	1a9b      	subs	r3, r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	440b      	add	r3, r1
 800537c:	332a      	adds	r3, #42	@ 0x2a
 800537e:	2200      	movs	r2, #0
 8005380:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005382:	e039      	b.n	80053f8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005384:	78fa      	ldrb	r2, [r7, #3]
 8005386:	6879      	ldr	r1, [r7, #4]
 8005388:	4613      	mov	r3, r2
 800538a:	011b      	lsls	r3, r3, #4
 800538c:	1a9b      	subs	r3, r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	440b      	add	r3, r1
 8005392:	332a      	adds	r3, #42	@ 0x2a
 8005394:	2202      	movs	r2, #2
 8005396:	701a      	strb	r2, [r3, #0]
      break;
 8005398:	e02e      	b.n	80053f8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800539a:	78fa      	ldrb	r2, [r7, #3]
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	4613      	mov	r3, r2
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	1a9b      	subs	r3, r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	440b      	add	r3, r1
 80053a8:	333c      	adds	r3, #60	@ 0x3c
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10a      	bne.n	80053c6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80053b0:	78fa      	ldrb	r2, [r7, #3]
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	4613      	mov	r3, r2
 80053b6:	011b      	lsls	r3, r3, #4
 80053b8:	1a9b      	subs	r3, r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	440b      	add	r3, r1
 80053be:	332a      	adds	r3, #42	@ 0x2a
 80053c0:	2200      	movs	r2, #0
 80053c2:	701a      	strb	r2, [r3, #0]
      break;
 80053c4:	e018      	b.n	80053f8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80053c6:	78fa      	ldrb	r2, [r7, #3]
 80053c8:	6879      	ldr	r1, [r7, #4]
 80053ca:	4613      	mov	r3, r2
 80053cc:	011b      	lsls	r3, r3, #4
 80053ce:	1a9b      	subs	r3, r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	440b      	add	r3, r1
 80053d4:	332a      	adds	r3, #42	@ 0x2a
 80053d6:	2202      	movs	r2, #2
 80053d8:	701a      	strb	r2, [r3, #0]
      break;
 80053da:	e00d      	b.n	80053f8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80053dc:	78fa      	ldrb	r2, [r7, #3]
 80053de:	6879      	ldr	r1, [r7, #4]
 80053e0:	4613      	mov	r3, r2
 80053e2:	011b      	lsls	r3, r3, #4
 80053e4:	1a9b      	subs	r3, r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	440b      	add	r3, r1
 80053ea:	332a      	adds	r3, #42	@ 0x2a
 80053ec:	2200      	movs	r2, #0
 80053ee:	701a      	strb	r2, [r3, #0]
      break;
 80053f0:	e002      	b.n	80053f8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80053f2:	bf00      	nop
 80053f4:	e000      	b.n	80053f8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80053f6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80053f8:	78fa      	ldrb	r2, [r7, #3]
 80053fa:	6879      	ldr	r1, [r7, #4]
 80053fc:	4613      	mov	r3, r2
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	1a9b      	subs	r3, r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	440b      	add	r3, r1
 8005406:	332c      	adds	r3, #44	@ 0x2c
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800540c:	78fa      	ldrb	r2, [r7, #3]
 800540e:	8b39      	ldrh	r1, [r7, #24]
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	4613      	mov	r3, r2
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	1a9b      	subs	r3, r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4403      	add	r3, r0
 800541c:	3334      	adds	r3, #52	@ 0x34
 800541e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005420:	78fa      	ldrb	r2, [r7, #3]
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	4613      	mov	r3, r2
 8005426:	011b      	lsls	r3, r3, #4
 8005428:	1a9b      	subs	r3, r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	440b      	add	r3, r1
 800542e:	334c      	adds	r3, #76	@ 0x4c
 8005430:	2200      	movs	r2, #0
 8005432:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005434:	78fa      	ldrb	r2, [r7, #3]
 8005436:	6879      	ldr	r1, [r7, #4]
 8005438:	4613      	mov	r3, r2
 800543a:	011b      	lsls	r3, r3, #4
 800543c:	1a9b      	subs	r3, r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	440b      	add	r3, r1
 8005442:	3338      	adds	r3, #56	@ 0x38
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005448:	78fa      	ldrb	r2, [r7, #3]
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	4613      	mov	r3, r2
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	1a9b      	subs	r3, r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	440b      	add	r3, r1
 8005456:	3315      	adds	r3, #21
 8005458:	78fa      	ldrb	r2, [r7, #3]
 800545a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800545c:	78fa      	ldrb	r2, [r7, #3]
 800545e:	6879      	ldr	r1, [r7, #4]
 8005460:	4613      	mov	r3, r2
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	1a9b      	subs	r3, r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	440b      	add	r3, r1
 800546a:	334d      	adds	r3, #77	@ 0x4d
 800546c:	2200      	movs	r2, #0
 800546e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6818      	ldr	r0, [r3, #0]
 8005474:	78fa      	ldrb	r2, [r7, #3]
 8005476:	4613      	mov	r3, r2
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	1a9b      	subs	r3, r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	3310      	adds	r3, #16
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	4413      	add	r3, r2
 8005484:	1d19      	adds	r1, r3, #4
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	799b      	ldrb	r3, [r3, #6]
 800548a:	461a      	mov	r2, r3
 800548c:	f009 f8da 	bl	800e644 <USB_HC_StartXfer>
 8005490:	4603      	mov	r3, r0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop

0800549c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f008 fdd4 	bl	800e060 <USB_GetMode>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	f040 80fb 	bne.w	80056b6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f008 fd97 	bl	800dff8 <USB_ReadInterrupts>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 80f1 	beq.w	80056b4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f008 fd8e 	bl	800dff8 <USB_ReadInterrupts>
 80054dc:	4603      	mov	r3, r0
 80054de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054e6:	d104      	bne.n	80054f2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80054f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f008 fd7e 	bl	800dff8 <USB_ReadInterrupts>
 80054fc:	4603      	mov	r3, r0
 80054fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005502:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005506:	d104      	bne.n	8005512 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005510:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4618      	mov	r0, r3
 8005518:	f008 fd6e 	bl	800dff8 <USB_ReadInterrupts>
 800551c:	4603      	mov	r3, r0
 800551e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005522:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005526:	d104      	bne.n	8005532 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005530:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4618      	mov	r0, r3
 8005538:	f008 fd5e 	bl	800dff8 <USB_ReadInterrupts>
 800553c:	4603      	mov	r3, r0
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b02      	cmp	r3, #2
 8005544:	d103      	bne.n	800554e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2202      	movs	r2, #2
 800554c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4618      	mov	r0, r3
 8005554:	f008 fd50 	bl	800dff8 <USB_ReadInterrupts>
 8005558:	4603      	mov	r3, r0
 800555a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800555e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005562:	d120      	bne.n	80055a6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800556c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d113      	bne.n	80055a6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800557e:	2110      	movs	r1, #16
 8005580:	6938      	ldr	r0, [r7, #16]
 8005582:	f008 fc43 	bl	800de0c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8005586:	6938      	ldr	r0, [r7, #16]
 8005588:	f008 fc72 	bl	800de70 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	7a5b      	ldrb	r3, [r3, #9]
 8005590:	2b02      	cmp	r3, #2
 8005592:	d105      	bne.n	80055a0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2101      	movs	r1, #1
 800559a:	4618      	mov	r0, r3
 800559c:	f008 fe5e 	bl	800e25c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f00e fda5 	bl	80140f0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f008 fd24 	bl	800dff8 <USB_ReadInterrupts>
 80055b0:	4603      	mov	r3, r0
 80055b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055ba:	d102      	bne.n	80055c2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f001 fd4d 	bl	800705c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f008 fd16 	bl	800dff8 <USB_ReadInterrupts>
 80055cc:	4603      	mov	r3, r0
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b08      	cmp	r3, #8
 80055d4:	d106      	bne.n	80055e4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f00e fd6e 	bl	80140b8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2208      	movs	r2, #8
 80055e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4618      	mov	r0, r3
 80055ea:	f008 fd05 	bl	800dff8 <USB_ReadInterrupts>
 80055ee:	4603      	mov	r3, r0
 80055f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055f8:	d139      	bne.n	800566e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4618      	mov	r0, r3
 8005600:	f009 fa9a 	bl	800eb38 <USB_HC_ReadInterrupt>
 8005604:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005606:	2300      	movs	r3, #0
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	e025      	b.n	8005658 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	fa22 f303 	lsr.w	r3, r2, r3
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	d018      	beq.n	8005652 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4413      	add	r3, r2
 8005628:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005632:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005636:	d106      	bne.n	8005646 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	b2db      	uxtb	r3, r3
 800563c:	4619      	mov	r1, r3
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f905 	bl	800584e <HCD_HC_IN_IRQHandler>
 8005644:	e005      	b.n	8005652 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	b2db      	uxtb	r3, r3
 800564a:	4619      	mov	r1, r3
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 ff67 	bl	8006520 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	3301      	adds	r3, #1
 8005656:	617b      	str	r3, [r7, #20]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	795b      	ldrb	r3, [r3, #5]
 800565c:	461a      	mov	r2, r3
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	4293      	cmp	r3, r2
 8005662:	d3d3      	bcc.n	800560c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800566c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4618      	mov	r0, r3
 8005674:	f008 fcc0 	bl	800dff8 <USB_ReadInterrupts>
 8005678:	4603      	mov	r3, r0
 800567a:	f003 0310 	and.w	r3, r3, #16
 800567e:	2b10      	cmp	r3, #16
 8005680:	d101      	bne.n	8005686 <HAL_HCD_IRQHandler+0x1ea>
 8005682:	2301      	movs	r3, #1
 8005684:	e000      	b.n	8005688 <HAL_HCD_IRQHandler+0x1ec>
 8005686:	2300      	movs	r3, #0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d014      	beq.n	80056b6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699a      	ldr	r2, [r3, #24]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 0210 	bic.w	r2, r2, #16
 800569a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f001 fbfe 	bl	8006e9e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	699a      	ldr	r2, [r3, #24]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f042 0210 	orr.w	r2, r2, #16
 80056b0:	619a      	str	r2, [r3, #24]
 80056b2:	e000      	b.n	80056b6 <HAL_HCD_IRQHandler+0x21a>
      return;
 80056b4:	bf00      	nop
    }
  }
}
 80056b6:	3718      	adds	r7, #24
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d101      	bne.n	80056d2 <HAL_HCD_Start+0x16>
 80056ce:	2302      	movs	r3, #2
 80056d0:	e013      	b.n	80056fa <HAL_HCD_Start+0x3e>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2101      	movs	r1, #1
 80056e0:	4618      	mov	r0, r3
 80056e2:	f008 fe22 	bl	800e32a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f008 fb20 	bl	800dd30 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b082      	sub	sp, #8
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005710:	2b01      	cmp	r3, #1
 8005712:	d101      	bne.n	8005718 <HAL_HCD_Stop+0x16>
 8005714:	2302      	movs	r3, #2
 8005716:	e00d      	b.n	8005734 <HAL_HCD_Stop+0x32>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4618      	mov	r0, r3
 8005726:	f009 fb75 	bl	800ee14 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4618      	mov	r0, r3
 800574a:	f008 fdc4 	bl	800e2d6 <USB_ResetPort>
 800574e:	4603      	mov	r3, r0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	460b      	mov	r3, r1
 8005762:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005764:	78fa      	ldrb	r2, [r7, #3]
 8005766:	6879      	ldr	r1, [r7, #4]
 8005768:	4613      	mov	r3, r2
 800576a:	011b      	lsls	r3, r3, #4
 800576c:	1a9b      	subs	r3, r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	440b      	add	r3, r1
 8005772:	334c      	adds	r3, #76	@ 0x4c
 8005774:	781b      	ldrb	r3, [r3, #0]
}
 8005776:	4618      	mov	r0, r3
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005782:	b480      	push	{r7}
 8005784:	b083      	sub	sp, #12
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
 800578a:	460b      	mov	r3, r1
 800578c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800578e:	78fa      	ldrb	r2, [r7, #3]
 8005790:	6879      	ldr	r1, [r7, #4]
 8005792:	4613      	mov	r3, r2
 8005794:	011b      	lsls	r3, r3, #4
 8005796:	1a9b      	subs	r3, r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	440b      	add	r3, r1
 800579c:	3338      	adds	r3, #56	@ 0x38
 800579e:	681b      	ldr	r3, [r3, #0]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f008 fe06 	bl	800e3ca <USB_GetCurrentFrame>
 80057be:	4603      	mov	r3, r0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f008 fde1 	bl	800e39c <USB_GetHostSpeed>
 80057da:	4603      	mov	r3, r0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3708      	adds	r7, #8
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	460b      	mov	r3, r1
 80057ee:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80057f0:	78fa      	ldrb	r2, [r7, #3]
 80057f2:	6879      	ldr	r1, [r7, #4]
 80057f4:	4613      	mov	r3, r2
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	1a9b      	subs	r3, r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	440b      	add	r3, r1
 80057fe:	331a      	adds	r3, #26
 8005800:	2200      	movs	r2, #0
 8005802:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8005804:	78fa      	ldrb	r2, [r7, #3]
 8005806:	6879      	ldr	r1, [r7, #4]
 8005808:	4613      	mov	r3, r2
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	1a9b      	subs	r3, r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	440b      	add	r3, r1
 8005812:	331b      	adds	r3, #27
 8005814:	2200      	movs	r2, #0
 8005816:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8005818:	78fa      	ldrb	r2, [r7, #3]
 800581a:	6879      	ldr	r1, [r7, #4]
 800581c:	4613      	mov	r3, r2
 800581e:	011b      	lsls	r3, r3, #4
 8005820:	1a9b      	subs	r3, r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	440b      	add	r3, r1
 8005826:	3325      	adds	r3, #37	@ 0x25
 8005828:	2200      	movs	r2, #0
 800582a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800582c:	78fa      	ldrb	r2, [r7, #3]
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	4613      	mov	r3, r2
 8005832:	011b      	lsls	r3, r3, #4
 8005834:	1a9b      	subs	r3, r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	440b      	add	r3, r1
 800583a:	3324      	adds	r3, #36	@ 0x24
 800583c:	2200      	movs	r2, #0
 800583e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b086      	sub	sp, #24
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
 8005856:	460b      	mov	r3, r1
 8005858:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	78fa      	ldrb	r2, [r7, #3]
 800586a:	4611      	mov	r1, r2
 800586c:	4618      	mov	r0, r3
 800586e:	f008 fbd6 	bl	800e01e <USB_ReadChInterrupts>
 8005872:	4603      	mov	r3, r0
 8005874:	f003 0304 	and.w	r3, r3, #4
 8005878:	2b04      	cmp	r3, #4
 800587a:	d11a      	bne.n	80058b2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800587c:	78fb      	ldrb	r3, [r7, #3]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	4413      	add	r3, r2
 8005884:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005888:	461a      	mov	r2, r3
 800588a:	2304      	movs	r3, #4
 800588c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800588e:	78fa      	ldrb	r2, [r7, #3]
 8005890:	6879      	ldr	r1, [r7, #4]
 8005892:	4613      	mov	r3, r2
 8005894:	011b      	lsls	r3, r3, #4
 8005896:	1a9b      	subs	r3, r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	440b      	add	r3, r1
 800589c:	334d      	adds	r3, #77	@ 0x4d
 800589e:	2207      	movs	r2, #7
 80058a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	78fa      	ldrb	r2, [r7, #3]
 80058a8:	4611      	mov	r1, r2
 80058aa:	4618      	mov	r0, r3
 80058ac:	f009 f955 	bl	800eb5a <USB_HC_Halt>
 80058b0:	e09e      	b.n	80059f0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	78fa      	ldrb	r2, [r7, #3]
 80058b8:	4611      	mov	r1, r2
 80058ba:	4618      	mov	r0, r3
 80058bc:	f008 fbaf 	bl	800e01e <USB_ReadChInterrupts>
 80058c0:	4603      	mov	r3, r0
 80058c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058ca:	d11b      	bne.n	8005904 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80058cc:	78fb      	ldrb	r3, [r7, #3]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058d8:	461a      	mov	r2, r3
 80058da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80058de:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80058e0:	78fa      	ldrb	r2, [r7, #3]
 80058e2:	6879      	ldr	r1, [r7, #4]
 80058e4:	4613      	mov	r3, r2
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	1a9b      	subs	r3, r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	440b      	add	r3, r1
 80058ee:	334d      	adds	r3, #77	@ 0x4d
 80058f0:	2208      	movs	r2, #8
 80058f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	78fa      	ldrb	r2, [r7, #3]
 80058fa:	4611      	mov	r1, r2
 80058fc:	4618      	mov	r0, r3
 80058fe:	f009 f92c 	bl	800eb5a <USB_HC_Halt>
 8005902:	e075      	b.n	80059f0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	78fa      	ldrb	r2, [r7, #3]
 800590a:	4611      	mov	r1, r2
 800590c:	4618      	mov	r0, r3
 800590e:	f008 fb86 	bl	800e01e <USB_ReadChInterrupts>
 8005912:	4603      	mov	r3, r0
 8005914:	f003 0308 	and.w	r3, r3, #8
 8005918:	2b08      	cmp	r3, #8
 800591a:	d11a      	bne.n	8005952 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800591c:	78fb      	ldrb	r3, [r7, #3]
 800591e:	015a      	lsls	r2, r3, #5
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	4413      	add	r3, r2
 8005924:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005928:	461a      	mov	r2, r3
 800592a:	2308      	movs	r3, #8
 800592c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800592e:	78fa      	ldrb	r2, [r7, #3]
 8005930:	6879      	ldr	r1, [r7, #4]
 8005932:	4613      	mov	r3, r2
 8005934:	011b      	lsls	r3, r3, #4
 8005936:	1a9b      	subs	r3, r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	440b      	add	r3, r1
 800593c:	334d      	adds	r3, #77	@ 0x4d
 800593e:	2206      	movs	r2, #6
 8005940:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	78fa      	ldrb	r2, [r7, #3]
 8005948:	4611      	mov	r1, r2
 800594a:	4618      	mov	r0, r3
 800594c:	f009 f905 	bl	800eb5a <USB_HC_Halt>
 8005950:	e04e      	b.n	80059f0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	78fa      	ldrb	r2, [r7, #3]
 8005958:	4611      	mov	r1, r2
 800595a:	4618      	mov	r0, r3
 800595c:	f008 fb5f 	bl	800e01e <USB_ReadChInterrupts>
 8005960:	4603      	mov	r3, r0
 8005962:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005966:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800596a:	d11b      	bne.n	80059a4 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800596c:	78fb      	ldrb	r3, [r7, #3]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	4413      	add	r3, r2
 8005974:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005978:	461a      	mov	r2, r3
 800597a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800597e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005980:	78fa      	ldrb	r2, [r7, #3]
 8005982:	6879      	ldr	r1, [r7, #4]
 8005984:	4613      	mov	r3, r2
 8005986:	011b      	lsls	r3, r3, #4
 8005988:	1a9b      	subs	r3, r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	440b      	add	r3, r1
 800598e:	334d      	adds	r3, #77	@ 0x4d
 8005990:	2209      	movs	r2, #9
 8005992:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	78fa      	ldrb	r2, [r7, #3]
 800599a:	4611      	mov	r1, r2
 800599c:	4618      	mov	r0, r3
 800599e:	f009 f8dc 	bl	800eb5a <USB_HC_Halt>
 80059a2:	e025      	b.n	80059f0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	78fa      	ldrb	r2, [r7, #3]
 80059aa:	4611      	mov	r1, r2
 80059ac:	4618      	mov	r0, r3
 80059ae:	f008 fb36 	bl	800e01e <USB_ReadChInterrupts>
 80059b2:	4603      	mov	r3, r0
 80059b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059b8:	2b80      	cmp	r3, #128	@ 0x80
 80059ba:	d119      	bne.n	80059f0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80059bc:	78fb      	ldrb	r3, [r7, #3]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059c8:	461a      	mov	r2, r3
 80059ca:	2380      	movs	r3, #128	@ 0x80
 80059cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80059ce:	78fa      	ldrb	r2, [r7, #3]
 80059d0:	6879      	ldr	r1, [r7, #4]
 80059d2:	4613      	mov	r3, r2
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	1a9b      	subs	r3, r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	440b      	add	r3, r1
 80059dc:	334d      	adds	r3, #77	@ 0x4d
 80059de:	2207      	movs	r2, #7
 80059e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	78fa      	ldrb	r2, [r7, #3]
 80059e8:	4611      	mov	r1, r2
 80059ea:	4618      	mov	r0, r3
 80059ec:	f009 f8b5 	bl	800eb5a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	78fa      	ldrb	r2, [r7, #3]
 80059f6:	4611      	mov	r1, r2
 80059f8:	4618      	mov	r0, r3
 80059fa:	f008 fb10 	bl	800e01e <USB_ReadChInterrupts>
 80059fe:	4603      	mov	r3, r0
 8005a00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a08:	d112      	bne.n	8005a30 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	78fa      	ldrb	r2, [r7, #3]
 8005a10:	4611      	mov	r1, r2
 8005a12:	4618      	mov	r0, r3
 8005a14:	f009 f8a1 	bl	800eb5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005a18:	78fb      	ldrb	r3, [r7, #3]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a24:	461a      	mov	r2, r3
 8005a26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a2a:	6093      	str	r3, [r2, #8]
 8005a2c:	f000 bd75 	b.w	800651a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	78fa      	ldrb	r2, [r7, #3]
 8005a36:	4611      	mov	r1, r2
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f008 faf0 	bl	800e01e <USB_ReadChInterrupts>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	f040 8128 	bne.w	8005c9a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005a4a:	78fb      	ldrb	r3, [r7, #3]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a56:	461a      	mov	r2, r3
 8005a58:	2320      	movs	r3, #32
 8005a5a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005a5c:	78fa      	ldrb	r2, [r7, #3]
 8005a5e:	6879      	ldr	r1, [r7, #4]
 8005a60:	4613      	mov	r3, r2
 8005a62:	011b      	lsls	r3, r3, #4
 8005a64:	1a9b      	subs	r3, r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	440b      	add	r3, r1
 8005a6a:	331b      	adds	r3, #27
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d119      	bne.n	8005aa6 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005a72:	78fa      	ldrb	r2, [r7, #3]
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	4613      	mov	r3, r2
 8005a78:	011b      	lsls	r3, r3, #4
 8005a7a:	1a9b      	subs	r3, r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	440b      	add	r3, r1
 8005a80:	331b      	adds	r3, #27
 8005a82:	2200      	movs	r2, #0
 8005a84:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005a86:	78fb      	ldrb	r3, [r7, #3]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	78fa      	ldrb	r2, [r7, #3]
 8005a96:	0151      	lsls	r1, r2, #5
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	440a      	add	r2, r1
 8005a9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005aa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aa4:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	799b      	ldrb	r3, [r3, #6]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d01b      	beq.n	8005ae6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005aae:	78fa      	ldrb	r2, [r7, #3]
 8005ab0:	6879      	ldr	r1, [r7, #4]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	011b      	lsls	r3, r3, #4
 8005ab6:	1a9b      	subs	r3, r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	440b      	add	r3, r1
 8005abc:	3330      	adds	r3, #48	@ 0x30
 8005abe:	6819      	ldr	r1, [r3, #0]
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ad2:	78fa      	ldrb	r2, [r7, #3]
 8005ad4:	1ac9      	subs	r1, r1, r3
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	011b      	lsls	r3, r3, #4
 8005adc:	1a9b      	subs	r3, r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4403      	add	r3, r0
 8005ae2:	3338      	adds	r3, #56	@ 0x38
 8005ae4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8005ae6:	78fa      	ldrb	r2, [r7, #3]
 8005ae8:	6879      	ldr	r1, [r7, #4]
 8005aea:	4613      	mov	r3, r2
 8005aec:	011b      	lsls	r3, r3, #4
 8005aee:	1a9b      	subs	r3, r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	440b      	add	r3, r1
 8005af4:	334d      	adds	r3, #77	@ 0x4d
 8005af6:	2201      	movs	r2, #1
 8005af8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8005afa:	78fa      	ldrb	r2, [r7, #3]
 8005afc:	6879      	ldr	r1, [r7, #4]
 8005afe:	4613      	mov	r3, r2
 8005b00:	011b      	lsls	r3, r3, #4
 8005b02:	1a9b      	subs	r3, r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	440b      	add	r3, r1
 8005b08:	3344      	adds	r3, #68	@ 0x44
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005b0e:	78fb      	ldrb	r3, [r7, #3]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005b20:	78fa      	ldrb	r2, [r7, #3]
 8005b22:	6879      	ldr	r1, [r7, #4]
 8005b24:	4613      	mov	r3, r2
 8005b26:	011b      	lsls	r3, r3, #4
 8005b28:	1a9b      	subs	r3, r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	440b      	add	r3, r1
 8005b2e:	3326      	adds	r3, #38	@ 0x26
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00a      	beq.n	8005b4c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005b36:	78fa      	ldrb	r2, [r7, #3]
 8005b38:	6879      	ldr	r1, [r7, #4]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	011b      	lsls	r3, r3, #4
 8005b3e:	1a9b      	subs	r3, r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	440b      	add	r3, r1
 8005b44:	3326      	adds	r3, #38	@ 0x26
 8005b46:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d110      	bne.n	8005b6e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	78fa      	ldrb	r2, [r7, #3]
 8005b52:	4611      	mov	r1, r2
 8005b54:	4618      	mov	r0, r3
 8005b56:	f009 f800 	bl	800eb5a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005b5a:	78fb      	ldrb	r3, [r7, #3]
 8005b5c:	015a      	lsls	r2, r3, #5
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	4413      	add	r3, r2
 8005b62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b66:	461a      	mov	r2, r3
 8005b68:	2310      	movs	r3, #16
 8005b6a:	6093      	str	r3, [r2, #8]
 8005b6c:	e03d      	b.n	8005bea <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005b6e:	78fa      	ldrb	r2, [r7, #3]
 8005b70:	6879      	ldr	r1, [r7, #4]
 8005b72:	4613      	mov	r3, r2
 8005b74:	011b      	lsls	r3, r3, #4
 8005b76:	1a9b      	subs	r3, r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	440b      	add	r3, r1
 8005b7c:	3326      	adds	r3, #38	@ 0x26
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	2b03      	cmp	r3, #3
 8005b82:	d00a      	beq.n	8005b9a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8005b84:	78fa      	ldrb	r2, [r7, #3]
 8005b86:	6879      	ldr	r1, [r7, #4]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	011b      	lsls	r3, r3, #4
 8005b8c:	1a9b      	subs	r3, r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	440b      	add	r3, r1
 8005b92:	3326      	adds	r3, #38	@ 0x26
 8005b94:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d127      	bne.n	8005bea <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005b9a:	78fb      	ldrb	r3, [r7, #3]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	78fa      	ldrb	r2, [r7, #3]
 8005baa:	0151      	lsls	r1, r2, #5
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	440a      	add	r2, r1
 8005bb0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bb4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005bb8:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005bba:	78fa      	ldrb	r2, [r7, #3]
 8005bbc:	6879      	ldr	r1, [r7, #4]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	011b      	lsls	r3, r3, #4
 8005bc2:	1a9b      	subs	r3, r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	440b      	add	r3, r1
 8005bc8:	334c      	adds	r3, #76	@ 0x4c
 8005bca:	2201      	movs	r2, #1
 8005bcc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005bce:	78fa      	ldrb	r2, [r7, #3]
 8005bd0:	6879      	ldr	r1, [r7, #4]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	011b      	lsls	r3, r3, #4
 8005bd6:	1a9b      	subs	r3, r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	440b      	add	r3, r1
 8005bdc:	334c      	adds	r3, #76	@ 0x4c
 8005bde:	781a      	ldrb	r2, [r3, #0]
 8005be0:	78fb      	ldrb	r3, [r7, #3]
 8005be2:	4619      	mov	r1, r3
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f00e fa91 	bl	801410c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	799b      	ldrb	r3, [r3, #6]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d13b      	bne.n	8005c6a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8005bf2:	78fa      	ldrb	r2, [r7, #3]
 8005bf4:	6879      	ldr	r1, [r7, #4]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	011b      	lsls	r3, r3, #4
 8005bfa:	1a9b      	subs	r3, r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	440b      	add	r3, r1
 8005c00:	3338      	adds	r3, #56	@ 0x38
 8005c02:	6819      	ldr	r1, [r3, #0]
 8005c04:	78fa      	ldrb	r2, [r7, #3]
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	011b      	lsls	r3, r3, #4
 8005c0c:	1a9b      	subs	r3, r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4403      	add	r3, r0
 8005c12:	3328      	adds	r3, #40	@ 0x28
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	440b      	add	r3, r1
 8005c18:	1e59      	subs	r1, r3, #1
 8005c1a:	78fa      	ldrb	r2, [r7, #3]
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	011b      	lsls	r3, r3, #4
 8005c22:	1a9b      	subs	r3, r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4403      	add	r3, r0
 8005c28:	3328      	adds	r3, #40	@ 0x28
 8005c2a:	881b      	ldrh	r3, [r3, #0]
 8005c2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 8470 	beq.w	800651a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8005c3a:	78fa      	ldrb	r2, [r7, #3]
 8005c3c:	6879      	ldr	r1, [r7, #4]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	1a9b      	subs	r3, r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	440b      	add	r3, r1
 8005c48:	333c      	adds	r3, #60	@ 0x3c
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	78fa      	ldrb	r2, [r7, #3]
 8005c4e:	f083 0301 	eor.w	r3, r3, #1
 8005c52:	b2d8      	uxtb	r0, r3
 8005c54:	6879      	ldr	r1, [r7, #4]
 8005c56:	4613      	mov	r3, r2
 8005c58:	011b      	lsls	r3, r3, #4
 8005c5a:	1a9b      	subs	r3, r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	440b      	add	r3, r1
 8005c60:	333c      	adds	r3, #60	@ 0x3c
 8005c62:	4602      	mov	r2, r0
 8005c64:	701a      	strb	r2, [r3, #0]
 8005c66:	f000 bc58 	b.w	800651a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8005c6a:	78fa      	ldrb	r2, [r7, #3]
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	1a9b      	subs	r3, r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	440b      	add	r3, r1
 8005c78:	333c      	adds	r3, #60	@ 0x3c
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	78fa      	ldrb	r2, [r7, #3]
 8005c7e:	f083 0301 	eor.w	r3, r3, #1
 8005c82:	b2d8      	uxtb	r0, r3
 8005c84:	6879      	ldr	r1, [r7, #4]
 8005c86:	4613      	mov	r3, r2
 8005c88:	011b      	lsls	r3, r3, #4
 8005c8a:	1a9b      	subs	r3, r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	440b      	add	r3, r1
 8005c90:	333c      	adds	r3, #60	@ 0x3c
 8005c92:	4602      	mov	r2, r0
 8005c94:	701a      	strb	r2, [r3, #0]
 8005c96:	f000 bc40 	b.w	800651a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	78fa      	ldrb	r2, [r7, #3]
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f008 f9bb 	bl	800e01e <USB_ReadChInterrupts>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	f003 0320 	and.w	r3, r3, #32
 8005cae:	2b20      	cmp	r3, #32
 8005cb0:	d131      	bne.n	8005d16 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005cb2:	78fb      	ldrb	r3, [r7, #3]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	2320      	movs	r3, #32
 8005cc2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8005cc4:	78fa      	ldrb	r2, [r7, #3]
 8005cc6:	6879      	ldr	r1, [r7, #4]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	011b      	lsls	r3, r3, #4
 8005ccc:	1a9b      	subs	r3, r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	440b      	add	r3, r1
 8005cd2:	331a      	adds	r3, #26
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	f040 841f 	bne.w	800651a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8005cdc:	78fa      	ldrb	r2, [r7, #3]
 8005cde:	6879      	ldr	r1, [r7, #4]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	011b      	lsls	r3, r3, #4
 8005ce4:	1a9b      	subs	r3, r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	440b      	add	r3, r1
 8005cea:	331b      	adds	r3, #27
 8005cec:	2201      	movs	r2, #1
 8005cee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005cf0:	78fa      	ldrb	r2, [r7, #3]
 8005cf2:	6879      	ldr	r1, [r7, #4]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	1a9b      	subs	r3, r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	440b      	add	r3, r1
 8005cfe:	334d      	adds	r3, #77	@ 0x4d
 8005d00:	2203      	movs	r2, #3
 8005d02:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	78fa      	ldrb	r2, [r7, #3]
 8005d0a:	4611      	mov	r1, r2
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f008 ff24 	bl	800eb5a <USB_HC_Halt>
 8005d12:	f000 bc02 	b.w	800651a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	78fa      	ldrb	r2, [r7, #3]
 8005d1c:	4611      	mov	r1, r2
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f008 f97d 	bl	800e01e <USB_ReadChInterrupts>
 8005d24:	4603      	mov	r3, r0
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	f040 8305 	bne.w	800633a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005d30:	78fb      	ldrb	r3, [r7, #3]
 8005d32:	015a      	lsls	r2, r3, #5
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	2302      	movs	r3, #2
 8005d40:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005d42:	78fa      	ldrb	r2, [r7, #3]
 8005d44:	6879      	ldr	r1, [r7, #4]
 8005d46:	4613      	mov	r3, r2
 8005d48:	011b      	lsls	r3, r3, #4
 8005d4a:	1a9b      	subs	r3, r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	440b      	add	r3, r1
 8005d50:	334d      	adds	r3, #77	@ 0x4d
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d114      	bne.n	8005d82 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005d58:	78fa      	ldrb	r2, [r7, #3]
 8005d5a:	6879      	ldr	r1, [r7, #4]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	1a9b      	subs	r3, r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	440b      	add	r3, r1
 8005d66:	334d      	adds	r3, #77	@ 0x4d
 8005d68:	2202      	movs	r2, #2
 8005d6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005d6c:	78fa      	ldrb	r2, [r7, #3]
 8005d6e:	6879      	ldr	r1, [r7, #4]
 8005d70:	4613      	mov	r3, r2
 8005d72:	011b      	lsls	r3, r3, #4
 8005d74:	1a9b      	subs	r3, r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	440b      	add	r3, r1
 8005d7a:	334c      	adds	r3, #76	@ 0x4c
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	701a      	strb	r2, [r3, #0]
 8005d80:	e2cc      	b.n	800631c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005d82:	78fa      	ldrb	r2, [r7, #3]
 8005d84:	6879      	ldr	r1, [r7, #4]
 8005d86:	4613      	mov	r3, r2
 8005d88:	011b      	lsls	r3, r3, #4
 8005d8a:	1a9b      	subs	r3, r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	440b      	add	r3, r1
 8005d90:	334d      	adds	r3, #77	@ 0x4d
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b06      	cmp	r3, #6
 8005d96:	d114      	bne.n	8005dc2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005d98:	78fa      	ldrb	r2, [r7, #3]
 8005d9a:	6879      	ldr	r1, [r7, #4]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	011b      	lsls	r3, r3, #4
 8005da0:	1a9b      	subs	r3, r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	440b      	add	r3, r1
 8005da6:	334d      	adds	r3, #77	@ 0x4d
 8005da8:	2202      	movs	r2, #2
 8005daa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8005dac:	78fa      	ldrb	r2, [r7, #3]
 8005dae:	6879      	ldr	r1, [r7, #4]
 8005db0:	4613      	mov	r3, r2
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	1a9b      	subs	r3, r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	440b      	add	r3, r1
 8005dba:	334c      	adds	r3, #76	@ 0x4c
 8005dbc:	2205      	movs	r2, #5
 8005dbe:	701a      	strb	r2, [r3, #0]
 8005dc0:	e2ac      	b.n	800631c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005dc2:	78fa      	ldrb	r2, [r7, #3]
 8005dc4:	6879      	ldr	r1, [r7, #4]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	011b      	lsls	r3, r3, #4
 8005dca:	1a9b      	subs	r3, r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	440b      	add	r3, r1
 8005dd0:	334d      	adds	r3, #77	@ 0x4d
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b07      	cmp	r3, #7
 8005dd6:	d00b      	beq.n	8005df0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005dd8:	78fa      	ldrb	r2, [r7, #3]
 8005dda:	6879      	ldr	r1, [r7, #4]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	011b      	lsls	r3, r3, #4
 8005de0:	1a9b      	subs	r3, r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	440b      	add	r3, r1
 8005de6:	334d      	adds	r3, #77	@ 0x4d
 8005de8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005dea:	2b09      	cmp	r3, #9
 8005dec:	f040 80a6 	bne.w	8005f3c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005df0:	78fa      	ldrb	r2, [r7, #3]
 8005df2:	6879      	ldr	r1, [r7, #4]
 8005df4:	4613      	mov	r3, r2
 8005df6:	011b      	lsls	r3, r3, #4
 8005df8:	1a9b      	subs	r3, r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	440b      	add	r3, r1
 8005dfe:	334d      	adds	r3, #77	@ 0x4d
 8005e00:	2202      	movs	r2, #2
 8005e02:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005e04:	78fa      	ldrb	r2, [r7, #3]
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	011b      	lsls	r3, r3, #4
 8005e0c:	1a9b      	subs	r3, r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	440b      	add	r3, r1
 8005e12:	3344      	adds	r3, #68	@ 0x44
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	1c59      	adds	r1, r3, #1
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	011b      	lsls	r3, r3, #4
 8005e1e:	1a9b      	subs	r3, r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4403      	add	r3, r0
 8005e24:	3344      	adds	r3, #68	@ 0x44
 8005e26:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005e28:	78fa      	ldrb	r2, [r7, #3]
 8005e2a:	6879      	ldr	r1, [r7, #4]
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	011b      	lsls	r3, r3, #4
 8005e30:	1a9b      	subs	r3, r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	440b      	add	r3, r1
 8005e36:	3344      	adds	r3, #68	@ 0x44
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d943      	bls.n	8005ec6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005e3e:	78fa      	ldrb	r2, [r7, #3]
 8005e40:	6879      	ldr	r1, [r7, #4]
 8005e42:	4613      	mov	r3, r2
 8005e44:	011b      	lsls	r3, r3, #4
 8005e46:	1a9b      	subs	r3, r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	440b      	add	r3, r1
 8005e4c:	3344      	adds	r3, #68	@ 0x44
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8005e52:	78fa      	ldrb	r2, [r7, #3]
 8005e54:	6879      	ldr	r1, [r7, #4]
 8005e56:	4613      	mov	r3, r2
 8005e58:	011b      	lsls	r3, r3, #4
 8005e5a:	1a9b      	subs	r3, r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	440b      	add	r3, r1
 8005e60:	331a      	adds	r3, #26
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d123      	bne.n	8005eb0 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8005e68:	78fa      	ldrb	r2, [r7, #3]
 8005e6a:	6879      	ldr	r1, [r7, #4]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	011b      	lsls	r3, r3, #4
 8005e70:	1a9b      	subs	r3, r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	440b      	add	r3, r1
 8005e76:	331b      	adds	r3, #27
 8005e78:	2200      	movs	r2, #0
 8005e7a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8005e7c:	78fa      	ldrb	r2, [r7, #3]
 8005e7e:	6879      	ldr	r1, [r7, #4]
 8005e80:	4613      	mov	r3, r2
 8005e82:	011b      	lsls	r3, r3, #4
 8005e84:	1a9b      	subs	r3, r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	440b      	add	r3, r1
 8005e8a:	331c      	adds	r3, #28
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005e90:	78fb      	ldrb	r3, [r7, #3]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	78fa      	ldrb	r2, [r7, #3]
 8005ea0:	0151      	lsls	r1, r2, #5
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	440a      	add	r2, r1
 8005ea6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005eaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eae:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005eb0:	78fa      	ldrb	r2, [r7, #3]
 8005eb2:	6879      	ldr	r1, [r7, #4]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	011b      	lsls	r3, r3, #4
 8005eb8:	1a9b      	subs	r3, r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	440b      	add	r3, r1
 8005ebe:	334c      	adds	r3, #76	@ 0x4c
 8005ec0:	2204      	movs	r2, #4
 8005ec2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005ec4:	e229      	b.n	800631a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005ec6:	78fa      	ldrb	r2, [r7, #3]
 8005ec8:	6879      	ldr	r1, [r7, #4]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	011b      	lsls	r3, r3, #4
 8005ece:	1a9b      	subs	r3, r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	440b      	add	r3, r1
 8005ed4:	334c      	adds	r3, #76	@ 0x4c
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005eda:	78fa      	ldrb	r2, [r7, #3]
 8005edc:	6879      	ldr	r1, [r7, #4]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	1a9b      	subs	r3, r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	440b      	add	r3, r1
 8005ee8:	3326      	adds	r3, #38	@ 0x26
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00b      	beq.n	8005f08 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005ef0:	78fa      	ldrb	r2, [r7, #3]
 8005ef2:	6879      	ldr	r1, [r7, #4]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	011b      	lsls	r3, r3, #4
 8005ef8:	1a9b      	subs	r3, r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	440b      	add	r3, r1
 8005efe:	3326      	adds	r3, #38	@ 0x26
 8005f00:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	f040 8209 	bne.w	800631a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005f08:	78fb      	ldrb	r3, [r7, #3]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005f1e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f26:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005f28:	78fb      	ldrb	r3, [r7, #3]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f34:	461a      	mov	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005f3a:	e1ee      	b.n	800631a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005f3c:	78fa      	ldrb	r2, [r7, #3]
 8005f3e:	6879      	ldr	r1, [r7, #4]
 8005f40:	4613      	mov	r3, r2
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	1a9b      	subs	r3, r3, r2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	440b      	add	r3, r1
 8005f4a:	334d      	adds	r3, #77	@ 0x4d
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	2b05      	cmp	r3, #5
 8005f50:	f040 80c8 	bne.w	80060e4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005f54:	78fa      	ldrb	r2, [r7, #3]
 8005f56:	6879      	ldr	r1, [r7, #4]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	011b      	lsls	r3, r3, #4
 8005f5c:	1a9b      	subs	r3, r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	440b      	add	r3, r1
 8005f62:	334d      	adds	r3, #77	@ 0x4d
 8005f64:	2202      	movs	r2, #2
 8005f66:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005f68:	78fa      	ldrb	r2, [r7, #3]
 8005f6a:	6879      	ldr	r1, [r7, #4]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	1a9b      	subs	r3, r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	440b      	add	r3, r1
 8005f76:	331b      	adds	r3, #27
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	f040 81ce 	bne.w	800631c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005f80:	78fa      	ldrb	r2, [r7, #3]
 8005f82:	6879      	ldr	r1, [r7, #4]
 8005f84:	4613      	mov	r3, r2
 8005f86:	011b      	lsls	r3, r3, #4
 8005f88:	1a9b      	subs	r3, r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	440b      	add	r3, r1
 8005f8e:	3326      	adds	r3, #38	@ 0x26
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	2b03      	cmp	r3, #3
 8005f94:	d16b      	bne.n	800606e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8005f96:	78fa      	ldrb	r2, [r7, #3]
 8005f98:	6879      	ldr	r1, [r7, #4]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	011b      	lsls	r3, r3, #4
 8005f9e:	1a9b      	subs	r3, r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	440b      	add	r3, r1
 8005fa4:	3348      	adds	r3, #72	@ 0x48
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	1c59      	adds	r1, r3, #1
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	4613      	mov	r3, r2
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	1a9b      	subs	r3, r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4403      	add	r3, r0
 8005fb6:	3348      	adds	r3, #72	@ 0x48
 8005fb8:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8005fba:	78fa      	ldrb	r2, [r7, #3]
 8005fbc:	6879      	ldr	r1, [r7, #4]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	011b      	lsls	r3, r3, #4
 8005fc2:	1a9b      	subs	r3, r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	440b      	add	r3, r1
 8005fc8:	3348      	adds	r3, #72	@ 0x48
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d943      	bls.n	8006058 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8005fd0:	78fa      	ldrb	r2, [r7, #3]
 8005fd2:	6879      	ldr	r1, [r7, #4]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	011b      	lsls	r3, r3, #4
 8005fd8:	1a9b      	subs	r3, r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	440b      	add	r3, r1
 8005fde:	3348      	adds	r3, #72	@ 0x48
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8005fe4:	78fa      	ldrb	r2, [r7, #3]
 8005fe6:	6879      	ldr	r1, [r7, #4]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	011b      	lsls	r3, r3, #4
 8005fec:	1a9b      	subs	r3, r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	440b      	add	r3, r1
 8005ff2:	331b      	adds	r3, #27
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8005ff8:	78fa      	ldrb	r2, [r7, #3]
 8005ffa:	6879      	ldr	r1, [r7, #4]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	1a9b      	subs	r3, r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	440b      	add	r3, r1
 8006006:	3344      	adds	r3, #68	@ 0x44
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b02      	cmp	r3, #2
 800600c:	d809      	bhi.n	8006022 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800600e:	78fa      	ldrb	r2, [r7, #3]
 8006010:	6879      	ldr	r1, [r7, #4]
 8006012:	4613      	mov	r3, r2
 8006014:	011b      	lsls	r3, r3, #4
 8006016:	1a9b      	subs	r3, r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	440b      	add	r3, r1
 800601c:	331c      	adds	r3, #28
 800601e:	2201      	movs	r2, #1
 8006020:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006022:	78fb      	ldrb	r3, [r7, #3]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	4413      	add	r3, r2
 800602a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	78fa      	ldrb	r2, [r7, #3]
 8006032:	0151      	lsls	r1, r2, #5
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	440a      	add	r2, r1
 8006038:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800603c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006040:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8006042:	78fa      	ldrb	r2, [r7, #3]
 8006044:	6879      	ldr	r1, [r7, #4]
 8006046:	4613      	mov	r3, r2
 8006048:	011b      	lsls	r3, r3, #4
 800604a:	1a9b      	subs	r3, r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	440b      	add	r3, r1
 8006050:	334c      	adds	r3, #76	@ 0x4c
 8006052:	2204      	movs	r2, #4
 8006054:	701a      	strb	r2, [r3, #0]
 8006056:	e014      	b.n	8006082 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006058:	78fa      	ldrb	r2, [r7, #3]
 800605a:	6879      	ldr	r1, [r7, #4]
 800605c:	4613      	mov	r3, r2
 800605e:	011b      	lsls	r3, r3, #4
 8006060:	1a9b      	subs	r3, r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	440b      	add	r3, r1
 8006066:	334c      	adds	r3, #76	@ 0x4c
 8006068:	2202      	movs	r2, #2
 800606a:	701a      	strb	r2, [r3, #0]
 800606c:	e009      	b.n	8006082 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800606e:	78fa      	ldrb	r2, [r7, #3]
 8006070:	6879      	ldr	r1, [r7, #4]
 8006072:	4613      	mov	r3, r2
 8006074:	011b      	lsls	r3, r3, #4
 8006076:	1a9b      	subs	r3, r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	440b      	add	r3, r1
 800607c:	334c      	adds	r3, #76	@ 0x4c
 800607e:	2202      	movs	r2, #2
 8006080:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006082:	78fa      	ldrb	r2, [r7, #3]
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	4613      	mov	r3, r2
 8006088:	011b      	lsls	r3, r3, #4
 800608a:	1a9b      	subs	r3, r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	440b      	add	r3, r1
 8006090:	3326      	adds	r3, #38	@ 0x26
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00b      	beq.n	80060b0 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006098:	78fa      	ldrb	r2, [r7, #3]
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	4613      	mov	r3, r2
 800609e:	011b      	lsls	r3, r3, #4
 80060a0:	1a9b      	subs	r3, r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	440b      	add	r3, r1
 80060a6:	3326      	adds	r3, #38	@ 0x26
 80060a8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	f040 8136 	bne.w	800631c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80060b0:	78fb      	ldrb	r3, [r7, #3]
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80060c6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060ce:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80060d0:	78fb      	ldrb	r3, [r7, #3]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060dc:	461a      	mov	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6013      	str	r3, [r2, #0]
 80060e2:	e11b      	b.n	800631c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80060e4:	78fa      	ldrb	r2, [r7, #3]
 80060e6:	6879      	ldr	r1, [r7, #4]
 80060e8:	4613      	mov	r3, r2
 80060ea:	011b      	lsls	r3, r3, #4
 80060ec:	1a9b      	subs	r3, r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	440b      	add	r3, r1
 80060f2:	334d      	adds	r3, #77	@ 0x4d
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	2b03      	cmp	r3, #3
 80060f8:	f040 8081 	bne.w	80061fe <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80060fc:	78fa      	ldrb	r2, [r7, #3]
 80060fe:	6879      	ldr	r1, [r7, #4]
 8006100:	4613      	mov	r3, r2
 8006102:	011b      	lsls	r3, r3, #4
 8006104:	1a9b      	subs	r3, r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	440b      	add	r3, r1
 800610a:	334d      	adds	r3, #77	@ 0x4d
 800610c:	2202      	movs	r2, #2
 800610e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006110:	78fa      	ldrb	r2, [r7, #3]
 8006112:	6879      	ldr	r1, [r7, #4]
 8006114:	4613      	mov	r3, r2
 8006116:	011b      	lsls	r3, r3, #4
 8006118:	1a9b      	subs	r3, r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	440b      	add	r3, r1
 800611e:	331b      	adds	r3, #27
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	2b01      	cmp	r3, #1
 8006124:	f040 80fa 	bne.w	800631c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006128:	78fa      	ldrb	r2, [r7, #3]
 800612a:	6879      	ldr	r1, [r7, #4]
 800612c:	4613      	mov	r3, r2
 800612e:	011b      	lsls	r3, r3, #4
 8006130:	1a9b      	subs	r3, r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	440b      	add	r3, r1
 8006136:	334c      	adds	r3, #76	@ 0x4c
 8006138:	2202      	movs	r2, #2
 800613a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800613c:	78fb      	ldrb	r3, [r7, #3]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	4413      	add	r3, r2
 8006144:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	78fa      	ldrb	r2, [r7, #3]
 800614c:	0151      	lsls	r1, r2, #5
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	440a      	add	r2, r1
 8006152:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006156:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800615a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800615c:	78fb      	ldrb	r3, [r7, #3]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	4413      	add	r3, r2
 8006164:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	78fa      	ldrb	r2, [r7, #3]
 800616c:	0151      	lsls	r1, r2, #5
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	440a      	add	r2, r1
 8006172:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800617a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800617c:	78fb      	ldrb	r3, [r7, #3]
 800617e:	015a      	lsls	r2, r3, #5
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	4413      	add	r3, r2
 8006184:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	78fa      	ldrb	r2, [r7, #3]
 800618c:	0151      	lsls	r1, r2, #5
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	440a      	add	r2, r1
 8006192:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006196:	f023 0320 	bic.w	r3, r3, #32
 800619a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800619c:	78fa      	ldrb	r2, [r7, #3]
 800619e:	6879      	ldr	r1, [r7, #4]
 80061a0:	4613      	mov	r3, r2
 80061a2:	011b      	lsls	r3, r3, #4
 80061a4:	1a9b      	subs	r3, r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	440b      	add	r3, r1
 80061aa:	3326      	adds	r3, #38	@ 0x26
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00b      	beq.n	80061ca <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80061b2:	78fa      	ldrb	r2, [r7, #3]
 80061b4:	6879      	ldr	r1, [r7, #4]
 80061b6:	4613      	mov	r3, r2
 80061b8:	011b      	lsls	r3, r3, #4
 80061ba:	1a9b      	subs	r3, r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	440b      	add	r3, r1
 80061c0:	3326      	adds	r3, #38	@ 0x26
 80061c2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	f040 80a9 	bne.w	800631c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80061ca:	78fb      	ldrb	r3, [r7, #3]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80061e0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061e8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80061ea:	78fb      	ldrb	r3, [r7, #3]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061f6:	461a      	mov	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6013      	str	r3, [r2, #0]
 80061fc:	e08e      	b.n	800631c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80061fe:	78fa      	ldrb	r2, [r7, #3]
 8006200:	6879      	ldr	r1, [r7, #4]
 8006202:	4613      	mov	r3, r2
 8006204:	011b      	lsls	r3, r3, #4
 8006206:	1a9b      	subs	r3, r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	440b      	add	r3, r1
 800620c:	334d      	adds	r3, #77	@ 0x4d
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	2b04      	cmp	r3, #4
 8006212:	d143      	bne.n	800629c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006214:	78fa      	ldrb	r2, [r7, #3]
 8006216:	6879      	ldr	r1, [r7, #4]
 8006218:	4613      	mov	r3, r2
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	1a9b      	subs	r3, r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	440b      	add	r3, r1
 8006222:	334d      	adds	r3, #77	@ 0x4d
 8006224:	2202      	movs	r2, #2
 8006226:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006228:	78fa      	ldrb	r2, [r7, #3]
 800622a:	6879      	ldr	r1, [r7, #4]
 800622c:	4613      	mov	r3, r2
 800622e:	011b      	lsls	r3, r3, #4
 8006230:	1a9b      	subs	r3, r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	440b      	add	r3, r1
 8006236:	334c      	adds	r3, #76	@ 0x4c
 8006238:	2202      	movs	r2, #2
 800623a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800623c:	78fa      	ldrb	r2, [r7, #3]
 800623e:	6879      	ldr	r1, [r7, #4]
 8006240:	4613      	mov	r3, r2
 8006242:	011b      	lsls	r3, r3, #4
 8006244:	1a9b      	subs	r3, r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	440b      	add	r3, r1
 800624a:	3326      	adds	r3, #38	@ 0x26
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00a      	beq.n	8006268 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006252:	78fa      	ldrb	r2, [r7, #3]
 8006254:	6879      	ldr	r1, [r7, #4]
 8006256:	4613      	mov	r3, r2
 8006258:	011b      	lsls	r3, r3, #4
 800625a:	1a9b      	subs	r3, r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	440b      	add	r3, r1
 8006260:	3326      	adds	r3, #38	@ 0x26
 8006262:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006264:	2b02      	cmp	r3, #2
 8006266:	d159      	bne.n	800631c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006268:	78fb      	ldrb	r3, [r7, #3]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	4413      	add	r3, r2
 8006270:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800627e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006286:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006288:	78fb      	ldrb	r3, [r7, #3]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	4413      	add	r3, r2
 8006290:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006294:	461a      	mov	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6013      	str	r3, [r2, #0]
 800629a:	e03f      	b.n	800631c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800629c:	78fa      	ldrb	r2, [r7, #3]
 800629e:	6879      	ldr	r1, [r7, #4]
 80062a0:	4613      	mov	r3, r2
 80062a2:	011b      	lsls	r3, r3, #4
 80062a4:	1a9b      	subs	r3, r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	440b      	add	r3, r1
 80062aa:	334d      	adds	r3, #77	@ 0x4d
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	2b08      	cmp	r3, #8
 80062b0:	d126      	bne.n	8006300 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80062b2:	78fa      	ldrb	r2, [r7, #3]
 80062b4:	6879      	ldr	r1, [r7, #4]
 80062b6:	4613      	mov	r3, r2
 80062b8:	011b      	lsls	r3, r3, #4
 80062ba:	1a9b      	subs	r3, r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	440b      	add	r3, r1
 80062c0:	334d      	adds	r3, #77	@ 0x4d
 80062c2:	2202      	movs	r2, #2
 80062c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80062c6:	78fa      	ldrb	r2, [r7, #3]
 80062c8:	6879      	ldr	r1, [r7, #4]
 80062ca:	4613      	mov	r3, r2
 80062cc:	011b      	lsls	r3, r3, #4
 80062ce:	1a9b      	subs	r3, r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	440b      	add	r3, r1
 80062d4:	3344      	adds	r3, #68	@ 0x44
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	1c59      	adds	r1, r3, #1
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	4613      	mov	r3, r2
 80062de:	011b      	lsls	r3, r3, #4
 80062e0:	1a9b      	subs	r3, r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4403      	add	r3, r0
 80062e6:	3344      	adds	r3, #68	@ 0x44
 80062e8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80062ea:	78fa      	ldrb	r2, [r7, #3]
 80062ec:	6879      	ldr	r1, [r7, #4]
 80062ee:	4613      	mov	r3, r2
 80062f0:	011b      	lsls	r3, r3, #4
 80062f2:	1a9b      	subs	r3, r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	440b      	add	r3, r1
 80062f8:	334c      	adds	r3, #76	@ 0x4c
 80062fa:	2204      	movs	r2, #4
 80062fc:	701a      	strb	r2, [r3, #0]
 80062fe:	e00d      	b.n	800631c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8006300:	78fa      	ldrb	r2, [r7, #3]
 8006302:	6879      	ldr	r1, [r7, #4]
 8006304:	4613      	mov	r3, r2
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	1a9b      	subs	r3, r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	440b      	add	r3, r1
 800630e:	334d      	adds	r3, #77	@ 0x4d
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	2b02      	cmp	r3, #2
 8006314:	f000 8100 	beq.w	8006518 <HCD_HC_IN_IRQHandler+0xcca>
 8006318:	e000      	b.n	800631c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800631a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800631c:	78fa      	ldrb	r2, [r7, #3]
 800631e:	6879      	ldr	r1, [r7, #4]
 8006320:	4613      	mov	r3, r2
 8006322:	011b      	lsls	r3, r3, #4
 8006324:	1a9b      	subs	r3, r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	440b      	add	r3, r1
 800632a:	334c      	adds	r3, #76	@ 0x4c
 800632c:	781a      	ldrb	r2, [r3, #0]
 800632e:	78fb      	ldrb	r3, [r7, #3]
 8006330:	4619      	mov	r1, r3
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f00d feea 	bl	801410c <HAL_HCD_HC_NotifyURBChange_Callback>
 8006338:	e0ef      	b.n	800651a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	78fa      	ldrb	r2, [r7, #3]
 8006340:	4611      	mov	r1, r2
 8006342:	4618      	mov	r0, r3
 8006344:	f007 fe6b 	bl	800e01e <USB_ReadChInterrupts>
 8006348:	4603      	mov	r3, r0
 800634a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800634e:	2b40      	cmp	r3, #64	@ 0x40
 8006350:	d12f      	bne.n	80063b2 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006352:	78fb      	ldrb	r3, [r7, #3]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	4413      	add	r3, r2
 800635a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800635e:	461a      	mov	r2, r3
 8006360:	2340      	movs	r3, #64	@ 0x40
 8006362:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8006364:	78fa      	ldrb	r2, [r7, #3]
 8006366:	6879      	ldr	r1, [r7, #4]
 8006368:	4613      	mov	r3, r2
 800636a:	011b      	lsls	r3, r3, #4
 800636c:	1a9b      	subs	r3, r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	440b      	add	r3, r1
 8006372:	334d      	adds	r3, #77	@ 0x4d
 8006374:	2205      	movs	r2, #5
 8006376:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8006378:	78fa      	ldrb	r2, [r7, #3]
 800637a:	6879      	ldr	r1, [r7, #4]
 800637c:	4613      	mov	r3, r2
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	1a9b      	subs	r3, r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	440b      	add	r3, r1
 8006386:	331a      	adds	r3, #26
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d109      	bne.n	80063a2 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800638e:	78fa      	ldrb	r2, [r7, #3]
 8006390:	6879      	ldr	r1, [r7, #4]
 8006392:	4613      	mov	r3, r2
 8006394:	011b      	lsls	r3, r3, #4
 8006396:	1a9b      	subs	r3, r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	440b      	add	r3, r1
 800639c:	3344      	adds	r3, #68	@ 0x44
 800639e:	2200      	movs	r2, #0
 80063a0:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	78fa      	ldrb	r2, [r7, #3]
 80063a8:	4611      	mov	r1, r2
 80063aa:	4618      	mov	r0, r3
 80063ac:	f008 fbd5 	bl	800eb5a <USB_HC_Halt>
 80063b0:	e0b3      	b.n	800651a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	78fa      	ldrb	r2, [r7, #3]
 80063b8:	4611      	mov	r1, r2
 80063ba:	4618      	mov	r0, r3
 80063bc:	f007 fe2f 	bl	800e01e <USB_ReadChInterrupts>
 80063c0:	4603      	mov	r3, r0
 80063c2:	f003 0310 	and.w	r3, r3, #16
 80063c6:	2b10      	cmp	r3, #16
 80063c8:	f040 80a7 	bne.w	800651a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80063cc:	78fa      	ldrb	r2, [r7, #3]
 80063ce:	6879      	ldr	r1, [r7, #4]
 80063d0:	4613      	mov	r3, r2
 80063d2:	011b      	lsls	r3, r3, #4
 80063d4:	1a9b      	subs	r3, r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	440b      	add	r3, r1
 80063da:	3326      	adds	r3, #38	@ 0x26
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	2b03      	cmp	r3, #3
 80063e0:	d11b      	bne.n	800641a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80063e2:	78fa      	ldrb	r2, [r7, #3]
 80063e4:	6879      	ldr	r1, [r7, #4]
 80063e6:	4613      	mov	r3, r2
 80063e8:	011b      	lsls	r3, r3, #4
 80063ea:	1a9b      	subs	r3, r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	440b      	add	r3, r1
 80063f0:	3344      	adds	r3, #68	@ 0x44
 80063f2:	2200      	movs	r2, #0
 80063f4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80063f6:	78fa      	ldrb	r2, [r7, #3]
 80063f8:	6879      	ldr	r1, [r7, #4]
 80063fa:	4613      	mov	r3, r2
 80063fc:	011b      	lsls	r3, r3, #4
 80063fe:	1a9b      	subs	r3, r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	440b      	add	r3, r1
 8006404:	334d      	adds	r3, #77	@ 0x4d
 8006406:	2204      	movs	r2, #4
 8006408:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	78fa      	ldrb	r2, [r7, #3]
 8006410:	4611      	mov	r1, r2
 8006412:	4618      	mov	r0, r3
 8006414:	f008 fba1 	bl	800eb5a <USB_HC_Halt>
 8006418:	e03f      	b.n	800649a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800641a:	78fa      	ldrb	r2, [r7, #3]
 800641c:	6879      	ldr	r1, [r7, #4]
 800641e:	4613      	mov	r3, r2
 8006420:	011b      	lsls	r3, r3, #4
 8006422:	1a9b      	subs	r3, r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	440b      	add	r3, r1
 8006428:	3326      	adds	r3, #38	@ 0x26
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00a      	beq.n	8006446 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006430:	78fa      	ldrb	r2, [r7, #3]
 8006432:	6879      	ldr	r1, [r7, #4]
 8006434:	4613      	mov	r3, r2
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	1a9b      	subs	r3, r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	440b      	add	r3, r1
 800643e:	3326      	adds	r3, #38	@ 0x26
 8006440:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006442:	2b02      	cmp	r3, #2
 8006444:	d129      	bne.n	800649a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006446:	78fa      	ldrb	r2, [r7, #3]
 8006448:	6879      	ldr	r1, [r7, #4]
 800644a:	4613      	mov	r3, r2
 800644c:	011b      	lsls	r3, r3, #4
 800644e:	1a9b      	subs	r3, r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	440b      	add	r3, r1
 8006454:	3344      	adds	r3, #68	@ 0x44
 8006456:	2200      	movs	r2, #0
 8006458:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	799b      	ldrb	r3, [r3, #6]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <HCD_HC_IN_IRQHandler+0xc2a>
 8006462:	78fa      	ldrb	r2, [r7, #3]
 8006464:	6879      	ldr	r1, [r7, #4]
 8006466:	4613      	mov	r3, r2
 8006468:	011b      	lsls	r3, r3, #4
 800646a:	1a9b      	subs	r3, r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	440b      	add	r3, r1
 8006470:	331b      	adds	r3, #27
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d110      	bne.n	800649a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8006478:	78fa      	ldrb	r2, [r7, #3]
 800647a:	6879      	ldr	r1, [r7, #4]
 800647c:	4613      	mov	r3, r2
 800647e:	011b      	lsls	r3, r3, #4
 8006480:	1a9b      	subs	r3, r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	440b      	add	r3, r1
 8006486:	334d      	adds	r3, #77	@ 0x4d
 8006488:	2204      	movs	r2, #4
 800648a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	78fa      	ldrb	r2, [r7, #3]
 8006492:	4611      	mov	r1, r2
 8006494:	4618      	mov	r0, r3
 8006496:	f008 fb60 	bl	800eb5a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800649a:	78fa      	ldrb	r2, [r7, #3]
 800649c:	6879      	ldr	r1, [r7, #4]
 800649e:	4613      	mov	r3, r2
 80064a0:	011b      	lsls	r3, r3, #4
 80064a2:	1a9b      	subs	r3, r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	440b      	add	r3, r1
 80064a8:	331b      	adds	r3, #27
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d129      	bne.n	8006504 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80064b0:	78fa      	ldrb	r2, [r7, #3]
 80064b2:	6879      	ldr	r1, [r7, #4]
 80064b4:	4613      	mov	r3, r2
 80064b6:	011b      	lsls	r3, r3, #4
 80064b8:	1a9b      	subs	r3, r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	440b      	add	r3, r1
 80064be:	331b      	adds	r3, #27
 80064c0:	2200      	movs	r2, #0
 80064c2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80064c4:	78fb      	ldrb	r3, [r7, #3]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	78fa      	ldrb	r2, [r7, #3]
 80064d4:	0151      	lsls	r1, r2, #5
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	440a      	add	r2, r1
 80064da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064e2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80064e4:	78fb      	ldrb	r3, [r7, #3]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	78fa      	ldrb	r2, [r7, #3]
 80064f4:	0151      	lsls	r1, r2, #5
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	440a      	add	r2, r1
 80064fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064fe:	f043 0320 	orr.w	r3, r3, #32
 8006502:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006504:	78fb      	ldrb	r3, [r7, #3]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	4413      	add	r3, r2
 800650c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006510:	461a      	mov	r2, r3
 8006512:	2310      	movs	r3, #16
 8006514:	6093      	str	r3, [r2, #8]
 8006516:	e000      	b.n	800651a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8006518:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	460b      	mov	r3, r1
 800652a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	78fa      	ldrb	r2, [r7, #3]
 800653c:	4611      	mov	r1, r2
 800653e:	4618      	mov	r0, r3
 8006540:	f007 fd6d 	bl	800e01e <USB_ReadChInterrupts>
 8006544:	4603      	mov	r3, r0
 8006546:	f003 0304 	and.w	r3, r3, #4
 800654a:	2b04      	cmp	r3, #4
 800654c:	d11b      	bne.n	8006586 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800654e:	78fb      	ldrb	r3, [r7, #3]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	4413      	add	r3, r2
 8006556:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800655a:	461a      	mov	r2, r3
 800655c:	2304      	movs	r3, #4
 800655e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006560:	78fa      	ldrb	r2, [r7, #3]
 8006562:	6879      	ldr	r1, [r7, #4]
 8006564:	4613      	mov	r3, r2
 8006566:	011b      	lsls	r3, r3, #4
 8006568:	1a9b      	subs	r3, r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	440b      	add	r3, r1
 800656e:	334d      	adds	r3, #77	@ 0x4d
 8006570:	2207      	movs	r2, #7
 8006572:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	78fa      	ldrb	r2, [r7, #3]
 800657a:	4611      	mov	r1, r2
 800657c:	4618      	mov	r0, r3
 800657e:	f008 faec 	bl	800eb5a <USB_HC_Halt>
 8006582:	f000 bc89 	b.w	8006e98 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	78fa      	ldrb	r2, [r7, #3]
 800658c:	4611      	mov	r1, r2
 800658e:	4618      	mov	r0, r3
 8006590:	f007 fd45 	bl	800e01e <USB_ReadChInterrupts>
 8006594:	4603      	mov	r3, r0
 8006596:	f003 0320 	and.w	r3, r3, #32
 800659a:	2b20      	cmp	r3, #32
 800659c:	f040 8082 	bne.w	80066a4 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80065a0:	78fb      	ldrb	r3, [r7, #3]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065ac:	461a      	mov	r2, r3
 80065ae:	2320      	movs	r3, #32
 80065b0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80065b2:	78fa      	ldrb	r2, [r7, #3]
 80065b4:	6879      	ldr	r1, [r7, #4]
 80065b6:	4613      	mov	r3, r2
 80065b8:	011b      	lsls	r3, r3, #4
 80065ba:	1a9b      	subs	r3, r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	440b      	add	r3, r1
 80065c0:	3319      	adds	r3, #25
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d124      	bne.n	8006612 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80065c8:	78fa      	ldrb	r2, [r7, #3]
 80065ca:	6879      	ldr	r1, [r7, #4]
 80065cc:	4613      	mov	r3, r2
 80065ce:	011b      	lsls	r3, r3, #4
 80065d0:	1a9b      	subs	r3, r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	440b      	add	r3, r1
 80065d6:	3319      	adds	r3, #25
 80065d8:	2200      	movs	r2, #0
 80065da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80065dc:	78fa      	ldrb	r2, [r7, #3]
 80065de:	6879      	ldr	r1, [r7, #4]
 80065e0:	4613      	mov	r3, r2
 80065e2:	011b      	lsls	r3, r3, #4
 80065e4:	1a9b      	subs	r3, r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	440b      	add	r3, r1
 80065ea:	334c      	adds	r3, #76	@ 0x4c
 80065ec:	2202      	movs	r2, #2
 80065ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80065f0:	78fa      	ldrb	r2, [r7, #3]
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	4613      	mov	r3, r2
 80065f6:	011b      	lsls	r3, r3, #4
 80065f8:	1a9b      	subs	r3, r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	440b      	add	r3, r1
 80065fe:	334d      	adds	r3, #77	@ 0x4d
 8006600:	2203      	movs	r2, #3
 8006602:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	78fa      	ldrb	r2, [r7, #3]
 800660a:	4611      	mov	r1, r2
 800660c:	4618      	mov	r0, r3
 800660e:	f008 faa4 	bl	800eb5a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8006612:	78fa      	ldrb	r2, [r7, #3]
 8006614:	6879      	ldr	r1, [r7, #4]
 8006616:	4613      	mov	r3, r2
 8006618:	011b      	lsls	r3, r3, #4
 800661a:	1a9b      	subs	r3, r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	440b      	add	r3, r1
 8006620:	331a      	adds	r3, #26
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	2b01      	cmp	r3, #1
 8006626:	f040 8437 	bne.w	8006e98 <HCD_HC_OUT_IRQHandler+0x978>
 800662a:	78fa      	ldrb	r2, [r7, #3]
 800662c:	6879      	ldr	r1, [r7, #4]
 800662e:	4613      	mov	r3, r2
 8006630:	011b      	lsls	r3, r3, #4
 8006632:	1a9b      	subs	r3, r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	440b      	add	r3, r1
 8006638:	331b      	adds	r3, #27
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	f040 842b 	bne.w	8006e98 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8006642:	78fa      	ldrb	r2, [r7, #3]
 8006644:	6879      	ldr	r1, [r7, #4]
 8006646:	4613      	mov	r3, r2
 8006648:	011b      	lsls	r3, r3, #4
 800664a:	1a9b      	subs	r3, r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	440b      	add	r3, r1
 8006650:	3326      	adds	r3, #38	@ 0x26
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d009      	beq.n	800666c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8006658:	78fa      	ldrb	r2, [r7, #3]
 800665a:	6879      	ldr	r1, [r7, #4]
 800665c:	4613      	mov	r3, r2
 800665e:	011b      	lsls	r3, r3, #4
 8006660:	1a9b      	subs	r3, r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	440b      	add	r3, r1
 8006666:	331b      	adds	r3, #27
 8006668:	2201      	movs	r2, #1
 800666a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800666c:	78fa      	ldrb	r2, [r7, #3]
 800666e:	6879      	ldr	r1, [r7, #4]
 8006670:	4613      	mov	r3, r2
 8006672:	011b      	lsls	r3, r3, #4
 8006674:	1a9b      	subs	r3, r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	440b      	add	r3, r1
 800667a:	334d      	adds	r3, #77	@ 0x4d
 800667c:	2203      	movs	r2, #3
 800667e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	78fa      	ldrb	r2, [r7, #3]
 8006686:	4611      	mov	r1, r2
 8006688:	4618      	mov	r0, r3
 800668a:	f008 fa66 	bl	800eb5a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800668e:	78fa      	ldrb	r2, [r7, #3]
 8006690:	6879      	ldr	r1, [r7, #4]
 8006692:	4613      	mov	r3, r2
 8006694:	011b      	lsls	r3, r3, #4
 8006696:	1a9b      	subs	r3, r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	440b      	add	r3, r1
 800669c:	3344      	adds	r3, #68	@ 0x44
 800669e:	2200      	movs	r2, #0
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	e3f9      	b.n	8006e98 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	78fa      	ldrb	r2, [r7, #3]
 80066aa:	4611      	mov	r1, r2
 80066ac:	4618      	mov	r0, r3
 80066ae:	f007 fcb6 	bl	800e01e <USB_ReadChInterrupts>
 80066b2:	4603      	mov	r3, r0
 80066b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066bc:	d111      	bne.n	80066e2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80066be:	78fb      	ldrb	r3, [r7, #3]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066ca:	461a      	mov	r2, r3
 80066cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80066d0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	78fa      	ldrb	r2, [r7, #3]
 80066d8:	4611      	mov	r1, r2
 80066da:	4618      	mov	r0, r3
 80066dc:	f008 fa3d 	bl	800eb5a <USB_HC_Halt>
 80066e0:	e3da      	b.n	8006e98 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	78fa      	ldrb	r2, [r7, #3]
 80066e8:	4611      	mov	r1, r2
 80066ea:	4618      	mov	r0, r3
 80066ec:	f007 fc97 	bl	800e01e <USB_ReadChInterrupts>
 80066f0:	4603      	mov	r3, r0
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d168      	bne.n	80067cc <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80066fa:	78fa      	ldrb	r2, [r7, #3]
 80066fc:	6879      	ldr	r1, [r7, #4]
 80066fe:	4613      	mov	r3, r2
 8006700:	011b      	lsls	r3, r3, #4
 8006702:	1a9b      	subs	r3, r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	440b      	add	r3, r1
 8006708:	3344      	adds	r3, #68	@ 0x44
 800670a:	2200      	movs	r2, #0
 800670c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	78fa      	ldrb	r2, [r7, #3]
 8006714:	4611      	mov	r1, r2
 8006716:	4618      	mov	r0, r3
 8006718:	f007 fc81 	bl	800e01e <USB_ReadChInterrupts>
 800671c:	4603      	mov	r3, r0
 800671e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006722:	2b40      	cmp	r3, #64	@ 0x40
 8006724:	d112      	bne.n	800674c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8006726:	78fa      	ldrb	r2, [r7, #3]
 8006728:	6879      	ldr	r1, [r7, #4]
 800672a:	4613      	mov	r3, r2
 800672c:	011b      	lsls	r3, r3, #4
 800672e:	1a9b      	subs	r3, r3, r2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	440b      	add	r3, r1
 8006734:	3319      	adds	r3, #25
 8006736:	2201      	movs	r2, #1
 8006738:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800673a:	78fb      	ldrb	r3, [r7, #3]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	4413      	add	r3, r2
 8006742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006746:	461a      	mov	r2, r3
 8006748:	2340      	movs	r3, #64	@ 0x40
 800674a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800674c:	78fa      	ldrb	r2, [r7, #3]
 800674e:	6879      	ldr	r1, [r7, #4]
 8006750:	4613      	mov	r3, r2
 8006752:	011b      	lsls	r3, r3, #4
 8006754:	1a9b      	subs	r3, r3, r2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	440b      	add	r3, r1
 800675a:	331b      	adds	r3, #27
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d019      	beq.n	8006796 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006762:	78fa      	ldrb	r2, [r7, #3]
 8006764:	6879      	ldr	r1, [r7, #4]
 8006766:	4613      	mov	r3, r2
 8006768:	011b      	lsls	r3, r3, #4
 800676a:	1a9b      	subs	r3, r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	440b      	add	r3, r1
 8006770:	331b      	adds	r3, #27
 8006772:	2200      	movs	r2, #0
 8006774:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006776:	78fb      	ldrb	r3, [r7, #3]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	4413      	add	r3, r2
 800677e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	78fa      	ldrb	r2, [r7, #3]
 8006786:	0151      	lsls	r1, r2, #5
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	440a      	add	r2, r1
 800678c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006790:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006794:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8006796:	78fb      	ldrb	r3, [r7, #3]
 8006798:	015a      	lsls	r2, r3, #5
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	4413      	add	r3, r2
 800679e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067a2:	461a      	mov	r2, r3
 80067a4:	2301      	movs	r3, #1
 80067a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80067a8:	78fa      	ldrb	r2, [r7, #3]
 80067aa:	6879      	ldr	r1, [r7, #4]
 80067ac:	4613      	mov	r3, r2
 80067ae:	011b      	lsls	r3, r3, #4
 80067b0:	1a9b      	subs	r3, r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	440b      	add	r3, r1
 80067b6:	334d      	adds	r3, #77	@ 0x4d
 80067b8:	2201      	movs	r2, #1
 80067ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	78fa      	ldrb	r2, [r7, #3]
 80067c2:	4611      	mov	r1, r2
 80067c4:	4618      	mov	r0, r3
 80067c6:	f008 f9c8 	bl	800eb5a <USB_HC_Halt>
 80067ca:	e365      	b.n	8006e98 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	78fa      	ldrb	r2, [r7, #3]
 80067d2:	4611      	mov	r1, r2
 80067d4:	4618      	mov	r0, r3
 80067d6:	f007 fc22 	bl	800e01e <USB_ReadChInterrupts>
 80067da:	4603      	mov	r3, r0
 80067dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067e0:	2b40      	cmp	r3, #64	@ 0x40
 80067e2:	d139      	bne.n	8006858 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80067e4:	78fa      	ldrb	r2, [r7, #3]
 80067e6:	6879      	ldr	r1, [r7, #4]
 80067e8:	4613      	mov	r3, r2
 80067ea:	011b      	lsls	r3, r3, #4
 80067ec:	1a9b      	subs	r3, r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	440b      	add	r3, r1
 80067f2:	334d      	adds	r3, #77	@ 0x4d
 80067f4:	2205      	movs	r2, #5
 80067f6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80067f8:	78fa      	ldrb	r2, [r7, #3]
 80067fa:	6879      	ldr	r1, [r7, #4]
 80067fc:	4613      	mov	r3, r2
 80067fe:	011b      	lsls	r3, r3, #4
 8006800:	1a9b      	subs	r3, r3, r2
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	440b      	add	r3, r1
 8006806:	331a      	adds	r3, #26
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d109      	bne.n	8006822 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800680e:	78fa      	ldrb	r2, [r7, #3]
 8006810:	6879      	ldr	r1, [r7, #4]
 8006812:	4613      	mov	r3, r2
 8006814:	011b      	lsls	r3, r3, #4
 8006816:	1a9b      	subs	r3, r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	440b      	add	r3, r1
 800681c:	3319      	adds	r3, #25
 800681e:	2201      	movs	r2, #1
 8006820:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8006822:	78fa      	ldrb	r2, [r7, #3]
 8006824:	6879      	ldr	r1, [r7, #4]
 8006826:	4613      	mov	r3, r2
 8006828:	011b      	lsls	r3, r3, #4
 800682a:	1a9b      	subs	r3, r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	440b      	add	r3, r1
 8006830:	3344      	adds	r3, #68	@ 0x44
 8006832:	2200      	movs	r2, #0
 8006834:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	78fa      	ldrb	r2, [r7, #3]
 800683c:	4611      	mov	r1, r2
 800683e:	4618      	mov	r0, r3
 8006840:	f008 f98b 	bl	800eb5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006844:	78fb      	ldrb	r3, [r7, #3]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	4413      	add	r3, r2
 800684c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006850:	461a      	mov	r2, r3
 8006852:	2340      	movs	r3, #64	@ 0x40
 8006854:	6093      	str	r3, [r2, #8]
 8006856:	e31f      	b.n	8006e98 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	78fa      	ldrb	r2, [r7, #3]
 800685e:	4611      	mov	r1, r2
 8006860:	4618      	mov	r0, r3
 8006862:	f007 fbdc 	bl	800e01e <USB_ReadChInterrupts>
 8006866:	4603      	mov	r3, r0
 8006868:	f003 0308 	and.w	r3, r3, #8
 800686c:	2b08      	cmp	r3, #8
 800686e:	d11a      	bne.n	80068a6 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8006870:	78fb      	ldrb	r3, [r7, #3]
 8006872:	015a      	lsls	r2, r3, #5
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	4413      	add	r3, r2
 8006878:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800687c:	461a      	mov	r2, r3
 800687e:	2308      	movs	r3, #8
 8006880:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8006882:	78fa      	ldrb	r2, [r7, #3]
 8006884:	6879      	ldr	r1, [r7, #4]
 8006886:	4613      	mov	r3, r2
 8006888:	011b      	lsls	r3, r3, #4
 800688a:	1a9b      	subs	r3, r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	440b      	add	r3, r1
 8006890:	334d      	adds	r3, #77	@ 0x4d
 8006892:	2206      	movs	r2, #6
 8006894:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	78fa      	ldrb	r2, [r7, #3]
 800689c:	4611      	mov	r1, r2
 800689e:	4618      	mov	r0, r3
 80068a0:	f008 f95b 	bl	800eb5a <USB_HC_Halt>
 80068a4:	e2f8      	b.n	8006e98 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	78fa      	ldrb	r2, [r7, #3]
 80068ac:	4611      	mov	r1, r2
 80068ae:	4618      	mov	r0, r3
 80068b0:	f007 fbb5 	bl	800e01e <USB_ReadChInterrupts>
 80068b4:	4603      	mov	r3, r0
 80068b6:	f003 0310 	and.w	r3, r3, #16
 80068ba:	2b10      	cmp	r3, #16
 80068bc:	d144      	bne.n	8006948 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80068be:	78fa      	ldrb	r2, [r7, #3]
 80068c0:	6879      	ldr	r1, [r7, #4]
 80068c2:	4613      	mov	r3, r2
 80068c4:	011b      	lsls	r3, r3, #4
 80068c6:	1a9b      	subs	r3, r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	440b      	add	r3, r1
 80068cc:	3344      	adds	r3, #68	@ 0x44
 80068ce:	2200      	movs	r2, #0
 80068d0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80068d2:	78fa      	ldrb	r2, [r7, #3]
 80068d4:	6879      	ldr	r1, [r7, #4]
 80068d6:	4613      	mov	r3, r2
 80068d8:	011b      	lsls	r3, r3, #4
 80068da:	1a9b      	subs	r3, r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	440b      	add	r3, r1
 80068e0:	334d      	adds	r3, #77	@ 0x4d
 80068e2:	2204      	movs	r2, #4
 80068e4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80068e6:	78fa      	ldrb	r2, [r7, #3]
 80068e8:	6879      	ldr	r1, [r7, #4]
 80068ea:	4613      	mov	r3, r2
 80068ec:	011b      	lsls	r3, r3, #4
 80068ee:	1a9b      	subs	r3, r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	440b      	add	r3, r1
 80068f4:	3319      	adds	r3, #25
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d114      	bne.n	8006926 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80068fc:	78fa      	ldrb	r2, [r7, #3]
 80068fe:	6879      	ldr	r1, [r7, #4]
 8006900:	4613      	mov	r3, r2
 8006902:	011b      	lsls	r3, r3, #4
 8006904:	1a9b      	subs	r3, r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	440b      	add	r3, r1
 800690a:	3318      	adds	r3, #24
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d109      	bne.n	8006926 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8006912:	78fa      	ldrb	r2, [r7, #3]
 8006914:	6879      	ldr	r1, [r7, #4]
 8006916:	4613      	mov	r3, r2
 8006918:	011b      	lsls	r3, r3, #4
 800691a:	1a9b      	subs	r3, r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	440b      	add	r3, r1
 8006920:	3319      	adds	r3, #25
 8006922:	2201      	movs	r2, #1
 8006924:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	78fa      	ldrb	r2, [r7, #3]
 800692c:	4611      	mov	r1, r2
 800692e:	4618      	mov	r0, r3
 8006930:	f008 f913 	bl	800eb5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006934:	78fb      	ldrb	r3, [r7, #3]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	4413      	add	r3, r2
 800693c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006940:	461a      	mov	r2, r3
 8006942:	2310      	movs	r3, #16
 8006944:	6093      	str	r3, [r2, #8]
 8006946:	e2a7      	b.n	8006e98 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	78fa      	ldrb	r2, [r7, #3]
 800694e:	4611      	mov	r1, r2
 8006950:	4618      	mov	r0, r3
 8006952:	f007 fb64 	bl	800e01e <USB_ReadChInterrupts>
 8006956:	4603      	mov	r3, r0
 8006958:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800695c:	2b80      	cmp	r3, #128	@ 0x80
 800695e:	f040 8083 	bne.w	8006a68 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	799b      	ldrb	r3, [r3, #6]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d111      	bne.n	800698e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800696a:	78fa      	ldrb	r2, [r7, #3]
 800696c:	6879      	ldr	r1, [r7, #4]
 800696e:	4613      	mov	r3, r2
 8006970:	011b      	lsls	r3, r3, #4
 8006972:	1a9b      	subs	r3, r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	440b      	add	r3, r1
 8006978:	334d      	adds	r3, #77	@ 0x4d
 800697a:	2207      	movs	r2, #7
 800697c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	78fa      	ldrb	r2, [r7, #3]
 8006984:	4611      	mov	r1, r2
 8006986:	4618      	mov	r0, r3
 8006988:	f008 f8e7 	bl	800eb5a <USB_HC_Halt>
 800698c:	e062      	b.n	8006a54 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800698e:	78fa      	ldrb	r2, [r7, #3]
 8006990:	6879      	ldr	r1, [r7, #4]
 8006992:	4613      	mov	r3, r2
 8006994:	011b      	lsls	r3, r3, #4
 8006996:	1a9b      	subs	r3, r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	440b      	add	r3, r1
 800699c:	3344      	adds	r3, #68	@ 0x44
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	1c59      	adds	r1, r3, #1
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	4613      	mov	r3, r2
 80069a6:	011b      	lsls	r3, r3, #4
 80069a8:	1a9b      	subs	r3, r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4403      	add	r3, r0
 80069ae:	3344      	adds	r3, #68	@ 0x44
 80069b0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80069b2:	78fa      	ldrb	r2, [r7, #3]
 80069b4:	6879      	ldr	r1, [r7, #4]
 80069b6:	4613      	mov	r3, r2
 80069b8:	011b      	lsls	r3, r3, #4
 80069ba:	1a9b      	subs	r3, r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	440b      	add	r3, r1
 80069c0:	3344      	adds	r3, #68	@ 0x44
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d922      	bls.n	8006a0e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80069c8:	78fa      	ldrb	r2, [r7, #3]
 80069ca:	6879      	ldr	r1, [r7, #4]
 80069cc:	4613      	mov	r3, r2
 80069ce:	011b      	lsls	r3, r3, #4
 80069d0:	1a9b      	subs	r3, r3, r2
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	440b      	add	r3, r1
 80069d6:	3344      	adds	r3, #68	@ 0x44
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80069dc:	78fa      	ldrb	r2, [r7, #3]
 80069de:	6879      	ldr	r1, [r7, #4]
 80069e0:	4613      	mov	r3, r2
 80069e2:	011b      	lsls	r3, r3, #4
 80069e4:	1a9b      	subs	r3, r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	440b      	add	r3, r1
 80069ea:	334c      	adds	r3, #76	@ 0x4c
 80069ec:	2204      	movs	r2, #4
 80069ee:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80069f0:	78fa      	ldrb	r2, [r7, #3]
 80069f2:	6879      	ldr	r1, [r7, #4]
 80069f4:	4613      	mov	r3, r2
 80069f6:	011b      	lsls	r3, r3, #4
 80069f8:	1a9b      	subs	r3, r3, r2
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	440b      	add	r3, r1
 80069fe:	334c      	adds	r3, #76	@ 0x4c
 8006a00:	781a      	ldrb	r2, [r3, #0]
 8006a02:	78fb      	ldrb	r3, [r7, #3]
 8006a04:	4619      	mov	r1, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f00d fb80 	bl	801410c <HAL_HCD_HC_NotifyURBChange_Callback>
 8006a0c:	e022      	b.n	8006a54 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006a0e:	78fa      	ldrb	r2, [r7, #3]
 8006a10:	6879      	ldr	r1, [r7, #4]
 8006a12:	4613      	mov	r3, r2
 8006a14:	011b      	lsls	r3, r3, #4
 8006a16:	1a9b      	subs	r3, r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	440b      	add	r3, r1
 8006a1c:	334c      	adds	r3, #76	@ 0x4c
 8006a1e:	2202      	movs	r2, #2
 8006a20:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006a22:	78fb      	ldrb	r3, [r7, #3]
 8006a24:	015a      	lsls	r2, r3, #5
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	4413      	add	r3, r2
 8006a2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a38:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a40:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006a42:	78fb      	ldrb	r3, [r7, #3]
 8006a44:	015a      	lsls	r2, r3, #5
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	4413      	add	r3, r2
 8006a4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a4e:	461a      	mov	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8006a54:	78fb      	ldrb	r3, [r7, #3]
 8006a56:	015a      	lsls	r2, r3, #5
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a60:	461a      	mov	r2, r3
 8006a62:	2380      	movs	r3, #128	@ 0x80
 8006a64:	6093      	str	r3, [r2, #8]
 8006a66:	e217      	b.n	8006e98 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	78fa      	ldrb	r2, [r7, #3]
 8006a6e:	4611      	mov	r1, r2
 8006a70:	4618      	mov	r0, r3
 8006a72:	f007 fad4 	bl	800e01e <USB_ReadChInterrupts>
 8006a76:	4603      	mov	r3, r0
 8006a78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a80:	d11b      	bne.n	8006aba <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006a82:	78fa      	ldrb	r2, [r7, #3]
 8006a84:	6879      	ldr	r1, [r7, #4]
 8006a86:	4613      	mov	r3, r2
 8006a88:	011b      	lsls	r3, r3, #4
 8006a8a:	1a9b      	subs	r3, r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	440b      	add	r3, r1
 8006a90:	334d      	adds	r3, #77	@ 0x4d
 8006a92:	2209      	movs	r2, #9
 8006a94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	78fa      	ldrb	r2, [r7, #3]
 8006a9c:	4611      	mov	r1, r2
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f008 f85b 	bl	800eb5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006aa4:	78fb      	ldrb	r3, [r7, #3]
 8006aa6:	015a      	lsls	r2, r3, #5
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	4413      	add	r3, r2
 8006aac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ab6:	6093      	str	r3, [r2, #8]
 8006ab8:	e1ee      	b.n	8006e98 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	78fa      	ldrb	r2, [r7, #3]
 8006ac0:	4611      	mov	r1, r2
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f007 faab 	bl	800e01e <USB_ReadChInterrupts>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	f003 0302 	and.w	r3, r3, #2
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	f040 81df 	bne.w	8006e92 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006ad4:	78fb      	ldrb	r3, [r7, #3]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006ae6:	78fa      	ldrb	r2, [r7, #3]
 8006ae8:	6879      	ldr	r1, [r7, #4]
 8006aea:	4613      	mov	r3, r2
 8006aec:	011b      	lsls	r3, r3, #4
 8006aee:	1a9b      	subs	r3, r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	440b      	add	r3, r1
 8006af4:	334d      	adds	r3, #77	@ 0x4d
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	f040 8093 	bne.w	8006c24 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006afe:	78fa      	ldrb	r2, [r7, #3]
 8006b00:	6879      	ldr	r1, [r7, #4]
 8006b02:	4613      	mov	r3, r2
 8006b04:	011b      	lsls	r3, r3, #4
 8006b06:	1a9b      	subs	r3, r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	440b      	add	r3, r1
 8006b0c:	334d      	adds	r3, #77	@ 0x4d
 8006b0e:	2202      	movs	r2, #2
 8006b10:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006b12:	78fa      	ldrb	r2, [r7, #3]
 8006b14:	6879      	ldr	r1, [r7, #4]
 8006b16:	4613      	mov	r3, r2
 8006b18:	011b      	lsls	r3, r3, #4
 8006b1a:	1a9b      	subs	r3, r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	440b      	add	r3, r1
 8006b20:	334c      	adds	r3, #76	@ 0x4c
 8006b22:	2201      	movs	r2, #1
 8006b24:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006b26:	78fa      	ldrb	r2, [r7, #3]
 8006b28:	6879      	ldr	r1, [r7, #4]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	011b      	lsls	r3, r3, #4
 8006b2e:	1a9b      	subs	r3, r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	440b      	add	r3, r1
 8006b34:	3326      	adds	r3, #38	@ 0x26
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d00b      	beq.n	8006b54 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8006b3c:	78fa      	ldrb	r2, [r7, #3]
 8006b3e:	6879      	ldr	r1, [r7, #4]
 8006b40:	4613      	mov	r3, r2
 8006b42:	011b      	lsls	r3, r3, #4
 8006b44:	1a9b      	subs	r3, r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	440b      	add	r3, r1
 8006b4a:	3326      	adds	r3, #38	@ 0x26
 8006b4c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006b4e:	2b03      	cmp	r3, #3
 8006b50:	f040 8190 	bne.w	8006e74 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	799b      	ldrb	r3, [r3, #6]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d115      	bne.n	8006b88 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8006b5c:	78fa      	ldrb	r2, [r7, #3]
 8006b5e:	6879      	ldr	r1, [r7, #4]
 8006b60:	4613      	mov	r3, r2
 8006b62:	011b      	lsls	r3, r3, #4
 8006b64:	1a9b      	subs	r3, r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	440b      	add	r3, r1
 8006b6a:	333d      	adds	r3, #61	@ 0x3d
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	78fa      	ldrb	r2, [r7, #3]
 8006b70:	f083 0301 	eor.w	r3, r3, #1
 8006b74:	b2d8      	uxtb	r0, r3
 8006b76:	6879      	ldr	r1, [r7, #4]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	011b      	lsls	r3, r3, #4
 8006b7c:	1a9b      	subs	r3, r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	440b      	add	r3, r1
 8006b82:	333d      	adds	r3, #61	@ 0x3d
 8006b84:	4602      	mov	r2, r0
 8006b86:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	799b      	ldrb	r3, [r3, #6]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	f040 8171 	bne.w	8006e74 <HCD_HC_OUT_IRQHandler+0x954>
 8006b92:	78fa      	ldrb	r2, [r7, #3]
 8006b94:	6879      	ldr	r1, [r7, #4]
 8006b96:	4613      	mov	r3, r2
 8006b98:	011b      	lsls	r3, r3, #4
 8006b9a:	1a9b      	subs	r3, r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	440b      	add	r3, r1
 8006ba0:	3334      	adds	r3, #52	@ 0x34
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 8165 	beq.w	8006e74 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8006baa:	78fa      	ldrb	r2, [r7, #3]
 8006bac:	6879      	ldr	r1, [r7, #4]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	011b      	lsls	r3, r3, #4
 8006bb2:	1a9b      	subs	r3, r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	440b      	add	r3, r1
 8006bb8:	3334      	adds	r3, #52	@ 0x34
 8006bba:	6819      	ldr	r1, [r3, #0]
 8006bbc:	78fa      	ldrb	r2, [r7, #3]
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	011b      	lsls	r3, r3, #4
 8006bc4:	1a9b      	subs	r3, r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4403      	add	r3, r0
 8006bca:	3328      	adds	r3, #40	@ 0x28
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	440b      	add	r3, r1
 8006bd0:	1e59      	subs	r1, r3, #1
 8006bd2:	78fa      	ldrb	r2, [r7, #3]
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	011b      	lsls	r3, r3, #4
 8006bda:	1a9b      	subs	r3, r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4403      	add	r3, r0
 8006be0:	3328      	adds	r3, #40	@ 0x28
 8006be2:	881b      	ldrh	r3, [r3, #0]
 8006be4:	fbb1 f3f3 	udiv	r3, r1, r3
 8006be8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 813f 	beq.w	8006e74 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8006bf6:	78fa      	ldrb	r2, [r7, #3]
 8006bf8:	6879      	ldr	r1, [r7, #4]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	011b      	lsls	r3, r3, #4
 8006bfe:	1a9b      	subs	r3, r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	440b      	add	r3, r1
 8006c04:	333d      	adds	r3, #61	@ 0x3d
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	78fa      	ldrb	r2, [r7, #3]
 8006c0a:	f083 0301 	eor.w	r3, r3, #1
 8006c0e:	b2d8      	uxtb	r0, r3
 8006c10:	6879      	ldr	r1, [r7, #4]
 8006c12:	4613      	mov	r3, r2
 8006c14:	011b      	lsls	r3, r3, #4
 8006c16:	1a9b      	subs	r3, r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	440b      	add	r3, r1
 8006c1c:	333d      	adds	r3, #61	@ 0x3d
 8006c1e:	4602      	mov	r2, r0
 8006c20:	701a      	strb	r2, [r3, #0]
 8006c22:	e127      	b.n	8006e74 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006c24:	78fa      	ldrb	r2, [r7, #3]
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	011b      	lsls	r3, r3, #4
 8006c2c:	1a9b      	subs	r3, r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	440b      	add	r3, r1
 8006c32:	334d      	adds	r3, #77	@ 0x4d
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	2b03      	cmp	r3, #3
 8006c38:	d120      	bne.n	8006c7c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006c3a:	78fa      	ldrb	r2, [r7, #3]
 8006c3c:	6879      	ldr	r1, [r7, #4]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	011b      	lsls	r3, r3, #4
 8006c42:	1a9b      	subs	r3, r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	440b      	add	r3, r1
 8006c48:	334d      	adds	r3, #77	@ 0x4d
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006c4e:	78fa      	ldrb	r2, [r7, #3]
 8006c50:	6879      	ldr	r1, [r7, #4]
 8006c52:	4613      	mov	r3, r2
 8006c54:	011b      	lsls	r3, r3, #4
 8006c56:	1a9b      	subs	r3, r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	440b      	add	r3, r1
 8006c5c:	331b      	adds	r3, #27
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	f040 8107 	bne.w	8006e74 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006c66:	78fa      	ldrb	r2, [r7, #3]
 8006c68:	6879      	ldr	r1, [r7, #4]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	011b      	lsls	r3, r3, #4
 8006c6e:	1a9b      	subs	r3, r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	440b      	add	r3, r1
 8006c74:	334c      	adds	r3, #76	@ 0x4c
 8006c76:	2202      	movs	r2, #2
 8006c78:	701a      	strb	r2, [r3, #0]
 8006c7a:	e0fb      	b.n	8006e74 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006c7c:	78fa      	ldrb	r2, [r7, #3]
 8006c7e:	6879      	ldr	r1, [r7, #4]
 8006c80:	4613      	mov	r3, r2
 8006c82:	011b      	lsls	r3, r3, #4
 8006c84:	1a9b      	subs	r3, r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	440b      	add	r3, r1
 8006c8a:	334d      	adds	r3, #77	@ 0x4d
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	2b04      	cmp	r3, #4
 8006c90:	d13a      	bne.n	8006d08 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006c92:	78fa      	ldrb	r2, [r7, #3]
 8006c94:	6879      	ldr	r1, [r7, #4]
 8006c96:	4613      	mov	r3, r2
 8006c98:	011b      	lsls	r3, r3, #4
 8006c9a:	1a9b      	subs	r3, r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	440b      	add	r3, r1
 8006ca0:	334d      	adds	r3, #77	@ 0x4d
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006ca6:	78fa      	ldrb	r2, [r7, #3]
 8006ca8:	6879      	ldr	r1, [r7, #4]
 8006caa:	4613      	mov	r3, r2
 8006cac:	011b      	lsls	r3, r3, #4
 8006cae:	1a9b      	subs	r3, r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	440b      	add	r3, r1
 8006cb4:	334c      	adds	r3, #76	@ 0x4c
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006cba:	78fa      	ldrb	r2, [r7, #3]
 8006cbc:	6879      	ldr	r1, [r7, #4]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	011b      	lsls	r3, r3, #4
 8006cc2:	1a9b      	subs	r3, r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	440b      	add	r3, r1
 8006cc8:	331b      	adds	r3, #27
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	f040 80d1 	bne.w	8006e74 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8006cd2:	78fa      	ldrb	r2, [r7, #3]
 8006cd4:	6879      	ldr	r1, [r7, #4]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	011b      	lsls	r3, r3, #4
 8006cda:	1a9b      	subs	r3, r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	440b      	add	r3, r1
 8006ce0:	331b      	adds	r3, #27
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006ce6:	78fb      	ldrb	r3, [r7, #3]
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	78fa      	ldrb	r2, [r7, #3]
 8006cf6:	0151      	lsls	r1, r2, #5
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	440a      	add	r2, r1
 8006cfc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d04:	6053      	str	r3, [r2, #4]
 8006d06:	e0b5      	b.n	8006e74 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006d08:	78fa      	ldrb	r2, [r7, #3]
 8006d0a:	6879      	ldr	r1, [r7, #4]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	011b      	lsls	r3, r3, #4
 8006d10:	1a9b      	subs	r3, r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	440b      	add	r3, r1
 8006d16:	334d      	adds	r3, #77	@ 0x4d
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	2b05      	cmp	r3, #5
 8006d1c:	d114      	bne.n	8006d48 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006d1e:	78fa      	ldrb	r2, [r7, #3]
 8006d20:	6879      	ldr	r1, [r7, #4]
 8006d22:	4613      	mov	r3, r2
 8006d24:	011b      	lsls	r3, r3, #4
 8006d26:	1a9b      	subs	r3, r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	440b      	add	r3, r1
 8006d2c:	334d      	adds	r3, #77	@ 0x4d
 8006d2e:	2202      	movs	r2, #2
 8006d30:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8006d32:	78fa      	ldrb	r2, [r7, #3]
 8006d34:	6879      	ldr	r1, [r7, #4]
 8006d36:	4613      	mov	r3, r2
 8006d38:	011b      	lsls	r3, r3, #4
 8006d3a:	1a9b      	subs	r3, r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	440b      	add	r3, r1
 8006d40:	334c      	adds	r3, #76	@ 0x4c
 8006d42:	2202      	movs	r2, #2
 8006d44:	701a      	strb	r2, [r3, #0]
 8006d46:	e095      	b.n	8006e74 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006d48:	78fa      	ldrb	r2, [r7, #3]
 8006d4a:	6879      	ldr	r1, [r7, #4]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	011b      	lsls	r3, r3, #4
 8006d50:	1a9b      	subs	r3, r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	440b      	add	r3, r1
 8006d56:	334d      	adds	r3, #77	@ 0x4d
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	2b06      	cmp	r3, #6
 8006d5c:	d114      	bne.n	8006d88 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006d5e:	78fa      	ldrb	r2, [r7, #3]
 8006d60:	6879      	ldr	r1, [r7, #4]
 8006d62:	4613      	mov	r3, r2
 8006d64:	011b      	lsls	r3, r3, #4
 8006d66:	1a9b      	subs	r3, r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	440b      	add	r3, r1
 8006d6c:	334d      	adds	r3, #77	@ 0x4d
 8006d6e:	2202      	movs	r2, #2
 8006d70:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8006d72:	78fa      	ldrb	r2, [r7, #3]
 8006d74:	6879      	ldr	r1, [r7, #4]
 8006d76:	4613      	mov	r3, r2
 8006d78:	011b      	lsls	r3, r3, #4
 8006d7a:	1a9b      	subs	r3, r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	440b      	add	r3, r1
 8006d80:	334c      	adds	r3, #76	@ 0x4c
 8006d82:	2205      	movs	r2, #5
 8006d84:	701a      	strb	r2, [r3, #0]
 8006d86:	e075      	b.n	8006e74 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006d88:	78fa      	ldrb	r2, [r7, #3]
 8006d8a:	6879      	ldr	r1, [r7, #4]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	011b      	lsls	r3, r3, #4
 8006d90:	1a9b      	subs	r3, r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	440b      	add	r3, r1
 8006d96:	334d      	adds	r3, #77	@ 0x4d
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	2b07      	cmp	r3, #7
 8006d9c:	d00a      	beq.n	8006db4 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8006d9e:	78fa      	ldrb	r2, [r7, #3]
 8006da0:	6879      	ldr	r1, [r7, #4]
 8006da2:	4613      	mov	r3, r2
 8006da4:	011b      	lsls	r3, r3, #4
 8006da6:	1a9b      	subs	r3, r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	440b      	add	r3, r1
 8006dac:	334d      	adds	r3, #77	@ 0x4d
 8006dae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006db0:	2b09      	cmp	r3, #9
 8006db2:	d170      	bne.n	8006e96 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006db4:	78fa      	ldrb	r2, [r7, #3]
 8006db6:	6879      	ldr	r1, [r7, #4]
 8006db8:	4613      	mov	r3, r2
 8006dba:	011b      	lsls	r3, r3, #4
 8006dbc:	1a9b      	subs	r3, r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	440b      	add	r3, r1
 8006dc2:	334d      	adds	r3, #77	@ 0x4d
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006dc8:	78fa      	ldrb	r2, [r7, #3]
 8006dca:	6879      	ldr	r1, [r7, #4]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	011b      	lsls	r3, r3, #4
 8006dd0:	1a9b      	subs	r3, r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	440b      	add	r3, r1
 8006dd6:	3344      	adds	r3, #68	@ 0x44
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	1c59      	adds	r1, r3, #1
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	4613      	mov	r3, r2
 8006de0:	011b      	lsls	r3, r3, #4
 8006de2:	1a9b      	subs	r3, r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4403      	add	r3, r0
 8006de8:	3344      	adds	r3, #68	@ 0x44
 8006dea:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006dec:	78fa      	ldrb	r2, [r7, #3]
 8006dee:	6879      	ldr	r1, [r7, #4]
 8006df0:	4613      	mov	r3, r2
 8006df2:	011b      	lsls	r3, r3, #4
 8006df4:	1a9b      	subs	r3, r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	440b      	add	r3, r1
 8006dfa:	3344      	adds	r3, #68	@ 0x44
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d914      	bls.n	8006e2c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006e02:	78fa      	ldrb	r2, [r7, #3]
 8006e04:	6879      	ldr	r1, [r7, #4]
 8006e06:	4613      	mov	r3, r2
 8006e08:	011b      	lsls	r3, r3, #4
 8006e0a:	1a9b      	subs	r3, r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	440b      	add	r3, r1
 8006e10:	3344      	adds	r3, #68	@ 0x44
 8006e12:	2200      	movs	r2, #0
 8006e14:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006e16:	78fa      	ldrb	r2, [r7, #3]
 8006e18:	6879      	ldr	r1, [r7, #4]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	011b      	lsls	r3, r3, #4
 8006e1e:	1a9b      	subs	r3, r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	440b      	add	r3, r1
 8006e24:	334c      	adds	r3, #76	@ 0x4c
 8006e26:	2204      	movs	r2, #4
 8006e28:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006e2a:	e022      	b.n	8006e72 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006e2c:	78fa      	ldrb	r2, [r7, #3]
 8006e2e:	6879      	ldr	r1, [r7, #4]
 8006e30:	4613      	mov	r3, r2
 8006e32:	011b      	lsls	r3, r3, #4
 8006e34:	1a9b      	subs	r3, r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	440b      	add	r3, r1
 8006e3a:	334c      	adds	r3, #76	@ 0x4c
 8006e3c:	2202      	movs	r2, #2
 8006e3e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006e40:	78fb      	ldrb	r3, [r7, #3]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006e56:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006e5e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006e60:	78fb      	ldrb	r3, [r7, #3]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006e72:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006e74:	78fa      	ldrb	r2, [r7, #3]
 8006e76:	6879      	ldr	r1, [r7, #4]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	011b      	lsls	r3, r3, #4
 8006e7c:	1a9b      	subs	r3, r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	440b      	add	r3, r1
 8006e82:	334c      	adds	r3, #76	@ 0x4c
 8006e84:	781a      	ldrb	r2, [r3, #0]
 8006e86:	78fb      	ldrb	r3, [r7, #3]
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f00d f93e 	bl	801410c <HAL_HCD_HC_NotifyURBChange_Callback>
 8006e90:	e002      	b.n	8006e98 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8006e92:	bf00      	nop
 8006e94:	e000      	b.n	8006e98 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8006e96:	bf00      	nop
  }
}
 8006e98:	3718      	adds	r7, #24
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b08a      	sub	sp, #40	@ 0x28
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eae:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	f003 030f 	and.w	r3, r3, #15
 8006ebe:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	0c5b      	lsrs	r3, r3, #17
 8006ec4:	f003 030f 	and.w	r3, r3, #15
 8006ec8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	091b      	lsrs	r3, r3, #4
 8006ece:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ed2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d004      	beq.n	8006ee4 <HCD_RXQLVL_IRQHandler+0x46>
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2b05      	cmp	r3, #5
 8006ede:	f000 80b6 	beq.w	800704e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006ee2:	e0b7      	b.n	8007054 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 80b3 	beq.w	8007052 <HCD_RXQLVL_IRQHandler+0x1b4>
 8006eec:	6879      	ldr	r1, [r7, #4]
 8006eee:	69ba      	ldr	r2, [r7, #24]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	011b      	lsls	r3, r3, #4
 8006ef4:	1a9b      	subs	r3, r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	440b      	add	r3, r1
 8006efa:	332c      	adds	r3, #44	@ 0x2c
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f000 80a7 	beq.w	8007052 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8006f04:	6879      	ldr	r1, [r7, #4]
 8006f06:	69ba      	ldr	r2, [r7, #24]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	011b      	lsls	r3, r3, #4
 8006f0c:	1a9b      	subs	r3, r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	440b      	add	r3, r1
 8006f12:	3338      	adds	r3, #56	@ 0x38
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	18d1      	adds	r1, r2, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	69ba      	ldr	r2, [r7, #24]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	011b      	lsls	r3, r3, #4
 8006f22:	1a9b      	subs	r3, r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4403      	add	r3, r0
 8006f28:	3334      	adds	r3, #52	@ 0x34
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4299      	cmp	r1, r3
 8006f2e:	f200 8083 	bhi.w	8007038 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6818      	ldr	r0, [r3, #0]
 8006f36:	6879      	ldr	r1, [r7, #4]
 8006f38:	69ba      	ldr	r2, [r7, #24]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	011b      	lsls	r3, r3, #4
 8006f3e:	1a9b      	subs	r3, r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	440b      	add	r3, r1
 8006f44:	332c      	adds	r3, #44	@ 0x2c
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	b292      	uxth	r2, r2
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	f006 fffb 	bl	800df48 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8006f52:	6879      	ldr	r1, [r7, #4]
 8006f54:	69ba      	ldr	r2, [r7, #24]
 8006f56:	4613      	mov	r3, r2
 8006f58:	011b      	lsls	r3, r3, #4
 8006f5a:	1a9b      	subs	r3, r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	440b      	add	r3, r1
 8006f60:	332c      	adds	r3, #44	@ 0x2c
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	18d1      	adds	r1, r2, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	69ba      	ldr	r2, [r7, #24]
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	011b      	lsls	r3, r3, #4
 8006f70:	1a9b      	subs	r3, r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4403      	add	r3, r0
 8006f76:	332c      	adds	r3, #44	@ 0x2c
 8006f78:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8006f7a:	6879      	ldr	r1, [r7, #4]
 8006f7c:	69ba      	ldr	r2, [r7, #24]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	011b      	lsls	r3, r3, #4
 8006f82:	1a9b      	subs	r3, r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	440b      	add	r3, r1
 8006f88:	3338      	adds	r3, #56	@ 0x38
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	18d1      	adds	r1, r2, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	69ba      	ldr	r2, [r7, #24]
 8006f94:	4613      	mov	r3, r2
 8006f96:	011b      	lsls	r3, r3, #4
 8006f98:	1a9b      	subs	r3, r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	4403      	add	r3, r0
 8006f9e:	3338      	adds	r3, #56	@ 0x38
 8006fa0:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	6a3b      	ldr	r3, [r7, #32]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	0cdb      	lsrs	r3, r3, #19
 8006fb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fb6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006fb8:	6879      	ldr	r1, [r7, #4]
 8006fba:	69ba      	ldr	r2, [r7, #24]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	011b      	lsls	r3, r3, #4
 8006fc0:	1a9b      	subs	r3, r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	440b      	add	r3, r1
 8006fc6:	3328      	adds	r3, #40	@ 0x28
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d13f      	bne.n	8007052 <HCD_RXQLVL_IRQHandler+0x1b4>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d03c      	beq.n	8007052 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	015a      	lsls	r2, r3, #5
 8006fdc:	6a3b      	ldr	r3, [r7, #32]
 8006fde:	4413      	add	r3, r2
 8006fe0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006fee:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006ff6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	015a      	lsls	r2, r3, #5
 8006ffc:	6a3b      	ldr	r3, [r7, #32]
 8006ffe:	4413      	add	r3, r2
 8007000:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007004:	461a      	mov	r2, r3
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800700a:	6879      	ldr	r1, [r7, #4]
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	4613      	mov	r3, r2
 8007010:	011b      	lsls	r3, r3, #4
 8007012:	1a9b      	subs	r3, r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	440b      	add	r3, r1
 8007018:	333c      	adds	r3, #60	@ 0x3c
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	f083 0301 	eor.w	r3, r3, #1
 8007020:	b2d8      	uxtb	r0, r3
 8007022:	6879      	ldr	r1, [r7, #4]
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	4613      	mov	r3, r2
 8007028:	011b      	lsls	r3, r3, #4
 800702a:	1a9b      	subs	r3, r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	440b      	add	r3, r1
 8007030:	333c      	adds	r3, #60	@ 0x3c
 8007032:	4602      	mov	r2, r0
 8007034:	701a      	strb	r2, [r3, #0]
      break;
 8007036:	e00c      	b.n	8007052 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8007038:	6879      	ldr	r1, [r7, #4]
 800703a:	69ba      	ldr	r2, [r7, #24]
 800703c:	4613      	mov	r3, r2
 800703e:	011b      	lsls	r3, r3, #4
 8007040:	1a9b      	subs	r3, r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	440b      	add	r3, r1
 8007046:	334c      	adds	r3, #76	@ 0x4c
 8007048:	2204      	movs	r2, #4
 800704a:	701a      	strb	r2, [r3, #0]
      break;
 800704c:	e001      	b.n	8007052 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800704e:	bf00      	nop
 8007050:	e000      	b.n	8007054 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8007052:	bf00      	nop
  }
}
 8007054:	bf00      	nop
 8007056:	3728      	adds	r7, #40	@ 0x28
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007088:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f003 0302 	and.w	r3, r3, #2
 8007090:	2b02      	cmp	r3, #2
 8007092:	d10b      	bne.n	80070ac <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f003 0301 	and.w	r3, r3, #1
 800709a:	2b01      	cmp	r3, #1
 800709c:	d102      	bne.n	80070a4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f00d f818 	bl	80140d4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f043 0302 	orr.w	r3, r3, #2
 80070aa:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f003 0308 	and.w	r3, r3, #8
 80070b2:	2b08      	cmp	r3, #8
 80070b4:	d132      	bne.n	800711c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	f043 0308 	orr.w	r3, r3, #8
 80070bc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f003 0304 	and.w	r3, r3, #4
 80070c4:	2b04      	cmp	r3, #4
 80070c6:	d126      	bne.n	8007116 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	7a5b      	ldrb	r3, [r3, #9]
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d113      	bne.n	80070f8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80070d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80070da:	d106      	bne.n	80070ea <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2102      	movs	r1, #2
 80070e2:	4618      	mov	r0, r3
 80070e4:	f007 f8ba 	bl	800e25c <USB_InitFSLSPClkSel>
 80070e8:	e011      	b.n	800710e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2101      	movs	r1, #1
 80070f0:	4618      	mov	r0, r3
 80070f2:	f007 f8b3 	bl	800e25c <USB_InitFSLSPClkSel>
 80070f6:	e00a      	b.n	800710e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	79db      	ldrb	r3, [r3, #7]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d106      	bne.n	800710e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007106:	461a      	mov	r2, r3
 8007108:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800710c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f00d f80e 	bl	8014130 <HAL_HCD_PortEnabled_Callback>
 8007114:	e002      	b.n	800711c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f00d f818 	bl	801414c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f003 0320 	and.w	r3, r3, #32
 8007122:	2b20      	cmp	r3, #32
 8007124:	d103      	bne.n	800712e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	f043 0320 	orr.w	r3, r3, #32
 800712c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007134:	461a      	mov	r2, r3
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	6013      	str	r3, [r2, #0]
}
 800713a:	bf00      	nop
 800713c:	3718      	adds	r7, #24
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
	...

08007144 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d101      	bne.n	8007156 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e08b      	b.n	800726e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800715c:	b2db      	uxtb	r3, r3
 800715e:	2b00      	cmp	r3, #0
 8007160:	d106      	bne.n	8007170 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f7fa ff88 	bl	8002080 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2224      	movs	r2, #36	@ 0x24
 8007174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f022 0201 	bic.w	r2, r2, #1
 8007186:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007194:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	689a      	ldr	r2, [r3, #8]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80071a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d107      	bne.n	80071be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	689a      	ldr	r2, [r3, #8]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80071ba:	609a      	str	r2, [r3, #8]
 80071bc:	e006      	b.n	80071cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	689a      	ldr	r2, [r3, #8]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80071ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d108      	bne.n	80071e6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071e2:	605a      	str	r2, [r3, #4]
 80071e4:	e007      	b.n	80071f6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80071f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	6859      	ldr	r1, [r3, #4]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	4b1d      	ldr	r3, [pc, #116]	@ (8007278 <HAL_I2C_Init+0x134>)
 8007202:	430b      	orrs	r3, r1
 8007204:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68da      	ldr	r2, [r3, #12]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007214:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	691a      	ldr	r2, [r3, #16]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	430a      	orrs	r2, r1
 800722e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	69d9      	ldr	r1, [r3, #28]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a1a      	ldr	r2, [r3, #32]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	430a      	orrs	r2, r1
 800723e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f042 0201 	orr.w	r2, r2, #1
 800724e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2220      	movs	r2, #32
 800725a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	02008000 	.word	0x02008000

0800727c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b20      	cmp	r3, #32
 8007290:	d138      	bne.n	8007304 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007298:	2b01      	cmp	r3, #1
 800729a:	d101      	bne.n	80072a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800729c:	2302      	movs	r3, #2
 800729e:	e032      	b.n	8007306 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2224      	movs	r2, #36	@ 0x24
 80072ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 0201 	bic.w	r2, r2, #1
 80072be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80072ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6819      	ldr	r1, [r3, #0]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	430a      	orrs	r2, r1
 80072de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f042 0201 	orr.w	r2, r2, #1
 80072ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2220      	movs	r2, #32
 80072f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007300:	2300      	movs	r3, #0
 8007302:	e000      	b.n	8007306 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007304:	2302      	movs	r3, #2
  }
}
 8007306:	4618      	mov	r0, r3
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007312:	b480      	push	{r7}
 8007314:	b085      	sub	sp, #20
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
 800731a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007322:	b2db      	uxtb	r3, r3
 8007324:	2b20      	cmp	r3, #32
 8007326:	d139      	bne.n	800739c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800732e:	2b01      	cmp	r3, #1
 8007330:	d101      	bne.n	8007336 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007332:	2302      	movs	r3, #2
 8007334:	e033      	b.n	800739e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2224      	movs	r2, #36	@ 0x24
 8007342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f022 0201 	bic.w	r2, r2, #1
 8007354:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007364:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	021b      	lsls	r3, r3, #8
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	4313      	orrs	r3, r2
 800736e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f042 0201 	orr.w	r2, r2, #1
 8007386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2220      	movs	r2, #32
 800738c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007398:	2300      	movs	r3, #0
 800739a:	e000      	b.n	800739e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800739c:	2302      	movs	r3, #2
  }
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3714      	adds	r7, #20
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b084      	sub	sp, #16
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d101      	bne.n	80073bc <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e08f      	b.n	80074dc <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d106      	bne.n	80073d6 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f7fa fefd 	bl	80021d0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2202      	movs	r2, #2
 80073da:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	699a      	ldr	r2, [r3, #24]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80073ec:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6999      	ldr	r1, [r3, #24]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007402:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	430a      	orrs	r2, r1
 8007410:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	041b      	lsls	r3, r3, #16
 8007418:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6999      	ldr	r1, [r3, #24]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	430a      	orrs	r2, r1
 8007426:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	041b      	lsls	r3, r3, #16
 800742e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a19      	ldr	r1, [r3, #32]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	430a      	orrs	r2, r1
 800743c:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007442:	041b      	lsls	r3, r3, #16
 8007444:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	430a      	orrs	r2, r1
 8007452:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007458:	041b      	lsls	r3, r3, #16
 800745a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	430a      	orrs	r2, r1
 8007468:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007470:	021b      	lsls	r3, r3, #8
 8007472:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800747a:	041b      	lsls	r3, r3, #16
 800747c:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800748c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	4313      	orrs	r3, r2
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80074a0:	431a      	orrs	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f042 0206 	orr.w	r2, r2, #6
 80074b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	699a      	ldr	r2, [r3, #24]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f042 0201 	orr.w	r2, r2, #1
 80074c8:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074f2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074fa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f003 0304 	and.w	r3, r3, #4
 8007502:	2b00      	cmp	r3, #0
 8007504:	d023      	beq.n	800754e <HAL_LTDC_IRQHandler+0x6a>
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	f003 0304 	and.w	r3, r3, #4
 800750c:	2b00      	cmp	r3, #0
 800750e:	d01e      	beq.n	800754e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f022 0204 	bic.w	r2, r2, #4
 800751e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2204      	movs	r2, #4
 8007526:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800752e:	f043 0201 	orr.w	r2, r3, #1
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2204      	movs	r2, #4
 800753c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f86f 	bl	800762c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f003 0302 	and.w	r3, r3, #2
 8007554:	2b00      	cmp	r3, #0
 8007556:	d023      	beq.n	80075a0 <HAL_LTDC_IRQHandler+0xbc>
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	f003 0302 	and.w	r3, r3, #2
 800755e:	2b00      	cmp	r3, #0
 8007560:	d01e      	beq.n	80075a0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f022 0202 	bic.w	r2, r2, #2
 8007570:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2202      	movs	r2, #2
 8007578:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007580:	f043 0202 	orr.w	r2, r3, #2
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2204      	movs	r2, #4
 800758e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f846 	bl	800762c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d01b      	beq.n	80075e2 <HAL_LTDC_IRQHandler+0xfe>
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d016      	beq.n	80075e2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f022 0201 	bic.w	r2, r2, #1
 80075c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2201      	movs	r2, #1
 80075ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f82f 	bl	8007640 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f003 0308 	and.w	r3, r3, #8
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d01b      	beq.n	8007624 <HAL_LTDC_IRQHandler+0x140>
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	f003 0308 	and.w	r3, r3, #8
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d016      	beq.n	8007624 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f022 0208 	bic.w	r2, r2, #8
 8007604:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2208      	movs	r2, #8
 800760c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f818 	bl	8007654 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007624:	bf00      	nop
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800765c:	bf00      	nop
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007668:	b5b0      	push	{r4, r5, r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800767a:	2b01      	cmp	r3, #1
 800767c:	d101      	bne.n	8007682 <HAL_LTDC_ConfigLayer+0x1a>
 800767e:	2302      	movs	r3, #2
 8007680:	e02c      	b.n	80076dc <HAL_LTDC_ConfigLayer+0x74>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2202      	movs	r2, #2
 800768e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2134      	movs	r1, #52	@ 0x34
 8007698:	fb01 f303 	mul.w	r3, r1, r3
 800769c:	4413      	add	r3, r2
 800769e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	4614      	mov	r4, r2
 80076a6:	461d      	mov	r5, r3
 80076a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80076aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80076ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80076b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076b4:	682b      	ldr	r3, [r5, #0]
 80076b6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	68b9      	ldr	r1, [r7, #8]
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f000 f811 	bl	80076e4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2201      	movs	r2, #1
 80076c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bdb0      	pop	{r4, r5, r7, pc}

080076e4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b089      	sub	sp, #36	@ 0x24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	0c1b      	lsrs	r3, r3, #16
 80076fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007700:	4413      	add	r3, r2
 8007702:	041b      	lsls	r3, r3, #16
 8007704:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	461a      	mov	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	01db      	lsls	r3, r3, #7
 8007710:	4413      	add	r3, r2
 8007712:	3384      	adds	r3, #132	@ 0x84
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	6812      	ldr	r2, [r2, #0]
 800771a:	4611      	mov	r1, r2
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	01d2      	lsls	r2, r2, #7
 8007720:	440a      	add	r2, r1
 8007722:	3284      	adds	r2, #132	@ 0x84
 8007724:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007728:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	0c1b      	lsrs	r3, r3, #16
 8007736:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800773a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800773c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4619      	mov	r1, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	01db      	lsls	r3, r3, #7
 8007748:	440b      	add	r3, r1
 800774a:	3384      	adds	r3, #132	@ 0x84
 800774c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007752:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	68da      	ldr	r2, [r3, #12]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007762:	4413      	add	r3, r2
 8007764:	041b      	lsls	r3, r3, #16
 8007766:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	461a      	mov	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	01db      	lsls	r3, r3, #7
 8007772:	4413      	add	r3, r2
 8007774:	3384      	adds	r3, #132	@ 0x84
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	6812      	ldr	r2, [r2, #0]
 800777c:	4611      	mov	r1, r2
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	01d2      	lsls	r2, r2, #7
 8007782:	440a      	add	r2, r1
 8007784:	3284      	adds	r2, #132	@ 0x84
 8007786:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800778a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	689a      	ldr	r2, [r3, #8]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800779a:	4413      	add	r3, r2
 800779c:	1c5a      	adds	r2, r3, #1
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4619      	mov	r1, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	01db      	lsls	r3, r3, #7
 80077a8:	440b      	add	r3, r1
 80077aa:	3384      	adds	r3, #132	@ 0x84
 80077ac:	4619      	mov	r1, r3
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	461a      	mov	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	01db      	lsls	r3, r3, #7
 80077be:	4413      	add	r3, r2
 80077c0:	3384      	adds	r3, #132	@ 0x84
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	6812      	ldr	r2, [r2, #0]
 80077c8:	4611      	mov	r1, r2
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	01d2      	lsls	r2, r2, #7
 80077ce:	440a      	add	r2, r1
 80077d0:	3284      	adds	r2, #132	@ 0x84
 80077d2:	f023 0307 	bic.w	r3, r3, #7
 80077d6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	461a      	mov	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	01db      	lsls	r3, r3, #7
 80077e2:	4413      	add	r3, r2
 80077e4:	3384      	adds	r3, #132	@ 0x84
 80077e6:	461a      	mov	r2, r3
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80077f4:	021b      	lsls	r3, r3, #8
 80077f6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80077fe:	041b      	lsls	r3, r3, #16
 8007800:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	061b      	lsls	r3, r3, #24
 8007808:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007810:	461a      	mov	r2, r3
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	431a      	orrs	r2, r3
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	431a      	orrs	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4619      	mov	r1, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	01db      	lsls	r3, r3, #7
 8007824:	440b      	add	r3, r1
 8007826:	3384      	adds	r3, #132	@ 0x84
 8007828:	4619      	mov	r1, r3
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	4313      	orrs	r3, r2
 800782e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	461a      	mov	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	01db      	lsls	r3, r3, #7
 800783a:	4413      	add	r3, r2
 800783c:	3384      	adds	r3, #132	@ 0x84
 800783e:	695b      	ldr	r3, [r3, #20]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	6812      	ldr	r2, [r2, #0]
 8007844:	4611      	mov	r1, r2
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	01d2      	lsls	r2, r2, #7
 800784a:	440a      	add	r2, r1
 800784c:	3284      	adds	r2, #132	@ 0x84
 800784e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007852:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	461a      	mov	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	01db      	lsls	r3, r3, #7
 800785e:	4413      	add	r3, r2
 8007860:	3384      	adds	r3, #132	@ 0x84
 8007862:	461a      	mov	r2, r3
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	695b      	ldr	r3, [r3, #20]
 8007868:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	461a      	mov	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	01db      	lsls	r3, r3, #7
 8007874:	4413      	add	r3, r2
 8007876:	3384      	adds	r3, #132	@ 0x84
 8007878:	69da      	ldr	r2, [r3, #28]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4619      	mov	r1, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	01db      	lsls	r3, r3, #7
 8007884:	440b      	add	r3, r1
 8007886:	3384      	adds	r3, #132	@ 0x84
 8007888:	4619      	mov	r1, r3
 800788a:	4b4f      	ldr	r3, [pc, #316]	@ (80079c8 <LTDC_SetConfig+0x2e4>)
 800788c:	4013      	ands	r3, r2
 800788e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	69da      	ldr	r2, [r3, #28]
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	6a1b      	ldr	r3, [r3, #32]
 8007898:	68f9      	ldr	r1, [r7, #12]
 800789a:	6809      	ldr	r1, [r1, #0]
 800789c:	4608      	mov	r0, r1
 800789e:	6879      	ldr	r1, [r7, #4]
 80078a0:	01c9      	lsls	r1, r1, #7
 80078a2:	4401      	add	r1, r0
 80078a4:	3184      	adds	r1, #132	@ 0x84
 80078a6:	4313      	orrs	r3, r2
 80078a8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	461a      	mov	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	01db      	lsls	r3, r3, #7
 80078b4:	4413      	add	r3, r2
 80078b6:	3384      	adds	r3, #132	@ 0x84
 80078b8:	461a      	mov	r2, r3
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078be:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d102      	bne.n	80078ce <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 80078c8:	2304      	movs	r3, #4
 80078ca:	61fb      	str	r3, [r7, #28]
 80078cc:	e01b      	b.n	8007906 <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d102      	bne.n	80078dc <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 80078d6:	2303      	movs	r3, #3
 80078d8:	61fb      	str	r3, [r7, #28]
 80078da:	e014      	b.n	8007906 <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	2b04      	cmp	r3, #4
 80078e2:	d00b      	beq.n	80078fc <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d007      	beq.n	80078fc <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80078f0:	2b03      	cmp	r3, #3
 80078f2:	d003      	beq.n	80078fc <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80078f8:	2b07      	cmp	r3, #7
 80078fa:	d102      	bne.n	8007902 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 80078fc:	2302      	movs	r3, #2
 80078fe:	61fb      	str	r3, [r7, #28]
 8007900:	e001      	b.n	8007906 <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 8007902:	2301      	movs	r3, #1
 8007904:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	461a      	mov	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	01db      	lsls	r3, r3, #7
 8007910:	4413      	add	r3, r2
 8007912:	3384      	adds	r3, #132	@ 0x84
 8007914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	6812      	ldr	r2, [r2, #0]
 800791a:	4611      	mov	r1, r2
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	01d2      	lsls	r2, r2, #7
 8007920:	440a      	add	r2, r1
 8007922:	3284      	adds	r2, #132	@ 0x84
 8007924:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8007928:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800792e:	69fa      	ldr	r2, [r7, #28]
 8007930:	fb02 f303 	mul.w	r3, r2, r3
 8007934:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	6859      	ldr	r1, [r3, #4]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	1acb      	subs	r3, r1, r3
 8007940:	69f9      	ldr	r1, [r7, #28]
 8007942:	fb01 f303 	mul.w	r3, r1, r3
 8007946:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007948:	68f9      	ldr	r1, [r7, #12]
 800794a:	6809      	ldr	r1, [r1, #0]
 800794c:	4608      	mov	r0, r1
 800794e:	6879      	ldr	r1, [r7, #4]
 8007950:	01c9      	lsls	r1, r1, #7
 8007952:	4401      	add	r1, r0
 8007954:	3184      	adds	r1, #132	@ 0x84
 8007956:	4313      	orrs	r3, r2
 8007958:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	461a      	mov	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	01db      	lsls	r3, r3, #7
 8007964:	4413      	add	r3, r2
 8007966:	3384      	adds	r3, #132	@ 0x84
 8007968:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4619      	mov	r1, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	01db      	lsls	r3, r3, #7
 8007974:	440b      	add	r3, r1
 8007976:	3384      	adds	r3, #132	@ 0x84
 8007978:	4619      	mov	r1, r3
 800797a:	4b14      	ldr	r3, [pc, #80]	@ (80079cc <LTDC_SetConfig+0x2e8>)
 800797c:	4013      	ands	r3, r2
 800797e:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	461a      	mov	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	01db      	lsls	r3, r3, #7
 800798a:	4413      	add	r3, r2
 800798c:	3384      	adds	r3, #132	@ 0x84
 800798e:	461a      	mov	r2, r3
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007994:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	461a      	mov	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	01db      	lsls	r3, r3, #7
 80079a0:	4413      	add	r3, r2
 80079a2:	3384      	adds	r3, #132	@ 0x84
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	6812      	ldr	r2, [r2, #0]
 80079aa:	4611      	mov	r1, r2
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	01d2      	lsls	r2, r2, #7
 80079b0:	440a      	add	r2, r1
 80079b2:	3284      	adds	r2, #132	@ 0x84
 80079b4:	f043 0301 	orr.w	r3, r3, #1
 80079b8:	6013      	str	r3, [r2, #0]
}
 80079ba:	bf00      	nop
 80079bc:	3724      	adds	r7, #36	@ 0x24
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
 80079c8:	fffff8f8 	.word	0xfffff8f8
 80079cc:	fffff800 	.word	0xfffff800

080079d0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80079d0:	b480      	push	{r7}
 80079d2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079d4:	4b05      	ldr	r3, [pc, #20]	@ (80079ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a04      	ldr	r2, [pc, #16]	@ (80079ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80079da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079de:	6013      	str	r3, [r2, #0]
}
 80079e0:	bf00      	nop
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	40007000 	.word	0x40007000

080079f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80079f6:	2300      	movs	r3, #0
 80079f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80079fa:	4b23      	ldr	r3, [pc, #140]	@ (8007a88 <HAL_PWREx_EnableOverDrive+0x98>)
 80079fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079fe:	4a22      	ldr	r2, [pc, #136]	@ (8007a88 <HAL_PWREx_EnableOverDrive+0x98>)
 8007a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8007a06:	4b20      	ldr	r3, [pc, #128]	@ (8007a88 <HAL_PWREx_EnableOverDrive+0x98>)
 8007a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a0e:	603b      	str	r3, [r7, #0]
 8007a10:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007a12:	4b1e      	ldr	r3, [pc, #120]	@ (8007a8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a1d      	ldr	r2, [pc, #116]	@ (8007a8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a1c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a1e:	f7fb fd95 	bl	800354c <HAL_GetTick>
 8007a22:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007a24:	e009      	b.n	8007a3a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007a26:	f7fb fd91 	bl	800354c <HAL_GetTick>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a34:	d901      	bls.n	8007a3a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007a36:	2303      	movs	r3, #3
 8007a38:	e022      	b.n	8007a80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007a3a:	4b14      	ldr	r3, [pc, #80]	@ (8007a8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a46:	d1ee      	bne.n	8007a26 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007a48:	4b10      	ldr	r3, [pc, #64]	@ (8007a8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a0f      	ldr	r2, [pc, #60]	@ (8007a8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007a4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a52:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a54:	f7fb fd7a 	bl	800354c <HAL_GetTick>
 8007a58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007a5a:	e009      	b.n	8007a70 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007a5c:	f7fb fd76 	bl	800354c <HAL_GetTick>
 8007a60:	4602      	mov	r2, r0
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a6a:	d901      	bls.n	8007a70 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e007      	b.n	8007a80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007a70:	4b06      	ldr	r3, [pc, #24]	@ (8007a8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a7c:	d1ee      	bne.n	8007a5c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	40023800 	.word	0x40023800
 8007a8c:	40007000 	.word	0x40007000

08007a90 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af02      	add	r7, sp, #8
 8007a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007a98:	f7fb fd58 	bl	800354c <HAL_GetTick>
 8007a9c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d101      	bne.n	8007aa8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e067      	b.n	8007b78 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10b      	bne.n	8007acc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7fa fc4f 	bl	8002360 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007ac2:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f85e 	bl	8007b88 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	3b01      	subs	r3, #1
 8007adc:	021a      	lsls	r2, r3, #8
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	2120      	movs	r1, #32
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f856 	bl	8007ba4 <QSPI_WaitFlagStateUntilTimeout>
 8007af8:	4603      	mov	r3, r0
 8007afa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007afc:	7afb      	ldrb	r3, [r7, #11]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d135      	bne.n	8007b6e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	4b1d      	ldr	r3, [pc, #116]	@ (8007b80 <HAL_QSPI_Init+0xf0>)
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	6852      	ldr	r2, [r2, #4]
 8007b10:	0611      	lsls	r1, r2, #24
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	68d2      	ldr	r2, [r2, #12]
 8007b16:	4311      	orrs	r1, r2
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	69d2      	ldr	r2, [r2, #28]
 8007b1c:	4311      	orrs	r1, r2
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	6a12      	ldr	r2, [r2, #32]
 8007b22:	4311      	orrs	r1, r2
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	6812      	ldr	r2, [r2, #0]
 8007b28:	430b      	orrs	r3, r1
 8007b2a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	685a      	ldr	r2, [r3, #4]
 8007b32:	4b14      	ldr	r3, [pc, #80]	@ (8007b84 <HAL_QSPI_Init+0xf4>)
 8007b34:	4013      	ands	r3, r2
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	6912      	ldr	r2, [r2, #16]
 8007b3a:	0411      	lsls	r1, r2, #16
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	6952      	ldr	r2, [r2, #20]
 8007b40:	4311      	orrs	r1, r2
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	6992      	ldr	r2, [r2, #24]
 8007b46:	4311      	orrs	r1, r2
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	6812      	ldr	r2, [r2, #0]
 8007b4c:	430b      	orrs	r3, r1
 8007b4e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f042 0201 	orr.w	r2, r2, #1
 8007b5e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8007b76:	7afb      	ldrb	r3, [r7, #11]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	00ffff2f 	.word	0x00ffff2f
 8007b84:	ffe0f8fe 	.word	0xffe0f8fe

08007b88 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	683a      	ldr	r2, [r7, #0]
 8007b96:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8007b98:	bf00      	nop
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	603b      	str	r3, [r7, #0]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007bb4:	e01a      	b.n	8007bec <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bbc:	d016      	beq.n	8007bec <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bbe:	f7fb fcc5 	bl	800354c <HAL_GetTick>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	69ba      	ldr	r2, [r7, #24]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d302      	bcc.n	8007bd4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10b      	bne.n	8007bec <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2204      	movs	r2, #4
 8007bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007be0:	f043 0201 	orr.w	r2, r3, #1
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e00e      	b.n	8007c0a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	689a      	ldr	r2, [r3, #8]
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	bf14      	ite	ne
 8007bfa:	2301      	movne	r3, #1
 8007bfc:	2300      	moveq	r3, #0
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	461a      	mov	r2, r3
 8007c02:	79fb      	ldrb	r3, [r7, #7]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d1d6      	bne.n	8007bb6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
	...

08007c14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d101      	bne.n	8007c2a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e291      	b.n	800814e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 0301 	and.w	r3, r3, #1
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 8087 	beq.w	8007d46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007c38:	4b96      	ldr	r3, [pc, #600]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	f003 030c 	and.w	r3, r3, #12
 8007c40:	2b04      	cmp	r3, #4
 8007c42:	d00c      	beq.n	8007c5e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c44:	4b93      	ldr	r3, [pc, #588]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f003 030c 	and.w	r3, r3, #12
 8007c4c:	2b08      	cmp	r3, #8
 8007c4e:	d112      	bne.n	8007c76 <HAL_RCC_OscConfig+0x62>
 8007c50:	4b90      	ldr	r3, [pc, #576]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c5c:	d10b      	bne.n	8007c76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c5e:	4b8d      	ldr	r3, [pc, #564]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d06c      	beq.n	8007d44 <HAL_RCC_OscConfig+0x130>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d168      	bne.n	8007d44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e26b      	b.n	800814e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c7e:	d106      	bne.n	8007c8e <HAL_RCC_OscConfig+0x7a>
 8007c80:	4b84      	ldr	r3, [pc, #528]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a83      	ldr	r2, [pc, #524]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007c86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c8a:	6013      	str	r3, [r2, #0]
 8007c8c:	e02e      	b.n	8007cec <HAL_RCC_OscConfig+0xd8>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10c      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x9c>
 8007c96:	4b7f      	ldr	r3, [pc, #508]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a7e      	ldr	r2, [pc, #504]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007c9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ca0:	6013      	str	r3, [r2, #0]
 8007ca2:	4b7c      	ldr	r3, [pc, #496]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a7b      	ldr	r2, [pc, #492]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007ca8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007cac:	6013      	str	r3, [r2, #0]
 8007cae:	e01d      	b.n	8007cec <HAL_RCC_OscConfig+0xd8>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007cb8:	d10c      	bne.n	8007cd4 <HAL_RCC_OscConfig+0xc0>
 8007cba:	4b76      	ldr	r3, [pc, #472]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a75      	ldr	r2, [pc, #468]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007cc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007cc4:	6013      	str	r3, [r2, #0]
 8007cc6:	4b73      	ldr	r3, [pc, #460]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a72      	ldr	r2, [pc, #456]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007ccc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cd0:	6013      	str	r3, [r2, #0]
 8007cd2:	e00b      	b.n	8007cec <HAL_RCC_OscConfig+0xd8>
 8007cd4:	4b6f      	ldr	r3, [pc, #444]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a6e      	ldr	r2, [pc, #440]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007cda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007cde:	6013      	str	r3, [r2, #0]
 8007ce0:	4b6c      	ldr	r3, [pc, #432]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a6b      	ldr	r2, [pc, #428]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007ce6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d013      	beq.n	8007d1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cf4:	f7fb fc2a 	bl	800354c <HAL_GetTick>
 8007cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cfa:	e008      	b.n	8007d0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007cfc:	f7fb fc26 	bl	800354c <HAL_GetTick>
 8007d00:	4602      	mov	r2, r0
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	2b64      	cmp	r3, #100	@ 0x64
 8007d08:	d901      	bls.n	8007d0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e21f      	b.n	800814e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d0e:	4b61      	ldr	r3, [pc, #388]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d0f0      	beq.n	8007cfc <HAL_RCC_OscConfig+0xe8>
 8007d1a:	e014      	b.n	8007d46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d1c:	f7fb fc16 	bl	800354c <HAL_GetTick>
 8007d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d22:	e008      	b.n	8007d36 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d24:	f7fb fc12 	bl	800354c <HAL_GetTick>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	2b64      	cmp	r3, #100	@ 0x64
 8007d30:	d901      	bls.n	8007d36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e20b      	b.n	800814e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d36:	4b57      	ldr	r3, [pc, #348]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1f0      	bne.n	8007d24 <HAL_RCC_OscConfig+0x110>
 8007d42:	e000      	b.n	8007d46 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 0302 	and.w	r3, r3, #2
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d069      	beq.n	8007e26 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007d52:	4b50      	ldr	r3, [pc, #320]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f003 030c 	and.w	r3, r3, #12
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00b      	beq.n	8007d76 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d5e:	4b4d      	ldr	r3, [pc, #308]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f003 030c 	and.w	r3, r3, #12
 8007d66:	2b08      	cmp	r3, #8
 8007d68:	d11c      	bne.n	8007da4 <HAL_RCC_OscConfig+0x190>
 8007d6a:	4b4a      	ldr	r3, [pc, #296]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d116      	bne.n	8007da4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d76:	4b47      	ldr	r3, [pc, #284]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 0302 	and.w	r3, r3, #2
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d005      	beq.n	8007d8e <HAL_RCC_OscConfig+0x17a>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d001      	beq.n	8007d8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e1df      	b.n	800814e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d8e:	4b41      	ldr	r3, [pc, #260]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	00db      	lsls	r3, r3, #3
 8007d9c:	493d      	ldr	r1, [pc, #244]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007da2:	e040      	b.n	8007e26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d023      	beq.n	8007df4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007dac:	4b39      	ldr	r3, [pc, #228]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a38      	ldr	r2, [pc, #224]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007db2:	f043 0301 	orr.w	r3, r3, #1
 8007db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007db8:	f7fb fbc8 	bl	800354c <HAL_GetTick>
 8007dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dbe:	e008      	b.n	8007dd2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007dc0:	f7fb fbc4 	bl	800354c <HAL_GetTick>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d901      	bls.n	8007dd2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e1bd      	b.n	800814e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dd2:	4b30      	ldr	r3, [pc, #192]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0302 	and.w	r3, r3, #2
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d0f0      	beq.n	8007dc0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dde:	4b2d      	ldr	r3, [pc, #180]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	00db      	lsls	r3, r3, #3
 8007dec:	4929      	ldr	r1, [pc, #164]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007dee:	4313      	orrs	r3, r2
 8007df0:	600b      	str	r3, [r1, #0]
 8007df2:	e018      	b.n	8007e26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007df4:	4b27      	ldr	r3, [pc, #156]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a26      	ldr	r2, [pc, #152]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007dfa:	f023 0301 	bic.w	r3, r3, #1
 8007dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e00:	f7fb fba4 	bl	800354c <HAL_GetTick>
 8007e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e06:	e008      	b.n	8007e1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e08:	f7fb fba0 	bl	800354c <HAL_GetTick>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d901      	bls.n	8007e1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007e16:	2303      	movs	r3, #3
 8007e18:	e199      	b.n	800814e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 0302 	and.w	r3, r3, #2
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1f0      	bne.n	8007e08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 0308 	and.w	r3, r3, #8
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d038      	beq.n	8007ea4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	695b      	ldr	r3, [r3, #20]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d019      	beq.n	8007e6e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e3a:	4b16      	ldr	r3, [pc, #88]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007e3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e3e:	4a15      	ldr	r2, [pc, #84]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007e40:	f043 0301 	orr.w	r3, r3, #1
 8007e44:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e46:	f7fb fb81 	bl	800354c <HAL_GetTick>
 8007e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e4c:	e008      	b.n	8007e60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e4e:	f7fb fb7d 	bl	800354c <HAL_GetTick>
 8007e52:	4602      	mov	r2, r0
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	1ad3      	subs	r3, r2, r3
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d901      	bls.n	8007e60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	e176      	b.n	800814e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e60:	4b0c      	ldr	r3, [pc, #48]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007e62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e64:	f003 0302 	and.w	r3, r3, #2
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d0f0      	beq.n	8007e4e <HAL_RCC_OscConfig+0x23a>
 8007e6c:	e01a      	b.n	8007ea4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e6e:	4b09      	ldr	r3, [pc, #36]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007e70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e72:	4a08      	ldr	r2, [pc, #32]	@ (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007e74:	f023 0301 	bic.w	r3, r3, #1
 8007e78:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e7a:	f7fb fb67 	bl	800354c <HAL_GetTick>
 8007e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e80:	e00a      	b.n	8007e98 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e82:	f7fb fb63 	bl	800354c <HAL_GetTick>
 8007e86:	4602      	mov	r2, r0
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d903      	bls.n	8007e98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007e90:	2303      	movs	r3, #3
 8007e92:	e15c      	b.n	800814e <HAL_RCC_OscConfig+0x53a>
 8007e94:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e98:	4b91      	ldr	r3, [pc, #580]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 8007e9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e9c:	f003 0302 	and.w	r3, r3, #2
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d1ee      	bne.n	8007e82 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 0304 	and.w	r3, r3, #4
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f000 80a4 	beq.w	8007ffa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007eb2:	4b8b      	ldr	r3, [pc, #556]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 8007eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10d      	bne.n	8007eda <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ebe:	4b88      	ldr	r3, [pc, #544]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec2:	4a87      	ldr	r2, [pc, #540]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 8007ec4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8007eca:	4b85      	ldr	r3, [pc, #532]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 8007ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ed2:	60bb      	str	r3, [r7, #8]
 8007ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007eda:	4b82      	ldr	r3, [pc, #520]	@ (80080e4 <HAL_RCC_OscConfig+0x4d0>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d118      	bne.n	8007f18 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007ee6:	4b7f      	ldr	r3, [pc, #508]	@ (80080e4 <HAL_RCC_OscConfig+0x4d0>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a7e      	ldr	r2, [pc, #504]	@ (80080e4 <HAL_RCC_OscConfig+0x4d0>)
 8007eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ef2:	f7fb fb2b 	bl	800354c <HAL_GetTick>
 8007ef6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ef8:	e008      	b.n	8007f0c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007efa:	f7fb fb27 	bl	800354c <HAL_GetTick>
 8007efe:	4602      	mov	r2, r0
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	2b64      	cmp	r3, #100	@ 0x64
 8007f06:	d901      	bls.n	8007f0c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e120      	b.n	800814e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f0c:	4b75      	ldr	r3, [pc, #468]	@ (80080e4 <HAL_RCC_OscConfig+0x4d0>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d0f0      	beq.n	8007efa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d106      	bne.n	8007f2e <HAL_RCC_OscConfig+0x31a>
 8007f20:	4b6f      	ldr	r3, [pc, #444]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 8007f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f24:	4a6e      	ldr	r2, [pc, #440]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 8007f26:	f043 0301 	orr.w	r3, r3, #1
 8007f2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f2c:	e02d      	b.n	8007f8a <HAL_RCC_OscConfig+0x376>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d10c      	bne.n	8007f50 <HAL_RCC_OscConfig+0x33c>
 8007f36:	4b6a      	ldr	r3, [pc, #424]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 8007f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f3a:	4a69      	ldr	r2, [pc, #420]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 8007f3c:	f023 0301 	bic.w	r3, r3, #1
 8007f40:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f42:	4b67      	ldr	r3, [pc, #412]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 8007f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f46:	4a66      	ldr	r2, [pc, #408]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 8007f48:	f023 0304 	bic.w	r3, r3, #4
 8007f4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f4e:	e01c      	b.n	8007f8a <HAL_RCC_OscConfig+0x376>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	2b05      	cmp	r3, #5
 8007f56:	d10c      	bne.n	8007f72 <HAL_RCC_OscConfig+0x35e>
 8007f58:	4b61      	ldr	r3, [pc, #388]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 8007f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f5c:	4a60      	ldr	r2, [pc, #384]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 8007f5e:	f043 0304 	orr.w	r3, r3, #4
 8007f62:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f64:	4b5e      	ldr	r3, [pc, #376]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 8007f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f68:	4a5d      	ldr	r2, [pc, #372]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 8007f6a:	f043 0301 	orr.w	r3, r3, #1
 8007f6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f70:	e00b      	b.n	8007f8a <HAL_RCC_OscConfig+0x376>
 8007f72:	4b5b      	ldr	r3, [pc, #364]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 8007f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f76:	4a5a      	ldr	r2, [pc, #360]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 8007f78:	f023 0301 	bic.w	r3, r3, #1
 8007f7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f7e:	4b58      	ldr	r3, [pc, #352]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 8007f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f82:	4a57      	ldr	r2, [pc, #348]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 8007f84:	f023 0304 	bic.w	r3, r3, #4
 8007f88:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d015      	beq.n	8007fbe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f92:	f7fb fadb 	bl	800354c <HAL_GetTick>
 8007f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f98:	e00a      	b.n	8007fb0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f9a:	f7fb fad7 	bl	800354c <HAL_GetTick>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	1ad3      	subs	r3, r2, r3
 8007fa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d901      	bls.n	8007fb0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007fac:	2303      	movs	r3, #3
 8007fae:	e0ce      	b.n	800814e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fb0:	4b4b      	ldr	r3, [pc, #300]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 8007fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fb4:	f003 0302 	and.w	r3, r3, #2
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d0ee      	beq.n	8007f9a <HAL_RCC_OscConfig+0x386>
 8007fbc:	e014      	b.n	8007fe8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fbe:	f7fb fac5 	bl	800354c <HAL_GetTick>
 8007fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fc4:	e00a      	b.n	8007fdc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fc6:	f7fb fac1 	bl	800354c <HAL_GetTick>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d901      	bls.n	8007fdc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	e0b8      	b.n	800814e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fdc:	4b40      	ldr	r3, [pc, #256]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 8007fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fe0:	f003 0302 	and.w	r3, r3, #2
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d1ee      	bne.n	8007fc6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007fe8:	7dfb      	ldrb	r3, [r7, #23]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d105      	bne.n	8007ffa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fee:	4b3c      	ldr	r3, [pc, #240]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 8007ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff2:	4a3b      	ldr	r2, [pc, #236]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 8007ff4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ff8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f000 80a4 	beq.w	800814c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008004:	4b36      	ldr	r3, [pc, #216]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	f003 030c 	and.w	r3, r3, #12
 800800c:	2b08      	cmp	r3, #8
 800800e:	d06b      	beq.n	80080e8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	2b02      	cmp	r3, #2
 8008016:	d149      	bne.n	80080ac <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008018:	4b31      	ldr	r3, [pc, #196]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a30      	ldr	r2, [pc, #192]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 800801e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008024:	f7fb fa92 	bl	800354c <HAL_GetTick>
 8008028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800802a:	e008      	b.n	800803e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800802c:	f7fb fa8e 	bl	800354c <HAL_GetTick>
 8008030:	4602      	mov	r2, r0
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	2b02      	cmp	r3, #2
 8008038:	d901      	bls.n	800803e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800803a:	2303      	movs	r3, #3
 800803c:	e087      	b.n	800814e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800803e:	4b28      	ldr	r3, [pc, #160]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1f0      	bne.n	800802c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	69da      	ldr	r2, [r3, #28]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	431a      	orrs	r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008058:	019b      	lsls	r3, r3, #6
 800805a:	431a      	orrs	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008060:	085b      	lsrs	r3, r3, #1
 8008062:	3b01      	subs	r3, #1
 8008064:	041b      	lsls	r3, r3, #16
 8008066:	431a      	orrs	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800806c:	061b      	lsls	r3, r3, #24
 800806e:	4313      	orrs	r3, r2
 8008070:	4a1b      	ldr	r2, [pc, #108]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 8008072:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008076:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008078:	4b19      	ldr	r3, [pc, #100]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a18      	ldr	r2, [pc, #96]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 800807e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008084:	f7fb fa62 	bl	800354c <HAL_GetTick>
 8008088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800808a:	e008      	b.n	800809e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800808c:	f7fb fa5e 	bl	800354c <HAL_GetTick>
 8008090:	4602      	mov	r2, r0
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	2b02      	cmp	r3, #2
 8008098:	d901      	bls.n	800809e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800809a:	2303      	movs	r3, #3
 800809c:	e057      	b.n	800814e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800809e:	4b10      	ldr	r3, [pc, #64]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d0f0      	beq.n	800808c <HAL_RCC_OscConfig+0x478>
 80080aa:	e04f      	b.n	800814c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080ac:	4b0c      	ldr	r3, [pc, #48]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a0b      	ldr	r2, [pc, #44]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 80080b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80080b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080b8:	f7fb fa48 	bl	800354c <HAL_GetTick>
 80080bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080be:	e008      	b.n	80080d2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080c0:	f7fb fa44 	bl	800354c <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d901      	bls.n	80080d2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e03d      	b.n	800814e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080d2:	4b03      	ldr	r3, [pc, #12]	@ (80080e0 <HAL_RCC_OscConfig+0x4cc>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1f0      	bne.n	80080c0 <HAL_RCC_OscConfig+0x4ac>
 80080de:	e035      	b.n	800814c <HAL_RCC_OscConfig+0x538>
 80080e0:	40023800 	.word	0x40023800
 80080e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80080e8:	4b1b      	ldr	r3, [pc, #108]	@ (8008158 <HAL_RCC_OscConfig+0x544>)
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	699b      	ldr	r3, [r3, #24]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d028      	beq.n	8008148 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008100:	429a      	cmp	r2, r3
 8008102:	d121      	bne.n	8008148 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800810e:	429a      	cmp	r2, r3
 8008110:	d11a      	bne.n	8008148 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008118:	4013      	ands	r3, r2
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800811e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008120:	4293      	cmp	r3, r2
 8008122:	d111      	bne.n	8008148 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800812e:	085b      	lsrs	r3, r3, #1
 8008130:	3b01      	subs	r3, #1
 8008132:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008134:	429a      	cmp	r2, r3
 8008136:	d107      	bne.n	8008148 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008142:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008144:	429a      	cmp	r2, r3
 8008146:	d001      	beq.n	800814c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e000      	b.n	800814e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3718      	adds	r7, #24
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	40023800 	.word	0x40023800

0800815c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008166:	2300      	movs	r3, #0
 8008168:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d101      	bne.n	8008174 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	e0d0      	b.n	8008316 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008174:	4b6a      	ldr	r3, [pc, #424]	@ (8008320 <HAL_RCC_ClockConfig+0x1c4>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 030f 	and.w	r3, r3, #15
 800817c:	683a      	ldr	r2, [r7, #0]
 800817e:	429a      	cmp	r2, r3
 8008180:	d910      	bls.n	80081a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008182:	4b67      	ldr	r3, [pc, #412]	@ (8008320 <HAL_RCC_ClockConfig+0x1c4>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f023 020f 	bic.w	r2, r3, #15
 800818a:	4965      	ldr	r1, [pc, #404]	@ (8008320 <HAL_RCC_ClockConfig+0x1c4>)
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	4313      	orrs	r3, r2
 8008190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008192:	4b63      	ldr	r3, [pc, #396]	@ (8008320 <HAL_RCC_ClockConfig+0x1c4>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f003 030f 	and.w	r3, r3, #15
 800819a:	683a      	ldr	r2, [r7, #0]
 800819c:	429a      	cmp	r2, r3
 800819e:	d001      	beq.n	80081a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e0b8      	b.n	8008316 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 0302 	and.w	r3, r3, #2
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d020      	beq.n	80081f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 0304 	and.w	r3, r3, #4
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d005      	beq.n	80081c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80081bc:	4b59      	ldr	r3, [pc, #356]	@ (8008324 <HAL_RCC_ClockConfig+0x1c8>)
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	4a58      	ldr	r2, [pc, #352]	@ (8008324 <HAL_RCC_ClockConfig+0x1c8>)
 80081c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80081c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 0308 	and.w	r3, r3, #8
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d005      	beq.n	80081e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80081d4:	4b53      	ldr	r3, [pc, #332]	@ (8008324 <HAL_RCC_ClockConfig+0x1c8>)
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	4a52      	ldr	r2, [pc, #328]	@ (8008324 <HAL_RCC_ClockConfig+0x1c8>)
 80081da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80081de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081e0:	4b50      	ldr	r3, [pc, #320]	@ (8008324 <HAL_RCC_ClockConfig+0x1c8>)
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	494d      	ldr	r1, [pc, #308]	@ (8008324 <HAL_RCC_ClockConfig+0x1c8>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d040      	beq.n	8008280 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	2b01      	cmp	r3, #1
 8008204:	d107      	bne.n	8008216 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008206:	4b47      	ldr	r3, [pc, #284]	@ (8008324 <HAL_RCC_ClockConfig+0x1c8>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800820e:	2b00      	cmp	r3, #0
 8008210:	d115      	bne.n	800823e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	e07f      	b.n	8008316 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	2b02      	cmp	r3, #2
 800821c:	d107      	bne.n	800822e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800821e:	4b41      	ldr	r3, [pc, #260]	@ (8008324 <HAL_RCC_ClockConfig+0x1c8>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008226:	2b00      	cmp	r3, #0
 8008228:	d109      	bne.n	800823e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e073      	b.n	8008316 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800822e:	4b3d      	ldr	r3, [pc, #244]	@ (8008324 <HAL_RCC_ClockConfig+0x1c8>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 0302 	and.w	r3, r3, #2
 8008236:	2b00      	cmp	r3, #0
 8008238:	d101      	bne.n	800823e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	e06b      	b.n	8008316 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800823e:	4b39      	ldr	r3, [pc, #228]	@ (8008324 <HAL_RCC_ClockConfig+0x1c8>)
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	f023 0203 	bic.w	r2, r3, #3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	4936      	ldr	r1, [pc, #216]	@ (8008324 <HAL_RCC_ClockConfig+0x1c8>)
 800824c:	4313      	orrs	r3, r2
 800824e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008250:	f7fb f97c 	bl	800354c <HAL_GetTick>
 8008254:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008256:	e00a      	b.n	800826e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008258:	f7fb f978 	bl	800354c <HAL_GetTick>
 800825c:	4602      	mov	r2, r0
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008266:	4293      	cmp	r3, r2
 8008268:	d901      	bls.n	800826e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800826a:	2303      	movs	r3, #3
 800826c:	e053      	b.n	8008316 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800826e:	4b2d      	ldr	r3, [pc, #180]	@ (8008324 <HAL_RCC_ClockConfig+0x1c8>)
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	f003 020c 	and.w	r2, r3, #12
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	429a      	cmp	r2, r3
 800827e:	d1eb      	bne.n	8008258 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008280:	4b27      	ldr	r3, [pc, #156]	@ (8008320 <HAL_RCC_ClockConfig+0x1c4>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 030f 	and.w	r3, r3, #15
 8008288:	683a      	ldr	r2, [r7, #0]
 800828a:	429a      	cmp	r2, r3
 800828c:	d210      	bcs.n	80082b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800828e:	4b24      	ldr	r3, [pc, #144]	@ (8008320 <HAL_RCC_ClockConfig+0x1c4>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f023 020f 	bic.w	r2, r3, #15
 8008296:	4922      	ldr	r1, [pc, #136]	@ (8008320 <HAL_RCC_ClockConfig+0x1c4>)
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	4313      	orrs	r3, r2
 800829c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800829e:	4b20      	ldr	r3, [pc, #128]	@ (8008320 <HAL_RCC_ClockConfig+0x1c4>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 030f 	and.w	r3, r3, #15
 80082a6:	683a      	ldr	r2, [r7, #0]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d001      	beq.n	80082b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e032      	b.n	8008316 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0304 	and.w	r3, r3, #4
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d008      	beq.n	80082ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80082bc:	4b19      	ldr	r3, [pc, #100]	@ (8008324 <HAL_RCC_ClockConfig+0x1c8>)
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	4916      	ldr	r1, [pc, #88]	@ (8008324 <HAL_RCC_ClockConfig+0x1c8>)
 80082ca:	4313      	orrs	r3, r2
 80082cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 0308 	and.w	r3, r3, #8
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d009      	beq.n	80082ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80082da:	4b12      	ldr	r3, [pc, #72]	@ (8008324 <HAL_RCC_ClockConfig+0x1c8>)
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	00db      	lsls	r3, r3, #3
 80082e8:	490e      	ldr	r1, [pc, #56]	@ (8008324 <HAL_RCC_ClockConfig+0x1c8>)
 80082ea:	4313      	orrs	r3, r2
 80082ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80082ee:	f000 f821 	bl	8008334 <HAL_RCC_GetSysClockFreq>
 80082f2:	4602      	mov	r2, r0
 80082f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008324 <HAL_RCC_ClockConfig+0x1c8>)
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	091b      	lsrs	r3, r3, #4
 80082fa:	f003 030f 	and.w	r3, r3, #15
 80082fe:	490a      	ldr	r1, [pc, #40]	@ (8008328 <HAL_RCC_ClockConfig+0x1cc>)
 8008300:	5ccb      	ldrb	r3, [r1, r3]
 8008302:	fa22 f303 	lsr.w	r3, r2, r3
 8008306:	4a09      	ldr	r2, [pc, #36]	@ (800832c <HAL_RCC_ClockConfig+0x1d0>)
 8008308:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800830a:	4b09      	ldr	r3, [pc, #36]	@ (8008330 <HAL_RCC_ClockConfig+0x1d4>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4618      	mov	r0, r3
 8008310:	f7fa fd34 	bl	8002d7c <HAL_InitTick>

  return HAL_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	40023c00 	.word	0x40023c00
 8008324:	40023800 	.word	0x40023800
 8008328:	080155ac 	.word	0x080155ac
 800832c:	20000000 	.word	0x20000000
 8008330:	2000004c 	.word	0x2000004c

08008334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008338:	b090      	sub	sp, #64	@ 0x40
 800833a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800833c:	2300      	movs	r3, #0
 800833e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008340:	2300      	movs	r3, #0
 8008342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008344:	2300      	movs	r3, #0
 8008346:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8008348:	2300      	movs	r3, #0
 800834a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800834c:	4b59      	ldr	r3, [pc, #356]	@ (80084b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f003 030c 	and.w	r3, r3, #12
 8008354:	2b08      	cmp	r3, #8
 8008356:	d00d      	beq.n	8008374 <HAL_RCC_GetSysClockFreq+0x40>
 8008358:	2b08      	cmp	r3, #8
 800835a:	f200 80a1 	bhi.w	80084a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800835e:	2b00      	cmp	r3, #0
 8008360:	d002      	beq.n	8008368 <HAL_RCC_GetSysClockFreq+0x34>
 8008362:	2b04      	cmp	r3, #4
 8008364:	d003      	beq.n	800836e <HAL_RCC_GetSysClockFreq+0x3a>
 8008366:	e09b      	b.n	80084a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008368:	4b53      	ldr	r3, [pc, #332]	@ (80084b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800836a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800836c:	e09b      	b.n	80084a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800836e:	4b53      	ldr	r3, [pc, #332]	@ (80084bc <HAL_RCC_GetSysClockFreq+0x188>)
 8008370:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008372:	e098      	b.n	80084a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008374:	4b4f      	ldr	r3, [pc, #316]	@ (80084b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800837c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800837e:	4b4d      	ldr	r3, [pc, #308]	@ (80084b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008386:	2b00      	cmp	r3, #0
 8008388:	d028      	beq.n	80083dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800838a:	4b4a      	ldr	r3, [pc, #296]	@ (80084b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	099b      	lsrs	r3, r3, #6
 8008390:	2200      	movs	r2, #0
 8008392:	623b      	str	r3, [r7, #32]
 8008394:	627a      	str	r2, [r7, #36]	@ 0x24
 8008396:	6a3b      	ldr	r3, [r7, #32]
 8008398:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800839c:	2100      	movs	r1, #0
 800839e:	4b47      	ldr	r3, [pc, #284]	@ (80084bc <HAL_RCC_GetSysClockFreq+0x188>)
 80083a0:	fb03 f201 	mul.w	r2, r3, r1
 80083a4:	2300      	movs	r3, #0
 80083a6:	fb00 f303 	mul.w	r3, r0, r3
 80083aa:	4413      	add	r3, r2
 80083ac:	4a43      	ldr	r2, [pc, #268]	@ (80084bc <HAL_RCC_GetSysClockFreq+0x188>)
 80083ae:	fba0 1202 	umull	r1, r2, r0, r2
 80083b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80083b4:	460a      	mov	r2, r1
 80083b6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80083b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083ba:	4413      	add	r3, r2
 80083bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083c0:	2200      	movs	r2, #0
 80083c2:	61bb      	str	r3, [r7, #24]
 80083c4:	61fa      	str	r2, [r7, #28]
 80083c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80083ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80083ce:	f7f7 ff77 	bl	80002c0 <__aeabi_uldivmod>
 80083d2:	4602      	mov	r2, r0
 80083d4:	460b      	mov	r3, r1
 80083d6:	4613      	mov	r3, r2
 80083d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083da:	e053      	b.n	8008484 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083dc:	4b35      	ldr	r3, [pc, #212]	@ (80084b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	099b      	lsrs	r3, r3, #6
 80083e2:	2200      	movs	r2, #0
 80083e4:	613b      	str	r3, [r7, #16]
 80083e6:	617a      	str	r2, [r7, #20]
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80083ee:	f04f 0b00 	mov.w	fp, #0
 80083f2:	4652      	mov	r2, sl
 80083f4:	465b      	mov	r3, fp
 80083f6:	f04f 0000 	mov.w	r0, #0
 80083fa:	f04f 0100 	mov.w	r1, #0
 80083fe:	0159      	lsls	r1, r3, #5
 8008400:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008404:	0150      	lsls	r0, r2, #5
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	ebb2 080a 	subs.w	r8, r2, sl
 800840e:	eb63 090b 	sbc.w	r9, r3, fp
 8008412:	f04f 0200 	mov.w	r2, #0
 8008416:	f04f 0300 	mov.w	r3, #0
 800841a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800841e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008422:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008426:	ebb2 0408 	subs.w	r4, r2, r8
 800842a:	eb63 0509 	sbc.w	r5, r3, r9
 800842e:	f04f 0200 	mov.w	r2, #0
 8008432:	f04f 0300 	mov.w	r3, #0
 8008436:	00eb      	lsls	r3, r5, #3
 8008438:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800843c:	00e2      	lsls	r2, r4, #3
 800843e:	4614      	mov	r4, r2
 8008440:	461d      	mov	r5, r3
 8008442:	eb14 030a 	adds.w	r3, r4, sl
 8008446:	603b      	str	r3, [r7, #0]
 8008448:	eb45 030b 	adc.w	r3, r5, fp
 800844c:	607b      	str	r3, [r7, #4]
 800844e:	f04f 0200 	mov.w	r2, #0
 8008452:	f04f 0300 	mov.w	r3, #0
 8008456:	e9d7 4500 	ldrd	r4, r5, [r7]
 800845a:	4629      	mov	r1, r5
 800845c:	028b      	lsls	r3, r1, #10
 800845e:	4621      	mov	r1, r4
 8008460:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008464:	4621      	mov	r1, r4
 8008466:	028a      	lsls	r2, r1, #10
 8008468:	4610      	mov	r0, r2
 800846a:	4619      	mov	r1, r3
 800846c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800846e:	2200      	movs	r2, #0
 8008470:	60bb      	str	r3, [r7, #8]
 8008472:	60fa      	str	r2, [r7, #12]
 8008474:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008478:	f7f7 ff22 	bl	80002c0 <__aeabi_uldivmod>
 800847c:	4602      	mov	r2, r0
 800847e:	460b      	mov	r3, r1
 8008480:	4613      	mov	r3, r2
 8008482:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008484:	4b0b      	ldr	r3, [pc, #44]	@ (80084b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	0c1b      	lsrs	r3, r3, #16
 800848a:	f003 0303 	and.w	r3, r3, #3
 800848e:	3301      	adds	r3, #1
 8008490:	005b      	lsls	r3, r3, #1
 8008492:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008494:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008498:	fbb2 f3f3 	udiv	r3, r2, r3
 800849c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800849e:	e002      	b.n	80084a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80084a0:	4b05      	ldr	r3, [pc, #20]	@ (80084b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80084a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80084a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80084a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3740      	adds	r7, #64	@ 0x40
 80084ac:	46bd      	mov	sp, r7
 80084ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084b2:	bf00      	nop
 80084b4:	40023800 	.word	0x40023800
 80084b8:	00f42400 	.word	0x00f42400
 80084bc:	017d7840 	.word	0x017d7840

080084c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80084c0:	b480      	push	{r7}
 80084c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80084c4:	4b03      	ldr	r3, [pc, #12]	@ (80084d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80084c6:	681b      	ldr	r3, [r3, #0]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	20000000 	.word	0x20000000

080084d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80084dc:	f7ff fff0 	bl	80084c0 <HAL_RCC_GetHCLKFreq>
 80084e0:	4602      	mov	r2, r0
 80084e2:	4b05      	ldr	r3, [pc, #20]	@ (80084f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	0a9b      	lsrs	r3, r3, #10
 80084e8:	f003 0307 	and.w	r3, r3, #7
 80084ec:	4903      	ldr	r1, [pc, #12]	@ (80084fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80084ee:	5ccb      	ldrb	r3, [r1, r3]
 80084f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	40023800 	.word	0x40023800
 80084fc:	080155bc 	.word	0x080155bc

08008500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008504:	f7ff ffdc 	bl	80084c0 <HAL_RCC_GetHCLKFreq>
 8008508:	4602      	mov	r2, r0
 800850a:	4b05      	ldr	r3, [pc, #20]	@ (8008520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	0b5b      	lsrs	r3, r3, #13
 8008510:	f003 0307 	and.w	r3, r3, #7
 8008514:	4903      	ldr	r1, [pc, #12]	@ (8008524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008516:	5ccb      	ldrb	r3, [r1, r3]
 8008518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800851c:	4618      	mov	r0, r3
 800851e:	bd80      	pop	{r7, pc}
 8008520:	40023800 	.word	0x40023800
 8008524:	080155bc 	.word	0x080155bc

08008528 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	220f      	movs	r2, #15
 8008536:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008538:	4b12      	ldr	r3, [pc, #72]	@ (8008584 <HAL_RCC_GetClockConfig+0x5c>)
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	f003 0203 	and.w	r2, r3, #3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008544:	4b0f      	ldr	r3, [pc, #60]	@ (8008584 <HAL_RCC_GetClockConfig+0x5c>)
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008550:	4b0c      	ldr	r3, [pc, #48]	@ (8008584 <HAL_RCC_GetClockConfig+0x5c>)
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800855c:	4b09      	ldr	r3, [pc, #36]	@ (8008584 <HAL_RCC_GetClockConfig+0x5c>)
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	08db      	lsrs	r3, r3, #3
 8008562:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800856a:	4b07      	ldr	r3, [pc, #28]	@ (8008588 <HAL_RCC_GetClockConfig+0x60>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 020f 	and.w	r2, r3, #15
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	601a      	str	r2, [r3, #0]
}
 8008576:	bf00      	nop
 8008578:	370c      	adds	r7, #12
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	40023800 	.word	0x40023800
 8008588:	40023c00 	.word	0x40023c00

0800858c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b088      	sub	sp, #32
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008594:	2300      	movs	r3, #0
 8008596:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008598:	2300      	movs	r3, #0
 800859a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800859c:	2300      	movs	r3, #0
 800859e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80085a0:	2300      	movs	r3, #0
 80085a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80085a4:	2300      	movs	r3, #0
 80085a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0301 	and.w	r3, r3, #1
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d012      	beq.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80085b4:	4b69      	ldr	r3, [pc, #420]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	4a68      	ldr	r2, [pc, #416]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085ba:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80085be:	6093      	str	r3, [r2, #8]
 80085c0:	4b66      	ldr	r3, [pc, #408]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085c2:	689a      	ldr	r2, [r3, #8]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085c8:	4964      	ldr	r1, [pc, #400]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085ca:	4313      	orrs	r3, r2
 80085cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d101      	bne.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80085d6:	2301      	movs	r3, #1
 80085d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d017      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80085e6:	4b5d      	ldr	r3, [pc, #372]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085ec:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085f4:	4959      	ldr	r1, [pc, #356]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085f6:	4313      	orrs	r3, r2
 80085f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008600:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008604:	d101      	bne.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008606:	2301      	movs	r3, #1
 8008608:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800860e:	2b00      	cmp	r3, #0
 8008610:	d101      	bne.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008612:	2301      	movs	r3, #1
 8008614:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d017      	beq.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008622:	4b4e      	ldr	r3, [pc, #312]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008624:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008628:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008630:	494a      	ldr	r1, [pc, #296]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008632:	4313      	orrs	r3, r2
 8008634:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800863c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008640:	d101      	bne.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008642:	2301      	movs	r3, #1
 8008644:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800864a:	2b00      	cmp	r3, #0
 800864c:	d101      	bne.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800864e:	2301      	movs	r3, #1
 8008650:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800865a:	2b00      	cmp	r3, #0
 800865c:	d001      	beq.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800865e:	2301      	movs	r3, #1
 8008660:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0320 	and.w	r3, r3, #32
 800866a:	2b00      	cmp	r3, #0
 800866c:	f000 808b 	beq.w	8008786 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008670:	4b3a      	ldr	r3, [pc, #232]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008674:	4a39      	ldr	r2, [pc, #228]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800867a:	6413      	str	r3, [r2, #64]	@ 0x40
 800867c:	4b37      	ldr	r3, [pc, #220]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800867e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008684:	60bb      	str	r3, [r7, #8]
 8008686:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008688:	4b35      	ldr	r3, [pc, #212]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a34      	ldr	r2, [pc, #208]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800868e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008694:	f7fa ff5a 	bl	800354c <HAL_GetTick>
 8008698:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800869a:	e008      	b.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800869c:	f7fa ff56 	bl	800354c <HAL_GetTick>
 80086a0:	4602      	mov	r2, r0
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	2b64      	cmp	r3, #100	@ 0x64
 80086a8:	d901      	bls.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e357      	b.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80086ae:	4b2c      	ldr	r3, [pc, #176]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d0f0      	beq.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80086ba:	4b28      	ldr	r3, [pc, #160]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d035      	beq.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086d2:	693a      	ldr	r2, [r7, #16]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d02e      	beq.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80086d8:	4b20      	ldr	r3, [pc, #128]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80086e2:	4b1e      	ldr	r3, [pc, #120]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086e6:	4a1d      	ldr	r2, [pc, #116]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086ec:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80086ee:	4b1b      	ldr	r3, [pc, #108]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086f2:	4a1a      	ldr	r2, [pc, #104]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086f8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80086fa:	4a18      	ldr	r2, [pc, #96]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008700:	4b16      	ldr	r3, [pc, #88]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008704:	f003 0301 	and.w	r3, r3, #1
 8008708:	2b01      	cmp	r3, #1
 800870a:	d114      	bne.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800870c:	f7fa ff1e 	bl	800354c <HAL_GetTick>
 8008710:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008712:	e00a      	b.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008714:	f7fa ff1a 	bl	800354c <HAL_GetTick>
 8008718:	4602      	mov	r2, r0
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008722:	4293      	cmp	r3, r2
 8008724:	d901      	bls.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
 8008728:	e319      	b.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800872a:	4b0c      	ldr	r3, [pc, #48]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800872c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800872e:	f003 0302 	and.w	r3, r3, #2
 8008732:	2b00      	cmp	r3, #0
 8008734:	d0ee      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800873a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800873e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008742:	d111      	bne.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008744:	4b05      	ldr	r3, [pc, #20]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008750:	4b04      	ldr	r3, [pc, #16]	@ (8008764 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008752:	400b      	ands	r3, r1
 8008754:	4901      	ldr	r1, [pc, #4]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008756:	4313      	orrs	r3, r2
 8008758:	608b      	str	r3, [r1, #8]
 800875a:	e00b      	b.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800875c:	40023800 	.word	0x40023800
 8008760:	40007000 	.word	0x40007000
 8008764:	0ffffcff 	.word	0x0ffffcff
 8008768:	4baa      	ldr	r3, [pc, #680]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	4aa9      	ldr	r2, [pc, #676]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800876e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008772:	6093      	str	r3, [r2, #8]
 8008774:	4ba7      	ldr	r3, [pc, #668]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008776:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800877c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008780:	49a4      	ldr	r1, [pc, #656]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008782:	4313      	orrs	r3, r2
 8008784:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 0310 	and.w	r3, r3, #16
 800878e:	2b00      	cmp	r3, #0
 8008790:	d010      	beq.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008792:	4ba0      	ldr	r3, [pc, #640]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008794:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008798:	4a9e      	ldr	r2, [pc, #632]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800879a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800879e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80087a2:	4b9c      	ldr	r3, [pc, #624]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ac:	4999      	ldr	r1, [pc, #612]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087ae:	4313      	orrs	r3, r2
 80087b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00a      	beq.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80087c0:	4b94      	ldr	r3, [pc, #592]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087c6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087ce:	4991      	ldr	r1, [pc, #580]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087d0:	4313      	orrs	r3, r2
 80087d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00a      	beq.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80087e2:	4b8c      	ldr	r3, [pc, #560]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80087f0:	4988      	ldr	r1, [pc, #544]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087f2:	4313      	orrs	r3, r2
 80087f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008800:	2b00      	cmp	r3, #0
 8008802:	d00a      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008804:	4b83      	ldr	r3, [pc, #524]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800880a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008812:	4980      	ldr	r1, [pc, #512]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008814:	4313      	orrs	r3, r2
 8008816:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008822:	2b00      	cmp	r3, #0
 8008824:	d00a      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008826:	4b7b      	ldr	r3, [pc, #492]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800882c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008834:	4977      	ldr	r1, [pc, #476]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008836:	4313      	orrs	r3, r2
 8008838:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008844:	2b00      	cmp	r3, #0
 8008846:	d00a      	beq.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008848:	4b72      	ldr	r3, [pc, #456]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800884a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800884e:	f023 0203 	bic.w	r2, r3, #3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008856:	496f      	ldr	r1, [pc, #444]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008858:	4313      	orrs	r3, r2
 800885a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00a      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800886a:	4b6a      	ldr	r3, [pc, #424]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800886c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008870:	f023 020c 	bic.w	r2, r3, #12
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008878:	4966      	ldr	r1, [pc, #408]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800887a:	4313      	orrs	r3, r2
 800887c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00a      	beq.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800888c:	4b61      	ldr	r3, [pc, #388]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800888e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008892:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800889a:	495e      	ldr	r1, [pc, #376]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800889c:	4313      	orrs	r3, r2
 800889e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00a      	beq.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80088ae:	4b59      	ldr	r3, [pc, #356]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80088b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088b4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088bc:	4955      	ldr	r1, [pc, #340]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80088be:	4313      	orrs	r3, r2
 80088c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d00a      	beq.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80088d0:	4b50      	ldr	r3, [pc, #320]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80088d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088d6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088de:	494d      	ldr	r1, [pc, #308]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80088e0:	4313      	orrs	r3, r2
 80088e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00a      	beq.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80088f2:	4b48      	ldr	r3, [pc, #288]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80088f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088f8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008900:	4944      	ldr	r1, [pc, #272]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008902:	4313      	orrs	r3, r2
 8008904:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00a      	beq.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008914:	4b3f      	ldr	r3, [pc, #252]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800891a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008922:	493c      	ldr	r1, [pc, #240]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008924:	4313      	orrs	r3, r2
 8008926:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00a      	beq.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008936:	4b37      	ldr	r3, [pc, #220]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800893c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008944:	4933      	ldr	r1, [pc, #204]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008946:	4313      	orrs	r3, r2
 8008948:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00a      	beq.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008958:	4b2e      	ldr	r3, [pc, #184]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800895a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800895e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008966:	492b      	ldr	r1, [pc, #172]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008968:	4313      	orrs	r3, r2
 800896a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008976:	2b00      	cmp	r3, #0
 8008978:	d011      	beq.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800897a:	4b26      	ldr	r3, [pc, #152]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800897c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008980:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008988:	4922      	ldr	r1, [pc, #136]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800898a:	4313      	orrs	r3, r2
 800898c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008994:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008998:	d101      	bne.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800899a:	2301      	movs	r3, #1
 800899c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f003 0308 	and.w	r3, r3, #8
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d001      	beq.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80089aa:	2301      	movs	r3, #1
 80089ac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00a      	beq.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80089ba:	4b16      	ldr	r3, [pc, #88]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80089bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089c0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089c8:	4912      	ldr	r1, [pc, #72]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80089ca:	4313      	orrs	r3, r2
 80089cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00b      	beq.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80089dc:	4b0d      	ldr	r3, [pc, #52]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80089de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089e2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089ec:	4909      	ldr	r1, [pc, #36]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80089ee:	4313      	orrs	r3, r2
 80089f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d006      	beq.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f000 80d9 	beq.w	8008bba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008a08:	4b02      	ldr	r3, [pc, #8]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a01      	ldr	r2, [pc, #4]	@ (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008a12:	e001      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008a14:	40023800 	.word	0x40023800
 8008a18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a1a:	f7fa fd97 	bl	800354c <HAL_GetTick>
 8008a1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008a20:	e008      	b.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008a22:	f7fa fd93 	bl	800354c <HAL_GetTick>
 8008a26:	4602      	mov	r2, r0
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	2b64      	cmp	r3, #100	@ 0x64
 8008a2e:	d901      	bls.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a30:	2303      	movs	r3, #3
 8008a32:	e194      	b.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008a34:	4b6c      	ldr	r3, [pc, #432]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1f0      	bne.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 0301 	and.w	r3, r3, #1
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d021      	beq.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d11d      	bne.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008a54:	4b64      	ldr	r3, [pc, #400]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a5a:	0c1b      	lsrs	r3, r3, #16
 8008a5c:	f003 0303 	and.w	r3, r3, #3
 8008a60:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008a62:	4b61      	ldr	r3, [pc, #388]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a68:	0e1b      	lsrs	r3, r3, #24
 8008a6a:	f003 030f 	and.w	r3, r3, #15
 8008a6e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	019a      	lsls	r2, r3, #6
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	041b      	lsls	r3, r3, #16
 8008a7a:	431a      	orrs	r2, r3
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	061b      	lsls	r3, r3, #24
 8008a80:	431a      	orrs	r2, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	071b      	lsls	r3, r3, #28
 8008a88:	4957      	ldr	r1, [pc, #348]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d004      	beq.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aa0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008aa4:	d00a      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d02e      	beq.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ab6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008aba:	d129      	bne.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008abc:	4b4a      	ldr	r3, [pc, #296]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ac2:	0c1b      	lsrs	r3, r3, #16
 8008ac4:	f003 0303 	and.w	r3, r3, #3
 8008ac8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008aca:	4b47      	ldr	r3, [pc, #284]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ad0:	0f1b      	lsrs	r3, r3, #28
 8008ad2:	f003 0307 	and.w	r3, r3, #7
 8008ad6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	019a      	lsls	r2, r3, #6
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	041b      	lsls	r3, r3, #16
 8008ae2:	431a      	orrs	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	061b      	lsls	r3, r3, #24
 8008aea:	431a      	orrs	r2, r3
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	071b      	lsls	r3, r3, #28
 8008af0:	493d      	ldr	r1, [pc, #244]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008af2:	4313      	orrs	r3, r2
 8008af4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008af8:	4b3b      	ldr	r3, [pc, #236]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008afe:	f023 021f 	bic.w	r2, r3, #31
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b06:	3b01      	subs	r3, #1
 8008b08:	4937      	ldr	r1, [pc, #220]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d01d      	beq.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008b1c:	4b32      	ldr	r3, [pc, #200]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b22:	0e1b      	lsrs	r3, r3, #24
 8008b24:	f003 030f 	and.w	r3, r3, #15
 8008b28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b30:	0f1b      	lsrs	r3, r3, #28
 8008b32:	f003 0307 	and.w	r3, r3, #7
 8008b36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	019a      	lsls	r2, r3, #6
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	041b      	lsls	r3, r3, #16
 8008b44:	431a      	orrs	r2, r3
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	061b      	lsls	r3, r3, #24
 8008b4a:	431a      	orrs	r2, r3
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	071b      	lsls	r3, r3, #28
 8008b50:	4925      	ldr	r1, [pc, #148]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b52:	4313      	orrs	r3, r2
 8008b54:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d011      	beq.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	019a      	lsls	r2, r3, #6
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	041b      	lsls	r3, r3, #16
 8008b70:	431a      	orrs	r2, r3
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	061b      	lsls	r3, r3, #24
 8008b78:	431a      	orrs	r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	071b      	lsls	r3, r3, #28
 8008b80:	4919      	ldr	r1, [pc, #100]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b82:	4313      	orrs	r3, r2
 8008b84:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008b88:	4b17      	ldr	r3, [pc, #92]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a16      	ldr	r2, [pc, #88]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008b92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b94:	f7fa fcda 	bl	800354c <HAL_GetTick>
 8008b98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008b9a:	e008      	b.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008b9c:	f7fa fcd6 	bl	800354c <HAL_GetTick>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	2b64      	cmp	r3, #100	@ 0x64
 8008ba8:	d901      	bls.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008baa:	2303      	movs	r3, #3
 8008bac:	e0d7      	b.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008bae:	4b0e      	ldr	r3, [pc, #56]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d0f0      	beq.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	f040 80cd 	bne.w	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008bc2:	4b09      	ldr	r3, [pc, #36]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a08      	ldr	r2, [pc, #32]	@ (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008bc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008bcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bce:	f7fa fcbd 	bl	800354c <HAL_GetTick>
 8008bd2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008bd4:	e00a      	b.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008bd6:	f7fa fcb9 	bl	800354c <HAL_GetTick>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	1ad3      	subs	r3, r2, r3
 8008be0:	2b64      	cmp	r3, #100	@ 0x64
 8008be2:	d903      	bls.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008be4:	2303      	movs	r3, #3
 8008be6:	e0ba      	b.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008be8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008bec:	4b5e      	ldr	r3, [pc, #376]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bf8:	d0ed      	beq.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d003      	beq.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d009      	beq.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d02e      	beq.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d12a      	bne.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008c22:	4b51      	ldr	r3, [pc, #324]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c28:	0c1b      	lsrs	r3, r3, #16
 8008c2a:	f003 0303 	and.w	r3, r3, #3
 8008c2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008c30:	4b4d      	ldr	r3, [pc, #308]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c36:	0f1b      	lsrs	r3, r3, #28
 8008c38:	f003 0307 	and.w	r3, r3, #7
 8008c3c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	695b      	ldr	r3, [r3, #20]
 8008c42:	019a      	lsls	r2, r3, #6
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	041b      	lsls	r3, r3, #16
 8008c48:	431a      	orrs	r2, r3
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	699b      	ldr	r3, [r3, #24]
 8008c4e:	061b      	lsls	r3, r3, #24
 8008c50:	431a      	orrs	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	071b      	lsls	r3, r3, #28
 8008c56:	4944      	ldr	r1, [pc, #272]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008c5e:	4b42      	ldr	r3, [pc, #264]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c64:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	021b      	lsls	r3, r3, #8
 8008c70:	493d      	ldr	r1, [pc, #244]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c72:	4313      	orrs	r3, r2
 8008c74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d022      	beq.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c8c:	d11d      	bne.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008c8e:	4b36      	ldr	r3, [pc, #216]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c94:	0e1b      	lsrs	r3, r3, #24
 8008c96:	f003 030f 	and.w	r3, r3, #15
 8008c9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008c9c:	4b32      	ldr	r3, [pc, #200]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ca2:	0f1b      	lsrs	r3, r3, #28
 8008ca4:	f003 0307 	and.w	r3, r3, #7
 8008ca8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	695b      	ldr	r3, [r3, #20]
 8008cae:	019a      	lsls	r2, r3, #6
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a1b      	ldr	r3, [r3, #32]
 8008cb4:	041b      	lsls	r3, r3, #16
 8008cb6:	431a      	orrs	r2, r3
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	061b      	lsls	r3, r3, #24
 8008cbc:	431a      	orrs	r2, r3
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	071b      	lsls	r3, r3, #28
 8008cc2:	4929      	ldr	r1, [pc, #164]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 0308 	and.w	r3, r3, #8
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d028      	beq.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008cd6:	4b24      	ldr	r3, [pc, #144]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cdc:	0e1b      	lsrs	r3, r3, #24
 8008cde:	f003 030f 	and.w	r3, r3, #15
 8008ce2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008ce4:	4b20      	ldr	r3, [pc, #128]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cea:	0c1b      	lsrs	r3, r3, #16
 8008cec:	f003 0303 	and.w	r3, r3, #3
 8008cf0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	695b      	ldr	r3, [r3, #20]
 8008cf6:	019a      	lsls	r2, r3, #6
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	041b      	lsls	r3, r3, #16
 8008cfc:	431a      	orrs	r2, r3
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	061b      	lsls	r3, r3, #24
 8008d02:	431a      	orrs	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	69db      	ldr	r3, [r3, #28]
 8008d08:	071b      	lsls	r3, r3, #28
 8008d0a:	4917      	ldr	r1, [pc, #92]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008d12:	4b15      	ldr	r3, [pc, #84]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d20:	4911      	ldr	r1, [pc, #68]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d22:	4313      	orrs	r3, r2
 8008d24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008d28:	4b0f      	ldr	r3, [pc, #60]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a0e      	ldr	r2, [pc, #56]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d34:	f7fa fc0a 	bl	800354c <HAL_GetTick>
 8008d38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008d3a:	e008      	b.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008d3c:	f7fa fc06 	bl	800354c <HAL_GetTick>
 8008d40:	4602      	mov	r2, r0
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	1ad3      	subs	r3, r2, r3
 8008d46:	2b64      	cmp	r3, #100	@ 0x64
 8008d48:	d901      	bls.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	e007      	b.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008d4e:	4b06      	ldr	r3, [pc, #24]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d5a:	d1ef      	bne.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3720      	adds	r7, #32
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	40023800 	.word	0x40023800

08008d6c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b087      	sub	sp, #28
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008d74:	2300      	movs	r3, #0
 8008d76:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8008d80:	2300      	movs	r3, #0
 8008d82:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008d8a:	f040 808d 	bne.w	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008d8e:	4b93      	ldr	r3, [pc, #588]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d94:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008d9c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008da4:	d07c      	beq.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008dac:	d87b      	bhi.n	8008ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d004      	beq.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008dba:	d039      	beq.n	8008e30 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008dbc:	e073      	b.n	8008ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008dbe:	4b87      	ldr	r3, [pc, #540]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d108      	bne.n	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008dca:	4b84      	ldr	r3, [pc, #528]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008dd2:	4a83      	ldr	r2, [pc, #524]	@ (8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dd8:	613b      	str	r3, [r7, #16]
 8008dda:	e007      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008ddc:	4b7f      	ldr	r3, [pc, #508]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008de4:	4a7f      	ldr	r2, [pc, #508]	@ (8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dea:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008dec:	4b7b      	ldr	r3, [pc, #492]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008df2:	0e1b      	lsrs	r3, r3, #24
 8008df4:	f003 030f 	and.w	r3, r3, #15
 8008df8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008dfa:	4b78      	ldr	r3, [pc, #480]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e00:	099b      	lsrs	r3, r3, #6
 8008e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e06:	693a      	ldr	r2, [r7, #16]
 8008e08:	fb03 f202 	mul.w	r2, r3, r2
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e12:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008e14:	4b71      	ldr	r3, [pc, #452]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e1a:	0a1b      	lsrs	r3, r3, #8
 8008e1c:	f003 031f 	and.w	r3, r3, #31
 8008e20:	3301      	adds	r3, #1
 8008e22:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008e24:	697a      	ldr	r2, [r7, #20]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e2c:	617b      	str	r3, [r7, #20]
        break;
 8008e2e:	e03b      	b.n	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008e30:	4b6a      	ldr	r3, [pc, #424]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d108      	bne.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008e3c:	4b67      	ldr	r3, [pc, #412]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e44:	4a66      	ldr	r2, [pc, #408]	@ (8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e4a:	613b      	str	r3, [r7, #16]
 8008e4c:	e007      	b.n	8008e5e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008e4e:	4b63      	ldr	r3, [pc, #396]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e56:	4a63      	ldr	r2, [pc, #396]	@ (8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e5c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008e5e:	4b5f      	ldr	r3, [pc, #380]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e64:	0e1b      	lsrs	r3, r3, #24
 8008e66:	f003 030f 	and.w	r3, r3, #15
 8008e6a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008e6c:	4b5b      	ldr	r3, [pc, #364]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e72:	099b      	lsrs	r3, r3, #6
 8008e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e78:	693a      	ldr	r2, [r7, #16]
 8008e7a:	fb03 f202 	mul.w	r2, r3, r2
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e84:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008e86:	4b55      	ldr	r3, [pc, #340]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e8c:	f003 031f 	and.w	r3, r3, #31
 8008e90:	3301      	adds	r3, #1
 8008e92:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008e94:	697a      	ldr	r2, [r7, #20]
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e9c:	617b      	str	r3, [r7, #20]
        break;
 8008e9e:	e003      	b.n	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008ea0:	4b51      	ldr	r3, [pc, #324]	@ (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008ea2:	617b      	str	r3, [r7, #20]
        break;
 8008ea4:	e000      	b.n	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8008ea6:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008eae:	f040 808d 	bne.w	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008eb2:	4b4a      	ldr	r3, [pc, #296]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008eb8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008ec0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008ec8:	d07c      	beq.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008ed0:	d87b      	bhi.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d004      	beq.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008ede:	d039      	beq.n	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008ee0:	e073      	b.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008ee2:	4b3e      	ldr	r3, [pc, #248]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d108      	bne.n	8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008eee:	4b3b      	ldr	r3, [pc, #236]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ef6:	4a3a      	ldr	r2, [pc, #232]	@ (8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008efc:	613b      	str	r3, [r7, #16]
 8008efe:	e007      	b.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008f00:	4b36      	ldr	r3, [pc, #216]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f08:	4a36      	ldr	r2, [pc, #216]	@ (8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f0e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008f10:	4b32      	ldr	r3, [pc, #200]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f16:	0e1b      	lsrs	r3, r3, #24
 8008f18:	f003 030f 	and.w	r3, r3, #15
 8008f1c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f24:	099b      	lsrs	r3, r3, #6
 8008f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f2a:	693a      	ldr	r2, [r7, #16]
 8008f2c:	fb03 f202 	mul.w	r2, r3, r2
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f36:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008f38:	4b28      	ldr	r3, [pc, #160]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f3e:	0a1b      	lsrs	r3, r3, #8
 8008f40:	f003 031f 	and.w	r3, r3, #31
 8008f44:	3301      	adds	r3, #1
 8008f46:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008f48:	697a      	ldr	r2, [r7, #20]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f50:	617b      	str	r3, [r7, #20]
        break;
 8008f52:	e03b      	b.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008f54:	4b21      	ldr	r3, [pc, #132]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d108      	bne.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008f60:	4b1e      	ldr	r3, [pc, #120]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f68:	4a1d      	ldr	r2, [pc, #116]	@ (8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f6e:	613b      	str	r3, [r7, #16]
 8008f70:	e007      	b.n	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008f72:	4b1a      	ldr	r3, [pc, #104]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f7a:	4a1a      	ldr	r2, [pc, #104]	@ (8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f80:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008f82:	4b16      	ldr	r3, [pc, #88]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f88:	0e1b      	lsrs	r3, r3, #24
 8008f8a:	f003 030f 	and.w	r3, r3, #15
 8008f8e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008f90:	4b12      	ldr	r3, [pc, #72]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f96:	099b      	lsrs	r3, r3, #6
 8008f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f9c:	693a      	ldr	r2, [r7, #16]
 8008f9e:	fb03 f202 	mul.w	r2, r3, r2
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fa8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008faa:	4b0c      	ldr	r3, [pc, #48]	@ (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fb0:	f003 031f 	and.w	r3, r3, #31
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008fb8:	697a      	ldr	r2, [r7, #20]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fc0:	617b      	str	r3, [r7, #20]
        break;
 8008fc2:	e003      	b.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008fc4:	4b08      	ldr	r3, [pc, #32]	@ (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008fc6:	617b      	str	r3, [r7, #20]
        break;
 8008fc8:	e000      	b.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8008fca:	bf00      	nop
      }
    }
  }

  return frequency;
 8008fcc:	697b      	ldr	r3, [r7, #20]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	371c      	adds	r7, #28
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop
 8008fdc:	40023800 	.word	0x40023800
 8008fe0:	00f42400 	.word	0x00f42400
 8008fe4:	017d7840 	.word	0x017d7840
 8008fe8:	00bb8000 	.word	0x00bb8000

08008fec <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d101      	bne.n	8008ffe <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e071      	b.n	80090e2 <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	7f5b      	ldrb	r3, [r3, #29]
 8009002:	b2db      	uxtb	r3, r3
 8009004:	2b00      	cmp	r3, #0
 8009006:	d105      	bne.n	8009014 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f7f9 fa36 	bl	8002480 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2202      	movs	r2, #2
 8009018:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	f003 0310 	and.w	r3, r3, #16
 8009024:	2b10      	cmp	r3, #16
 8009026:	d053      	beq.n	80090d0 <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	22ca      	movs	r2, #202	@ 0xca
 800902e:	625a      	str	r2, [r3, #36]	@ 0x24
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2253      	movs	r2, #83	@ 0x53
 8009036:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 fac7 	bl	80095cc <RTC_EnterInitMode>
 800903e:	4603      	mov	r3, r0
 8009040:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009042:	7bfb      	ldrb	r3, [r7, #15]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d12a      	bne.n	800909e <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6899      	ldr	r1, [r3, #8]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	4b26      	ldr	r3, [pc, #152]	@ (80090ec <HAL_RTC_Init+0x100>)
 8009054:	400b      	ands	r3, r1
 8009056:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	6899      	ldr	r1, [r3, #8]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	685a      	ldr	r2, [r3, #4]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	431a      	orrs	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	695b      	ldr	r3, [r3, #20]
 800906c:	431a      	orrs	r2, r3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	430a      	orrs	r2, r1
 8009074:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	68d2      	ldr	r2, [r2, #12]
 800907e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	6919      	ldr	r1, [r3, #16]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	041a      	lsls	r2, r3, #16
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	430a      	orrs	r2, r1
 8009092:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 fad0 	bl	800963a <RTC_ExitInitMode>
 800909a:	4603      	mov	r3, r0
 800909c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800909e:	7bfb      	ldrb	r3, [r7, #15]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d110      	bne.n	80090c6 <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f022 0208 	bic.w	r2, r2, #8
 80090b2:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	699a      	ldr	r2, [r3, #24]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	430a      	orrs	r2, r1
 80090c4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	22ff      	movs	r2, #255	@ 0xff
 80090cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80090ce:	e001      	b.n	80090d4 <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80090d0:	2300      	movs	r3, #0
 80090d2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80090d4:	7bfb      	ldrb	r3, [r7, #15]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d102      	bne.n	80090e0 <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2201      	movs	r2, #1
 80090de:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	ff8fffbf 	.word	0xff8fffbf

080090f0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80090f0:	b590      	push	{r4, r7, lr}
 80090f2:	b087      	sub	sp, #28
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80090fc:	2300      	movs	r3, #0
 80090fe:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	7f1b      	ldrb	r3, [r3, #28]
 8009104:	2b01      	cmp	r3, #1
 8009106:	d101      	bne.n	800910c <HAL_RTC_SetTime+0x1c>
 8009108:	2302      	movs	r3, #2
 800910a:	e085      	b.n	8009218 <HAL_RTC_SetTime+0x128>
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2201      	movs	r2, #1
 8009110:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2202      	movs	r2, #2
 8009116:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d126      	bne.n	800916c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009128:	2b00      	cmp	r3, #0
 800912a:	d102      	bne.n	8009132 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	2200      	movs	r2, #0
 8009130:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	4618      	mov	r0, r3
 8009138:	f000 faa4 	bl	8009684 <RTC_ByteToBcd2>
 800913c:	4603      	mov	r3, r0
 800913e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	785b      	ldrb	r3, [r3, #1]
 8009144:	4618      	mov	r0, r3
 8009146:	f000 fa9d 	bl	8009684 <RTC_ByteToBcd2>
 800914a:	4603      	mov	r3, r0
 800914c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800914e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	789b      	ldrb	r3, [r3, #2]
 8009154:	4618      	mov	r0, r3
 8009156:	f000 fa95 	bl	8009684 <RTC_ByteToBcd2>
 800915a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800915c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	78db      	ldrb	r3, [r3, #3]
 8009164:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009166:	4313      	orrs	r3, r2
 8009168:	617b      	str	r3, [r7, #20]
 800916a:	e018      	b.n	800919e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009176:	2b00      	cmp	r3, #0
 8009178:	d102      	bne.n	8009180 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	2200      	movs	r2, #0
 800917e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	785b      	ldrb	r3, [r3, #1]
 800918a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800918c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800918e:	68ba      	ldr	r2, [r7, #8]
 8009190:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009192:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	78db      	ldrb	r3, [r3, #3]
 8009198:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800919a:	4313      	orrs	r3, r2
 800919c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	22ca      	movs	r2, #202	@ 0xca
 80091a4:	625a      	str	r2, [r3, #36]	@ 0x24
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2253      	movs	r2, #83	@ 0x53
 80091ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	f000 fa0c 	bl	80095cc <RTC_EnterInitMode>
 80091b4:	4603      	mov	r3, r0
 80091b6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80091b8:	7cfb      	ldrb	r3, [r7, #19]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d11e      	bne.n	80091fc <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	6979      	ldr	r1, [r7, #20]
 80091c4:	4b16      	ldr	r3, [pc, #88]	@ (8009220 <HAL_RTC_SetTime+0x130>)
 80091c6:	400b      	ands	r3, r1
 80091c8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	689a      	ldr	r2, [r3, #8]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80091d8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	6899      	ldr	r1, [r3, #8]
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	68da      	ldr	r2, [r3, #12]
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	691b      	ldr	r3, [r3, #16]
 80091e8:	431a      	orrs	r2, r3
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	430a      	orrs	r2, r1
 80091f0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f000 fa21 	bl	800963a <RTC_ExitInitMode>
 80091f8:	4603      	mov	r3, r0
 80091fa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80091fc:	7cfb      	ldrb	r3, [r7, #19]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d102      	bne.n	8009208 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2201      	movs	r2, #1
 8009206:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	22ff      	movs	r2, #255	@ 0xff
 800920e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	771a      	strb	r2, [r3, #28]

  return status;
 8009216:	7cfb      	ldrb	r3, [r7, #19]
}
 8009218:	4618      	mov	r0, r3
 800921a:	371c      	adds	r7, #28
 800921c:	46bd      	mov	sp, r7
 800921e:	bd90      	pop	{r4, r7, pc}
 8009220:	007f7f7f 	.word	0x007f7f7f

08009224 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009224:	b590      	push	{r4, r7, lr}
 8009226:	b087      	sub	sp, #28
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009230:	2300      	movs	r3, #0
 8009232:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	7f1b      	ldrb	r3, [r3, #28]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d101      	bne.n	8009240 <HAL_RTC_SetDate+0x1c>
 800923c:	2302      	movs	r3, #2
 800923e:	e06f      	b.n	8009320 <HAL_RTC_SetDate+0xfc>
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2201      	movs	r2, #1
 8009244:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2202      	movs	r2, #2
 800924a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d10e      	bne.n	8009270 <HAL_RTC_SetDate+0x4c>
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	785b      	ldrb	r3, [r3, #1]
 8009256:	f003 0310 	and.w	r3, r3, #16
 800925a:	2b00      	cmp	r3, #0
 800925c:	d008      	beq.n	8009270 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	785b      	ldrb	r3, [r3, #1]
 8009262:	f023 0310 	bic.w	r3, r3, #16
 8009266:	b2db      	uxtb	r3, r3
 8009268:	330a      	adds	r3, #10
 800926a:	b2da      	uxtb	r2, r3
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d11c      	bne.n	80092b0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	78db      	ldrb	r3, [r3, #3]
 800927a:	4618      	mov	r0, r3
 800927c:	f000 fa02 	bl	8009684 <RTC_ByteToBcd2>
 8009280:	4603      	mov	r3, r0
 8009282:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	785b      	ldrb	r3, [r3, #1]
 8009288:	4618      	mov	r0, r3
 800928a:	f000 f9fb 	bl	8009684 <RTC_ByteToBcd2>
 800928e:	4603      	mov	r3, r0
 8009290:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009292:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	789b      	ldrb	r3, [r3, #2]
 8009298:	4618      	mov	r0, r3
 800929a:	f000 f9f3 	bl	8009684 <RTC_ByteToBcd2>
 800929e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80092a0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80092aa:	4313      	orrs	r3, r2
 80092ac:	617b      	str	r3, [r7, #20]
 80092ae:	e00e      	b.n	80092ce <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	78db      	ldrb	r3, [r3, #3]
 80092b4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	785b      	ldrb	r3, [r3, #1]
 80092ba:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80092bc:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80092be:	68ba      	ldr	r2, [r7, #8]
 80092c0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80092c2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80092ca:	4313      	orrs	r3, r2
 80092cc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	22ca      	movs	r2, #202	@ 0xca
 80092d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2253      	movs	r2, #83	@ 0x53
 80092dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f000 f974 	bl	80095cc <RTC_EnterInitMode>
 80092e4:	4603      	mov	r3, r0
 80092e6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80092e8:	7cfb      	ldrb	r3, [r7, #19]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10a      	bne.n	8009304 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	6979      	ldr	r1, [r7, #20]
 80092f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009328 <HAL_RTC_SetDate+0x104>)
 80092f6:	400b      	ands	r3, r1
 80092f8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f000 f99d 	bl	800963a <RTC_ExitInitMode>
 8009300:	4603      	mov	r3, r0
 8009302:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009304:	7cfb      	ldrb	r3, [r7, #19]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d102      	bne.n	8009310 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2201      	movs	r2, #1
 800930e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	22ff      	movs	r2, #255	@ 0xff
 8009316:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	771a      	strb	r2, [r3, #28]

  return status;
 800931e:	7cfb      	ldrb	r3, [r7, #19]
}
 8009320:	4618      	mov	r0, r3
 8009322:	371c      	adds	r7, #28
 8009324:	46bd      	mov	sp, r7
 8009326:	bd90      	pop	{r4, r7, pc}
 8009328:	00ffff3f 	.word	0x00ffff3f

0800932c <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800932c:	b590      	push	{r4, r7, lr}
 800932e:	b089      	sub	sp, #36	@ 0x24
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009338:	2300      	movs	r3, #0
 800933a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800933c:	2300      	movs	r3, #0
 800933e:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8009340:	2300      	movs	r3, #0
 8009342:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	7f1b      	ldrb	r3, [r3, #28]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d101      	bne.n	8009350 <HAL_RTC_SetAlarm+0x24>
 800934c:	2302      	movs	r3, #2
 800934e:	e113      	b.n	8009578 <HAL_RTC_SetAlarm+0x24c>
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2201      	movs	r2, #1
 8009354:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2202      	movs	r2, #2
 800935a:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d137      	bne.n	80093d2 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800936c:	2b00      	cmp	r3, #0
 800936e:	d102      	bne.n	8009376 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	2200      	movs	r2, #0
 8009374:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	4618      	mov	r0, r3
 800937c:	f000 f982 	bl	8009684 <RTC_ByteToBcd2>
 8009380:	4603      	mov	r3, r0
 8009382:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	785b      	ldrb	r3, [r3, #1]
 8009388:	4618      	mov	r0, r3
 800938a:	f000 f97b 	bl	8009684 <RTC_ByteToBcd2>
 800938e:	4603      	mov	r3, r0
 8009390:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009392:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	789b      	ldrb	r3, [r3, #2]
 8009398:	4618      	mov	r0, r3
 800939a:	f000 f973 	bl	8009684 <RTC_ByteToBcd2>
 800939e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80093a0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	78db      	ldrb	r3, [r3, #3]
 80093a8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80093aa:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80093b4:	4618      	mov	r0, r3
 80093b6:	f000 f965 	bl	8009684 <RTC_ByteToBcd2>
 80093ba:	4603      	mov	r3, r0
 80093bc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 80093be:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80093c6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80093cc:	4313      	orrs	r3, r2
 80093ce:	61fb      	str	r3, [r7, #28]
 80093d0:	e023      	b.n	800941a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d102      	bne.n	80093e6 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	2200      	movs	r2, #0
 80093e4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	785b      	ldrb	r3, [r3, #1]
 80093f0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80093f2:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80093f4:	68ba      	ldr	r2, [r7, #8]
 80093f6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80093f8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	78db      	ldrb	r3, [r3, #3]
 80093fe:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009400:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009408:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800940a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009410:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009416:	4313      	orrs	r3, r2
 8009418:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009422:	4313      	orrs	r3, r2
 8009424:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	22ca      	movs	r2, #202	@ 0xca
 800942c:	625a      	str	r2, [r3, #36]	@ 0x24
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2253      	movs	r2, #83	@ 0x53
 8009434:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800943a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800943e:	d148      	bne.n	80094d2 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	689a      	ldr	r2, [r3, #8]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800944e:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	689a      	ldr	r2, [r3, #8]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800945e:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	b2da      	uxtb	r2, r3
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8009470:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009472:	f7fa f86b 	bl	800354c <HAL_GetTick>
 8009476:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009478:	e013      	b.n	80094a2 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800947a:	f7fa f867 	bl	800354c <HAL_GetTick>
 800947e:	4602      	mov	r2, r0
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	1ad3      	subs	r3, r2, r3
 8009484:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009488:	d90b      	bls.n	80094a2 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	22ff      	movs	r2, #255	@ 0xff
 8009490:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2203      	movs	r2, #3
 8009496:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2200      	movs	r2, #0
 800949c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800949e:	2303      	movs	r3, #3
 80094a0:	e06a      	b.n	8009578 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	f003 0301 	and.w	r3, r3, #1
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d0e4      	beq.n	800947a <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	69fa      	ldr	r2, [r7, #28]
 80094b6:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	697a      	ldr	r2, [r7, #20]
 80094be:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	689a      	ldr	r2, [r3, #8]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80094ce:	609a      	str	r2, [r3, #8]
 80094d0:	e047      	b.n	8009562 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	689a      	ldr	r2, [r3, #8]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80094e0:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	689a      	ldr	r2, [r3, #8]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80094f0:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	b2da      	uxtb	r2, r3
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8009502:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009504:	f7fa f822 	bl	800354c <HAL_GetTick>
 8009508:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800950a:	e013      	b.n	8009534 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800950c:	f7fa f81e 	bl	800354c <HAL_GetTick>
 8009510:	4602      	mov	r2, r0
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	1ad3      	subs	r3, r2, r3
 8009516:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800951a:	d90b      	bls.n	8009534 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	22ff      	movs	r2, #255	@ 0xff
 8009522:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2203      	movs	r2, #3
 8009528:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2200      	movs	r2, #0
 800952e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009530:	2303      	movs	r3, #3
 8009532:	e021      	b.n	8009578 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	f003 0302 	and.w	r3, r3, #2
 800953e:	2b00      	cmp	r3, #0
 8009540:	d0e4      	beq.n	800950c <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	69fa      	ldr	r2, [r7, #28]
 8009548:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	697a      	ldr	r2, [r7, #20]
 8009550:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	689a      	ldr	r2, [r3, #8]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009560:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	22ff      	movs	r2, #255	@ 0xff
 8009568:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2201      	movs	r2, #1
 800956e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2200      	movs	r2, #0
 8009574:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	3724      	adds	r7, #36	@ 0x24
 800957c:	46bd      	mov	sp, r7
 800957e:	bd90      	pop	{r4, r7, pc}

08009580 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009588:	2300      	movs	r3, #0
 800958a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a0d      	ldr	r2, [pc, #52]	@ (80095c8 <HAL_RTC_WaitForSynchro+0x48>)
 8009592:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009594:	f7f9 ffda 	bl	800354c <HAL_GetTick>
 8009598:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800959a:	e009      	b.n	80095b0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800959c:	f7f9 ffd6 	bl	800354c <HAL_GetTick>
 80095a0:	4602      	mov	r2, r0
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	1ad3      	subs	r3, r2, r3
 80095a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80095aa:	d901      	bls.n	80095b0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80095ac:	2303      	movs	r3, #3
 80095ae:	e007      	b.n	80095c0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	f003 0320 	and.w	r3, r3, #32
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d0ee      	beq.n	800959c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	0001ff5f 	.word	0x0001ff5f

080095cc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80095d4:	2300      	movs	r3, #0
 80095d6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80095d8:	2300      	movs	r3, #0
 80095da:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d122      	bne.n	8009630 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68da      	ldr	r2, [r3, #12]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80095f8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80095fa:	f7f9 ffa7 	bl	800354c <HAL_GetTick>
 80095fe:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009600:	e00c      	b.n	800961c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009602:	f7f9 ffa3 	bl	800354c <HAL_GetTick>
 8009606:	4602      	mov	r2, r0
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	1ad3      	subs	r3, r2, r3
 800960c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009610:	d904      	bls.n	800961c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2204      	movs	r2, #4
 8009616:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009626:	2b00      	cmp	r3, #0
 8009628:	d102      	bne.n	8009630 <RTC_EnterInitMode+0x64>
 800962a:	7bfb      	ldrb	r3, [r7, #15]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d1e8      	bne.n	8009602 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009630:	7bfb      	ldrb	r3, [r7, #15]
}
 8009632:	4618      	mov	r0, r3
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b084      	sub	sp, #16
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009642:	2300      	movs	r3, #0
 8009644:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	68da      	ldr	r2, [r3, #12]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009654:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	f003 0320 	and.w	r3, r3, #32
 8009660:	2b00      	cmp	r3, #0
 8009662:	d10a      	bne.n	800967a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f7ff ff8b 	bl	8009580 <HAL_RTC_WaitForSynchro>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d004      	beq.n	800967a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2204      	movs	r2, #4
 8009674:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009676:	2301      	movs	r3, #1
 8009678:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800967a:	7bfb      	ldrb	r3, [r7, #15]
}
 800967c:	4618      	mov	r0, r3
 800967e:	3710      	adds	r7, #16
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	4603      	mov	r3, r0
 800968c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800968e:	2300      	movs	r3, #0
 8009690:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8009692:	e005      	b.n	80096a0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	3301      	adds	r3, #1
 8009698:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800969a:	79fb      	ldrb	r3, [r7, #7]
 800969c:	3b0a      	subs	r3, #10
 800969e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80096a0:	79fb      	ldrb	r3, [r7, #7]
 80096a2:	2b09      	cmp	r3, #9
 80096a4:	d8f6      	bhi.n	8009694 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	011b      	lsls	r3, r3, #4
 80096ac:	b2da      	uxtb	r2, r3
 80096ae:	79fb      	ldrb	r3, [r7, #7]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	b2db      	uxtb	r3, r3
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3714      	adds	r7, #20
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b087      	sub	sp, #28
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80096cc:	2300      	movs	r3, #0
 80096ce:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	7f1b      	ldrb	r3, [r3, #28]
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d101      	bne.n	80096dc <HAL_RTCEx_SetTimeStamp+0x1c>
 80096d8:	2302      	movs	r3, #2
 80096da:	e050      	b.n	800977e <HAL_RTCEx_SetTimeStamp+0xbe>
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2201      	movs	r2, #1
 80096e0:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2202      	movs	r2, #2
 80096e6:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f022 0206 	bic.w	r2, r2, #6
 80096f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	430a      	orrs	r2, r1
 8009706:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	689a      	ldr	r2, [r3, #8]
 800970e:	4b1f      	ldr	r3, [pc, #124]	@ (800978c <HAL_RTCEx_SetTimeStamp+0xcc>)
 8009710:	4013      	ands	r3, r2
 8009712:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8009714:	697a      	ldr	r2, [r7, #20]
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	4313      	orrs	r3, r2
 800971a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	22ca      	movs	r2, #202	@ 0xca
 8009722:	625a      	str	r2, [r3, #36]	@ 0x24
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2253      	movs	r2, #83	@ 0x53
 800972a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	697a      	ldr	r2, [r7, #20]
 8009732:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	b2da      	uxtb	r2, r3
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 8009744:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	b2da      	uxtb	r2, r3
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 8009756:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	689a      	ldr	r2, [r3, #8]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009766:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	22ff      	movs	r2, #255	@ 0xff
 800976e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2201      	movs	r2, #1
 8009774:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2200      	movs	r2, #0
 800977a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800977c:	2300      	movs	r3, #0
}
 800977e:	4618      	mov	r0, r3
 8009780:	371c      	adds	r7, #28
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	fffff7f7 	.word	0xfffff7f7

08009790 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b088      	sub	sp, #32
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8009798:	2300      	movs	r3, #0
 800979a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800979c:	2300      	movs	r3, #0
 800979e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80097a0:	2300      	movs	r3, #0
 80097a2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d101      	bne.n	80097ae <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80097aa:	2301      	movs	r3, #1
 80097ac:	e156      	b.n	8009a5c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d106      	bne.n	80097c8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f7f9 fa70 	bl	8002ca8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2202      	movs	r2, #2
 80097cc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 f95b 	bl	8009a8c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	2b02      	cmp	r3, #2
 80097dc:	d00c      	beq.n	80097f8 <HAL_SAI_Init+0x68>
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d80d      	bhi.n	80097fe <HAL_SAI_Init+0x6e>
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d002      	beq.n	80097ec <HAL_SAI_Init+0x5c>
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d003      	beq.n	80097f2 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 80097ea:	e008      	b.n	80097fe <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80097ec:	2300      	movs	r3, #0
 80097ee:	61fb      	str	r3, [r7, #28]
      break;
 80097f0:	e006      	b.n	8009800 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80097f2:	2310      	movs	r3, #16
 80097f4:	61fb      	str	r3, [r7, #28]
      break;
 80097f6:	e003      	b.n	8009800 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80097f8:	2320      	movs	r3, #32
 80097fa:	61fb      	str	r3, [r7, #28]
      break;
 80097fc:	e000      	b.n	8009800 <HAL_SAI_Init+0x70>
      break;
 80097fe:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	2b03      	cmp	r3, #3
 8009806:	d81e      	bhi.n	8009846 <HAL_SAI_Init+0xb6>
 8009808:	a201      	add	r2, pc, #4	@ (adr r2, 8009810 <HAL_SAI_Init+0x80>)
 800980a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800980e:	bf00      	nop
 8009810:	08009821 	.word	0x08009821
 8009814:	08009827 	.word	0x08009827
 8009818:	0800982f 	.word	0x0800982f
 800981c:	08009837 	.word	0x08009837
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8009820:	2300      	movs	r3, #0
 8009822:	617b      	str	r3, [r7, #20]
    }
    break;
 8009824:	e010      	b.n	8009848 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009826:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800982a:	617b      	str	r3, [r7, #20]
    }
    break;
 800982c:	e00c      	b.n	8009848 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800982e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009832:	617b      	str	r3, [r7, #20]
    }
    break;
 8009834:	e008      	b.n	8009848 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009836:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800983a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	f043 0301 	orr.w	r3, r3, #1
 8009842:	61fb      	str	r3, [r7, #28]
    }
    break;
 8009844:	e000      	b.n	8009848 <HAL_SAI_Init+0xb8>
    default:
      break;
 8009846:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a85      	ldr	r2, [pc, #532]	@ (8009a64 <HAL_SAI_Init+0x2d4>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d004      	beq.n	800985c <HAL_SAI_Init+0xcc>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a84      	ldr	r2, [pc, #528]	@ (8009a68 <HAL_SAI_Init+0x2d8>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d103      	bne.n	8009864 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800985c:	4a83      	ldr	r2, [pc, #524]	@ (8009a6c <HAL_SAI_Init+0x2dc>)
 800985e:	69fb      	ldr	r3, [r7, #28]
 8009860:	6013      	str	r3, [r2, #0]
 8009862:	e002      	b.n	800986a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8009864:	4a82      	ldr	r2, [pc, #520]	@ (8009a70 <HAL_SAI_Init+0x2e0>)
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	69db      	ldr	r3, [r3, #28]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d04c      	beq.n	800990c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8009872:	2300      	movs	r3, #0
 8009874:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a7a      	ldr	r2, [pc, #488]	@ (8009a64 <HAL_SAI_Init+0x2d4>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d004      	beq.n	800988a <HAL_SAI_Init+0xfa>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a78      	ldr	r2, [pc, #480]	@ (8009a68 <HAL_SAI_Init+0x2d8>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d104      	bne.n	8009894 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800988a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800988e:	f7ff fa6d 	bl	8008d6c <HAL_RCCEx_GetPeriphCLKFreq>
 8009892:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a76      	ldr	r2, [pc, #472]	@ (8009a74 <HAL_SAI_Init+0x2e4>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d004      	beq.n	80098a8 <HAL_SAI_Init+0x118>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a75      	ldr	r2, [pc, #468]	@ (8009a78 <HAL_SAI_Init+0x2e8>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d104      	bne.n	80098b2 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80098a8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80098ac:	f7ff fa5e 	bl	8008d6c <HAL_RCCEx_GetPeriphCLKFreq>
 80098b0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80098b2:	693a      	ldr	r2, [r7, #16]
 80098b4:	4613      	mov	r3, r2
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	4413      	add	r3, r2
 80098ba:	005b      	lsls	r3, r3, #1
 80098bc:	461a      	mov	r2, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	69db      	ldr	r3, [r3, #28]
 80098c2:	025b      	lsls	r3, r3, #9
 80098c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098c8:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	4a6b      	ldr	r2, [pc, #428]	@ (8009a7c <HAL_SAI_Init+0x2ec>)
 80098ce:	fba2 2303 	umull	r2, r3, r2, r3
 80098d2:	08da      	lsrs	r2, r3, #3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 80098d8:	68f9      	ldr	r1, [r7, #12]
 80098da:	4b68      	ldr	r3, [pc, #416]	@ (8009a7c <HAL_SAI_Init+0x2ec>)
 80098dc:	fba3 2301 	umull	r2, r3, r3, r1
 80098e0:	08da      	lsrs	r2, r3, #3
 80098e2:	4613      	mov	r3, r2
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	4413      	add	r3, r2
 80098e8:	005b      	lsls	r3, r3, #1
 80098ea:	1aca      	subs	r2, r1, r3
 80098ec:	2a08      	cmp	r2, #8
 80098ee:	d904      	bls.n	80098fa <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6a1b      	ldr	r3, [r3, #32]
 80098f4:	1c5a      	adds	r2, r3, #1
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098fe:	2b04      	cmp	r3, #4
 8009900:	d104      	bne.n	800990c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a1b      	ldr	r3, [r3, #32]
 8009906:	085a      	lsrs	r2, r3, #1
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d003      	beq.n	800991c <HAL_SAI_Init+0x18c>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	2b02      	cmp	r3, #2
 800991a:	d109      	bne.n	8009930 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009920:	2b01      	cmp	r3, #1
 8009922:	d101      	bne.n	8009928 <HAL_SAI_Init+0x198>
 8009924:	2300      	movs	r3, #0
 8009926:	e001      	b.n	800992c <HAL_SAI_Init+0x19c>
 8009928:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800992c:	61bb      	str	r3, [r7, #24]
 800992e:	e008      	b.n	8009942 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009934:	2b01      	cmp	r3, #1
 8009936:	d102      	bne.n	800993e <HAL_SAI_Init+0x1ae>
 8009938:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800993c:	e000      	b.n	8009940 <HAL_SAI_Init+0x1b0>
 800993e:	2300      	movs	r3, #0
 8009940:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	6819      	ldr	r1, [r3, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	4b4c      	ldr	r3, [pc, #304]	@ (8009a80 <HAL_SAI_Init+0x2f0>)
 800994e:	400b      	ands	r3, r1
 8009950:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	6819      	ldr	r1, [r3, #0]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	685a      	ldr	r2, [r3, #4]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009960:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009966:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800996c:	431a      	orrs	r2, r3
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800997a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	691b      	ldr	r3, [r3, #16]
 8009980:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009986:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6a1b      	ldr	r3, [r3, #32]
 800998c:	051b      	lsls	r3, r3, #20
 800998e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	430a      	orrs	r2, r1
 8009996:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	6859      	ldr	r1, [r3, #4]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	4b38      	ldr	r3, [pc, #224]	@ (8009a84 <HAL_SAI_Init+0x2f4>)
 80099a4:	400b      	ands	r3, r1
 80099a6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	6859      	ldr	r1, [r3, #4]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	699a      	ldr	r2, [r3, #24]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099b6:	431a      	orrs	r2, r3
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099bc:	431a      	orrs	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	430a      	orrs	r2, r1
 80099c4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	6899      	ldr	r1, [r3, #8]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	4b2d      	ldr	r3, [pc, #180]	@ (8009a88 <HAL_SAI_Init+0x2f8>)
 80099d2:	400b      	ands	r3, r1
 80099d4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	6899      	ldr	r1, [r3, #8]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099e0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80099e6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 80099ec:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 80099f2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099f8:	3b01      	subs	r3, #1
 80099fa:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80099fc:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	430a      	orrs	r2, r1
 8009a04:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	68d9      	ldr	r1, [r3, #12]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8009a14:	400b      	ands	r3, r1
 8009a16:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	68d9      	ldr	r1, [r3, #12]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a26:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a2c:	041b      	lsls	r3, r3, #16
 8009a2e:	431a      	orrs	r2, r3
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a34:	3b01      	subs	r3, #1
 8009a36:	021b      	lsls	r3, r3, #8
 8009a38:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	430a      	orrs	r2, r1
 8009a40:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2200      	movs	r2, #0
 8009a56:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3720      	adds	r7, #32
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	40015804 	.word	0x40015804
 8009a68:	40015824 	.word	0x40015824
 8009a6c:	40015800 	.word	0x40015800
 8009a70:	40015c00 	.word	0x40015c00
 8009a74:	40015c04 	.word	0x40015c04
 8009a78:	40015c24 	.word	0x40015c24
 8009a7c:	cccccccd 	.word	0xcccccccd
 8009a80:	ff05c010 	.word	0xff05c010
 8009a84:	ffff1ff0 	.word	0xffff1ff0
 8009a88:	fff88000 	.word	0xfff88000

08009a8c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b085      	sub	sp, #20
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8009a94:	4b17      	ldr	r3, [pc, #92]	@ (8009af4 <SAI_Disable+0x68>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a17      	ldr	r2, [pc, #92]	@ (8009af8 <SAI_Disable+0x6c>)
 8009a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a9e:	0b1b      	lsrs	r3, r3, #12
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009ab6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	1e5a      	subs	r2, r3, #1
 8009abc:	60fa      	str	r2, [r7, #12]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d10a      	bne.n	8009ad8 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ac8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8009ad2:	2303      	movs	r3, #3
 8009ad4:	72fb      	strb	r3, [r7, #11]
      break;
 8009ad6:	e006      	b.n	8009ae6 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d1e8      	bne.n	8009ab8 <SAI_Disable+0x2c>

  return status;
 8009ae6:	7afb      	ldrb	r3, [r7, #11]
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3714      	adds	r7, #20
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr
 8009af4:	20000000 	.word	0x20000000
 8009af8:	95cbec1b 	.word	0x95cbec1b

08009afc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d101      	bne.n	8009b0e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e022      	b.n	8009b54 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d105      	bne.n	8009b26 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f7f8 fcdb 	bl	80024dc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2203      	movs	r2, #3
 8009b2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 f814 	bl	8009b5c <HAL_SD_InitCard>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d001      	beq.n	8009b3e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e00a      	b.n	8009b54 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3708      	adds	r7, #8
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009b5c:	b5b0      	push	{r4, r5, r7, lr}
 8009b5e:	b08e      	sub	sp, #56	@ 0x38
 8009b60:	af04      	add	r7, sp, #16
 8009b62:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009b64:	2300      	movs	r3, #0
 8009b66:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009b70:	2300      	movs	r3, #0
 8009b72:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009b74:	2300      	movs	r3, #0
 8009b76:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8009b78:	2376      	movs	r3, #118	@ 0x76
 8009b7a:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681d      	ldr	r5, [r3, #0]
 8009b80:	466c      	mov	r4, sp
 8009b82:	f107 0318 	add.w	r3, r7, #24
 8009b86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009b8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009b8e:	f107 030c 	add.w	r3, r7, #12
 8009b92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009b94:	4628      	mov	r0, r5
 8009b96:	f003 fb0b 	bl	800d1b0 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	685a      	ldr	r2, [r3, #4]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009ba8:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f003 fb37 	bl	800d222 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	685a      	ldr	r2, [r3, #4]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009bc2:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009bc4:	2002      	movs	r0, #2
 8009bc6:	f7f9 fccd 	bl	8003564 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 fe10 	bl	800a7f0 <SD_PowerON>
 8009bd0:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00b      	beq.n	8009bf0 <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be6:	431a      	orrs	r2, r3
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009bec:	2301      	movs	r3, #1
 8009bee:	e02e      	b.n	8009c4e <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 fd2f 	bl	800a654 <SD_InitCard>
 8009bf6:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00b      	beq.n	8009c16 <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2201      	movs	r2, #1
 8009c02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c0c:	431a      	orrs	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	e01b      	b.n	8009c4e <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f003 fb92 	bl	800d348 <SDMMC_CmdBlockLength>
 8009c24:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d00f      	beq.n	8009c4c <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a09      	ldr	r2, [pc, #36]	@ (8009c58 <HAL_SD_InitCard+0xfc>)
 8009c32:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3a:	431a      	orrs	r2, r3
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e000      	b.n	8009c4e <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3728      	adds	r7, #40	@ 0x28
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bdb0      	pop	{r4, r5, r7, pc}
 8009c56:	bf00      	nop
 8009c58:	004005ff 	.word	0x004005ff

08009c5c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b08c      	sub	sp, #48	@ 0x30
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	607a      	str	r2, [r7, #4]
 8009c68:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d107      	bne.n	8009c84 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c78:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009c80:	2301      	movs	r3, #1
 8009c82:	e0c3      	b.n	8009e0c <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	f040 80bc 	bne.w	8009e0a <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2200      	movs	r2, #0
 8009c96:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009c98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	441a      	add	r2, r3
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d907      	bls.n	8009cb6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009caa:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e0aa      	b.n	8009e0c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2203      	movs	r2, #3
 8009cba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8009cd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cda:	4a4e      	ldr	r2, [pc, #312]	@ (8009e14 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8009cdc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ce2:	4a4d      	ldr	r2, [pc, #308]	@ (8009e18 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8009ce4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cea:	2200      	movs	r2, #0
 8009cec:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d06:	689a      	ldr	r2, [r3, #8]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	430a      	orrs	r2, r1
 8009d10:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	3380      	adds	r3, #128	@ 0x80
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	68ba      	ldr	r2, [r7, #8]
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	025b      	lsls	r3, r3, #9
 8009d24:	089b      	lsrs	r3, r3, #2
 8009d26:	f7fa f927 	bl	8003f78 <HAL_DMA_Start_IT>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d017      	beq.n	8009d60 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8009d3e:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a35      	ldr	r2, [pc, #212]	@ (8009e1c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009d46:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d4c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e055      	b.n	8009e0c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f042 0208 	orr.w	r2, r2, #8
 8009d6e:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d002      	beq.n	8009d7e <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8009d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d7a:	025b      	lsls	r3, r3, #9
 8009d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d82:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	025b      	lsls	r3, r3, #9
 8009d88:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009d8a:	2390      	movs	r3, #144	@ 0x90
 8009d8c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009d8e:	2302      	movs	r3, #2
 8009d90:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009d92:	2300      	movs	r3, #0
 8009d94:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009d96:	2301      	movs	r3, #1
 8009d98:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f107 0210 	add.w	r2, r7, #16
 8009da2:	4611      	mov	r1, r2
 8009da4:	4618      	mov	r0, r3
 8009da6:	f003 faa3 	bl	800d2f0 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d90a      	bls.n	8009dc6 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2282      	movs	r2, #130	@ 0x82
 8009db4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f003 fb07 	bl	800d3d0 <SDMMC_CmdReadMultiBlock>
 8009dc2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009dc4:	e009      	b.n	8009dda <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2281      	movs	r2, #129	@ 0x81
 8009dca:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f003 fada 	bl	800d38c <SDMMC_CmdReadSingleBlock>
 8009dd8:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d012      	beq.n	8009e06 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a0d      	ldr	r2, [pc, #52]	@ (8009e1c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009de6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dee:	431a      	orrs	r2, r3
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2201      	movs	r2, #1
 8009df8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	e002      	b.n	8009e0c <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8009e06:	2300      	movs	r3, #0
 8009e08:	e000      	b.n	8009e0c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8009e0a:	2302      	movs	r3, #2
  }
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3730      	adds	r7, #48	@ 0x30
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	0800a53f 	.word	0x0800a53f
 8009e18:	0800a5b1 	.word	0x0800a5b1
 8009e1c:	004005ff 	.word	0x004005ff

08009e20 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b08c      	sub	sp, #48	@ 0x30
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	607a      	str	r2, [r7, #4]
 8009e2c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d107      	bne.n	8009e48 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e3c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009e44:	2301      	movs	r3, #1
 8009e46:	e0c6      	b.n	8009fd6 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	f040 80bf 	bne.w	8009fd4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009e5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	441a      	add	r2, r3
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d907      	bls.n	8009e7a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e6e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	e0ad      	b.n	8009fd6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2203      	movs	r2, #3
 8009e7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2200      	movs	r2, #0
 8009e88:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f042 021a 	orr.w	r2, r2, #26
 8009e98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e9e:	4a50      	ldr	r2, [pc, #320]	@ (8009fe0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8009ea0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ea6:	4a4f      	ldr	r2, [pc, #316]	@ (8009fe4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8009ea8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009eae:	2200      	movs	r2, #0
 8009eb0:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d002      	beq.n	8009ec0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8009eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ebc:	025b      	lsls	r3, r3, #9
 8009ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d90a      	bls.n	8009edc <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	22a0      	movs	r2, #160	@ 0xa0
 8009eca:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f003 fac0 	bl	800d458 <SDMMC_CmdWriteMultiBlock>
 8009ed8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009eda:	e009      	b.n	8009ef0 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2290      	movs	r2, #144	@ 0x90
 8009ee0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f003 fa93 	bl	800d414 <SDMMC_CmdWriteSingleBlock>
 8009eee:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d012      	beq.n	8009f1c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a3b      	ldr	r2, [pc, #236]	@ (8009fe8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009efc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f04:	431a      	orrs	r2, r3
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2200      	movs	r2, #0
 8009f16:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e05c      	b.n	8009fd6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f042 0208 	orr.w	r2, r2, #8
 8009f2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f30:	2240      	movs	r2, #64	@ 0x40
 8009f32:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f44:	689a      	ldr	r2, [r3, #8]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	430a      	orrs	r2, r1
 8009f4e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009f54:	68b9      	ldr	r1, [r7, #8]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	3380      	adds	r3, #128	@ 0x80
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	025b      	lsls	r3, r3, #9
 8009f62:	089b      	lsrs	r3, r3, #2
 8009f64:	f7fa f808 	bl	8003f78 <HAL_DMA_Start_IT>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d01a      	beq.n	8009fa4 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f022 021a 	bic.w	r2, r2, #26
 8009f7c:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a19      	ldr	r2, [pc, #100]	@ (8009fe8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009f84:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f8a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2201      	movs	r2, #1
 8009f96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e018      	b.n	8009fd6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8009fa8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	025b      	lsls	r3, r3, #9
 8009fae:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009fb0:	2390      	movs	r3, #144	@ 0x90
 8009fb2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f107 0210 	add.w	r2, r7, #16
 8009fc8:	4611      	mov	r1, r2
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f003 f990 	bl	800d2f0 <SDMMC_ConfigData>

      return HAL_OK;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	e000      	b.n	8009fd6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8009fd4:	2302      	movs	r3, #2
  }
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3730      	adds	r7, #48	@ 0x30
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	0800a515 	.word	0x0800a515
 8009fe4:	0800a5b1 	.word	0x0800a5b1
 8009fe8:	004005ff 	.word	0x004005ff

08009fec <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009ff4:	bf00      	nop
 8009ff6:	370c      	adds	r7, #12
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a00e:	0f9b      	lsrs	r3, r3, #30
 800a010:	b2da      	uxtb	r2, r3
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a01a:	0e9b      	lsrs	r3, r3, #26
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	f003 030f 	and.w	r3, r3, #15
 800a022:	b2da      	uxtb	r2, r3
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a02c:	0e1b      	lsrs	r3, r3, #24
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	f003 0303 	and.w	r3, r3, #3
 800a034:	b2da      	uxtb	r2, r3
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a03e:	0c1b      	lsrs	r3, r3, #16
 800a040:	b2da      	uxtb	r2, r3
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a04a:	0a1b      	lsrs	r3, r3, #8
 800a04c:	b2da      	uxtb	r2, r3
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a056:	b2da      	uxtb	r2, r3
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a060:	0d1b      	lsrs	r3, r3, #20
 800a062:	b29a      	uxth	r2, r3
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a06c:	0c1b      	lsrs	r3, r3, #16
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	f003 030f 	and.w	r3, r3, #15
 800a074:	b2da      	uxtb	r2, r3
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a07e:	0bdb      	lsrs	r3, r3, #15
 800a080:	b2db      	uxtb	r3, r3
 800a082:	f003 0301 	and.w	r3, r3, #1
 800a086:	b2da      	uxtb	r2, r3
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a090:	0b9b      	lsrs	r3, r3, #14
 800a092:	b2db      	uxtb	r3, r3
 800a094:	f003 0301 	and.w	r3, r3, #1
 800a098:	b2da      	uxtb	r2, r3
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a0a2:	0b5b      	lsrs	r3, r3, #13
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	f003 0301 	and.w	r3, r3, #1
 800a0aa:	b2da      	uxtb	r2, r3
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a0b4:	0b1b      	lsrs	r3, r3, #12
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	f003 0301 	and.w	r3, r3, #1
 800a0bc:	b2da      	uxtb	r2, r3
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d163      	bne.n	800a198 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a0d4:	009a      	lsls	r2, r3, #2
 800a0d6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a0da:	4013      	ands	r3, r2
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800a0e0:	0f92      	lsrs	r2, r2, #30
 800a0e2:	431a      	orrs	r2, r3
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0ec:	0edb      	lsrs	r3, r3, #27
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	f003 0307 	and.w	r3, r3, #7
 800a0f4:	b2da      	uxtb	r2, r3
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0fe:	0e1b      	lsrs	r3, r3, #24
 800a100:	b2db      	uxtb	r3, r3
 800a102:	f003 0307 	and.w	r3, r3, #7
 800a106:	b2da      	uxtb	r2, r3
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a110:	0d5b      	lsrs	r3, r3, #21
 800a112:	b2db      	uxtb	r3, r3
 800a114:	f003 0307 	and.w	r3, r3, #7
 800a118:	b2da      	uxtb	r2, r3
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a122:	0c9b      	lsrs	r3, r3, #18
 800a124:	b2db      	uxtb	r3, r3
 800a126:	f003 0307 	and.w	r3, r3, #7
 800a12a:	b2da      	uxtb	r2, r3
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a134:	0bdb      	lsrs	r3, r3, #15
 800a136:	b2db      	uxtb	r3, r3
 800a138:	f003 0307 	and.w	r3, r3, #7
 800a13c:	b2da      	uxtb	r2, r3
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	691b      	ldr	r3, [r3, #16]
 800a146:	1c5a      	adds	r2, r3, #1
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	7e1b      	ldrb	r3, [r3, #24]
 800a150:	b2db      	uxtb	r3, r3
 800a152:	f003 0307 	and.w	r3, r3, #7
 800a156:	3302      	adds	r3, #2
 800a158:	2201      	movs	r2, #1
 800a15a:	fa02 f303 	lsl.w	r3, r2, r3
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a162:	fb03 f202 	mul.w	r2, r3, r2
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	7a1b      	ldrb	r3, [r3, #8]
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	f003 030f 	and.w	r3, r3, #15
 800a174:	2201      	movs	r2, #1
 800a176:	409a      	lsls	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800a184:	0a52      	lsrs	r2, r2, #9
 800a186:	fb03 f202 	mul.w	r2, r3, r2
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a194:	661a      	str	r2, [r3, #96]	@ 0x60
 800a196:	e031      	b.n	800a1fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d11d      	bne.n	800a1dc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a1a4:	041b      	lsls	r3, r3, #16
 800a1a6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1ae:	0c1b      	lsrs	r3, r3, #16
 800a1b0:	431a      	orrs	r2, r3
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	691b      	ldr	r3, [r3, #16]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	029a      	lsls	r2, r3, #10
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a1d0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	661a      	str	r2, [r3, #96]	@ 0x60
 800a1da:	e00f      	b.n	800a1fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a58      	ldr	r2, [pc, #352]	@ (800a344 <HAL_SD_GetCardCSD+0x344>)
 800a1e2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1e8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e09d      	b.n	800a338 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a200:	0b9b      	lsrs	r3, r3, #14
 800a202:	b2db      	uxtb	r3, r3
 800a204:	f003 0301 	and.w	r3, r3, #1
 800a208:	b2da      	uxtb	r2, r3
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a212:	09db      	lsrs	r3, r3, #7
 800a214:	b2db      	uxtb	r3, r3
 800a216:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a21a:	b2da      	uxtb	r2, r3
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a224:	b2db      	uxtb	r3, r3
 800a226:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a22a:	b2da      	uxtb	r2, r3
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a234:	0fdb      	lsrs	r3, r3, #31
 800a236:	b2da      	uxtb	r2, r3
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a240:	0f5b      	lsrs	r3, r3, #29
 800a242:	b2db      	uxtb	r3, r3
 800a244:	f003 0303 	and.w	r3, r3, #3
 800a248:	b2da      	uxtb	r2, r3
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a252:	0e9b      	lsrs	r3, r3, #26
 800a254:	b2db      	uxtb	r3, r3
 800a256:	f003 0307 	and.w	r3, r3, #7
 800a25a:	b2da      	uxtb	r2, r3
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a264:	0d9b      	lsrs	r3, r3, #22
 800a266:	b2db      	uxtb	r3, r3
 800a268:	f003 030f 	and.w	r3, r3, #15
 800a26c:	b2da      	uxtb	r2, r3
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a276:	0d5b      	lsrs	r3, r3, #21
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	f003 0301 	and.w	r3, r3, #1
 800a27e:	b2da      	uxtb	r2, r3
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	2200      	movs	r2, #0
 800a28a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a292:	0c1b      	lsrs	r3, r3, #16
 800a294:	b2db      	uxtb	r3, r3
 800a296:	f003 0301 	and.w	r3, r3, #1
 800a29a:	b2da      	uxtb	r2, r3
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2a6:	0bdb      	lsrs	r3, r3, #15
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	f003 0301 	and.w	r3, r3, #1
 800a2ae:	b2da      	uxtb	r2, r3
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2ba:	0b9b      	lsrs	r3, r3, #14
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	f003 0301 	and.w	r3, r3, #1
 800a2c2:	b2da      	uxtb	r2, r3
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2ce:	0b5b      	lsrs	r3, r3, #13
 800a2d0:	b2db      	uxtb	r3, r3
 800a2d2:	f003 0301 	and.w	r3, r3, #1
 800a2d6:	b2da      	uxtb	r2, r3
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2e2:	0b1b      	lsrs	r3, r3, #12
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	f003 0301 	and.w	r3, r3, #1
 800a2ea:	b2da      	uxtb	r2, r3
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2f6:	0a9b      	lsrs	r3, r3, #10
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	f003 0303 	and.w	r3, r3, #3
 800a2fe:	b2da      	uxtb	r2, r3
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a30a:	0a1b      	lsrs	r3, r3, #8
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	f003 0303 	and.w	r3, r3, #3
 800a312:	b2da      	uxtb	r2, r3
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a31e:	085b      	lsrs	r3, r3, #1
 800a320:	b2db      	uxtb	r3, r3
 800a322:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a326:	b2da      	uxtb	r2, r3
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	2201      	movs	r2, #1
 800a332:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800a336:	2300      	movs	r3, #0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	370c      	adds	r7, #12
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr
 800a344:	004005ff 	.word	0x004005ff

0800a348 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a3a0:	b5b0      	push	{r4, r5, r7, lr}
 800a3a2:	b08e      	sub	sp, #56	@ 0x38
 800a3a4:	af04      	add	r7, sp, #16
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2203      	movs	r2, #3
 800a3b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3bc:	2b03      	cmp	r3, #3
 800a3be:	d02e      	beq.n	800a41e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3c6:	d106      	bne.n	800a3d6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3cc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	639a      	str	r2, [r3, #56]	@ 0x38
 800a3d4:	e029      	b.n	800a42a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3dc:	d10a      	bne.n	800a3f4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 fabc 	bl	800a95c <SD_WideBus_Enable>
 800a3e4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3ea:	6a3b      	ldr	r3, [r7, #32]
 800a3ec:	431a      	orrs	r2, r3
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	639a      	str	r2, [r3, #56]	@ 0x38
 800a3f2:	e01a      	b.n	800a42a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d10a      	bne.n	800a410 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 faf9 	bl	800a9f2 <SD_WideBus_Disable>
 800a400:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a406:	6a3b      	ldr	r3, [r7, #32]
 800a408:	431a      	orrs	r2, r3
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	639a      	str	r2, [r3, #56]	@ 0x38
 800a40e:	e00c      	b.n	800a42a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a414:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	639a      	str	r2, [r3, #56]	@ 0x38
 800a41c:	e005      	b.n	800a42a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a422:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d00b      	beq.n	800a44a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a26      	ldr	r2, [pc, #152]	@ (800a4d0 <HAL_SD_ConfigWideBusOperation+0x130>)
 800a438:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2201      	movs	r2, #1
 800a43e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800a442:	2301      	movs	r3, #1
 800a444:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a448:	e01f      	b.n	800a48a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	695b      	ldr	r3, [r3, #20]
 800a464:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	699b      	ldr	r3, [r3, #24]
 800a46a:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681d      	ldr	r5, [r3, #0]
 800a470:	466c      	mov	r4, sp
 800a472:	f107 0314 	add.w	r3, r7, #20
 800a476:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a47a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a47e:	f107 0308 	add.w	r3, r7, #8
 800a482:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a484:	4628      	mov	r0, r5
 800a486:	f002 fe93 	bl	800d1b0 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a492:	4618      	mov	r0, r3
 800a494:	f002 ff58 	bl	800d348 <SDMMC_CmdBlockLength>
 800a498:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a49a:	6a3b      	ldr	r3, [r7, #32]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00c      	beq.n	800a4ba <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a0a      	ldr	r2, [pc, #40]	@ (800a4d0 <HAL_SD_ConfigWideBusOperation+0x130>)
 800a4a6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4ac:	6a3b      	ldr	r3, [r7, #32]
 800a4ae:	431a      	orrs	r2, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2201      	movs	r2, #1
 800a4be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800a4c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3728      	adds	r7, #40	@ 0x28
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bdb0      	pop	{r4, r5, r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	004005ff 	.word	0x004005ff

0800a4d4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b086      	sub	sp, #24
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a4e0:	f107 030c 	add.w	r3, r7, #12
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 fa10 	bl	800a90c <SD_SendStatus>
 800a4ec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d005      	beq.n	800a500 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	431a      	orrs	r2, r3
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	0a5b      	lsrs	r3, r3, #9
 800a504:	f003 030f 	and.w	r3, r3, #15
 800a508:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a50a:	693b      	ldr	r3, [r7, #16]
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3718      	adds	r7, #24
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a514:	b480      	push	{r7}
 800a516:	b085      	sub	sp, #20
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a520:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a530:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800a532:	bf00      	nop
 800a534:	3714      	adds	r7, #20
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr

0800a53e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b084      	sub	sp, #16
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a54a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a550:	2b82      	cmp	r3, #130	@ 0x82
 800a552:	d111      	bne.n	800a578 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4618      	mov	r0, r3
 800a55a:	f002 ff9f 	bl	800d49c <SDMMC_CmdStopTransfer>
 800a55e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d008      	beq.n	800a578 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	431a      	orrs	r2, r3
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f7ff fd3a 	bl	8009fec <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f022 0208 	bic.w	r2, r2, #8
 800a586:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a590:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2201      	movs	r2, #1
 800a596:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2200      	movs	r2, #0
 800a59e:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f004 fd53 	bl	800f04c <HAL_SD_RxCpltCallback>
#endif
}
 800a5a6:	bf00      	nop
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
	...

0800a5b0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5bc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f7f9 fd3a 	bl	8004038 <HAL_DMA_GetError>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b02      	cmp	r3, #2
 800a5c8:	d03e      	beq.n	800a648 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5d0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5d8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d002      	beq.n	800a5e6 <SD_DMAError+0x36>
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d12d      	bne.n	800a642 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a19      	ldr	r2, [pc, #100]	@ (800a650 <SD_DMAError+0xa0>)
 800a5ec:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800a5fc:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a602:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800a60a:	6978      	ldr	r0, [r7, #20]
 800a60c:	f7ff ff62 	bl	800a4d4 <HAL_SD_GetCardState>
 800a610:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	2b06      	cmp	r3, #6
 800a616:	d002      	beq.n	800a61e <SD_DMAError+0x6e>
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	2b05      	cmp	r3, #5
 800a61c:	d10a      	bne.n	800a634 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4618      	mov	r0, r3
 800a624:	f002 ff3a 	bl	800d49c <SDMMC_CmdStopTransfer>
 800a628:	4602      	mov	r2, r0
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a62e:	431a      	orrs	r2, r3
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	2201      	movs	r2, #1
 800a638:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	2200      	movs	r2, #0
 800a640:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800a642:	6978      	ldr	r0, [r7, #20]
 800a644:	f7ff fcd2 	bl	8009fec <HAL_SD_ErrorCallback>
#endif
  }
}
 800a648:	bf00      	nop
 800a64a:	3718      	adds	r7, #24
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	004005ff 	.word	0x004005ff

0800a654 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a654:	b5b0      	push	{r4, r5, r7, lr}
 800a656:	b094      	sub	sp, #80	@ 0x50
 800a658:	af04      	add	r7, sp, #16
 800a65a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a65c:	2301      	movs	r3, #1
 800a65e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4618      	mov	r0, r3
 800a666:	f002 fdea 	bl	800d23e <SDMMC_GetPowerState>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d102      	bne.n	800a676 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a670:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a674:	e0b8      	b.n	800a7e8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a67a:	2b03      	cmp	r3, #3
 800a67c:	d02f      	beq.n	800a6de <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4618      	mov	r0, r3
 800a684:	f003 f815 	bl	800d6b2 <SDMMC_CmdSendCID>
 800a688:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a68a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d001      	beq.n	800a694 <SD_InitCard+0x40>
    {
      return errorstate;
 800a690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a692:	e0a9      	b.n	800a7e8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2100      	movs	r1, #0
 800a69a:	4618      	mov	r0, r3
 800a69c:	f002 fe15 	bl	800d2ca <SDMMC_GetResponse>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	2104      	movs	r1, #4
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f002 fe0c 	bl	800d2ca <SDMMC_GetResponse>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	2108      	movs	r1, #8
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f002 fe03 	bl	800d2ca <SDMMC_GetResponse>
 800a6c4:	4602      	mov	r2, r0
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	210c      	movs	r1, #12
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f002 fdfa 	bl	800d2ca <SDMMC_GetResponse>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6e2:	2b03      	cmp	r3, #3
 800a6e4:	d00d      	beq.n	800a702 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f107 020e 	add.w	r2, r7, #14
 800a6ee:	4611      	mov	r1, r2
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f003 f81b 	bl	800d72c <SDMMC_CmdSetRelAdd>
 800a6f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d001      	beq.n	800a702 <SD_InitCard+0xae>
    {
      return errorstate;
 800a6fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a700:	e072      	b.n	800a7e8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a706:	2b03      	cmp	r3, #3
 800a708:	d036      	beq.n	800a778 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a70a:	89fb      	ldrh	r3, [r7, #14]
 800a70c:	461a      	mov	r2, r3
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a71a:	041b      	lsls	r3, r3, #16
 800a71c:	4619      	mov	r1, r3
 800a71e:	4610      	mov	r0, r2
 800a720:	f002 ffe5 	bl	800d6ee <SDMMC_CmdSendCSD>
 800a724:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d001      	beq.n	800a730 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a72c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a72e:	e05b      	b.n	800a7e8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2100      	movs	r1, #0
 800a736:	4618      	mov	r0, r3
 800a738:	f002 fdc7 	bl	800d2ca <SDMMC_GetResponse>
 800a73c:	4602      	mov	r2, r0
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	2104      	movs	r1, #4
 800a748:	4618      	mov	r0, r3
 800a74a:	f002 fdbe 	bl	800d2ca <SDMMC_GetResponse>
 800a74e:	4602      	mov	r2, r0
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2108      	movs	r1, #8
 800a75a:	4618      	mov	r0, r3
 800a75c:	f002 fdb5 	bl	800d2ca <SDMMC_GetResponse>
 800a760:	4602      	mov	r2, r0
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	210c      	movs	r1, #12
 800a76c:	4618      	mov	r0, r3
 800a76e:	f002 fdac 	bl	800d2ca <SDMMC_GetResponse>
 800a772:	4602      	mov	r2, r0
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2104      	movs	r1, #4
 800a77e:	4618      	mov	r0, r3
 800a780:	f002 fda3 	bl	800d2ca <SDMMC_GetResponse>
 800a784:	4603      	mov	r3, r0
 800a786:	0d1a      	lsrs	r2, r3, #20
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a78c:	f107 0310 	add.w	r3, r7, #16
 800a790:	4619      	mov	r1, r3
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f7ff fc34 	bl	800a000 <HAL_SD_GetCardCSD>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d002      	beq.n	800a7a4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a79e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a7a2:	e021      	b.n	800a7e8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6819      	ldr	r1, [r3, #0]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7ac:	041b      	lsls	r3, r3, #16
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	461c      	mov	r4, r3
 800a7b2:	4615      	mov	r5, r2
 800a7b4:	4622      	mov	r2, r4
 800a7b6:	462b      	mov	r3, r5
 800a7b8:	4608      	mov	r0, r1
 800a7ba:	f002 fe91 	bl	800d4e0 <SDMMC_CmdSelDesel>
 800a7be:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a7c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d001      	beq.n	800a7ca <SD_InitCard+0x176>
  {
    return errorstate;
 800a7c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7c8:	e00e      	b.n	800a7e8 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681d      	ldr	r5, [r3, #0]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	466c      	mov	r4, sp
 800a7d2:	f103 0210 	add.w	r2, r3, #16
 800a7d6:	ca07      	ldmia	r2, {r0, r1, r2}
 800a7d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a7dc:	3304      	adds	r3, #4
 800a7de:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a7e0:	4628      	mov	r0, r5
 800a7e2:	f002 fce5 	bl	800d1b0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a7e6:	2300      	movs	r3, #0
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3740      	adds	r7, #64	@ 0x40
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bdb0      	pop	{r4, r5, r7, pc}

0800a7f0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b086      	sub	sp, #24
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	617b      	str	r3, [r7, #20]
 800a800:	2300      	movs	r3, #0
 800a802:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4618      	mov	r0, r3
 800a80a:	f002 fe8c 	bl	800d526 <SDMMC_CmdGoIdleState>
 800a80e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d001      	beq.n	800a81a <SD_PowerON+0x2a>
  {
    return errorstate;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	e072      	b.n	800a900 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4618      	mov	r0, r3
 800a820:	f002 fe9f 	bl	800d562 <SDMMC_CmdOperCond>
 800a824:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d00d      	beq.n	800a848 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4618      	mov	r0, r3
 800a838:	f002 fe75 	bl	800d526 <SDMMC_CmdGoIdleState>
 800a83c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d004      	beq.n	800a84e <SD_PowerON+0x5e>
    {
      return errorstate;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	e05b      	b.n	800a900 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a852:	2b01      	cmp	r3, #1
 800a854:	d137      	bne.n	800a8c6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	2100      	movs	r1, #0
 800a85c:	4618      	mov	r0, r3
 800a85e:	f002 fe9f 	bl	800d5a0 <SDMMC_CmdAppCommand>
 800a862:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d02d      	beq.n	800a8c6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a86a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a86e:	e047      	b.n	800a900 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2100      	movs	r1, #0
 800a876:	4618      	mov	r0, r3
 800a878:	f002 fe92 	bl	800d5a0 <SDMMC_CmdAppCommand>
 800a87c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d001      	beq.n	800a888 <SD_PowerON+0x98>
    {
      return errorstate;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	e03b      	b.n	800a900 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	491e      	ldr	r1, [pc, #120]	@ (800a908 <SD_PowerON+0x118>)
 800a88e:	4618      	mov	r0, r3
 800a890:	f002 fea8 	bl	800d5e4 <SDMMC_CmdAppOperCommand>
 800a894:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d002      	beq.n	800a8a2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a89c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a8a0:	e02e      	b.n	800a900 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f002 fd0e 	bl	800d2ca <SDMMC_GetResponse>
 800a8ae:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	0fdb      	lsrs	r3, r3, #31
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d101      	bne.n	800a8bc <SD_PowerON+0xcc>
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	e000      	b.n	800a8be <SD_PowerON+0xce>
 800a8bc:	2300      	movs	r3, #0
 800a8be:	613b      	str	r3, [r7, #16]

    count++;
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d802      	bhi.n	800a8d6 <SD_PowerON+0xe6>
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d0cc      	beq.n	800a870 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d902      	bls.n	800a8e6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a8e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a8e4:	e00c      	b.n	800a900 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d003      	beq.n	800a8f8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	645a      	str	r2, [r3, #68]	@ 0x44
 800a8f6:	e002      	b.n	800a8fe <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a8fe:	2300      	movs	r3, #0
}
 800a900:	4618      	mov	r0, r3
 800a902:	3718      	adds	r7, #24
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}
 800a908:	c1100000 	.word	0xc1100000

0800a90c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d102      	bne.n	800a922 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a91c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a920:	e018      	b.n	800a954 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a92a:	041b      	lsls	r3, r3, #16
 800a92c:	4619      	mov	r1, r3
 800a92e:	4610      	mov	r0, r2
 800a930:	f002 ff1d 	bl	800d76e <SDMMC_CmdSendStatus>
 800a934:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d001      	beq.n	800a940 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	e009      	b.n	800a954 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	2100      	movs	r1, #0
 800a946:	4618      	mov	r0, r3
 800a948:	f002 fcbf 	bl	800d2ca <SDMMC_GetResponse>
 800a94c:	4602      	mov	r2, r0
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a952:	2300      	movs	r3, #0
}
 800a954:	4618      	mov	r0, r3
 800a956:	3710      	adds	r7, #16
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b086      	sub	sp, #24
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a964:	2300      	movs	r3, #0
 800a966:	60fb      	str	r3, [r7, #12]
 800a968:	2300      	movs	r3, #0
 800a96a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2100      	movs	r1, #0
 800a972:	4618      	mov	r0, r3
 800a974:	f002 fca9 	bl	800d2ca <SDMMC_GetResponse>
 800a978:	4603      	mov	r3, r0
 800a97a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a97e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a982:	d102      	bne.n	800a98a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a984:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a988:	e02f      	b.n	800a9ea <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a98a:	f107 030c 	add.w	r3, r7, #12
 800a98e:	4619      	mov	r1, r3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 f879 	bl	800aa88 <SD_FindSCR>
 800a996:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d001      	beq.n	800a9a2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	e023      	b.n	800a9ea <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d01c      	beq.n	800a9e6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9b4:	041b      	lsls	r3, r3, #16
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	4610      	mov	r0, r2
 800a9ba:	f002 fdf1 	bl	800d5a0 <SDMMC_CmdAppCommand>
 800a9be:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d001      	beq.n	800a9ca <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	e00f      	b.n	800a9ea <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2102      	movs	r1, #2
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f002 fe2b 	bl	800d62c <SDMMC_CmdBusWidth>
 800a9d6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d001      	beq.n	800a9e2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	e003      	b.n	800a9ea <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	e001      	b.n	800a9ea <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a9e6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3718      	adds	r7, #24
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b086      	sub	sp, #24
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	60fb      	str	r3, [r7, #12]
 800a9fe:	2300      	movs	r3, #0
 800aa00:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	2100      	movs	r1, #0
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f002 fc5e 	bl	800d2ca <SDMMC_GetResponse>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aa18:	d102      	bne.n	800aa20 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800aa1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800aa1e:	e02f      	b.n	800aa80 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800aa20:	f107 030c 	add.w	r3, r7, #12
 800aa24:	4619      	mov	r1, r3
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 f82e 	bl	800aa88 <SD_FindSCR>
 800aa2c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d001      	beq.n	800aa38 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	e023      	b.n	800aa80 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d01c      	beq.n	800aa7c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa4a:	041b      	lsls	r3, r3, #16
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	4610      	mov	r0, r2
 800aa50:	f002 fda6 	bl	800d5a0 <SDMMC_CmdAppCommand>
 800aa54:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d001      	beq.n	800aa60 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	e00f      	b.n	800aa80 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2100      	movs	r1, #0
 800aa66:	4618      	mov	r0, r3
 800aa68:	f002 fde0 	bl	800d62c <SDMMC_CmdBusWidth>
 800aa6c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d001      	beq.n	800aa78 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	e003      	b.n	800aa80 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	e001      	b.n	800aa80 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aa7c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3718      	adds	r7, #24
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800aa88:	b590      	push	{r4, r7, lr}
 800aa8a:	b08f      	sub	sp, #60	@ 0x3c
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800aa92:	f7f8 fd5b 	bl	800354c <HAL_GetTick>
 800aa96:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	60bb      	str	r3, [r7, #8]
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	2108      	movs	r1, #8
 800aaae:	4618      	mov	r0, r3
 800aab0:	f002 fc4a 	bl	800d348 <SDMMC_CmdBlockLength>
 800aab4:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800aab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d001      	beq.n	800aac0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800aabc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aabe:	e0b2      	b.n	800ac26 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aac8:	041b      	lsls	r3, r3, #16
 800aaca:	4619      	mov	r1, r3
 800aacc:	4610      	mov	r0, r2
 800aace:	f002 fd67 	bl	800d5a0 <SDMMC_CmdAppCommand>
 800aad2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800aad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d001      	beq.n	800aade <SD_FindSCR+0x56>
  {
    return errorstate;
 800aada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aadc:	e0a3      	b.n	800ac26 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aade:	f04f 33ff 	mov.w	r3, #4294967295
 800aae2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800aae4:	2308      	movs	r3, #8
 800aae6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800aae8:	2330      	movs	r3, #48	@ 0x30
 800aaea:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800aaec:	2302      	movs	r3, #2
 800aaee:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f107 0210 	add.w	r2, r7, #16
 800ab00:	4611      	mov	r1, r2
 800ab02:	4618      	mov	r0, r3
 800ab04:	f002 fbf4 	bl	800d2f0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f002 fdaf 	bl	800d670 <SDMMC_CmdSendSCR>
 800ab12:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d02a      	beq.n	800ab70 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800ab1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab1c:	e083      	b.n	800ac26 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d00f      	beq.n	800ab4c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6819      	ldr	r1, [r3, #0]
 800ab30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab32:	009b      	lsls	r3, r3, #2
 800ab34:	f107 0208 	add.w	r2, r7, #8
 800ab38:	18d4      	adds	r4, r2, r3
 800ab3a:	4608      	mov	r0, r1
 800ab3c:	f002 fb64 	bl	800d208 <SDMMC_ReadFIFO>
 800ab40:	4603      	mov	r3, r0
 800ab42:	6023      	str	r3, [r4, #0]
      index++;
 800ab44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab46:	3301      	adds	r3, #1
 800ab48:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab4a:	e006      	b.n	800ab5a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d012      	beq.n	800ab80 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800ab5a:	f7f8 fcf7 	bl	800354c <HAL_GetTick>
 800ab5e:	4602      	mov	r2, r0
 800ab60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab62:	1ad3      	subs	r3, r2, r3
 800ab64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab68:	d102      	bne.n	800ab70 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ab6a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ab6e:	e05a      	b.n	800ac26 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab76:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d0cf      	beq.n	800ab1e <SD_FindSCR+0x96>
 800ab7e:	e000      	b.n	800ab82 <SD_FindSCR+0xfa>
      break;
 800ab80:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab88:	f003 0308 	and.w	r3, r3, #8
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d005      	beq.n	800ab9c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2208      	movs	r2, #8
 800ab96:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ab98:	2308      	movs	r3, #8
 800ab9a:	e044      	b.n	800ac26 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aba2:	f003 0302 	and.w	r3, r3, #2
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d005      	beq.n	800abb6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2202      	movs	r2, #2
 800abb0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800abb2:	2302      	movs	r3, #2
 800abb4:	e037      	b.n	800ac26 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abbc:	f003 0320 	and.w	r3, r3, #32
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d005      	beq.n	800abd0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	2220      	movs	r2, #32
 800abca:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800abcc:	2320      	movs	r3, #32
 800abce:	e02a      	b.n	800ac26 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f240 523a 	movw	r2, #1338	@ 0x53a
 800abd8:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	061a      	lsls	r2, r3, #24
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	021b      	lsls	r3, r3, #8
 800abe2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800abe6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	0a1b      	lsrs	r3, r3, #8
 800abec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800abf0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	0e1b      	lsrs	r3, r3, #24
 800abf6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800abf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abfa:	601a      	str	r2, [r3, #0]
    scr++;
 800abfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abfe:	3304      	adds	r3, #4
 800ac00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	061a      	lsls	r2, r3, #24
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	021b      	lsls	r3, r3, #8
 800ac0a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ac0e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	0a1b      	lsrs	r3, r3, #8
 800ac14:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ac18:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	0e1b      	lsrs	r3, r3, #24
 800ac1e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ac20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac22:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	373c      	adds	r7, #60	@ 0x3c
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd90      	pop	{r4, r7, pc}

0800ac2e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b082      	sub	sp, #8
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
 800ac36:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d101      	bne.n	800ac42 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e025      	b.n	800ac8e <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d106      	bne.n	800ac5c <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2200      	movs	r2, #0
 800ac52:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f7f8 f81c 	bl	8002c94 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2202      	movs	r2, #2
 800ac60:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681a      	ldr	r2, [r3, #0]
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	3304      	adds	r3, #4
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	4610      	mov	r0, r2
 800ac70:	f002 f9d8 	bl	800d024 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6818      	ldr	r0, [r3, #0]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	6839      	ldr	r1, [r7, #0]
 800ac80:	f002 fa2c 	bl	800d0dc <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2201      	movs	r2, #1
 800ac88:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800ac8c:	2300      	movs	r3, #0
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3708      	adds	r7, #8
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
	...

0800ac98 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d101      	bne.n	800acaa <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800aca6:	2301      	movs	r3, #1
 800aca8:	e04c      	b.n	800ad44 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d106      	bne.n	800acc4 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2200      	movs	r2, #0
 800acba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f7f7 fc6e 	bl	80025a0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2202      	movs	r2, #2
 800acc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	681a      	ldr	r2, [r3, #0]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f022 0203 	bic.w	r2, r2, #3
 800acda:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	4b19      	ldr	r3, [pc, #100]	@ (800ad4c <HAL_SPDIFRX_Init+0xb4>)
 800ace8:	4013      	ands	r3, r2
 800acea:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800acf4:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800acfa:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800ad00:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800ad06:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800ad0c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800ad12:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800ad18:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800ad1e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800ad24:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	68fa      	ldr	r2, [r7, #12]
 800ad32:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800ad42:	2300      	movs	r3, #0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	fff88407 	.word	0xfff88407

0800ad50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d101      	bne.n	800ad62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e09d      	b.n	800ae9e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d108      	bne.n	800ad7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ad72:	d009      	beq.n	800ad88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	61da      	str	r2, [r3, #28]
 800ad7a:	e005      	b.n	800ad88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2200      	movs	r2, #0
 800ad86:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ad94:	b2db      	uxtb	r3, r3
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d106      	bne.n	800ada8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f7f7 fc60 	bl	8002668 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2202      	movs	r2, #2
 800adac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800adbe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800adc8:	d902      	bls.n	800add0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800adca:	2300      	movs	r3, #0
 800adcc:	60fb      	str	r3, [r7, #12]
 800adce:	e002      	b.n	800add6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800add0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800add4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	68db      	ldr	r3, [r3, #12]
 800adda:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800adde:	d007      	beq.n	800adf0 <HAL_SPI_Init+0xa0>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	68db      	ldr	r3, [r3, #12]
 800ade4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ade8:	d002      	beq.n	800adf0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800ae00:	431a      	orrs	r2, r3
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	691b      	ldr	r3, [r3, #16]
 800ae06:	f003 0302 	and.w	r3, r3, #2
 800ae0a:	431a      	orrs	r2, r3
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	695b      	ldr	r3, [r3, #20]
 800ae10:	f003 0301 	and.w	r3, r3, #1
 800ae14:	431a      	orrs	r2, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	699b      	ldr	r3, [r3, #24]
 800ae1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ae1e:	431a      	orrs	r2, r3
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	69db      	ldr	r3, [r3, #28]
 800ae24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ae28:	431a      	orrs	r2, r3
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6a1b      	ldr	r3, [r3, #32]
 800ae2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae32:	ea42 0103 	orr.w	r1, r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae3a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	430a      	orrs	r2, r1
 800ae44:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	699b      	ldr	r3, [r3, #24]
 800ae4a:	0c1b      	lsrs	r3, r3, #16
 800ae4c:	f003 0204 	and.w	r2, r3, #4
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae54:	f003 0310 	and.w	r3, r3, #16
 800ae58:	431a      	orrs	r2, r3
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae5e:	f003 0308 	and.w	r3, r3, #8
 800ae62:	431a      	orrs	r2, r3
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	68db      	ldr	r3, [r3, #12]
 800ae68:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800ae6c:	ea42 0103 	orr.w	r1, r2, r3
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	430a      	orrs	r2, r1
 800ae7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	69da      	ldr	r2, [r3, #28]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ae8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2200      	movs	r2, #0
 800ae92:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800ae9c:	2300      	movs	r3, #0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b082      	sub	sp, #8
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d101      	bne.n	800aeb8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	e049      	b.n	800af4c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aebe:	b2db      	uxtb	r3, r3
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d106      	bne.n	800aed2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f7f7 fc2d 	bl	800272c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2202      	movs	r2, #2
 800aed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681a      	ldr	r2, [r3, #0]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	3304      	adds	r3, #4
 800aee2:	4619      	mov	r1, r3
 800aee4:	4610      	mov	r0, r2
 800aee6:	f000 fc11 	bl	800b70c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2201      	movs	r2, #1
 800aeee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2201      	movs	r2, #1
 800aef6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2201      	movs	r2, #1
 800aefe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2201      	movs	r2, #1
 800af06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2201      	movs	r2, #1
 800af0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2201      	movs	r2, #1
 800af16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2201      	movs	r2, #1
 800af1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2201      	movs	r2, #1
 800af26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2201      	movs	r2, #1
 800af2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2201      	movs	r2, #1
 800af36:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2201      	movs	r2, #1
 800af3e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2201      	movs	r2, #1
 800af46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800af4a:	2300      	movs	r3, #0
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3708      	adds	r7, #8
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800af54:	b480      	push	{r7}
 800af56:	b085      	sub	sp, #20
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af62:	b2db      	uxtb	r3, r3
 800af64:	2b01      	cmp	r3, #1
 800af66:	d001      	beq.n	800af6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800af68:	2301      	movs	r3, #1
 800af6a:	e054      	b.n	800b016 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2202      	movs	r2, #2
 800af70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	68da      	ldr	r2, [r3, #12]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f042 0201 	orr.w	r2, r2, #1
 800af82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4a26      	ldr	r2, [pc, #152]	@ (800b024 <HAL_TIM_Base_Start_IT+0xd0>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d022      	beq.n	800afd4 <HAL_TIM_Base_Start_IT+0x80>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af96:	d01d      	beq.n	800afd4 <HAL_TIM_Base_Start_IT+0x80>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4a22      	ldr	r2, [pc, #136]	@ (800b028 <HAL_TIM_Base_Start_IT+0xd4>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d018      	beq.n	800afd4 <HAL_TIM_Base_Start_IT+0x80>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4a21      	ldr	r2, [pc, #132]	@ (800b02c <HAL_TIM_Base_Start_IT+0xd8>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d013      	beq.n	800afd4 <HAL_TIM_Base_Start_IT+0x80>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4a1f      	ldr	r2, [pc, #124]	@ (800b030 <HAL_TIM_Base_Start_IT+0xdc>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d00e      	beq.n	800afd4 <HAL_TIM_Base_Start_IT+0x80>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a1e      	ldr	r2, [pc, #120]	@ (800b034 <HAL_TIM_Base_Start_IT+0xe0>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d009      	beq.n	800afd4 <HAL_TIM_Base_Start_IT+0x80>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4a1c      	ldr	r2, [pc, #112]	@ (800b038 <HAL_TIM_Base_Start_IT+0xe4>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d004      	beq.n	800afd4 <HAL_TIM_Base_Start_IT+0x80>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a1b      	ldr	r2, [pc, #108]	@ (800b03c <HAL_TIM_Base_Start_IT+0xe8>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d115      	bne.n	800b000 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	689a      	ldr	r2, [r3, #8]
 800afda:	4b19      	ldr	r3, [pc, #100]	@ (800b040 <HAL_TIM_Base_Start_IT+0xec>)
 800afdc:	4013      	ands	r3, r2
 800afde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2b06      	cmp	r3, #6
 800afe4:	d015      	beq.n	800b012 <HAL_TIM_Base_Start_IT+0xbe>
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afec:	d011      	beq.n	800b012 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f042 0201 	orr.w	r2, r2, #1
 800affc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800affe:	e008      	b.n	800b012 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	681a      	ldr	r2, [r3, #0]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f042 0201 	orr.w	r2, r2, #1
 800b00e:	601a      	str	r2, [r3, #0]
 800b010:	e000      	b.n	800b014 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b012:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b014:	2300      	movs	r3, #0
}
 800b016:	4618      	mov	r0, r3
 800b018:	3714      	adds	r7, #20
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr
 800b022:	bf00      	nop
 800b024:	40010000 	.word	0x40010000
 800b028:	40000400 	.word	0x40000400
 800b02c:	40000800 	.word	0x40000800
 800b030:	40000c00 	.word	0x40000c00
 800b034:	40010400 	.word	0x40010400
 800b038:	40014000 	.word	0x40014000
 800b03c:	40001800 	.word	0x40001800
 800b040:	00010007 	.word	0x00010007

0800b044 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d101      	bne.n	800b056 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b052:	2301      	movs	r3, #1
 800b054:	e049      	b.n	800b0ea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d106      	bne.n	800b070 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2200      	movs	r2, #0
 800b066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f7f7 fbcc 	bl	8002808 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2202      	movs	r2, #2
 800b074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	3304      	adds	r3, #4
 800b080:	4619      	mov	r1, r3
 800b082:	4610      	mov	r0, r2
 800b084:	f000 fb42 	bl	800b70c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2201      	movs	r2, #1
 800b08c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2201      	movs	r2, #1
 800b094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b0e8:	2300      	movs	r3, #0
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3708      	adds	r7, #8
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}

0800b0f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	b084      	sub	sp, #16
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	68db      	ldr	r3, [r3, #12]
 800b100:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	691b      	ldr	r3, [r3, #16]
 800b108:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	f003 0302 	and.w	r3, r3, #2
 800b110:	2b00      	cmp	r3, #0
 800b112:	d020      	beq.n	800b156 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f003 0302 	and.w	r3, r3, #2
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d01b      	beq.n	800b156 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f06f 0202 	mvn.w	r2, #2
 800b126:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2201      	movs	r2, #1
 800b12c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	699b      	ldr	r3, [r3, #24]
 800b134:	f003 0303 	and.w	r3, r3, #3
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d003      	beq.n	800b144 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f000 fac7 	bl	800b6d0 <HAL_TIM_IC_CaptureCallback>
 800b142:	e005      	b.n	800b150 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 fab9 	bl	800b6bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 faca 	bl	800b6e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	f003 0304 	and.w	r3, r3, #4
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d020      	beq.n	800b1a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f003 0304 	and.w	r3, r3, #4
 800b166:	2b00      	cmp	r3, #0
 800b168:	d01b      	beq.n	800b1a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f06f 0204 	mvn.w	r2, #4
 800b172:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2202      	movs	r2, #2
 800b178:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	699b      	ldr	r3, [r3, #24]
 800b180:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b184:	2b00      	cmp	r3, #0
 800b186:	d003      	beq.n	800b190 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 faa1 	bl	800b6d0 <HAL_TIM_IC_CaptureCallback>
 800b18e:	e005      	b.n	800b19c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f000 fa93 	bl	800b6bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f000 faa4 	bl	800b6e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	f003 0308 	and.w	r3, r3, #8
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d020      	beq.n	800b1ee <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f003 0308 	and.w	r3, r3, #8
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d01b      	beq.n	800b1ee <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f06f 0208 	mvn.w	r2, #8
 800b1be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2204      	movs	r2, #4
 800b1c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	69db      	ldr	r3, [r3, #28]
 800b1cc:	f003 0303 	and.w	r3, r3, #3
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d003      	beq.n	800b1dc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 fa7b 	bl	800b6d0 <HAL_TIM_IC_CaptureCallback>
 800b1da:	e005      	b.n	800b1e8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 fa6d 	bl	800b6bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 fa7e 	bl	800b6e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	f003 0310 	and.w	r3, r3, #16
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d020      	beq.n	800b23a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f003 0310 	and.w	r3, r3, #16
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d01b      	beq.n	800b23a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f06f 0210 	mvn.w	r2, #16
 800b20a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2208      	movs	r2, #8
 800b210:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	69db      	ldr	r3, [r3, #28]
 800b218:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d003      	beq.n	800b228 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 fa55 	bl	800b6d0 <HAL_TIM_IC_CaptureCallback>
 800b226:	e005      	b.n	800b234 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f000 fa47 	bl	800b6bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f000 fa58 	bl	800b6e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2200      	movs	r2, #0
 800b238:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	f003 0301 	and.w	r3, r3, #1
 800b240:	2b00      	cmp	r3, #0
 800b242:	d00c      	beq.n	800b25e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f003 0301 	and.w	r3, r3, #1
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d007      	beq.n	800b25e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f06f 0201 	mvn.w	r2, #1
 800b256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f7f6 fcdb 	bl	8001c14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b264:	2b00      	cmp	r3, #0
 800b266:	d104      	bne.n	800b272 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00c      	beq.n	800b28c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d007      	beq.n	800b28c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 fef4 	bl	800c074 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b292:	2b00      	cmp	r3, #0
 800b294:	d00c      	beq.n	800b2b0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d007      	beq.n	800b2b0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b2a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 feec 	bl	800c088 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d00c      	beq.n	800b2d4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d007      	beq.n	800b2d4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b2cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 fa12 	bl	800b6f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	f003 0320 	and.w	r3, r3, #32
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d00c      	beq.n	800b2f8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f003 0320 	and.w	r3, r3, #32
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d007      	beq.n	800b2f8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f06f 0220 	mvn.w	r2, #32
 800b2f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 feb4 	bl	800c060 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b2f8:	bf00      	nop
 800b2fa:	3710      	adds	r7, #16
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b086      	sub	sp, #24
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b30c:	2300      	movs	r3, #0
 800b30e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b316:	2b01      	cmp	r3, #1
 800b318:	d101      	bne.n	800b31e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b31a:	2302      	movs	r3, #2
 800b31c:	e0ff      	b.n	800b51e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2201      	movs	r2, #1
 800b322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2b14      	cmp	r3, #20
 800b32a:	f200 80f0 	bhi.w	800b50e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b32e:	a201      	add	r2, pc, #4	@ (adr r2, 800b334 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b334:	0800b389 	.word	0x0800b389
 800b338:	0800b50f 	.word	0x0800b50f
 800b33c:	0800b50f 	.word	0x0800b50f
 800b340:	0800b50f 	.word	0x0800b50f
 800b344:	0800b3c9 	.word	0x0800b3c9
 800b348:	0800b50f 	.word	0x0800b50f
 800b34c:	0800b50f 	.word	0x0800b50f
 800b350:	0800b50f 	.word	0x0800b50f
 800b354:	0800b40b 	.word	0x0800b40b
 800b358:	0800b50f 	.word	0x0800b50f
 800b35c:	0800b50f 	.word	0x0800b50f
 800b360:	0800b50f 	.word	0x0800b50f
 800b364:	0800b44b 	.word	0x0800b44b
 800b368:	0800b50f 	.word	0x0800b50f
 800b36c:	0800b50f 	.word	0x0800b50f
 800b370:	0800b50f 	.word	0x0800b50f
 800b374:	0800b48d 	.word	0x0800b48d
 800b378:	0800b50f 	.word	0x0800b50f
 800b37c:	0800b50f 	.word	0x0800b50f
 800b380:	0800b50f 	.word	0x0800b50f
 800b384:	0800b4cd 	.word	0x0800b4cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	68b9      	ldr	r1, [r7, #8]
 800b38e:	4618      	mov	r0, r3
 800b390:	f000 fa62 	bl	800b858 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	699a      	ldr	r2, [r3, #24]
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f042 0208 	orr.w	r2, r2, #8
 800b3a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	699a      	ldr	r2, [r3, #24]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f022 0204 	bic.w	r2, r2, #4
 800b3b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	6999      	ldr	r1, [r3, #24]
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	691a      	ldr	r2, [r3, #16]
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	430a      	orrs	r2, r1
 800b3c4:	619a      	str	r2, [r3, #24]
      break;
 800b3c6:	e0a5      	b.n	800b514 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	68b9      	ldr	r1, [r7, #8]
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f000 fab4 	bl	800b93c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	699a      	ldr	r2, [r3, #24]
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b3e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	699a      	ldr	r2, [r3, #24]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b3f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	6999      	ldr	r1, [r3, #24]
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	691b      	ldr	r3, [r3, #16]
 800b3fe:	021a      	lsls	r2, r3, #8
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	430a      	orrs	r2, r1
 800b406:	619a      	str	r2, [r3, #24]
      break;
 800b408:	e084      	b.n	800b514 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	68b9      	ldr	r1, [r7, #8]
 800b410:	4618      	mov	r0, r3
 800b412:	f000 fb0b 	bl	800ba2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	69da      	ldr	r2, [r3, #28]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f042 0208 	orr.w	r2, r2, #8
 800b424:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	69da      	ldr	r2, [r3, #28]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f022 0204 	bic.w	r2, r2, #4
 800b434:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	69d9      	ldr	r1, [r3, #28]
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	691a      	ldr	r2, [r3, #16]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	430a      	orrs	r2, r1
 800b446:	61da      	str	r2, [r3, #28]
      break;
 800b448:	e064      	b.n	800b514 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	68b9      	ldr	r1, [r7, #8]
 800b450:	4618      	mov	r0, r3
 800b452:	f000 fb61 	bl	800bb18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	69da      	ldr	r2, [r3, #28]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	69da      	ldr	r2, [r3, #28]
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	69d9      	ldr	r1, [r3, #28]
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	691b      	ldr	r3, [r3, #16]
 800b480:	021a      	lsls	r2, r3, #8
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	430a      	orrs	r2, r1
 800b488:	61da      	str	r2, [r3, #28]
      break;
 800b48a:	e043      	b.n	800b514 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	68b9      	ldr	r1, [r7, #8]
 800b492:	4618      	mov	r0, r3
 800b494:	f000 fb98 	bl	800bbc8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f042 0208 	orr.w	r2, r2, #8
 800b4a6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f022 0204 	bic.w	r2, r2, #4
 800b4b6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	691a      	ldr	r2, [r3, #16]
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	430a      	orrs	r2, r1
 800b4c8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b4ca:	e023      	b.n	800b514 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	68b9      	ldr	r1, [r7, #8]
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f000 fbca 	bl	800bc6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b4e6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b4f6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	691b      	ldr	r3, [r3, #16]
 800b502:	021a      	lsls	r2, r3, #8
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	430a      	orrs	r2, r1
 800b50a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b50c:	e002      	b.n	800b514 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b50e:	2301      	movs	r3, #1
 800b510:	75fb      	strb	r3, [r7, #23]
      break;
 800b512:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2200      	movs	r2, #0
 800b518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b51c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3718      	adds	r7, #24
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop

0800b528 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b084      	sub	sp, #16
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b532:	2300      	movs	r3, #0
 800b534:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d101      	bne.n	800b544 <HAL_TIM_ConfigClockSource+0x1c>
 800b540:	2302      	movs	r3, #2
 800b542:	e0b4      	b.n	800b6ae <HAL_TIM_ConfigClockSource+0x186>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2201      	movs	r2, #1
 800b548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2202      	movs	r2, #2
 800b550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b55c:	68ba      	ldr	r2, [r7, #8]
 800b55e:	4b56      	ldr	r3, [pc, #344]	@ (800b6b8 <HAL_TIM_ConfigClockSource+0x190>)
 800b560:	4013      	ands	r3, r2
 800b562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b56a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	68ba      	ldr	r2, [r7, #8]
 800b572:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b57c:	d03e      	beq.n	800b5fc <HAL_TIM_ConfigClockSource+0xd4>
 800b57e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b582:	f200 8087 	bhi.w	800b694 <HAL_TIM_ConfigClockSource+0x16c>
 800b586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b58a:	f000 8086 	beq.w	800b69a <HAL_TIM_ConfigClockSource+0x172>
 800b58e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b592:	d87f      	bhi.n	800b694 <HAL_TIM_ConfigClockSource+0x16c>
 800b594:	2b70      	cmp	r3, #112	@ 0x70
 800b596:	d01a      	beq.n	800b5ce <HAL_TIM_ConfigClockSource+0xa6>
 800b598:	2b70      	cmp	r3, #112	@ 0x70
 800b59a:	d87b      	bhi.n	800b694 <HAL_TIM_ConfigClockSource+0x16c>
 800b59c:	2b60      	cmp	r3, #96	@ 0x60
 800b59e:	d050      	beq.n	800b642 <HAL_TIM_ConfigClockSource+0x11a>
 800b5a0:	2b60      	cmp	r3, #96	@ 0x60
 800b5a2:	d877      	bhi.n	800b694 <HAL_TIM_ConfigClockSource+0x16c>
 800b5a4:	2b50      	cmp	r3, #80	@ 0x50
 800b5a6:	d03c      	beq.n	800b622 <HAL_TIM_ConfigClockSource+0xfa>
 800b5a8:	2b50      	cmp	r3, #80	@ 0x50
 800b5aa:	d873      	bhi.n	800b694 <HAL_TIM_ConfigClockSource+0x16c>
 800b5ac:	2b40      	cmp	r3, #64	@ 0x40
 800b5ae:	d058      	beq.n	800b662 <HAL_TIM_ConfigClockSource+0x13a>
 800b5b0:	2b40      	cmp	r3, #64	@ 0x40
 800b5b2:	d86f      	bhi.n	800b694 <HAL_TIM_ConfigClockSource+0x16c>
 800b5b4:	2b30      	cmp	r3, #48	@ 0x30
 800b5b6:	d064      	beq.n	800b682 <HAL_TIM_ConfigClockSource+0x15a>
 800b5b8:	2b30      	cmp	r3, #48	@ 0x30
 800b5ba:	d86b      	bhi.n	800b694 <HAL_TIM_ConfigClockSource+0x16c>
 800b5bc:	2b20      	cmp	r3, #32
 800b5be:	d060      	beq.n	800b682 <HAL_TIM_ConfigClockSource+0x15a>
 800b5c0:	2b20      	cmp	r3, #32
 800b5c2:	d867      	bhi.n	800b694 <HAL_TIM_ConfigClockSource+0x16c>
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d05c      	beq.n	800b682 <HAL_TIM_ConfigClockSource+0x15a>
 800b5c8:	2b10      	cmp	r3, #16
 800b5ca:	d05a      	beq.n	800b682 <HAL_TIM_ConfigClockSource+0x15a>
 800b5cc:	e062      	b.n	800b694 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b5de:	f000 fc13 	bl	800be08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	689b      	ldr	r3, [r3, #8]
 800b5e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b5f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	68ba      	ldr	r2, [r7, #8]
 800b5f8:	609a      	str	r2, [r3, #8]
      break;
 800b5fa:	e04f      	b.n	800b69c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b60c:	f000 fbfc 	bl	800be08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	689a      	ldr	r2, [r3, #8]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b61e:	609a      	str	r2, [r3, #8]
      break;
 800b620:	e03c      	b.n	800b69c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b62e:	461a      	mov	r2, r3
 800b630:	f000 fb70 	bl	800bd14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	2150      	movs	r1, #80	@ 0x50
 800b63a:	4618      	mov	r0, r3
 800b63c:	f000 fbc9 	bl	800bdd2 <TIM_ITRx_SetConfig>
      break;
 800b640:	e02c      	b.n	800b69c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b64e:	461a      	mov	r2, r3
 800b650:	f000 fb8f 	bl	800bd72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2160      	movs	r1, #96	@ 0x60
 800b65a:	4618      	mov	r0, r3
 800b65c:	f000 fbb9 	bl	800bdd2 <TIM_ITRx_SetConfig>
      break;
 800b660:	e01c      	b.n	800b69c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b66e:	461a      	mov	r2, r3
 800b670:	f000 fb50 	bl	800bd14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2140      	movs	r1, #64	@ 0x40
 800b67a:	4618      	mov	r0, r3
 800b67c:	f000 fba9 	bl	800bdd2 <TIM_ITRx_SetConfig>
      break;
 800b680:	e00c      	b.n	800b69c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4619      	mov	r1, r3
 800b68c:	4610      	mov	r0, r2
 800b68e:	f000 fba0 	bl	800bdd2 <TIM_ITRx_SetConfig>
      break;
 800b692:	e003      	b.n	800b69c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b694:	2301      	movs	r3, #1
 800b696:	73fb      	strb	r3, [r7, #15]
      break;
 800b698:	e000      	b.n	800b69c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b69a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2201      	movs	r2, #1
 800b6a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3710      	adds	r7, #16
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	fffeff88 	.word	0xfffeff88

0800b6bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b6c4:	bf00      	nop
 800b6c6:	370c      	adds	r7, #12
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr

0800b6d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b6d8:	bf00      	nop
 800b6da:	370c      	adds	r7, #12
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr

0800b6e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b6ec:	bf00      	nop
 800b6ee:	370c      	adds	r7, #12
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr

0800b6f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b083      	sub	sp, #12
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b700:	bf00      	nop
 800b702:	370c      	adds	r7, #12
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b085      	sub	sp, #20
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	4a43      	ldr	r2, [pc, #268]	@ (800b82c <TIM_Base_SetConfig+0x120>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d013      	beq.n	800b74c <TIM_Base_SetConfig+0x40>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b72a:	d00f      	beq.n	800b74c <TIM_Base_SetConfig+0x40>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	4a40      	ldr	r2, [pc, #256]	@ (800b830 <TIM_Base_SetConfig+0x124>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d00b      	beq.n	800b74c <TIM_Base_SetConfig+0x40>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	4a3f      	ldr	r2, [pc, #252]	@ (800b834 <TIM_Base_SetConfig+0x128>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d007      	beq.n	800b74c <TIM_Base_SetConfig+0x40>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	4a3e      	ldr	r2, [pc, #248]	@ (800b838 <TIM_Base_SetConfig+0x12c>)
 800b740:	4293      	cmp	r3, r2
 800b742:	d003      	beq.n	800b74c <TIM_Base_SetConfig+0x40>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	4a3d      	ldr	r2, [pc, #244]	@ (800b83c <TIM_Base_SetConfig+0x130>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d108      	bne.n	800b75e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	68fa      	ldr	r2, [r7, #12]
 800b75a:	4313      	orrs	r3, r2
 800b75c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	4a32      	ldr	r2, [pc, #200]	@ (800b82c <TIM_Base_SetConfig+0x120>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d02b      	beq.n	800b7be <TIM_Base_SetConfig+0xb2>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b76c:	d027      	beq.n	800b7be <TIM_Base_SetConfig+0xb2>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	4a2f      	ldr	r2, [pc, #188]	@ (800b830 <TIM_Base_SetConfig+0x124>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d023      	beq.n	800b7be <TIM_Base_SetConfig+0xb2>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	4a2e      	ldr	r2, [pc, #184]	@ (800b834 <TIM_Base_SetConfig+0x128>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d01f      	beq.n	800b7be <TIM_Base_SetConfig+0xb2>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	4a2d      	ldr	r2, [pc, #180]	@ (800b838 <TIM_Base_SetConfig+0x12c>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d01b      	beq.n	800b7be <TIM_Base_SetConfig+0xb2>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	4a2c      	ldr	r2, [pc, #176]	@ (800b83c <TIM_Base_SetConfig+0x130>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d017      	beq.n	800b7be <TIM_Base_SetConfig+0xb2>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	4a2b      	ldr	r2, [pc, #172]	@ (800b840 <TIM_Base_SetConfig+0x134>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d013      	beq.n	800b7be <TIM_Base_SetConfig+0xb2>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	4a2a      	ldr	r2, [pc, #168]	@ (800b844 <TIM_Base_SetConfig+0x138>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d00f      	beq.n	800b7be <TIM_Base_SetConfig+0xb2>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	4a29      	ldr	r2, [pc, #164]	@ (800b848 <TIM_Base_SetConfig+0x13c>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d00b      	beq.n	800b7be <TIM_Base_SetConfig+0xb2>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	4a28      	ldr	r2, [pc, #160]	@ (800b84c <TIM_Base_SetConfig+0x140>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d007      	beq.n	800b7be <TIM_Base_SetConfig+0xb2>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	4a27      	ldr	r2, [pc, #156]	@ (800b850 <TIM_Base_SetConfig+0x144>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d003      	beq.n	800b7be <TIM_Base_SetConfig+0xb2>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	4a26      	ldr	r2, [pc, #152]	@ (800b854 <TIM_Base_SetConfig+0x148>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d108      	bne.n	800b7d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b7c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	68db      	ldr	r3, [r3, #12]
 800b7ca:	68fa      	ldr	r2, [r7, #12]
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	695b      	ldr	r3, [r3, #20]
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	689a      	ldr	r2, [r3, #8]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4a0e      	ldr	r2, [pc, #56]	@ (800b82c <TIM_Base_SetConfig+0x120>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d003      	beq.n	800b7fe <TIM_Base_SetConfig+0xf2>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	4a10      	ldr	r2, [pc, #64]	@ (800b83c <TIM_Base_SetConfig+0x130>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d103      	bne.n	800b806 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	691a      	ldr	r2, [r3, #16]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f043 0204 	orr.w	r2, r3, #4
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2201      	movs	r2, #1
 800b816:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	68fa      	ldr	r2, [r7, #12]
 800b81c:	601a      	str	r2, [r3, #0]
}
 800b81e:	bf00      	nop
 800b820:	3714      	adds	r7, #20
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr
 800b82a:	bf00      	nop
 800b82c:	40010000 	.word	0x40010000
 800b830:	40000400 	.word	0x40000400
 800b834:	40000800 	.word	0x40000800
 800b838:	40000c00 	.word	0x40000c00
 800b83c:	40010400 	.word	0x40010400
 800b840:	40014000 	.word	0x40014000
 800b844:	40014400 	.word	0x40014400
 800b848:	40014800 	.word	0x40014800
 800b84c:	40001800 	.word	0x40001800
 800b850:	40001c00 	.word	0x40001c00
 800b854:	40002000 	.word	0x40002000

0800b858 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b858:	b480      	push	{r7}
 800b85a:	b087      	sub	sp, #28
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6a1b      	ldr	r3, [r3, #32]
 800b866:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6a1b      	ldr	r3, [r3, #32]
 800b86c:	f023 0201 	bic.w	r2, r3, #1
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	699b      	ldr	r3, [r3, #24]
 800b87e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	4b2b      	ldr	r3, [pc, #172]	@ (800b930 <TIM_OC1_SetConfig+0xd8>)
 800b884:	4013      	ands	r3, r2
 800b886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f023 0303 	bic.w	r3, r3, #3
 800b88e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	68fa      	ldr	r2, [r7, #12]
 800b896:	4313      	orrs	r3, r2
 800b898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	f023 0302 	bic.w	r3, r3, #2
 800b8a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	689b      	ldr	r3, [r3, #8]
 800b8a6:	697a      	ldr	r2, [r7, #20]
 800b8a8:	4313      	orrs	r3, r2
 800b8aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	4a21      	ldr	r2, [pc, #132]	@ (800b934 <TIM_OC1_SetConfig+0xdc>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d003      	beq.n	800b8bc <TIM_OC1_SetConfig+0x64>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	4a20      	ldr	r2, [pc, #128]	@ (800b938 <TIM_OC1_SetConfig+0xe0>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d10c      	bne.n	800b8d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	f023 0308 	bic.w	r3, r3, #8
 800b8c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	68db      	ldr	r3, [r3, #12]
 800b8c8:	697a      	ldr	r2, [r7, #20]
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	f023 0304 	bic.w	r3, r3, #4
 800b8d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	4a16      	ldr	r2, [pc, #88]	@ (800b934 <TIM_OC1_SetConfig+0xdc>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d003      	beq.n	800b8e6 <TIM_OC1_SetConfig+0x8e>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	4a15      	ldr	r2, [pc, #84]	@ (800b938 <TIM_OC1_SetConfig+0xe0>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d111      	bne.n	800b90a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b8ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b8f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	695b      	ldr	r3, [r3, #20]
 800b8fa:	693a      	ldr	r2, [r7, #16]
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	699b      	ldr	r3, [r3, #24]
 800b904:	693a      	ldr	r2, [r7, #16]
 800b906:	4313      	orrs	r3, r2
 800b908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	693a      	ldr	r2, [r7, #16]
 800b90e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	68fa      	ldr	r2, [r7, #12]
 800b914:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	685a      	ldr	r2, [r3, #4]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	697a      	ldr	r2, [r7, #20]
 800b922:	621a      	str	r2, [r3, #32]
}
 800b924:	bf00      	nop
 800b926:	371c      	adds	r7, #28
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr
 800b930:	fffeff8f 	.word	0xfffeff8f
 800b934:	40010000 	.word	0x40010000
 800b938:	40010400 	.word	0x40010400

0800b93c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b087      	sub	sp, #28
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6a1b      	ldr	r3, [r3, #32]
 800b94a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6a1b      	ldr	r3, [r3, #32]
 800b950:	f023 0210 	bic.w	r2, r3, #16
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	699b      	ldr	r3, [r3, #24]
 800b962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b964:	68fa      	ldr	r2, [r7, #12]
 800b966:	4b2e      	ldr	r3, [pc, #184]	@ (800ba20 <TIM_OC2_SetConfig+0xe4>)
 800b968:	4013      	ands	r3, r2
 800b96a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	021b      	lsls	r3, r3, #8
 800b97a:	68fa      	ldr	r2, [r7, #12]
 800b97c:	4313      	orrs	r3, r2
 800b97e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	f023 0320 	bic.w	r3, r3, #32
 800b986:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	689b      	ldr	r3, [r3, #8]
 800b98c:	011b      	lsls	r3, r3, #4
 800b98e:	697a      	ldr	r2, [r7, #20]
 800b990:	4313      	orrs	r3, r2
 800b992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	4a23      	ldr	r2, [pc, #140]	@ (800ba24 <TIM_OC2_SetConfig+0xe8>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d003      	beq.n	800b9a4 <TIM_OC2_SetConfig+0x68>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	4a22      	ldr	r2, [pc, #136]	@ (800ba28 <TIM_OC2_SetConfig+0xec>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d10d      	bne.n	800b9c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b9aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	68db      	ldr	r3, [r3, #12]
 800b9b0:	011b      	lsls	r3, r3, #4
 800b9b2:	697a      	ldr	r2, [r7, #20]
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b9be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	4a18      	ldr	r2, [pc, #96]	@ (800ba24 <TIM_OC2_SetConfig+0xe8>)
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	d003      	beq.n	800b9d0 <TIM_OC2_SetConfig+0x94>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	4a17      	ldr	r2, [pc, #92]	@ (800ba28 <TIM_OC2_SetConfig+0xec>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d113      	bne.n	800b9f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b9d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b9de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	695b      	ldr	r3, [r3, #20]
 800b9e4:	009b      	lsls	r3, r3, #2
 800b9e6:	693a      	ldr	r2, [r7, #16]
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	699b      	ldr	r3, [r3, #24]
 800b9f0:	009b      	lsls	r3, r3, #2
 800b9f2:	693a      	ldr	r2, [r7, #16]
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	693a      	ldr	r2, [r7, #16]
 800b9fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	68fa      	ldr	r2, [r7, #12]
 800ba02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	685a      	ldr	r2, [r3, #4]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	697a      	ldr	r2, [r7, #20]
 800ba10:	621a      	str	r2, [r3, #32]
}
 800ba12:	bf00      	nop
 800ba14:	371c      	adds	r7, #28
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop
 800ba20:	feff8fff 	.word	0xfeff8fff
 800ba24:	40010000 	.word	0x40010000
 800ba28:	40010400 	.word	0x40010400

0800ba2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b087      	sub	sp, #28
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6a1b      	ldr	r3, [r3, #32]
 800ba3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6a1b      	ldr	r3, [r3, #32]
 800ba40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	69db      	ldr	r3, [r3, #28]
 800ba52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ba54:	68fa      	ldr	r2, [r7, #12]
 800ba56:	4b2d      	ldr	r3, [pc, #180]	@ (800bb0c <TIM_OC3_SetConfig+0xe0>)
 800ba58:	4013      	ands	r3, r2
 800ba5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	f023 0303 	bic.w	r3, r3, #3
 800ba62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	68fa      	ldr	r2, [r7, #12]
 800ba6a:	4313      	orrs	r3, r2
 800ba6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ba74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	689b      	ldr	r3, [r3, #8]
 800ba7a:	021b      	lsls	r3, r3, #8
 800ba7c:	697a      	ldr	r2, [r7, #20]
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	4a22      	ldr	r2, [pc, #136]	@ (800bb10 <TIM_OC3_SetConfig+0xe4>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d003      	beq.n	800ba92 <TIM_OC3_SetConfig+0x66>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	4a21      	ldr	r2, [pc, #132]	@ (800bb14 <TIM_OC3_SetConfig+0xe8>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d10d      	bne.n	800baae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ba98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	021b      	lsls	r3, r3, #8
 800baa0:	697a      	ldr	r2, [r7, #20]
 800baa2:	4313      	orrs	r3, r2
 800baa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800baac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	4a17      	ldr	r2, [pc, #92]	@ (800bb10 <TIM_OC3_SetConfig+0xe4>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d003      	beq.n	800babe <TIM_OC3_SetConfig+0x92>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	4a16      	ldr	r2, [pc, #88]	@ (800bb14 <TIM_OC3_SetConfig+0xe8>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d113      	bne.n	800bae6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bacc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	695b      	ldr	r3, [r3, #20]
 800bad2:	011b      	lsls	r3, r3, #4
 800bad4:	693a      	ldr	r2, [r7, #16]
 800bad6:	4313      	orrs	r3, r2
 800bad8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	699b      	ldr	r3, [r3, #24]
 800bade:	011b      	lsls	r3, r3, #4
 800bae0:	693a      	ldr	r2, [r7, #16]
 800bae2:	4313      	orrs	r3, r2
 800bae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	693a      	ldr	r2, [r7, #16]
 800baea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	68fa      	ldr	r2, [r7, #12]
 800baf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	685a      	ldr	r2, [r3, #4]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	697a      	ldr	r2, [r7, #20]
 800bafe:	621a      	str	r2, [r3, #32]
}
 800bb00:	bf00      	nop
 800bb02:	371c      	adds	r7, #28
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr
 800bb0c:	fffeff8f 	.word	0xfffeff8f
 800bb10:	40010000 	.word	0x40010000
 800bb14:	40010400 	.word	0x40010400

0800bb18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b087      	sub	sp, #28
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6a1b      	ldr	r3, [r3, #32]
 800bb26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6a1b      	ldr	r3, [r3, #32]
 800bb2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	685b      	ldr	r3, [r3, #4]
 800bb38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	69db      	ldr	r3, [r3, #28]
 800bb3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bb40:	68fa      	ldr	r2, [r7, #12]
 800bb42:	4b1e      	ldr	r3, [pc, #120]	@ (800bbbc <TIM_OC4_SetConfig+0xa4>)
 800bb44:	4013      	ands	r3, r2
 800bb46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	021b      	lsls	r3, r3, #8
 800bb56:	68fa      	ldr	r2, [r7, #12]
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bb62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	689b      	ldr	r3, [r3, #8]
 800bb68:	031b      	lsls	r3, r3, #12
 800bb6a:	693a      	ldr	r2, [r7, #16]
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	4a13      	ldr	r2, [pc, #76]	@ (800bbc0 <TIM_OC4_SetConfig+0xa8>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d003      	beq.n	800bb80 <TIM_OC4_SetConfig+0x68>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	4a12      	ldr	r2, [pc, #72]	@ (800bbc4 <TIM_OC4_SetConfig+0xac>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d109      	bne.n	800bb94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bb86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	695b      	ldr	r3, [r3, #20]
 800bb8c:	019b      	lsls	r3, r3, #6
 800bb8e:	697a      	ldr	r2, [r7, #20]
 800bb90:	4313      	orrs	r3, r2
 800bb92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	697a      	ldr	r2, [r7, #20]
 800bb98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	68fa      	ldr	r2, [r7, #12]
 800bb9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	685a      	ldr	r2, [r3, #4]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	693a      	ldr	r2, [r7, #16]
 800bbac:	621a      	str	r2, [r3, #32]
}
 800bbae:	bf00      	nop
 800bbb0:	371c      	adds	r7, #28
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr
 800bbba:	bf00      	nop
 800bbbc:	feff8fff 	.word	0xfeff8fff
 800bbc0:	40010000 	.word	0x40010000
 800bbc4:	40010400 	.word	0x40010400

0800bbc8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b087      	sub	sp, #28
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6a1b      	ldr	r3, [r3, #32]
 800bbd6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6a1b      	ldr	r3, [r3, #32]
 800bbdc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bbf0:	68fa      	ldr	r2, [r7, #12]
 800bbf2:	4b1b      	ldr	r3, [pc, #108]	@ (800bc60 <TIM_OC5_SetConfig+0x98>)
 800bbf4:	4013      	ands	r3, r2
 800bbf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	68fa      	ldr	r2, [r7, #12]
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bc08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	689b      	ldr	r3, [r3, #8]
 800bc0e:	041b      	lsls	r3, r3, #16
 800bc10:	693a      	ldr	r2, [r7, #16]
 800bc12:	4313      	orrs	r3, r2
 800bc14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	4a12      	ldr	r2, [pc, #72]	@ (800bc64 <TIM_OC5_SetConfig+0x9c>)
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d003      	beq.n	800bc26 <TIM_OC5_SetConfig+0x5e>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	4a11      	ldr	r2, [pc, #68]	@ (800bc68 <TIM_OC5_SetConfig+0xa0>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d109      	bne.n	800bc3a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bc2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	695b      	ldr	r3, [r3, #20]
 800bc32:	021b      	lsls	r3, r3, #8
 800bc34:	697a      	ldr	r2, [r7, #20]
 800bc36:	4313      	orrs	r3, r2
 800bc38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	697a      	ldr	r2, [r7, #20]
 800bc3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	68fa      	ldr	r2, [r7, #12]
 800bc44:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	685a      	ldr	r2, [r3, #4]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	693a      	ldr	r2, [r7, #16]
 800bc52:	621a      	str	r2, [r3, #32]
}
 800bc54:	bf00      	nop
 800bc56:	371c      	adds	r7, #28
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr
 800bc60:	fffeff8f 	.word	0xfffeff8f
 800bc64:	40010000 	.word	0x40010000
 800bc68:	40010400 	.word	0x40010400

0800bc6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b087      	sub	sp, #28
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6a1b      	ldr	r3, [r3, #32]
 800bc7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6a1b      	ldr	r3, [r3, #32]
 800bc80:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bc94:	68fa      	ldr	r2, [r7, #12]
 800bc96:	4b1c      	ldr	r3, [pc, #112]	@ (800bd08 <TIM_OC6_SetConfig+0x9c>)
 800bc98:	4013      	ands	r3, r2
 800bc9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	021b      	lsls	r3, r3, #8
 800bca2:	68fa      	ldr	r2, [r7, #12]
 800bca4:	4313      	orrs	r3, r2
 800bca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bcae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	689b      	ldr	r3, [r3, #8]
 800bcb4:	051b      	lsls	r3, r3, #20
 800bcb6:	693a      	ldr	r2, [r7, #16]
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	4a13      	ldr	r2, [pc, #76]	@ (800bd0c <TIM_OC6_SetConfig+0xa0>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d003      	beq.n	800bccc <TIM_OC6_SetConfig+0x60>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	4a12      	ldr	r2, [pc, #72]	@ (800bd10 <TIM_OC6_SetConfig+0xa4>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d109      	bne.n	800bce0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bcd2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	695b      	ldr	r3, [r3, #20]
 800bcd8:	029b      	lsls	r3, r3, #10
 800bcda:	697a      	ldr	r2, [r7, #20]
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	697a      	ldr	r2, [r7, #20]
 800bce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	68fa      	ldr	r2, [r7, #12]
 800bcea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	685a      	ldr	r2, [r3, #4]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	693a      	ldr	r2, [r7, #16]
 800bcf8:	621a      	str	r2, [r3, #32]
}
 800bcfa:	bf00      	nop
 800bcfc:	371c      	adds	r7, #28
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr
 800bd06:	bf00      	nop
 800bd08:	feff8fff 	.word	0xfeff8fff
 800bd0c:	40010000 	.word	0x40010000
 800bd10:	40010400 	.word	0x40010400

0800bd14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b087      	sub	sp, #28
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	60b9      	str	r1, [r7, #8]
 800bd1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	6a1b      	ldr	r3, [r3, #32]
 800bd24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	6a1b      	ldr	r3, [r3, #32]
 800bd2a:	f023 0201 	bic.w	r2, r3, #1
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	699b      	ldr	r3, [r3, #24]
 800bd36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bd3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	011b      	lsls	r3, r3, #4
 800bd44:	693a      	ldr	r2, [r7, #16]
 800bd46:	4313      	orrs	r3, r2
 800bd48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	f023 030a 	bic.w	r3, r3, #10
 800bd50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bd52:	697a      	ldr	r2, [r7, #20]
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	4313      	orrs	r3, r2
 800bd58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	693a      	ldr	r2, [r7, #16]
 800bd5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	697a      	ldr	r2, [r7, #20]
 800bd64:	621a      	str	r2, [r3, #32]
}
 800bd66:	bf00      	nop
 800bd68:	371c      	adds	r7, #28
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd70:	4770      	bx	lr

0800bd72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd72:	b480      	push	{r7}
 800bd74:	b087      	sub	sp, #28
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	60f8      	str	r0, [r7, #12]
 800bd7a:	60b9      	str	r1, [r7, #8]
 800bd7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	6a1b      	ldr	r3, [r3, #32]
 800bd82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	6a1b      	ldr	r3, [r3, #32]
 800bd88:	f023 0210 	bic.w	r2, r3, #16
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	699b      	ldr	r3, [r3, #24]
 800bd94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bd9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	031b      	lsls	r3, r3, #12
 800bda2:	693a      	ldr	r2, [r7, #16]
 800bda4:	4313      	orrs	r3, r2
 800bda6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bdae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	011b      	lsls	r3, r3, #4
 800bdb4:	697a      	ldr	r2, [r7, #20]
 800bdb6:	4313      	orrs	r3, r2
 800bdb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	693a      	ldr	r2, [r7, #16]
 800bdbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	697a      	ldr	r2, [r7, #20]
 800bdc4:	621a      	str	r2, [r3, #32]
}
 800bdc6:	bf00      	nop
 800bdc8:	371c      	adds	r7, #28
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr

0800bdd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bdd2:	b480      	push	{r7}
 800bdd4:	b085      	sub	sp, #20
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
 800bdda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	689b      	ldr	r3, [r3, #8]
 800bde0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bde8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bdea:	683a      	ldr	r2, [r7, #0]
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	f043 0307 	orr.w	r3, r3, #7
 800bdf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	68fa      	ldr	r2, [r7, #12]
 800bdfa:	609a      	str	r2, [r3, #8]
}
 800bdfc:	bf00      	nop
 800bdfe:	3714      	adds	r7, #20
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr

0800be08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800be08:	b480      	push	{r7}
 800be0a:	b087      	sub	sp, #28
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	60f8      	str	r0, [r7, #12]
 800be10:	60b9      	str	r1, [r7, #8]
 800be12:	607a      	str	r2, [r7, #4]
 800be14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	689b      	ldr	r3, [r3, #8]
 800be1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800be22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	021a      	lsls	r2, r3, #8
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	431a      	orrs	r2, r3
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	4313      	orrs	r3, r2
 800be30:	697a      	ldr	r2, [r7, #20]
 800be32:	4313      	orrs	r3, r2
 800be34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	697a      	ldr	r2, [r7, #20]
 800be3a:	609a      	str	r2, [r3, #8]
}
 800be3c:	bf00      	nop
 800be3e:	371c      	adds	r7, #28
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800be48:	b480      	push	{r7}
 800be4a:	b085      	sub	sp, #20
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d101      	bne.n	800be60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800be5c:	2302      	movs	r3, #2
 800be5e:	e06d      	b.n	800bf3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2201      	movs	r2, #1
 800be64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2202      	movs	r2, #2
 800be6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	689b      	ldr	r3, [r3, #8]
 800be7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4a30      	ldr	r2, [pc, #192]	@ (800bf48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d004      	beq.n	800be94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	4a2f      	ldr	r2, [pc, #188]	@ (800bf4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d108      	bne.n	800bea6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800be9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	68fa      	ldr	r2, [r7, #12]
 800bea2:	4313      	orrs	r3, r2
 800bea4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800beac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	68fa      	ldr	r2, [r7, #12]
 800beb4:	4313      	orrs	r3, r2
 800beb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	68fa      	ldr	r2, [r7, #12]
 800bebe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4a20      	ldr	r2, [pc, #128]	@ (800bf48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d022      	beq.n	800bf10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bed2:	d01d      	beq.n	800bf10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	4a1d      	ldr	r2, [pc, #116]	@ (800bf50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d018      	beq.n	800bf10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	4a1c      	ldr	r2, [pc, #112]	@ (800bf54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d013      	beq.n	800bf10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4a1a      	ldr	r2, [pc, #104]	@ (800bf58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d00e      	beq.n	800bf10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4a15      	ldr	r2, [pc, #84]	@ (800bf4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d009      	beq.n	800bf10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	4a16      	ldr	r2, [pc, #88]	@ (800bf5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d004      	beq.n	800bf10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	4a15      	ldr	r2, [pc, #84]	@ (800bf60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d10c      	bne.n	800bf2a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	689b      	ldr	r3, [r3, #8]
 800bf1c:	68ba      	ldr	r2, [r7, #8]
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	68ba      	ldr	r2, [r7, #8]
 800bf28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2200      	movs	r2, #0
 800bf36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bf3a:	2300      	movs	r3, #0
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3714      	adds	r7, #20
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr
 800bf48:	40010000 	.word	0x40010000
 800bf4c:	40010400 	.word	0x40010400
 800bf50:	40000400 	.word	0x40000400
 800bf54:	40000800 	.word	0x40000800
 800bf58:	40000c00 	.word	0x40000c00
 800bf5c:	40014000 	.word	0x40014000
 800bf60:	40001800 	.word	0x40001800

0800bf64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bf64:	b480      	push	{r7}
 800bf66:	b085      	sub	sp, #20
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	d101      	bne.n	800bf80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bf7c:	2302      	movs	r3, #2
 800bf7e:	e065      	b.n	800c04c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2201      	movs	r2, #1
 800bf84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	68db      	ldr	r3, [r3, #12]
 800bf92:	4313      	orrs	r3, r2
 800bf94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	689b      	ldr	r3, [r3, #8]
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	4313      	orrs	r3, r2
 800bfb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4313      	orrs	r3, r2
 800bfbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	691b      	ldr	r3, [r3, #16]
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	695b      	ldr	r3, [r3, #20]
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	699b      	ldr	r3, [r3, #24]
 800bff4:	041b      	lsls	r3, r3, #16
 800bff6:	4313      	orrs	r3, r2
 800bff8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	4a16      	ldr	r2, [pc, #88]	@ (800c058 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c000:	4293      	cmp	r3, r2
 800c002:	d004      	beq.n	800c00e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4a14      	ldr	r2, [pc, #80]	@ (800c05c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d115      	bne.n	800c03a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c018:	051b      	lsls	r3, r3, #20
 800c01a:	4313      	orrs	r3, r2
 800c01c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	69db      	ldr	r3, [r3, #28]
 800c028:	4313      	orrs	r3, r2
 800c02a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	6a1b      	ldr	r3, [r3, #32]
 800c036:	4313      	orrs	r3, r2
 800c038:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	68fa      	ldr	r2, [r7, #12]
 800c040:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c04a:	2300      	movs	r3, #0
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3714      	adds	r7, #20
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr
 800c058:	40010000 	.word	0x40010000
 800c05c:	40010400 	.word	0x40010400

0800c060 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c060:	b480      	push	{r7}
 800c062:	b083      	sub	sp, #12
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c068:	bf00      	nop
 800c06a:	370c      	adds	r7, #12
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr

0800c074 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c074:	b480      	push	{r7}
 800c076:	b083      	sub	sp, #12
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c07c:	bf00      	nop
 800c07e:	370c      	adds	r7, #12
 800c080:	46bd      	mov	sp, r7
 800c082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c086:	4770      	bx	lr

0800c088 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c088:	b480      	push	{r7}
 800c08a:	b083      	sub	sp, #12
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c090:	bf00      	nop
 800c092:	370c      	adds	r7, #12
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr

0800c09c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b082      	sub	sp, #8
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d101      	bne.n	800c0ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	e040      	b.n	800c130 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d106      	bne.n	800c0c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f7f6 fc90 	bl	80029e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2224      	movs	r2, #36	@ 0x24
 800c0c8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	681a      	ldr	r2, [r3, #0]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f022 0201 	bic.w	r2, r2, #1
 800c0d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d002      	beq.n	800c0e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 fb66 	bl	800c7b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 f8ff 	bl	800c2ec <UART_SetConfig>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	d101      	bne.n	800c0f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	e01b      	b.n	800c130 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	685a      	ldr	r2, [r3, #4]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c106:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	689a      	ldr	r2, [r3, #8]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c116:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	681a      	ldr	r2, [r3, #0]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f042 0201 	orr.w	r2, r2, #1
 800c126:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f000 fbe5 	bl	800c8f8 <UART_CheckIdleState>
 800c12e:	4603      	mov	r3, r0
}
 800c130:	4618      	mov	r0, r3
 800c132:	3708      	adds	r7, #8
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b08a      	sub	sp, #40	@ 0x28
 800c13c:	af02      	add	r7, sp, #8
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	603b      	str	r3, [r7, #0]
 800c144:	4613      	mov	r3, r2
 800c146:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c14c:	2b20      	cmp	r3, #32
 800c14e:	d177      	bne.n	800c240 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d002      	beq.n	800c15c <HAL_UART_Transmit+0x24>
 800c156:	88fb      	ldrh	r3, [r7, #6]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d101      	bne.n	800c160 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800c15c:	2301      	movs	r3, #1
 800c15e:	e070      	b.n	800c242 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2200      	movs	r2, #0
 800c164:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2221      	movs	r2, #33	@ 0x21
 800c16c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c16e:	f7f7 f9ed 	bl	800354c <HAL_GetTick>
 800c172:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	88fa      	ldrh	r2, [r7, #6]
 800c178:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	88fa      	ldrh	r2, [r7, #6]
 800c180:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	689b      	ldr	r3, [r3, #8]
 800c188:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c18c:	d108      	bne.n	800c1a0 <HAL_UART_Transmit+0x68>
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	691b      	ldr	r3, [r3, #16]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d104      	bne.n	800c1a0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800c196:	2300      	movs	r3, #0
 800c198:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	61bb      	str	r3, [r7, #24]
 800c19e:	e003      	b.n	800c1a8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c1a8:	e02f      	b.n	800c20a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	9300      	str	r3, [sp, #0]
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	2180      	movs	r1, #128	@ 0x80
 800c1b4:	68f8      	ldr	r0, [r7, #12]
 800c1b6:	f000 fbf6 	bl	800c9a6 <UART_WaitOnFlagUntilTimeout>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d004      	beq.n	800c1ca <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2220      	movs	r2, #32
 800c1c4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800c1c6:	2303      	movs	r3, #3
 800c1c8:	e03b      	b.n	800c242 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800c1ca:	69fb      	ldr	r3, [r7, #28]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d10b      	bne.n	800c1e8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c1d0:	69bb      	ldr	r3, [r7, #24]
 800c1d2:	881b      	ldrh	r3, [r3, #0]
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c1de:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c1e0:	69bb      	ldr	r3, [r7, #24]
 800c1e2:	3302      	adds	r3, #2
 800c1e4:	61bb      	str	r3, [r7, #24]
 800c1e6:	e007      	b.n	800c1f8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c1e8:	69fb      	ldr	r3, [r7, #28]
 800c1ea:	781a      	ldrb	r2, [r3, #0]
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c1f2:	69fb      	ldr	r3, [r7, #28]
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c1fe:	b29b      	uxth	r3, r3
 800c200:	3b01      	subs	r3, #1
 800c202:	b29a      	uxth	r2, r3
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c210:	b29b      	uxth	r3, r3
 800c212:	2b00      	cmp	r3, #0
 800c214:	d1c9      	bne.n	800c1aa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	9300      	str	r3, [sp, #0]
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	2200      	movs	r2, #0
 800c21e:	2140      	movs	r1, #64	@ 0x40
 800c220:	68f8      	ldr	r0, [r7, #12]
 800c222:	f000 fbc0 	bl	800c9a6 <UART_WaitOnFlagUntilTimeout>
 800c226:	4603      	mov	r3, r0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d004      	beq.n	800c236 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2220      	movs	r2, #32
 800c230:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800c232:	2303      	movs	r3, #3
 800c234:	e005      	b.n	800c242 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2220      	movs	r2, #32
 800c23a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800c23c:	2300      	movs	r3, #0
 800c23e:	e000      	b.n	800c242 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800c240:	2302      	movs	r3, #2
  }
}
 800c242:	4618      	mov	r0, r3
 800c244:	3720      	adds	r7, #32
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}

0800c24a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c24a:	b580      	push	{r7, lr}
 800c24c:	b08a      	sub	sp, #40	@ 0x28
 800c24e:	af00      	add	r7, sp, #0
 800c250:	60f8      	str	r0, [r7, #12]
 800c252:	60b9      	str	r1, [r7, #8]
 800c254:	4613      	mov	r3, r2
 800c256:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c25e:	2b20      	cmp	r3, #32
 800c260:	d132      	bne.n	800c2c8 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d002      	beq.n	800c26e <HAL_UART_Receive_IT+0x24>
 800c268:	88fb      	ldrh	r3, [r7, #6]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d101      	bne.n	800c272 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c26e:	2301      	movs	r3, #1
 800c270:	e02b      	b.n	800c2ca <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	2200      	movs	r2, #0
 800c276:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c282:	2b00      	cmp	r3, #0
 800c284:	d018      	beq.n	800c2b8 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	e853 3f00 	ldrex	r3, [r3]
 800c292:	613b      	str	r3, [r7, #16]
   return(result);
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c29a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a4:	623b      	str	r3, [r7, #32]
 800c2a6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2a8:	69f9      	ldr	r1, [r7, #28]
 800c2aa:	6a3a      	ldr	r2, [r7, #32]
 800c2ac:	e841 2300 	strex	r3, r2, [r1]
 800c2b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d1e6      	bne.n	800c286 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c2b8:	88fb      	ldrh	r3, [r7, #6]
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	68b9      	ldr	r1, [r7, #8]
 800c2be:	68f8      	ldr	r0, [r7, #12]
 800c2c0:	f000 fbde 	bl	800ca80 <UART_Start_Receive_IT>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	e000      	b.n	800c2ca <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800c2c8:	2302      	movs	r3, #2
  }
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3728      	adds	r7, #40	@ 0x28
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}

0800c2d2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c2d2:	b480      	push	{r7}
 800c2d4:	b083      	sub	sp, #12
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	6078      	str	r0, [r7, #4]
 800c2da:	460b      	mov	r3, r1
 800c2dc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c2de:	bf00      	nop
 800c2e0:	370c      	adds	r7, #12
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr
	...

0800c2ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b088      	sub	sp, #32
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	689a      	ldr	r2, [r3, #8]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	691b      	ldr	r3, [r3, #16]
 800c300:	431a      	orrs	r2, r3
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	695b      	ldr	r3, [r3, #20]
 800c306:	431a      	orrs	r2, r3
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	69db      	ldr	r3, [r3, #28]
 800c30c:	4313      	orrs	r3, r2
 800c30e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	681a      	ldr	r2, [r3, #0]
 800c316:	4ba6      	ldr	r3, [pc, #664]	@ (800c5b0 <UART_SetConfig+0x2c4>)
 800c318:	4013      	ands	r3, r2
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	6812      	ldr	r2, [r2, #0]
 800c31e:	6979      	ldr	r1, [r7, #20]
 800c320:	430b      	orrs	r3, r1
 800c322:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	68da      	ldr	r2, [r3, #12]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	430a      	orrs	r2, r1
 800c338:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	699b      	ldr	r3, [r3, #24]
 800c33e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6a1b      	ldr	r3, [r3, #32]
 800c344:	697a      	ldr	r2, [r7, #20]
 800c346:	4313      	orrs	r3, r2
 800c348:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	689b      	ldr	r3, [r3, #8]
 800c350:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	697a      	ldr	r2, [r7, #20]
 800c35a:	430a      	orrs	r2, r1
 800c35c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	4a94      	ldr	r2, [pc, #592]	@ (800c5b4 <UART_SetConfig+0x2c8>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d120      	bne.n	800c3aa <UART_SetConfig+0xbe>
 800c368:	4b93      	ldr	r3, [pc, #588]	@ (800c5b8 <UART_SetConfig+0x2cc>)
 800c36a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c36e:	f003 0303 	and.w	r3, r3, #3
 800c372:	2b03      	cmp	r3, #3
 800c374:	d816      	bhi.n	800c3a4 <UART_SetConfig+0xb8>
 800c376:	a201      	add	r2, pc, #4	@ (adr r2, 800c37c <UART_SetConfig+0x90>)
 800c378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c37c:	0800c38d 	.word	0x0800c38d
 800c380:	0800c399 	.word	0x0800c399
 800c384:	0800c393 	.word	0x0800c393
 800c388:	0800c39f 	.word	0x0800c39f
 800c38c:	2301      	movs	r3, #1
 800c38e:	77fb      	strb	r3, [r7, #31]
 800c390:	e150      	b.n	800c634 <UART_SetConfig+0x348>
 800c392:	2302      	movs	r3, #2
 800c394:	77fb      	strb	r3, [r7, #31]
 800c396:	e14d      	b.n	800c634 <UART_SetConfig+0x348>
 800c398:	2304      	movs	r3, #4
 800c39a:	77fb      	strb	r3, [r7, #31]
 800c39c:	e14a      	b.n	800c634 <UART_SetConfig+0x348>
 800c39e:	2308      	movs	r3, #8
 800c3a0:	77fb      	strb	r3, [r7, #31]
 800c3a2:	e147      	b.n	800c634 <UART_SetConfig+0x348>
 800c3a4:	2310      	movs	r3, #16
 800c3a6:	77fb      	strb	r3, [r7, #31]
 800c3a8:	e144      	b.n	800c634 <UART_SetConfig+0x348>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4a83      	ldr	r2, [pc, #524]	@ (800c5bc <UART_SetConfig+0x2d0>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d132      	bne.n	800c41a <UART_SetConfig+0x12e>
 800c3b4:	4b80      	ldr	r3, [pc, #512]	@ (800c5b8 <UART_SetConfig+0x2cc>)
 800c3b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3ba:	f003 030c 	and.w	r3, r3, #12
 800c3be:	2b0c      	cmp	r3, #12
 800c3c0:	d828      	bhi.n	800c414 <UART_SetConfig+0x128>
 800c3c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c3c8 <UART_SetConfig+0xdc>)
 800c3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c8:	0800c3fd 	.word	0x0800c3fd
 800c3cc:	0800c415 	.word	0x0800c415
 800c3d0:	0800c415 	.word	0x0800c415
 800c3d4:	0800c415 	.word	0x0800c415
 800c3d8:	0800c409 	.word	0x0800c409
 800c3dc:	0800c415 	.word	0x0800c415
 800c3e0:	0800c415 	.word	0x0800c415
 800c3e4:	0800c415 	.word	0x0800c415
 800c3e8:	0800c403 	.word	0x0800c403
 800c3ec:	0800c415 	.word	0x0800c415
 800c3f0:	0800c415 	.word	0x0800c415
 800c3f4:	0800c415 	.word	0x0800c415
 800c3f8:	0800c40f 	.word	0x0800c40f
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	77fb      	strb	r3, [r7, #31]
 800c400:	e118      	b.n	800c634 <UART_SetConfig+0x348>
 800c402:	2302      	movs	r3, #2
 800c404:	77fb      	strb	r3, [r7, #31]
 800c406:	e115      	b.n	800c634 <UART_SetConfig+0x348>
 800c408:	2304      	movs	r3, #4
 800c40a:	77fb      	strb	r3, [r7, #31]
 800c40c:	e112      	b.n	800c634 <UART_SetConfig+0x348>
 800c40e:	2308      	movs	r3, #8
 800c410:	77fb      	strb	r3, [r7, #31]
 800c412:	e10f      	b.n	800c634 <UART_SetConfig+0x348>
 800c414:	2310      	movs	r3, #16
 800c416:	77fb      	strb	r3, [r7, #31]
 800c418:	e10c      	b.n	800c634 <UART_SetConfig+0x348>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4a68      	ldr	r2, [pc, #416]	@ (800c5c0 <UART_SetConfig+0x2d4>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d120      	bne.n	800c466 <UART_SetConfig+0x17a>
 800c424:	4b64      	ldr	r3, [pc, #400]	@ (800c5b8 <UART_SetConfig+0x2cc>)
 800c426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c42a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c42e:	2b30      	cmp	r3, #48	@ 0x30
 800c430:	d013      	beq.n	800c45a <UART_SetConfig+0x16e>
 800c432:	2b30      	cmp	r3, #48	@ 0x30
 800c434:	d814      	bhi.n	800c460 <UART_SetConfig+0x174>
 800c436:	2b20      	cmp	r3, #32
 800c438:	d009      	beq.n	800c44e <UART_SetConfig+0x162>
 800c43a:	2b20      	cmp	r3, #32
 800c43c:	d810      	bhi.n	800c460 <UART_SetConfig+0x174>
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d002      	beq.n	800c448 <UART_SetConfig+0x15c>
 800c442:	2b10      	cmp	r3, #16
 800c444:	d006      	beq.n	800c454 <UART_SetConfig+0x168>
 800c446:	e00b      	b.n	800c460 <UART_SetConfig+0x174>
 800c448:	2300      	movs	r3, #0
 800c44a:	77fb      	strb	r3, [r7, #31]
 800c44c:	e0f2      	b.n	800c634 <UART_SetConfig+0x348>
 800c44e:	2302      	movs	r3, #2
 800c450:	77fb      	strb	r3, [r7, #31]
 800c452:	e0ef      	b.n	800c634 <UART_SetConfig+0x348>
 800c454:	2304      	movs	r3, #4
 800c456:	77fb      	strb	r3, [r7, #31]
 800c458:	e0ec      	b.n	800c634 <UART_SetConfig+0x348>
 800c45a:	2308      	movs	r3, #8
 800c45c:	77fb      	strb	r3, [r7, #31]
 800c45e:	e0e9      	b.n	800c634 <UART_SetConfig+0x348>
 800c460:	2310      	movs	r3, #16
 800c462:	77fb      	strb	r3, [r7, #31]
 800c464:	e0e6      	b.n	800c634 <UART_SetConfig+0x348>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4a56      	ldr	r2, [pc, #344]	@ (800c5c4 <UART_SetConfig+0x2d8>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d120      	bne.n	800c4b2 <UART_SetConfig+0x1c6>
 800c470:	4b51      	ldr	r3, [pc, #324]	@ (800c5b8 <UART_SetConfig+0x2cc>)
 800c472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c476:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c47a:	2bc0      	cmp	r3, #192	@ 0xc0
 800c47c:	d013      	beq.n	800c4a6 <UART_SetConfig+0x1ba>
 800c47e:	2bc0      	cmp	r3, #192	@ 0xc0
 800c480:	d814      	bhi.n	800c4ac <UART_SetConfig+0x1c0>
 800c482:	2b80      	cmp	r3, #128	@ 0x80
 800c484:	d009      	beq.n	800c49a <UART_SetConfig+0x1ae>
 800c486:	2b80      	cmp	r3, #128	@ 0x80
 800c488:	d810      	bhi.n	800c4ac <UART_SetConfig+0x1c0>
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d002      	beq.n	800c494 <UART_SetConfig+0x1a8>
 800c48e:	2b40      	cmp	r3, #64	@ 0x40
 800c490:	d006      	beq.n	800c4a0 <UART_SetConfig+0x1b4>
 800c492:	e00b      	b.n	800c4ac <UART_SetConfig+0x1c0>
 800c494:	2300      	movs	r3, #0
 800c496:	77fb      	strb	r3, [r7, #31]
 800c498:	e0cc      	b.n	800c634 <UART_SetConfig+0x348>
 800c49a:	2302      	movs	r3, #2
 800c49c:	77fb      	strb	r3, [r7, #31]
 800c49e:	e0c9      	b.n	800c634 <UART_SetConfig+0x348>
 800c4a0:	2304      	movs	r3, #4
 800c4a2:	77fb      	strb	r3, [r7, #31]
 800c4a4:	e0c6      	b.n	800c634 <UART_SetConfig+0x348>
 800c4a6:	2308      	movs	r3, #8
 800c4a8:	77fb      	strb	r3, [r7, #31]
 800c4aa:	e0c3      	b.n	800c634 <UART_SetConfig+0x348>
 800c4ac:	2310      	movs	r3, #16
 800c4ae:	77fb      	strb	r3, [r7, #31]
 800c4b0:	e0c0      	b.n	800c634 <UART_SetConfig+0x348>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	4a44      	ldr	r2, [pc, #272]	@ (800c5c8 <UART_SetConfig+0x2dc>)
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d125      	bne.n	800c508 <UART_SetConfig+0x21c>
 800c4bc:	4b3e      	ldr	r3, [pc, #248]	@ (800c5b8 <UART_SetConfig+0x2cc>)
 800c4be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c4c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c4ca:	d017      	beq.n	800c4fc <UART_SetConfig+0x210>
 800c4cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c4d0:	d817      	bhi.n	800c502 <UART_SetConfig+0x216>
 800c4d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c4d6:	d00b      	beq.n	800c4f0 <UART_SetConfig+0x204>
 800c4d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c4dc:	d811      	bhi.n	800c502 <UART_SetConfig+0x216>
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d003      	beq.n	800c4ea <UART_SetConfig+0x1fe>
 800c4e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c4e6:	d006      	beq.n	800c4f6 <UART_SetConfig+0x20a>
 800c4e8:	e00b      	b.n	800c502 <UART_SetConfig+0x216>
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	77fb      	strb	r3, [r7, #31]
 800c4ee:	e0a1      	b.n	800c634 <UART_SetConfig+0x348>
 800c4f0:	2302      	movs	r3, #2
 800c4f2:	77fb      	strb	r3, [r7, #31]
 800c4f4:	e09e      	b.n	800c634 <UART_SetConfig+0x348>
 800c4f6:	2304      	movs	r3, #4
 800c4f8:	77fb      	strb	r3, [r7, #31]
 800c4fa:	e09b      	b.n	800c634 <UART_SetConfig+0x348>
 800c4fc:	2308      	movs	r3, #8
 800c4fe:	77fb      	strb	r3, [r7, #31]
 800c500:	e098      	b.n	800c634 <UART_SetConfig+0x348>
 800c502:	2310      	movs	r3, #16
 800c504:	77fb      	strb	r3, [r7, #31]
 800c506:	e095      	b.n	800c634 <UART_SetConfig+0x348>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	4a2f      	ldr	r2, [pc, #188]	@ (800c5cc <UART_SetConfig+0x2e0>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d125      	bne.n	800c55e <UART_SetConfig+0x272>
 800c512:	4b29      	ldr	r3, [pc, #164]	@ (800c5b8 <UART_SetConfig+0x2cc>)
 800c514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c518:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c51c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c520:	d017      	beq.n	800c552 <UART_SetConfig+0x266>
 800c522:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c526:	d817      	bhi.n	800c558 <UART_SetConfig+0x26c>
 800c528:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c52c:	d00b      	beq.n	800c546 <UART_SetConfig+0x25a>
 800c52e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c532:	d811      	bhi.n	800c558 <UART_SetConfig+0x26c>
 800c534:	2b00      	cmp	r3, #0
 800c536:	d003      	beq.n	800c540 <UART_SetConfig+0x254>
 800c538:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c53c:	d006      	beq.n	800c54c <UART_SetConfig+0x260>
 800c53e:	e00b      	b.n	800c558 <UART_SetConfig+0x26c>
 800c540:	2301      	movs	r3, #1
 800c542:	77fb      	strb	r3, [r7, #31]
 800c544:	e076      	b.n	800c634 <UART_SetConfig+0x348>
 800c546:	2302      	movs	r3, #2
 800c548:	77fb      	strb	r3, [r7, #31]
 800c54a:	e073      	b.n	800c634 <UART_SetConfig+0x348>
 800c54c:	2304      	movs	r3, #4
 800c54e:	77fb      	strb	r3, [r7, #31]
 800c550:	e070      	b.n	800c634 <UART_SetConfig+0x348>
 800c552:	2308      	movs	r3, #8
 800c554:	77fb      	strb	r3, [r7, #31]
 800c556:	e06d      	b.n	800c634 <UART_SetConfig+0x348>
 800c558:	2310      	movs	r3, #16
 800c55a:	77fb      	strb	r3, [r7, #31]
 800c55c:	e06a      	b.n	800c634 <UART_SetConfig+0x348>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	4a1b      	ldr	r2, [pc, #108]	@ (800c5d0 <UART_SetConfig+0x2e4>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d138      	bne.n	800c5da <UART_SetConfig+0x2ee>
 800c568:	4b13      	ldr	r3, [pc, #76]	@ (800c5b8 <UART_SetConfig+0x2cc>)
 800c56a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c56e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800c572:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c576:	d017      	beq.n	800c5a8 <UART_SetConfig+0x2bc>
 800c578:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c57c:	d82a      	bhi.n	800c5d4 <UART_SetConfig+0x2e8>
 800c57e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c582:	d00b      	beq.n	800c59c <UART_SetConfig+0x2b0>
 800c584:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c588:	d824      	bhi.n	800c5d4 <UART_SetConfig+0x2e8>
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d003      	beq.n	800c596 <UART_SetConfig+0x2aa>
 800c58e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c592:	d006      	beq.n	800c5a2 <UART_SetConfig+0x2b6>
 800c594:	e01e      	b.n	800c5d4 <UART_SetConfig+0x2e8>
 800c596:	2300      	movs	r3, #0
 800c598:	77fb      	strb	r3, [r7, #31]
 800c59a:	e04b      	b.n	800c634 <UART_SetConfig+0x348>
 800c59c:	2302      	movs	r3, #2
 800c59e:	77fb      	strb	r3, [r7, #31]
 800c5a0:	e048      	b.n	800c634 <UART_SetConfig+0x348>
 800c5a2:	2304      	movs	r3, #4
 800c5a4:	77fb      	strb	r3, [r7, #31]
 800c5a6:	e045      	b.n	800c634 <UART_SetConfig+0x348>
 800c5a8:	2308      	movs	r3, #8
 800c5aa:	77fb      	strb	r3, [r7, #31]
 800c5ac:	e042      	b.n	800c634 <UART_SetConfig+0x348>
 800c5ae:	bf00      	nop
 800c5b0:	efff69f3 	.word	0xefff69f3
 800c5b4:	40011000 	.word	0x40011000
 800c5b8:	40023800 	.word	0x40023800
 800c5bc:	40004400 	.word	0x40004400
 800c5c0:	40004800 	.word	0x40004800
 800c5c4:	40004c00 	.word	0x40004c00
 800c5c8:	40005000 	.word	0x40005000
 800c5cc:	40011400 	.word	0x40011400
 800c5d0:	40007800 	.word	0x40007800
 800c5d4:	2310      	movs	r3, #16
 800c5d6:	77fb      	strb	r3, [r7, #31]
 800c5d8:	e02c      	b.n	800c634 <UART_SetConfig+0x348>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4a72      	ldr	r2, [pc, #456]	@ (800c7a8 <UART_SetConfig+0x4bc>)
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d125      	bne.n	800c630 <UART_SetConfig+0x344>
 800c5e4:	4b71      	ldr	r3, [pc, #452]	@ (800c7ac <UART_SetConfig+0x4c0>)
 800c5e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5ea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c5ee:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c5f2:	d017      	beq.n	800c624 <UART_SetConfig+0x338>
 800c5f4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c5f8:	d817      	bhi.n	800c62a <UART_SetConfig+0x33e>
 800c5fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c5fe:	d00b      	beq.n	800c618 <UART_SetConfig+0x32c>
 800c600:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c604:	d811      	bhi.n	800c62a <UART_SetConfig+0x33e>
 800c606:	2b00      	cmp	r3, #0
 800c608:	d003      	beq.n	800c612 <UART_SetConfig+0x326>
 800c60a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c60e:	d006      	beq.n	800c61e <UART_SetConfig+0x332>
 800c610:	e00b      	b.n	800c62a <UART_SetConfig+0x33e>
 800c612:	2300      	movs	r3, #0
 800c614:	77fb      	strb	r3, [r7, #31]
 800c616:	e00d      	b.n	800c634 <UART_SetConfig+0x348>
 800c618:	2302      	movs	r3, #2
 800c61a:	77fb      	strb	r3, [r7, #31]
 800c61c:	e00a      	b.n	800c634 <UART_SetConfig+0x348>
 800c61e:	2304      	movs	r3, #4
 800c620:	77fb      	strb	r3, [r7, #31]
 800c622:	e007      	b.n	800c634 <UART_SetConfig+0x348>
 800c624:	2308      	movs	r3, #8
 800c626:	77fb      	strb	r3, [r7, #31]
 800c628:	e004      	b.n	800c634 <UART_SetConfig+0x348>
 800c62a:	2310      	movs	r3, #16
 800c62c:	77fb      	strb	r3, [r7, #31]
 800c62e:	e001      	b.n	800c634 <UART_SetConfig+0x348>
 800c630:	2310      	movs	r3, #16
 800c632:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	69db      	ldr	r3, [r3, #28]
 800c638:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c63c:	d15b      	bne.n	800c6f6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800c63e:	7ffb      	ldrb	r3, [r7, #31]
 800c640:	2b08      	cmp	r3, #8
 800c642:	d828      	bhi.n	800c696 <UART_SetConfig+0x3aa>
 800c644:	a201      	add	r2, pc, #4	@ (adr r2, 800c64c <UART_SetConfig+0x360>)
 800c646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c64a:	bf00      	nop
 800c64c:	0800c671 	.word	0x0800c671
 800c650:	0800c679 	.word	0x0800c679
 800c654:	0800c681 	.word	0x0800c681
 800c658:	0800c697 	.word	0x0800c697
 800c65c:	0800c687 	.word	0x0800c687
 800c660:	0800c697 	.word	0x0800c697
 800c664:	0800c697 	.word	0x0800c697
 800c668:	0800c697 	.word	0x0800c697
 800c66c:	0800c68f 	.word	0x0800c68f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c670:	f7fb ff32 	bl	80084d8 <HAL_RCC_GetPCLK1Freq>
 800c674:	61b8      	str	r0, [r7, #24]
        break;
 800c676:	e013      	b.n	800c6a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c678:	f7fb ff42 	bl	8008500 <HAL_RCC_GetPCLK2Freq>
 800c67c:	61b8      	str	r0, [r7, #24]
        break;
 800c67e:	e00f      	b.n	800c6a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c680:	4b4b      	ldr	r3, [pc, #300]	@ (800c7b0 <UART_SetConfig+0x4c4>)
 800c682:	61bb      	str	r3, [r7, #24]
        break;
 800c684:	e00c      	b.n	800c6a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c686:	f7fb fe55 	bl	8008334 <HAL_RCC_GetSysClockFreq>
 800c68a:	61b8      	str	r0, [r7, #24]
        break;
 800c68c:	e008      	b.n	800c6a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c68e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c692:	61bb      	str	r3, [r7, #24]
        break;
 800c694:	e004      	b.n	800c6a0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800c696:	2300      	movs	r3, #0
 800c698:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c69a:	2301      	movs	r3, #1
 800c69c:	77bb      	strb	r3, [r7, #30]
        break;
 800c69e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c6a0:	69bb      	ldr	r3, [r7, #24]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d074      	beq.n	800c790 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c6a6:	69bb      	ldr	r3, [r7, #24]
 800c6a8:	005a      	lsls	r2, r3, #1
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	085b      	lsrs	r3, r3, #1
 800c6b0:	441a      	add	r2, r3
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	685b      	ldr	r3, [r3, #4]
 800c6b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	2b0f      	cmp	r3, #15
 800c6c0:	d916      	bls.n	800c6f0 <UART_SetConfig+0x404>
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c6c8:	d212      	bcs.n	800c6f0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	f023 030f 	bic.w	r3, r3, #15
 800c6d2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	085b      	lsrs	r3, r3, #1
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	f003 0307 	and.w	r3, r3, #7
 800c6de:	b29a      	uxth	r2, r3
 800c6e0:	89fb      	ldrh	r3, [r7, #14]
 800c6e2:	4313      	orrs	r3, r2
 800c6e4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	89fa      	ldrh	r2, [r7, #14]
 800c6ec:	60da      	str	r2, [r3, #12]
 800c6ee:	e04f      	b.n	800c790 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	77bb      	strb	r3, [r7, #30]
 800c6f4:	e04c      	b.n	800c790 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c6f6:	7ffb      	ldrb	r3, [r7, #31]
 800c6f8:	2b08      	cmp	r3, #8
 800c6fa:	d828      	bhi.n	800c74e <UART_SetConfig+0x462>
 800c6fc:	a201      	add	r2, pc, #4	@ (adr r2, 800c704 <UART_SetConfig+0x418>)
 800c6fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c702:	bf00      	nop
 800c704:	0800c729 	.word	0x0800c729
 800c708:	0800c731 	.word	0x0800c731
 800c70c:	0800c739 	.word	0x0800c739
 800c710:	0800c74f 	.word	0x0800c74f
 800c714:	0800c73f 	.word	0x0800c73f
 800c718:	0800c74f 	.word	0x0800c74f
 800c71c:	0800c74f 	.word	0x0800c74f
 800c720:	0800c74f 	.word	0x0800c74f
 800c724:	0800c747 	.word	0x0800c747
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c728:	f7fb fed6 	bl	80084d8 <HAL_RCC_GetPCLK1Freq>
 800c72c:	61b8      	str	r0, [r7, #24]
        break;
 800c72e:	e013      	b.n	800c758 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c730:	f7fb fee6 	bl	8008500 <HAL_RCC_GetPCLK2Freq>
 800c734:	61b8      	str	r0, [r7, #24]
        break;
 800c736:	e00f      	b.n	800c758 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c738:	4b1d      	ldr	r3, [pc, #116]	@ (800c7b0 <UART_SetConfig+0x4c4>)
 800c73a:	61bb      	str	r3, [r7, #24]
        break;
 800c73c:	e00c      	b.n	800c758 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c73e:	f7fb fdf9 	bl	8008334 <HAL_RCC_GetSysClockFreq>
 800c742:	61b8      	str	r0, [r7, #24]
        break;
 800c744:	e008      	b.n	800c758 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c746:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c74a:	61bb      	str	r3, [r7, #24]
        break;
 800c74c:	e004      	b.n	800c758 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800c74e:	2300      	movs	r3, #0
 800c750:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c752:	2301      	movs	r3, #1
 800c754:	77bb      	strb	r3, [r7, #30]
        break;
 800c756:	bf00      	nop
    }

    if (pclk != 0U)
 800c758:	69bb      	ldr	r3, [r7, #24]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d018      	beq.n	800c790 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	685b      	ldr	r3, [r3, #4]
 800c762:	085a      	lsrs	r2, r3, #1
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	441a      	add	r2, r3
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c770:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	2b0f      	cmp	r3, #15
 800c776:	d909      	bls.n	800c78c <UART_SetConfig+0x4a0>
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c77e:	d205      	bcs.n	800c78c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	b29a      	uxth	r2, r3
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	60da      	str	r2, [r3, #12]
 800c78a:	e001      	b.n	800c790 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c78c:	2301      	movs	r3, #1
 800c78e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2200      	movs	r2, #0
 800c794:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2200      	movs	r2, #0
 800c79a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800c79c:	7fbb      	ldrb	r3, [r7, #30]
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3720      	adds	r7, #32
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}
 800c7a6:	bf00      	nop
 800c7a8:	40007c00 	.word	0x40007c00
 800c7ac:	40023800 	.word	0x40023800
 800c7b0:	00f42400 	.word	0x00f42400

0800c7b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b083      	sub	sp, #12
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7c0:	f003 0308 	and.w	r3, r3, #8
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d00a      	beq.n	800c7de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	430a      	orrs	r2, r1
 800c7dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7e2:	f003 0301 	and.w	r3, r3, #1
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d00a      	beq.n	800c800 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	430a      	orrs	r2, r1
 800c7fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c804:	f003 0302 	and.w	r3, r3, #2
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d00a      	beq.n	800c822 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	685b      	ldr	r3, [r3, #4]
 800c812:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	430a      	orrs	r2, r1
 800c820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c826:	f003 0304 	and.w	r3, r3, #4
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d00a      	beq.n	800c844 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	430a      	orrs	r2, r1
 800c842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c848:	f003 0310 	and.w	r3, r3, #16
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d00a      	beq.n	800c866 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	689b      	ldr	r3, [r3, #8]
 800c856:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	430a      	orrs	r2, r1
 800c864:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c86a:	f003 0320 	and.w	r3, r3, #32
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d00a      	beq.n	800c888 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	689b      	ldr	r3, [r3, #8]
 800c878:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	430a      	orrs	r2, r1
 800c886:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c88c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c890:	2b00      	cmp	r3, #0
 800c892:	d01a      	beq.n	800c8ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	430a      	orrs	r2, r1
 800c8a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c8b2:	d10a      	bne.n	800c8ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	430a      	orrs	r2, r1
 800c8c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d00a      	beq.n	800c8ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	685b      	ldr	r3, [r3, #4]
 800c8dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	430a      	orrs	r2, r1
 800c8ea:	605a      	str	r2, [r3, #4]
  }
}
 800c8ec:	bf00      	nop
 800c8ee:	370c      	adds	r7, #12
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr

0800c8f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b08c      	sub	sp, #48	@ 0x30
 800c8fc:	af02      	add	r7, sp, #8
 800c8fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2200      	movs	r2, #0
 800c904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c908:	f7f6 fe20 	bl	800354c <HAL_GetTick>
 800c90c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f003 0308 	and.w	r3, r3, #8
 800c918:	2b08      	cmp	r3, #8
 800c91a:	d12e      	bne.n	800c97a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c91c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c920:	9300      	str	r3, [sp, #0]
 800c922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c924:	2200      	movs	r2, #0
 800c926:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f000 f83b 	bl	800c9a6 <UART_WaitOnFlagUntilTimeout>
 800c930:	4603      	mov	r3, r0
 800c932:	2b00      	cmp	r3, #0
 800c934:	d021      	beq.n	800c97a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	e853 3f00 	ldrex	r3, [r3]
 800c942:	60fb      	str	r3, [r7, #12]
   return(result);
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c94a:	623b      	str	r3, [r7, #32]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	461a      	mov	r2, r3
 800c952:	6a3b      	ldr	r3, [r7, #32]
 800c954:	61fb      	str	r3, [r7, #28]
 800c956:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c958:	69b9      	ldr	r1, [r7, #24]
 800c95a:	69fa      	ldr	r2, [r7, #28]
 800c95c:	e841 2300 	strex	r3, r2, [r1]
 800c960:	617b      	str	r3, [r7, #20]
   return(result);
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d1e6      	bne.n	800c936 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2220      	movs	r2, #32
 800c96c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2200      	movs	r2, #0
 800c972:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c976:	2303      	movs	r3, #3
 800c978:	e011      	b.n	800c99e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2220      	movs	r2, #32
 800c97e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2220      	movs	r2, #32
 800c984:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2200      	movs	r2, #0
 800c98c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2200      	movs	r2, #0
 800c992:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2200      	movs	r2, #0
 800c998:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800c99c:	2300      	movs	r3, #0
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3728      	adds	r7, #40	@ 0x28
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}

0800c9a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c9a6:	b580      	push	{r7, lr}
 800c9a8:	b084      	sub	sp, #16
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	60f8      	str	r0, [r7, #12]
 800c9ae:	60b9      	str	r1, [r7, #8]
 800c9b0:	603b      	str	r3, [r7, #0]
 800c9b2:	4613      	mov	r3, r2
 800c9b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c9b6:	e04f      	b.n	800ca58 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c9b8:	69bb      	ldr	r3, [r7, #24]
 800c9ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9be:	d04b      	beq.n	800ca58 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c9c0:	f7f6 fdc4 	bl	800354c <HAL_GetTick>
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	1ad3      	subs	r3, r2, r3
 800c9ca:	69ba      	ldr	r2, [r7, #24]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d302      	bcc.n	800c9d6 <UART_WaitOnFlagUntilTimeout+0x30>
 800c9d0:	69bb      	ldr	r3, [r7, #24]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d101      	bne.n	800c9da <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c9d6:	2303      	movs	r3, #3
 800c9d8:	e04e      	b.n	800ca78 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f003 0304 	and.w	r3, r3, #4
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d037      	beq.n	800ca58 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	2b80      	cmp	r3, #128	@ 0x80
 800c9ec:	d034      	beq.n	800ca58 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	2b40      	cmp	r3, #64	@ 0x40
 800c9f2:	d031      	beq.n	800ca58 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	69db      	ldr	r3, [r3, #28]
 800c9fa:	f003 0308 	and.w	r3, r3, #8
 800c9fe:	2b08      	cmp	r3, #8
 800ca00:	d110      	bne.n	800ca24 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	2208      	movs	r2, #8
 800ca08:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ca0a:	68f8      	ldr	r0, [r7, #12]
 800ca0c:	f000 f8fe 	bl	800cc0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2208      	movs	r2, #8
 800ca14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800ca20:	2301      	movs	r3, #1
 800ca22:	e029      	b.n	800ca78 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	69db      	ldr	r3, [r3, #28]
 800ca2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ca2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ca32:	d111      	bne.n	800ca58 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ca3c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ca3e:	68f8      	ldr	r0, [r7, #12]
 800ca40:	f000 f8e4 	bl	800cc0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2220      	movs	r2, #32
 800ca48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800ca54:	2303      	movs	r3, #3
 800ca56:	e00f      	b.n	800ca78 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	69da      	ldr	r2, [r3, #28]
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	4013      	ands	r3, r2
 800ca62:	68ba      	ldr	r2, [r7, #8]
 800ca64:	429a      	cmp	r2, r3
 800ca66:	bf0c      	ite	eq
 800ca68:	2301      	moveq	r3, #1
 800ca6a:	2300      	movne	r3, #0
 800ca6c:	b2db      	uxtb	r3, r3
 800ca6e:	461a      	mov	r2, r3
 800ca70:	79fb      	ldrb	r3, [r7, #7]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d0a0      	beq.n	800c9b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ca76:	2300      	movs	r3, #0
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3710      	adds	r7, #16
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b097      	sub	sp, #92	@ 0x5c
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	60b9      	str	r1, [r7, #8]
 800ca8a:	4613      	mov	r3, r2
 800ca8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	68ba      	ldr	r2, [r7, #8]
 800ca92:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	88fa      	ldrh	r2, [r7, #6]
 800ca98:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	88fa      	ldrh	r2, [r7, #6]
 800caa0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	2200      	movs	r2, #0
 800caa8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	689b      	ldr	r3, [r3, #8]
 800caae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cab2:	d10e      	bne.n	800cad2 <UART_Start_Receive_IT+0x52>
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	691b      	ldr	r3, [r3, #16]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d105      	bne.n	800cac8 <UART_Start_Receive_IT+0x48>
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800cac2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800cac6:	e02d      	b.n	800cb24 <UART_Start_Receive_IT+0xa4>
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	22ff      	movs	r2, #255	@ 0xff
 800cacc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800cad0:	e028      	b.n	800cb24 <UART_Start_Receive_IT+0xa4>
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	689b      	ldr	r3, [r3, #8]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d10d      	bne.n	800caf6 <UART_Start_Receive_IT+0x76>
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	691b      	ldr	r3, [r3, #16]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d104      	bne.n	800caec <UART_Start_Receive_IT+0x6c>
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	22ff      	movs	r2, #255	@ 0xff
 800cae6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800caea:	e01b      	b.n	800cb24 <UART_Start_Receive_IT+0xa4>
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	227f      	movs	r2, #127	@ 0x7f
 800caf0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800caf4:	e016      	b.n	800cb24 <UART_Start_Receive_IT+0xa4>
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	689b      	ldr	r3, [r3, #8]
 800cafa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cafe:	d10d      	bne.n	800cb1c <UART_Start_Receive_IT+0x9c>
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	691b      	ldr	r3, [r3, #16]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d104      	bne.n	800cb12 <UART_Start_Receive_IT+0x92>
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	227f      	movs	r2, #127	@ 0x7f
 800cb0c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800cb10:	e008      	b.n	800cb24 <UART_Start_Receive_IT+0xa4>
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	223f      	movs	r2, #63	@ 0x3f
 800cb16:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800cb1a:	e003      	b.n	800cb24 <UART_Start_Receive_IT+0xa4>
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2200      	movs	r2, #0
 800cb28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	2222      	movs	r2, #34	@ 0x22
 800cb30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	3308      	adds	r3, #8
 800cb3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb3e:	e853 3f00 	ldrex	r3, [r3]
 800cb42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cb44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb46:	f043 0301 	orr.w	r3, r3, #1
 800cb4a:	657b      	str	r3, [r7, #84]	@ 0x54
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	3308      	adds	r3, #8
 800cb52:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cb54:	64ba      	str	r2, [r7, #72]	@ 0x48
 800cb56:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb58:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cb5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb5c:	e841 2300 	strex	r3, r2, [r1]
 800cb60:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800cb62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d1e5      	bne.n	800cb34 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb70:	d107      	bne.n	800cb82 <UART_Start_Receive_IT+0x102>
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	691b      	ldr	r3, [r3, #16]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d103      	bne.n	800cb82 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	4a21      	ldr	r2, [pc, #132]	@ (800cc04 <UART_Start_Receive_IT+0x184>)
 800cb7e:	669a      	str	r2, [r3, #104]	@ 0x68
 800cb80:	e002      	b.n	800cb88 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	4a20      	ldr	r2, [pc, #128]	@ (800cc08 <UART_Start_Receive_IT+0x188>)
 800cb86:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	691b      	ldr	r3, [r3, #16]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d019      	beq.n	800cbc4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb98:	e853 3f00 	ldrex	r3, [r3]
 800cb9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cb9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cba0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800cba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	461a      	mov	r2, r3
 800cbac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbae:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbb0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbb2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cbb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cbb6:	e841 2300 	strex	r3, r2, [r1]
 800cbba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800cbbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d1e6      	bne.n	800cb90 <UART_Start_Receive_IT+0x110>
 800cbc2:	e018      	b.n	800cbf6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	e853 3f00 	ldrex	r3, [r3]
 800cbd0:	613b      	str	r3, [r7, #16]
   return(result);
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	f043 0320 	orr.w	r3, r3, #32
 800cbd8:	653b      	str	r3, [r7, #80]	@ 0x50
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	461a      	mov	r2, r3
 800cbe0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbe2:	623b      	str	r3, [r7, #32]
 800cbe4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbe6:	69f9      	ldr	r1, [r7, #28]
 800cbe8:	6a3a      	ldr	r2, [r7, #32]
 800cbea:	e841 2300 	strex	r3, r2, [r1]
 800cbee:	61bb      	str	r3, [r7, #24]
   return(result);
 800cbf0:	69bb      	ldr	r3, [r7, #24]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d1e6      	bne.n	800cbc4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800cbf6:	2300      	movs	r3, #0
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	375c      	adds	r7, #92	@ 0x5c
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr
 800cc04:	0800ce7d 	.word	0x0800ce7d
 800cc08:	0800ccd5 	.word	0x0800ccd5

0800cc0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b095      	sub	sp, #84	@ 0x54
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc1c:	e853 3f00 	ldrex	r3, [r3]
 800cc20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cc22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cc28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	461a      	mov	r2, r3
 800cc30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc32:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc34:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cc38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cc3a:	e841 2300 	strex	r3, r2, [r1]
 800cc3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cc40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d1e6      	bne.n	800cc14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	3308      	adds	r3, #8
 800cc4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc4e:	6a3b      	ldr	r3, [r7, #32]
 800cc50:	e853 3f00 	ldrex	r3, [r3]
 800cc54:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc56:	69fb      	ldr	r3, [r7, #28]
 800cc58:	f023 0301 	bic.w	r3, r3, #1
 800cc5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	3308      	adds	r3, #8
 800cc64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cc66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cc68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cc6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc6e:	e841 2300 	strex	r3, r2, [r1]
 800cc72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cc74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d1e5      	bne.n	800cc46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cc7e:	2b01      	cmp	r3, #1
 800cc80:	d118      	bne.n	800ccb4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	e853 3f00 	ldrex	r3, [r3]
 800cc8e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	f023 0310 	bic.w	r3, r3, #16
 800cc96:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cca0:	61bb      	str	r3, [r7, #24]
 800cca2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cca4:	6979      	ldr	r1, [r7, #20]
 800cca6:	69ba      	ldr	r2, [r7, #24]
 800cca8:	e841 2300 	strex	r3, r2, [r1]
 800ccac:	613b      	str	r3, [r7, #16]
   return(result);
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d1e6      	bne.n	800cc82 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2220      	movs	r2, #32
 800ccb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ccc8:	bf00      	nop
 800ccca:	3754      	adds	r7, #84	@ 0x54
 800cccc:	46bd      	mov	sp, r7
 800ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd2:	4770      	bx	lr

0800ccd4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b09c      	sub	sp, #112	@ 0x70
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cce2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ccec:	2b22      	cmp	r3, #34	@ 0x22
 800ccee:	f040 80b9 	bne.w	800ce64 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccf8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ccfc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800cd00:	b2d9      	uxtb	r1, r3
 800cd02:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800cd06:	b2da      	uxtb	r2, r3
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd0c:	400a      	ands	r2, r1
 800cd0e:	b2d2      	uxtb	r2, r2
 800cd10:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd16:	1c5a      	adds	r2, r3, #1
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cd22:	b29b      	uxth	r3, r3
 800cd24:	3b01      	subs	r3, #1
 800cd26:	b29a      	uxth	r2, r3
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	f040 809c 	bne.w	800ce74 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd44:	e853 3f00 	ldrex	r3, [r3]
 800cd48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cd4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cd50:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	461a      	mov	r2, r3
 800cd58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cd5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cd5c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cd60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cd62:	e841 2300 	strex	r3, r2, [r1]
 800cd66:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cd68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d1e6      	bne.n	800cd3c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	3308      	adds	r3, #8
 800cd74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd78:	e853 3f00 	ldrex	r3, [r3]
 800cd7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cd7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd80:	f023 0301 	bic.w	r3, r3, #1
 800cd84:	667b      	str	r3, [r7, #100]	@ 0x64
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	3308      	adds	r3, #8
 800cd8c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800cd8e:	647a      	str	r2, [r7, #68]	@ 0x44
 800cd90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cd94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cd96:	e841 2300 	strex	r3, r2, [r1]
 800cd9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cd9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d1e5      	bne.n	800cd6e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2220      	movs	r2, #32
 800cda6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2200      	movs	r2, #0
 800cdae:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d018      	beq.n	800cdf6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdcc:	e853 3f00 	ldrex	r3, [r3]
 800cdd0:	623b      	str	r3, [r7, #32]
   return(result);
 800cdd2:	6a3b      	ldr	r3, [r7, #32]
 800cdd4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cdd8:	663b      	str	r3, [r7, #96]	@ 0x60
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	461a      	mov	r2, r3
 800cde0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cde2:	633b      	str	r3, [r7, #48]	@ 0x30
 800cde4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cde6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cde8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cdea:	e841 2300 	strex	r3, r2, [r1]
 800cdee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cdf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d1e6      	bne.n	800cdc4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	d12e      	bne.n	800ce5c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2200      	movs	r2, #0
 800ce02:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce0a:	693b      	ldr	r3, [r7, #16]
 800ce0c:	e853 3f00 	ldrex	r3, [r3]
 800ce10:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	f023 0310 	bic.w	r3, r3, #16
 800ce18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	461a      	mov	r2, r3
 800ce20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ce22:	61fb      	str	r3, [r7, #28]
 800ce24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce26:	69b9      	ldr	r1, [r7, #24]
 800ce28:	69fa      	ldr	r2, [r7, #28]
 800ce2a:	e841 2300 	strex	r3, r2, [r1]
 800ce2e:	617b      	str	r3, [r7, #20]
   return(result);
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d1e6      	bne.n	800ce04 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	69db      	ldr	r3, [r3, #28]
 800ce3c:	f003 0310 	and.w	r3, r3, #16
 800ce40:	2b10      	cmp	r3, #16
 800ce42:	d103      	bne.n	800ce4c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2210      	movs	r2, #16
 800ce4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ce52:	4619      	mov	r1, r3
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f7ff fa3c 	bl	800c2d2 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ce5a:	e00b      	b.n	800ce74 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f7f6 fa4d 	bl	80032fc <HAL_UART_RxCpltCallback>
}
 800ce62:	e007      	b.n	800ce74 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	699a      	ldr	r2, [r3, #24]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f042 0208 	orr.w	r2, r2, #8
 800ce72:	619a      	str	r2, [r3, #24]
}
 800ce74:	bf00      	nop
 800ce76:	3770      	adds	r7, #112	@ 0x70
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b09c      	sub	sp, #112	@ 0x70
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ce8a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce94:	2b22      	cmp	r3, #34	@ 0x22
 800ce96:	f040 80b9 	bne.w	800d00c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cea0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cea8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ceaa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800ceae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ceb2:	4013      	ands	r3, r2
 800ceb4:	b29a      	uxth	r2, r3
 800ceb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ceb8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cebe:	1c9a      	adds	r2, r3, #2
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ceca:	b29b      	uxth	r3, r3
 800cecc:	3b01      	subs	r3, #1
 800cece:	b29a      	uxth	r2, r3
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cedc:	b29b      	uxth	r3, r3
 800cede:	2b00      	cmp	r3, #0
 800cee0:	f040 809c 	bne.w	800d01c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ceec:	e853 3f00 	ldrex	r3, [r3]
 800cef0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800cef2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cef4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cef8:	667b      	str	r3, [r7, #100]	@ 0x64
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	461a      	mov	r2, r3
 800cf00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf02:	657b      	str	r3, [r7, #84]	@ 0x54
 800cf04:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf06:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cf08:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cf0a:	e841 2300 	strex	r3, r2, [r1]
 800cf0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800cf10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d1e6      	bne.n	800cee4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	3308      	adds	r3, #8
 800cf1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf20:	e853 3f00 	ldrex	r3, [r3]
 800cf24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cf26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf28:	f023 0301 	bic.w	r3, r3, #1
 800cf2c:	663b      	str	r3, [r7, #96]	@ 0x60
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	3308      	adds	r3, #8
 800cf34:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cf36:	643a      	str	r2, [r7, #64]	@ 0x40
 800cf38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cf3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cf3e:	e841 2300 	strex	r3, r2, [r1]
 800cf42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cf44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d1e5      	bne.n	800cf16 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2220      	movs	r2, #32
 800cf4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2200      	movs	r2, #0
 800cf56:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d018      	beq.n	800cf9e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf72:	6a3b      	ldr	r3, [r7, #32]
 800cf74:	e853 3f00 	ldrex	r3, [r3]
 800cf78:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf7a:	69fb      	ldr	r3, [r7, #28]
 800cf7c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cf80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	461a      	mov	r2, r3
 800cf88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cf8c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cf90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf92:	e841 2300 	strex	r3, r2, [r1]
 800cf96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cf98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d1e6      	bne.n	800cf6c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cfa2:	2b01      	cmp	r3, #1
 800cfa4:	d12e      	bne.n	800d004 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	e853 3f00 	ldrex	r3, [r3]
 800cfb8:	60bb      	str	r3, [r7, #8]
   return(result);
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	f023 0310 	bic.w	r3, r3, #16
 800cfc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cfca:	61bb      	str	r3, [r7, #24]
 800cfcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfce:	6979      	ldr	r1, [r7, #20]
 800cfd0:	69ba      	ldr	r2, [r7, #24]
 800cfd2:	e841 2300 	strex	r3, r2, [r1]
 800cfd6:	613b      	str	r3, [r7, #16]
   return(result);
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d1e6      	bne.n	800cfac <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	69db      	ldr	r3, [r3, #28]
 800cfe4:	f003 0310 	and.w	r3, r3, #16
 800cfe8:	2b10      	cmp	r3, #16
 800cfea:	d103      	bne.n	800cff4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	2210      	movs	r2, #16
 800cff2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800cffa:	4619      	mov	r1, r3
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f7ff f968 	bl	800c2d2 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d002:	e00b      	b.n	800d01c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f7f6 f979 	bl	80032fc <HAL_UART_RxCpltCallback>
}
 800d00a:	e007      	b.n	800d01c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	699a      	ldr	r2, [r3, #24]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f042 0208 	orr.w	r2, r2, #8
 800d01a:	619a      	str	r2, [r3, #24]
}
 800d01c:	bf00      	nop
 800d01e:	3770      	adds	r7, #112	@ 0x70
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800d024:	b480      	push	{r7}
 800d026:	b083      	sub	sp, #12
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d121      	bne.n	800d07a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681a      	ldr	r2, [r3, #0]
 800d03a:	4b27      	ldr	r3, [pc, #156]	@ (800d0d8 <FMC_SDRAM_Init+0xb4>)
 800d03c:	4013      	ands	r3, r2
 800d03e:	683a      	ldr	r2, [r7, #0]
 800d040:	6851      	ldr	r1, [r2, #4]
 800d042:	683a      	ldr	r2, [r7, #0]
 800d044:	6892      	ldr	r2, [r2, #8]
 800d046:	4311      	orrs	r1, r2
 800d048:	683a      	ldr	r2, [r7, #0]
 800d04a:	68d2      	ldr	r2, [r2, #12]
 800d04c:	4311      	orrs	r1, r2
 800d04e:	683a      	ldr	r2, [r7, #0]
 800d050:	6912      	ldr	r2, [r2, #16]
 800d052:	4311      	orrs	r1, r2
 800d054:	683a      	ldr	r2, [r7, #0]
 800d056:	6952      	ldr	r2, [r2, #20]
 800d058:	4311      	orrs	r1, r2
 800d05a:	683a      	ldr	r2, [r7, #0]
 800d05c:	6992      	ldr	r2, [r2, #24]
 800d05e:	4311      	orrs	r1, r2
 800d060:	683a      	ldr	r2, [r7, #0]
 800d062:	69d2      	ldr	r2, [r2, #28]
 800d064:	4311      	orrs	r1, r2
 800d066:	683a      	ldr	r2, [r7, #0]
 800d068:	6a12      	ldr	r2, [r2, #32]
 800d06a:	4311      	orrs	r1, r2
 800d06c:	683a      	ldr	r2, [r7, #0]
 800d06e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d070:	430a      	orrs	r2, r1
 800d072:	431a      	orrs	r2, r3
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	601a      	str	r2, [r3, #0]
 800d078:	e026      	b.n	800d0c8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	69d9      	ldr	r1, [r3, #28]
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	6a1b      	ldr	r3, [r3, #32]
 800d08a:	4319      	orrs	r1, r3
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d090:	430b      	orrs	r3, r1
 800d092:	431a      	orrs	r2, r3
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	685a      	ldr	r2, [r3, #4]
 800d09c:	4b0e      	ldr	r3, [pc, #56]	@ (800d0d8 <FMC_SDRAM_Init+0xb4>)
 800d09e:	4013      	ands	r3, r2
 800d0a0:	683a      	ldr	r2, [r7, #0]
 800d0a2:	6851      	ldr	r1, [r2, #4]
 800d0a4:	683a      	ldr	r2, [r7, #0]
 800d0a6:	6892      	ldr	r2, [r2, #8]
 800d0a8:	4311      	orrs	r1, r2
 800d0aa:	683a      	ldr	r2, [r7, #0]
 800d0ac:	68d2      	ldr	r2, [r2, #12]
 800d0ae:	4311      	orrs	r1, r2
 800d0b0:	683a      	ldr	r2, [r7, #0]
 800d0b2:	6912      	ldr	r2, [r2, #16]
 800d0b4:	4311      	orrs	r1, r2
 800d0b6:	683a      	ldr	r2, [r7, #0]
 800d0b8:	6952      	ldr	r2, [r2, #20]
 800d0ba:	4311      	orrs	r1, r2
 800d0bc:	683a      	ldr	r2, [r7, #0]
 800d0be:	6992      	ldr	r2, [r2, #24]
 800d0c0:	430a      	orrs	r2, r1
 800d0c2:	431a      	orrs	r2, r3
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800d0c8:	2300      	movs	r3, #0
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	370c      	adds	r7, #12
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d4:	4770      	bx	lr
 800d0d6:	bf00      	nop
 800d0d8:	ffff8000 	.word	0xffff8000

0800d0dc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b085      	sub	sp, #20
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	60f8      	str	r0, [r7, #12]
 800d0e4:	60b9      	str	r1, [r7, #8]
 800d0e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d128      	bne.n	800d140 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	689b      	ldr	r3, [r3, #8]
 800d0f2:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	1e59      	subs	r1, r3, #1
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	3b01      	subs	r3, #1
 800d102:	011b      	lsls	r3, r3, #4
 800d104:	4319      	orrs	r1, r3
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	689b      	ldr	r3, [r3, #8]
 800d10a:	3b01      	subs	r3, #1
 800d10c:	021b      	lsls	r3, r3, #8
 800d10e:	4319      	orrs	r1, r3
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	68db      	ldr	r3, [r3, #12]
 800d114:	3b01      	subs	r3, #1
 800d116:	031b      	lsls	r3, r3, #12
 800d118:	4319      	orrs	r1, r3
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	691b      	ldr	r3, [r3, #16]
 800d11e:	3b01      	subs	r3, #1
 800d120:	041b      	lsls	r3, r3, #16
 800d122:	4319      	orrs	r1, r3
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	695b      	ldr	r3, [r3, #20]
 800d128:	3b01      	subs	r3, #1
 800d12a:	051b      	lsls	r3, r3, #20
 800d12c:	4319      	orrs	r1, r3
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	699b      	ldr	r3, [r3, #24]
 800d132:	3b01      	subs	r3, #1
 800d134:	061b      	lsls	r3, r3, #24
 800d136:	430b      	orrs	r3, r1
 800d138:	431a      	orrs	r2, r3
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	609a      	str	r2, [r3, #8]
 800d13e:	e02d      	b.n	800d19c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	689a      	ldr	r2, [r3, #8]
 800d144:	4b19      	ldr	r3, [pc, #100]	@ (800d1ac <FMC_SDRAM_Timing_Init+0xd0>)
 800d146:	4013      	ands	r3, r2
 800d148:	68ba      	ldr	r2, [r7, #8]
 800d14a:	68d2      	ldr	r2, [r2, #12]
 800d14c:	3a01      	subs	r2, #1
 800d14e:	0311      	lsls	r1, r2, #12
 800d150:	68ba      	ldr	r2, [r7, #8]
 800d152:	6952      	ldr	r2, [r2, #20]
 800d154:	3a01      	subs	r2, #1
 800d156:	0512      	lsls	r2, r2, #20
 800d158:	430a      	orrs	r2, r1
 800d15a:	431a      	orrs	r2, r3
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	68db      	ldr	r3, [r3, #12]
 800d164:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	1e59      	subs	r1, r3, #1
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	3b01      	subs	r3, #1
 800d174:	011b      	lsls	r3, r3, #4
 800d176:	4319      	orrs	r1, r3
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	689b      	ldr	r3, [r3, #8]
 800d17c:	3b01      	subs	r3, #1
 800d17e:	021b      	lsls	r3, r3, #8
 800d180:	4319      	orrs	r1, r3
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	691b      	ldr	r3, [r3, #16]
 800d186:	3b01      	subs	r3, #1
 800d188:	041b      	lsls	r3, r3, #16
 800d18a:	4319      	orrs	r1, r3
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	699b      	ldr	r3, [r3, #24]
 800d190:	3b01      	subs	r3, #1
 800d192:	061b      	lsls	r3, r3, #24
 800d194:	430b      	orrs	r3, r1
 800d196:	431a      	orrs	r2, r3
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800d19c:	2300      	movs	r3, #0
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3714      	adds	r7, #20
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a8:	4770      	bx	lr
 800d1aa:	bf00      	nop
 800d1ac:	ff0f0fff 	.word	0xff0f0fff

0800d1b0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d1b0:	b084      	sub	sp, #16
 800d1b2:	b480      	push	{r7}
 800d1b4:	b085      	sub	sp, #20
 800d1b6:	af00      	add	r7, sp, #0
 800d1b8:	6078      	str	r0, [r7, #4]
 800d1ba:	f107 001c 	add.w	r0, r7, #28
 800d1be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d1c6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d1c8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d1ca:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800d1ce:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800d1d2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d1d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800d1d6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800d1da:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d1dc:	68fa      	ldr	r2, [r7, #12]
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	685a      	ldr	r2, [r3, #4]
 800d1e6:	4b07      	ldr	r3, [pc, #28]	@ (800d204 <SDMMC_Init+0x54>)
 800d1e8:	4013      	ands	r3, r2
 800d1ea:	68fa      	ldr	r2, [r7, #12]
 800d1ec:	431a      	orrs	r2, r3
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d1f2:	2300      	movs	r3, #0
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3714      	adds	r7, #20
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fe:	b004      	add	sp, #16
 800d200:	4770      	bx	lr
 800d202:	bf00      	nop
 800d204:	ffff8100 	.word	0xffff8100

0800d208 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d208:	b480      	push	{r7}
 800d20a:	b083      	sub	sp, #12
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800d216:	4618      	mov	r0, r3
 800d218:	370c      	adds	r7, #12
 800d21a:	46bd      	mov	sp, r7
 800d21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d220:	4770      	bx	lr

0800d222 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800d222:	b480      	push	{r7}
 800d224:	b083      	sub	sp, #12
 800d226:	af00      	add	r7, sp, #0
 800d228:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2203      	movs	r2, #3
 800d22e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d230:	2300      	movs	r3, #0
}
 800d232:	4618      	mov	r0, r3
 800d234:	370c      	adds	r7, #12
 800d236:	46bd      	mov	sp, r7
 800d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23c:	4770      	bx	lr

0800d23e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800d23e:	b480      	push	{r7}
 800d240:	b083      	sub	sp, #12
 800d242:	af00      	add	r7, sp, #0
 800d244:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	f003 0303 	and.w	r3, r3, #3
}
 800d24e:	4618      	mov	r0, r3
 800d250:	370c      	adds	r7, #12
 800d252:	46bd      	mov	sp, r7
 800d254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d258:	4770      	bx	lr
	...

0800d25c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d25c:	b480      	push	{r7}
 800d25e:	b085      	sub	sp, #20
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d266:	2300      	movs	r3, #0
 800d268:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	681a      	ldr	r2, [r3, #0]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d27a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d280:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d286:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d288:	68fa      	ldr	r2, [r7, #12]
 800d28a:	4313      	orrs	r3, r2
 800d28c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	68da      	ldr	r2, [r3, #12]
 800d292:	4b06      	ldr	r3, [pc, #24]	@ (800d2ac <SDMMC_SendCommand+0x50>)
 800d294:	4013      	ands	r3, r2
 800d296:	68fa      	ldr	r2, [r7, #12]
 800d298:	431a      	orrs	r2, r3
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d29e:	2300      	movs	r3, #0
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3714      	adds	r7, #20
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr
 800d2ac:	fffff000 	.word	0xfffff000

0800d2b0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b083      	sub	sp, #12
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	691b      	ldr	r3, [r3, #16]
 800d2bc:	b2db      	uxtb	r3, r3
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	370c      	adds	r7, #12
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c8:	4770      	bx	lr

0800d2ca <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d2ca:	b480      	push	{r7}
 800d2cc:	b085      	sub	sp, #20
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
 800d2d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	3314      	adds	r3, #20
 800d2d8:	461a      	mov	r2, r3
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	4413      	add	r3, r2
 800d2de:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	681b      	ldr	r3, [r3, #0]
}  
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3714      	adds	r7, #20
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ee:	4770      	bx	lr

0800d2f0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b085      	sub	sp, #20
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
 800d2f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	681a      	ldr	r2, [r3, #0]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	685a      	ldr	r2, [r3, #4]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d316:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d31c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d322:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d324:	68fa      	ldr	r2, [r7, #12]
 800d326:	4313      	orrs	r3, r2
 800d328:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d32e:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	431a      	orrs	r2, r3
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d33a:	2300      	movs	r3, #0

}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3714      	adds	r7, #20
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr

0800d348 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b088      	sub	sp, #32
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d356:	2310      	movs	r3, #16
 800d358:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d35a:	2340      	movs	r3, #64	@ 0x40
 800d35c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d35e:	2300      	movs	r3, #0
 800d360:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d362:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d366:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d368:	f107 0308 	add.w	r3, r7, #8
 800d36c:	4619      	mov	r1, r3
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f7ff ff74 	bl	800d25c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d374:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d378:	2110      	movs	r1, #16
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f000 fa1a 	bl	800d7b4 <SDMMC_GetCmdResp1>
 800d380:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d382:	69fb      	ldr	r3, [r7, #28]
}
 800d384:	4618      	mov	r0, r3
 800d386:	3720      	adds	r7, #32
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b088      	sub	sp, #32
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d39a:	2311      	movs	r3, #17
 800d39c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d39e:	2340      	movs	r3, #64	@ 0x40
 800d3a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d3aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3ac:	f107 0308 	add.w	r3, r7, #8
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f7ff ff52 	bl	800d25c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d3b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3bc:	2111      	movs	r1, #17
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f000 f9f8 	bl	800d7b4 <SDMMC_GetCmdResp1>
 800d3c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3c6:	69fb      	ldr	r3, [r7, #28]
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3720      	adds	r7, #32
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}

0800d3d0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b088      	sub	sp, #32
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
 800d3d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d3de:	2312      	movs	r3, #18
 800d3e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d3e2:	2340      	movs	r3, #64	@ 0x40
 800d3e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d3ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3f0:	f107 0308 	add.w	r3, r7, #8
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f7ff ff30 	bl	800d25c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d3fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d400:	2112      	movs	r1, #18
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f000 f9d6 	bl	800d7b4 <SDMMC_GetCmdResp1>
 800d408:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d40a:	69fb      	ldr	r3, [r7, #28]
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3720      	adds	r7, #32
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}

0800d414 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b088      	sub	sp, #32
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d422:	2318      	movs	r3, #24
 800d424:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d426:	2340      	movs	r3, #64	@ 0x40
 800d428:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d42a:	2300      	movs	r3, #0
 800d42c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d42e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d432:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d434:	f107 0308 	add.w	r3, r7, #8
 800d438:	4619      	mov	r1, r3
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f7ff ff0e 	bl	800d25c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d440:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d444:	2118      	movs	r1, #24
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f000 f9b4 	bl	800d7b4 <SDMMC_GetCmdResp1>
 800d44c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d44e:	69fb      	ldr	r3, [r7, #28]
}
 800d450:	4618      	mov	r0, r3
 800d452:	3720      	adds	r7, #32
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b088      	sub	sp, #32
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d466:	2319      	movs	r3, #25
 800d468:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d46a:	2340      	movs	r3, #64	@ 0x40
 800d46c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d46e:	2300      	movs	r3, #0
 800d470:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d472:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d476:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d478:	f107 0308 	add.w	r3, r7, #8
 800d47c:	4619      	mov	r1, r3
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f7ff feec 	bl	800d25c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d484:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d488:	2119      	movs	r1, #25
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f000 f992 	bl	800d7b4 <SDMMC_GetCmdResp1>
 800d490:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d492:	69fb      	ldr	r3, [r7, #28]
}
 800d494:	4618      	mov	r0, r3
 800d496:	3720      	adds	r7, #32
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b088      	sub	sp, #32
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d4a8:	230c      	movs	r3, #12
 800d4aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4ac:	2340      	movs	r3, #64	@ 0x40
 800d4ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d4b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4ba:	f107 0308 	add.w	r3, r7, #8
 800d4be:	4619      	mov	r1, r3
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f7ff fecb 	bl	800d25c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d4c6:	4a05      	ldr	r2, [pc, #20]	@ (800d4dc <SDMMC_CmdStopTransfer+0x40>)
 800d4c8:	210c      	movs	r1, #12
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f000 f972 	bl	800d7b4 <SDMMC_GetCmdResp1>
 800d4d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4d2:	69fb      	ldr	r3, [r7, #28]
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3720      	adds	r7, #32
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}
 800d4dc:	05f5e100 	.word	0x05f5e100

0800d4e0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b08a      	sub	sp, #40	@ 0x28
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	60f8      	str	r0, [r7, #12]
 800d4e8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d4f0:	2307      	movs	r3, #7
 800d4f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4f4:	2340      	movs	r3, #64	@ 0x40
 800d4f6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d500:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d502:	f107 0310 	add.w	r3, r7, #16
 800d506:	4619      	mov	r1, r3
 800d508:	68f8      	ldr	r0, [r7, #12]
 800d50a:	f7ff fea7 	bl	800d25c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d50e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d512:	2107      	movs	r1, #7
 800d514:	68f8      	ldr	r0, [r7, #12]
 800d516:	f000 f94d 	bl	800d7b4 <SDMMC_GetCmdResp1>
 800d51a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800d51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3728      	adds	r7, #40	@ 0x28
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}

0800d526 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d526:	b580      	push	{r7, lr}
 800d528:	b088      	sub	sp, #32
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d52e:	2300      	movs	r3, #0
 800d530:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d532:	2300      	movs	r3, #0
 800d534:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d536:	2300      	movs	r3, #0
 800d538:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d53a:	2300      	movs	r3, #0
 800d53c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d53e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d542:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d544:	f107 0308 	add.w	r3, r7, #8
 800d548:	4619      	mov	r1, r3
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f7ff fe86 	bl	800d25c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f000 fb67 	bl	800dc24 <SDMMC_GetCmdError>
 800d556:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d558:	69fb      	ldr	r3, [r7, #28]
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3720      	adds	r7, #32
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}

0800d562 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d562:	b580      	push	{r7, lr}
 800d564:	b088      	sub	sp, #32
 800d566:	af00      	add	r7, sp, #0
 800d568:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d56a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800d56e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d570:	2308      	movs	r3, #8
 800d572:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d574:	2340      	movs	r3, #64	@ 0x40
 800d576:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d578:	2300      	movs	r3, #0
 800d57a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d57c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d580:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d582:	f107 0308 	add.w	r3, r7, #8
 800d586:	4619      	mov	r1, r3
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f7ff fe67 	bl	800d25c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f000 fafa 	bl	800db88 <SDMMC_GetCmdResp7>
 800d594:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d596:	69fb      	ldr	r3, [r7, #28]
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3720      	adds	r7, #32
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b088      	sub	sp, #32
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d5ae:	2337      	movs	r3, #55	@ 0x37
 800d5b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5b2:	2340      	movs	r3, #64	@ 0x40
 800d5b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d5be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5c0:	f107 0308 	add.w	r3, r7, #8
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f7ff fe48 	bl	800d25c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d5cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d5d0:	2137      	movs	r1, #55	@ 0x37
 800d5d2:	6878      	ldr	r0, [r7, #4]
 800d5d4:	f000 f8ee 	bl	800d7b4 <SDMMC_GetCmdResp1>
 800d5d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5da:	69fb      	ldr	r3, [r7, #28]
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3720      	adds	r7, #32
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}

0800d5e4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b088      	sub	sp, #32
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d5ee:	683a      	ldr	r2, [r7, #0]
 800d5f0:	4b0d      	ldr	r3, [pc, #52]	@ (800d628 <SDMMC_CmdAppOperCommand+0x44>)
 800d5f2:	4313      	orrs	r3, r2
 800d5f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d5f6:	2329      	movs	r3, #41	@ 0x29
 800d5f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5fa:	2340      	movs	r3, #64	@ 0x40
 800d5fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5fe:	2300      	movs	r3, #0
 800d600:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d602:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d606:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d608:	f107 0308 	add.w	r3, r7, #8
 800d60c:	4619      	mov	r1, r3
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f7ff fe24 	bl	800d25c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f000 fa03 	bl	800da20 <SDMMC_GetCmdResp3>
 800d61a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d61c:	69fb      	ldr	r3, [r7, #28]
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3720      	adds	r7, #32
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	80100000 	.word	0x80100000

0800d62c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b088      	sub	sp, #32
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d63a:	2306      	movs	r3, #6
 800d63c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d63e:	2340      	movs	r3, #64	@ 0x40
 800d640:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d642:	2300      	movs	r3, #0
 800d644:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d646:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d64a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d64c:	f107 0308 	add.w	r3, r7, #8
 800d650:	4619      	mov	r1, r3
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f7ff fe02 	bl	800d25c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d65c:	2106      	movs	r1, #6
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f000 f8a8 	bl	800d7b4 <SDMMC_GetCmdResp1>
 800d664:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d666:	69fb      	ldr	r3, [r7, #28]
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3720      	adds	r7, #32
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b088      	sub	sp, #32
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d678:	2300      	movs	r3, #0
 800d67a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d67c:	2333      	movs	r3, #51	@ 0x33
 800d67e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d680:	2340      	movs	r3, #64	@ 0x40
 800d682:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d684:	2300      	movs	r3, #0
 800d686:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d688:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d68c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d68e:	f107 0308 	add.w	r3, r7, #8
 800d692:	4619      	mov	r1, r3
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f7ff fde1 	bl	800d25c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d69a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d69e:	2133      	movs	r1, #51	@ 0x33
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f000 f887 	bl	800d7b4 <SDMMC_GetCmdResp1>
 800d6a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6a8:	69fb      	ldr	r3, [r7, #28]
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	3720      	adds	r7, #32
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}

0800d6b2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d6b2:	b580      	push	{r7, lr}
 800d6b4:	b088      	sub	sp, #32
 800d6b6:	af00      	add	r7, sp, #0
 800d6b8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d6be:	2302      	movs	r3, #2
 800d6c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d6c2:	23c0      	movs	r3, #192	@ 0xc0
 800d6c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d6ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d6d0:	f107 0308 	add.w	r3, r7, #8
 800d6d4:	4619      	mov	r1, r3
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f7ff fdc0 	bl	800d25c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f000 f957 	bl	800d990 <SDMMC_GetCmdResp2>
 800d6e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6e4:	69fb      	ldr	r3, [r7, #28]
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3720      	adds	r7, #32
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}

0800d6ee <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d6ee:	b580      	push	{r7, lr}
 800d6f0:	b088      	sub	sp, #32
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	6078      	str	r0, [r7, #4]
 800d6f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d6fc:	2309      	movs	r3, #9
 800d6fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d700:	23c0      	movs	r3, #192	@ 0xc0
 800d702:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d704:	2300      	movs	r3, #0
 800d706:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d708:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d70c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d70e:	f107 0308 	add.w	r3, r7, #8
 800d712:	4619      	mov	r1, r3
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f7ff fda1 	bl	800d25c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f000 f938 	bl	800d990 <SDMMC_GetCmdResp2>
 800d720:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d722:	69fb      	ldr	r3, [r7, #28]
}
 800d724:	4618      	mov	r0, r3
 800d726:	3720      	adds	r7, #32
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b088      	sub	sp, #32
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d736:	2300      	movs	r3, #0
 800d738:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d73a:	2303      	movs	r3, #3
 800d73c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d73e:	2340      	movs	r3, #64	@ 0x40
 800d740:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d742:	2300      	movs	r3, #0
 800d744:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d746:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d74a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d74c:	f107 0308 	add.w	r3, r7, #8
 800d750:	4619      	mov	r1, r3
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f7ff fd82 	bl	800d25c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d758:	683a      	ldr	r2, [r7, #0]
 800d75a:	2103      	movs	r1, #3
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f000 f99d 	bl	800da9c <SDMMC_GetCmdResp6>
 800d762:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d764:	69fb      	ldr	r3, [r7, #28]
}
 800d766:	4618      	mov	r0, r3
 800d768:	3720      	adds	r7, #32
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}

0800d76e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d76e:	b580      	push	{r7, lr}
 800d770:	b088      	sub	sp, #32
 800d772:	af00      	add	r7, sp, #0
 800d774:	6078      	str	r0, [r7, #4]
 800d776:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d77c:	230d      	movs	r3, #13
 800d77e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d780:	2340      	movs	r3, #64	@ 0x40
 800d782:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d784:	2300      	movs	r3, #0
 800d786:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d788:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d78c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d78e:	f107 0308 	add.w	r3, r7, #8
 800d792:	4619      	mov	r1, r3
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f7ff fd61 	bl	800d25c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d79a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d79e:	210d      	movs	r1, #13
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f000 f807 	bl	800d7b4 <SDMMC_GetCmdResp1>
 800d7a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7a8:	69fb      	ldr	r3, [r7, #28]
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3720      	adds	r7, #32
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
	...

0800d7b4 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b088      	sub	sp, #32
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	60f8      	str	r0, [r7, #12]
 800d7bc:	460b      	mov	r3, r1
 800d7be:	607a      	str	r2, [r7, #4]
 800d7c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d7c2:	4b70      	ldr	r3, [pc, #448]	@ (800d984 <SDMMC_GetCmdResp1+0x1d0>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	4a70      	ldr	r2, [pc, #448]	@ (800d988 <SDMMC_GetCmdResp1+0x1d4>)
 800d7c8:	fba2 2303 	umull	r2, r3, r2, r3
 800d7cc:	0a5a      	lsrs	r2, r3, #9
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	fb02 f303 	mul.w	r3, r2, r3
 800d7d4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d7d6:	69fb      	ldr	r3, [r7, #28]
 800d7d8:	1e5a      	subs	r2, r3, #1
 800d7da:	61fa      	str	r2, [r7, #28]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d102      	bne.n	800d7e6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d7e0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d7e4:	e0c9      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7ea:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d7ec:	69bb      	ldr	r3, [r7, #24]
 800d7ee:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d0ef      	beq.n	800d7d6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d7f6:	69bb      	ldr	r3, [r7, #24]
 800d7f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d1ea      	bne.n	800d7d6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d804:	f003 0304 	and.w	r3, r3, #4
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d004      	beq.n	800d816 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	2204      	movs	r2, #4
 800d810:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d812:	2304      	movs	r3, #4
 800d814:	e0b1      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d81a:	f003 0301 	and.w	r3, r3, #1
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d004      	beq.n	800d82c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	2201      	movs	r2, #1
 800d826:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d828:	2301      	movs	r3, #1
 800d82a:	e0a6      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	22c5      	movs	r2, #197	@ 0xc5
 800d830:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d832:	68f8      	ldr	r0, [r7, #12]
 800d834:	f7ff fd3c 	bl	800d2b0 <SDMMC_GetCommandResponse>
 800d838:	4603      	mov	r3, r0
 800d83a:	461a      	mov	r2, r3
 800d83c:	7afb      	ldrb	r3, [r7, #11]
 800d83e:	4293      	cmp	r3, r2
 800d840:	d001      	beq.n	800d846 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d842:	2301      	movs	r3, #1
 800d844:	e099      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d846:	2100      	movs	r1, #0
 800d848:	68f8      	ldr	r0, [r7, #12]
 800d84a:	f7ff fd3e 	bl	800d2ca <SDMMC_GetResponse>
 800d84e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d850:	697a      	ldr	r2, [r7, #20]
 800d852:	4b4e      	ldr	r3, [pc, #312]	@ (800d98c <SDMMC_GetCmdResp1+0x1d8>)
 800d854:	4013      	ands	r3, r2
 800d856:	2b00      	cmp	r3, #0
 800d858:	d101      	bne.n	800d85e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d85a:	2300      	movs	r3, #0
 800d85c:	e08d      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	2b00      	cmp	r3, #0
 800d862:	da02      	bge.n	800d86a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d864:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d868:	e087      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d870:	2b00      	cmp	r3, #0
 800d872:	d001      	beq.n	800d878 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d874:	2340      	movs	r3, #64	@ 0x40
 800d876:	e080      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d001      	beq.n	800d886 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d882:	2380      	movs	r3, #128	@ 0x80
 800d884:	e079      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d002      	beq.n	800d896 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d890:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d894:	e071      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d002      	beq.n	800d8a6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d8a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d8a4:	e069      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d002      	beq.n	800d8b6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d8b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d8b4:	e061      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d002      	beq.n	800d8c6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d8c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d8c4:	e059      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d002      	beq.n	800d8d6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d8d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d8d4:	e051      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d002      	beq.n	800d8e6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d8e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d8e4:	e049      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d002      	beq.n	800d8f6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d8f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d8f4:	e041      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d002      	beq.n	800d906 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d900:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d904:	e039      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d002      	beq.n	800d916 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d910:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d914:	e031      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d002      	beq.n	800d926 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d920:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d924:	e029      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d002      	beq.n	800d936 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d930:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d934:	e021      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d002      	beq.n	800d946 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d940:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d944:	e019      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d002      	beq.n	800d956 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d950:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d954:	e011      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d002      	beq.n	800d966 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d960:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d964:	e009      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	f003 0308 	and.w	r3, r3, #8
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d002      	beq.n	800d976 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d970:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800d974:	e001      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d976:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3720      	adds	r7, #32
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}
 800d982:	bf00      	nop
 800d984:	20000000 	.word	0x20000000
 800d988:	10624dd3 	.word	0x10624dd3
 800d98c:	fdffe008 	.word	0xfdffe008

0800d990 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d990:	b480      	push	{r7}
 800d992:	b085      	sub	sp, #20
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d998:	4b1f      	ldr	r3, [pc, #124]	@ (800da18 <SDMMC_GetCmdResp2+0x88>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	4a1f      	ldr	r2, [pc, #124]	@ (800da1c <SDMMC_GetCmdResp2+0x8c>)
 800d99e:	fba2 2303 	umull	r2, r3, r2, r3
 800d9a2:	0a5b      	lsrs	r3, r3, #9
 800d9a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d9a8:	fb02 f303 	mul.w	r3, r2, r3
 800d9ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	1e5a      	subs	r2, r3, #1
 800d9b2:	60fa      	str	r2, [r7, #12]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d102      	bne.n	800d9be <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d9b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d9bc:	e026      	b.n	800da0c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d0ef      	beq.n	800d9ae <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d1ea      	bne.n	800d9ae <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9dc:	f003 0304 	and.w	r3, r3, #4
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d004      	beq.n	800d9ee <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2204      	movs	r2, #4
 800d9e8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d9ea:	2304      	movs	r3, #4
 800d9ec:	e00e      	b.n	800da0c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9f2:	f003 0301 	and.w	r3, r3, #1
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d004      	beq.n	800da04 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da00:	2301      	movs	r3, #1
 800da02:	e003      	b.n	800da0c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	22c5      	movs	r2, #197	@ 0xc5
 800da08:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800da0a:	2300      	movs	r3, #0
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3714      	adds	r7, #20
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr
 800da18:	20000000 	.word	0x20000000
 800da1c:	10624dd3 	.word	0x10624dd3

0800da20 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800da20:	b480      	push	{r7}
 800da22:	b085      	sub	sp, #20
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800da28:	4b1a      	ldr	r3, [pc, #104]	@ (800da94 <SDMMC_GetCmdResp3+0x74>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4a1a      	ldr	r2, [pc, #104]	@ (800da98 <SDMMC_GetCmdResp3+0x78>)
 800da2e:	fba2 2303 	umull	r2, r3, r2, r3
 800da32:	0a5b      	lsrs	r3, r3, #9
 800da34:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da38:	fb02 f303 	mul.w	r3, r2, r3
 800da3c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	1e5a      	subs	r2, r3, #1
 800da42:	60fa      	str	r2, [r7, #12]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d102      	bne.n	800da4e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800da48:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800da4c:	e01b      	b.n	800da86 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da52:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d0ef      	beq.n	800da3e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da64:	2b00      	cmp	r3, #0
 800da66:	d1ea      	bne.n	800da3e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da6c:	f003 0304 	and.w	r3, r3, #4
 800da70:	2b00      	cmp	r3, #0
 800da72:	d004      	beq.n	800da7e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2204      	movs	r2, #4
 800da78:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800da7a:	2304      	movs	r3, #4
 800da7c:	e003      	b.n	800da86 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	22c5      	movs	r2, #197	@ 0xc5
 800da82:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800da84:	2300      	movs	r3, #0
}
 800da86:	4618      	mov	r0, r3
 800da88:	3714      	adds	r7, #20
 800da8a:	46bd      	mov	sp, r7
 800da8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da90:	4770      	bx	lr
 800da92:	bf00      	nop
 800da94:	20000000 	.word	0x20000000
 800da98:	10624dd3 	.word	0x10624dd3

0800da9c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b088      	sub	sp, #32
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	60f8      	str	r0, [r7, #12]
 800daa4:	460b      	mov	r3, r1
 800daa6:	607a      	str	r2, [r7, #4]
 800daa8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800daaa:	4b35      	ldr	r3, [pc, #212]	@ (800db80 <SDMMC_GetCmdResp6+0xe4>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	4a35      	ldr	r2, [pc, #212]	@ (800db84 <SDMMC_GetCmdResp6+0xe8>)
 800dab0:	fba2 2303 	umull	r2, r3, r2, r3
 800dab4:	0a5b      	lsrs	r3, r3, #9
 800dab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800daba:	fb02 f303 	mul.w	r3, r2, r3
 800dabe:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800dac0:	69fb      	ldr	r3, [r7, #28]
 800dac2:	1e5a      	subs	r2, r3, #1
 800dac4:	61fa      	str	r2, [r7, #28]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d102      	bne.n	800dad0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800daca:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dace:	e052      	b.n	800db76 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dad4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dad6:	69bb      	ldr	r3, [r7, #24]
 800dad8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d0ef      	beq.n	800dac0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dae0:	69bb      	ldr	r3, [r7, #24]
 800dae2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d1ea      	bne.n	800dac0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800daee:	f003 0304 	and.w	r3, r3, #4
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d004      	beq.n	800db00 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	2204      	movs	r2, #4
 800dafa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dafc:	2304      	movs	r3, #4
 800dafe:	e03a      	b.n	800db76 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db04:	f003 0301 	and.w	r3, r3, #1
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d004      	beq.n	800db16 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	2201      	movs	r2, #1
 800db10:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db12:	2301      	movs	r3, #1
 800db14:	e02f      	b.n	800db76 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800db16:	68f8      	ldr	r0, [r7, #12]
 800db18:	f7ff fbca 	bl	800d2b0 <SDMMC_GetCommandResponse>
 800db1c:	4603      	mov	r3, r0
 800db1e:	461a      	mov	r2, r3
 800db20:	7afb      	ldrb	r3, [r7, #11]
 800db22:	4293      	cmp	r3, r2
 800db24:	d001      	beq.n	800db2a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db26:	2301      	movs	r3, #1
 800db28:	e025      	b.n	800db76 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	22c5      	movs	r2, #197	@ 0xc5
 800db2e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800db30:	2100      	movs	r1, #0
 800db32:	68f8      	ldr	r0, [r7, #12]
 800db34:	f7ff fbc9 	bl	800d2ca <SDMMC_GetResponse>
 800db38:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800db40:	2b00      	cmp	r3, #0
 800db42:	d106      	bne.n	800db52 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	0c1b      	lsrs	r3, r3, #16
 800db48:	b29a      	uxth	r2, r3
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800db4e:	2300      	movs	r3, #0
 800db50:	e011      	b.n	800db76 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d002      	beq.n	800db62 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800db5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800db60:	e009      	b.n	800db76 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d002      	beq.n	800db72 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800db6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800db70:	e001      	b.n	800db76 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800db72:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800db76:	4618      	mov	r0, r3
 800db78:	3720      	adds	r7, #32
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
 800db7e:	bf00      	nop
 800db80:	20000000 	.word	0x20000000
 800db84:	10624dd3 	.word	0x10624dd3

0800db88 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800db88:	b480      	push	{r7}
 800db8a:	b085      	sub	sp, #20
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800db90:	4b22      	ldr	r3, [pc, #136]	@ (800dc1c <SDMMC_GetCmdResp7+0x94>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	4a22      	ldr	r2, [pc, #136]	@ (800dc20 <SDMMC_GetCmdResp7+0x98>)
 800db96:	fba2 2303 	umull	r2, r3, r2, r3
 800db9a:	0a5b      	lsrs	r3, r3, #9
 800db9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dba0:	fb02 f303 	mul.w	r3, r2, r3
 800dba4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	1e5a      	subs	r2, r3, #1
 800dbaa:	60fa      	str	r2, [r7, #12]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d102      	bne.n	800dbb6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dbb0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dbb4:	e02c      	b.n	800dc10 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d0ef      	beq.n	800dba6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d1ea      	bne.n	800dba6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbd4:	f003 0304 	and.w	r3, r3, #4
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d004      	beq.n	800dbe6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2204      	movs	r2, #4
 800dbe0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dbe2:	2304      	movs	r3, #4
 800dbe4:	e014      	b.n	800dc10 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbea:	f003 0301 	and.w	r3, r3, #1
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d004      	beq.n	800dbfc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2201      	movs	r2, #1
 800dbf6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	e009      	b.n	800dc10 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d002      	beq.n	800dc0e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2240      	movs	r2, #64	@ 0x40
 800dc0c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dc0e:	2300      	movs	r3, #0
  
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	3714      	adds	r7, #20
 800dc14:	46bd      	mov	sp, r7
 800dc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1a:	4770      	bx	lr
 800dc1c:	20000000 	.word	0x20000000
 800dc20:	10624dd3 	.word	0x10624dd3

0800dc24 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b085      	sub	sp, #20
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc2c:	4b11      	ldr	r3, [pc, #68]	@ (800dc74 <SDMMC_GetCmdError+0x50>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	4a11      	ldr	r2, [pc, #68]	@ (800dc78 <SDMMC_GetCmdError+0x54>)
 800dc32:	fba2 2303 	umull	r2, r3, r2, r3
 800dc36:	0a5b      	lsrs	r3, r3, #9
 800dc38:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc3c:	fb02 f303 	mul.w	r3, r2, r3
 800dc40:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	1e5a      	subs	r2, r3, #1
 800dc46:	60fa      	str	r2, [r7, #12]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d102      	bne.n	800dc52 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc4c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dc50:	e009      	b.n	800dc66 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d0f1      	beq.n	800dc42 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	22c5      	movs	r2, #197	@ 0xc5
 800dc62:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800dc64:	2300      	movs	r3, #0
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3714      	adds	r7, #20
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc70:	4770      	bx	lr
 800dc72:	bf00      	nop
 800dc74:	20000000 	.word	0x20000000
 800dc78:	10624dd3 	.word	0x10624dd3

0800dc7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dc7c:	b084      	sub	sp, #16
 800dc7e:	b580      	push	{r7, lr}
 800dc80:	b084      	sub	sp, #16
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	6078      	str	r0, [r7, #4]
 800dc86:	f107 001c 	add.w	r0, r7, #28
 800dc8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dc8e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800dc92:	2b01      	cmp	r3, #1
 800dc94:	d121      	bne.n	800dcda <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc9a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	68da      	ldr	r2, [r3, #12]
 800dca6:	4b21      	ldr	r3, [pc, #132]	@ (800dd2c <USB_CoreInit+0xb0>)
 800dca8:	4013      	ands	r3, r2
 800dcaa:	687a      	ldr	r2, [r7, #4]
 800dcac:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	68db      	ldr	r3, [r3, #12]
 800dcb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dcba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dcbe:	2b01      	cmp	r3, #1
 800dcc0:	d105      	bne.n	800dcce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	68db      	ldr	r3, [r3, #12]
 800dcc6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f000 f9d4 	bl	800e07c <USB_CoreReset>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	73fb      	strb	r3, [r7, #15]
 800dcd8:	e010      	b.n	800dcfc <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	68db      	ldr	r3, [r3, #12]
 800dcde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f000 f9c8 	bl	800e07c <USB_CoreReset>
 800dcec:	4603      	mov	r3, r0
 800dcee:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcf4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800dcfc:	7fbb      	ldrb	r3, [r7, #30]
 800dcfe:	2b01      	cmp	r3, #1
 800dd00:	d10b      	bne.n	800dd1a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	689b      	ldr	r3, [r3, #8]
 800dd06:	f043 0206 	orr.w	r2, r3, #6
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	689b      	ldr	r3, [r3, #8]
 800dd12:	f043 0220 	orr.w	r2, r3, #32
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800dd1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3710      	adds	r7, #16
 800dd20:	46bd      	mov	sp, r7
 800dd22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dd26:	b004      	add	sp, #16
 800dd28:	4770      	bx	lr
 800dd2a:	bf00      	nop
 800dd2c:	ffbdffbf 	.word	0xffbdffbf

0800dd30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dd30:	b480      	push	{r7}
 800dd32:	b083      	sub	sp, #12
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	689b      	ldr	r3, [r3, #8]
 800dd3c:	f043 0201 	orr.w	r2, r3, #1
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dd44:	2300      	movs	r3, #0
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	370c      	adds	r7, #12
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd50:	4770      	bx	lr

0800dd52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dd52:	b480      	push	{r7}
 800dd54:	b083      	sub	sp, #12
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	689b      	ldr	r3, [r3, #8]
 800dd5e:	f023 0201 	bic.w	r2, r3, #1
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dd66:	2300      	movs	r3, #0
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	370c      	adds	r7, #12
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd72:	4770      	bx	lr

0800dd74 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b084      	sub	sp, #16
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
 800dd7c:	460b      	mov	r3, r1
 800dd7e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800dd80:	2300      	movs	r3, #0
 800dd82:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	68db      	ldr	r3, [r3, #12]
 800dd88:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dd90:	78fb      	ldrb	r3, [r7, #3]
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	d115      	bne.n	800ddc2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	68db      	ldr	r3, [r3, #12]
 800dd9a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800dda2:	200a      	movs	r0, #10
 800dda4:	f7f5 fbde 	bl	8003564 <HAL_Delay>
      ms += 10U;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	330a      	adds	r3, #10
 800ddac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f000 f956 	bl	800e060 <USB_GetMode>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	2b01      	cmp	r3, #1
 800ddb8:	d01e      	beq.n	800ddf8 <USB_SetCurrentMode+0x84>
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	2bc7      	cmp	r3, #199	@ 0xc7
 800ddbe:	d9f0      	bls.n	800dda2 <USB_SetCurrentMode+0x2e>
 800ddc0:	e01a      	b.n	800ddf8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ddc2:	78fb      	ldrb	r3, [r7, #3]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d115      	bne.n	800ddf4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	68db      	ldr	r3, [r3, #12]
 800ddcc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ddd4:	200a      	movs	r0, #10
 800ddd6:	f7f5 fbc5 	bl	8003564 <HAL_Delay>
      ms += 10U;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	330a      	adds	r3, #10
 800ddde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f000 f93d 	bl	800e060 <USB_GetMode>
 800dde6:	4603      	mov	r3, r0
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d005      	beq.n	800ddf8 <USB_SetCurrentMode+0x84>
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	2bc7      	cmp	r3, #199	@ 0xc7
 800ddf0:	d9f0      	bls.n	800ddd4 <USB_SetCurrentMode+0x60>
 800ddf2:	e001      	b.n	800ddf8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	e005      	b.n	800de04 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2bc8      	cmp	r3, #200	@ 0xc8
 800ddfc:	d101      	bne.n	800de02 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ddfe:	2301      	movs	r3, #1
 800de00:	e000      	b.n	800de04 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800de02:	2300      	movs	r3, #0
}
 800de04:	4618      	mov	r0, r3
 800de06:	3710      	adds	r7, #16
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}

0800de0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b085      	sub	sp, #20
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
 800de14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800de16:	2300      	movs	r3, #0
 800de18:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	3301      	adds	r3, #1
 800de1e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800de26:	d901      	bls.n	800de2c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800de28:	2303      	movs	r3, #3
 800de2a:	e01b      	b.n	800de64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	691b      	ldr	r3, [r3, #16]
 800de30:	2b00      	cmp	r3, #0
 800de32:	daf2      	bge.n	800de1a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800de34:	2300      	movs	r3, #0
 800de36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	019b      	lsls	r3, r3, #6
 800de3c:	f043 0220 	orr.w	r2, r3, #32
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	3301      	adds	r3, #1
 800de48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800de50:	d901      	bls.n	800de56 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800de52:	2303      	movs	r3, #3
 800de54:	e006      	b.n	800de64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	691b      	ldr	r3, [r3, #16]
 800de5a:	f003 0320 	and.w	r3, r3, #32
 800de5e:	2b20      	cmp	r3, #32
 800de60:	d0f0      	beq.n	800de44 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800de62:	2300      	movs	r3, #0
}
 800de64:	4618      	mov	r0, r3
 800de66:	3714      	adds	r7, #20
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr

0800de70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800de70:	b480      	push	{r7}
 800de72:	b085      	sub	sp, #20
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800de78:	2300      	movs	r3, #0
 800de7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	3301      	adds	r3, #1
 800de80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800de88:	d901      	bls.n	800de8e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800de8a:	2303      	movs	r3, #3
 800de8c:	e018      	b.n	800dec0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	691b      	ldr	r3, [r3, #16]
 800de92:	2b00      	cmp	r3, #0
 800de94:	daf2      	bge.n	800de7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800de96:	2300      	movs	r3, #0
 800de98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2210      	movs	r2, #16
 800de9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	3301      	adds	r3, #1
 800dea4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800deac:	d901      	bls.n	800deb2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800deae:	2303      	movs	r3, #3
 800deb0:	e006      	b.n	800dec0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	691b      	ldr	r3, [r3, #16]
 800deb6:	f003 0310 	and.w	r3, r3, #16
 800deba:	2b10      	cmp	r3, #16
 800debc:	d0f0      	beq.n	800dea0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800debe:	2300      	movs	r3, #0
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	3714      	adds	r7, #20
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr

0800decc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800decc:	b480      	push	{r7}
 800dece:	b089      	sub	sp, #36	@ 0x24
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	60f8      	str	r0, [r7, #12]
 800ded4:	60b9      	str	r1, [r7, #8]
 800ded6:	4611      	mov	r1, r2
 800ded8:	461a      	mov	r2, r3
 800deda:	460b      	mov	r3, r1
 800dedc:	71fb      	strb	r3, [r7, #7]
 800dede:	4613      	mov	r3, r2
 800dee0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800deea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800deee:	2b00      	cmp	r3, #0
 800def0:	d123      	bne.n	800df3a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800def2:	88bb      	ldrh	r3, [r7, #4]
 800def4:	3303      	adds	r3, #3
 800def6:	089b      	lsrs	r3, r3, #2
 800def8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800defa:	2300      	movs	r3, #0
 800defc:	61bb      	str	r3, [r7, #24]
 800defe:	e018      	b.n	800df32 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800df00:	79fb      	ldrb	r3, [r7, #7]
 800df02:	031a      	lsls	r2, r3, #12
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	4413      	add	r3, r2
 800df08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800df0c:	461a      	mov	r2, r3
 800df0e:	69fb      	ldr	r3, [r7, #28]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	6013      	str	r3, [r2, #0]
      pSrc++;
 800df14:	69fb      	ldr	r3, [r7, #28]
 800df16:	3301      	adds	r3, #1
 800df18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800df1a:	69fb      	ldr	r3, [r7, #28]
 800df1c:	3301      	adds	r3, #1
 800df1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800df20:	69fb      	ldr	r3, [r7, #28]
 800df22:	3301      	adds	r3, #1
 800df24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800df26:	69fb      	ldr	r3, [r7, #28]
 800df28:	3301      	adds	r3, #1
 800df2a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800df2c:	69bb      	ldr	r3, [r7, #24]
 800df2e:	3301      	adds	r3, #1
 800df30:	61bb      	str	r3, [r7, #24]
 800df32:	69ba      	ldr	r2, [r7, #24]
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	429a      	cmp	r2, r3
 800df38:	d3e2      	bcc.n	800df00 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800df3a:	2300      	movs	r3, #0
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3724      	adds	r7, #36	@ 0x24
 800df40:	46bd      	mov	sp, r7
 800df42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df46:	4770      	bx	lr

0800df48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800df48:	b480      	push	{r7}
 800df4a:	b08b      	sub	sp, #44	@ 0x2c
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	60f8      	str	r0, [r7, #12]
 800df50:	60b9      	str	r1, [r7, #8]
 800df52:	4613      	mov	r3, r2
 800df54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800df5e:	88fb      	ldrh	r3, [r7, #6]
 800df60:	089b      	lsrs	r3, r3, #2
 800df62:	b29b      	uxth	r3, r3
 800df64:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800df66:	88fb      	ldrh	r3, [r7, #6]
 800df68:	f003 0303 	and.w	r3, r3, #3
 800df6c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800df6e:	2300      	movs	r3, #0
 800df70:	623b      	str	r3, [r7, #32]
 800df72:	e014      	b.n	800df9e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800df74:	69bb      	ldr	r3, [r7, #24]
 800df76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800df7a:	681a      	ldr	r2, [r3, #0]
 800df7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df7e:	601a      	str	r2, [r3, #0]
    pDest++;
 800df80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df82:	3301      	adds	r3, #1
 800df84:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800df86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df88:	3301      	adds	r3, #1
 800df8a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800df8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df8e:	3301      	adds	r3, #1
 800df90:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800df92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df94:	3301      	adds	r3, #1
 800df96:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800df98:	6a3b      	ldr	r3, [r7, #32]
 800df9a:	3301      	adds	r3, #1
 800df9c:	623b      	str	r3, [r7, #32]
 800df9e:	6a3a      	ldr	r2, [r7, #32]
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	d3e6      	bcc.n	800df74 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800dfa6:	8bfb      	ldrh	r3, [r7, #30]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d01e      	beq.n	800dfea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800dfac:	2300      	movs	r3, #0
 800dfae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800dfb0:	69bb      	ldr	r3, [r7, #24]
 800dfb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dfb6:	461a      	mov	r2, r3
 800dfb8:	f107 0310 	add.w	r3, r7, #16
 800dfbc:	6812      	ldr	r2, [r2, #0]
 800dfbe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800dfc0:	693a      	ldr	r2, [r7, #16]
 800dfc2:	6a3b      	ldr	r3, [r7, #32]
 800dfc4:	b2db      	uxtb	r3, r3
 800dfc6:	00db      	lsls	r3, r3, #3
 800dfc8:	fa22 f303 	lsr.w	r3, r2, r3
 800dfcc:	b2da      	uxtb	r2, r3
 800dfce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfd0:	701a      	strb	r2, [r3, #0]
      i++;
 800dfd2:	6a3b      	ldr	r3, [r7, #32]
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	623b      	str	r3, [r7, #32]
      pDest++;
 800dfd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfda:	3301      	adds	r3, #1
 800dfdc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800dfde:	8bfb      	ldrh	r3, [r7, #30]
 800dfe0:	3b01      	subs	r3, #1
 800dfe2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800dfe4:	8bfb      	ldrh	r3, [r7, #30]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d1ea      	bne.n	800dfc0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800dfea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	372c      	adds	r7, #44	@ 0x2c
 800dff0:	46bd      	mov	sp, r7
 800dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff6:	4770      	bx	lr

0800dff8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800dff8:	b480      	push	{r7}
 800dffa:	b085      	sub	sp, #20
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	695b      	ldr	r3, [r3, #20]
 800e004:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	699b      	ldr	r3, [r3, #24]
 800e00a:	68fa      	ldr	r2, [r7, #12]
 800e00c:	4013      	ands	r3, r2
 800e00e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e010:	68fb      	ldr	r3, [r7, #12]
}
 800e012:	4618      	mov	r0, r3
 800e014:	3714      	adds	r7, #20
 800e016:	46bd      	mov	sp, r7
 800e018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01c:	4770      	bx	lr

0800e01e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800e01e:	b480      	push	{r7}
 800e020:	b085      	sub	sp, #20
 800e022:	af00      	add	r7, sp, #0
 800e024:	6078      	str	r0, [r7, #4]
 800e026:	460b      	mov	r3, r1
 800e028:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800e02e:	78fb      	ldrb	r3, [r7, #3]
 800e030:	015a      	lsls	r2, r3, #5
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	4413      	add	r3, r2
 800e036:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e03a:	689b      	ldr	r3, [r3, #8]
 800e03c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800e03e:	78fb      	ldrb	r3, [r7, #3]
 800e040:	015a      	lsls	r2, r3, #5
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	4413      	add	r3, r2
 800e046:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e04a:	68db      	ldr	r3, [r3, #12]
 800e04c:	68ba      	ldr	r2, [r7, #8]
 800e04e:	4013      	ands	r3, r2
 800e050:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e052:	68bb      	ldr	r3, [r7, #8]
}
 800e054:	4618      	mov	r0, r3
 800e056:	3714      	adds	r7, #20
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr

0800e060 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800e060:	b480      	push	{r7}
 800e062:	b083      	sub	sp, #12
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	695b      	ldr	r3, [r3, #20]
 800e06c:	f003 0301 	and.w	r3, r3, #1
}
 800e070:	4618      	mov	r0, r3
 800e072:	370c      	adds	r7, #12
 800e074:	46bd      	mov	sp, r7
 800e076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07a:	4770      	bx	lr

0800e07c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e07c:	b480      	push	{r7}
 800e07e:	b085      	sub	sp, #20
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e084:	2300      	movs	r3, #0
 800e086:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	3301      	adds	r3, #1
 800e08c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e094:	d901      	bls.n	800e09a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e096:	2303      	movs	r3, #3
 800e098:	e022      	b.n	800e0e0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	691b      	ldr	r3, [r3, #16]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	daf2      	bge.n	800e088 <USB_CoreReset+0xc>

  count = 10U;
 800e0a2:	230a      	movs	r3, #10
 800e0a4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800e0a6:	e002      	b.n	800e0ae <USB_CoreReset+0x32>
  {
    count--;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	3b01      	subs	r3, #1
 800e0ac:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d1f9      	bne.n	800e0a8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	691b      	ldr	r3, [r3, #16]
 800e0b8:	f043 0201 	orr.w	r2, r3, #1
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e0cc:	d901      	bls.n	800e0d2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800e0ce:	2303      	movs	r3, #3
 800e0d0:	e006      	b.n	800e0e0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	691b      	ldr	r3, [r3, #16]
 800e0d6:	f003 0301 	and.w	r3, r3, #1
 800e0da:	2b01      	cmp	r3, #1
 800e0dc:	d0f0      	beq.n	800e0c0 <USB_CoreReset+0x44>

  return HAL_OK;
 800e0de:	2300      	movs	r3, #0
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3714      	adds	r7, #20
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ea:	4770      	bx	lr

0800e0ec <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e0ec:	b084      	sub	sp, #16
 800e0ee:	b580      	push	{r7, lr}
 800e0f0:	b086      	sub	sp, #24
 800e0f2:	af00      	add	r7, sp, #0
 800e0f4:	6078      	str	r0, [r7, #4]
 800e0f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e0fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e0fe:	2300      	movs	r3, #0
 800e100:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e10c:	461a      	mov	r2, r3
 800e10e:	2300      	movs	r3, #0
 800e110:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e116:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	68db      	ldr	r3, [r3, #12]
 800e122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e126:	2b00      	cmp	r3, #0
 800e128:	d119      	bne.n	800e15e <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800e12a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e12e:	2b01      	cmp	r3, #1
 800e130:	d10a      	bne.n	800e148 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	68fa      	ldr	r2, [r7, #12]
 800e13c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e140:	f043 0304 	orr.w	r3, r3, #4
 800e144:	6013      	str	r3, [r2, #0]
 800e146:	e014      	b.n	800e172 <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	68fa      	ldr	r2, [r7, #12]
 800e152:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e156:	f023 0304 	bic.w	r3, r3, #4
 800e15a:	6013      	str	r3, [r2, #0]
 800e15c:	e009      	b.n	800e172 <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	68fa      	ldr	r2, [r7, #12]
 800e168:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e16c:	f023 0304 	bic.w	r3, r3, #4
 800e170:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e172:	2110      	movs	r1, #16
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f7ff fe49 	bl	800de0c <USB_FlushTxFifo>
 800e17a:	4603      	mov	r3, r0
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d001      	beq.n	800e184 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800e180:	2301      	movs	r3, #1
 800e182:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f7ff fe73 	bl	800de70 <USB_FlushRxFifo>
 800e18a:	4603      	mov	r3, r0
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d001      	beq.n	800e194 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800e190:	2301      	movs	r3, #1
 800e192:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800e194:	2300      	movs	r3, #0
 800e196:	613b      	str	r3, [r7, #16]
 800e198:	e015      	b.n	800e1c6 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	015a      	lsls	r2, r3, #5
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	4413      	add	r3, r2
 800e1a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e1a6:	461a      	mov	r2, r3
 800e1a8:	f04f 33ff 	mov.w	r3, #4294967295
 800e1ac:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800e1ae:	693b      	ldr	r3, [r7, #16]
 800e1b0:	015a      	lsls	r2, r3, #5
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	4413      	add	r3, r2
 800e1b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e1ba:	461a      	mov	r2, r3
 800e1bc:	2300      	movs	r3, #0
 800e1be:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	3301      	adds	r3, #1
 800e1c4:	613b      	str	r3, [r7, #16]
 800e1c6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e1ca:	461a      	mov	r2, r3
 800e1cc:	693b      	ldr	r3, [r7, #16]
 800e1ce:	4293      	cmp	r3, r2
 800e1d0:	d3e3      	bcc.n	800e19a <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f04f 32ff 	mov.w	r2, #4294967295
 800e1de:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	4a18      	ldr	r2, [pc, #96]	@ (800e244 <USB_HostInit+0x158>)
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	d10b      	bne.n	800e200 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e1ee:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	4a15      	ldr	r2, [pc, #84]	@ (800e248 <USB_HostInit+0x15c>)
 800e1f4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	4a14      	ldr	r2, [pc, #80]	@ (800e24c <USB_HostInit+0x160>)
 800e1fa:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800e1fe:	e009      	b.n	800e214 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2280      	movs	r2, #128	@ 0x80
 800e204:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	4a11      	ldr	r2, [pc, #68]	@ (800e250 <USB_HostInit+0x164>)
 800e20a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	4a11      	ldr	r2, [pc, #68]	@ (800e254 <USB_HostInit+0x168>)
 800e210:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e214:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d105      	bne.n	800e228 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	699b      	ldr	r3, [r3, #24]
 800e220:	f043 0210 	orr.w	r2, r3, #16
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	699a      	ldr	r2, [r3, #24]
 800e22c:	4b0a      	ldr	r3, [pc, #40]	@ (800e258 <USB_HostInit+0x16c>)
 800e22e:	4313      	orrs	r3, r2
 800e230:	687a      	ldr	r2, [r7, #4]
 800e232:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800e234:	7dfb      	ldrb	r3, [r7, #23]
}
 800e236:	4618      	mov	r0, r3
 800e238:	3718      	adds	r7, #24
 800e23a:	46bd      	mov	sp, r7
 800e23c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e240:	b004      	add	sp, #16
 800e242:	4770      	bx	lr
 800e244:	40040000 	.word	0x40040000
 800e248:	01000200 	.word	0x01000200
 800e24c:	00e00300 	.word	0x00e00300
 800e250:	00600080 	.word	0x00600080
 800e254:	004000e0 	.word	0x004000e0
 800e258:	a3200008 	.word	0xa3200008

0800e25c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800e25c:	b480      	push	{r7}
 800e25e:	b085      	sub	sp, #20
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
 800e264:	460b      	mov	r3, r1
 800e266:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	68fa      	ldr	r2, [r7, #12]
 800e276:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e27a:	f023 0303 	bic.w	r3, r3, #3
 800e27e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e286:	681a      	ldr	r2, [r3, #0]
 800e288:	78fb      	ldrb	r3, [r7, #3]
 800e28a:	f003 0303 	and.w	r3, r3, #3
 800e28e:	68f9      	ldr	r1, [r7, #12]
 800e290:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800e294:	4313      	orrs	r3, r2
 800e296:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800e298:	78fb      	ldrb	r3, [r7, #3]
 800e29a:	2b01      	cmp	r3, #1
 800e29c:	d107      	bne.n	800e2ae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e2a4:	461a      	mov	r2, r3
 800e2a6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800e2aa:	6053      	str	r3, [r2, #4]
 800e2ac:	e00c      	b.n	800e2c8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800e2ae:	78fb      	ldrb	r3, [r7, #3]
 800e2b0:	2b02      	cmp	r3, #2
 800e2b2:	d107      	bne.n	800e2c4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e2ba:	461a      	mov	r2, r3
 800e2bc:	f241 7370 	movw	r3, #6000	@ 0x1770
 800e2c0:	6053      	str	r3, [r2, #4]
 800e2c2:	e001      	b.n	800e2c8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800e2c4:	2301      	movs	r3, #1
 800e2c6:	e000      	b.n	800e2ca <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800e2c8:	2300      	movs	r3, #0
}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	3714      	adds	r7, #20
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d4:	4770      	bx	lr

0800e2d6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800e2d6:	b580      	push	{r7, lr}
 800e2d8:	b084      	sub	sp, #16
 800e2da:	af00      	add	r7, sp, #0
 800e2dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800e2f6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800e2f8:	68bb      	ldr	r3, [r7, #8]
 800e2fa:	68fa      	ldr	r2, [r7, #12]
 800e2fc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800e300:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e304:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800e306:	2064      	movs	r0, #100	@ 0x64
 800e308:	f7f5 f92c 	bl	8003564 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	68fa      	ldr	r2, [r7, #12]
 800e310:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800e314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e318:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800e31a:	200a      	movs	r0, #10
 800e31c:	f7f5 f922 	bl	8003564 <HAL_Delay>

  return HAL_OK;
 800e320:	2300      	movs	r3, #0
}
 800e322:	4618      	mov	r0, r3
 800e324:	3710      	adds	r7, #16
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}

0800e32a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800e32a:	b480      	push	{r7}
 800e32c:	b085      	sub	sp, #20
 800e32e:	af00      	add	r7, sp, #0
 800e330:	6078      	str	r0, [r7, #4]
 800e332:	460b      	mov	r3, r1
 800e334:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800e33a:	2300      	movs	r3, #0
 800e33c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800e34e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e356:	2b00      	cmp	r3, #0
 800e358:	d109      	bne.n	800e36e <USB_DriveVbus+0x44>
 800e35a:	78fb      	ldrb	r3, [r7, #3]
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d106      	bne.n	800e36e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	68fa      	ldr	r2, [r7, #12]
 800e364:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800e368:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800e36c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e374:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e378:	d109      	bne.n	800e38e <USB_DriveVbus+0x64>
 800e37a:	78fb      	ldrb	r3, [r7, #3]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d106      	bne.n	800e38e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	68fa      	ldr	r2, [r7, #12]
 800e384:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800e388:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e38c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800e38e:	2300      	movs	r3, #0
}
 800e390:	4618      	mov	r0, r3
 800e392:	3714      	adds	r7, #20
 800e394:	46bd      	mov	sp, r7
 800e396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39a:	4770      	bx	lr

0800e39c <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800e39c:	b480      	push	{r7}
 800e39e:	b085      	sub	sp, #20
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	0c5b      	lsrs	r3, r3, #17
 800e3ba:	f003 0303 	and.w	r3, r3, #3
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	3714      	adds	r7, #20
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c8:	4770      	bx	lr

0800e3ca <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800e3ca:	b480      	push	{r7}
 800e3cc:	b085      	sub	sp, #20
 800e3ce:	af00      	add	r7, sp, #0
 800e3d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e3dc:	689b      	ldr	r3, [r3, #8]
 800e3de:	b29b      	uxth	r3, r3
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3714      	adds	r7, #20
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ea:	4770      	bx	lr

0800e3ec <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b088      	sub	sp, #32
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
 800e3f4:	4608      	mov	r0, r1
 800e3f6:	4611      	mov	r1, r2
 800e3f8:	461a      	mov	r2, r3
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	70fb      	strb	r3, [r7, #3]
 800e3fe:	460b      	mov	r3, r1
 800e400:	70bb      	strb	r3, [r7, #2]
 800e402:	4613      	mov	r3, r2
 800e404:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800e406:	2300      	movs	r3, #0
 800e408:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800e40e:	78fb      	ldrb	r3, [r7, #3]
 800e410:	015a      	lsls	r2, r3, #5
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	4413      	add	r3, r2
 800e416:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e41a:	461a      	mov	r2, r3
 800e41c:	f04f 33ff 	mov.w	r3, #4294967295
 800e420:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800e422:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e426:	2b03      	cmp	r3, #3
 800e428:	d87c      	bhi.n	800e524 <USB_HC_Init+0x138>
 800e42a:	a201      	add	r2, pc, #4	@ (adr r2, 800e430 <USB_HC_Init+0x44>)
 800e42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e430:	0800e441 	.word	0x0800e441
 800e434:	0800e4e7 	.word	0x0800e4e7
 800e438:	0800e441 	.word	0x0800e441
 800e43c:	0800e4a9 	.word	0x0800e4a9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e440:	78fb      	ldrb	r3, [r7, #3]
 800e442:	015a      	lsls	r2, r3, #5
 800e444:	693b      	ldr	r3, [r7, #16]
 800e446:	4413      	add	r3, r2
 800e448:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e44c:	461a      	mov	r2, r3
 800e44e:	f240 439d 	movw	r3, #1181	@ 0x49d
 800e452:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800e454:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	da10      	bge.n	800e47e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800e45c:	78fb      	ldrb	r3, [r7, #3]
 800e45e:	015a      	lsls	r2, r3, #5
 800e460:	693b      	ldr	r3, [r7, #16]
 800e462:	4413      	add	r3, r2
 800e464:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e468:	68db      	ldr	r3, [r3, #12]
 800e46a:	78fa      	ldrb	r2, [r7, #3]
 800e46c:	0151      	lsls	r1, r2, #5
 800e46e:	693a      	ldr	r2, [r7, #16]
 800e470:	440a      	add	r2, r1
 800e472:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e476:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e47a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800e47c:	e055      	b.n	800e52a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	4a6f      	ldr	r2, [pc, #444]	@ (800e640 <USB_HC_Init+0x254>)
 800e482:	4293      	cmp	r3, r2
 800e484:	d151      	bne.n	800e52a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800e486:	78fb      	ldrb	r3, [r7, #3]
 800e488:	015a      	lsls	r2, r3, #5
 800e48a:	693b      	ldr	r3, [r7, #16]
 800e48c:	4413      	add	r3, r2
 800e48e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e492:	68db      	ldr	r3, [r3, #12]
 800e494:	78fa      	ldrb	r2, [r7, #3]
 800e496:	0151      	lsls	r1, r2, #5
 800e498:	693a      	ldr	r2, [r7, #16]
 800e49a:	440a      	add	r2, r1
 800e49c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e4a0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800e4a4:	60d3      	str	r3, [r2, #12]
      break;
 800e4a6:	e040      	b.n	800e52a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e4a8:	78fb      	ldrb	r3, [r7, #3]
 800e4aa:	015a      	lsls	r2, r3, #5
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	4413      	add	r3, r2
 800e4b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4b4:	461a      	mov	r2, r3
 800e4b6:	f240 639d 	movw	r3, #1693	@ 0x69d
 800e4ba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800e4bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	da34      	bge.n	800e52e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800e4c4:	78fb      	ldrb	r3, [r7, #3]
 800e4c6:	015a      	lsls	r2, r3, #5
 800e4c8:	693b      	ldr	r3, [r7, #16]
 800e4ca:	4413      	add	r3, r2
 800e4cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4d0:	68db      	ldr	r3, [r3, #12]
 800e4d2:	78fa      	ldrb	r2, [r7, #3]
 800e4d4:	0151      	lsls	r1, r2, #5
 800e4d6:	693a      	ldr	r2, [r7, #16]
 800e4d8:	440a      	add	r2, r1
 800e4da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e4de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e4e2:	60d3      	str	r3, [r2, #12]
      }

      break;
 800e4e4:	e023      	b.n	800e52e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e4e6:	78fb      	ldrb	r3, [r7, #3]
 800e4e8:	015a      	lsls	r2, r3, #5
 800e4ea:	693b      	ldr	r3, [r7, #16]
 800e4ec:	4413      	add	r3, r2
 800e4ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4f2:	461a      	mov	r2, r3
 800e4f4:	f240 2325 	movw	r3, #549	@ 0x225
 800e4f8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800e4fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	da17      	bge.n	800e532 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800e502:	78fb      	ldrb	r3, [r7, #3]
 800e504:	015a      	lsls	r2, r3, #5
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	4413      	add	r3, r2
 800e50a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e50e:	68db      	ldr	r3, [r3, #12]
 800e510:	78fa      	ldrb	r2, [r7, #3]
 800e512:	0151      	lsls	r1, r2, #5
 800e514:	693a      	ldr	r2, [r7, #16]
 800e516:	440a      	add	r2, r1
 800e518:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e51c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800e520:	60d3      	str	r3, [r2, #12]
      }
      break;
 800e522:	e006      	b.n	800e532 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800e524:	2301      	movs	r3, #1
 800e526:	77fb      	strb	r3, [r7, #31]
      break;
 800e528:	e004      	b.n	800e534 <USB_HC_Init+0x148>
      break;
 800e52a:	bf00      	nop
 800e52c:	e002      	b.n	800e534 <USB_HC_Init+0x148>
      break;
 800e52e:	bf00      	nop
 800e530:	e000      	b.n	800e534 <USB_HC_Init+0x148>
      break;
 800e532:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800e534:	78fb      	ldrb	r3, [r7, #3]
 800e536:	015a      	lsls	r2, r3, #5
 800e538:	693b      	ldr	r3, [r7, #16]
 800e53a:	4413      	add	r3, r2
 800e53c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e540:	461a      	mov	r2, r3
 800e542:	2300      	movs	r3, #0
 800e544:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800e546:	78fb      	ldrb	r3, [r7, #3]
 800e548:	015a      	lsls	r2, r3, #5
 800e54a:	693b      	ldr	r3, [r7, #16]
 800e54c:	4413      	add	r3, r2
 800e54e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e552:	68db      	ldr	r3, [r3, #12]
 800e554:	78fa      	ldrb	r2, [r7, #3]
 800e556:	0151      	lsls	r1, r2, #5
 800e558:	693a      	ldr	r2, [r7, #16]
 800e55a:	440a      	add	r2, r1
 800e55c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e560:	f043 0302 	orr.w	r3, r3, #2
 800e564:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e56c:	699a      	ldr	r2, [r3, #24]
 800e56e:	78fb      	ldrb	r3, [r7, #3]
 800e570:	f003 030f 	and.w	r3, r3, #15
 800e574:	2101      	movs	r1, #1
 800e576:	fa01 f303 	lsl.w	r3, r1, r3
 800e57a:	6939      	ldr	r1, [r7, #16]
 800e57c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800e580:	4313      	orrs	r3, r2
 800e582:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	699b      	ldr	r3, [r3, #24]
 800e588:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800e590:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e594:	2b00      	cmp	r3, #0
 800e596:	da03      	bge.n	800e5a0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800e598:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e59c:	61bb      	str	r3, [r7, #24]
 800e59e:	e001      	b.n	800e5a4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f7ff fef9 	bl	800e39c <USB_GetHostSpeed>
 800e5aa:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800e5ac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e5b0:	2b02      	cmp	r3, #2
 800e5b2:	d106      	bne.n	800e5c2 <USB_HC_Init+0x1d6>
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	2b02      	cmp	r3, #2
 800e5b8:	d003      	beq.n	800e5c2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800e5ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800e5be:	617b      	str	r3, [r7, #20]
 800e5c0:	e001      	b.n	800e5c6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e5c6:	787b      	ldrb	r3, [r7, #1]
 800e5c8:	059b      	lsls	r3, r3, #22
 800e5ca:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800e5ce:	78bb      	ldrb	r3, [r7, #2]
 800e5d0:	02db      	lsls	r3, r3, #11
 800e5d2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e5d6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800e5d8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e5dc:	049b      	lsls	r3, r3, #18
 800e5de:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800e5e2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800e5e4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800e5e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800e5ea:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800e5ec:	69bb      	ldr	r3, [r7, #24]
 800e5ee:	431a      	orrs	r2, r3
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e5f4:	78fa      	ldrb	r2, [r7, #3]
 800e5f6:	0151      	lsls	r1, r2, #5
 800e5f8:	693a      	ldr	r2, [r7, #16]
 800e5fa:	440a      	add	r2, r1
 800e5fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800e600:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e604:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800e606:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e60a:	2b03      	cmp	r3, #3
 800e60c:	d003      	beq.n	800e616 <USB_HC_Init+0x22a>
 800e60e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e612:	2b01      	cmp	r3, #1
 800e614:	d10f      	bne.n	800e636 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800e616:	78fb      	ldrb	r3, [r7, #3]
 800e618:	015a      	lsls	r2, r3, #5
 800e61a:	693b      	ldr	r3, [r7, #16]
 800e61c:	4413      	add	r3, r2
 800e61e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	78fa      	ldrb	r2, [r7, #3]
 800e626:	0151      	lsls	r1, r2, #5
 800e628:	693a      	ldr	r2, [r7, #16]
 800e62a:	440a      	add	r2, r1
 800e62c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e630:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e634:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800e636:	7ffb      	ldrb	r3, [r7, #31]
}
 800e638:	4618      	mov	r0, r3
 800e63a:	3720      	adds	r7, #32
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}
 800e640:	40040000 	.word	0x40040000

0800e644 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b08c      	sub	sp, #48	@ 0x30
 800e648:	af02      	add	r7, sp, #8
 800e64a:	60f8      	str	r0, [r7, #12]
 800e64c:	60b9      	str	r1, [r7, #8]
 800e64e:	4613      	mov	r3, r2
 800e650:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	785b      	ldrb	r3, [r3, #1]
 800e65a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800e65c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e660:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	4a5d      	ldr	r2, [pc, #372]	@ (800e7dc <USB_HC_StartXfer+0x198>)
 800e666:	4293      	cmp	r3, r2
 800e668:	d12f      	bne.n	800e6ca <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800e66a:	79fb      	ldrb	r3, [r7, #7]
 800e66c:	2b01      	cmp	r3, #1
 800e66e:	d11c      	bne.n	800e6aa <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	7c9b      	ldrb	r3, [r3, #18]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d003      	beq.n	800e680 <USB_HC_StartXfer+0x3c>
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	7c9b      	ldrb	r3, [r3, #18]
 800e67c:	2b02      	cmp	r3, #2
 800e67e:	d124      	bne.n	800e6ca <USB_HC_StartXfer+0x86>
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	799b      	ldrb	r3, [r3, #6]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d120      	bne.n	800e6ca <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800e688:	69fb      	ldr	r3, [r7, #28]
 800e68a:	015a      	lsls	r2, r3, #5
 800e68c:	6a3b      	ldr	r3, [r7, #32]
 800e68e:	4413      	add	r3, r2
 800e690:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e694:	68db      	ldr	r3, [r3, #12]
 800e696:	69fa      	ldr	r2, [r7, #28]
 800e698:	0151      	lsls	r1, r2, #5
 800e69a:	6a3a      	ldr	r2, [r7, #32]
 800e69c:	440a      	add	r2, r1
 800e69e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e6a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e6a6:	60d3      	str	r3, [r2, #12]
 800e6a8:	e00f      	b.n	800e6ca <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	791b      	ldrb	r3, [r3, #4]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d10b      	bne.n	800e6ca <USB_HC_StartXfer+0x86>
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	795b      	ldrb	r3, [r3, #5]
 800e6b6:	2b01      	cmp	r3, #1
 800e6b8:	d107      	bne.n	800e6ca <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	785b      	ldrb	r3, [r3, #1]
 800e6be:	4619      	mov	r1, r3
 800e6c0:	68f8      	ldr	r0, [r7, #12]
 800e6c2:	f000 fb6b 	bl	800ed9c <USB_DoPing>
        return HAL_OK;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	e232      	b.n	800eb30 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	799b      	ldrb	r3, [r3, #6]
 800e6ce:	2b01      	cmp	r3, #1
 800e6d0:	d158      	bne.n	800e784 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	78db      	ldrb	r3, [r3, #3]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d007      	beq.n	800e6ee <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e6de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e6e0:	68ba      	ldr	r2, [r7, #8]
 800e6e2:	8a92      	ldrh	r2, [r2, #20]
 800e6e4:	fb03 f202 	mul.w	r2, r3, r2
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	61da      	str	r2, [r3, #28]
 800e6ec:	e07c      	b.n	800e7e8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	7c9b      	ldrb	r3, [r3, #18]
 800e6f2:	2b01      	cmp	r3, #1
 800e6f4:	d130      	bne.n	800e758 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	6a1b      	ldr	r3, [r3, #32]
 800e6fa:	2bbc      	cmp	r3, #188	@ 0xbc
 800e6fc:	d918      	bls.n	800e730 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	8a9b      	ldrh	r3, [r3, #20]
 800e702:	461a      	mov	r2, r3
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	69da      	ldr	r2, [r3, #28]
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800e710:	68bb      	ldr	r3, [r7, #8]
 800e712:	68db      	ldr	r3, [r3, #12]
 800e714:	2b01      	cmp	r3, #1
 800e716:	d003      	beq.n	800e720 <USB_HC_StartXfer+0xdc>
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	68db      	ldr	r3, [r3, #12]
 800e71c:	2b02      	cmp	r3, #2
 800e71e:	d103      	bne.n	800e728 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	2202      	movs	r2, #2
 800e724:	60da      	str	r2, [r3, #12]
 800e726:	e05f      	b.n	800e7e8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	2201      	movs	r2, #1
 800e72c:	60da      	str	r2, [r3, #12]
 800e72e:	e05b      	b.n	800e7e8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	6a1a      	ldr	r2, [r3, #32]
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	68db      	ldr	r3, [r3, #12]
 800e73c:	2b01      	cmp	r3, #1
 800e73e:	d007      	beq.n	800e750 <USB_HC_StartXfer+0x10c>
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	68db      	ldr	r3, [r3, #12]
 800e744:	2b02      	cmp	r3, #2
 800e746:	d003      	beq.n	800e750 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	2204      	movs	r2, #4
 800e74c:	60da      	str	r2, [r3, #12]
 800e74e:	e04b      	b.n	800e7e8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	2203      	movs	r2, #3
 800e754:	60da      	str	r2, [r3, #12]
 800e756:	e047      	b.n	800e7e8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800e758:	79fb      	ldrb	r3, [r7, #7]
 800e75a:	2b01      	cmp	r3, #1
 800e75c:	d10d      	bne.n	800e77a <USB_HC_StartXfer+0x136>
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	6a1b      	ldr	r3, [r3, #32]
 800e762:	68ba      	ldr	r2, [r7, #8]
 800e764:	8a92      	ldrh	r2, [r2, #20]
 800e766:	4293      	cmp	r3, r2
 800e768:	d907      	bls.n	800e77a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e76a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e76c:	68ba      	ldr	r2, [r7, #8]
 800e76e:	8a92      	ldrh	r2, [r2, #20]
 800e770:	fb03 f202 	mul.w	r2, r3, r2
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	61da      	str	r2, [r3, #28]
 800e778:	e036      	b.n	800e7e8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800e77a:	68bb      	ldr	r3, [r7, #8]
 800e77c:	6a1a      	ldr	r2, [r3, #32]
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	61da      	str	r2, [r3, #28]
 800e782:	e031      	b.n	800e7e8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	6a1b      	ldr	r3, [r3, #32]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d018      	beq.n	800e7be <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	6a1b      	ldr	r3, [r3, #32]
 800e790:	68ba      	ldr	r2, [r7, #8]
 800e792:	8a92      	ldrh	r2, [r2, #20]
 800e794:	4413      	add	r3, r2
 800e796:	3b01      	subs	r3, #1
 800e798:	68ba      	ldr	r2, [r7, #8]
 800e79a:	8a92      	ldrh	r2, [r2, #20]
 800e79c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e7a0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800e7a2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e7a4:	8b7b      	ldrh	r3, [r7, #26]
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d90b      	bls.n	800e7c2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800e7aa:	8b7b      	ldrh	r3, [r7, #26]
 800e7ac:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e7ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e7b0:	68ba      	ldr	r2, [r7, #8]
 800e7b2:	8a92      	ldrh	r2, [r2, #20]
 800e7b4:	fb03 f202 	mul.w	r2, r3, r2
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	61da      	str	r2, [r3, #28]
 800e7bc:	e001      	b.n	800e7c2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800e7be:	2301      	movs	r3, #1
 800e7c0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	78db      	ldrb	r3, [r3, #3]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d00a      	beq.n	800e7e0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e7ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e7cc:	68ba      	ldr	r2, [r7, #8]
 800e7ce:	8a92      	ldrh	r2, [r2, #20]
 800e7d0:	fb03 f202 	mul.w	r2, r3, r2
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	61da      	str	r2, [r3, #28]
 800e7d8:	e006      	b.n	800e7e8 <USB_HC_StartXfer+0x1a4>
 800e7da:	bf00      	nop
 800e7dc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800e7e0:	68bb      	ldr	r3, [r7, #8]
 800e7e2:	6a1a      	ldr	r2, [r3, #32]
 800e7e4:	68bb      	ldr	r3, [r7, #8]
 800e7e6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e7e8:	68bb      	ldr	r3, [r7, #8]
 800e7ea:	69db      	ldr	r3, [r3, #28]
 800e7ec:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e7f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e7f2:	04d9      	lsls	r1, r3, #19
 800e7f4:	4ba3      	ldr	r3, [pc, #652]	@ (800ea84 <USB_HC_StartXfer+0x440>)
 800e7f6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e7f8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800e7fa:	68bb      	ldr	r3, [r7, #8]
 800e7fc:	7d9b      	ldrb	r3, [r3, #22]
 800e7fe:	075b      	lsls	r3, r3, #29
 800e800:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e804:	69f9      	ldr	r1, [r7, #28]
 800e806:	0148      	lsls	r0, r1, #5
 800e808:	6a39      	ldr	r1, [r7, #32]
 800e80a:	4401      	add	r1, r0
 800e80c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e810:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e812:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800e814:	79fb      	ldrb	r3, [r7, #7]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d009      	beq.n	800e82e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	6999      	ldr	r1, [r3, #24]
 800e81e:	69fb      	ldr	r3, [r7, #28]
 800e820:	015a      	lsls	r2, r3, #5
 800e822:	6a3b      	ldr	r3, [r7, #32]
 800e824:	4413      	add	r3, r2
 800e826:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e82a:	460a      	mov	r2, r1
 800e82c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800e82e:	6a3b      	ldr	r3, [r7, #32]
 800e830:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e834:	689b      	ldr	r3, [r3, #8]
 800e836:	f003 0301 	and.w	r3, r3, #1
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	bf0c      	ite	eq
 800e83e:	2301      	moveq	r3, #1
 800e840:	2300      	movne	r3, #0
 800e842:	b2db      	uxtb	r3, r3
 800e844:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800e846:	69fb      	ldr	r3, [r7, #28]
 800e848:	015a      	lsls	r2, r3, #5
 800e84a:	6a3b      	ldr	r3, [r7, #32]
 800e84c:	4413      	add	r3, r2
 800e84e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	69fa      	ldr	r2, [r7, #28]
 800e856:	0151      	lsls	r1, r2, #5
 800e858:	6a3a      	ldr	r2, [r7, #32]
 800e85a:	440a      	add	r2, r1
 800e85c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e860:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e864:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800e866:	69fb      	ldr	r3, [r7, #28]
 800e868:	015a      	lsls	r2, r3, #5
 800e86a:	6a3b      	ldr	r3, [r7, #32]
 800e86c:	4413      	add	r3, r2
 800e86e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e872:	681a      	ldr	r2, [r3, #0]
 800e874:	7e7b      	ldrb	r3, [r7, #25]
 800e876:	075b      	lsls	r3, r3, #29
 800e878:	69f9      	ldr	r1, [r7, #28]
 800e87a:	0148      	lsls	r0, r1, #5
 800e87c:	6a39      	ldr	r1, [r7, #32]
 800e87e:	4401      	add	r1, r0
 800e880:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800e884:	4313      	orrs	r3, r2
 800e886:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800e888:	68bb      	ldr	r3, [r7, #8]
 800e88a:	799b      	ldrb	r3, [r3, #6]
 800e88c:	2b01      	cmp	r3, #1
 800e88e:	f040 80c3 	bne.w	800ea18 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	7c5b      	ldrb	r3, [r3, #17]
 800e896:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800e898:	68ba      	ldr	r2, [r7, #8]
 800e89a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e89c:	4313      	orrs	r3, r2
 800e89e:	69fa      	ldr	r2, [r7, #28]
 800e8a0:	0151      	lsls	r1, r2, #5
 800e8a2:	6a3a      	ldr	r2, [r7, #32]
 800e8a4:	440a      	add	r2, r1
 800e8a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800e8aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e8ae:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800e8b0:	69fb      	ldr	r3, [r7, #28]
 800e8b2:	015a      	lsls	r2, r3, #5
 800e8b4:	6a3b      	ldr	r3, [r7, #32]
 800e8b6:	4413      	add	r3, r2
 800e8b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e8bc:	68db      	ldr	r3, [r3, #12]
 800e8be:	69fa      	ldr	r2, [r7, #28]
 800e8c0:	0151      	lsls	r1, r2, #5
 800e8c2:	6a3a      	ldr	r2, [r7, #32]
 800e8c4:	440a      	add	r2, r1
 800e8c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e8ca:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800e8ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	79db      	ldrb	r3, [r3, #7]
 800e8d4:	2b01      	cmp	r3, #1
 800e8d6:	d123      	bne.n	800e920 <USB_HC_StartXfer+0x2dc>
 800e8d8:	68bb      	ldr	r3, [r7, #8]
 800e8da:	78db      	ldrb	r3, [r3, #3]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d11f      	bne.n	800e920 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800e8e0:	69fb      	ldr	r3, [r7, #28]
 800e8e2:	015a      	lsls	r2, r3, #5
 800e8e4:	6a3b      	ldr	r3, [r7, #32]
 800e8e6:	4413      	add	r3, r2
 800e8e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	69fa      	ldr	r2, [r7, #28]
 800e8f0:	0151      	lsls	r1, r2, #5
 800e8f2:	6a3a      	ldr	r2, [r7, #32]
 800e8f4:	440a      	add	r2, r1
 800e8f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e8fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e8fe:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800e900:	69fb      	ldr	r3, [r7, #28]
 800e902:	015a      	lsls	r2, r3, #5
 800e904:	6a3b      	ldr	r3, [r7, #32]
 800e906:	4413      	add	r3, r2
 800e908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e90c:	68db      	ldr	r3, [r3, #12]
 800e90e:	69fa      	ldr	r2, [r7, #28]
 800e910:	0151      	lsls	r1, r2, #5
 800e912:	6a3a      	ldr	r2, [r7, #32]
 800e914:	440a      	add	r2, r1
 800e916:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e91a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e91e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	7c9b      	ldrb	r3, [r3, #18]
 800e924:	2b01      	cmp	r3, #1
 800e926:	d003      	beq.n	800e930 <USB_HC_StartXfer+0x2ec>
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	7c9b      	ldrb	r3, [r3, #18]
 800e92c:	2b03      	cmp	r3, #3
 800e92e:	d117      	bne.n	800e960 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800e934:	2b01      	cmp	r3, #1
 800e936:	d113      	bne.n	800e960 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	78db      	ldrb	r3, [r3, #3]
 800e93c:	2b01      	cmp	r3, #1
 800e93e:	d10f      	bne.n	800e960 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800e940:	69fb      	ldr	r3, [r7, #28]
 800e942:	015a      	lsls	r2, r3, #5
 800e944:	6a3b      	ldr	r3, [r7, #32]
 800e946:	4413      	add	r3, r2
 800e948:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e94c:	685b      	ldr	r3, [r3, #4]
 800e94e:	69fa      	ldr	r2, [r7, #28]
 800e950:	0151      	lsls	r1, r2, #5
 800e952:	6a3a      	ldr	r2, [r7, #32]
 800e954:	440a      	add	r2, r1
 800e956:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e95a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e95e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800e960:	68bb      	ldr	r3, [r7, #8]
 800e962:	7c9b      	ldrb	r3, [r3, #18]
 800e964:	2b01      	cmp	r3, #1
 800e966:	d162      	bne.n	800ea2e <USB_HC_StartXfer+0x3ea>
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	78db      	ldrb	r3, [r3, #3]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d15e      	bne.n	800ea2e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	68db      	ldr	r3, [r3, #12]
 800e974:	3b01      	subs	r3, #1
 800e976:	2b03      	cmp	r3, #3
 800e978:	d858      	bhi.n	800ea2c <USB_HC_StartXfer+0x3e8>
 800e97a:	a201      	add	r2, pc, #4	@ (adr r2, 800e980 <USB_HC_StartXfer+0x33c>)
 800e97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e980:	0800e991 	.word	0x0800e991
 800e984:	0800e9b3 	.word	0x0800e9b3
 800e988:	0800e9d5 	.word	0x0800e9d5
 800e98c:	0800e9f7 	.word	0x0800e9f7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800e990:	69fb      	ldr	r3, [r7, #28]
 800e992:	015a      	lsls	r2, r3, #5
 800e994:	6a3b      	ldr	r3, [r7, #32]
 800e996:	4413      	add	r3, r2
 800e998:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e99c:	685b      	ldr	r3, [r3, #4]
 800e99e:	69fa      	ldr	r2, [r7, #28]
 800e9a0:	0151      	lsls	r1, r2, #5
 800e9a2:	6a3a      	ldr	r2, [r7, #32]
 800e9a4:	440a      	add	r2, r1
 800e9a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e9aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e9ae:	6053      	str	r3, [r2, #4]
          break;
 800e9b0:	e03d      	b.n	800ea2e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800e9b2:	69fb      	ldr	r3, [r7, #28]
 800e9b4:	015a      	lsls	r2, r3, #5
 800e9b6:	6a3b      	ldr	r3, [r7, #32]
 800e9b8:	4413      	add	r3, r2
 800e9ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e9be:	685b      	ldr	r3, [r3, #4]
 800e9c0:	69fa      	ldr	r2, [r7, #28]
 800e9c2:	0151      	lsls	r1, r2, #5
 800e9c4:	6a3a      	ldr	r2, [r7, #32]
 800e9c6:	440a      	add	r2, r1
 800e9c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e9cc:	f043 030e 	orr.w	r3, r3, #14
 800e9d0:	6053      	str	r3, [r2, #4]
          break;
 800e9d2:	e02c      	b.n	800ea2e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800e9d4:	69fb      	ldr	r3, [r7, #28]
 800e9d6:	015a      	lsls	r2, r3, #5
 800e9d8:	6a3b      	ldr	r3, [r7, #32]
 800e9da:	4413      	add	r3, r2
 800e9dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e9e0:	685b      	ldr	r3, [r3, #4]
 800e9e2:	69fa      	ldr	r2, [r7, #28]
 800e9e4:	0151      	lsls	r1, r2, #5
 800e9e6:	6a3a      	ldr	r2, [r7, #32]
 800e9e8:	440a      	add	r2, r1
 800e9ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e9ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e9f2:	6053      	str	r3, [r2, #4]
          break;
 800e9f4:	e01b      	b.n	800ea2e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800e9f6:	69fb      	ldr	r3, [r7, #28]
 800e9f8:	015a      	lsls	r2, r3, #5
 800e9fa:	6a3b      	ldr	r3, [r7, #32]
 800e9fc:	4413      	add	r3, r2
 800e9fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea02:	685b      	ldr	r3, [r3, #4]
 800ea04:	69fa      	ldr	r2, [r7, #28]
 800ea06:	0151      	lsls	r1, r2, #5
 800ea08:	6a3a      	ldr	r2, [r7, #32]
 800ea0a:	440a      	add	r2, r1
 800ea0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ea10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ea14:	6053      	str	r3, [r2, #4]
          break;
 800ea16:	e00a      	b.n	800ea2e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800ea18:	69fb      	ldr	r3, [r7, #28]
 800ea1a:	015a      	lsls	r2, r3, #5
 800ea1c:	6a3b      	ldr	r3, [r7, #32]
 800ea1e:	4413      	add	r3, r2
 800ea20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea24:	461a      	mov	r2, r3
 800ea26:	2300      	movs	r3, #0
 800ea28:	6053      	str	r3, [r2, #4]
 800ea2a:	e000      	b.n	800ea2e <USB_HC_StartXfer+0x3ea>
          break;
 800ea2c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ea2e:	69fb      	ldr	r3, [r7, #28]
 800ea30:	015a      	lsls	r2, r3, #5
 800ea32:	6a3b      	ldr	r3, [r7, #32]
 800ea34:	4413      	add	r3, r2
 800ea36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ea3e:	693b      	ldr	r3, [r7, #16]
 800ea40:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ea44:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800ea46:	68bb      	ldr	r3, [r7, #8]
 800ea48:	78db      	ldrb	r3, [r3, #3]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d004      	beq.n	800ea58 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800ea4e:	693b      	ldr	r3, [r7, #16]
 800ea50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ea54:	613b      	str	r3, [r7, #16]
 800ea56:	e003      	b.n	800ea60 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800ea58:	693b      	ldr	r3, [r7, #16]
 800ea5a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ea5e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ea60:	693b      	ldr	r3, [r7, #16]
 800ea62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ea66:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ea68:	69fb      	ldr	r3, [r7, #28]
 800ea6a:	015a      	lsls	r2, r3, #5
 800ea6c:	6a3b      	ldr	r3, [r7, #32]
 800ea6e:	4413      	add	r3, r2
 800ea70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea74:	461a      	mov	r2, r3
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800ea7a:	79fb      	ldrb	r3, [r7, #7]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d003      	beq.n	800ea88 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800ea80:	2300      	movs	r3, #0
 800ea82:	e055      	b.n	800eb30 <USB_HC_StartXfer+0x4ec>
 800ea84:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	78db      	ldrb	r3, [r3, #3]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d14e      	bne.n	800eb2e <USB_HC_StartXfer+0x4ea>
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	6a1b      	ldr	r3, [r3, #32]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d04a      	beq.n	800eb2e <USB_HC_StartXfer+0x4ea>
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	79db      	ldrb	r3, [r3, #7]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d146      	bne.n	800eb2e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	7c9b      	ldrb	r3, [r3, #18]
 800eaa4:	2b03      	cmp	r3, #3
 800eaa6:	d831      	bhi.n	800eb0c <USB_HC_StartXfer+0x4c8>
 800eaa8:	a201      	add	r2, pc, #4	@ (adr r2, 800eab0 <USB_HC_StartXfer+0x46c>)
 800eaaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaae:	bf00      	nop
 800eab0:	0800eac1 	.word	0x0800eac1
 800eab4:	0800eae5 	.word	0x0800eae5
 800eab8:	0800eac1 	.word	0x0800eac1
 800eabc:	0800eae5 	.word	0x0800eae5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800eac0:	68bb      	ldr	r3, [r7, #8]
 800eac2:	6a1b      	ldr	r3, [r3, #32]
 800eac4:	3303      	adds	r3, #3
 800eac6:	089b      	lsrs	r3, r3, #2
 800eac8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800eaca:	8afa      	ldrh	r2, [r7, #22]
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ead0:	b29b      	uxth	r3, r3
 800ead2:	429a      	cmp	r2, r3
 800ead4:	d91c      	bls.n	800eb10 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	699b      	ldr	r3, [r3, #24]
 800eada:	f043 0220 	orr.w	r2, r3, #32
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	619a      	str	r2, [r3, #24]
        }
        break;
 800eae2:	e015      	b.n	800eb10 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800eae4:	68bb      	ldr	r3, [r7, #8]
 800eae6:	6a1b      	ldr	r3, [r3, #32]
 800eae8:	3303      	adds	r3, #3
 800eaea:	089b      	lsrs	r3, r3, #2
 800eaec:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800eaee:	8afa      	ldrh	r2, [r7, #22]
 800eaf0:	6a3b      	ldr	r3, [r7, #32]
 800eaf2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800eaf6:	691b      	ldr	r3, [r3, #16]
 800eaf8:	b29b      	uxth	r3, r3
 800eafa:	429a      	cmp	r2, r3
 800eafc:	d90a      	bls.n	800eb14 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	699b      	ldr	r3, [r3, #24]
 800eb02:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	619a      	str	r2, [r3, #24]
        }
        break;
 800eb0a:	e003      	b.n	800eb14 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800eb0c:	bf00      	nop
 800eb0e:	e002      	b.n	800eb16 <USB_HC_StartXfer+0x4d2>
        break;
 800eb10:	bf00      	nop
 800eb12:	e000      	b.n	800eb16 <USB_HC_StartXfer+0x4d2>
        break;
 800eb14:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	6999      	ldr	r1, [r3, #24]
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	785a      	ldrb	r2, [r3, #1]
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	6a1b      	ldr	r3, [r3, #32]
 800eb22:	b29b      	uxth	r3, r3
 800eb24:	2000      	movs	r0, #0
 800eb26:	9000      	str	r0, [sp, #0]
 800eb28:	68f8      	ldr	r0, [r7, #12]
 800eb2a:	f7ff f9cf 	bl	800decc <USB_WritePacket>
  }

  return HAL_OK;
 800eb2e:	2300      	movs	r3, #0
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3728      	adds	r7, #40	@ 0x28
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}

0800eb38 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b085      	sub	sp, #20
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800eb4a:	695b      	ldr	r3, [r3, #20]
 800eb4c:	b29b      	uxth	r3, r3
}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	3714      	adds	r7, #20
 800eb52:	46bd      	mov	sp, r7
 800eb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb58:	4770      	bx	lr

0800eb5a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800eb5a:	b480      	push	{r7}
 800eb5c:	b089      	sub	sp, #36	@ 0x24
 800eb5e:	af00      	add	r7, sp, #0
 800eb60:	6078      	str	r0, [r7, #4]
 800eb62:	460b      	mov	r3, r1
 800eb64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800eb6a:	78fb      	ldrb	r3, [r7, #3]
 800eb6c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800eb72:	69bb      	ldr	r3, [r7, #24]
 800eb74:	015a      	lsls	r2, r3, #5
 800eb76:	69fb      	ldr	r3, [r7, #28]
 800eb78:	4413      	add	r3, r2
 800eb7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	0c9b      	lsrs	r3, r3, #18
 800eb82:	f003 0303 	and.w	r3, r3, #3
 800eb86:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800eb88:	69bb      	ldr	r3, [r7, #24]
 800eb8a:	015a      	lsls	r2, r3, #5
 800eb8c:	69fb      	ldr	r3, [r7, #28]
 800eb8e:	4413      	add	r3, r2
 800eb90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	0fdb      	lsrs	r3, r3, #31
 800eb98:	f003 0301 	and.w	r3, r3, #1
 800eb9c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800eb9e:	69bb      	ldr	r3, [r7, #24]
 800eba0:	015a      	lsls	r2, r3, #5
 800eba2:	69fb      	ldr	r3, [r7, #28]
 800eba4:	4413      	add	r3, r2
 800eba6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ebaa:	685b      	ldr	r3, [r3, #4]
 800ebac:	0fdb      	lsrs	r3, r3, #31
 800ebae:	f003 0301 	and.w	r3, r3, #1
 800ebb2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	689b      	ldr	r3, [r3, #8]
 800ebb8:	f003 0320 	and.w	r3, r3, #32
 800ebbc:	2b20      	cmp	r3, #32
 800ebbe:	d10d      	bne.n	800ebdc <USB_HC_Halt+0x82>
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d10a      	bne.n	800ebdc <USB_HC_Halt+0x82>
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d005      	beq.n	800ebd8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	2b01      	cmp	r3, #1
 800ebd0:	d002      	beq.n	800ebd8 <USB_HC_Halt+0x7e>
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	2b03      	cmp	r3, #3
 800ebd6:	d101      	bne.n	800ebdc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800ebd8:	2300      	movs	r3, #0
 800ebda:	e0d8      	b.n	800ed8e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ebdc:	697b      	ldr	r3, [r7, #20]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d002      	beq.n	800ebe8 <USB_HC_Halt+0x8e>
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	2b02      	cmp	r3, #2
 800ebe6:	d173      	bne.n	800ecd0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ebe8:	69bb      	ldr	r3, [r7, #24]
 800ebea:	015a      	lsls	r2, r3, #5
 800ebec:	69fb      	ldr	r3, [r7, #28]
 800ebee:	4413      	add	r3, r2
 800ebf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	69ba      	ldr	r2, [r7, #24]
 800ebf8:	0151      	lsls	r1, r2, #5
 800ebfa:	69fa      	ldr	r2, [r7, #28]
 800ebfc:	440a      	add	r2, r1
 800ebfe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ec02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ec06:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	689b      	ldr	r3, [r3, #8]
 800ec0c:	f003 0320 	and.w	r3, r3, #32
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d14a      	bne.n	800ecaa <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec18:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d133      	bne.n	800ec88 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ec20:	69bb      	ldr	r3, [r7, #24]
 800ec22:	015a      	lsls	r2, r3, #5
 800ec24:	69fb      	ldr	r3, [r7, #28]
 800ec26:	4413      	add	r3, r2
 800ec28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	69ba      	ldr	r2, [r7, #24]
 800ec30:	0151      	lsls	r1, r2, #5
 800ec32:	69fa      	ldr	r2, [r7, #28]
 800ec34:	440a      	add	r2, r1
 800ec36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ec3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ec3e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ec40:	69bb      	ldr	r3, [r7, #24]
 800ec42:	015a      	lsls	r2, r3, #5
 800ec44:	69fb      	ldr	r3, [r7, #28]
 800ec46:	4413      	add	r3, r2
 800ec48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	69ba      	ldr	r2, [r7, #24]
 800ec50:	0151      	lsls	r1, r2, #5
 800ec52:	69fa      	ldr	r2, [r7, #28]
 800ec54:	440a      	add	r2, r1
 800ec56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ec5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ec5e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	3301      	adds	r3, #1
 800ec64:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ec6c:	d82e      	bhi.n	800eccc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ec6e:	69bb      	ldr	r3, [r7, #24]
 800ec70:	015a      	lsls	r2, r3, #5
 800ec72:	69fb      	ldr	r3, [r7, #28]
 800ec74:	4413      	add	r3, r2
 800ec76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ec80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ec84:	d0ec      	beq.n	800ec60 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ec86:	e081      	b.n	800ed8c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ec88:	69bb      	ldr	r3, [r7, #24]
 800ec8a:	015a      	lsls	r2, r3, #5
 800ec8c:	69fb      	ldr	r3, [r7, #28]
 800ec8e:	4413      	add	r3, r2
 800ec90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	69ba      	ldr	r2, [r7, #24]
 800ec98:	0151      	lsls	r1, r2, #5
 800ec9a:	69fa      	ldr	r2, [r7, #28]
 800ec9c:	440a      	add	r2, r1
 800ec9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800eca2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800eca6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800eca8:	e070      	b.n	800ed8c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ecaa:	69bb      	ldr	r3, [r7, #24]
 800ecac:	015a      	lsls	r2, r3, #5
 800ecae:	69fb      	ldr	r3, [r7, #28]
 800ecb0:	4413      	add	r3, r2
 800ecb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	69ba      	ldr	r2, [r7, #24]
 800ecba:	0151      	lsls	r1, r2, #5
 800ecbc:	69fa      	ldr	r2, [r7, #28]
 800ecbe:	440a      	add	r2, r1
 800ecc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ecc4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ecc8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ecca:	e05f      	b.n	800ed8c <USB_HC_Halt+0x232>
            break;
 800eccc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ecce:	e05d      	b.n	800ed8c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ecd0:	69bb      	ldr	r3, [r7, #24]
 800ecd2:	015a      	lsls	r2, r3, #5
 800ecd4:	69fb      	ldr	r3, [r7, #28]
 800ecd6:	4413      	add	r3, r2
 800ecd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	69ba      	ldr	r2, [r7, #24]
 800ece0:	0151      	lsls	r1, r2, #5
 800ece2:	69fa      	ldr	r2, [r7, #28]
 800ece4:	440a      	add	r2, r1
 800ece6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ecea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ecee:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ecf0:	69fb      	ldr	r3, [r7, #28]
 800ecf2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ecf6:	691b      	ldr	r3, [r3, #16]
 800ecf8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d133      	bne.n	800ed68 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ed00:	69bb      	ldr	r3, [r7, #24]
 800ed02:	015a      	lsls	r2, r3, #5
 800ed04:	69fb      	ldr	r3, [r7, #28]
 800ed06:	4413      	add	r3, r2
 800ed08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	69ba      	ldr	r2, [r7, #24]
 800ed10:	0151      	lsls	r1, r2, #5
 800ed12:	69fa      	ldr	r2, [r7, #28]
 800ed14:	440a      	add	r2, r1
 800ed16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ed1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ed1e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ed20:	69bb      	ldr	r3, [r7, #24]
 800ed22:	015a      	lsls	r2, r3, #5
 800ed24:	69fb      	ldr	r3, [r7, #28]
 800ed26:	4413      	add	r3, r2
 800ed28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	69ba      	ldr	r2, [r7, #24]
 800ed30:	0151      	lsls	r1, r2, #5
 800ed32:	69fa      	ldr	r2, [r7, #28]
 800ed34:	440a      	add	r2, r1
 800ed36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ed3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ed3e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800ed40:	68bb      	ldr	r3, [r7, #8]
 800ed42:	3301      	adds	r3, #1
 800ed44:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ed4c:	d81d      	bhi.n	800ed8a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ed4e:	69bb      	ldr	r3, [r7, #24]
 800ed50:	015a      	lsls	r2, r3, #5
 800ed52:	69fb      	ldr	r3, [r7, #28]
 800ed54:	4413      	add	r3, r2
 800ed56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ed60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ed64:	d0ec      	beq.n	800ed40 <USB_HC_Halt+0x1e6>
 800ed66:	e011      	b.n	800ed8c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ed68:	69bb      	ldr	r3, [r7, #24]
 800ed6a:	015a      	lsls	r2, r3, #5
 800ed6c:	69fb      	ldr	r3, [r7, #28]
 800ed6e:	4413      	add	r3, r2
 800ed70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	69ba      	ldr	r2, [r7, #24]
 800ed78:	0151      	lsls	r1, r2, #5
 800ed7a:	69fa      	ldr	r2, [r7, #28]
 800ed7c:	440a      	add	r2, r1
 800ed7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ed82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ed86:	6013      	str	r3, [r2, #0]
 800ed88:	e000      	b.n	800ed8c <USB_HC_Halt+0x232>
          break;
 800ed8a:	bf00      	nop
    }
  }

  return HAL_OK;
 800ed8c:	2300      	movs	r3, #0
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3724      	adds	r7, #36	@ 0x24
 800ed92:	46bd      	mov	sp, r7
 800ed94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed98:	4770      	bx	lr
	...

0800ed9c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800ed9c:	b480      	push	{r7}
 800ed9e:	b087      	sub	sp, #28
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
 800eda4:	460b      	mov	r3, r1
 800eda6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800edac:	78fb      	ldrb	r3, [r7, #3]
 800edae:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800edb0:	2301      	movs	r3, #1
 800edb2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	04da      	lsls	r2, r3, #19
 800edb8:	4b15      	ldr	r3, [pc, #84]	@ (800ee10 <USB_DoPing+0x74>)
 800edba:	4013      	ands	r3, r2
 800edbc:	693a      	ldr	r2, [r7, #16]
 800edbe:	0151      	lsls	r1, r2, #5
 800edc0:	697a      	ldr	r2, [r7, #20]
 800edc2:	440a      	add	r2, r1
 800edc4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800edc8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800edcc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	015a      	lsls	r2, r3, #5
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	4413      	add	r3, r2
 800edd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ede4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800edec:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800edee:	693b      	ldr	r3, [r7, #16]
 800edf0:	015a      	lsls	r2, r3, #5
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	4413      	add	r3, r2
 800edf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800edfa:	461a      	mov	r2, r3
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800ee00:	2300      	movs	r3, #0
}
 800ee02:	4618      	mov	r0, r3
 800ee04:	371c      	adds	r7, #28
 800ee06:	46bd      	mov	sp, r7
 800ee08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0c:	4770      	bx	lr
 800ee0e:	bf00      	nop
 800ee10:	1ff80000 	.word	0x1ff80000

0800ee14 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b088      	sub	sp, #32
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800ee24:	2300      	movs	r3, #0
 800ee26:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f7fe ff92 	bl	800dd52 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ee2e:	2110      	movs	r1, #16
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f7fe ffeb 	bl	800de0c <USB_FlushTxFifo>
 800ee36:	4603      	mov	r3, r0
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d001      	beq.n	800ee40 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ee40:	6878      	ldr	r0, [r7, #4]
 800ee42:	f7ff f815 	bl	800de70 <USB_FlushRxFifo>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d001      	beq.n	800ee50 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800ee50:	2300      	movs	r3, #0
 800ee52:	61bb      	str	r3, [r7, #24]
 800ee54:	e01f      	b.n	800ee96 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800ee56:	69bb      	ldr	r3, [r7, #24]
 800ee58:	015a      	lsls	r2, r3, #5
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	4413      	add	r3, r2
 800ee5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800ee66:	693b      	ldr	r3, [r7, #16]
 800ee68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ee6c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ee74:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ee76:	693b      	ldr	r3, [r7, #16]
 800ee78:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ee7c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ee7e:	69bb      	ldr	r3, [r7, #24]
 800ee80:	015a      	lsls	r2, r3, #5
 800ee82:	697b      	ldr	r3, [r7, #20]
 800ee84:	4413      	add	r3, r2
 800ee86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	693b      	ldr	r3, [r7, #16]
 800ee8e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ee90:	69bb      	ldr	r3, [r7, #24]
 800ee92:	3301      	adds	r3, #1
 800ee94:	61bb      	str	r3, [r7, #24]
 800ee96:	69bb      	ldr	r3, [r7, #24]
 800ee98:	2b0f      	cmp	r3, #15
 800ee9a:	d9dc      	bls.n	800ee56 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	61bb      	str	r3, [r7, #24]
 800eea0:	e034      	b.n	800ef0c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800eea2:	69bb      	ldr	r3, [r7, #24]
 800eea4:	015a      	lsls	r2, r3, #5
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	4413      	add	r3, r2
 800eeaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800eeb2:	693b      	ldr	r3, [r7, #16]
 800eeb4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800eeb8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800eeba:	693b      	ldr	r3, [r7, #16]
 800eebc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800eec0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800eec2:	693b      	ldr	r3, [r7, #16]
 800eec4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800eec8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800eeca:	69bb      	ldr	r3, [r7, #24]
 800eecc:	015a      	lsls	r2, r3, #5
 800eece:	697b      	ldr	r3, [r7, #20]
 800eed0:	4413      	add	r3, r2
 800eed2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eed6:	461a      	mov	r2, r3
 800eed8:	693b      	ldr	r3, [r7, #16]
 800eeda:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	3301      	adds	r3, #1
 800eee0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800eee8:	d80c      	bhi.n	800ef04 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800eeea:	69bb      	ldr	r3, [r7, #24]
 800eeec:	015a      	lsls	r2, r3, #5
 800eeee:	697b      	ldr	r3, [r7, #20]
 800eef0:	4413      	add	r3, r2
 800eef2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eefc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ef00:	d0ec      	beq.n	800eedc <USB_StopHost+0xc8>
 800ef02:	e000      	b.n	800ef06 <USB_StopHost+0xf2>
        break;
 800ef04:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800ef06:	69bb      	ldr	r3, [r7, #24]
 800ef08:	3301      	adds	r3, #1
 800ef0a:	61bb      	str	r3, [r7, #24]
 800ef0c:	69bb      	ldr	r3, [r7, #24]
 800ef0e:	2b0f      	cmp	r3, #15
 800ef10:	d9c7      	bls.n	800eea2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ef18:	461a      	mov	r2, r3
 800ef1a:	f04f 33ff 	mov.w	r3, #4294967295
 800ef1e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f04f 32ff 	mov.w	r2, #4294967295
 800ef26:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f7fe ff01 	bl	800dd30 <USB_EnableGlobalInt>

  return ret;
 800ef2e:	7ffb      	ldrb	r3, [r7, #31]
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	3720      	adds	r7, #32
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}

0800ef38 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ef3c:	4904      	ldr	r1, [pc, #16]	@ (800ef50 <MX_FATFS_Init+0x18>)
 800ef3e:	4805      	ldr	r0, [pc, #20]	@ (800ef54 <MX_FATFS_Init+0x1c>)
 800ef40:	f002 fc64 	bl	801180c <FATFS_LinkDriver>
 800ef44:	4603      	mov	r3, r0
 800ef46:	461a      	mov	r2, r3
 800ef48:	4b03      	ldr	r3, [pc, #12]	@ (800ef58 <MX_FATFS_Init+0x20>)
 800ef4a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ef4c:	bf00      	nop
 800ef4e:	bd80      	pop	{r7, pc}
 800ef50:	20000edc 	.word	0x20000edc
 800ef54:	080155c4 	.word	0x080155c4
 800ef58:	20000ed8 	.word	0x20000ed8

0800ef5c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b082      	sub	sp, #8
 800ef60:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ef62:	2300      	movs	r3, #0
 800ef64:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ef66:	f000 f87b 	bl	800f060 <BSP_SD_IsDetected>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	d001      	beq.n	800ef74 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ef70:	2302      	movs	r3, #2
 800ef72:	e012      	b.n	800ef9a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ef74:	480b      	ldr	r0, [pc, #44]	@ (800efa4 <BSP_SD_Init+0x48>)
 800ef76:	f7fa fdc1 	bl	8009afc <HAL_SD_Init>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ef7e:	79fb      	ldrb	r3, [r7, #7]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d109      	bne.n	800ef98 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ef84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800ef88:	4806      	ldr	r0, [pc, #24]	@ (800efa4 <BSP_SD_Init+0x48>)
 800ef8a:	f7fb fa09 	bl	800a3a0 <HAL_SD_ConfigWideBusOperation>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d001      	beq.n	800ef98 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ef94:	2301      	movs	r3, #1
 800ef96:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ef98:	79fb      	ldrb	r3, [r7, #7]
}
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	3708      	adds	r7, #8
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
 800efa2:	bf00      	nop
 800efa4:	20000924 	.word	0x20000924

0800efa8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b086      	sub	sp, #24
 800efac:	af00      	add	r7, sp, #0
 800efae:	60f8      	str	r0, [r7, #12]
 800efb0:	60b9      	str	r1, [r7, #8]
 800efb2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800efb4:	2300      	movs	r3, #0
 800efb6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	68ba      	ldr	r2, [r7, #8]
 800efbc:	68f9      	ldr	r1, [r7, #12]
 800efbe:	4806      	ldr	r0, [pc, #24]	@ (800efd8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800efc0:	f7fa fe4c 	bl	8009c5c <HAL_SD_ReadBlocks_DMA>
 800efc4:	4603      	mov	r3, r0
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d001      	beq.n	800efce <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800efca:	2301      	movs	r3, #1
 800efcc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800efce:	7dfb      	ldrb	r3, [r7, #23]
}
 800efd0:	4618      	mov	r0, r3
 800efd2:	3718      	adds	r7, #24
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}
 800efd8:	20000924 	.word	0x20000924

0800efdc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b086      	sub	sp, #24
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	60f8      	str	r0, [r7, #12]
 800efe4:	60b9      	str	r1, [r7, #8]
 800efe6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800efe8:	2300      	movs	r3, #0
 800efea:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	68ba      	ldr	r2, [r7, #8]
 800eff0:	68f9      	ldr	r1, [r7, #12]
 800eff2:	4806      	ldr	r0, [pc, #24]	@ (800f00c <BSP_SD_WriteBlocks_DMA+0x30>)
 800eff4:	f7fa ff14 	bl	8009e20 <HAL_SD_WriteBlocks_DMA>
 800eff8:	4603      	mov	r3, r0
 800effa:	2b00      	cmp	r3, #0
 800effc:	d001      	beq.n	800f002 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800effe:	2301      	movs	r3, #1
 800f000:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f002:	7dfb      	ldrb	r3, [r7, #23]
}
 800f004:	4618      	mov	r0, r3
 800f006:	3718      	adds	r7, #24
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd80      	pop	{r7, pc}
 800f00c:	20000924 	.word	0x20000924

0800f010 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f014:	4805      	ldr	r0, [pc, #20]	@ (800f02c <BSP_SD_GetCardState+0x1c>)
 800f016:	f7fb fa5d 	bl	800a4d4 <HAL_SD_GetCardState>
 800f01a:	4603      	mov	r3, r0
 800f01c:	2b04      	cmp	r3, #4
 800f01e:	bf14      	ite	ne
 800f020:	2301      	movne	r3, #1
 800f022:	2300      	moveq	r3, #0
 800f024:	b2db      	uxtb	r3, r3
}
 800f026:	4618      	mov	r0, r3
 800f028:	bd80      	pop	{r7, pc}
 800f02a:	bf00      	nop
 800f02c:	20000924 	.word	0x20000924

0800f030 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b082      	sub	sp, #8
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800f038:	6879      	ldr	r1, [r7, #4]
 800f03a:	4803      	ldr	r0, [pc, #12]	@ (800f048 <BSP_SD_GetCardInfo+0x18>)
 800f03c:	f7fb f984 	bl	800a348 <HAL_SD_GetCardInfo>
}
 800f040:	bf00      	nop
 800f042:	3708      	adds	r7, #8
 800f044:	46bd      	mov	sp, r7
 800f046:	bd80      	pop	{r7, pc}
 800f048:	20000924 	.word	0x20000924

0800f04c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b082      	sub	sp, #8
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800f054:	f000 f9b2 	bl	800f3bc <BSP_SD_ReadCpltCallback>
}
 800f058:	bf00      	nop
 800f05a:	3708      	adds	r7, #8
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}

0800f060 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b082      	sub	sp, #8
 800f064:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f066:	2301      	movs	r3, #1
 800f068:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800f06a:	f000 f80b 	bl	800f084 <BSP_PlatformIsDetected>
 800f06e:	4603      	mov	r3, r0
 800f070:	2b00      	cmp	r3, #0
 800f072:	d101      	bne.n	800f078 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f074:	2300      	movs	r3, #0
 800f076:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f078:	79fb      	ldrb	r3, [r7, #7]
 800f07a:	b2db      	uxtb	r3, r3
}
 800f07c:	4618      	mov	r0, r3
 800f07e:	3708      	adds	r7, #8
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}

0800f084 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f084:	b580      	push	{r7, lr}
 800f086:	b082      	sub	sp, #8
 800f088:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f08a:	2301      	movs	r3, #1
 800f08c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f08e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f092:	4806      	ldr	r0, [pc, #24]	@ (800f0ac <BSP_PlatformIsDetected+0x28>)
 800f094:	f7f5 fef0 	bl	8004e78 <HAL_GPIO_ReadPin>
 800f098:	4603      	mov	r3, r0
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d001      	beq.n	800f0a2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800f0a2:	79fb      	ldrb	r3, [r7, #7]
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3708      	adds	r7, #8
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}
 800f0ac:	40020800 	.word	0x40020800

0800f0b0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b084      	sub	sp, #16
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800f0b8:	f002 fbf4 	bl	80118a4 <osKernelSysTick>
 800f0bc:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800f0be:	e006      	b.n	800f0ce <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f0c0:	f7ff ffa6 	bl	800f010 <BSP_SD_GetCardState>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d101      	bne.n	800f0ce <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	e009      	b.n	800f0e2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800f0ce:	f002 fbe9 	bl	80118a4 <osKernelSysTick>
 800f0d2:	4602      	mov	r2, r0
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	1ad3      	subs	r3, r2, r3
 800f0d8:	687a      	ldr	r2, [r7, #4]
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	d8f0      	bhi.n	800f0c0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800f0de:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	3710      	adds	r7, #16
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}
	...

0800f0ec <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b082      	sub	sp, #8
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f0f6:	4b0b      	ldr	r3, [pc, #44]	@ (800f124 <SD_CheckStatus+0x38>)
 800f0f8:	2201      	movs	r2, #1
 800f0fa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f0fc:	f7ff ff88 	bl	800f010 <BSP_SD_GetCardState>
 800f100:	4603      	mov	r3, r0
 800f102:	2b00      	cmp	r3, #0
 800f104:	d107      	bne.n	800f116 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f106:	4b07      	ldr	r3, [pc, #28]	@ (800f124 <SD_CheckStatus+0x38>)
 800f108:	781b      	ldrb	r3, [r3, #0]
 800f10a:	b2db      	uxtb	r3, r3
 800f10c:	f023 0301 	bic.w	r3, r3, #1
 800f110:	b2da      	uxtb	r2, r3
 800f112:	4b04      	ldr	r3, [pc, #16]	@ (800f124 <SD_CheckStatus+0x38>)
 800f114:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f116:	4b03      	ldr	r3, [pc, #12]	@ (800f124 <SD_CheckStatus+0x38>)
 800f118:	781b      	ldrb	r3, [r3, #0]
 800f11a:	b2db      	uxtb	r3, r3
}
 800f11c:	4618      	mov	r0, r3
 800f11e:	3708      	adds	r7, #8
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}
 800f124:	20000051 	.word	0x20000051

0800f128 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f128:	b590      	push	{r4, r7, lr}
 800f12a:	b087      	sub	sp, #28
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	4603      	mov	r3, r0
 800f130:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f132:	4b20      	ldr	r3, [pc, #128]	@ (800f1b4 <SD_initialize+0x8c>)
 800f134:	2201      	movs	r2, #1
 800f136:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800f138:	f002 fba8 	bl	801188c <osKernelRunning>
 800f13c:	4603      	mov	r3, r0
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d030      	beq.n	800f1a4 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800f142:	f7ff ff0b 	bl	800ef5c <BSP_SD_Init>
 800f146:	4603      	mov	r3, r0
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d107      	bne.n	800f15c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800f14c:	79fb      	ldrb	r3, [r7, #7]
 800f14e:	4618      	mov	r0, r3
 800f150:	f7ff ffcc 	bl	800f0ec <SD_CheckStatus>
 800f154:	4603      	mov	r3, r0
 800f156:	461a      	mov	r2, r3
 800f158:	4b16      	ldr	r3, [pc, #88]	@ (800f1b4 <SD_initialize+0x8c>)
 800f15a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800f15c:	4b15      	ldr	r3, [pc, #84]	@ (800f1b4 <SD_initialize+0x8c>)
 800f15e:	781b      	ldrb	r3, [r3, #0]
 800f160:	b2db      	uxtb	r3, r3
 800f162:	2b01      	cmp	r3, #1
 800f164:	d01e      	beq.n	800f1a4 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800f166:	4b14      	ldr	r3, [pc, #80]	@ (800f1b8 <SD_initialize+0x90>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d10e      	bne.n	800f18c <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800f16e:	4b13      	ldr	r3, [pc, #76]	@ (800f1bc <SD_initialize+0x94>)
 800f170:	f107 0408 	add.w	r4, r7, #8
 800f174:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f176:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800f17a:	f107 0308 	add.w	r3, r7, #8
 800f17e:	2100      	movs	r1, #0
 800f180:	4618      	mov	r0, r3
 800f182:	f002 fbff 	bl	8011984 <osMessageCreate>
 800f186:	4603      	mov	r3, r0
 800f188:	4a0b      	ldr	r2, [pc, #44]	@ (800f1b8 <SD_initialize+0x90>)
 800f18a:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800f18c:	4b0a      	ldr	r3, [pc, #40]	@ (800f1b8 <SD_initialize+0x90>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d107      	bne.n	800f1a4 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800f194:	4b07      	ldr	r3, [pc, #28]	@ (800f1b4 <SD_initialize+0x8c>)
 800f196:	781b      	ldrb	r3, [r3, #0]
 800f198:	b2db      	uxtb	r3, r3
 800f19a:	f043 0301 	orr.w	r3, r3, #1
 800f19e:	b2da      	uxtb	r2, r3
 800f1a0:	4b04      	ldr	r3, [pc, #16]	@ (800f1b4 <SD_initialize+0x8c>)
 800f1a2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800f1a4:	4b03      	ldr	r3, [pc, #12]	@ (800f1b4 <SD_initialize+0x8c>)
 800f1a6:	781b      	ldrb	r3, [r3, #0]
 800f1a8:	b2db      	uxtb	r3, r3
}
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	371c      	adds	r7, #28
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	bd90      	pop	{r4, r7, pc}
 800f1b2:	bf00      	nop
 800f1b4:	20000051 	.word	0x20000051
 800f1b8:	20000ee0 	.word	0x20000ee0
 800f1bc:	08015558 	.word	0x08015558

0800f1c0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b082      	sub	sp, #8
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f1ca:	79fb      	ldrb	r3, [r7, #7]
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f7ff ff8d 	bl	800f0ec <SD_CheckStatus>
 800f1d2:	4603      	mov	r3, r0
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3708      	adds	r7, #8
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}

0800f1dc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b08a      	sub	sp, #40	@ 0x28
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	60b9      	str	r1, [r7, #8]
 800f1e4:	607a      	str	r2, [r7, #4]
 800f1e6:	603b      	str	r3, [r7, #0]
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f1f2:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f1f6:	f7ff ff5b 	bl	800f0b0 <SD_CheckStatusWithTimeout>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	da02      	bge.n	800f206 <SD_read+0x2a>
  {
    return res;
 800f200:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f204:	e032      	b.n	800f26c <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800f206:	683a      	ldr	r2, [r7, #0]
 800f208:	6879      	ldr	r1, [r7, #4]
 800f20a:	68b8      	ldr	r0, [r7, #8]
 800f20c:	f7ff fecc 	bl	800efa8 <BSP_SD_ReadBlocks_DMA>
 800f210:	4603      	mov	r3, r0
 800f212:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800f216:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d124      	bne.n	800f268 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800f21e:	4b15      	ldr	r3, [pc, #84]	@ (800f274 <SD_read+0x98>)
 800f220:	6819      	ldr	r1, [r3, #0]
 800f222:	f107 0314 	add.w	r3, r7, #20
 800f226:	f247 5230 	movw	r2, #30000	@ 0x7530
 800f22a:	4618      	mov	r0, r3
 800f22c:	f002 fc12 	bl	8011a54 <osMessageGet>

    if (event.status == osEventMessage)
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	2b10      	cmp	r3, #16
 800f234:	d118      	bne.n	800f268 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800f236:	69bb      	ldr	r3, [r7, #24]
 800f238:	2b01      	cmp	r3, #1
 800f23a:	d115      	bne.n	800f268 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800f23c:	f002 fb32 	bl	80118a4 <osKernelSysTick>
 800f240:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800f242:	e008      	b.n	800f256 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f244:	f7ff fee4 	bl	800f010 <BSP_SD_GetCardState>
 800f248:	4603      	mov	r3, r0
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d103      	bne.n	800f256 <SD_read+0x7a>
              {
                res = RES_OK;
 800f24e:	2300      	movs	r3, #0
 800f250:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800f254:	e008      	b.n	800f268 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800f256:	f002 fb25 	bl	80118a4 <osKernelSysTick>
 800f25a:	4602      	mov	r2, r0
 800f25c:	6a3b      	ldr	r3, [r7, #32]
 800f25e:	1ad3      	subs	r3, r2, r3
 800f260:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f264:	4293      	cmp	r3, r2
 800f266:	d9ed      	bls.n	800f244 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800f268:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	3728      	adds	r7, #40	@ 0x28
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}
 800f274:	20000ee0 	.word	0x20000ee0

0800f278 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b08a      	sub	sp, #40	@ 0x28
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	60b9      	str	r1, [r7, #8]
 800f280:	607a      	str	r2, [r7, #4]
 800f282:	603b      	str	r3, [r7, #0]
 800f284:	4603      	mov	r3, r0
 800f286:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f288:	2301      	movs	r3, #1
 800f28a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f28e:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f292:	f7ff ff0d 	bl	800f0b0 <SD_CheckStatusWithTimeout>
 800f296:	4603      	mov	r3, r0
 800f298:	2b00      	cmp	r3, #0
 800f29a:	da02      	bge.n	800f2a2 <SD_write+0x2a>
  {
    return res;
 800f29c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f2a0:	e02e      	b.n	800f300 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800f2a2:	683a      	ldr	r2, [r7, #0]
 800f2a4:	6879      	ldr	r1, [r7, #4]
 800f2a6:	68b8      	ldr	r0, [r7, #8]
 800f2a8:	f7ff fe98 	bl	800efdc <BSP_SD_WriteBlocks_DMA>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d124      	bne.n	800f2fc <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800f2b2:	4b15      	ldr	r3, [pc, #84]	@ (800f308 <SD_write+0x90>)
 800f2b4:	6819      	ldr	r1, [r3, #0]
 800f2b6:	f107 0314 	add.w	r3, r7, #20
 800f2ba:	f247 5230 	movw	r2, #30000	@ 0x7530
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f002 fbc8 	bl	8011a54 <osMessageGet>

    if (event.status == osEventMessage)
 800f2c4:	697b      	ldr	r3, [r7, #20]
 800f2c6:	2b10      	cmp	r3, #16
 800f2c8:	d118      	bne.n	800f2fc <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800f2ca:	69bb      	ldr	r3, [r7, #24]
 800f2cc:	2b02      	cmp	r3, #2
 800f2ce:	d115      	bne.n	800f2fc <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800f2d0:	f002 fae8 	bl	80118a4 <osKernelSysTick>
 800f2d4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800f2d6:	e008      	b.n	800f2ea <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f2d8:	f7ff fe9a 	bl	800f010 <BSP_SD_GetCardState>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d103      	bne.n	800f2ea <SD_write+0x72>
          {
            res = RES_OK;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800f2e8:	e008      	b.n	800f2fc <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800f2ea:	f002 fadb 	bl	80118a4 <osKernelSysTick>
 800f2ee:	4602      	mov	r2, r0
 800f2f0:	6a3b      	ldr	r3, [r7, #32]
 800f2f2:	1ad3      	subs	r3, r2, r3
 800f2f4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f2f8:	4293      	cmp	r3, r2
 800f2fa:	d9ed      	bls.n	800f2d8 <SD_write+0x60>
    }

  }
#endif

  return res;
 800f2fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f300:	4618      	mov	r0, r3
 800f302:	3728      	adds	r7, #40	@ 0x28
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}
 800f308:	20000ee0 	.word	0x20000ee0

0800f30c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b08c      	sub	sp, #48	@ 0x30
 800f310:	af00      	add	r7, sp, #0
 800f312:	4603      	mov	r3, r0
 800f314:	603a      	str	r2, [r7, #0]
 800f316:	71fb      	strb	r3, [r7, #7]
 800f318:	460b      	mov	r3, r1
 800f31a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f31c:	2301      	movs	r3, #1
 800f31e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f322:	4b25      	ldr	r3, [pc, #148]	@ (800f3b8 <SD_ioctl+0xac>)
 800f324:	781b      	ldrb	r3, [r3, #0]
 800f326:	b2db      	uxtb	r3, r3
 800f328:	f003 0301 	and.w	r3, r3, #1
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d001      	beq.n	800f334 <SD_ioctl+0x28>
 800f330:	2303      	movs	r3, #3
 800f332:	e03c      	b.n	800f3ae <SD_ioctl+0xa2>

  switch (cmd)
 800f334:	79bb      	ldrb	r3, [r7, #6]
 800f336:	2b03      	cmp	r3, #3
 800f338:	d834      	bhi.n	800f3a4 <SD_ioctl+0x98>
 800f33a:	a201      	add	r2, pc, #4	@ (adr r2, 800f340 <SD_ioctl+0x34>)
 800f33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f340:	0800f351 	.word	0x0800f351
 800f344:	0800f359 	.word	0x0800f359
 800f348:	0800f371 	.word	0x0800f371
 800f34c:	0800f38b 	.word	0x0800f38b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f350:	2300      	movs	r3, #0
 800f352:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f356:	e028      	b.n	800f3aa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f358:	f107 030c 	add.w	r3, r7, #12
 800f35c:	4618      	mov	r0, r3
 800f35e:	f7ff fe67 	bl	800f030 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f368:	2300      	movs	r3, #0
 800f36a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f36e:	e01c      	b.n	800f3aa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f370:	f107 030c 	add.w	r3, r7, #12
 800f374:	4618      	mov	r0, r3
 800f376:	f7ff fe5b 	bl	800f030 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f37a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f37c:	b29a      	uxth	r2, r3
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f382:	2300      	movs	r3, #0
 800f384:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f388:	e00f      	b.n	800f3aa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f38a:	f107 030c 	add.w	r3, r7, #12
 800f38e:	4618      	mov	r0, r3
 800f390:	f7ff fe4e 	bl	800f030 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f396:	0a5a      	lsrs	r2, r3, #9
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f39c:	2300      	movs	r3, #0
 800f39e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f3a2:	e002      	b.n	800f3aa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f3a4:	2304      	movs	r3, #4
 800f3a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800f3aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	3730      	adds	r7, #48	@ 0x30
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}
 800f3b6:	bf00      	nop
 800f3b8:	20000051 	.word	0x20000051

0800f3bc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800f3c0:	4b04      	ldr	r3, [pc, #16]	@ (800f3d4 <BSP_SD_ReadCpltCallback+0x18>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	2101      	movs	r1, #1
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f002 fb03 	bl	80119d4 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800f3ce:	bf00      	nop
 800f3d0:	bd80      	pop	{r7, pc}
 800f3d2:	bf00      	nop
 800f3d4:	20000ee0 	.word	0x20000ee0

0800f3d8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800f3d8:	b590      	push	{r4, r7, lr}
 800f3da:	b089      	sub	sp, #36	@ 0x24
 800f3dc:	af04      	add	r7, sp, #16
 800f3de:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800f3e0:	2301      	movs	r3, #1
 800f3e2:	2202      	movs	r2, #2
 800f3e4:	2102      	movs	r1, #2
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f000 fcbd 	bl	800fd66 <USBH_FindInterface>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800f3f0:	7bfb      	ldrb	r3, [r7, #15]
 800f3f2:	2bff      	cmp	r3, #255	@ 0xff
 800f3f4:	d002      	beq.n	800f3fc <USBH_CDC_InterfaceInit+0x24>
 800f3f6:	7bfb      	ldrb	r3, [r7, #15]
 800f3f8:	2b01      	cmp	r3, #1
 800f3fa:	d901      	bls.n	800f400 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800f3fc:	2302      	movs	r3, #2
 800f3fe:	e13d      	b.n	800f67c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800f400:	7bfb      	ldrb	r3, [r7, #15]
 800f402:	4619      	mov	r1, r3
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f000 fc92 	bl	800fd2e <USBH_SelectInterface>
 800f40a:	4603      	mov	r3, r0
 800f40c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800f40e:	7bbb      	ldrb	r3, [r7, #14]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d001      	beq.n	800f418 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800f414:	2302      	movs	r3, #2
 800f416:	e131      	b.n	800f67c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800f41e:	2050      	movs	r0, #80	@ 0x50
 800f420:	f005 f898 	bl	8014554 <malloc>
 800f424:	4603      	mov	r3, r0
 800f426:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f42e:	69db      	ldr	r3, [r3, #28]
 800f430:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d101      	bne.n	800f43c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800f438:	2302      	movs	r3, #2
 800f43a:	e11f      	b.n	800f67c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800f43c:	2250      	movs	r2, #80	@ 0x50
 800f43e:	2100      	movs	r1, #0
 800f440:	68b8      	ldr	r0, [r7, #8]
 800f442:	f005 f9b7 	bl	80147b4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800f446:	7bfb      	ldrb	r3, [r7, #15]
 800f448:	687a      	ldr	r2, [r7, #4]
 800f44a:	211a      	movs	r1, #26
 800f44c:	fb01 f303 	mul.w	r3, r1, r3
 800f450:	4413      	add	r3, r2
 800f452:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f456:	781b      	ldrb	r3, [r3, #0]
 800f458:	b25b      	sxtb	r3, r3
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	da15      	bge.n	800f48a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f45e:	7bfb      	ldrb	r3, [r7, #15]
 800f460:	687a      	ldr	r2, [r7, #4]
 800f462:	211a      	movs	r1, #26
 800f464:	fb01 f303 	mul.w	r3, r1, r3
 800f468:	4413      	add	r3, r2
 800f46a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f46e:	781a      	ldrb	r2, [r3, #0]
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f474:	7bfb      	ldrb	r3, [r7, #15]
 800f476:	687a      	ldr	r2, [r7, #4]
 800f478:	211a      	movs	r1, #26
 800f47a:	fb01 f303 	mul.w	r3, r1, r3
 800f47e:	4413      	add	r3, r2
 800f480:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800f484:	881a      	ldrh	r2, [r3, #0]
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800f48a:	68bb      	ldr	r3, [r7, #8]
 800f48c:	785b      	ldrb	r3, [r3, #1]
 800f48e:	4619      	mov	r1, r3
 800f490:	6878      	ldr	r0, [r7, #4]
 800f492:	f002 f90c 	bl	80116ae <USBH_AllocPipe>
 800f496:	4603      	mov	r3, r0
 800f498:	461a      	mov	r2, r3
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	7819      	ldrb	r1, [r3, #0]
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	7858      	ldrb	r0, [r3, #1]
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f4b2:	68ba      	ldr	r2, [r7, #8]
 800f4b4:	8952      	ldrh	r2, [r2, #10]
 800f4b6:	9202      	str	r2, [sp, #8]
 800f4b8:	2203      	movs	r2, #3
 800f4ba:	9201      	str	r2, [sp, #4]
 800f4bc:	9300      	str	r3, [sp, #0]
 800f4be:	4623      	mov	r3, r4
 800f4c0:	4602      	mov	r2, r0
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f002 f8c4 	bl	8011650 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800f4c8:	68bb      	ldr	r3, [r7, #8]
 800f4ca:	781b      	ldrb	r3, [r3, #0]
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	4619      	mov	r1, r3
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	f004 ffb9 	bl	8014448 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	2200      	movs	r2, #0
 800f4da:	210a      	movs	r1, #10
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f000 fc42 	bl	800fd66 <USBH_FindInterface>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800f4e6:	7bfb      	ldrb	r3, [r7, #15]
 800f4e8:	2bff      	cmp	r3, #255	@ 0xff
 800f4ea:	d002      	beq.n	800f4f2 <USBH_CDC_InterfaceInit+0x11a>
 800f4ec:	7bfb      	ldrb	r3, [r7, #15]
 800f4ee:	2b01      	cmp	r3, #1
 800f4f0:	d901      	bls.n	800f4f6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800f4f2:	2302      	movs	r3, #2
 800f4f4:	e0c2      	b.n	800f67c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800f4f6:	7bfb      	ldrb	r3, [r7, #15]
 800f4f8:	687a      	ldr	r2, [r7, #4]
 800f4fa:	211a      	movs	r1, #26
 800f4fc:	fb01 f303 	mul.w	r3, r1, r3
 800f500:	4413      	add	r3, r2
 800f502:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f506:	781b      	ldrb	r3, [r3, #0]
 800f508:	b25b      	sxtb	r3, r3
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	da16      	bge.n	800f53c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f50e:	7bfb      	ldrb	r3, [r7, #15]
 800f510:	687a      	ldr	r2, [r7, #4]
 800f512:	211a      	movs	r1, #26
 800f514:	fb01 f303 	mul.w	r3, r1, r3
 800f518:	4413      	add	r3, r2
 800f51a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f51e:	781a      	ldrb	r2, [r3, #0]
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f524:	7bfb      	ldrb	r3, [r7, #15]
 800f526:	687a      	ldr	r2, [r7, #4]
 800f528:	211a      	movs	r1, #26
 800f52a:	fb01 f303 	mul.w	r3, r1, r3
 800f52e:	4413      	add	r3, r2
 800f530:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800f534:	881a      	ldrh	r2, [r3, #0]
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	835a      	strh	r2, [r3, #26]
 800f53a:	e015      	b.n	800f568 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f53c:	7bfb      	ldrb	r3, [r7, #15]
 800f53e:	687a      	ldr	r2, [r7, #4]
 800f540:	211a      	movs	r1, #26
 800f542:	fb01 f303 	mul.w	r3, r1, r3
 800f546:	4413      	add	r3, r2
 800f548:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f54c:	781a      	ldrb	r2, [r3, #0]
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f552:	7bfb      	ldrb	r3, [r7, #15]
 800f554:	687a      	ldr	r2, [r7, #4]
 800f556:	211a      	movs	r1, #26
 800f558:	fb01 f303 	mul.w	r3, r1, r3
 800f55c:	4413      	add	r3, r2
 800f55e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800f562:	881a      	ldrh	r2, [r3, #0]
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800f568:	7bfb      	ldrb	r3, [r7, #15]
 800f56a:	687a      	ldr	r2, [r7, #4]
 800f56c:	211a      	movs	r1, #26
 800f56e:	fb01 f303 	mul.w	r3, r1, r3
 800f572:	4413      	add	r3, r2
 800f574:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800f578:	781b      	ldrb	r3, [r3, #0]
 800f57a:	b25b      	sxtb	r3, r3
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	da16      	bge.n	800f5ae <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f580:	7bfb      	ldrb	r3, [r7, #15]
 800f582:	687a      	ldr	r2, [r7, #4]
 800f584:	211a      	movs	r1, #26
 800f586:	fb01 f303 	mul.w	r3, r1, r3
 800f58a:	4413      	add	r3, r2
 800f58c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800f590:	781a      	ldrb	r2, [r3, #0]
 800f592:	68bb      	ldr	r3, [r7, #8]
 800f594:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f596:	7bfb      	ldrb	r3, [r7, #15]
 800f598:	687a      	ldr	r2, [r7, #4]
 800f59a:	211a      	movs	r1, #26
 800f59c:	fb01 f303 	mul.w	r3, r1, r3
 800f5a0:	4413      	add	r3, r2
 800f5a2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800f5a6:	881a      	ldrh	r2, [r3, #0]
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	835a      	strh	r2, [r3, #26]
 800f5ac:	e015      	b.n	800f5da <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f5ae:	7bfb      	ldrb	r3, [r7, #15]
 800f5b0:	687a      	ldr	r2, [r7, #4]
 800f5b2:	211a      	movs	r1, #26
 800f5b4:	fb01 f303 	mul.w	r3, r1, r3
 800f5b8:	4413      	add	r3, r2
 800f5ba:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800f5be:	781a      	ldrb	r2, [r3, #0]
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f5c4:	7bfb      	ldrb	r3, [r7, #15]
 800f5c6:	687a      	ldr	r2, [r7, #4]
 800f5c8:	211a      	movs	r1, #26
 800f5ca:	fb01 f303 	mul.w	r3, r1, r3
 800f5ce:	4413      	add	r3, r2
 800f5d0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800f5d4:	881a      	ldrh	r2, [r3, #0]
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	7b9b      	ldrb	r3, [r3, #14]
 800f5de:	4619      	mov	r1, r3
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f002 f864 	bl	80116ae <USBH_AllocPipe>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	461a      	mov	r2, r3
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	7bdb      	ldrb	r3, [r3, #15]
 800f5f2:	4619      	mov	r1, r3
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f002 f85a 	bl	80116ae <USBH_AllocPipe>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	461a      	mov	r2, r3
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	7b59      	ldrb	r1, [r3, #13]
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	7b98      	ldrb	r0, [r3, #14]
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f616:	68ba      	ldr	r2, [r7, #8]
 800f618:	8b12      	ldrh	r2, [r2, #24]
 800f61a:	9202      	str	r2, [sp, #8]
 800f61c:	2202      	movs	r2, #2
 800f61e:	9201      	str	r2, [sp, #4]
 800f620:	9300      	str	r3, [sp, #0]
 800f622:	4623      	mov	r3, r4
 800f624:	4602      	mov	r2, r0
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	f002 f812 	bl	8011650 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	7b19      	ldrb	r1, [r3, #12]
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	7bd8      	ldrb	r0, [r3, #15]
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f640:	68ba      	ldr	r2, [r7, #8]
 800f642:	8b52      	ldrh	r2, [r2, #26]
 800f644:	9202      	str	r2, [sp, #8]
 800f646:	2202      	movs	r2, #2
 800f648:	9201      	str	r2, [sp, #4]
 800f64a:	9300      	str	r3, [sp, #0]
 800f64c:	4623      	mov	r3, r4
 800f64e:	4602      	mov	r2, r0
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f001 fffd 	bl	8011650 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800f656:	68bb      	ldr	r3, [r7, #8]
 800f658:	2200      	movs	r2, #0
 800f65a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	7b5b      	ldrb	r3, [r3, #13]
 800f662:	2200      	movs	r2, #0
 800f664:	4619      	mov	r1, r3
 800f666:	6878      	ldr	r0, [r7, #4]
 800f668:	f004 feee 	bl	8014448 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	7b1b      	ldrb	r3, [r3, #12]
 800f670:	2200      	movs	r2, #0
 800f672:	4619      	mov	r1, r3
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f004 fee7 	bl	8014448 <USBH_LL_SetToggle>

  return USBH_OK;
 800f67a:	2300      	movs	r3, #0
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	3714      	adds	r7, #20
 800f680:	46bd      	mov	sp, r7
 800f682:	bd90      	pop	{r4, r7, pc}

0800f684 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b084      	sub	sp, #16
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f692:	69db      	ldr	r3, [r3, #28]
 800f694:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	781b      	ldrb	r3, [r3, #0]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d00e      	beq.n	800f6bc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	781b      	ldrb	r3, [r3, #0]
 800f6a2:	4619      	mov	r1, r3
 800f6a4:	6878      	ldr	r0, [r7, #4]
 800f6a6:	f001 fff2 	bl	801168e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	781b      	ldrb	r3, [r3, #0]
 800f6ae:	4619      	mov	r1, r3
 800f6b0:	6878      	ldr	r0, [r7, #4]
 800f6b2:	f002 f81d 	bl	80116f0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	7b1b      	ldrb	r3, [r3, #12]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d00e      	beq.n	800f6e2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	7b1b      	ldrb	r3, [r3, #12]
 800f6c8:	4619      	mov	r1, r3
 800f6ca:	6878      	ldr	r0, [r7, #4]
 800f6cc:	f001 ffdf 	bl	801168e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	7b1b      	ldrb	r3, [r3, #12]
 800f6d4:	4619      	mov	r1, r3
 800f6d6:	6878      	ldr	r0, [r7, #4]
 800f6d8:	f002 f80a 	bl	80116f0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	2200      	movs	r2, #0
 800f6e0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	7b5b      	ldrb	r3, [r3, #13]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d00e      	beq.n	800f708 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	7b5b      	ldrb	r3, [r3, #13]
 800f6ee:	4619      	mov	r1, r3
 800f6f0:	6878      	ldr	r0, [r7, #4]
 800f6f2:	f001 ffcc 	bl	801168e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	7b5b      	ldrb	r3, [r3, #13]
 800f6fa:	4619      	mov	r1, r3
 800f6fc:	6878      	ldr	r0, [r7, #4]
 800f6fe:	f001 fff7 	bl	80116f0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	2200      	movs	r2, #0
 800f706:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f70e:	69db      	ldr	r3, [r3, #28]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d00b      	beq.n	800f72c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f71a:	69db      	ldr	r3, [r3, #28]
 800f71c:	4618      	mov	r0, r3
 800f71e:	f004 ff21 	bl	8014564 <free>
    phost->pActiveClass->pData = 0U;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f728:	2200      	movs	r2, #0
 800f72a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800f72c:	2300      	movs	r3, #0
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3710      	adds	r7, #16
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}

0800f736 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800f736:	b580      	push	{r7, lr}
 800f738:	b084      	sub	sp, #16
 800f73a:	af00      	add	r7, sp, #0
 800f73c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f744:	69db      	ldr	r3, [r3, #28]
 800f746:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	3340      	adds	r3, #64	@ 0x40
 800f74c:	4619      	mov	r1, r3
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f000 f8b1 	bl	800f8b6 <GetLineCoding>
 800f754:	4603      	mov	r3, r0
 800f756:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800f758:	7afb      	ldrb	r3, [r7, #11]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d105      	bne.n	800f76a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f764:	2102      	movs	r1, #2
 800f766:	6878      	ldr	r0, [r7, #4]
 800f768:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800f76a:	7afb      	ldrb	r3, [r7, #11]
}
 800f76c:	4618      	mov	r0, r3
 800f76e:	3710      	adds	r7, #16
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}

0800f774 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b084      	sub	sp, #16
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800f77c:	2301      	movs	r3, #1
 800f77e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800f780:	2300      	movs	r3, #0
 800f782:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f78a:	69db      	ldr	r3, [r3, #28]
 800f78c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800f794:	2b04      	cmp	r3, #4
 800f796:	d877      	bhi.n	800f888 <USBH_CDC_Process+0x114>
 800f798:	a201      	add	r2, pc, #4	@ (adr r2, 800f7a0 <USBH_CDC_Process+0x2c>)
 800f79a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f79e:	bf00      	nop
 800f7a0:	0800f7b5 	.word	0x0800f7b5
 800f7a4:	0800f7bb 	.word	0x0800f7bb
 800f7a8:	0800f7eb 	.word	0x0800f7eb
 800f7ac:	0800f85f 	.word	0x0800f85f
 800f7b0:	0800f86d 	.word	0x0800f86d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	73fb      	strb	r3, [r7, #15]
      break;
 800f7b8:	e06d      	b.n	800f896 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f7be:	4619      	mov	r1, r3
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f000 f897 	bl	800f8f4 <SetLineCoding>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f7ca:	7bbb      	ldrb	r3, [r7, #14]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d104      	bne.n	800f7da <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	2202      	movs	r2, #2
 800f7d4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800f7d8:	e058      	b.n	800f88c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800f7da:	7bbb      	ldrb	r3, [r7, #14]
 800f7dc:	2b01      	cmp	r3, #1
 800f7de:	d055      	beq.n	800f88c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	2204      	movs	r2, #4
 800f7e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800f7e8:	e050      	b.n	800f88c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	3340      	adds	r3, #64	@ 0x40
 800f7ee:	4619      	mov	r1, r3
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	f000 f860 	bl	800f8b6 <GetLineCoding>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f7fa:	7bbb      	ldrb	r3, [r7, #14]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d126      	bne.n	800f84e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800f800:	68bb      	ldr	r3, [r7, #8]
 800f802:	2200      	movs	r2, #0
 800f804:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f812:	791b      	ldrb	r3, [r3, #4]
 800f814:	429a      	cmp	r2, r3
 800f816:	d13b      	bne.n	800f890 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f822:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f824:	429a      	cmp	r2, r3
 800f826:	d133      	bne.n	800f890 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f828:	68bb      	ldr	r3, [r7, #8]
 800f82a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f832:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f834:	429a      	cmp	r2, r3
 800f836:	d12b      	bne.n	800f890 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800f838:	68bb      	ldr	r3, [r7, #8]
 800f83a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f840:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f842:	429a      	cmp	r2, r3
 800f844:	d124      	bne.n	800f890 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	f000 f96a 	bl	800fb20 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800f84c:	e020      	b.n	800f890 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800f84e:	7bbb      	ldrb	r3, [r7, #14]
 800f850:	2b01      	cmp	r3, #1
 800f852:	d01d      	beq.n	800f890 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800f854:	68bb      	ldr	r3, [r7, #8]
 800f856:	2204      	movs	r2, #4
 800f858:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800f85c:	e018      	b.n	800f890 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f000 f867 	bl	800f932 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f000 f8e6 	bl	800fa36 <CDC_ProcessReception>
      break;
 800f86a:	e014      	b.n	800f896 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800f86c:	2100      	movs	r1, #0
 800f86e:	6878      	ldr	r0, [r7, #4]
 800f870:	f001 f8ff 	bl	8010a72 <USBH_ClrFeature>
 800f874:	4603      	mov	r3, r0
 800f876:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f878:	7bbb      	ldrb	r3, [r7, #14]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d10a      	bne.n	800f894 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800f87e:	68bb      	ldr	r3, [r7, #8]
 800f880:	2200      	movs	r2, #0
 800f882:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800f886:	e005      	b.n	800f894 <USBH_CDC_Process+0x120>

    default:
      break;
 800f888:	bf00      	nop
 800f88a:	e004      	b.n	800f896 <USBH_CDC_Process+0x122>
      break;
 800f88c:	bf00      	nop
 800f88e:	e002      	b.n	800f896 <USBH_CDC_Process+0x122>
      break;
 800f890:	bf00      	nop
 800f892:	e000      	b.n	800f896 <USBH_CDC_Process+0x122>
      break;
 800f894:	bf00      	nop

  }

  return status;
 800f896:	7bfb      	ldrb	r3, [r7, #15]
}
 800f898:	4618      	mov	r0, r3
 800f89a:	3710      	adds	r7, #16
 800f89c:	46bd      	mov	sp, r7
 800f89e:	bd80      	pop	{r7, pc}

0800f8a0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800f8a0:	b480      	push	{r7}
 800f8a2:	b083      	sub	sp, #12
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800f8a8:	2300      	movs	r3, #0
}
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	370c      	adds	r7, #12
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b4:	4770      	bx	lr

0800f8b6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800f8b6:	b580      	push	{r7, lr}
 800f8b8:	b082      	sub	sp, #8
 800f8ba:	af00      	add	r7, sp, #0
 800f8bc:	6078      	str	r0, [r7, #4]
 800f8be:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	22a1      	movs	r2, #161	@ 0xa1
 800f8c4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2221      	movs	r2, #33	@ 0x21
 800f8ca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2207      	movs	r2, #7
 800f8dc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	2207      	movs	r2, #7
 800f8e2:	4619      	mov	r1, r3
 800f8e4:	6878      	ldr	r0, [r7, #4]
 800f8e6:	f001 fbf9 	bl	80110dc <USBH_CtlReq>
 800f8ea:	4603      	mov	r3, r0
}
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	3708      	adds	r7, #8
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b082      	sub	sp, #8
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
 800f8fc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2221      	movs	r2, #33	@ 0x21
 800f902:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2220      	movs	r2, #32
 800f908:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	2200      	movs	r2, #0
 800f90e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2200      	movs	r2, #0
 800f914:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2207      	movs	r2, #7
 800f91a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	2207      	movs	r2, #7
 800f920:	4619      	mov	r1, r3
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f001 fbda 	bl	80110dc <USBH_CtlReq>
 800f928:	4603      	mov	r3, r0
}
 800f92a:	4618      	mov	r0, r3
 800f92c:	3708      	adds	r7, #8
 800f92e:	46bd      	mov	sp, r7
 800f930:	bd80      	pop	{r7, pc}

0800f932 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800f932:	b580      	push	{r7, lr}
 800f934:	b086      	sub	sp, #24
 800f936:	af02      	add	r7, sp, #8
 800f938:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f940:	69db      	ldr	r3, [r3, #28]
 800f942:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f944:	2300      	movs	r3, #0
 800f946:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800f94e:	2b01      	cmp	r3, #1
 800f950:	d002      	beq.n	800f958 <CDC_ProcessTransmission+0x26>
 800f952:	2b02      	cmp	r3, #2
 800f954:	d023      	beq.n	800f99e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800f956:	e06a      	b.n	800fa2e <CDC_ProcessTransmission+0xfc>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f95c:	68fa      	ldr	r2, [r7, #12]
 800f95e:	8b12      	ldrh	r2, [r2, #24]
 800f960:	4293      	cmp	r3, r2
 800f962:	d90b      	bls.n	800f97c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	69d9      	ldr	r1, [r3, #28]
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	8b1a      	ldrh	r2, [r3, #24]
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	7b5b      	ldrb	r3, [r3, #13]
 800f970:	2001      	movs	r0, #1
 800f972:	9000      	str	r0, [sp, #0]
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f001 fe28 	bl	80115ca <USBH_BulkSendData>
 800f97a:	e00b      	b.n	800f994 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800f984:	b29a      	uxth	r2, r3
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	7b5b      	ldrb	r3, [r3, #13]
 800f98a:	2001      	movs	r0, #1
 800f98c:	9000      	str	r0, [sp, #0]
 800f98e:	6878      	ldr	r0, [r7, #4]
 800f990:	f001 fe1b 	bl	80115ca <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	2202      	movs	r2, #2
 800f998:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800f99c:	e047      	b.n	800fa2e <CDC_ProcessTransmission+0xfc>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	7b5b      	ldrb	r3, [r3, #13]
 800f9a2:	4619      	mov	r1, r3
 800f9a4:	6878      	ldr	r0, [r7, #4]
 800f9a6:	f004 fd25 	bl	80143f4 <USBH_LL_GetURBState>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800f9ae:	7afb      	ldrb	r3, [r7, #11]
 800f9b0:	2b01      	cmp	r3, #1
 800f9b2:	d12e      	bne.n	800fa12 <CDC_ProcessTransmission+0xe0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9b8:	68fa      	ldr	r2, [r7, #12]
 800f9ba:	8b12      	ldrh	r2, [r2, #24]
 800f9bc:	4293      	cmp	r3, r2
 800f9be:	d90e      	bls.n	800f9de <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9c4:	68fa      	ldr	r2, [r7, #12]
 800f9c6:	8b12      	ldrh	r2, [r2, #24]
 800f9c8:	1a9a      	subs	r2, r3, r2
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	69db      	ldr	r3, [r3, #28]
 800f9d2:	68fa      	ldr	r2, [r7, #12]
 800f9d4:	8b12      	ldrh	r2, [r2, #24]
 800f9d6:	441a      	add	r2, r3
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	61da      	str	r2, [r3, #28]
 800f9dc:	e002      	b.n	800f9e4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d004      	beq.n	800f9f6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	2201      	movs	r2, #1
 800f9f0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800f9f4:	e006      	b.n	800fa04 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f000 f87a 	bl	800faf8 <USBH_CDC_TransmitCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 800fa04:	2300      	movs	r3, #0
 800fa06:	2200      	movs	r2, #0
 800fa08:	2104      	movs	r1, #4
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	f000 febc 	bl	8010788 <USBH_OS_PutMessage>
      break;
 800fa10:	e00c      	b.n	800fa2c <CDC_ProcessTransmission+0xfa>
        if (URB_Status == USBH_URB_NOTREADY)
 800fa12:	7afb      	ldrb	r3, [r7, #11]
 800fa14:	2b02      	cmp	r3, #2
 800fa16:	d109      	bne.n	800fa2c <CDC_ProcessTransmission+0xfa>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	2201      	movs	r2, #1
 800fa1c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 800fa20:	2300      	movs	r3, #0
 800fa22:	2200      	movs	r2, #0
 800fa24:	2104      	movs	r1, #4
 800fa26:	6878      	ldr	r0, [r7, #4]
 800fa28:	f000 feae 	bl	8010788 <USBH_OS_PutMessage>
      break;
 800fa2c:	bf00      	nop
  }
}
 800fa2e:	bf00      	nop
 800fa30:	3710      	adds	r7, #16
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}

0800fa36 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800fa36:	b580      	push	{r7, lr}
 800fa38:	b086      	sub	sp, #24
 800fa3a:	af00      	add	r7, sp, #0
 800fa3c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fa44:	69db      	ldr	r3, [r3, #28]
 800fa46:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fa48:	2300      	movs	r3, #0
 800fa4a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800fa4c:	697b      	ldr	r3, [r7, #20]
 800fa4e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800fa52:	2b03      	cmp	r3, #3
 800fa54:	d002      	beq.n	800fa5c <CDC_ProcessReception+0x26>
 800fa56:	2b04      	cmp	r3, #4
 800fa58:	d00e      	beq.n	800fa78 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 800fa5a:	e049      	b.n	800faf0 <CDC_ProcessReception+0xba>
      (void)USBH_BulkReceiveData(phost,
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	6a19      	ldr	r1, [r3, #32]
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	8b5a      	ldrh	r2, [r3, #26]
 800fa64:	697b      	ldr	r3, [r7, #20]
 800fa66:	7b1b      	ldrb	r3, [r3, #12]
 800fa68:	6878      	ldr	r0, [r7, #4]
 800fa6a:	f001 fdd3 	bl	8011614 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800fa6e:	697b      	ldr	r3, [r7, #20]
 800fa70:	2204      	movs	r2, #4
 800fa72:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800fa76:	e03b      	b.n	800faf0 <CDC_ProcessReception+0xba>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800fa78:	697b      	ldr	r3, [r7, #20]
 800fa7a:	7b1b      	ldrb	r3, [r3, #12]
 800fa7c:	4619      	mov	r1, r3
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	f004 fcb8 	bl	80143f4 <USBH_LL_GetURBState>
 800fa84:	4603      	mov	r3, r0
 800fa86:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800fa88:	7cfb      	ldrb	r3, [r7, #19]
 800fa8a:	2b01      	cmp	r3, #1
 800fa8c:	d12f      	bne.n	800faee <CDC_ProcessReception+0xb8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800fa8e:	697b      	ldr	r3, [r7, #20]
 800fa90:	7b1b      	ldrb	r3, [r3, #12]
 800fa92:	4619      	mov	r1, r3
 800fa94:	6878      	ldr	r0, [r7, #4]
 800fa96:	f004 fc1b 	bl	80142d0 <USBH_LL_GetLastXferSize>
 800fa9a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800fa9c:	697b      	ldr	r3, [r7, #20]
 800fa9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800faa0:	68fa      	ldr	r2, [r7, #12]
 800faa2:	429a      	cmp	r2, r3
 800faa4:	d016      	beq.n	800fad4 <CDC_ProcessReception+0x9e>
 800faa6:	697b      	ldr	r3, [r7, #20]
 800faa8:	8b5b      	ldrh	r3, [r3, #26]
 800faaa:	461a      	mov	r2, r3
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	4293      	cmp	r3, r2
 800fab0:	d110      	bne.n	800fad4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800fab2:	697b      	ldr	r3, [r7, #20]
 800fab4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	1ad2      	subs	r2, r2, r3
 800faba:	697b      	ldr	r3, [r7, #20]
 800fabc:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	6a1a      	ldr	r2, [r3, #32]
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	441a      	add	r2, r3
 800fac6:	697b      	ldr	r3, [r7, #20]
 800fac8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800faca:	697b      	ldr	r3, [r7, #20]
 800facc:	2203      	movs	r2, #3
 800face:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800fad2:	e006      	b.n	800fae2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	2200      	movs	r2, #0
 800fad8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f000 f815 	bl	800fb0c <USBH_CDC_ReceiveCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 800fae2:	2300      	movs	r3, #0
 800fae4:	2200      	movs	r2, #0
 800fae6:	2104      	movs	r1, #4
 800fae8:	6878      	ldr	r0, [r7, #4]
 800faea:	f000 fe4d 	bl	8010788 <USBH_OS_PutMessage>
      break;
 800faee:	bf00      	nop
  }
}
 800faf0:	bf00      	nop
 800faf2:	3718      	adds	r7, #24
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}

0800faf8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800faf8:	b480      	push	{r7}
 800fafa:	b083      	sub	sp, #12
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800fb00:	bf00      	nop
 800fb02:	370c      	adds	r7, #12
 800fb04:	46bd      	mov	sp, r7
 800fb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0a:	4770      	bx	lr

0800fb0c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	b083      	sub	sp, #12
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800fb14:	bf00      	nop
 800fb16:	370c      	adds	r7, #12
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1e:	4770      	bx	lr

0800fb20 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800fb20:	b480      	push	{r7}
 800fb22:	b083      	sub	sp, #12
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800fb28:	bf00      	nop
 800fb2a:	370c      	adds	r7, #12
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb32:	4770      	bx	lr

0800fb34 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800fb34:	b5b0      	push	{r4, r5, r7, lr}
 800fb36:	b090      	sub	sp, #64	@ 0x40
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	60f8      	str	r0, [r7, #12]
 800fb3c:	60b9      	str	r1, [r7, #8]
 800fb3e:	4613      	mov	r3, r2
 800fb40:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d101      	bne.n	800fb4c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800fb48:	2302      	movs	r3, #2
 800fb4a:	e04d      	b.n	800fbe8 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	79fa      	ldrb	r2, [r7, #7]
 800fb50:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	2200      	movs	r2, #0
 800fb58:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800fb64:	68f8      	ldr	r0, [r7, #12]
 800fb66:	f000 f847 	bl	800fbf8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	2200      	movs	r2, #0
 800fb76:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	2200      	movs	r2, #0
 800fb86:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d003      	beq.n	800fb98 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	68ba      	ldr	r2, [r7, #8]
 800fb94:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800fb98:	4b15      	ldr	r3, [pc, #84]	@ (800fbf0 <USBH_Init+0xbc>)
 800fb9a:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800fb9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fba0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800fba4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800fba8:	2100      	movs	r1, #0
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f001 feea 	bl	8011984 <osMessageCreate>
 800fbb0:	4602      	mov	r2, r0
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800fbb8:	4b0e      	ldr	r3, [pc, #56]	@ (800fbf4 <USBH_Init+0xc0>)
 800fbba:	f107 0414 	add.w	r4, r7, #20
 800fbbe:	461d      	mov	r5, r3
 800fbc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fbc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fbc4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fbc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800fbcc:	f107 0314 	add.w	r3, r7, #20
 800fbd0:	68f9      	ldr	r1, [r7, #12]
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f001 fe76 	bl	80118c4 <osThreadCreate>
 800fbd8:	4602      	mov	r2, r0
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800fbe0:	68f8      	ldr	r0, [r7, #12]
 800fbe2:	f004 fac1 	bl	8014168 <USBH_LL_Init>

  return USBH_OK;
 800fbe6:	2300      	movs	r3, #0
}
 800fbe8:	4618      	mov	r0, r3
 800fbea:	3740      	adds	r7, #64	@ 0x40
 800fbec:	46bd      	mov	sp, r7
 800fbee:	bdb0      	pop	{r4, r5, r7, pc}
 800fbf0:	0801556c 	.word	0x0801556c
 800fbf4:	08015588 	.word	0x08015588

0800fbf8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b084      	sub	sp, #16
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800fc00:	2300      	movs	r3, #0
 800fc02:	60fb      	str	r3, [r7, #12]
 800fc04:	e009      	b.n	800fc1a <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 800fc06:	687a      	ldr	r2, [r7, #4]
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	33e0      	adds	r3, #224	@ 0xe0
 800fc0c:	009b      	lsls	r3, r3, #2
 800fc0e:	4413      	add	r3, r2
 800fc10:	2200      	movs	r2, #0
 800fc12:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	3301      	adds	r3, #1
 800fc18:	60fb      	str	r3, [r7, #12]
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	2b0f      	cmp	r3, #15
 800fc1e:	d9f2      	bls.n	800fc06 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800fc20:	2300      	movs	r3, #0
 800fc22:	60fb      	str	r3, [r7, #12]
 800fc24:	e009      	b.n	800fc3a <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800fc26:	687a      	ldr	r2, [r7, #4]
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	4413      	add	r3, r2
 800fc2c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800fc30:	2200      	movs	r2, #0
 800fc32:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	3301      	adds	r3, #1
 800fc38:	60fb      	str	r3, [r7, #12]
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fc40:	d3f1      	bcc.n	800fc26 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2200      	movs	r2, #0
 800fc46:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	2201      	movs	r2, #1
 800fc52:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	2200      	movs	r2, #0
 800fc58:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2201      	movs	r2, #1
 800fc60:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2240      	movs	r2, #64	@ 0x40
 800fc66:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	2200      	movs	r2, #0
 800fc72:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	2201      	movs	r2, #1
 800fc7a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2200      	movs	r2, #0
 800fc82:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2200      	movs	r2, #0
 800fc8a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	331c      	adds	r3, #28
 800fc92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fc96:	2100      	movs	r1, #0
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f004 fd8b 	bl	80147b4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800fca4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fca8:	2100      	movs	r1, #0
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f004 fd82 	bl	80147b4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800fcb6:	2212      	movs	r2, #18
 800fcb8:	2100      	movs	r1, #0
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f004 fd7a 	bl	80147b4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800fcc6:	223e      	movs	r2, #62	@ 0x3e
 800fcc8:	2100      	movs	r1, #0
 800fcca:	4618      	mov	r0, r3
 800fccc:	f004 fd72 	bl	80147b4 <memset>

  return USBH_OK;
 800fcd0:	2300      	movs	r3, #0
}
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	3710      	adds	r7, #16
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}

0800fcda <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800fcda:	b480      	push	{r7}
 800fcdc:	b085      	sub	sp, #20
 800fcde:	af00      	add	r7, sp, #0
 800fce0:	6078      	str	r0, [r7, #4]
 800fce2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800fce4:	2300      	movs	r3, #0
 800fce6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d016      	beq.n	800fd1c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d10e      	bne.n	800fd16 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800fcfe:	1c59      	adds	r1, r3, #1
 800fd00:	687a      	ldr	r2, [r7, #4]
 800fd02:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800fd06:	687a      	ldr	r2, [r7, #4]
 800fd08:	33de      	adds	r3, #222	@ 0xde
 800fd0a:	6839      	ldr	r1, [r7, #0]
 800fd0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800fd10:	2300      	movs	r3, #0
 800fd12:	73fb      	strb	r3, [r7, #15]
 800fd14:	e004      	b.n	800fd20 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800fd16:	2302      	movs	r3, #2
 800fd18:	73fb      	strb	r3, [r7, #15]
 800fd1a:	e001      	b.n	800fd20 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800fd1c:	2302      	movs	r3, #2
 800fd1e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800fd20:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd22:	4618      	mov	r0, r3
 800fd24:	3714      	adds	r7, #20
 800fd26:	46bd      	mov	sp, r7
 800fd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2c:	4770      	bx	lr

0800fd2e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800fd2e:	b480      	push	{r7}
 800fd30:	b085      	sub	sp, #20
 800fd32:	af00      	add	r7, sp, #0
 800fd34:	6078      	str	r0, [r7, #4]
 800fd36:	460b      	mov	r3, r1
 800fd38:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800fd44:	78fa      	ldrb	r2, [r7, #3]
 800fd46:	429a      	cmp	r2, r3
 800fd48:	d204      	bcs.n	800fd54 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	78fa      	ldrb	r2, [r7, #3]
 800fd4e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800fd52:	e001      	b.n	800fd58 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800fd54:	2302      	movs	r3, #2
 800fd56:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800fd58:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3714      	adds	r7, #20
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd64:	4770      	bx	lr

0800fd66 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800fd66:	b480      	push	{r7}
 800fd68:	b087      	sub	sp, #28
 800fd6a:	af00      	add	r7, sp, #0
 800fd6c:	6078      	str	r0, [r7, #4]
 800fd6e:	4608      	mov	r0, r1
 800fd70:	4611      	mov	r1, r2
 800fd72:	461a      	mov	r2, r3
 800fd74:	4603      	mov	r3, r0
 800fd76:	70fb      	strb	r3, [r7, #3]
 800fd78:	460b      	mov	r3, r1
 800fd7a:	70bb      	strb	r3, [r7, #2]
 800fd7c:	4613      	mov	r3, r2
 800fd7e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800fd80:	2300      	movs	r3, #0
 800fd82:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800fd84:	2300      	movs	r3, #0
 800fd86:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800fd8e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800fd90:	e025      	b.n	800fdde <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800fd92:	7dfb      	ldrb	r3, [r7, #23]
 800fd94:	221a      	movs	r2, #26
 800fd96:	fb02 f303 	mul.w	r3, r2, r3
 800fd9a:	3308      	adds	r3, #8
 800fd9c:	68fa      	ldr	r2, [r7, #12]
 800fd9e:	4413      	add	r3, r2
 800fda0:	3302      	adds	r3, #2
 800fda2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800fda4:	693b      	ldr	r3, [r7, #16]
 800fda6:	795b      	ldrb	r3, [r3, #5]
 800fda8:	78fa      	ldrb	r2, [r7, #3]
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d002      	beq.n	800fdb4 <USBH_FindInterface+0x4e>
 800fdae:	78fb      	ldrb	r3, [r7, #3]
 800fdb0:	2bff      	cmp	r3, #255	@ 0xff
 800fdb2:	d111      	bne.n	800fdd8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800fdb4:	693b      	ldr	r3, [r7, #16]
 800fdb6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800fdb8:	78ba      	ldrb	r2, [r7, #2]
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	d002      	beq.n	800fdc4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800fdbe:	78bb      	ldrb	r3, [r7, #2]
 800fdc0:	2bff      	cmp	r3, #255	@ 0xff
 800fdc2:	d109      	bne.n	800fdd8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800fdc4:	693b      	ldr	r3, [r7, #16]
 800fdc6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800fdc8:	787a      	ldrb	r2, [r7, #1]
 800fdca:	429a      	cmp	r2, r3
 800fdcc:	d002      	beq.n	800fdd4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800fdce:	787b      	ldrb	r3, [r7, #1]
 800fdd0:	2bff      	cmp	r3, #255	@ 0xff
 800fdd2:	d101      	bne.n	800fdd8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800fdd4:	7dfb      	ldrb	r3, [r7, #23]
 800fdd6:	e006      	b.n	800fde6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800fdd8:	7dfb      	ldrb	r3, [r7, #23]
 800fdda:	3301      	adds	r3, #1
 800fddc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800fdde:	7dfb      	ldrb	r3, [r7, #23]
 800fde0:	2b01      	cmp	r3, #1
 800fde2:	d9d6      	bls.n	800fd92 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800fde4:	23ff      	movs	r3, #255	@ 0xff
}
 800fde6:	4618      	mov	r0, r3
 800fde8:	371c      	adds	r7, #28
 800fdea:	46bd      	mov	sp, r7
 800fdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf0:	4770      	bx	lr

0800fdf2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800fdf2:	b580      	push	{r7, lr}
 800fdf4:	b082      	sub	sp, #8
 800fdf6:	af00      	add	r7, sp, #0
 800fdf8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f004 f9f0 	bl	80141e0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800fe00:	2101      	movs	r1, #1
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f004 fb09 	bl	801441a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800fe08:	2300      	movs	r3, #0
}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	3708      	adds	r7, #8
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd80      	pop	{r7, pc}
	...

0800fe14 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b088      	sub	sp, #32
 800fe18:	af04      	add	r7, sp, #16
 800fe1a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800fe1c:	2302      	movs	r3, #2
 800fe1e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800fe20:	2300      	movs	r3, #0
 800fe22:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800fe2a:	b2db      	uxtb	r3, r3
 800fe2c:	2b01      	cmp	r3, #1
 800fe2e:	d102      	bne.n	800fe36 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	2203      	movs	r2, #3
 800fe34:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	781b      	ldrb	r3, [r3, #0]
 800fe3a:	b2db      	uxtb	r3, r3
 800fe3c:	2b0b      	cmp	r3, #11
 800fe3e:	f200 81f5 	bhi.w	801022c <USBH_Process+0x418>
 800fe42:	a201      	add	r2, pc, #4	@ (adr r2, 800fe48 <USBH_Process+0x34>)
 800fe44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe48:	0800fe79 	.word	0x0800fe79
 800fe4c:	0800feb7 	.word	0x0800feb7
 800fe50:	0800ff2d 	.word	0x0800ff2d
 800fe54:	080101bb 	.word	0x080101bb
 800fe58:	0801022d 	.word	0x0801022d
 800fe5c:	0800ffd9 	.word	0x0800ffd9
 800fe60:	08010155 	.word	0x08010155
 800fe64:	0801001b 	.word	0x0801001b
 800fe68:	08010047 	.word	0x08010047
 800fe6c:	0801006f 	.word	0x0801006f
 800fe70:	080100bd 	.word	0x080100bd
 800fe74:	080101a3 	.word	0x080101a3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800fe7e:	b2db      	uxtb	r3, r3
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	f000 81d5 	beq.w	8010230 <USBH_Process+0x41c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	2201      	movs	r2, #1
 800fe8a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800fe8c:	20c8      	movs	r0, #200	@ 0xc8
 800fe8e:	f004 fb0e 	bl	80144ae <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800fe92:	6878      	ldr	r0, [r7, #4]
 800fe94:	f004 fa01 	bl	801429a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2200      	movs	r2, #0
 800fea4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800fea8:	2300      	movs	r3, #0
 800feaa:	2200      	movs	r2, #0
 800feac:	2101      	movs	r1, #1
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f000 fc6a 	bl	8010788 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800feb4:	e1bc      	b.n	8010230 <USBH_Process+0x41c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800febc:	b2db      	uxtb	r3, r3
 800febe:	2b01      	cmp	r3, #1
 800fec0:	d107      	bne.n	800fed2 <USBH_Process+0xbe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	2200      	movs	r2, #0
 800fec6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2202      	movs	r2, #2
 800fece:	701a      	strb	r2, [r3, #0]
 800fed0:	e025      	b.n	800ff1e <USBH_Process+0x10a>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800fed8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800fedc:	d914      	bls.n	800ff08 <USBH_Process+0xf4>
        {
          phost->device.RstCnt++;
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800fee4:	3301      	adds	r3, #1
 800fee6:	b2da      	uxtb	r2, r3
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800fef4:	2b03      	cmp	r3, #3
 800fef6:	d903      	bls.n	800ff00 <USBH_Process+0xec>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	220d      	movs	r2, #13
 800fefc:	701a      	strb	r2, [r3, #0]
 800fefe:	e00e      	b.n	800ff1e <USBH_Process+0x10a>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	2200      	movs	r2, #0
 800ff04:	701a      	strb	r2, [r3, #0]
 800ff06:	e00a      	b.n	800ff1e <USBH_Process+0x10a>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800ff0e:	f103 020a 	add.w	r2, r3, #10
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800ff18:	200a      	movs	r0, #10
 800ff1a:	f004 fac8 	bl	80144ae <USBH_Delay>
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800ff1e:	2300      	movs	r3, #0
 800ff20:	2200      	movs	r2, #0
 800ff22:	2101      	movs	r1, #1
 800ff24:	6878      	ldr	r0, [r7, #4]
 800ff26:	f000 fc2f 	bl	8010788 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800ff2a:	e188      	b.n	801023e <USBH_Process+0x42a>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d005      	beq.n	800ff42 <USBH_Process+0x12e>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ff3c:	2104      	movs	r1, #4
 800ff3e:	6878      	ldr	r0, [r7, #4]
 800ff40:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ff42:	2064      	movs	r0, #100	@ 0x64
 800ff44:	f004 fab3 	bl	80144ae <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800ff48:	6878      	ldr	r0, [r7, #4]
 800ff4a:	f004 f97f 	bl	801424c <USBH_LL_GetSpeed>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	461a      	mov	r2, r3
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2205      	movs	r2, #5
 800ff5c:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ff5e:	2100      	movs	r1, #0
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	f001 fba4 	bl	80116ae <USBH_AllocPipe>
 800ff66:	4603      	mov	r3, r0
 800ff68:	461a      	mov	r2, r3
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ff6e:	2180      	movs	r1, #128	@ 0x80
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	f001 fb9c 	bl	80116ae <USBH_AllocPipe>
 800ff76:	4603      	mov	r3, r0
 800ff78:	461a      	mov	r2, r3
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	7919      	ldrb	r1, [r3, #4]
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ff8e:	687a      	ldr	r2, [r7, #4]
 800ff90:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ff92:	9202      	str	r2, [sp, #8]
 800ff94:	2200      	movs	r2, #0
 800ff96:	9201      	str	r2, [sp, #4]
 800ff98:	9300      	str	r3, [sp, #0]
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	2280      	movs	r2, #128	@ 0x80
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f001 fb56 	bl	8011650 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	7959      	ldrb	r1, [r3, #5]
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ffb4:	687a      	ldr	r2, [r7, #4]
 800ffb6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ffb8:	9202      	str	r2, [sp, #8]
 800ffba:	2200      	movs	r2, #0
 800ffbc:	9201      	str	r2, [sp, #4]
 800ffbe:	9300      	str	r3, [sp, #0]
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f001 fb43 	bl	8011650 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800ffca:	2300      	movs	r3, #0
 800ffcc:	2200      	movs	r2, #0
 800ffce:	2101      	movs	r1, #1
 800ffd0:	6878      	ldr	r0, [r7, #4]
 800ffd2:	f000 fbd9 	bl	8010788 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800ffd6:	e132      	b.n	801023e <USBH_Process+0x42a>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ffd8:	6878      	ldr	r0, [r7, #4]
 800ffda:	f000 f935 	bl	8010248 <USBH_HandleEnum>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ffe2:	7bbb      	ldrb	r3, [r7, #14]
 800ffe4:	b2db      	uxtb	r3, r3
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	f040 8124 	bne.w	8010234 <USBH_Process+0x420>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2200      	movs	r2, #0
 800fff0:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800fffa:	2b01      	cmp	r3, #1
 800fffc:	d103      	bne.n	8010006 <USBH_Process+0x1f2>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	2208      	movs	r2, #8
 8010002:	701a      	strb	r2, [r3, #0]
 8010004:	e002      	b.n	801000c <USBH_Process+0x1f8>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2207      	movs	r2, #7
 801000a:	701a      	strb	r2, [r3, #0]
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 801000c:	2300      	movs	r3, #0
 801000e:	2200      	movs	r2, #0
 8010010:	2105      	movs	r1, #5
 8010012:	6878      	ldr	r0, [r7, #4]
 8010014:	f000 fbb8 	bl	8010788 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8010018:	e10c      	b.n	8010234 <USBH_Process+0x420>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010020:	2b00      	cmp	r3, #0
 8010022:	f000 8109 	beq.w	8010238 <USBH_Process+0x424>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801002c:	2101      	movs	r1, #1
 801002e:	6878      	ldr	r0, [r7, #4]
 8010030:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	2208      	movs	r2, #8
 8010036:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8010038:	2300      	movs	r3, #0
 801003a:	2200      	movs	r2, #0
 801003c:	2105      	movs	r1, #5
 801003e:	6878      	ldr	r0, [r7, #4]
 8010040:	f000 fba2 	bl	8010788 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8010044:	e0f8      	b.n	8010238 <USBH_Process+0x424>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 801004c:	4619      	mov	r1, r3
 801004e:	6878      	ldr	r0, [r7, #4]
 8010050:	f000 fcc8 	bl	80109e4 <USBH_SetCfg>
 8010054:	4603      	mov	r3, r0
 8010056:	2b00      	cmp	r3, #0
 8010058:	d102      	bne.n	8010060 <USBH_Process+0x24c>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	2209      	movs	r2, #9
 801005e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8010060:	2300      	movs	r3, #0
 8010062:	2200      	movs	r2, #0
 8010064:	2101      	movs	r1, #1
 8010066:	6878      	ldr	r0, [r7, #4]
 8010068:	f000 fb8e 	bl	8010788 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 801006c:	e0e7      	b.n	801023e <USBH_Process+0x42a>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8010074:	f003 0320 	and.w	r3, r3, #32
 8010078:	2b00      	cmp	r3, #0
 801007a:	d015      	beq.n	80100a8 <USBH_Process+0x294>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 801007c:	2101      	movs	r1, #1
 801007e:	6878      	ldr	r0, [r7, #4]
 8010080:	f000 fcd3 	bl	8010a2a <USBH_SetFeature>
 8010084:	4603      	mov	r3, r0
 8010086:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8010088:	7bbb      	ldrb	r3, [r7, #14]
 801008a:	b2db      	uxtb	r3, r3
 801008c:	2b00      	cmp	r3, #0
 801008e:	d103      	bne.n	8010098 <USBH_Process+0x284>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	220a      	movs	r2, #10
 8010094:	701a      	strb	r2, [r3, #0]
 8010096:	e00a      	b.n	80100ae <USBH_Process+0x29a>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8010098:	7bbb      	ldrb	r3, [r7, #14]
 801009a:	b2db      	uxtb	r3, r3
 801009c:	2b03      	cmp	r3, #3
 801009e:	d106      	bne.n	80100ae <USBH_Process+0x29a>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	220a      	movs	r2, #10
 80100a4:	701a      	strb	r2, [r3, #0]
 80100a6:	e002      	b.n	80100ae <USBH_Process+0x29a>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	220a      	movs	r2, #10
 80100ac:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80100ae:	2300      	movs	r3, #0
 80100b0:	2200      	movs	r2, #0
 80100b2:	2101      	movs	r1, #1
 80100b4:	6878      	ldr	r0, [r7, #4]
 80100b6:	f000 fb67 	bl	8010788 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80100ba:	e0c0      	b.n	801023e <USBH_Process+0x42a>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d03f      	beq.n	8010146 <USBH_Process+0x332>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	2200      	movs	r2, #0
 80100ca:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80100ce:	2300      	movs	r3, #0
 80100d0:	73fb      	strb	r3, [r7, #15]
 80100d2:	e016      	b.n	8010102 <USBH_Process+0x2ee>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80100d4:	7bfa      	ldrb	r2, [r7, #15]
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	32de      	adds	r2, #222	@ 0xde
 80100da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100de:	791a      	ldrb	r2, [r3, #4]
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80100e6:	429a      	cmp	r2, r3
 80100e8:	d108      	bne.n	80100fc <USBH_Process+0x2e8>
          {
            phost->pActiveClass = phost->pClass[idx];
 80100ea:	7bfa      	ldrb	r2, [r7, #15]
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	32de      	adds	r2, #222	@ 0xde
 80100f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80100fa:	e005      	b.n	8010108 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80100fc:	7bfb      	ldrb	r3, [r7, #15]
 80100fe:	3301      	adds	r3, #1
 8010100:	73fb      	strb	r3, [r7, #15]
 8010102:	7bfb      	ldrb	r3, [r7, #15]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d0e5      	beq.n	80100d4 <USBH_Process+0x2c0>
          }
        }

        if (phost->pActiveClass != NULL)
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801010e:	2b00      	cmp	r3, #0
 8010110:	d016      	beq.n	8010140 <USBH_Process+0x32c>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010118:	689b      	ldr	r3, [r3, #8]
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	4798      	blx	r3
 801011e:	4603      	mov	r3, r0
 8010120:	2b00      	cmp	r3, #0
 8010122:	d109      	bne.n	8010138 <USBH_Process+0x324>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2206      	movs	r2, #6
 8010128:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010130:	2103      	movs	r1, #3
 8010132:	6878      	ldr	r0, [r7, #4]
 8010134:	4798      	blx	r3
 8010136:	e006      	b.n	8010146 <USBH_Process+0x332>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	220d      	movs	r2, #13
 801013c:	701a      	strb	r2, [r3, #0]
 801013e:	e002      	b.n	8010146 <USBH_Process+0x332>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	220d      	movs	r2, #13
 8010144:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8010146:	2300      	movs	r3, #0
 8010148:	2200      	movs	r2, #0
 801014a:	2105      	movs	r1, #5
 801014c:	6878      	ldr	r0, [r7, #4]
 801014e:	f000 fb1b 	bl	8010788 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8010152:	e074      	b.n	801023e <USBH_Process+0x42a>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801015a:	2b00      	cmp	r3, #0
 801015c:	d017      	beq.n	801018e <USBH_Process+0x37a>
      {
        status = phost->pActiveClass->Requests(phost);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010164:	691b      	ldr	r3, [r3, #16]
 8010166:	6878      	ldr	r0, [r7, #4]
 8010168:	4798      	blx	r3
 801016a:	4603      	mov	r3, r0
 801016c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 801016e:	7bbb      	ldrb	r3, [r7, #14]
 8010170:	b2db      	uxtb	r3, r3
 8010172:	2b00      	cmp	r3, #0
 8010174:	d103      	bne.n	801017e <USBH_Process+0x36a>
        {
          phost->gState = HOST_CLASS;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	220b      	movs	r2, #11
 801017a:	701a      	strb	r2, [r3, #0]
 801017c:	e00a      	b.n	8010194 <USBH_Process+0x380>
        }
        else if (status == USBH_FAIL)
 801017e:	7bbb      	ldrb	r3, [r7, #14]
 8010180:	b2db      	uxtb	r3, r3
 8010182:	2b02      	cmp	r3, #2
 8010184:	d106      	bne.n	8010194 <USBH_Process+0x380>
        {
          phost->gState = HOST_ABORT_STATE;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	220d      	movs	r2, #13
 801018a:	701a      	strb	r2, [r3, #0]
 801018c:	e002      	b.n	8010194 <USBH_Process+0x380>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	220d      	movs	r2, #13
 8010192:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8010194:	2300      	movs	r3, #0
 8010196:	2200      	movs	r2, #0
 8010198:	2105      	movs	r1, #5
 801019a:	6878      	ldr	r0, [r7, #4]
 801019c:	f000 faf4 	bl	8010788 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80101a0:	e04d      	b.n	801023e <USBH_Process+0x42a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d047      	beq.n	801023c <USBH_Process+0x428>
      {
        phost->pActiveClass->BgndProcess(phost);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80101b2:	695b      	ldr	r3, [r3, #20]
 80101b4:	6878      	ldr	r0, [r7, #4]
 80101b6:	4798      	blx	r3
      }
      break;
 80101b8:	e040      	b.n	801023c <USBH_Process+0x428>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	2200      	movs	r2, #0
 80101be:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	f7ff fd18 	bl	800fbf8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d009      	beq.n	80101e6 <USBH_Process+0x3d2>
      {
        phost->pActiveClass->DeInit(phost);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80101d8:	68db      	ldr	r3, [r3, #12]
 80101da:	6878      	ldr	r0, [r7, #4]
 80101dc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	2200      	movs	r2, #0
 80101e2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d005      	beq.n	80101fc <USBH_Process+0x3e8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80101f6:	2105      	movs	r1, #5
 80101f8:	6878      	ldr	r0, [r7, #4]
 80101fa:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8010202:	b2db      	uxtb	r3, r3
 8010204:	2b01      	cmp	r3, #1
 8010206:	d107      	bne.n	8010218 <USBH_Process+0x404>
      {
        phost->device.is_ReEnumerated = 0U;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2200      	movs	r2, #0
 801020c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f7ff fdee 	bl	800fdf2 <USBH_Start>
 8010216:	e002      	b.n	801021e <USBH_Process+0x40a>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8010218:	6878      	ldr	r0, [r7, #4]
 801021a:	f003 ffe1 	bl	80141e0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 801021e:	2300      	movs	r3, #0
 8010220:	2200      	movs	r2, #0
 8010222:	2101      	movs	r1, #1
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	f000 faaf 	bl	8010788 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 801022a:	e008      	b.n	801023e <USBH_Process+0x42a>

    case HOST_ABORT_STATE:
    default :
      break;
 801022c:	bf00      	nop
 801022e:	e006      	b.n	801023e <USBH_Process+0x42a>
      break;
 8010230:	bf00      	nop
 8010232:	e004      	b.n	801023e <USBH_Process+0x42a>
      break;
 8010234:	bf00      	nop
 8010236:	e002      	b.n	801023e <USBH_Process+0x42a>
    break;
 8010238:	bf00      	nop
 801023a:	e000      	b.n	801023e <USBH_Process+0x42a>
      break;
 801023c:	bf00      	nop
  }
  return USBH_OK;
 801023e:	2300      	movs	r3, #0
}
 8010240:	4618      	mov	r0, r3
 8010242:	3710      	adds	r7, #16
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}

08010248 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b088      	sub	sp, #32
 801024c:	af04      	add	r7, sp, #16
 801024e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8010250:	2301      	movs	r3, #1
 8010252:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8010254:	2301      	movs	r3, #1
 8010256:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	785b      	ldrb	r3, [r3, #1]
 801025c:	2b07      	cmp	r3, #7
 801025e:	f200 81db 	bhi.w	8010618 <USBH_HandleEnum+0x3d0>
 8010262:	a201      	add	r2, pc, #4	@ (adr r2, 8010268 <USBH_HandleEnum+0x20>)
 8010264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010268:	08010289 	.word	0x08010289
 801026c:	08010343 	.word	0x08010343
 8010270:	080103ad 	.word	0x080103ad
 8010274:	08010437 	.word	0x08010437
 8010278:	080104a1 	.word	0x080104a1
 801027c:	08010511 	.word	0x08010511
 8010280:	0801057b 	.word	0x0801057b
 8010284:	080105d9 	.word	0x080105d9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8010288:	2108      	movs	r1, #8
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	f000 fac7 	bl	801081e <USBH_Get_DevDesc>
 8010290:	4603      	mov	r3, r0
 8010292:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010294:	7bbb      	ldrb	r3, [r7, #14]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d12e      	bne.n	80102f8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2201      	movs	r2, #1
 80102a8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	7919      	ldrb	r1, [r3, #4]
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80102ba:	687a      	ldr	r2, [r7, #4]
 80102bc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80102be:	9202      	str	r2, [sp, #8]
 80102c0:	2200      	movs	r2, #0
 80102c2:	9201      	str	r2, [sp, #4]
 80102c4:	9300      	str	r3, [sp, #0]
 80102c6:	4603      	mov	r3, r0
 80102c8:	2280      	movs	r2, #128	@ 0x80
 80102ca:	6878      	ldr	r0, [r7, #4]
 80102cc:	f001 f9c0 	bl	8011650 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	7959      	ldrb	r1, [r3, #5]
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80102e0:	687a      	ldr	r2, [r7, #4]
 80102e2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80102e4:	9202      	str	r2, [sp, #8]
 80102e6:	2200      	movs	r2, #0
 80102e8:	9201      	str	r2, [sp, #4]
 80102ea:	9300      	str	r3, [sp, #0]
 80102ec:	4603      	mov	r3, r0
 80102ee:	2200      	movs	r2, #0
 80102f0:	6878      	ldr	r0, [r7, #4]
 80102f2:	f001 f9ad 	bl	8011650 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80102f6:	e191      	b.n	801061c <USBH_HandleEnum+0x3d4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80102f8:	7bbb      	ldrb	r3, [r7, #14]
 80102fa:	2b03      	cmp	r3, #3
 80102fc:	f040 818e 	bne.w	801061c <USBH_HandleEnum+0x3d4>
        phost->device.EnumCnt++;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8010306:	3301      	adds	r3, #1
 8010308:	b2da      	uxtb	r2, r3
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8010316:	2b03      	cmp	r3, #3
 8010318:	d903      	bls.n	8010322 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	220d      	movs	r2, #13
 801031e:	701a      	strb	r2, [r3, #0]
      break;
 8010320:	e17c      	b.n	801061c <USBH_HandleEnum+0x3d4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	795b      	ldrb	r3, [r3, #5]
 8010326:	4619      	mov	r1, r3
 8010328:	6878      	ldr	r0, [r7, #4]
 801032a:	f001 f9e1 	bl	80116f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	791b      	ldrb	r3, [r3, #4]
 8010332:	4619      	mov	r1, r3
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f001 f9db 	bl	80116f0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	2200      	movs	r2, #0
 801033e:	701a      	strb	r2, [r3, #0]
      break;
 8010340:	e16c      	b.n	801061c <USBH_HandleEnum+0x3d4>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8010342:	2112      	movs	r1, #18
 8010344:	6878      	ldr	r0, [r7, #4]
 8010346:	f000 fa6a 	bl	801081e <USBH_Get_DevDesc>
 801034a:	4603      	mov	r3, r0
 801034c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801034e:	7bbb      	ldrb	r3, [r7, #14]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d103      	bne.n	801035c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2202      	movs	r2, #2
 8010358:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801035a:	e161      	b.n	8010620 <USBH_HandleEnum+0x3d8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801035c:	7bbb      	ldrb	r3, [r7, #14]
 801035e:	2b03      	cmp	r3, #3
 8010360:	f040 815e 	bne.w	8010620 <USBH_HandleEnum+0x3d8>
        phost->device.EnumCnt++;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801036a:	3301      	adds	r3, #1
 801036c:	b2da      	uxtb	r2, r3
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801037a:	2b03      	cmp	r3, #3
 801037c:	d903      	bls.n	8010386 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	220d      	movs	r2, #13
 8010382:	701a      	strb	r2, [r3, #0]
      break;
 8010384:	e14c      	b.n	8010620 <USBH_HandleEnum+0x3d8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	795b      	ldrb	r3, [r3, #5]
 801038a:	4619      	mov	r1, r3
 801038c:	6878      	ldr	r0, [r7, #4]
 801038e:	f001 f9af 	bl	80116f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	791b      	ldrb	r3, [r3, #4]
 8010396:	4619      	mov	r1, r3
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f001 f9a9 	bl	80116f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	2200      	movs	r2, #0
 80103a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2200      	movs	r2, #0
 80103a8:	701a      	strb	r2, [r3, #0]
      break;
 80103aa:	e139      	b.n	8010620 <USBH_HandleEnum+0x3d8>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80103ac:	2101      	movs	r1, #1
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f000 faf4 	bl	801099c <USBH_SetAddress>
 80103b4:	4603      	mov	r3, r0
 80103b6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80103b8:	7bbb      	ldrb	r3, [r7, #14]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d130      	bne.n	8010420 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80103be:	2002      	movs	r0, #2
 80103c0:	f004 f875 	bl	80144ae <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	2201      	movs	r2, #1
 80103c8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2203      	movs	r2, #3
 80103d0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	7919      	ldrb	r1, [r3, #4]
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80103e2:	687a      	ldr	r2, [r7, #4]
 80103e4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80103e6:	9202      	str	r2, [sp, #8]
 80103e8:	2200      	movs	r2, #0
 80103ea:	9201      	str	r2, [sp, #4]
 80103ec:	9300      	str	r3, [sp, #0]
 80103ee:	4603      	mov	r3, r0
 80103f0:	2280      	movs	r2, #128	@ 0x80
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	f001 f92c 	bl	8011650 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	7959      	ldrb	r1, [r3, #5]
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8010408:	687a      	ldr	r2, [r7, #4]
 801040a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801040c:	9202      	str	r2, [sp, #8]
 801040e:	2200      	movs	r2, #0
 8010410:	9201      	str	r2, [sp, #4]
 8010412:	9300      	str	r3, [sp, #0]
 8010414:	4603      	mov	r3, r0
 8010416:	2200      	movs	r2, #0
 8010418:	6878      	ldr	r0, [r7, #4]
 801041a:	f001 f919 	bl	8011650 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801041e:	e101      	b.n	8010624 <USBH_HandleEnum+0x3dc>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010420:	7bbb      	ldrb	r3, [r7, #14]
 8010422:	2b03      	cmp	r3, #3
 8010424:	f040 80fe 	bne.w	8010624 <USBH_HandleEnum+0x3dc>
        phost->gState = HOST_ABORT_STATE;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	220d      	movs	r2, #13
 801042c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	2200      	movs	r2, #0
 8010432:	705a      	strb	r2, [r3, #1]
      break;
 8010434:	e0f6      	b.n	8010624 <USBH_HandleEnum+0x3dc>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8010436:	2109      	movs	r1, #9
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	f000 fa1c 	bl	8010876 <USBH_Get_CfgDesc>
 801043e:	4603      	mov	r3, r0
 8010440:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010442:	7bbb      	ldrb	r3, [r7, #14]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d103      	bne.n	8010450 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2204      	movs	r2, #4
 801044c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801044e:	e0eb      	b.n	8010628 <USBH_HandleEnum+0x3e0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010450:	7bbb      	ldrb	r3, [r7, #14]
 8010452:	2b03      	cmp	r3, #3
 8010454:	f040 80e8 	bne.w	8010628 <USBH_HandleEnum+0x3e0>
        phost->device.EnumCnt++;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801045e:	3301      	adds	r3, #1
 8010460:	b2da      	uxtb	r2, r3
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801046e:	2b03      	cmp	r3, #3
 8010470:	d903      	bls.n	801047a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	220d      	movs	r2, #13
 8010476:	701a      	strb	r2, [r3, #0]
      break;
 8010478:	e0d6      	b.n	8010628 <USBH_HandleEnum+0x3e0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	795b      	ldrb	r3, [r3, #5]
 801047e:	4619      	mov	r1, r3
 8010480:	6878      	ldr	r0, [r7, #4]
 8010482:	f001 f935 	bl	80116f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	791b      	ldrb	r3, [r3, #4]
 801048a:	4619      	mov	r1, r3
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	f001 f92f 	bl	80116f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	2200      	movs	r2, #0
 8010496:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	2200      	movs	r2, #0
 801049c:	701a      	strb	r2, [r3, #0]
      break;
 801049e:	e0c3      	b.n	8010628 <USBH_HandleEnum+0x3e0>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80104a6:	4619      	mov	r1, r3
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f000 f9e4 	bl	8010876 <USBH_Get_CfgDesc>
 80104ae:	4603      	mov	r3, r0
 80104b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80104b2:	7bbb      	ldrb	r3, [r7, #14]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d103      	bne.n	80104c0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2205      	movs	r2, #5
 80104bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80104be:	e0b5      	b.n	801062c <USBH_HandleEnum+0x3e4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80104c0:	7bbb      	ldrb	r3, [r7, #14]
 80104c2:	2b03      	cmp	r3, #3
 80104c4:	f040 80b2 	bne.w	801062c <USBH_HandleEnum+0x3e4>
        phost->device.EnumCnt++;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80104ce:	3301      	adds	r3, #1
 80104d0:	b2da      	uxtb	r2, r3
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80104de:	2b03      	cmp	r3, #3
 80104e0:	d903      	bls.n	80104ea <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	220d      	movs	r2, #13
 80104e6:	701a      	strb	r2, [r3, #0]
      break;
 80104e8:	e0a0      	b.n	801062c <USBH_HandleEnum+0x3e4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	795b      	ldrb	r3, [r3, #5]
 80104ee:	4619      	mov	r1, r3
 80104f0:	6878      	ldr	r0, [r7, #4]
 80104f2:	f001 f8fd 	bl	80116f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	791b      	ldrb	r3, [r3, #4]
 80104fa:	4619      	mov	r1, r3
 80104fc:	6878      	ldr	r0, [r7, #4]
 80104fe:	f001 f8f7 	bl	80116f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	2200      	movs	r2, #0
 8010506:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2200      	movs	r2, #0
 801050c:	701a      	strb	r2, [r3, #0]
      break;
 801050e:	e08d      	b.n	801062c <USBH_HandleEnum+0x3e4>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8010516:	2b00      	cmp	r3, #0
 8010518:	d025      	beq.n	8010566 <USBH_HandleEnum+0x31e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8010526:	23ff      	movs	r3, #255	@ 0xff
 8010528:	6878      	ldr	r0, [r7, #4]
 801052a:	f000 f9ce 	bl	80108ca <USBH_Get_StringDesc>
 801052e:	4603      	mov	r3, r0
 8010530:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010532:	7bbb      	ldrb	r3, [r7, #14]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d109      	bne.n	801054c <USBH_HandleEnum+0x304>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2206      	movs	r2, #6
 801053c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 801053e:	2300      	movs	r3, #0
 8010540:	2200      	movs	r2, #0
 8010542:	2105      	movs	r1, #5
 8010544:	6878      	ldr	r0, [r7, #4]
 8010546:	f000 f91f 	bl	8010788 <USBH_OS_PutMessage>

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 801054a:	e071      	b.n	8010630 <USBH_HandleEnum+0x3e8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801054c:	7bbb      	ldrb	r3, [r7, #14]
 801054e:	2b03      	cmp	r3, #3
 8010550:	d16e      	bne.n	8010630 <USBH_HandleEnum+0x3e8>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	2206      	movs	r2, #6
 8010556:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8010558:	2300      	movs	r3, #0
 801055a:	2200      	movs	r2, #0
 801055c:	2105      	movs	r1, #5
 801055e:	6878      	ldr	r0, [r7, #4]
 8010560:	f000 f912 	bl	8010788 <USBH_OS_PutMessage>
      break;
 8010564:	e064      	b.n	8010630 <USBH_HandleEnum+0x3e8>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2206      	movs	r2, #6
 801056a:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 801056c:	2300      	movs	r3, #0
 801056e:	2200      	movs	r2, #0
 8010570:	2105      	movs	r1, #5
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f000 f908 	bl	8010788 <USBH_OS_PutMessage>
      break;
 8010578:	e05a      	b.n	8010630 <USBH_HandleEnum+0x3e8>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8010580:	2b00      	cmp	r3, #0
 8010582:	d01f      	beq.n	80105c4 <USBH_HandleEnum+0x37c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8010590:	23ff      	movs	r3, #255	@ 0xff
 8010592:	6878      	ldr	r0, [r7, #4]
 8010594:	f000 f999 	bl	80108ca <USBH_Get_StringDesc>
 8010598:	4603      	mov	r3, r0
 801059a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801059c:	7bbb      	ldrb	r3, [r7, #14]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d103      	bne.n	80105aa <USBH_HandleEnum+0x362>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	2207      	movs	r2, #7
 80105a6:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80105a8:	e044      	b.n	8010634 <USBH_HandleEnum+0x3ec>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80105aa:	7bbb      	ldrb	r3, [r7, #14]
 80105ac:	2b03      	cmp	r3, #3
 80105ae:	d141      	bne.n	8010634 <USBH_HandleEnum+0x3ec>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2207      	movs	r2, #7
 80105b4:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 80105b6:	2300      	movs	r3, #0
 80105b8:	2200      	movs	r2, #0
 80105ba:	2105      	movs	r1, #5
 80105bc:	6878      	ldr	r0, [r7, #4]
 80105be:	f000 f8e3 	bl	8010788 <USBH_OS_PutMessage>
      break;
 80105c2:	e037      	b.n	8010634 <USBH_HandleEnum+0x3ec>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2207      	movs	r2, #7
 80105c8:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 80105ca:	2300      	movs	r3, #0
 80105cc:	2200      	movs	r2, #0
 80105ce:	2105      	movs	r1, #5
 80105d0:	6878      	ldr	r0, [r7, #4]
 80105d2:	f000 f8d9 	bl	8010788 <USBH_OS_PutMessage>
      break;
 80105d6:	e02d      	b.n	8010634 <USBH_HandleEnum+0x3ec>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d017      	beq.n	8010612 <USBH_HandleEnum+0x3ca>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80105ee:	23ff      	movs	r3, #255	@ 0xff
 80105f0:	6878      	ldr	r0, [r7, #4]
 80105f2:	f000 f96a 	bl	80108ca <USBH_Get_StringDesc>
 80105f6:	4603      	mov	r3, r0
 80105f8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80105fa:	7bbb      	ldrb	r3, [r7, #14]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d102      	bne.n	8010606 <USBH_HandleEnum+0x3be>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8010600:	2300      	movs	r3, #0
 8010602:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8010604:	e018      	b.n	8010638 <USBH_HandleEnum+0x3f0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010606:	7bbb      	ldrb	r3, [r7, #14]
 8010608:	2b03      	cmp	r3, #3
 801060a:	d115      	bne.n	8010638 <USBH_HandleEnum+0x3f0>
          Status = USBH_OK;
 801060c:	2300      	movs	r3, #0
 801060e:	73fb      	strb	r3, [r7, #15]
      break;
 8010610:	e012      	b.n	8010638 <USBH_HandleEnum+0x3f0>
        Status = USBH_OK;
 8010612:	2300      	movs	r3, #0
 8010614:	73fb      	strb	r3, [r7, #15]
      break;
 8010616:	e00f      	b.n	8010638 <USBH_HandleEnum+0x3f0>

    default:
      break;
 8010618:	bf00      	nop
 801061a:	e00e      	b.n	801063a <USBH_HandleEnum+0x3f2>
      break;
 801061c:	bf00      	nop
 801061e:	e00c      	b.n	801063a <USBH_HandleEnum+0x3f2>
      break;
 8010620:	bf00      	nop
 8010622:	e00a      	b.n	801063a <USBH_HandleEnum+0x3f2>
      break;
 8010624:	bf00      	nop
 8010626:	e008      	b.n	801063a <USBH_HandleEnum+0x3f2>
      break;
 8010628:	bf00      	nop
 801062a:	e006      	b.n	801063a <USBH_HandleEnum+0x3f2>
      break;
 801062c:	bf00      	nop
 801062e:	e004      	b.n	801063a <USBH_HandleEnum+0x3f2>
      break;
 8010630:	bf00      	nop
 8010632:	e002      	b.n	801063a <USBH_HandleEnum+0x3f2>
      break;
 8010634:	bf00      	nop
 8010636:	e000      	b.n	801063a <USBH_HandleEnum+0x3f2>
      break;
 8010638:	bf00      	nop
  }
  return Status;
 801063a:	7bfb      	ldrb	r3, [r7, #15]
}
 801063c:	4618      	mov	r0, r3
 801063e:	3710      	adds	r7, #16
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}

08010644 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8010644:	b480      	push	{r7}
 8010646:	b083      	sub	sp, #12
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
 801064c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	683a      	ldr	r2, [r7, #0]
 8010652:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8010656:	bf00      	nop
 8010658:	370c      	adds	r7, #12
 801065a:	46bd      	mov	sp, r7
 801065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010660:	4770      	bx	lr

08010662 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8010662:	b580      	push	{r7, lr}
 8010664:	b082      	sub	sp, #8
 8010666:	af00      	add	r7, sp, #0
 8010668:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8010670:	1c5a      	adds	r2, r3, #1
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8010678:	6878      	ldr	r0, [r7, #4]
 801067a:	f000 f804 	bl	8010686 <USBH_HandleSof>
}
 801067e:	bf00      	nop
 8010680:	3708      	adds	r7, #8
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}

08010686 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8010686:	b580      	push	{r7, lr}
 8010688:	b082      	sub	sp, #8
 801068a:	af00      	add	r7, sp, #0
 801068c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	781b      	ldrb	r3, [r3, #0]
 8010692:	b2db      	uxtb	r3, r3
 8010694:	2b0b      	cmp	r3, #11
 8010696:	d10a      	bne.n	80106ae <USBH_HandleSof+0x28>
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d005      	beq.n	80106ae <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80106a8:	699b      	ldr	r3, [r3, #24]
 80106aa:	6878      	ldr	r0, [r7, #4]
 80106ac:	4798      	blx	r3
  }
}
 80106ae:	bf00      	nop
 80106b0:	3708      	adds	r7, #8
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}

080106b6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80106b6:	b580      	push	{r7, lr}
 80106b8:	b082      	sub	sp, #8
 80106ba:	af00      	add	r7, sp, #0
 80106bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	2201      	movs	r2, #1
 80106c2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80106c6:	2300      	movs	r3, #0
 80106c8:	2200      	movs	r2, #0
 80106ca:	2101      	movs	r1, #1
 80106cc:	6878      	ldr	r0, [r7, #4]
 80106ce:	f000 f85b 	bl	8010788 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 80106d2:	bf00      	nop
}
 80106d4:	3708      	adds	r7, #8
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd80      	pop	{r7, pc}

080106da <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80106da:	b480      	push	{r7}
 80106dc:	b083      	sub	sp, #12
 80106de:	af00      	add	r7, sp, #0
 80106e0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	2200      	movs	r2, #0
 80106e6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	2201      	movs	r2, #1
 80106ee:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 80106f2:	bf00      	nop
}
 80106f4:	370c      	adds	r7, #12
 80106f6:	46bd      	mov	sp, r7
 80106f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fc:	4770      	bx	lr

080106fe <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80106fe:	b580      	push	{r7, lr}
 8010700:	b082      	sub	sp, #8
 8010702:	af00      	add	r7, sp, #0
 8010704:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	2201      	movs	r2, #1
 801070a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	2200      	movs	r2, #0
 8010712:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	2200      	movs	r2, #0
 801071a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 801071e:	2300      	movs	r3, #0
 8010720:	2200      	movs	r2, #0
 8010722:	2101      	movs	r1, #1
 8010724:	6878      	ldr	r0, [r7, #4]
 8010726:	f000 f82f 	bl	8010788 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 801072a:	2300      	movs	r3, #0
}
 801072c:	4618      	mov	r0, r3
 801072e:	3708      	adds	r7, #8
 8010730:	46bd      	mov	sp, r7
 8010732:	bd80      	pop	{r7, pc}

08010734 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b082      	sub	sp, #8
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2201      	movs	r2, #1
 8010740:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2200      	movs	r2, #0
 8010748:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2200      	movs	r2, #0
 8010750:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	f003 fd5e 	bl	8014216 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	791b      	ldrb	r3, [r3, #4]
 801075e:	4619      	mov	r1, r3
 8010760:	6878      	ldr	r0, [r7, #4]
 8010762:	f000 ffc5 	bl	80116f0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	795b      	ldrb	r3, [r3, #5]
 801076a:	4619      	mov	r1, r3
 801076c:	6878      	ldr	r0, [r7, #4]
 801076e:	f000 ffbf 	bl	80116f0 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8010772:	2300      	movs	r3, #0
 8010774:	2200      	movs	r2, #0
 8010776:	2101      	movs	r1, #1
 8010778:	6878      	ldr	r0, [r7, #4]
 801077a:	f000 f805 	bl	8010788 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 801077e:	2300      	movs	r3, #0
}
 8010780:	4618      	mov	r0, r3
 8010782:	3708      	adds	r7, #8
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}

08010788 <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b086      	sub	sp, #24
 801078c:	af00      	add	r7, sp, #0
 801078e:	60f8      	str	r0, [r7, #12]
 8010790:	607a      	str	r2, [r7, #4]
 8010792:	603b      	str	r3, [r7, #0]
 8010794:	460b      	mov	r3, r1
 8010796:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 8010798:	7afa      	ldrb	r2, [r7, #11]
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  UNUSED(priority);

  /* Calculate the number of available spaces */
  uint32_t available_spaces = MSGQUEUE_OBJECTS - osMessageWaiting(phost->os_event);
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 80107a6:	4618      	mov	r0, r3
 80107a8:	f001 f9c8 	bl	8011b3c <osMessageWaiting>
 80107ac:	4603      	mov	r3, r0
 80107ae:	f1c3 0310 	rsb	r3, r3, #16
 80107b2:	617b      	str	r3, [r7, #20]

  if (available_spaces != 0U)
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d009      	beq.n	80107ce <USBH_OS_PutMessage+0x46>
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80107c6:	687a      	ldr	r2, [r7, #4]
 80107c8:	4619      	mov	r1, r3
 80107ca:	f001 f903 	bl	80119d4 <osMessagePut>
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
  }
#endif /* (osCMSIS < 0x20000U) */
}
 80107ce:	bf00      	nop
 80107d0:	3718      	adds	r7, #24
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bd80      	pop	{r7, pc}

080107d6 <USBH_Process_OS>:
  * @param  pvParameters not used
  * @retval None
  */
#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 80107d6:	b580      	push	{r7, lr}
 80107d8:	b086      	sub	sp, #24
 80107da:	af00      	add	r7, sp, #0
 80107dc:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 80107e4:	f107 030c 	add.w	r3, r7, #12
 80107e8:	f04f 32ff 	mov.w	r2, #4294967295
 80107ec:	4618      	mov	r0, r3
 80107ee:	f001 f931 	bl	8011a54 <osMessageGet>
    if (event.status == osEventMessage)
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	2b10      	cmp	r3, #16
 80107f6:	d1f2      	bne.n	80107de <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80107f8:	6878      	ldr	r0, [r7, #4]
 80107fa:	f7ff fb0b 	bl	800fe14 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80107fe:	e7ee      	b.n	80107de <USBH_Process_OS+0x8>

08010800 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b082      	sub	sp, #8
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8010808:	2300      	movs	r3, #0
 801080a:	2200      	movs	r2, #0
 801080c:	2101      	movs	r1, #1
 801080e:	6878      	ldr	r0, [r7, #4]
 8010810:	f7ff ffba 	bl	8010788 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8010814:	2300      	movs	r3, #0
}
 8010816:	4618      	mov	r0, r3
 8010818:	3708      	adds	r7, #8
 801081a:	46bd      	mov	sp, r7
 801081c:	bd80      	pop	{r7, pc}

0801081e <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 801081e:	b580      	push	{r7, lr}
 8010820:	b086      	sub	sp, #24
 8010822:	af02      	add	r7, sp, #8
 8010824:	6078      	str	r0, [r7, #4]
 8010826:	460b      	mov	r3, r1
 8010828:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 801082a:	887b      	ldrh	r3, [r7, #2]
 801082c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010830:	d901      	bls.n	8010836 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8010832:	2303      	movs	r3, #3
 8010834:	e01b      	b.n	801086e <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 801083c:	887b      	ldrh	r3, [r7, #2]
 801083e:	9300      	str	r3, [sp, #0]
 8010840:	4613      	mov	r3, r2
 8010842:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010846:	2100      	movs	r1, #0
 8010848:	6878      	ldr	r0, [r7, #4]
 801084a:	f000 f872 	bl	8010932 <USBH_GetDescriptor>
 801084e:	4603      	mov	r3, r0
 8010850:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8010852:	7bfb      	ldrb	r3, [r7, #15]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d109      	bne.n	801086c <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 801085e:	887a      	ldrh	r2, [r7, #2]
 8010860:	4619      	mov	r1, r3
 8010862:	6878      	ldr	r0, [r7, #4]
 8010864:	f000 f92a 	bl	8010abc <USBH_ParseDevDesc>
 8010868:	4603      	mov	r3, r0
 801086a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801086c:	7bfb      	ldrb	r3, [r7, #15]
}
 801086e:	4618      	mov	r0, r3
 8010870:	3710      	adds	r7, #16
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}

08010876 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8010876:	b580      	push	{r7, lr}
 8010878:	b086      	sub	sp, #24
 801087a:	af02      	add	r7, sp, #8
 801087c:	6078      	str	r0, [r7, #4]
 801087e:	460b      	mov	r3, r1
 8010880:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	331c      	adds	r3, #28
 8010886:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8010888:	887b      	ldrh	r3, [r7, #2]
 801088a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801088e:	d901      	bls.n	8010894 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8010890:	2303      	movs	r3, #3
 8010892:	e016      	b.n	80108c2 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8010894:	887b      	ldrh	r3, [r7, #2]
 8010896:	9300      	str	r3, [sp, #0]
 8010898:	68bb      	ldr	r3, [r7, #8]
 801089a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801089e:	2100      	movs	r1, #0
 80108a0:	6878      	ldr	r0, [r7, #4]
 80108a2:	f000 f846 	bl	8010932 <USBH_GetDescriptor>
 80108a6:	4603      	mov	r3, r0
 80108a8:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80108aa:	7bfb      	ldrb	r3, [r7, #15]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d107      	bne.n	80108c0 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80108b0:	887b      	ldrh	r3, [r7, #2]
 80108b2:	461a      	mov	r2, r3
 80108b4:	68b9      	ldr	r1, [r7, #8]
 80108b6:	6878      	ldr	r0, [r7, #4]
 80108b8:	f000 f9b0 	bl	8010c1c <USBH_ParseCfgDesc>
 80108bc:	4603      	mov	r3, r0
 80108be:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80108c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80108c2:	4618      	mov	r0, r3
 80108c4:	3710      	adds	r7, #16
 80108c6:	46bd      	mov	sp, r7
 80108c8:	bd80      	pop	{r7, pc}

080108ca <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80108ca:	b580      	push	{r7, lr}
 80108cc:	b088      	sub	sp, #32
 80108ce:	af02      	add	r7, sp, #8
 80108d0:	60f8      	str	r0, [r7, #12]
 80108d2:	607a      	str	r2, [r7, #4]
 80108d4:	461a      	mov	r2, r3
 80108d6:	460b      	mov	r3, r1
 80108d8:	72fb      	strb	r3, [r7, #11]
 80108da:	4613      	mov	r3, r2
 80108dc:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80108de:	893b      	ldrh	r3, [r7, #8]
 80108e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80108e4:	d802      	bhi.n	80108ec <USBH_Get_StringDesc+0x22>
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d101      	bne.n	80108f0 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80108ec:	2303      	movs	r3, #3
 80108ee:	e01c      	b.n	801092a <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80108f0:	7afb      	ldrb	r3, [r7, #11]
 80108f2:	b29b      	uxth	r3, r3
 80108f4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80108f8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8010900:	893b      	ldrh	r3, [r7, #8]
 8010902:	9300      	str	r3, [sp, #0]
 8010904:	460b      	mov	r3, r1
 8010906:	2100      	movs	r1, #0
 8010908:	68f8      	ldr	r0, [r7, #12]
 801090a:	f000 f812 	bl	8010932 <USBH_GetDescriptor>
 801090e:	4603      	mov	r3, r0
 8010910:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8010912:	7dfb      	ldrb	r3, [r7, #23]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d107      	bne.n	8010928 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 801091e:	893a      	ldrh	r2, [r7, #8]
 8010920:	6879      	ldr	r1, [r7, #4]
 8010922:	4618      	mov	r0, r3
 8010924:	f000 fb8d 	bl	8011042 <USBH_ParseStringDesc>
  }

  return status;
 8010928:	7dfb      	ldrb	r3, [r7, #23]
}
 801092a:	4618      	mov	r0, r3
 801092c:	3718      	adds	r7, #24
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}

08010932 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8010932:	b580      	push	{r7, lr}
 8010934:	b084      	sub	sp, #16
 8010936:	af00      	add	r7, sp, #0
 8010938:	60f8      	str	r0, [r7, #12]
 801093a:	607b      	str	r3, [r7, #4]
 801093c:	460b      	mov	r3, r1
 801093e:	72fb      	strb	r3, [r7, #11]
 8010940:	4613      	mov	r3, r2
 8010942:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	789b      	ldrb	r3, [r3, #2]
 8010948:	2b01      	cmp	r3, #1
 801094a:	d11c      	bne.n	8010986 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 801094c:	7afb      	ldrb	r3, [r7, #11]
 801094e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010952:	b2da      	uxtb	r2, r3
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	2206      	movs	r2, #6
 801095c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	893a      	ldrh	r2, [r7, #8]
 8010962:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8010964:	893b      	ldrh	r3, [r7, #8]
 8010966:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801096a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801096e:	d104      	bne.n	801097a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	f240 4209 	movw	r2, #1033	@ 0x409
 8010976:	829a      	strh	r2, [r3, #20]
 8010978:	e002      	b.n	8010980 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	2200      	movs	r2, #0
 801097e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	8b3a      	ldrh	r2, [r7, #24]
 8010984:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8010986:	8b3b      	ldrh	r3, [r7, #24]
 8010988:	461a      	mov	r2, r3
 801098a:	6879      	ldr	r1, [r7, #4]
 801098c:	68f8      	ldr	r0, [r7, #12]
 801098e:	f000 fba5 	bl	80110dc <USBH_CtlReq>
 8010992:	4603      	mov	r3, r0
}
 8010994:	4618      	mov	r0, r3
 8010996:	3710      	adds	r7, #16
 8010998:	46bd      	mov	sp, r7
 801099a:	bd80      	pop	{r7, pc}

0801099c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b082      	sub	sp, #8
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
 80109a4:	460b      	mov	r3, r1
 80109a6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	789b      	ldrb	r3, [r3, #2]
 80109ac:	2b01      	cmp	r3, #1
 80109ae:	d10f      	bne.n	80109d0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2200      	movs	r2, #0
 80109b4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	2205      	movs	r2, #5
 80109ba:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80109bc:	78fb      	ldrb	r3, [r7, #3]
 80109be:	b29a      	uxth	r2, r3
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2200      	movs	r2, #0
 80109c8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	2200      	movs	r2, #0
 80109ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80109d0:	2200      	movs	r2, #0
 80109d2:	2100      	movs	r1, #0
 80109d4:	6878      	ldr	r0, [r7, #4]
 80109d6:	f000 fb81 	bl	80110dc <USBH_CtlReq>
 80109da:	4603      	mov	r3, r0
}
 80109dc:	4618      	mov	r0, r3
 80109de:	3708      	adds	r7, #8
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd80      	pop	{r7, pc}

080109e4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b082      	sub	sp, #8
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
 80109ec:	460b      	mov	r3, r1
 80109ee:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	789b      	ldrb	r3, [r3, #2]
 80109f4:	2b01      	cmp	r3, #1
 80109f6:	d10e      	bne.n	8010a16 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2200      	movs	r2, #0
 80109fc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	2209      	movs	r2, #9
 8010a02:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	887a      	ldrh	r2, [r7, #2]
 8010a08:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2200      	movs	r2, #0
 8010a14:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010a16:	2200      	movs	r2, #0
 8010a18:	2100      	movs	r1, #0
 8010a1a:	6878      	ldr	r0, [r7, #4]
 8010a1c:	f000 fb5e 	bl	80110dc <USBH_CtlReq>
 8010a20:	4603      	mov	r3, r0
}
 8010a22:	4618      	mov	r0, r3
 8010a24:	3708      	adds	r7, #8
 8010a26:	46bd      	mov	sp, r7
 8010a28:	bd80      	pop	{r7, pc}

08010a2a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8010a2a:	b580      	push	{r7, lr}
 8010a2c:	b082      	sub	sp, #8
 8010a2e:	af00      	add	r7, sp, #0
 8010a30:	6078      	str	r0, [r7, #4]
 8010a32:	460b      	mov	r3, r1
 8010a34:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	789b      	ldrb	r3, [r3, #2]
 8010a3a:	2b01      	cmp	r3, #1
 8010a3c:	d10f      	bne.n	8010a5e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	2200      	movs	r2, #0
 8010a42:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	2203      	movs	r2, #3
 8010a48:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8010a4a:	78fb      	ldrb	r3, [r7, #3]
 8010a4c:	b29a      	uxth	r2, r3
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	2200      	movs	r2, #0
 8010a56:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010a5e:	2200      	movs	r2, #0
 8010a60:	2100      	movs	r1, #0
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f000 fb3a 	bl	80110dc <USBH_CtlReq>
 8010a68:	4603      	mov	r3, r0
}
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	3708      	adds	r7, #8
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}

08010a72 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8010a72:	b580      	push	{r7, lr}
 8010a74:	b082      	sub	sp, #8
 8010a76:	af00      	add	r7, sp, #0
 8010a78:	6078      	str	r0, [r7, #4]
 8010a7a:	460b      	mov	r3, r1
 8010a7c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	789b      	ldrb	r3, [r3, #2]
 8010a82:	2b01      	cmp	r3, #1
 8010a84:	d10f      	bne.n	8010aa6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	2202      	movs	r2, #2
 8010a8a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	2201      	movs	r2, #1
 8010a90:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	2200      	movs	r2, #0
 8010a96:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8010a98:	78fb      	ldrb	r3, [r7, #3]
 8010a9a:	b29a      	uxth	r2, r3
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	2100      	movs	r1, #0
 8010aaa:	6878      	ldr	r0, [r7, #4]
 8010aac:	f000 fb16 	bl	80110dc <USBH_CtlReq>
 8010ab0:	4603      	mov	r3, r0
}
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	3708      	adds	r7, #8
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd80      	pop	{r7, pc}
	...

08010abc <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8010abc:	b480      	push	{r7}
 8010abe:	b087      	sub	sp, #28
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	60f8      	str	r0, [r7, #12]
 8010ac4:	60b9      	str	r1, [r7, #8]
 8010ac6:	4613      	mov	r3, r2
 8010ac8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8010ad0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d101      	bne.n	8010ae0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8010adc:	2302      	movs	r3, #2
 8010ade:	e094      	b.n	8010c0a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8010ae0:	68bb      	ldr	r3, [r7, #8]
 8010ae2:	781a      	ldrb	r2, [r3, #0]
 8010ae4:	693b      	ldr	r3, [r7, #16]
 8010ae6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8010ae8:	68bb      	ldr	r3, [r7, #8]
 8010aea:	785a      	ldrb	r2, [r3, #1]
 8010aec:	693b      	ldr	r3, [r7, #16]
 8010aee:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8010af0:	68bb      	ldr	r3, [r7, #8]
 8010af2:	3302      	adds	r3, #2
 8010af4:	781b      	ldrb	r3, [r3, #0]
 8010af6:	461a      	mov	r2, r3
 8010af8:	68bb      	ldr	r3, [r7, #8]
 8010afa:	3303      	adds	r3, #3
 8010afc:	781b      	ldrb	r3, [r3, #0]
 8010afe:	021b      	lsls	r3, r3, #8
 8010b00:	b29b      	uxth	r3, r3
 8010b02:	4313      	orrs	r3, r2
 8010b04:	b29a      	uxth	r2, r3
 8010b06:	693b      	ldr	r3, [r7, #16]
 8010b08:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8010b0a:	68bb      	ldr	r3, [r7, #8]
 8010b0c:	791a      	ldrb	r2, [r3, #4]
 8010b0e:	693b      	ldr	r3, [r7, #16]
 8010b10:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8010b12:	68bb      	ldr	r3, [r7, #8]
 8010b14:	795a      	ldrb	r2, [r3, #5]
 8010b16:	693b      	ldr	r3, [r7, #16]
 8010b18:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8010b1a:	68bb      	ldr	r3, [r7, #8]
 8010b1c:	799a      	ldrb	r2, [r3, #6]
 8010b1e:	693b      	ldr	r3, [r7, #16]
 8010b20:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8010b22:	68bb      	ldr	r3, [r7, #8]
 8010b24:	79da      	ldrb	r2, [r3, #7]
 8010b26:	693b      	ldr	r3, [r7, #16]
 8010b28:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d004      	beq.n	8010b3e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8010b3a:	2b01      	cmp	r3, #1
 8010b3c:	d11b      	bne.n	8010b76 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8010b3e:	693b      	ldr	r3, [r7, #16]
 8010b40:	79db      	ldrb	r3, [r3, #7]
 8010b42:	2b20      	cmp	r3, #32
 8010b44:	dc0f      	bgt.n	8010b66 <USBH_ParseDevDesc+0xaa>
 8010b46:	2b08      	cmp	r3, #8
 8010b48:	db0f      	blt.n	8010b6a <USBH_ParseDevDesc+0xae>
 8010b4a:	3b08      	subs	r3, #8
 8010b4c:	4a32      	ldr	r2, [pc, #200]	@ (8010c18 <USBH_ParseDevDesc+0x15c>)
 8010b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8010b52:	f003 0301 	and.w	r3, r3, #1
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	bf14      	ite	ne
 8010b5a:	2301      	movne	r3, #1
 8010b5c:	2300      	moveq	r3, #0
 8010b5e:	b2db      	uxtb	r3, r3
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d106      	bne.n	8010b72 <USBH_ParseDevDesc+0xb6>
 8010b64:	e001      	b.n	8010b6a <USBH_ParseDevDesc+0xae>
 8010b66:	2b40      	cmp	r3, #64	@ 0x40
 8010b68:	d003      	beq.n	8010b72 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8010b6a:	693b      	ldr	r3, [r7, #16]
 8010b6c:	2208      	movs	r2, #8
 8010b6e:	71da      	strb	r2, [r3, #7]
        break;
 8010b70:	e000      	b.n	8010b74 <USBH_ParseDevDesc+0xb8>
        break;
 8010b72:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8010b74:	e00e      	b.n	8010b94 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010b7c:	2b02      	cmp	r3, #2
 8010b7e:	d107      	bne.n	8010b90 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8010b80:	693b      	ldr	r3, [r7, #16]
 8010b82:	79db      	ldrb	r3, [r3, #7]
 8010b84:	2b08      	cmp	r3, #8
 8010b86:	d005      	beq.n	8010b94 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8010b88:	693b      	ldr	r3, [r7, #16]
 8010b8a:	2208      	movs	r2, #8
 8010b8c:	71da      	strb	r2, [r3, #7]
 8010b8e:	e001      	b.n	8010b94 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8010b90:	2303      	movs	r3, #3
 8010b92:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8010b94:	88fb      	ldrh	r3, [r7, #6]
 8010b96:	2b08      	cmp	r3, #8
 8010b98:	d936      	bls.n	8010c08 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8010b9a:	68bb      	ldr	r3, [r7, #8]
 8010b9c:	3308      	adds	r3, #8
 8010b9e:	781b      	ldrb	r3, [r3, #0]
 8010ba0:	461a      	mov	r2, r3
 8010ba2:	68bb      	ldr	r3, [r7, #8]
 8010ba4:	3309      	adds	r3, #9
 8010ba6:	781b      	ldrb	r3, [r3, #0]
 8010ba8:	021b      	lsls	r3, r3, #8
 8010baa:	b29b      	uxth	r3, r3
 8010bac:	4313      	orrs	r3, r2
 8010bae:	b29a      	uxth	r2, r3
 8010bb0:	693b      	ldr	r3, [r7, #16]
 8010bb2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8010bb4:	68bb      	ldr	r3, [r7, #8]
 8010bb6:	330a      	adds	r3, #10
 8010bb8:	781b      	ldrb	r3, [r3, #0]
 8010bba:	461a      	mov	r2, r3
 8010bbc:	68bb      	ldr	r3, [r7, #8]
 8010bbe:	330b      	adds	r3, #11
 8010bc0:	781b      	ldrb	r3, [r3, #0]
 8010bc2:	021b      	lsls	r3, r3, #8
 8010bc4:	b29b      	uxth	r3, r3
 8010bc6:	4313      	orrs	r3, r2
 8010bc8:	b29a      	uxth	r2, r3
 8010bca:	693b      	ldr	r3, [r7, #16]
 8010bcc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8010bce:	68bb      	ldr	r3, [r7, #8]
 8010bd0:	330c      	adds	r3, #12
 8010bd2:	781b      	ldrb	r3, [r3, #0]
 8010bd4:	461a      	mov	r2, r3
 8010bd6:	68bb      	ldr	r3, [r7, #8]
 8010bd8:	330d      	adds	r3, #13
 8010bda:	781b      	ldrb	r3, [r3, #0]
 8010bdc:	021b      	lsls	r3, r3, #8
 8010bde:	b29b      	uxth	r3, r3
 8010be0:	4313      	orrs	r3, r2
 8010be2:	b29a      	uxth	r2, r3
 8010be4:	693b      	ldr	r3, [r7, #16]
 8010be6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	7b9a      	ldrb	r2, [r3, #14]
 8010bec:	693b      	ldr	r3, [r7, #16]
 8010bee:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8010bf0:	68bb      	ldr	r3, [r7, #8]
 8010bf2:	7bda      	ldrb	r2, [r3, #15]
 8010bf4:	693b      	ldr	r3, [r7, #16]
 8010bf6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8010bf8:	68bb      	ldr	r3, [r7, #8]
 8010bfa:	7c1a      	ldrb	r2, [r3, #16]
 8010bfc:	693b      	ldr	r3, [r7, #16]
 8010bfe:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	7c5a      	ldrb	r2, [r3, #17]
 8010c04:	693b      	ldr	r3, [r7, #16]
 8010c06:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8010c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	371c      	adds	r7, #28
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c14:	4770      	bx	lr
 8010c16:	bf00      	nop
 8010c18:	01000101 	.word	0x01000101

08010c1c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b08c      	sub	sp, #48	@ 0x30
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	60f8      	str	r0, [r7, #12]
 8010c24:	60b9      	str	r1, [r7, #8]
 8010c26:	4613      	mov	r3, r2
 8010c28:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8010c30:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8010c32:	2300      	movs	r3, #0
 8010c34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8010c38:	2300      	movs	r3, #0
 8010c3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8010c3e:	2300      	movs	r3, #0
 8010c40:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8010c44:	68bb      	ldr	r3, [r7, #8]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d101      	bne.n	8010c4e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8010c4a:	2302      	movs	r3, #2
 8010c4c:	e0de      	b.n	8010e0c <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8010c4e:	68bb      	ldr	r3, [r7, #8]
 8010c50:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8010c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c54:	781b      	ldrb	r3, [r3, #0]
 8010c56:	2b09      	cmp	r3, #9
 8010c58:	d002      	beq.n	8010c60 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8010c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c5c:	2209      	movs	r2, #9
 8010c5e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8010c60:	68bb      	ldr	r3, [r7, #8]
 8010c62:	781a      	ldrb	r2, [r3, #0]
 8010c64:	6a3b      	ldr	r3, [r7, #32]
 8010c66:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	785a      	ldrb	r2, [r3, #1]
 8010c6c:	6a3b      	ldr	r3, [r7, #32]
 8010c6e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8010c70:	68bb      	ldr	r3, [r7, #8]
 8010c72:	3302      	adds	r3, #2
 8010c74:	781b      	ldrb	r3, [r3, #0]
 8010c76:	461a      	mov	r2, r3
 8010c78:	68bb      	ldr	r3, [r7, #8]
 8010c7a:	3303      	adds	r3, #3
 8010c7c:	781b      	ldrb	r3, [r3, #0]
 8010c7e:	021b      	lsls	r3, r3, #8
 8010c80:	b29b      	uxth	r3, r3
 8010c82:	4313      	orrs	r3, r2
 8010c84:	b29b      	uxth	r3, r3
 8010c86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010c8a:	bf28      	it	cs
 8010c8c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8010c90:	b29a      	uxth	r2, r3
 8010c92:	6a3b      	ldr	r3, [r7, #32]
 8010c94:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8010c96:	68bb      	ldr	r3, [r7, #8]
 8010c98:	791a      	ldrb	r2, [r3, #4]
 8010c9a:	6a3b      	ldr	r3, [r7, #32]
 8010c9c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8010c9e:	68bb      	ldr	r3, [r7, #8]
 8010ca0:	795a      	ldrb	r2, [r3, #5]
 8010ca2:	6a3b      	ldr	r3, [r7, #32]
 8010ca4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8010ca6:	68bb      	ldr	r3, [r7, #8]
 8010ca8:	799a      	ldrb	r2, [r3, #6]
 8010caa:	6a3b      	ldr	r3, [r7, #32]
 8010cac:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8010cae:	68bb      	ldr	r3, [r7, #8]
 8010cb0:	79da      	ldrb	r2, [r3, #7]
 8010cb2:	6a3b      	ldr	r3, [r7, #32]
 8010cb4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8010cb6:	68bb      	ldr	r3, [r7, #8]
 8010cb8:	7a1a      	ldrb	r2, [r3, #8]
 8010cba:	6a3b      	ldr	r3, [r7, #32]
 8010cbc:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8010cbe:	88fb      	ldrh	r3, [r7, #6]
 8010cc0:	2b09      	cmp	r3, #9
 8010cc2:	f240 80a1 	bls.w	8010e08 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 8010cc6:	2309      	movs	r3, #9
 8010cc8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8010cca:	2300      	movs	r3, #0
 8010ccc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8010cce:	e085      	b.n	8010ddc <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8010cd0:	f107 0316 	add.w	r3, r7, #22
 8010cd4:	4619      	mov	r1, r3
 8010cd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010cd8:	f000 f9e6 	bl	80110a8 <USBH_GetNextDesc>
 8010cdc:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8010cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ce0:	785b      	ldrb	r3, [r3, #1]
 8010ce2:	2b04      	cmp	r3, #4
 8010ce4:	d17a      	bne.n	8010ddc <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8010ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ce8:	781b      	ldrb	r3, [r3, #0]
 8010cea:	2b09      	cmp	r3, #9
 8010cec:	d002      	beq.n	8010cf4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8010cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cf0:	2209      	movs	r2, #9
 8010cf2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8010cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010cf8:	221a      	movs	r2, #26
 8010cfa:	fb02 f303 	mul.w	r3, r2, r3
 8010cfe:	3308      	adds	r3, #8
 8010d00:	6a3a      	ldr	r2, [r7, #32]
 8010d02:	4413      	add	r3, r2
 8010d04:	3302      	adds	r3, #2
 8010d06:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8010d08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010d0a:	69f8      	ldr	r0, [r7, #28]
 8010d0c:	f000 f882 	bl	8010e14 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8010d10:	2300      	movs	r3, #0
 8010d12:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8010d16:	2300      	movs	r3, #0
 8010d18:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8010d1a:	e043      	b.n	8010da4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8010d1c:	f107 0316 	add.w	r3, r7, #22
 8010d20:	4619      	mov	r1, r3
 8010d22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010d24:	f000 f9c0 	bl	80110a8 <USBH_GetNextDesc>
 8010d28:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d2c:	785b      	ldrb	r3, [r3, #1]
 8010d2e:	2b05      	cmp	r3, #5
 8010d30:	d138      	bne.n	8010da4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8010d32:	69fb      	ldr	r3, [r7, #28]
 8010d34:	795b      	ldrb	r3, [r3, #5]
 8010d36:	2b01      	cmp	r3, #1
 8010d38:	d113      	bne.n	8010d62 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8010d3a:	69fb      	ldr	r3, [r7, #28]
 8010d3c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8010d3e:	2b02      	cmp	r3, #2
 8010d40:	d003      	beq.n	8010d4a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8010d42:	69fb      	ldr	r3, [r7, #28]
 8010d44:	799b      	ldrb	r3, [r3, #6]
 8010d46:	2b03      	cmp	r3, #3
 8010d48:	d10b      	bne.n	8010d62 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010d4a:	69fb      	ldr	r3, [r7, #28]
 8010d4c:	79db      	ldrb	r3, [r3, #7]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d10b      	bne.n	8010d6a <USBH_ParseCfgDesc+0x14e>
 8010d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d54:	781b      	ldrb	r3, [r3, #0]
 8010d56:	2b09      	cmp	r3, #9
 8010d58:	d007      	beq.n	8010d6a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8010d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d5c:	2209      	movs	r2, #9
 8010d5e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010d60:	e003      	b.n	8010d6a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8010d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d64:	2207      	movs	r2, #7
 8010d66:	701a      	strb	r2, [r3, #0]
 8010d68:	e000      	b.n	8010d6c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010d6a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8010d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010d70:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010d74:	3201      	adds	r2, #1
 8010d76:	00d2      	lsls	r2, r2, #3
 8010d78:	211a      	movs	r1, #26
 8010d7a:	fb01 f303 	mul.w	r3, r1, r3
 8010d7e:	4413      	add	r3, r2
 8010d80:	3308      	adds	r3, #8
 8010d82:	6a3a      	ldr	r2, [r7, #32]
 8010d84:	4413      	add	r3, r2
 8010d86:	3304      	adds	r3, #4
 8010d88:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8010d8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010d8c:	69b9      	ldr	r1, [r7, #24]
 8010d8e:	68f8      	ldr	r0, [r7, #12]
 8010d90:	f000 f86f 	bl	8010e72 <USBH_ParseEPDesc>
 8010d94:	4603      	mov	r3, r0
 8010d96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8010d9a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010d9e:	3301      	adds	r3, #1
 8010da0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8010da4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010da8:	2b01      	cmp	r3, #1
 8010daa:	d80a      	bhi.n	8010dc2 <USBH_ParseCfgDesc+0x1a6>
 8010dac:	69fb      	ldr	r3, [r7, #28]
 8010dae:	791b      	ldrb	r3, [r3, #4]
 8010db0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010db4:	429a      	cmp	r2, r3
 8010db6:	d204      	bcs.n	8010dc2 <USBH_ParseCfgDesc+0x1a6>
 8010db8:	6a3b      	ldr	r3, [r7, #32]
 8010dba:	885a      	ldrh	r2, [r3, #2]
 8010dbc:	8afb      	ldrh	r3, [r7, #22]
 8010dbe:	429a      	cmp	r2, r3
 8010dc0:	d8ac      	bhi.n	8010d1c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8010dc2:	69fb      	ldr	r3, [r7, #28]
 8010dc4:	791b      	ldrb	r3, [r3, #4]
 8010dc6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010dca:	429a      	cmp	r2, r3
 8010dcc:	d201      	bcs.n	8010dd2 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 8010dce:	2303      	movs	r3, #3
 8010dd0:	e01c      	b.n	8010e0c <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 8010dd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010dd6:	3301      	adds	r3, #1
 8010dd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8010ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010de0:	2b01      	cmp	r3, #1
 8010de2:	d805      	bhi.n	8010df0 <USBH_ParseCfgDesc+0x1d4>
 8010de4:	6a3b      	ldr	r3, [r7, #32]
 8010de6:	885a      	ldrh	r2, [r3, #2]
 8010de8:	8afb      	ldrh	r3, [r7, #22]
 8010dea:	429a      	cmp	r2, r3
 8010dec:	f63f af70 	bhi.w	8010cd0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8010df0:	6a3b      	ldr	r3, [r7, #32]
 8010df2:	791b      	ldrb	r3, [r3, #4]
 8010df4:	2b02      	cmp	r3, #2
 8010df6:	bf28      	it	cs
 8010df8:	2302      	movcs	r3, #2
 8010dfa:	b2db      	uxtb	r3, r3
 8010dfc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010e00:	429a      	cmp	r2, r3
 8010e02:	d201      	bcs.n	8010e08 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 8010e04:	2303      	movs	r3, #3
 8010e06:	e001      	b.n	8010e0c <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 8010e08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	3730      	adds	r7, #48	@ 0x30
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd80      	pop	{r7, pc}

08010e14 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8010e14:	b480      	push	{r7}
 8010e16:	b083      	sub	sp, #12
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
 8010e1c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8010e1e:	683b      	ldr	r3, [r7, #0]
 8010e20:	781a      	ldrb	r2, [r3, #0]
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8010e26:	683b      	ldr	r3, [r7, #0]
 8010e28:	785a      	ldrb	r2, [r3, #1]
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	789a      	ldrb	r2, [r3, #2]
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8010e36:	683b      	ldr	r3, [r7, #0]
 8010e38:	78da      	ldrb	r2, [r3, #3]
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8010e3e:	683b      	ldr	r3, [r7, #0]
 8010e40:	791a      	ldrb	r2, [r3, #4]
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8010e46:	683b      	ldr	r3, [r7, #0]
 8010e48:	795a      	ldrb	r2, [r3, #5]
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8010e4e:	683b      	ldr	r3, [r7, #0]
 8010e50:	799a      	ldrb	r2, [r3, #6]
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8010e56:	683b      	ldr	r3, [r7, #0]
 8010e58:	79da      	ldrb	r2, [r3, #7]
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8010e5e:	683b      	ldr	r3, [r7, #0]
 8010e60:	7a1a      	ldrb	r2, [r3, #8]
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	721a      	strb	r2, [r3, #8]
}
 8010e66:	bf00      	nop
 8010e68:	370c      	adds	r7, #12
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e70:	4770      	bx	lr

08010e72 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8010e72:	b480      	push	{r7}
 8010e74:	b087      	sub	sp, #28
 8010e76:	af00      	add	r7, sp, #0
 8010e78:	60f8      	str	r0, [r7, #12]
 8010e7a:	60b9      	str	r1, [r7, #8]
 8010e7c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8010e7e:	2300      	movs	r3, #0
 8010e80:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	781a      	ldrb	r2, [r3, #0]
 8010e86:	68bb      	ldr	r3, [r7, #8]
 8010e88:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	785a      	ldrb	r2, [r3, #1]
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	789a      	ldrb	r2, [r3, #2]
 8010e96:	68bb      	ldr	r3, [r7, #8]
 8010e98:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	78da      	ldrb	r2, [r3, #3]
 8010e9e:	68bb      	ldr	r3, [r7, #8]
 8010ea0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	3304      	adds	r3, #4
 8010ea6:	781b      	ldrb	r3, [r3, #0]
 8010ea8:	461a      	mov	r2, r3
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	3305      	adds	r3, #5
 8010eae:	781b      	ldrb	r3, [r3, #0]
 8010eb0:	021b      	lsls	r3, r3, #8
 8010eb2:	b29b      	uxth	r3, r3
 8010eb4:	4313      	orrs	r3, r2
 8010eb6:	b29a      	uxth	r2, r3
 8010eb8:	68bb      	ldr	r3, [r7, #8]
 8010eba:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	799a      	ldrb	r2, [r3, #6]
 8010ec0:	68bb      	ldr	r3, [r7, #8]
 8010ec2:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	889b      	ldrh	r3, [r3, #4]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d009      	beq.n	8010ee0 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8010ecc:	68bb      	ldr	r3, [r7, #8]
 8010ece:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8010ed0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010ed4:	d804      	bhi.n	8010ee0 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8010ed6:	68bb      	ldr	r3, [r7, #8]
 8010ed8:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8010eda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010ede:	d901      	bls.n	8010ee4 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8010ee0:	2303      	movs	r3, #3
 8010ee2:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d136      	bne.n	8010f5c <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	78db      	ldrb	r3, [r3, #3]
 8010ef2:	f003 0303 	and.w	r3, r3, #3
 8010ef6:	2b02      	cmp	r3, #2
 8010ef8:	d108      	bne.n	8010f0c <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8010efa:	68bb      	ldr	r3, [r7, #8]
 8010efc:	889b      	ldrh	r3, [r3, #4]
 8010efe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010f02:	f240 8097 	bls.w	8011034 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010f06:	2303      	movs	r3, #3
 8010f08:	75fb      	strb	r3, [r7, #23]
 8010f0a:	e093      	b.n	8011034 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	78db      	ldrb	r3, [r3, #3]
 8010f10:	f003 0303 	and.w	r3, r3, #3
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d107      	bne.n	8010f28 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8010f18:	68bb      	ldr	r3, [r7, #8]
 8010f1a:	889b      	ldrh	r3, [r3, #4]
 8010f1c:	2b40      	cmp	r3, #64	@ 0x40
 8010f1e:	f240 8089 	bls.w	8011034 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010f22:	2303      	movs	r3, #3
 8010f24:	75fb      	strb	r3, [r7, #23]
 8010f26:	e085      	b.n	8011034 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8010f28:	68bb      	ldr	r3, [r7, #8]
 8010f2a:	78db      	ldrb	r3, [r3, #3]
 8010f2c:	f003 0303 	and.w	r3, r3, #3
 8010f30:	2b01      	cmp	r3, #1
 8010f32:	d005      	beq.n	8010f40 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8010f34:	68bb      	ldr	r3, [r7, #8]
 8010f36:	78db      	ldrb	r3, [r3, #3]
 8010f38:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8010f3c:	2b03      	cmp	r3, #3
 8010f3e:	d10a      	bne.n	8010f56 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	799b      	ldrb	r3, [r3, #6]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d003      	beq.n	8010f50 <USBH_ParseEPDesc+0xde>
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	799b      	ldrb	r3, [r3, #6]
 8010f4c:	2b10      	cmp	r3, #16
 8010f4e:	d970      	bls.n	8011032 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8010f50:	2303      	movs	r3, #3
 8010f52:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010f54:	e06d      	b.n	8011032 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010f56:	2303      	movs	r3, #3
 8010f58:	75fb      	strb	r3, [r7, #23]
 8010f5a:	e06b      	b.n	8011034 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010f62:	2b01      	cmp	r3, #1
 8010f64:	d13c      	bne.n	8010fe0 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8010f66:	68bb      	ldr	r3, [r7, #8]
 8010f68:	78db      	ldrb	r3, [r3, #3]
 8010f6a:	f003 0303 	and.w	r3, r3, #3
 8010f6e:	2b02      	cmp	r3, #2
 8010f70:	d005      	beq.n	8010f7e <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	78db      	ldrb	r3, [r3, #3]
 8010f76:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d106      	bne.n	8010f8c <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8010f7e:	68bb      	ldr	r3, [r7, #8]
 8010f80:	889b      	ldrh	r3, [r3, #4]
 8010f82:	2b40      	cmp	r3, #64	@ 0x40
 8010f84:	d956      	bls.n	8011034 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010f86:	2303      	movs	r3, #3
 8010f88:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8010f8a:	e053      	b.n	8011034 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	78db      	ldrb	r3, [r3, #3]
 8010f90:	f003 0303 	and.w	r3, r3, #3
 8010f94:	2b01      	cmp	r3, #1
 8010f96:	d10e      	bne.n	8010fb6 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8010f98:	68bb      	ldr	r3, [r7, #8]
 8010f9a:	799b      	ldrb	r3, [r3, #6]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d007      	beq.n	8010fb0 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8010fa0:	68bb      	ldr	r3, [r7, #8]
 8010fa2:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8010fa4:	2b10      	cmp	r3, #16
 8010fa6:	d803      	bhi.n	8010fb0 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8010fac:	2b40      	cmp	r3, #64	@ 0x40
 8010fae:	d941      	bls.n	8011034 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010fb0:	2303      	movs	r3, #3
 8010fb2:	75fb      	strb	r3, [r7, #23]
 8010fb4:	e03e      	b.n	8011034 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8010fb6:	68bb      	ldr	r3, [r7, #8]
 8010fb8:	78db      	ldrb	r3, [r3, #3]
 8010fba:	f003 0303 	and.w	r3, r3, #3
 8010fbe:	2b03      	cmp	r3, #3
 8010fc0:	d10b      	bne.n	8010fda <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8010fc2:	68bb      	ldr	r3, [r7, #8]
 8010fc4:	799b      	ldrb	r3, [r3, #6]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d004      	beq.n	8010fd4 <USBH_ParseEPDesc+0x162>
 8010fca:	68bb      	ldr	r3, [r7, #8]
 8010fcc:	889b      	ldrh	r3, [r3, #4]
 8010fce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010fd2:	d32f      	bcc.n	8011034 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010fd4:	2303      	movs	r3, #3
 8010fd6:	75fb      	strb	r3, [r7, #23]
 8010fd8:	e02c      	b.n	8011034 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010fda:	2303      	movs	r3, #3
 8010fdc:	75fb      	strb	r3, [r7, #23]
 8010fde:	e029      	b.n	8011034 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010fe6:	2b02      	cmp	r3, #2
 8010fe8:	d120      	bne.n	801102c <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8010fea:	68bb      	ldr	r3, [r7, #8]
 8010fec:	78db      	ldrb	r3, [r3, #3]
 8010fee:	f003 0303 	and.w	r3, r3, #3
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d106      	bne.n	8011004 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8010ff6:	68bb      	ldr	r3, [r7, #8]
 8010ff8:	889b      	ldrh	r3, [r3, #4]
 8010ffa:	2b08      	cmp	r3, #8
 8010ffc:	d01a      	beq.n	8011034 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010ffe:	2303      	movs	r3, #3
 8011000:	75fb      	strb	r3, [r7, #23]
 8011002:	e017      	b.n	8011034 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	78db      	ldrb	r3, [r3, #3]
 8011008:	f003 0303 	and.w	r3, r3, #3
 801100c:	2b03      	cmp	r3, #3
 801100e:	d10a      	bne.n	8011026 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8011010:	68bb      	ldr	r3, [r7, #8]
 8011012:	799b      	ldrb	r3, [r3, #6]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d003      	beq.n	8011020 <USBH_ParseEPDesc+0x1ae>
 8011018:	68bb      	ldr	r3, [r7, #8]
 801101a:	889b      	ldrh	r3, [r3, #4]
 801101c:	2b08      	cmp	r3, #8
 801101e:	d909      	bls.n	8011034 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011020:	2303      	movs	r3, #3
 8011022:	75fb      	strb	r3, [r7, #23]
 8011024:	e006      	b.n	8011034 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8011026:	2303      	movs	r3, #3
 8011028:	75fb      	strb	r3, [r7, #23]
 801102a:	e003      	b.n	8011034 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 801102c:	2303      	movs	r3, #3
 801102e:	75fb      	strb	r3, [r7, #23]
 8011030:	e000      	b.n	8011034 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8011032:	bf00      	nop
  }

  return status;
 8011034:	7dfb      	ldrb	r3, [r7, #23]
}
 8011036:	4618      	mov	r0, r3
 8011038:	371c      	adds	r7, #28
 801103a:	46bd      	mov	sp, r7
 801103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011040:	4770      	bx	lr

08011042 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8011042:	b480      	push	{r7}
 8011044:	b087      	sub	sp, #28
 8011046:	af00      	add	r7, sp, #0
 8011048:	60f8      	str	r0, [r7, #12]
 801104a:	60b9      	str	r1, [r7, #8]
 801104c:	4613      	mov	r3, r2
 801104e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	3301      	adds	r3, #1
 8011054:	781b      	ldrb	r3, [r3, #0]
 8011056:	2b03      	cmp	r3, #3
 8011058:	d120      	bne.n	801109c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	781b      	ldrb	r3, [r3, #0]
 801105e:	1e9a      	subs	r2, r3, #2
 8011060:	88fb      	ldrh	r3, [r7, #6]
 8011062:	4293      	cmp	r3, r2
 8011064:	bf28      	it	cs
 8011066:	4613      	movcs	r3, r2
 8011068:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	3302      	adds	r3, #2
 801106e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8011070:	2300      	movs	r3, #0
 8011072:	82fb      	strh	r3, [r7, #22]
 8011074:	e00b      	b.n	801108e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8011076:	8afb      	ldrh	r3, [r7, #22]
 8011078:	68fa      	ldr	r2, [r7, #12]
 801107a:	4413      	add	r3, r2
 801107c:	781a      	ldrb	r2, [r3, #0]
 801107e:	68bb      	ldr	r3, [r7, #8]
 8011080:	701a      	strb	r2, [r3, #0]
      pdest++;
 8011082:	68bb      	ldr	r3, [r7, #8]
 8011084:	3301      	adds	r3, #1
 8011086:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8011088:	8afb      	ldrh	r3, [r7, #22]
 801108a:	3302      	adds	r3, #2
 801108c:	82fb      	strh	r3, [r7, #22]
 801108e:	8afa      	ldrh	r2, [r7, #22]
 8011090:	8abb      	ldrh	r3, [r7, #20]
 8011092:	429a      	cmp	r2, r3
 8011094:	d3ef      	bcc.n	8011076 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8011096:	68bb      	ldr	r3, [r7, #8]
 8011098:	2200      	movs	r2, #0
 801109a:	701a      	strb	r2, [r3, #0]
  }
}
 801109c:	bf00      	nop
 801109e:	371c      	adds	r7, #28
 80110a0:	46bd      	mov	sp, r7
 80110a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a6:	4770      	bx	lr

080110a8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80110a8:	b480      	push	{r7}
 80110aa:	b085      	sub	sp, #20
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
 80110b0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80110b2:	683b      	ldr	r3, [r7, #0]
 80110b4:	881b      	ldrh	r3, [r3, #0]
 80110b6:	687a      	ldr	r2, [r7, #4]
 80110b8:	7812      	ldrb	r2, [r2, #0]
 80110ba:	4413      	add	r3, r2
 80110bc:	b29a      	uxth	r2, r3
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	781b      	ldrb	r3, [r3, #0]
 80110c6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	4413      	add	r3, r2
 80110cc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80110ce:	68fb      	ldr	r3, [r7, #12]
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	3714      	adds	r7, #20
 80110d4:	46bd      	mov	sp, r7
 80110d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110da:	4770      	bx	lr

080110dc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b086      	sub	sp, #24
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	60f8      	str	r0, [r7, #12]
 80110e4:	60b9      	str	r1, [r7, #8]
 80110e6:	4613      	mov	r3, r2
 80110e8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80110ea:	2301      	movs	r3, #1
 80110ec:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	789b      	ldrb	r3, [r3, #2]
 80110f2:	2b01      	cmp	r3, #1
 80110f4:	d002      	beq.n	80110fc <USBH_CtlReq+0x20>
 80110f6:	2b02      	cmp	r3, #2
 80110f8:	d015      	beq.n	8011126 <USBH_CtlReq+0x4a>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 80110fa:	e033      	b.n	8011164 <USBH_CtlReq+0x88>
      phost->Control.buff = buff;
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	68ba      	ldr	r2, [r7, #8]
 8011100:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	88fa      	ldrh	r2, [r7, #6]
 8011106:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	2201      	movs	r2, #1
 801110c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	2202      	movs	r2, #2
 8011112:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8011114:	2301      	movs	r3, #1
 8011116:	75fb      	strb	r3, [r7, #23]
      USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8011118:	2300      	movs	r3, #0
 801111a:	2200      	movs	r2, #0
 801111c:	2103      	movs	r1, #3
 801111e:	68f8      	ldr	r0, [r7, #12]
 8011120:	f7ff fb32 	bl	8010788 <USBH_OS_PutMessage>
      break;
 8011124:	e01e      	b.n	8011164 <USBH_CtlReq+0x88>
      status = USBH_HandleControl(phost);
 8011126:	68f8      	ldr	r0, [r7, #12]
 8011128:	f000 f822 	bl	8011170 <USBH_HandleControl>
 801112c:	4603      	mov	r3, r0
 801112e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8011130:	7dfb      	ldrb	r3, [r7, #23]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d002      	beq.n	801113c <USBH_CtlReq+0x60>
 8011136:	7dfb      	ldrb	r3, [r7, #23]
 8011138:	2b03      	cmp	r3, #3
 801113a:	d106      	bne.n	801114a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	2201      	movs	r2, #1
 8011140:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	2200      	movs	r2, #0
 8011146:	761a      	strb	r2, [r3, #24]
 8011148:	e005      	b.n	8011156 <USBH_CtlReq+0x7a>
      else if (status == USBH_FAIL)
 801114a:	7dfb      	ldrb	r3, [r7, #23]
 801114c:	2b02      	cmp	r3, #2
 801114e:	d102      	bne.n	8011156 <USBH_CtlReq+0x7a>
        phost->RequestState = CMD_SEND;
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	2201      	movs	r2, #1
 8011154:	709a      	strb	r2, [r3, #2]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8011156:	2300      	movs	r3, #0
 8011158:	2200      	movs	r2, #0
 801115a:	2103      	movs	r1, #3
 801115c:	68f8      	ldr	r0, [r7, #12]
 801115e:	f7ff fb13 	bl	8010788 <USBH_OS_PutMessage>
      break;
 8011162:	bf00      	nop
  }
  return status;
 8011164:	7dfb      	ldrb	r3, [r7, #23]
}
 8011166:	4618      	mov	r0, r3
 8011168:	3718      	adds	r7, #24
 801116a:	46bd      	mov	sp, r7
 801116c:	bd80      	pop	{r7, pc}
	...

08011170 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8011170:	b580      	push	{r7, lr}
 8011172:	b086      	sub	sp, #24
 8011174:	af02      	add	r7, sp, #8
 8011176:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8011178:	2301      	movs	r3, #1
 801117a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 801117c:	2300      	movs	r3, #0
 801117e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	7e1b      	ldrb	r3, [r3, #24]
 8011184:	3b01      	subs	r3, #1
 8011186:	2b0a      	cmp	r3, #10
 8011188:	f200 81b2 	bhi.w	80114f0 <USBH_HandleControl+0x380>
 801118c:	a201      	add	r2, pc, #4	@ (adr r2, 8011194 <USBH_HandleControl+0x24>)
 801118e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011192:	bf00      	nop
 8011194:	080111c1 	.word	0x080111c1
 8011198:	080111db 	.word	0x080111db
 801119c:	0801125d 	.word	0x0801125d
 80111a0:	08011283 	.word	0x08011283
 80111a4:	080112e1 	.word	0x080112e1
 80111a8:	0801130b 	.word	0x0801130b
 80111ac:	0801138d 	.word	0x0801138d
 80111b0:	080113af 	.word	0x080113af
 80111b4:	08011411 	.word	0x08011411
 80111b8:	08011437 	.word	0x08011437
 80111bc:	08011499 	.word	0x08011499
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	f103 0110 	add.w	r1, r3, #16
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	795b      	ldrb	r3, [r3, #5]
 80111ca:	461a      	mov	r2, r3
 80111cc:	6878      	ldr	r0, [r7, #4]
 80111ce:	f000 f99f 	bl	8011510 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	2202      	movs	r2, #2
 80111d6:	761a      	strb	r2, [r3, #24]
      break;
 80111d8:	e195      	b.n	8011506 <USBH_HandleControl+0x396>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	795b      	ldrb	r3, [r3, #5]
 80111de:	4619      	mov	r1, r3
 80111e0:	6878      	ldr	r0, [r7, #4]
 80111e2:	f003 f907 	bl	80143f4 <USBH_LL_GetURBState>
 80111e6:	4603      	mov	r3, r0
 80111e8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80111ea:	7bbb      	ldrb	r3, [r7, #14]
 80111ec:	2b01      	cmp	r3, #1
 80111ee:	d124      	bne.n	801123a <USBH_HandleControl+0xca>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	7c1b      	ldrb	r3, [r3, #16]
 80111f4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80111f8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	8adb      	ldrh	r3, [r3, #22]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d00a      	beq.n	8011218 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8011202:	7b7b      	ldrb	r3, [r7, #13]
 8011204:	2b80      	cmp	r3, #128	@ 0x80
 8011206:	d103      	bne.n	8011210 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	2203      	movs	r2, #3
 801120c:	761a      	strb	r2, [r3, #24]
 801120e:	e00d      	b.n	801122c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	2205      	movs	r2, #5
 8011214:	761a      	strb	r2, [r3, #24]
 8011216:	e009      	b.n	801122c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8011218:	7b7b      	ldrb	r3, [r7, #13]
 801121a:	2b80      	cmp	r3, #128	@ 0x80
 801121c:	d103      	bne.n	8011226 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	2209      	movs	r2, #9
 8011222:	761a      	strb	r2, [r3, #24]
 8011224:	e002      	b.n	801122c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	2207      	movs	r2, #7
 801122a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801122c:	2300      	movs	r3, #0
 801122e:	2200      	movs	r2, #0
 8011230:	2103      	movs	r1, #3
 8011232:	6878      	ldr	r0, [r7, #4]
 8011234:	f7ff faa8 	bl	8010788 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8011238:	e15c      	b.n	80114f4 <USBH_HandleControl+0x384>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 801123a:	7bbb      	ldrb	r3, [r7, #14]
 801123c:	2b04      	cmp	r3, #4
 801123e:	d003      	beq.n	8011248 <USBH_HandleControl+0xd8>
 8011240:	7bbb      	ldrb	r3, [r7, #14]
 8011242:	2b02      	cmp	r3, #2
 8011244:	f040 8156 	bne.w	80114f4 <USBH_HandleControl+0x384>
          phost->Control.state = CTRL_ERROR;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	220b      	movs	r2, #11
 801124c:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801124e:	2300      	movs	r3, #0
 8011250:	2200      	movs	r2, #0
 8011252:	2103      	movs	r1, #3
 8011254:	6878      	ldr	r0, [r7, #4]
 8011256:	f7ff fa97 	bl	8010788 <USBH_OS_PutMessage>
      break;
 801125a:	e14b      	b.n	80114f4 <USBH_HandleControl+0x384>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8011262:	b29a      	uxth	r2, r3
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	6899      	ldr	r1, [r3, #8]
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	899a      	ldrh	r2, [r3, #12]
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	791b      	ldrb	r3, [r3, #4]
 8011274:	6878      	ldr	r0, [r7, #4]
 8011276:	f000 f98a 	bl	801158e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	2204      	movs	r2, #4
 801127e:	761a      	strb	r2, [r3, #24]
      break;
 8011280:	e141      	b.n	8011506 <USBH_HandleControl+0x396>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	791b      	ldrb	r3, [r3, #4]
 8011286:	4619      	mov	r1, r3
 8011288:	6878      	ldr	r0, [r7, #4]
 801128a:	f003 f8b3 	bl	80143f4 <USBH_LL_GetURBState>
 801128e:	4603      	mov	r3, r0
 8011290:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8011292:	7bbb      	ldrb	r3, [r7, #14]
 8011294:	2b01      	cmp	r3, #1
 8011296:	d109      	bne.n	80112ac <USBH_HandleControl+0x13c>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	2209      	movs	r2, #9
 801129c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801129e:	2300      	movs	r3, #0
 80112a0:	2200      	movs	r2, #0
 80112a2:	2103      	movs	r1, #3
 80112a4:	6878      	ldr	r0, [r7, #4]
 80112a6:	f7ff fa6f 	bl	8010788 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80112aa:	e125      	b.n	80114f8 <USBH_HandleControl+0x388>
      else if (URB_Status == USBH_URB_STALL)
 80112ac:	7bbb      	ldrb	r3, [r7, #14]
 80112ae:	2b05      	cmp	r3, #5
 80112b0:	d108      	bne.n	80112c4 <USBH_HandleControl+0x154>
        status = USBH_NOT_SUPPORTED;
 80112b2:	2303      	movs	r3, #3
 80112b4:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80112b6:	2300      	movs	r3, #0
 80112b8:	2200      	movs	r2, #0
 80112ba:	2103      	movs	r1, #3
 80112bc:	6878      	ldr	r0, [r7, #4]
 80112be:	f7ff fa63 	bl	8010788 <USBH_OS_PutMessage>
      break;
 80112c2:	e119      	b.n	80114f8 <USBH_HandleControl+0x388>
        if (URB_Status == USBH_URB_ERROR)
 80112c4:	7bbb      	ldrb	r3, [r7, #14]
 80112c6:	2b04      	cmp	r3, #4
 80112c8:	f040 8116 	bne.w	80114f8 <USBH_HandleControl+0x388>
          phost->Control.state = CTRL_ERROR;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	220b      	movs	r2, #11
 80112d0:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80112d2:	2300      	movs	r3, #0
 80112d4:	2200      	movs	r2, #0
 80112d6:	2103      	movs	r1, #3
 80112d8:	6878      	ldr	r0, [r7, #4]
 80112da:	f7ff fa55 	bl	8010788 <USBH_OS_PutMessage>
      break;
 80112de:	e10b      	b.n	80114f8 <USBH_HandleControl+0x388>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	6899      	ldr	r1, [r3, #8]
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	899a      	ldrh	r2, [r3, #12]
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	795b      	ldrb	r3, [r3, #5]
 80112ec:	2001      	movs	r0, #1
 80112ee:	9000      	str	r0, [sp, #0]
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	f000 f927 	bl	8011544 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80112fc:	b29a      	uxth	r2, r3
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	2206      	movs	r2, #6
 8011306:	761a      	strb	r2, [r3, #24]
      break;
 8011308:	e0fd      	b.n	8011506 <USBH_HandleControl+0x396>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	795b      	ldrb	r3, [r3, #5]
 801130e:	4619      	mov	r1, r3
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	f003 f86f 	bl	80143f4 <USBH_LL_GetURBState>
 8011316:	4603      	mov	r3, r0
 8011318:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801131a:	7bbb      	ldrb	r3, [r7, #14]
 801131c:	2b01      	cmp	r3, #1
 801131e:	d109      	bne.n	8011334 <USBH_HandleControl+0x1c4>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2207      	movs	r2, #7
 8011324:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8011326:	2300      	movs	r3, #0
 8011328:	2200      	movs	r2, #0
 801132a:	2103      	movs	r1, #3
 801132c:	6878      	ldr	r0, [r7, #4]
 801132e:	f7ff fa2b 	bl	8010788 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8011332:	e0e3      	b.n	80114fc <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_STALL)
 8011334:	7bbb      	ldrb	r3, [r7, #14]
 8011336:	2b05      	cmp	r3, #5
 8011338:	d10b      	bne.n	8011352 <USBH_HandleControl+0x1e2>
        phost->Control.state = CTRL_STALLED;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	220c      	movs	r2, #12
 801133e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8011340:	2303      	movs	r3, #3
 8011342:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8011344:	2300      	movs	r3, #0
 8011346:	2200      	movs	r2, #0
 8011348:	2103      	movs	r1, #3
 801134a:	6878      	ldr	r0, [r7, #4]
 801134c:	f7ff fa1c 	bl	8010788 <USBH_OS_PutMessage>
      break;
 8011350:	e0d4      	b.n	80114fc <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_NOTREADY)
 8011352:	7bbb      	ldrb	r3, [r7, #14]
 8011354:	2b02      	cmp	r3, #2
 8011356:	d109      	bne.n	801136c <USBH_HandleControl+0x1fc>
        phost->Control.state = CTRL_DATA_OUT;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	2205      	movs	r2, #5
 801135c:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801135e:	2300      	movs	r3, #0
 8011360:	2200      	movs	r2, #0
 8011362:	2103      	movs	r1, #3
 8011364:	6878      	ldr	r0, [r7, #4]
 8011366:	f7ff fa0f 	bl	8010788 <USBH_OS_PutMessage>
      break;
 801136a:	e0c7      	b.n	80114fc <USBH_HandleControl+0x38c>
        if (URB_Status == USBH_URB_ERROR)
 801136c:	7bbb      	ldrb	r3, [r7, #14]
 801136e:	2b04      	cmp	r3, #4
 8011370:	f040 80c4 	bne.w	80114fc <USBH_HandleControl+0x38c>
          phost->Control.state = CTRL_ERROR;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	220b      	movs	r2, #11
 8011378:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 801137a:	2302      	movs	r3, #2
 801137c:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801137e:	2300      	movs	r3, #0
 8011380:	2200      	movs	r2, #0
 8011382:	2103      	movs	r1, #3
 8011384:	6878      	ldr	r0, [r7, #4]
 8011386:	f7ff f9ff 	bl	8010788 <USBH_OS_PutMessage>
      break;
 801138a:	e0b7      	b.n	80114fc <USBH_HandleControl+0x38c>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	791b      	ldrb	r3, [r3, #4]
 8011390:	2200      	movs	r2, #0
 8011392:	2100      	movs	r1, #0
 8011394:	6878      	ldr	r0, [r7, #4]
 8011396:	f000 f8fa 	bl	801158e <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80113a0:	b29a      	uxth	r2, r3
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	2208      	movs	r2, #8
 80113aa:	761a      	strb	r2, [r3, #24]

      break;
 80113ac:	e0ab      	b.n	8011506 <USBH_HandleControl+0x396>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	791b      	ldrb	r3, [r3, #4]
 80113b2:	4619      	mov	r1, r3
 80113b4:	6878      	ldr	r0, [r7, #4]
 80113b6:	f003 f81d 	bl	80143f4 <USBH_LL_GetURBState>
 80113ba:	4603      	mov	r3, r0
 80113bc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80113be:	7bbb      	ldrb	r3, [r7, #14]
 80113c0:	2b01      	cmp	r3, #1
 80113c2:	d10b      	bne.n	80113dc <USBH_HandleControl+0x26c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	220d      	movs	r2, #13
 80113c8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80113ca:	2300      	movs	r3, #0
 80113cc:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80113ce:	2300      	movs	r3, #0
 80113d0:	2200      	movs	r2, #0
 80113d2:	2103      	movs	r1, #3
 80113d4:	6878      	ldr	r0, [r7, #4]
 80113d6:	f7ff f9d7 	bl	8010788 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80113da:	e091      	b.n	8011500 <USBH_HandleControl+0x390>
      else if (URB_Status == USBH_URB_ERROR)
 80113dc:	7bbb      	ldrb	r3, [r7, #14]
 80113de:	2b04      	cmp	r3, #4
 80113e0:	d109      	bne.n	80113f6 <USBH_HandleControl+0x286>
        phost->Control.state = CTRL_ERROR;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	220b      	movs	r2, #11
 80113e6:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80113e8:	2300      	movs	r3, #0
 80113ea:	2200      	movs	r2, #0
 80113ec:	2103      	movs	r1, #3
 80113ee:	6878      	ldr	r0, [r7, #4]
 80113f0:	f7ff f9ca 	bl	8010788 <USBH_OS_PutMessage>
      break;
 80113f4:	e084      	b.n	8011500 <USBH_HandleControl+0x390>
        if (URB_Status == USBH_URB_STALL)
 80113f6:	7bbb      	ldrb	r3, [r7, #14]
 80113f8:	2b05      	cmp	r3, #5
 80113fa:	f040 8081 	bne.w	8011500 <USBH_HandleControl+0x390>
          status = USBH_NOT_SUPPORTED;
 80113fe:	2303      	movs	r3, #3
 8011400:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8011402:	2300      	movs	r3, #0
 8011404:	2200      	movs	r2, #0
 8011406:	2103      	movs	r1, #3
 8011408:	6878      	ldr	r0, [r7, #4]
 801140a:	f7ff f9bd 	bl	8010788 <USBH_OS_PutMessage>
      break;
 801140e:	e077      	b.n	8011500 <USBH_HandleControl+0x390>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	795b      	ldrb	r3, [r3, #5]
 8011414:	2201      	movs	r2, #1
 8011416:	9200      	str	r2, [sp, #0]
 8011418:	2200      	movs	r2, #0
 801141a:	2100      	movs	r1, #0
 801141c:	6878      	ldr	r0, [r7, #4]
 801141e:	f000 f891 	bl	8011544 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8011428:	b29a      	uxth	r2, r3
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	220a      	movs	r2, #10
 8011432:	761a      	strb	r2, [r3, #24]
      break;
 8011434:	e067      	b.n	8011506 <USBH_HandleControl+0x396>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	795b      	ldrb	r3, [r3, #5]
 801143a:	4619      	mov	r1, r3
 801143c:	6878      	ldr	r0, [r7, #4]
 801143e:	f002 ffd9 	bl	80143f4 <USBH_LL_GetURBState>
 8011442:	4603      	mov	r3, r0
 8011444:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8011446:	7bbb      	ldrb	r3, [r7, #14]
 8011448:	2b01      	cmp	r3, #1
 801144a:	d10b      	bne.n	8011464 <USBH_HandleControl+0x2f4>
      {
        status = USBH_OK;
 801144c:	2300      	movs	r3, #0
 801144e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	220d      	movs	r2, #13
 8011454:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8011456:	2300      	movs	r3, #0
 8011458:	2200      	movs	r2, #0
 801145a:	2103      	movs	r1, #3
 801145c:	6878      	ldr	r0, [r7, #4]
 801145e:	f7ff f993 	bl	8010788 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8011462:	e04f      	b.n	8011504 <USBH_HandleControl+0x394>
      else if (URB_Status == USBH_URB_NOTREADY)
 8011464:	7bbb      	ldrb	r3, [r7, #14]
 8011466:	2b02      	cmp	r3, #2
 8011468:	d109      	bne.n	801147e <USBH_HandleControl+0x30e>
        phost->Control.state = CTRL_STATUS_OUT;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	2209      	movs	r2, #9
 801146e:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8011470:	2300      	movs	r3, #0
 8011472:	2200      	movs	r2, #0
 8011474:	2103      	movs	r1, #3
 8011476:	6878      	ldr	r0, [r7, #4]
 8011478:	f7ff f986 	bl	8010788 <USBH_OS_PutMessage>
      break;
 801147c:	e042      	b.n	8011504 <USBH_HandleControl+0x394>
        if (URB_Status == USBH_URB_ERROR)
 801147e:	7bbb      	ldrb	r3, [r7, #14]
 8011480:	2b04      	cmp	r3, #4
 8011482:	d13f      	bne.n	8011504 <USBH_HandleControl+0x394>
          phost->Control.state = CTRL_ERROR;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	220b      	movs	r2, #11
 8011488:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801148a:	2300      	movs	r3, #0
 801148c:	2200      	movs	r2, #0
 801148e:	2103      	movs	r1, #3
 8011490:	6878      	ldr	r0, [r7, #4]
 8011492:	f7ff f979 	bl	8010788 <USBH_OS_PutMessage>
      break;
 8011496:	e035      	b.n	8011504 <USBH_HandleControl+0x394>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	7e5b      	ldrb	r3, [r3, #25]
 801149c:	3301      	adds	r3, #1
 801149e:	b2da      	uxtb	r2, r3
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	765a      	strb	r2, [r3, #25]
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	7e5b      	ldrb	r3, [r3, #25]
 80114a8:	2b02      	cmp	r3, #2
 80114aa:	d806      	bhi.n	80114ba <USBH_HandleControl+0x34a>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	2201      	movs	r2, #1
 80114b0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	2201      	movs	r2, #1
 80114b6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80114b8:	e025      	b.n	8011506 <USBH_HandleControl+0x396>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80114c0:	2106      	movs	r1, #6
 80114c2:	6878      	ldr	r0, [r7, #4]
 80114c4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	2200      	movs	r2, #0
 80114ca:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	795b      	ldrb	r3, [r3, #5]
 80114d0:	4619      	mov	r1, r3
 80114d2:	6878      	ldr	r0, [r7, #4]
 80114d4:	f000 f90c 	bl	80116f0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	791b      	ldrb	r3, [r3, #4]
 80114dc:	4619      	mov	r1, r3
 80114de:	6878      	ldr	r0, [r7, #4]
 80114e0:	f000 f906 	bl	80116f0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	2200      	movs	r2, #0
 80114e8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80114ea:	2302      	movs	r3, #2
 80114ec:	73fb      	strb	r3, [r7, #15]
      break;
 80114ee:	e00a      	b.n	8011506 <USBH_HandleControl+0x396>

    default:
      break;
 80114f0:	bf00      	nop
 80114f2:	e008      	b.n	8011506 <USBH_HandleControl+0x396>
      break;
 80114f4:	bf00      	nop
 80114f6:	e006      	b.n	8011506 <USBH_HandleControl+0x396>
      break;
 80114f8:	bf00      	nop
 80114fa:	e004      	b.n	8011506 <USBH_HandleControl+0x396>
      break;
 80114fc:	bf00      	nop
 80114fe:	e002      	b.n	8011506 <USBH_HandleControl+0x396>
      break;
 8011500:	bf00      	nop
 8011502:	e000      	b.n	8011506 <USBH_HandleControl+0x396>
      break;
 8011504:	bf00      	nop
  }

  return status;
 8011506:	7bfb      	ldrb	r3, [r7, #15]
}
 8011508:	4618      	mov	r0, r3
 801150a:	3710      	adds	r7, #16
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}

08011510 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b088      	sub	sp, #32
 8011514:	af04      	add	r7, sp, #16
 8011516:	60f8      	str	r0, [r7, #12]
 8011518:	60b9      	str	r1, [r7, #8]
 801151a:	4613      	mov	r3, r2
 801151c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801151e:	79f9      	ldrb	r1, [r7, #7]
 8011520:	2300      	movs	r3, #0
 8011522:	9303      	str	r3, [sp, #12]
 8011524:	2308      	movs	r3, #8
 8011526:	9302      	str	r3, [sp, #8]
 8011528:	68bb      	ldr	r3, [r7, #8]
 801152a:	9301      	str	r3, [sp, #4]
 801152c:	2300      	movs	r3, #0
 801152e:	9300      	str	r3, [sp, #0]
 8011530:	2300      	movs	r3, #0
 8011532:	2200      	movs	r2, #0
 8011534:	68f8      	ldr	r0, [r7, #12]
 8011536:	f002 ff2c 	bl	8014392 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 801153a:	2300      	movs	r3, #0
}
 801153c:	4618      	mov	r0, r3
 801153e:	3710      	adds	r7, #16
 8011540:	46bd      	mov	sp, r7
 8011542:	bd80      	pop	{r7, pc}

08011544 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b088      	sub	sp, #32
 8011548:	af04      	add	r7, sp, #16
 801154a:	60f8      	str	r0, [r7, #12]
 801154c:	60b9      	str	r1, [r7, #8]
 801154e:	4611      	mov	r1, r2
 8011550:	461a      	mov	r2, r3
 8011552:	460b      	mov	r3, r1
 8011554:	80fb      	strh	r3, [r7, #6]
 8011556:	4613      	mov	r3, r2
 8011558:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011560:	2b00      	cmp	r3, #0
 8011562:	d001      	beq.n	8011568 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8011564:	2300      	movs	r3, #0
 8011566:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011568:	7979      	ldrb	r1, [r7, #5]
 801156a:	7e3b      	ldrb	r3, [r7, #24]
 801156c:	9303      	str	r3, [sp, #12]
 801156e:	88fb      	ldrh	r3, [r7, #6]
 8011570:	9302      	str	r3, [sp, #8]
 8011572:	68bb      	ldr	r3, [r7, #8]
 8011574:	9301      	str	r3, [sp, #4]
 8011576:	2301      	movs	r3, #1
 8011578:	9300      	str	r3, [sp, #0]
 801157a:	2300      	movs	r3, #0
 801157c:	2200      	movs	r2, #0
 801157e:	68f8      	ldr	r0, [r7, #12]
 8011580:	f002 ff07 	bl	8014392 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8011584:	2300      	movs	r3, #0
}
 8011586:	4618      	mov	r0, r3
 8011588:	3710      	adds	r7, #16
 801158a:	46bd      	mov	sp, r7
 801158c:	bd80      	pop	{r7, pc}

0801158e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801158e:	b580      	push	{r7, lr}
 8011590:	b088      	sub	sp, #32
 8011592:	af04      	add	r7, sp, #16
 8011594:	60f8      	str	r0, [r7, #12]
 8011596:	60b9      	str	r1, [r7, #8]
 8011598:	4611      	mov	r1, r2
 801159a:	461a      	mov	r2, r3
 801159c:	460b      	mov	r3, r1
 801159e:	80fb      	strh	r3, [r7, #6]
 80115a0:	4613      	mov	r3, r2
 80115a2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80115a4:	7979      	ldrb	r1, [r7, #5]
 80115a6:	2300      	movs	r3, #0
 80115a8:	9303      	str	r3, [sp, #12]
 80115aa:	88fb      	ldrh	r3, [r7, #6]
 80115ac:	9302      	str	r3, [sp, #8]
 80115ae:	68bb      	ldr	r3, [r7, #8]
 80115b0:	9301      	str	r3, [sp, #4]
 80115b2:	2301      	movs	r3, #1
 80115b4:	9300      	str	r3, [sp, #0]
 80115b6:	2300      	movs	r3, #0
 80115b8:	2201      	movs	r2, #1
 80115ba:	68f8      	ldr	r0, [r7, #12]
 80115bc:	f002 fee9 	bl	8014392 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80115c0:	2300      	movs	r3, #0

}
 80115c2:	4618      	mov	r0, r3
 80115c4:	3710      	adds	r7, #16
 80115c6:	46bd      	mov	sp, r7
 80115c8:	bd80      	pop	{r7, pc}

080115ca <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80115ca:	b580      	push	{r7, lr}
 80115cc:	b088      	sub	sp, #32
 80115ce:	af04      	add	r7, sp, #16
 80115d0:	60f8      	str	r0, [r7, #12]
 80115d2:	60b9      	str	r1, [r7, #8]
 80115d4:	4611      	mov	r1, r2
 80115d6:	461a      	mov	r2, r3
 80115d8:	460b      	mov	r3, r1
 80115da:	80fb      	strh	r3, [r7, #6]
 80115dc:	4613      	mov	r3, r2
 80115de:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d001      	beq.n	80115ee <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80115ea:	2300      	movs	r3, #0
 80115ec:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80115ee:	7979      	ldrb	r1, [r7, #5]
 80115f0:	7e3b      	ldrb	r3, [r7, #24]
 80115f2:	9303      	str	r3, [sp, #12]
 80115f4:	88fb      	ldrh	r3, [r7, #6]
 80115f6:	9302      	str	r3, [sp, #8]
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	9301      	str	r3, [sp, #4]
 80115fc:	2301      	movs	r3, #1
 80115fe:	9300      	str	r3, [sp, #0]
 8011600:	2302      	movs	r3, #2
 8011602:	2200      	movs	r2, #0
 8011604:	68f8      	ldr	r0, [r7, #12]
 8011606:	f002 fec4 	bl	8014392 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 801160a:	2300      	movs	r3, #0
}
 801160c:	4618      	mov	r0, r3
 801160e:	3710      	adds	r7, #16
 8011610:	46bd      	mov	sp, r7
 8011612:	bd80      	pop	{r7, pc}

08011614 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b088      	sub	sp, #32
 8011618:	af04      	add	r7, sp, #16
 801161a:	60f8      	str	r0, [r7, #12]
 801161c:	60b9      	str	r1, [r7, #8]
 801161e:	4611      	mov	r1, r2
 8011620:	461a      	mov	r2, r3
 8011622:	460b      	mov	r3, r1
 8011624:	80fb      	strh	r3, [r7, #6]
 8011626:	4613      	mov	r3, r2
 8011628:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801162a:	7979      	ldrb	r1, [r7, #5]
 801162c:	2300      	movs	r3, #0
 801162e:	9303      	str	r3, [sp, #12]
 8011630:	88fb      	ldrh	r3, [r7, #6]
 8011632:	9302      	str	r3, [sp, #8]
 8011634:	68bb      	ldr	r3, [r7, #8]
 8011636:	9301      	str	r3, [sp, #4]
 8011638:	2301      	movs	r3, #1
 801163a:	9300      	str	r3, [sp, #0]
 801163c:	2302      	movs	r3, #2
 801163e:	2201      	movs	r2, #1
 8011640:	68f8      	ldr	r0, [r7, #12]
 8011642:	f002 fea6 	bl	8014392 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8011646:	2300      	movs	r3, #0
}
 8011648:	4618      	mov	r0, r3
 801164a:	3710      	adds	r7, #16
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}

08011650 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b086      	sub	sp, #24
 8011654:	af04      	add	r7, sp, #16
 8011656:	6078      	str	r0, [r7, #4]
 8011658:	4608      	mov	r0, r1
 801165a:	4611      	mov	r1, r2
 801165c:	461a      	mov	r2, r3
 801165e:	4603      	mov	r3, r0
 8011660:	70fb      	strb	r3, [r7, #3]
 8011662:	460b      	mov	r3, r1
 8011664:	70bb      	strb	r3, [r7, #2]
 8011666:	4613      	mov	r3, r2
 8011668:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 801166a:	7878      	ldrb	r0, [r7, #1]
 801166c:	78ba      	ldrb	r2, [r7, #2]
 801166e:	78f9      	ldrb	r1, [r7, #3]
 8011670:	8b3b      	ldrh	r3, [r7, #24]
 8011672:	9302      	str	r3, [sp, #8]
 8011674:	7d3b      	ldrb	r3, [r7, #20]
 8011676:	9301      	str	r3, [sp, #4]
 8011678:	7c3b      	ldrb	r3, [r7, #16]
 801167a:	9300      	str	r3, [sp, #0]
 801167c:	4603      	mov	r3, r0
 801167e:	6878      	ldr	r0, [r7, #4]
 8011680:	f002 fe39 	bl	80142f6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8011684:	2300      	movs	r3, #0
}
 8011686:	4618      	mov	r0, r3
 8011688:	3708      	adds	r7, #8
 801168a:	46bd      	mov	sp, r7
 801168c:	bd80      	pop	{r7, pc}

0801168e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801168e:	b580      	push	{r7, lr}
 8011690:	b082      	sub	sp, #8
 8011692:	af00      	add	r7, sp, #0
 8011694:	6078      	str	r0, [r7, #4]
 8011696:	460b      	mov	r3, r1
 8011698:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 801169a:	78fb      	ldrb	r3, [r7, #3]
 801169c:	4619      	mov	r1, r3
 801169e:	6878      	ldr	r0, [r7, #4]
 80116a0:	f002 fe58 	bl	8014354 <USBH_LL_ClosePipe>

  return USBH_OK;
 80116a4:	2300      	movs	r3, #0
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	3708      	adds	r7, #8
 80116aa:	46bd      	mov	sp, r7
 80116ac:	bd80      	pop	{r7, pc}

080116ae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80116ae:	b580      	push	{r7, lr}
 80116b0:	b084      	sub	sp, #16
 80116b2:	af00      	add	r7, sp, #0
 80116b4:	6078      	str	r0, [r7, #4]
 80116b6:	460b      	mov	r3, r1
 80116b8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80116ba:	6878      	ldr	r0, [r7, #4]
 80116bc:	f000 f836 	bl	801172c <USBH_GetFreePipe>
 80116c0:	4603      	mov	r3, r0
 80116c2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80116c4:	89fb      	ldrh	r3, [r7, #14]
 80116c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80116ca:	4293      	cmp	r3, r2
 80116cc:	d00a      	beq.n	80116e4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80116ce:	78fa      	ldrb	r2, [r7, #3]
 80116d0:	89fb      	ldrh	r3, [r7, #14]
 80116d2:	f003 030f 	and.w	r3, r3, #15
 80116d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80116da:	6879      	ldr	r1, [r7, #4]
 80116dc:	33e0      	adds	r3, #224	@ 0xe0
 80116de:	009b      	lsls	r3, r3, #2
 80116e0:	440b      	add	r3, r1
 80116e2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80116e4:	89fb      	ldrh	r3, [r7, #14]
 80116e6:	b2db      	uxtb	r3, r3
}
 80116e8:	4618      	mov	r0, r3
 80116ea:	3710      	adds	r7, #16
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}

080116f0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80116f0:	b480      	push	{r7}
 80116f2:	b083      	sub	sp, #12
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
 80116f8:	460b      	mov	r3, r1
 80116fa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80116fc:	78fb      	ldrb	r3, [r7, #3]
 80116fe:	2b0f      	cmp	r3, #15
 8011700:	d80d      	bhi.n	801171e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8011702:	78fb      	ldrb	r3, [r7, #3]
 8011704:	687a      	ldr	r2, [r7, #4]
 8011706:	33e0      	adds	r3, #224	@ 0xe0
 8011708:	009b      	lsls	r3, r3, #2
 801170a:	4413      	add	r3, r2
 801170c:	685a      	ldr	r2, [r3, #4]
 801170e:	78fb      	ldrb	r3, [r7, #3]
 8011710:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8011714:	6879      	ldr	r1, [r7, #4]
 8011716:	33e0      	adds	r3, #224	@ 0xe0
 8011718:	009b      	lsls	r3, r3, #2
 801171a:	440b      	add	r3, r1
 801171c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 801171e:	2300      	movs	r3, #0
}
 8011720:	4618      	mov	r0, r3
 8011722:	370c      	adds	r7, #12
 8011724:	46bd      	mov	sp, r7
 8011726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172a:	4770      	bx	lr

0801172c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 801172c:	b480      	push	{r7}
 801172e:	b085      	sub	sp, #20
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8011734:	2300      	movs	r3, #0
 8011736:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8011738:	2300      	movs	r3, #0
 801173a:	73fb      	strb	r3, [r7, #15]
 801173c:	e00f      	b.n	801175e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 801173e:	7bfb      	ldrb	r3, [r7, #15]
 8011740:	687a      	ldr	r2, [r7, #4]
 8011742:	33e0      	adds	r3, #224	@ 0xe0
 8011744:	009b      	lsls	r3, r3, #2
 8011746:	4413      	add	r3, r2
 8011748:	685b      	ldr	r3, [r3, #4]
 801174a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801174e:	2b00      	cmp	r3, #0
 8011750:	d102      	bne.n	8011758 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8011752:	7bfb      	ldrb	r3, [r7, #15]
 8011754:	b29b      	uxth	r3, r3
 8011756:	e007      	b.n	8011768 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8011758:	7bfb      	ldrb	r3, [r7, #15]
 801175a:	3301      	adds	r3, #1
 801175c:	73fb      	strb	r3, [r7, #15]
 801175e:	7bfb      	ldrb	r3, [r7, #15]
 8011760:	2b0f      	cmp	r3, #15
 8011762:	d9ec      	bls.n	801173e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8011764:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8011768:	4618      	mov	r0, r3
 801176a:	3714      	adds	r7, #20
 801176c:	46bd      	mov	sp, r7
 801176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011772:	4770      	bx	lr

08011774 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011774:	b480      	push	{r7}
 8011776:	b087      	sub	sp, #28
 8011778:	af00      	add	r7, sp, #0
 801177a:	60f8      	str	r0, [r7, #12]
 801177c:	60b9      	str	r1, [r7, #8]
 801177e:	4613      	mov	r3, r2
 8011780:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011782:	2301      	movs	r3, #1
 8011784:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011786:	2300      	movs	r3, #0
 8011788:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801178a:	4b1f      	ldr	r3, [pc, #124]	@ (8011808 <FATFS_LinkDriverEx+0x94>)
 801178c:	7a5b      	ldrb	r3, [r3, #9]
 801178e:	b2db      	uxtb	r3, r3
 8011790:	2b00      	cmp	r3, #0
 8011792:	d131      	bne.n	80117f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011794:	4b1c      	ldr	r3, [pc, #112]	@ (8011808 <FATFS_LinkDriverEx+0x94>)
 8011796:	7a5b      	ldrb	r3, [r3, #9]
 8011798:	b2db      	uxtb	r3, r3
 801179a:	461a      	mov	r2, r3
 801179c:	4b1a      	ldr	r3, [pc, #104]	@ (8011808 <FATFS_LinkDriverEx+0x94>)
 801179e:	2100      	movs	r1, #0
 80117a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80117a2:	4b19      	ldr	r3, [pc, #100]	@ (8011808 <FATFS_LinkDriverEx+0x94>)
 80117a4:	7a5b      	ldrb	r3, [r3, #9]
 80117a6:	b2db      	uxtb	r3, r3
 80117a8:	4a17      	ldr	r2, [pc, #92]	@ (8011808 <FATFS_LinkDriverEx+0x94>)
 80117aa:	009b      	lsls	r3, r3, #2
 80117ac:	4413      	add	r3, r2
 80117ae:	68fa      	ldr	r2, [r7, #12]
 80117b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80117b2:	4b15      	ldr	r3, [pc, #84]	@ (8011808 <FATFS_LinkDriverEx+0x94>)
 80117b4:	7a5b      	ldrb	r3, [r3, #9]
 80117b6:	b2db      	uxtb	r3, r3
 80117b8:	461a      	mov	r2, r3
 80117ba:	4b13      	ldr	r3, [pc, #76]	@ (8011808 <FATFS_LinkDriverEx+0x94>)
 80117bc:	4413      	add	r3, r2
 80117be:	79fa      	ldrb	r2, [r7, #7]
 80117c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80117c2:	4b11      	ldr	r3, [pc, #68]	@ (8011808 <FATFS_LinkDriverEx+0x94>)
 80117c4:	7a5b      	ldrb	r3, [r3, #9]
 80117c6:	b2db      	uxtb	r3, r3
 80117c8:	1c5a      	adds	r2, r3, #1
 80117ca:	b2d1      	uxtb	r1, r2
 80117cc:	4a0e      	ldr	r2, [pc, #56]	@ (8011808 <FATFS_LinkDriverEx+0x94>)
 80117ce:	7251      	strb	r1, [r2, #9]
 80117d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80117d2:	7dbb      	ldrb	r3, [r7, #22]
 80117d4:	3330      	adds	r3, #48	@ 0x30
 80117d6:	b2da      	uxtb	r2, r3
 80117d8:	68bb      	ldr	r3, [r7, #8]
 80117da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80117dc:	68bb      	ldr	r3, [r7, #8]
 80117de:	3301      	adds	r3, #1
 80117e0:	223a      	movs	r2, #58	@ 0x3a
 80117e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80117e4:	68bb      	ldr	r3, [r7, #8]
 80117e6:	3302      	adds	r3, #2
 80117e8:	222f      	movs	r2, #47	@ 0x2f
 80117ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80117ec:	68bb      	ldr	r3, [r7, #8]
 80117ee:	3303      	adds	r3, #3
 80117f0:	2200      	movs	r2, #0
 80117f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80117f4:	2300      	movs	r3, #0
 80117f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80117f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80117fa:	4618      	mov	r0, r3
 80117fc:	371c      	adds	r7, #28
 80117fe:	46bd      	mov	sp, r7
 8011800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011804:	4770      	bx	lr
 8011806:	bf00      	nop
 8011808:	20000ee4 	.word	0x20000ee4

0801180c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801180c:	b580      	push	{r7, lr}
 801180e:	b082      	sub	sp, #8
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
 8011814:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011816:	2200      	movs	r2, #0
 8011818:	6839      	ldr	r1, [r7, #0]
 801181a:	6878      	ldr	r0, [r7, #4]
 801181c:	f7ff ffaa 	bl	8011774 <FATFS_LinkDriverEx>
 8011820:	4603      	mov	r3, r0
}
 8011822:	4618      	mov	r0, r3
 8011824:	3708      	adds	r7, #8
 8011826:	46bd      	mov	sp, r7
 8011828:	bd80      	pop	{r7, pc}

0801182a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801182a:	b480      	push	{r7}
 801182c:	b085      	sub	sp, #20
 801182e:	af00      	add	r7, sp, #0
 8011830:	4603      	mov	r3, r0
 8011832:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011834:	2300      	movs	r3, #0
 8011836:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801183c:	2b84      	cmp	r3, #132	@ 0x84
 801183e:	d005      	beq.n	801184c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011840:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	4413      	add	r3, r2
 8011848:	3303      	adds	r3, #3
 801184a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801184c:	68fb      	ldr	r3, [r7, #12]
}
 801184e:	4618      	mov	r0, r3
 8011850:	3714      	adds	r7, #20
 8011852:	46bd      	mov	sp, r7
 8011854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011858:	4770      	bx	lr

0801185a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801185a:	b480      	push	{r7}
 801185c:	b083      	sub	sp, #12
 801185e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011860:	f3ef 8305 	mrs	r3, IPSR
 8011864:	607b      	str	r3, [r7, #4]
  return(result);
 8011866:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011868:	2b00      	cmp	r3, #0
 801186a:	bf14      	ite	ne
 801186c:	2301      	movne	r3, #1
 801186e:	2300      	moveq	r3, #0
 8011870:	b2db      	uxtb	r3, r3
}
 8011872:	4618      	mov	r0, r3
 8011874:	370c      	adds	r7, #12
 8011876:	46bd      	mov	sp, r7
 8011878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187c:	4770      	bx	lr

0801187e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801187e:	b580      	push	{r7, lr}
 8011880:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011882:	f001 f9cd 	bl	8012c20 <vTaskStartScheduler>
  
  return osOK;
 8011886:	2300      	movs	r3, #0
}
 8011888:	4618      	mov	r0, r3
 801188a:	bd80      	pop	{r7, pc}

0801188c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 801188c:	b580      	push	{r7, lr}
 801188e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8011890:	f001 fe2e 	bl	80134f0 <xTaskGetSchedulerState>
 8011894:	4603      	mov	r3, r0
 8011896:	2b01      	cmp	r3, #1
 8011898:	d101      	bne.n	801189e <osKernelRunning+0x12>
    return 0;
 801189a:	2300      	movs	r3, #0
 801189c:	e000      	b.n	80118a0 <osKernelRunning+0x14>
  else
    return 1;
 801189e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80118a0:	4618      	mov	r0, r3
 80118a2:	bd80      	pop	{r7, pc}

080118a4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80118a8:	f7ff ffd7 	bl	801185a <inHandlerMode>
 80118ac:	4603      	mov	r3, r0
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d003      	beq.n	80118ba <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80118b2:	f001 fad9 	bl	8012e68 <xTaskGetTickCountFromISR>
 80118b6:	4603      	mov	r3, r0
 80118b8:	e002      	b.n	80118c0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80118ba:	f001 fac5 	bl	8012e48 <xTaskGetTickCount>
 80118be:	4603      	mov	r3, r0
  }
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	bd80      	pop	{r7, pc}

080118c4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80118c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118c6:	b089      	sub	sp, #36	@ 0x24
 80118c8:	af04      	add	r7, sp, #16
 80118ca:	6078      	str	r0, [r7, #4]
 80118cc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	695b      	ldr	r3, [r3, #20]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d020      	beq.n	8011918 <osThreadCreate+0x54>
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	699b      	ldr	r3, [r3, #24]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d01c      	beq.n	8011918 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	685c      	ldr	r4, [r3, #4]
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	691e      	ldr	r6, [r3, #16]
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80118f0:	4618      	mov	r0, r3
 80118f2:	f7ff ff9a 	bl	801182a <makeFreeRtosPriority>
 80118f6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	695b      	ldr	r3, [r3, #20]
 80118fc:	687a      	ldr	r2, [r7, #4]
 80118fe:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011900:	9202      	str	r2, [sp, #8]
 8011902:	9301      	str	r3, [sp, #4]
 8011904:	9100      	str	r1, [sp, #0]
 8011906:	683b      	ldr	r3, [r7, #0]
 8011908:	4632      	mov	r2, r6
 801190a:	4629      	mov	r1, r5
 801190c:	4620      	mov	r0, r4
 801190e:	f000 ffa5 	bl	801285c <xTaskCreateStatic>
 8011912:	4603      	mov	r3, r0
 8011914:	60fb      	str	r3, [r7, #12]
 8011916:	e01c      	b.n	8011952 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	685c      	ldr	r4, [r3, #4]
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011924:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801192c:	4618      	mov	r0, r3
 801192e:	f7ff ff7c 	bl	801182a <makeFreeRtosPriority>
 8011932:	4602      	mov	r2, r0
 8011934:	f107 030c 	add.w	r3, r7, #12
 8011938:	9301      	str	r3, [sp, #4]
 801193a:	9200      	str	r2, [sp, #0]
 801193c:	683b      	ldr	r3, [r7, #0]
 801193e:	4632      	mov	r2, r6
 8011940:	4629      	mov	r1, r5
 8011942:	4620      	mov	r0, r4
 8011944:	f000 fff0 	bl	8012928 <xTaskCreate>
 8011948:	4603      	mov	r3, r0
 801194a:	2b01      	cmp	r3, #1
 801194c:	d001      	beq.n	8011952 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801194e:	2300      	movs	r3, #0
 8011950:	e000      	b.n	8011954 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011952:	68fb      	ldr	r3, [r7, #12]
}
 8011954:	4618      	mov	r0, r3
 8011956:	3714      	adds	r7, #20
 8011958:	46bd      	mov	sp, r7
 801195a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801195c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b084      	sub	sp, #16
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d001      	beq.n	8011972 <osDelay+0x16>
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	e000      	b.n	8011974 <osDelay+0x18>
 8011972:	2301      	movs	r3, #1
 8011974:	4618      	mov	r0, r3
 8011976:	f001 f91b 	bl	8012bb0 <vTaskDelay>
  
  return osOK;
 801197a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801197c:	4618      	mov	r0, r3
 801197e:	3710      	adds	r7, #16
 8011980:	46bd      	mov	sp, r7
 8011982:	bd80      	pop	{r7, pc}

08011984 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8011984:	b590      	push	{r4, r7, lr}
 8011986:	b085      	sub	sp, #20
 8011988:	af02      	add	r7, sp, #8
 801198a:	6078      	str	r0, [r7, #4]
 801198c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	689b      	ldr	r3, [r3, #8]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d011      	beq.n	80119ba <osMessageCreate+0x36>
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	68db      	ldr	r3, [r3, #12]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d00d      	beq.n	80119ba <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	6818      	ldr	r0, [r3, #0]
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	6859      	ldr	r1, [r3, #4]
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	689a      	ldr	r2, [r3, #8]
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	68db      	ldr	r3, [r3, #12]
 80119ae:	2400      	movs	r4, #0
 80119b0:	9400      	str	r4, [sp, #0]
 80119b2:	f000 f9f9 	bl	8011da8 <xQueueGenericCreateStatic>
 80119b6:	4603      	mov	r3, r0
 80119b8:	e008      	b.n	80119cc <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	6818      	ldr	r0, [r3, #0]
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	685b      	ldr	r3, [r3, #4]
 80119c2:	2200      	movs	r2, #0
 80119c4:	4619      	mov	r1, r3
 80119c6:	f000 fa76 	bl	8011eb6 <xQueueGenericCreate>
 80119ca:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80119cc:	4618      	mov	r0, r3
 80119ce:	370c      	adds	r7, #12
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd90      	pop	{r4, r7, pc}

080119d4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b086      	sub	sp, #24
 80119d8:	af00      	add	r7, sp, #0
 80119da:	60f8      	str	r0, [r7, #12]
 80119dc:	60b9      	str	r1, [r7, #8]
 80119de:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80119e0:	2300      	movs	r3, #0
 80119e2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80119e8:	697b      	ldr	r3, [r7, #20]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d101      	bne.n	80119f2 <osMessagePut+0x1e>
    ticks = 1;
 80119ee:	2301      	movs	r3, #1
 80119f0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80119f2:	f7ff ff32 	bl	801185a <inHandlerMode>
 80119f6:	4603      	mov	r3, r0
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d018      	beq.n	8011a2e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80119fc:	f107 0210 	add.w	r2, r7, #16
 8011a00:	f107 0108 	add.w	r1, r7, #8
 8011a04:	2300      	movs	r3, #0
 8011a06:	68f8      	ldr	r0, [r7, #12]
 8011a08:	f000 fbc2 	bl	8012190 <xQueueGenericSendFromISR>
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	2b01      	cmp	r3, #1
 8011a10:	d001      	beq.n	8011a16 <osMessagePut+0x42>
      return osErrorOS;
 8011a12:	23ff      	movs	r3, #255	@ 0xff
 8011a14:	e018      	b.n	8011a48 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011a16:	693b      	ldr	r3, [r7, #16]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d014      	beq.n	8011a46 <osMessagePut+0x72>
 8011a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8011a50 <osMessagePut+0x7c>)
 8011a1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011a22:	601a      	str	r2, [r3, #0]
 8011a24:	f3bf 8f4f 	dsb	sy
 8011a28:	f3bf 8f6f 	isb	sy
 8011a2c:	e00b      	b.n	8011a46 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8011a2e:	f107 0108 	add.w	r1, r7, #8
 8011a32:	2300      	movs	r3, #0
 8011a34:	697a      	ldr	r2, [r7, #20]
 8011a36:	68f8      	ldr	r0, [r7, #12]
 8011a38:	f000 faa0 	bl	8011f7c <xQueueGenericSend>
 8011a3c:	4603      	mov	r3, r0
 8011a3e:	2b01      	cmp	r3, #1
 8011a40:	d001      	beq.n	8011a46 <osMessagePut+0x72>
      return osErrorOS;
 8011a42:	23ff      	movs	r3, #255	@ 0xff
 8011a44:	e000      	b.n	8011a48 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8011a46:	2300      	movs	r3, #0
}
 8011a48:	4618      	mov	r0, r3
 8011a4a:	3718      	adds	r7, #24
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	bd80      	pop	{r7, pc}
 8011a50:	e000ed04 	.word	0xe000ed04

08011a54 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8011a54:	b590      	push	{r4, r7, lr}
 8011a56:	b08b      	sub	sp, #44	@ 0x2c
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	60f8      	str	r0, [r7, #12]
 8011a5c:	60b9      	str	r1, [r7, #8]
 8011a5e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8011a64:	2300      	movs	r3, #0
 8011a66:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8011a68:	68bb      	ldr	r3, [r7, #8]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d10a      	bne.n	8011a84 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8011a6e:	2380      	movs	r3, #128	@ 0x80
 8011a70:	617b      	str	r3, [r7, #20]
    return event;
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	461c      	mov	r4, r3
 8011a76:	f107 0314 	add.w	r3, r7, #20
 8011a7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011a7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011a82:	e054      	b.n	8011b2e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8011a84:	2300      	movs	r3, #0
 8011a86:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8011a88:	2300      	movs	r3, #0
 8011a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a92:	d103      	bne.n	8011a9c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8011a94:	f04f 33ff 	mov.w	r3, #4294967295
 8011a98:	627b      	str	r3, [r7, #36]	@ 0x24
 8011a9a:	e009      	b.n	8011ab0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d006      	beq.n	8011ab0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8011aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d101      	bne.n	8011ab0 <osMessageGet+0x5c>
      ticks = 1;
 8011aac:	2301      	movs	r3, #1
 8011aae:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8011ab0:	f7ff fed3 	bl	801185a <inHandlerMode>
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d01c      	beq.n	8011af4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8011aba:	f107 0220 	add.w	r2, r7, #32
 8011abe:	f107 0314 	add.w	r3, r7, #20
 8011ac2:	3304      	adds	r3, #4
 8011ac4:	4619      	mov	r1, r3
 8011ac6:	68b8      	ldr	r0, [r7, #8]
 8011ac8:	f000 fcee 	bl	80124a8 <xQueueReceiveFromISR>
 8011acc:	4603      	mov	r3, r0
 8011ace:	2b01      	cmp	r3, #1
 8011ad0:	d102      	bne.n	8011ad8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8011ad2:	2310      	movs	r3, #16
 8011ad4:	617b      	str	r3, [r7, #20]
 8011ad6:	e001      	b.n	8011adc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8011ad8:	2300      	movs	r3, #0
 8011ada:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011adc:	6a3b      	ldr	r3, [r7, #32]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d01d      	beq.n	8011b1e <osMessageGet+0xca>
 8011ae2:	4b15      	ldr	r3, [pc, #84]	@ (8011b38 <osMessageGet+0xe4>)
 8011ae4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011ae8:	601a      	str	r2, [r3, #0]
 8011aea:	f3bf 8f4f 	dsb	sy
 8011aee:	f3bf 8f6f 	isb	sy
 8011af2:	e014      	b.n	8011b1e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8011af4:	f107 0314 	add.w	r3, r7, #20
 8011af8:	3304      	adds	r3, #4
 8011afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011afc:	4619      	mov	r1, r3
 8011afe:	68b8      	ldr	r0, [r7, #8]
 8011b00:	f000 fbea 	bl	80122d8 <xQueueReceive>
 8011b04:	4603      	mov	r3, r0
 8011b06:	2b01      	cmp	r3, #1
 8011b08:	d102      	bne.n	8011b10 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8011b0a:	2310      	movs	r3, #16
 8011b0c:	617b      	str	r3, [r7, #20]
 8011b0e:	e006      	b.n	8011b1e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d101      	bne.n	8011b1a <osMessageGet+0xc6>
 8011b16:	2300      	movs	r3, #0
 8011b18:	e000      	b.n	8011b1c <osMessageGet+0xc8>
 8011b1a:	2340      	movs	r3, #64	@ 0x40
 8011b1c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	461c      	mov	r4, r3
 8011b22:	f107 0314 	add.w	r3, r7, #20
 8011b26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011b2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011b2e:	68f8      	ldr	r0, [r7, #12]
 8011b30:	372c      	adds	r7, #44	@ 0x2c
 8011b32:	46bd      	mov	sp, r7
 8011b34:	bd90      	pop	{r4, r7, pc}
 8011b36:	bf00      	nop
 8011b38:	e000ed04 	.word	0xe000ed04

08011b3c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b082      	sub	sp, #8
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8011b44:	f7ff fe89 	bl	801185a <inHandlerMode>
 8011b48:	4603      	mov	r3, r0
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d004      	beq.n	8011b58 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8011b4e:	6878      	ldr	r0, [r7, #4]
 8011b50:	f000 fd53 	bl	80125fa <uxQueueMessagesWaitingFromISR>
 8011b54:	4603      	mov	r3, r0
 8011b56:	e003      	b.n	8011b60 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8011b58:	6878      	ldr	r0, [r7, #4]
 8011b5a:	f000 fd2d 	bl	80125b8 <uxQueueMessagesWaiting>
 8011b5e:	4603      	mov	r3, r0
  }
}
 8011b60:	4618      	mov	r0, r3
 8011b62:	3708      	adds	r7, #8
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}

08011b68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011b68:	b480      	push	{r7}
 8011b6a:	b083      	sub	sp, #12
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	f103 0208 	add.w	r2, r3, #8
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8011b80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	f103 0208 	add.w	r2, r3, #8
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	f103 0208 	add.w	r2, r3, #8
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	2200      	movs	r2, #0
 8011b9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011b9c:	bf00      	nop
 8011b9e:	370c      	adds	r7, #12
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba6:	4770      	bx	lr

08011ba8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011ba8:	b480      	push	{r7}
 8011baa:	b083      	sub	sp, #12
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011bb6:	bf00      	nop
 8011bb8:	370c      	adds	r7, #12
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc0:	4770      	bx	lr

08011bc2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011bc2:	b480      	push	{r7}
 8011bc4:	b085      	sub	sp, #20
 8011bc6:	af00      	add	r7, sp, #0
 8011bc8:	6078      	str	r0, [r7, #4]
 8011bca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	685b      	ldr	r3, [r3, #4]
 8011bd0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011bd2:	683b      	ldr	r3, [r7, #0]
 8011bd4:	68fa      	ldr	r2, [r7, #12]
 8011bd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	689a      	ldr	r2, [r3, #8]
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	689b      	ldr	r3, [r3, #8]
 8011be4:	683a      	ldr	r2, [r7, #0]
 8011be6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	683a      	ldr	r2, [r7, #0]
 8011bec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011bee:	683b      	ldr	r3, [r7, #0]
 8011bf0:	687a      	ldr	r2, [r7, #4]
 8011bf2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	1c5a      	adds	r2, r3, #1
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	601a      	str	r2, [r3, #0]
}
 8011bfe:	bf00      	nop
 8011c00:	3714      	adds	r7, #20
 8011c02:	46bd      	mov	sp, r7
 8011c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c08:	4770      	bx	lr

08011c0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011c0a:	b480      	push	{r7}
 8011c0c:	b085      	sub	sp, #20
 8011c0e:	af00      	add	r7, sp, #0
 8011c10:	6078      	str	r0, [r7, #4]
 8011c12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011c1a:	68bb      	ldr	r3, [r7, #8]
 8011c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c20:	d103      	bne.n	8011c2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	691b      	ldr	r3, [r3, #16]
 8011c26:	60fb      	str	r3, [r7, #12]
 8011c28:	e00c      	b.n	8011c44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	3308      	adds	r3, #8
 8011c2e:	60fb      	str	r3, [r7, #12]
 8011c30:	e002      	b.n	8011c38 <vListInsert+0x2e>
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	685b      	ldr	r3, [r3, #4]
 8011c36:	60fb      	str	r3, [r7, #12]
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	685b      	ldr	r3, [r3, #4]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	68ba      	ldr	r2, [r7, #8]
 8011c40:	429a      	cmp	r2, r3
 8011c42:	d2f6      	bcs.n	8011c32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	685a      	ldr	r2, [r3, #4]
 8011c48:	683b      	ldr	r3, [r7, #0]
 8011c4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	685b      	ldr	r3, [r3, #4]
 8011c50:	683a      	ldr	r2, [r7, #0]
 8011c52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	68fa      	ldr	r2, [r7, #12]
 8011c58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	683a      	ldr	r2, [r7, #0]
 8011c5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011c60:	683b      	ldr	r3, [r7, #0]
 8011c62:	687a      	ldr	r2, [r7, #4]
 8011c64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	1c5a      	adds	r2, r3, #1
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	601a      	str	r2, [r3, #0]
}
 8011c70:	bf00      	nop
 8011c72:	3714      	adds	r7, #20
 8011c74:	46bd      	mov	sp, r7
 8011c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7a:	4770      	bx	lr

08011c7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011c7c:	b480      	push	{r7}
 8011c7e:	b085      	sub	sp, #20
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	691b      	ldr	r3, [r3, #16]
 8011c88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	685b      	ldr	r3, [r3, #4]
 8011c8e:	687a      	ldr	r2, [r7, #4]
 8011c90:	6892      	ldr	r2, [r2, #8]
 8011c92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	689b      	ldr	r3, [r3, #8]
 8011c98:	687a      	ldr	r2, [r7, #4]
 8011c9a:	6852      	ldr	r2, [r2, #4]
 8011c9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	685b      	ldr	r3, [r3, #4]
 8011ca2:	687a      	ldr	r2, [r7, #4]
 8011ca4:	429a      	cmp	r2, r3
 8011ca6:	d103      	bne.n	8011cb0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	689a      	ldr	r2, [r3, #8]
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	1e5a      	subs	r2, r3, #1
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	681b      	ldr	r3, [r3, #0]
}
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	3714      	adds	r7, #20
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cce:	4770      	bx	lr

08011cd0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b084      	sub	sp, #16
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
 8011cd8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d10d      	bne.n	8011d00 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ce8:	b672      	cpsid	i
 8011cea:	f383 8811 	msr	BASEPRI, r3
 8011cee:	f3bf 8f6f 	isb	sy
 8011cf2:	f3bf 8f4f 	dsb	sy
 8011cf6:	b662      	cpsie	i
 8011cf8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011cfa:	bf00      	nop
 8011cfc:	bf00      	nop
 8011cfe:	e7fd      	b.n	8011cfc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8011d00:	f001 fe14 	bl	801392c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	681a      	ldr	r2, [r3, #0]
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011d0c:	68f9      	ldr	r1, [r7, #12]
 8011d0e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8011d10:	fb01 f303 	mul.w	r3, r1, r3
 8011d14:	441a      	add	r2, r3
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	2200      	movs	r2, #0
 8011d1e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	681a      	ldr	r2, [r3, #0]
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	681a      	ldr	r2, [r3, #0]
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011d30:	3b01      	subs	r3, #1
 8011d32:	68f9      	ldr	r1, [r7, #12]
 8011d34:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8011d36:	fb01 f303 	mul.w	r3, r1, r3
 8011d3a:	441a      	add	r2, r3
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	22ff      	movs	r2, #255	@ 0xff
 8011d44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	22ff      	movs	r2, #255	@ 0xff
 8011d4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8011d50:	683b      	ldr	r3, [r7, #0]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d114      	bne.n	8011d80 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	691b      	ldr	r3, [r3, #16]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d01a      	beq.n	8011d94 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	3310      	adds	r3, #16
 8011d62:	4618      	mov	r0, r3
 8011d64:	f001 f9fa 	bl	801315c <xTaskRemoveFromEventList>
 8011d68:	4603      	mov	r3, r0
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d012      	beq.n	8011d94 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8011da4 <xQueueGenericReset+0xd4>)
 8011d70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011d74:	601a      	str	r2, [r3, #0]
 8011d76:	f3bf 8f4f 	dsb	sy
 8011d7a:	f3bf 8f6f 	isb	sy
 8011d7e:	e009      	b.n	8011d94 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	3310      	adds	r3, #16
 8011d84:	4618      	mov	r0, r3
 8011d86:	f7ff feef 	bl	8011b68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	3324      	adds	r3, #36	@ 0x24
 8011d8e:	4618      	mov	r0, r3
 8011d90:	f7ff feea 	bl	8011b68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011d94:	f001 fe00 	bl	8013998 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011d98:	2301      	movs	r3, #1
}
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	3710      	adds	r7, #16
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bd80      	pop	{r7, pc}
 8011da2:	bf00      	nop
 8011da4:	e000ed04 	.word	0xe000ed04

08011da8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b08e      	sub	sp, #56	@ 0x38
 8011dac:	af02      	add	r7, sp, #8
 8011dae:	60f8      	str	r0, [r7, #12]
 8011db0:	60b9      	str	r1, [r7, #8]
 8011db2:	607a      	str	r2, [r7, #4]
 8011db4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d10d      	bne.n	8011dd8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8011dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011dc0:	b672      	cpsid	i
 8011dc2:	f383 8811 	msr	BASEPRI, r3
 8011dc6:	f3bf 8f6f 	isb	sy
 8011dca:	f3bf 8f4f 	dsb	sy
 8011dce:	b662      	cpsie	i
 8011dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8011dd2:	bf00      	nop
 8011dd4:	bf00      	nop
 8011dd6:	e7fd      	b.n	8011dd4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d10d      	bne.n	8011dfa <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8011dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011de2:	b672      	cpsid	i
 8011de4:	f383 8811 	msr	BASEPRI, r3
 8011de8:	f3bf 8f6f 	isb	sy
 8011dec:	f3bf 8f4f 	dsb	sy
 8011df0:	b662      	cpsie	i
 8011df2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011df4:	bf00      	nop
 8011df6:	bf00      	nop
 8011df8:	e7fd      	b.n	8011df6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d002      	beq.n	8011e06 <xQueueGenericCreateStatic+0x5e>
 8011e00:	68bb      	ldr	r3, [r7, #8]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d001      	beq.n	8011e0a <xQueueGenericCreateStatic+0x62>
 8011e06:	2301      	movs	r3, #1
 8011e08:	e000      	b.n	8011e0c <xQueueGenericCreateStatic+0x64>
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d10d      	bne.n	8011e2c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8011e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e14:	b672      	cpsid	i
 8011e16:	f383 8811 	msr	BASEPRI, r3
 8011e1a:	f3bf 8f6f 	isb	sy
 8011e1e:	f3bf 8f4f 	dsb	sy
 8011e22:	b662      	cpsie	i
 8011e24:	623b      	str	r3, [r7, #32]
}
 8011e26:	bf00      	nop
 8011e28:	bf00      	nop
 8011e2a:	e7fd      	b.n	8011e28 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d102      	bne.n	8011e38 <xQueueGenericCreateStatic+0x90>
 8011e32:	68bb      	ldr	r3, [r7, #8]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d101      	bne.n	8011e3c <xQueueGenericCreateStatic+0x94>
 8011e38:	2301      	movs	r3, #1
 8011e3a:	e000      	b.n	8011e3e <xQueueGenericCreateStatic+0x96>
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d10d      	bne.n	8011e5e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8011e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e46:	b672      	cpsid	i
 8011e48:	f383 8811 	msr	BASEPRI, r3
 8011e4c:	f3bf 8f6f 	isb	sy
 8011e50:	f3bf 8f4f 	dsb	sy
 8011e54:	b662      	cpsie	i
 8011e56:	61fb      	str	r3, [r7, #28]
}
 8011e58:	bf00      	nop
 8011e5a:	bf00      	nop
 8011e5c:	e7fd      	b.n	8011e5a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011e5e:	2348      	movs	r3, #72	@ 0x48
 8011e60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011e62:	697b      	ldr	r3, [r7, #20]
 8011e64:	2b48      	cmp	r3, #72	@ 0x48
 8011e66:	d00d      	beq.n	8011e84 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8011e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e6c:	b672      	cpsid	i
 8011e6e:	f383 8811 	msr	BASEPRI, r3
 8011e72:	f3bf 8f6f 	isb	sy
 8011e76:	f3bf 8f4f 	dsb	sy
 8011e7a:	b662      	cpsie	i
 8011e7c:	61bb      	str	r3, [r7, #24]
}
 8011e7e:	bf00      	nop
 8011e80:	bf00      	nop
 8011e82:	e7fd      	b.n	8011e80 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011e84:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011e86:	683b      	ldr	r3, [r7, #0]
 8011e88:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8011e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d00d      	beq.n	8011eac <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e92:	2201      	movs	r2, #1
 8011e94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011e98:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8011e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e9e:	9300      	str	r3, [sp, #0]
 8011ea0:	4613      	mov	r3, r2
 8011ea2:	687a      	ldr	r2, [r7, #4]
 8011ea4:	68b9      	ldr	r1, [r7, #8]
 8011ea6:	68f8      	ldr	r0, [r7, #12]
 8011ea8:	f000 f848 	bl	8011f3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8011eae:	4618      	mov	r0, r3
 8011eb0:	3730      	adds	r7, #48	@ 0x30
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	bd80      	pop	{r7, pc}

08011eb6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011eb6:	b580      	push	{r7, lr}
 8011eb8:	b08a      	sub	sp, #40	@ 0x28
 8011eba:	af02      	add	r7, sp, #8
 8011ebc:	60f8      	str	r0, [r7, #12]
 8011ebe:	60b9      	str	r1, [r7, #8]
 8011ec0:	4613      	mov	r3, r2
 8011ec2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d10d      	bne.n	8011ee6 <xQueueGenericCreate+0x30>
	__asm volatile
 8011eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ece:	b672      	cpsid	i
 8011ed0:	f383 8811 	msr	BASEPRI, r3
 8011ed4:	f3bf 8f6f 	isb	sy
 8011ed8:	f3bf 8f4f 	dsb	sy
 8011edc:	b662      	cpsie	i
 8011ede:	613b      	str	r3, [r7, #16]
}
 8011ee0:	bf00      	nop
 8011ee2:	bf00      	nop
 8011ee4:	e7fd      	b.n	8011ee2 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011ee6:	68bb      	ldr	r3, [r7, #8]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d102      	bne.n	8011ef2 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011eec:	2300      	movs	r3, #0
 8011eee:	61fb      	str	r3, [r7, #28]
 8011ef0:	e004      	b.n	8011efc <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	68ba      	ldr	r2, [r7, #8]
 8011ef6:	fb02 f303 	mul.w	r3, r2, r3
 8011efa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011efc:	69fb      	ldr	r3, [r7, #28]
 8011efe:	3348      	adds	r3, #72	@ 0x48
 8011f00:	4618      	mov	r0, r3
 8011f02:	f001 fe41 	bl	8013b88 <pvPortMalloc>
 8011f06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011f08:	69bb      	ldr	r3, [r7, #24]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d011      	beq.n	8011f32 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011f0e:	69bb      	ldr	r3, [r7, #24]
 8011f10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011f12:	697b      	ldr	r3, [r7, #20]
 8011f14:	3348      	adds	r3, #72	@ 0x48
 8011f16:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011f18:	69bb      	ldr	r3, [r7, #24]
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011f20:	79fa      	ldrb	r2, [r7, #7]
 8011f22:	69bb      	ldr	r3, [r7, #24]
 8011f24:	9300      	str	r3, [sp, #0]
 8011f26:	4613      	mov	r3, r2
 8011f28:	697a      	ldr	r2, [r7, #20]
 8011f2a:	68b9      	ldr	r1, [r7, #8]
 8011f2c:	68f8      	ldr	r0, [r7, #12]
 8011f2e:	f000 f805 	bl	8011f3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011f32:	69bb      	ldr	r3, [r7, #24]
	}
 8011f34:	4618      	mov	r0, r3
 8011f36:	3720      	adds	r7, #32
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd80      	pop	{r7, pc}

08011f3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	b084      	sub	sp, #16
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	60f8      	str	r0, [r7, #12]
 8011f44:	60b9      	str	r1, [r7, #8]
 8011f46:	607a      	str	r2, [r7, #4]
 8011f48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011f4a:	68bb      	ldr	r3, [r7, #8]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d103      	bne.n	8011f58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011f50:	69bb      	ldr	r3, [r7, #24]
 8011f52:	69ba      	ldr	r2, [r7, #24]
 8011f54:	601a      	str	r2, [r3, #0]
 8011f56:	e002      	b.n	8011f5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011f58:	69bb      	ldr	r3, [r7, #24]
 8011f5a:	687a      	ldr	r2, [r7, #4]
 8011f5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011f5e:	69bb      	ldr	r3, [r7, #24]
 8011f60:	68fa      	ldr	r2, [r7, #12]
 8011f62:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011f64:	69bb      	ldr	r3, [r7, #24]
 8011f66:	68ba      	ldr	r2, [r7, #8]
 8011f68:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011f6a:	2101      	movs	r1, #1
 8011f6c:	69b8      	ldr	r0, [r7, #24]
 8011f6e:	f7ff feaf 	bl	8011cd0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011f72:	bf00      	nop
 8011f74:	3710      	adds	r7, #16
 8011f76:	46bd      	mov	sp, r7
 8011f78:	bd80      	pop	{r7, pc}
	...

08011f7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b08e      	sub	sp, #56	@ 0x38
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	60f8      	str	r0, [r7, #12]
 8011f84:	60b9      	str	r1, [r7, #8]
 8011f86:	607a      	str	r2, [r7, #4]
 8011f88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d10d      	bne.n	8011fb4 <xQueueGenericSend+0x38>
	__asm volatile
 8011f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f9c:	b672      	cpsid	i
 8011f9e:	f383 8811 	msr	BASEPRI, r3
 8011fa2:	f3bf 8f6f 	isb	sy
 8011fa6:	f3bf 8f4f 	dsb	sy
 8011faa:	b662      	cpsie	i
 8011fac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8011fae:	bf00      	nop
 8011fb0:	bf00      	nop
 8011fb2:	e7fd      	b.n	8011fb0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011fb4:	68bb      	ldr	r3, [r7, #8]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d103      	bne.n	8011fc2 <xQueueGenericSend+0x46>
 8011fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d101      	bne.n	8011fc6 <xQueueGenericSend+0x4a>
 8011fc2:	2301      	movs	r3, #1
 8011fc4:	e000      	b.n	8011fc8 <xQueueGenericSend+0x4c>
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d10d      	bne.n	8011fe8 <xQueueGenericSend+0x6c>
	__asm volatile
 8011fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fd0:	b672      	cpsid	i
 8011fd2:	f383 8811 	msr	BASEPRI, r3
 8011fd6:	f3bf 8f6f 	isb	sy
 8011fda:	f3bf 8f4f 	dsb	sy
 8011fde:	b662      	cpsie	i
 8011fe0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011fe2:	bf00      	nop
 8011fe4:	bf00      	nop
 8011fe6:	e7fd      	b.n	8011fe4 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011fe8:	683b      	ldr	r3, [r7, #0]
 8011fea:	2b02      	cmp	r3, #2
 8011fec:	d103      	bne.n	8011ff6 <xQueueGenericSend+0x7a>
 8011fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ff2:	2b01      	cmp	r3, #1
 8011ff4:	d101      	bne.n	8011ffa <xQueueGenericSend+0x7e>
 8011ff6:	2301      	movs	r3, #1
 8011ff8:	e000      	b.n	8011ffc <xQueueGenericSend+0x80>
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d10d      	bne.n	801201c <xQueueGenericSend+0xa0>
	__asm volatile
 8012000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012004:	b672      	cpsid	i
 8012006:	f383 8811 	msr	BASEPRI, r3
 801200a:	f3bf 8f6f 	isb	sy
 801200e:	f3bf 8f4f 	dsb	sy
 8012012:	b662      	cpsie	i
 8012014:	623b      	str	r3, [r7, #32]
}
 8012016:	bf00      	nop
 8012018:	bf00      	nop
 801201a:	e7fd      	b.n	8012018 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801201c:	f001 fa68 	bl	80134f0 <xTaskGetSchedulerState>
 8012020:	4603      	mov	r3, r0
 8012022:	2b00      	cmp	r3, #0
 8012024:	d102      	bne.n	801202c <xQueueGenericSend+0xb0>
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d101      	bne.n	8012030 <xQueueGenericSend+0xb4>
 801202c:	2301      	movs	r3, #1
 801202e:	e000      	b.n	8012032 <xQueueGenericSend+0xb6>
 8012030:	2300      	movs	r3, #0
 8012032:	2b00      	cmp	r3, #0
 8012034:	d10d      	bne.n	8012052 <xQueueGenericSend+0xd6>
	__asm volatile
 8012036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801203a:	b672      	cpsid	i
 801203c:	f383 8811 	msr	BASEPRI, r3
 8012040:	f3bf 8f6f 	isb	sy
 8012044:	f3bf 8f4f 	dsb	sy
 8012048:	b662      	cpsie	i
 801204a:	61fb      	str	r3, [r7, #28]
}
 801204c:	bf00      	nop
 801204e:	bf00      	nop
 8012050:	e7fd      	b.n	801204e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012052:	f001 fc6b 	bl	801392c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012058:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801205a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801205c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801205e:	429a      	cmp	r2, r3
 8012060:	d302      	bcc.n	8012068 <xQueueGenericSend+0xec>
 8012062:	683b      	ldr	r3, [r7, #0]
 8012064:	2b02      	cmp	r3, #2
 8012066:	d129      	bne.n	80120bc <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012068:	683a      	ldr	r2, [r7, #0]
 801206a:	68b9      	ldr	r1, [r7, #8]
 801206c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801206e:	f000 fae5 	bl	801263c <prvCopyDataToQueue>
 8012072:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012078:	2b00      	cmp	r3, #0
 801207a:	d010      	beq.n	801209e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801207c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801207e:	3324      	adds	r3, #36	@ 0x24
 8012080:	4618      	mov	r0, r3
 8012082:	f001 f86b 	bl	801315c <xTaskRemoveFromEventList>
 8012086:	4603      	mov	r3, r0
 8012088:	2b00      	cmp	r3, #0
 801208a:	d013      	beq.n	80120b4 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801208c:	4b3f      	ldr	r3, [pc, #252]	@ (801218c <xQueueGenericSend+0x210>)
 801208e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012092:	601a      	str	r2, [r3, #0]
 8012094:	f3bf 8f4f 	dsb	sy
 8012098:	f3bf 8f6f 	isb	sy
 801209c:	e00a      	b.n	80120b4 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801209e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d007      	beq.n	80120b4 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80120a4:	4b39      	ldr	r3, [pc, #228]	@ (801218c <xQueueGenericSend+0x210>)
 80120a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80120aa:	601a      	str	r2, [r3, #0]
 80120ac:	f3bf 8f4f 	dsb	sy
 80120b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80120b4:	f001 fc70 	bl	8013998 <vPortExitCritical>
				return pdPASS;
 80120b8:	2301      	movs	r3, #1
 80120ba:	e063      	b.n	8012184 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d103      	bne.n	80120ca <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80120c2:	f001 fc69 	bl	8013998 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80120c6:	2300      	movs	r3, #0
 80120c8:	e05c      	b.n	8012184 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80120ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d106      	bne.n	80120de <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80120d0:	f107 0314 	add.w	r3, r7, #20
 80120d4:	4618      	mov	r0, r3
 80120d6:	f001 f8a7 	bl	8013228 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80120da:	2301      	movs	r3, #1
 80120dc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80120de:	f001 fc5b 	bl	8013998 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80120e2:	f000 fe03 	bl	8012cec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80120e6:	f001 fc21 	bl	801392c <vPortEnterCritical>
 80120ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80120f0:	b25b      	sxtb	r3, r3
 80120f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120f6:	d103      	bne.n	8012100 <xQueueGenericSend+0x184>
 80120f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120fa:	2200      	movs	r2, #0
 80120fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012102:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012106:	b25b      	sxtb	r3, r3
 8012108:	f1b3 3fff 	cmp.w	r3, #4294967295
 801210c:	d103      	bne.n	8012116 <xQueueGenericSend+0x19a>
 801210e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012110:	2200      	movs	r2, #0
 8012112:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012116:	f001 fc3f 	bl	8013998 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801211a:	1d3a      	adds	r2, r7, #4
 801211c:	f107 0314 	add.w	r3, r7, #20
 8012120:	4611      	mov	r1, r2
 8012122:	4618      	mov	r0, r3
 8012124:	f001 f896 	bl	8013254 <xTaskCheckForTimeOut>
 8012128:	4603      	mov	r3, r0
 801212a:	2b00      	cmp	r3, #0
 801212c:	d124      	bne.n	8012178 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801212e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012130:	f000 fb7c 	bl	801282c <prvIsQueueFull>
 8012134:	4603      	mov	r3, r0
 8012136:	2b00      	cmp	r3, #0
 8012138:	d018      	beq.n	801216c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801213a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801213c:	3310      	adds	r3, #16
 801213e:	687a      	ldr	r2, [r7, #4]
 8012140:	4611      	mov	r1, r2
 8012142:	4618      	mov	r0, r3
 8012144:	f000 ffe2 	bl	801310c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012148:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801214a:	f000 fb07 	bl	801275c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801214e:	f000 fddb 	bl	8012d08 <xTaskResumeAll>
 8012152:	4603      	mov	r3, r0
 8012154:	2b00      	cmp	r3, #0
 8012156:	f47f af7c 	bne.w	8012052 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 801215a:	4b0c      	ldr	r3, [pc, #48]	@ (801218c <xQueueGenericSend+0x210>)
 801215c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012160:	601a      	str	r2, [r3, #0]
 8012162:	f3bf 8f4f 	dsb	sy
 8012166:	f3bf 8f6f 	isb	sy
 801216a:	e772      	b.n	8012052 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801216c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801216e:	f000 faf5 	bl	801275c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012172:	f000 fdc9 	bl	8012d08 <xTaskResumeAll>
 8012176:	e76c      	b.n	8012052 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012178:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801217a:	f000 faef 	bl	801275c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801217e:	f000 fdc3 	bl	8012d08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012182:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012184:	4618      	mov	r0, r3
 8012186:	3738      	adds	r7, #56	@ 0x38
 8012188:	46bd      	mov	sp, r7
 801218a:	bd80      	pop	{r7, pc}
 801218c:	e000ed04 	.word	0xe000ed04

08012190 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012190:	b580      	push	{r7, lr}
 8012192:	b08e      	sub	sp, #56	@ 0x38
 8012194:	af00      	add	r7, sp, #0
 8012196:	60f8      	str	r0, [r7, #12]
 8012198:	60b9      	str	r1, [r7, #8]
 801219a:	607a      	str	r2, [r7, #4]
 801219c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80121a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d10d      	bne.n	80121c4 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80121a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121ac:	b672      	cpsid	i
 80121ae:	f383 8811 	msr	BASEPRI, r3
 80121b2:	f3bf 8f6f 	isb	sy
 80121b6:	f3bf 8f4f 	dsb	sy
 80121ba:	b662      	cpsie	i
 80121bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80121be:	bf00      	nop
 80121c0:	bf00      	nop
 80121c2:	e7fd      	b.n	80121c0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80121c4:	68bb      	ldr	r3, [r7, #8]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d103      	bne.n	80121d2 <xQueueGenericSendFromISR+0x42>
 80121ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d101      	bne.n	80121d6 <xQueueGenericSendFromISR+0x46>
 80121d2:	2301      	movs	r3, #1
 80121d4:	e000      	b.n	80121d8 <xQueueGenericSendFromISR+0x48>
 80121d6:	2300      	movs	r3, #0
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d10d      	bne.n	80121f8 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80121dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121e0:	b672      	cpsid	i
 80121e2:	f383 8811 	msr	BASEPRI, r3
 80121e6:	f3bf 8f6f 	isb	sy
 80121ea:	f3bf 8f4f 	dsb	sy
 80121ee:	b662      	cpsie	i
 80121f0:	623b      	str	r3, [r7, #32]
}
 80121f2:	bf00      	nop
 80121f4:	bf00      	nop
 80121f6:	e7fd      	b.n	80121f4 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80121f8:	683b      	ldr	r3, [r7, #0]
 80121fa:	2b02      	cmp	r3, #2
 80121fc:	d103      	bne.n	8012206 <xQueueGenericSendFromISR+0x76>
 80121fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012202:	2b01      	cmp	r3, #1
 8012204:	d101      	bne.n	801220a <xQueueGenericSendFromISR+0x7a>
 8012206:	2301      	movs	r3, #1
 8012208:	e000      	b.n	801220c <xQueueGenericSendFromISR+0x7c>
 801220a:	2300      	movs	r3, #0
 801220c:	2b00      	cmp	r3, #0
 801220e:	d10d      	bne.n	801222c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8012210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012214:	b672      	cpsid	i
 8012216:	f383 8811 	msr	BASEPRI, r3
 801221a:	f3bf 8f6f 	isb	sy
 801221e:	f3bf 8f4f 	dsb	sy
 8012222:	b662      	cpsie	i
 8012224:	61fb      	str	r3, [r7, #28]
}
 8012226:	bf00      	nop
 8012228:	bf00      	nop
 801222a:	e7fd      	b.n	8012228 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801222c:	f001 fc66 	bl	8013afc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012230:	f3ef 8211 	mrs	r2, BASEPRI
 8012234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012238:	b672      	cpsid	i
 801223a:	f383 8811 	msr	BASEPRI, r3
 801223e:	f3bf 8f6f 	isb	sy
 8012242:	f3bf 8f4f 	dsb	sy
 8012246:	b662      	cpsie	i
 8012248:	61ba      	str	r2, [r7, #24]
 801224a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801224c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801224e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012252:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012258:	429a      	cmp	r2, r3
 801225a:	d302      	bcc.n	8012262 <xQueueGenericSendFromISR+0xd2>
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	2b02      	cmp	r3, #2
 8012260:	d12c      	bne.n	80122bc <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012264:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012268:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801226c:	683a      	ldr	r2, [r7, #0]
 801226e:	68b9      	ldr	r1, [r7, #8]
 8012270:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012272:	f000 f9e3 	bl	801263c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012276:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 801227a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801227e:	d112      	bne.n	80122a6 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012284:	2b00      	cmp	r3, #0
 8012286:	d016      	beq.n	80122b6 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801228a:	3324      	adds	r3, #36	@ 0x24
 801228c:	4618      	mov	r0, r3
 801228e:	f000 ff65 	bl	801315c <xTaskRemoveFromEventList>
 8012292:	4603      	mov	r3, r0
 8012294:	2b00      	cmp	r3, #0
 8012296:	d00e      	beq.n	80122b6 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d00b      	beq.n	80122b6 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	2201      	movs	r2, #1
 80122a2:	601a      	str	r2, [r3, #0]
 80122a4:	e007      	b.n	80122b6 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80122a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80122aa:	3301      	adds	r3, #1
 80122ac:	b2db      	uxtb	r3, r3
 80122ae:	b25a      	sxtb	r2, r3
 80122b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80122b6:	2301      	movs	r3, #1
 80122b8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80122ba:	e001      	b.n	80122c0 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80122bc:	2300      	movs	r3, #0
 80122be:	637b      	str	r3, [r7, #52]	@ 0x34
 80122c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122c2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80122c4:	693b      	ldr	r3, [r7, #16]
 80122c6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80122ca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80122cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80122ce:	4618      	mov	r0, r3
 80122d0:	3738      	adds	r7, #56	@ 0x38
 80122d2:	46bd      	mov	sp, r7
 80122d4:	bd80      	pop	{r7, pc}
	...

080122d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	b08c      	sub	sp, #48	@ 0x30
 80122dc:	af00      	add	r7, sp, #0
 80122de:	60f8      	str	r0, [r7, #12]
 80122e0:	60b9      	str	r1, [r7, #8]
 80122e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80122e4:	2300      	movs	r3, #0
 80122e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80122ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d10d      	bne.n	801230e <xQueueReceive+0x36>
	__asm volatile
 80122f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122f6:	b672      	cpsid	i
 80122f8:	f383 8811 	msr	BASEPRI, r3
 80122fc:	f3bf 8f6f 	isb	sy
 8012300:	f3bf 8f4f 	dsb	sy
 8012304:	b662      	cpsie	i
 8012306:	623b      	str	r3, [r7, #32]
}
 8012308:	bf00      	nop
 801230a:	bf00      	nop
 801230c:	e7fd      	b.n	801230a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801230e:	68bb      	ldr	r3, [r7, #8]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d103      	bne.n	801231c <xQueueReceive+0x44>
 8012314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012318:	2b00      	cmp	r3, #0
 801231a:	d101      	bne.n	8012320 <xQueueReceive+0x48>
 801231c:	2301      	movs	r3, #1
 801231e:	e000      	b.n	8012322 <xQueueReceive+0x4a>
 8012320:	2300      	movs	r3, #0
 8012322:	2b00      	cmp	r3, #0
 8012324:	d10d      	bne.n	8012342 <xQueueReceive+0x6a>
	__asm volatile
 8012326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801232a:	b672      	cpsid	i
 801232c:	f383 8811 	msr	BASEPRI, r3
 8012330:	f3bf 8f6f 	isb	sy
 8012334:	f3bf 8f4f 	dsb	sy
 8012338:	b662      	cpsie	i
 801233a:	61fb      	str	r3, [r7, #28]
}
 801233c:	bf00      	nop
 801233e:	bf00      	nop
 8012340:	e7fd      	b.n	801233e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012342:	f001 f8d5 	bl	80134f0 <xTaskGetSchedulerState>
 8012346:	4603      	mov	r3, r0
 8012348:	2b00      	cmp	r3, #0
 801234a:	d102      	bne.n	8012352 <xQueueReceive+0x7a>
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d101      	bne.n	8012356 <xQueueReceive+0x7e>
 8012352:	2301      	movs	r3, #1
 8012354:	e000      	b.n	8012358 <xQueueReceive+0x80>
 8012356:	2300      	movs	r3, #0
 8012358:	2b00      	cmp	r3, #0
 801235a:	d10d      	bne.n	8012378 <xQueueReceive+0xa0>
	__asm volatile
 801235c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012360:	b672      	cpsid	i
 8012362:	f383 8811 	msr	BASEPRI, r3
 8012366:	f3bf 8f6f 	isb	sy
 801236a:	f3bf 8f4f 	dsb	sy
 801236e:	b662      	cpsie	i
 8012370:	61bb      	str	r3, [r7, #24]
}
 8012372:	bf00      	nop
 8012374:	bf00      	nop
 8012376:	e7fd      	b.n	8012374 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012378:	f001 fad8 	bl	801392c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801237c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801237e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012380:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012384:	2b00      	cmp	r3, #0
 8012386:	d01f      	beq.n	80123c8 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012388:	68b9      	ldr	r1, [r7, #8]
 801238a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801238c:	f000 f9c0 	bl	8012710 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012392:	1e5a      	subs	r2, r3, #1
 8012394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012396:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801239a:	691b      	ldr	r3, [r3, #16]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d00f      	beq.n	80123c0 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80123a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123a2:	3310      	adds	r3, #16
 80123a4:	4618      	mov	r0, r3
 80123a6:	f000 fed9 	bl	801315c <xTaskRemoveFromEventList>
 80123aa:	4603      	mov	r3, r0
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d007      	beq.n	80123c0 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80123b0:	4b3c      	ldr	r3, [pc, #240]	@ (80124a4 <xQueueReceive+0x1cc>)
 80123b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80123b6:	601a      	str	r2, [r3, #0]
 80123b8:	f3bf 8f4f 	dsb	sy
 80123bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80123c0:	f001 faea 	bl	8013998 <vPortExitCritical>
				return pdPASS;
 80123c4:	2301      	movs	r3, #1
 80123c6:	e069      	b.n	801249c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d103      	bne.n	80123d6 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80123ce:	f001 fae3 	bl	8013998 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80123d2:	2300      	movs	r3, #0
 80123d4:	e062      	b.n	801249c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80123d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d106      	bne.n	80123ea <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80123dc:	f107 0310 	add.w	r3, r7, #16
 80123e0:	4618      	mov	r0, r3
 80123e2:	f000 ff21 	bl	8013228 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80123e6:	2301      	movs	r3, #1
 80123e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80123ea:	f001 fad5 	bl	8013998 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80123ee:	f000 fc7d 	bl	8012cec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80123f2:	f001 fa9b 	bl	801392c <vPortEnterCritical>
 80123f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80123fc:	b25b      	sxtb	r3, r3
 80123fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012402:	d103      	bne.n	801240c <xQueueReceive+0x134>
 8012404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012406:	2200      	movs	r2, #0
 8012408:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801240c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801240e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012412:	b25b      	sxtb	r3, r3
 8012414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012418:	d103      	bne.n	8012422 <xQueueReceive+0x14a>
 801241a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801241c:	2200      	movs	r2, #0
 801241e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012422:	f001 fab9 	bl	8013998 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012426:	1d3a      	adds	r2, r7, #4
 8012428:	f107 0310 	add.w	r3, r7, #16
 801242c:	4611      	mov	r1, r2
 801242e:	4618      	mov	r0, r3
 8012430:	f000 ff10 	bl	8013254 <xTaskCheckForTimeOut>
 8012434:	4603      	mov	r3, r0
 8012436:	2b00      	cmp	r3, #0
 8012438:	d123      	bne.n	8012482 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801243a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801243c:	f000 f9e0 	bl	8012800 <prvIsQueueEmpty>
 8012440:	4603      	mov	r3, r0
 8012442:	2b00      	cmp	r3, #0
 8012444:	d017      	beq.n	8012476 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012448:	3324      	adds	r3, #36	@ 0x24
 801244a:	687a      	ldr	r2, [r7, #4]
 801244c:	4611      	mov	r1, r2
 801244e:	4618      	mov	r0, r3
 8012450:	f000 fe5c 	bl	801310c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012454:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012456:	f000 f981 	bl	801275c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801245a:	f000 fc55 	bl	8012d08 <xTaskResumeAll>
 801245e:	4603      	mov	r3, r0
 8012460:	2b00      	cmp	r3, #0
 8012462:	d189      	bne.n	8012378 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8012464:	4b0f      	ldr	r3, [pc, #60]	@ (80124a4 <xQueueReceive+0x1cc>)
 8012466:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801246a:	601a      	str	r2, [r3, #0]
 801246c:	f3bf 8f4f 	dsb	sy
 8012470:	f3bf 8f6f 	isb	sy
 8012474:	e780      	b.n	8012378 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012476:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012478:	f000 f970 	bl	801275c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801247c:	f000 fc44 	bl	8012d08 <xTaskResumeAll>
 8012480:	e77a      	b.n	8012378 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012482:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012484:	f000 f96a 	bl	801275c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012488:	f000 fc3e 	bl	8012d08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801248c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801248e:	f000 f9b7 	bl	8012800 <prvIsQueueEmpty>
 8012492:	4603      	mov	r3, r0
 8012494:	2b00      	cmp	r3, #0
 8012496:	f43f af6f 	beq.w	8012378 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801249a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801249c:	4618      	mov	r0, r3
 801249e:	3730      	adds	r7, #48	@ 0x30
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}
 80124a4:	e000ed04 	.word	0xe000ed04

080124a8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b08e      	sub	sp, #56	@ 0x38
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	60f8      	str	r0, [r7, #12]
 80124b0:	60b9      	str	r1, [r7, #8]
 80124b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80124b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d10d      	bne.n	80124da <xQueueReceiveFromISR+0x32>
	__asm volatile
 80124be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124c2:	b672      	cpsid	i
 80124c4:	f383 8811 	msr	BASEPRI, r3
 80124c8:	f3bf 8f6f 	isb	sy
 80124cc:	f3bf 8f4f 	dsb	sy
 80124d0:	b662      	cpsie	i
 80124d2:	623b      	str	r3, [r7, #32]
}
 80124d4:	bf00      	nop
 80124d6:	bf00      	nop
 80124d8:	e7fd      	b.n	80124d6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80124da:	68bb      	ldr	r3, [r7, #8]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d103      	bne.n	80124e8 <xQueueReceiveFromISR+0x40>
 80124e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d101      	bne.n	80124ec <xQueueReceiveFromISR+0x44>
 80124e8:	2301      	movs	r3, #1
 80124ea:	e000      	b.n	80124ee <xQueueReceiveFromISR+0x46>
 80124ec:	2300      	movs	r3, #0
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d10d      	bne.n	801250e <xQueueReceiveFromISR+0x66>
	__asm volatile
 80124f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124f6:	b672      	cpsid	i
 80124f8:	f383 8811 	msr	BASEPRI, r3
 80124fc:	f3bf 8f6f 	isb	sy
 8012500:	f3bf 8f4f 	dsb	sy
 8012504:	b662      	cpsie	i
 8012506:	61fb      	str	r3, [r7, #28]
}
 8012508:	bf00      	nop
 801250a:	bf00      	nop
 801250c:	e7fd      	b.n	801250a <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801250e:	f001 faf5 	bl	8013afc <vPortValidateInterruptPriority>
	__asm volatile
 8012512:	f3ef 8211 	mrs	r2, BASEPRI
 8012516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801251a:	b672      	cpsid	i
 801251c:	f383 8811 	msr	BASEPRI, r3
 8012520:	f3bf 8f6f 	isb	sy
 8012524:	f3bf 8f4f 	dsb	sy
 8012528:	b662      	cpsie	i
 801252a:	61ba      	str	r2, [r7, #24]
 801252c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801252e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012530:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012536:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801253a:	2b00      	cmp	r3, #0
 801253c:	d02f      	beq.n	801259e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801253e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012540:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012544:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012548:	68b9      	ldr	r1, [r7, #8]
 801254a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801254c:	f000 f8e0 	bl	8012710 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012552:	1e5a      	subs	r2, r3, #1
 8012554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012556:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012558:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801255c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012560:	d112      	bne.n	8012588 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012564:	691b      	ldr	r3, [r3, #16]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d016      	beq.n	8012598 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801256a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801256c:	3310      	adds	r3, #16
 801256e:	4618      	mov	r0, r3
 8012570:	f000 fdf4 	bl	801315c <xTaskRemoveFromEventList>
 8012574:	4603      	mov	r3, r0
 8012576:	2b00      	cmp	r3, #0
 8012578:	d00e      	beq.n	8012598 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	2b00      	cmp	r3, #0
 801257e:	d00b      	beq.n	8012598 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	2201      	movs	r2, #1
 8012584:	601a      	str	r2, [r3, #0]
 8012586:	e007      	b.n	8012598 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012588:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801258c:	3301      	adds	r3, #1
 801258e:	b2db      	uxtb	r3, r3
 8012590:	b25a      	sxtb	r2, r3
 8012592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012594:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8012598:	2301      	movs	r3, #1
 801259a:	637b      	str	r3, [r7, #52]	@ 0x34
 801259c:	e001      	b.n	80125a2 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 801259e:	2300      	movs	r3, #0
 80125a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80125a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80125a6:	693b      	ldr	r3, [r7, #16]
 80125a8:	f383 8811 	msr	BASEPRI, r3
}
 80125ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80125ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80125b0:	4618      	mov	r0, r3
 80125b2:	3738      	adds	r7, #56	@ 0x38
 80125b4:	46bd      	mov	sp, r7
 80125b6:	bd80      	pop	{r7, pc}

080125b8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b084      	sub	sp, #16
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d10d      	bne.n	80125e2 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 80125c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125ca:	b672      	cpsid	i
 80125cc:	f383 8811 	msr	BASEPRI, r3
 80125d0:	f3bf 8f6f 	isb	sy
 80125d4:	f3bf 8f4f 	dsb	sy
 80125d8:	b662      	cpsie	i
 80125da:	60bb      	str	r3, [r7, #8]
}
 80125dc:	bf00      	nop
 80125de:	bf00      	nop
 80125e0:	e7fd      	b.n	80125de <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80125e2:	f001 f9a3 	bl	801392c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80125ea:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80125ec:	f001 f9d4 	bl	8013998 <vPortExitCritical>

	return uxReturn;
 80125f0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80125f2:	4618      	mov	r0, r3
 80125f4:	3710      	adds	r7, #16
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bd80      	pop	{r7, pc}

080125fa <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80125fa:	b480      	push	{r7}
 80125fc:	b087      	sub	sp, #28
 80125fe:	af00      	add	r7, sp, #0
 8012600:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d10d      	bne.n	8012628 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 801260c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012610:	b672      	cpsid	i
 8012612:	f383 8811 	msr	BASEPRI, r3
 8012616:	f3bf 8f6f 	isb	sy
 801261a:	f3bf 8f4f 	dsb	sy
 801261e:	b662      	cpsie	i
 8012620:	60fb      	str	r3, [r7, #12]
}
 8012622:	bf00      	nop
 8012624:	bf00      	nop
 8012626:	e7fd      	b.n	8012624 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8012628:	697b      	ldr	r3, [r7, #20]
 801262a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801262c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 801262e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8012630:	4618      	mov	r0, r3
 8012632:	371c      	adds	r7, #28
 8012634:	46bd      	mov	sp, r7
 8012636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263a:	4770      	bx	lr

0801263c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b086      	sub	sp, #24
 8012640:	af00      	add	r7, sp, #0
 8012642:	60f8      	str	r0, [r7, #12]
 8012644:	60b9      	str	r1, [r7, #8]
 8012646:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012648:	2300      	movs	r3, #0
 801264a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012650:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012656:	2b00      	cmp	r3, #0
 8012658:	d10d      	bne.n	8012676 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d14d      	bne.n	80126fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	689b      	ldr	r3, [r3, #8]
 8012666:	4618      	mov	r0, r3
 8012668:	f000 ff60 	bl	801352c <xTaskPriorityDisinherit>
 801266c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	2200      	movs	r2, #0
 8012672:	609a      	str	r2, [r3, #8]
 8012674:	e043      	b.n	80126fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d119      	bne.n	80126b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	6858      	ldr	r0, [r3, #4]
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012684:	461a      	mov	r2, r3
 8012686:	68b9      	ldr	r1, [r7, #8]
 8012688:	f002 f902 	bl	8014890 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	685a      	ldr	r2, [r3, #4]
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012694:	441a      	add	r2, r3
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	685a      	ldr	r2, [r3, #4]
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	689b      	ldr	r3, [r3, #8]
 80126a2:	429a      	cmp	r2, r3
 80126a4:	d32b      	bcc.n	80126fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	681a      	ldr	r2, [r3, #0]
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	605a      	str	r2, [r3, #4]
 80126ae:	e026      	b.n	80126fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	68d8      	ldr	r0, [r3, #12]
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80126b8:	461a      	mov	r2, r3
 80126ba:	68b9      	ldr	r1, [r7, #8]
 80126bc:	f002 f8e8 	bl	8014890 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	68da      	ldr	r2, [r3, #12]
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80126c8:	425b      	negs	r3, r3
 80126ca:	441a      	add	r2, r3
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	68da      	ldr	r2, [r3, #12]
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	429a      	cmp	r2, r3
 80126da:	d207      	bcs.n	80126ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	689a      	ldr	r2, [r3, #8]
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80126e4:	425b      	negs	r3, r3
 80126e6:	441a      	add	r2, r3
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	2b02      	cmp	r3, #2
 80126f0:	d105      	bne.n	80126fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80126f2:	693b      	ldr	r3, [r7, #16]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d002      	beq.n	80126fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80126f8:	693b      	ldr	r3, [r7, #16]
 80126fa:	3b01      	subs	r3, #1
 80126fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80126fe:	693b      	ldr	r3, [r7, #16]
 8012700:	1c5a      	adds	r2, r3, #1
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8012706:	697b      	ldr	r3, [r7, #20]
}
 8012708:	4618      	mov	r0, r3
 801270a:	3718      	adds	r7, #24
 801270c:	46bd      	mov	sp, r7
 801270e:	bd80      	pop	{r7, pc}

08012710 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b082      	sub	sp, #8
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
 8012718:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801271e:	2b00      	cmp	r3, #0
 8012720:	d018      	beq.n	8012754 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	68da      	ldr	r2, [r3, #12]
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801272a:	441a      	add	r2, r3
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	68da      	ldr	r2, [r3, #12]
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	689b      	ldr	r3, [r3, #8]
 8012738:	429a      	cmp	r2, r3
 801273a:	d303      	bcc.n	8012744 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	681a      	ldr	r2, [r3, #0]
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	68d9      	ldr	r1, [r3, #12]
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801274c:	461a      	mov	r2, r3
 801274e:	6838      	ldr	r0, [r7, #0]
 8012750:	f002 f89e 	bl	8014890 <memcpy>
	}
}
 8012754:	bf00      	nop
 8012756:	3708      	adds	r7, #8
 8012758:	46bd      	mov	sp, r7
 801275a:	bd80      	pop	{r7, pc}

0801275c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801275c:	b580      	push	{r7, lr}
 801275e:	b084      	sub	sp, #16
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012764:	f001 f8e2 	bl	801392c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801276e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012770:	e011      	b.n	8012796 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012776:	2b00      	cmp	r3, #0
 8012778:	d012      	beq.n	80127a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	3324      	adds	r3, #36	@ 0x24
 801277e:	4618      	mov	r0, r3
 8012780:	f000 fcec 	bl	801315c <xTaskRemoveFromEventList>
 8012784:	4603      	mov	r3, r0
 8012786:	2b00      	cmp	r3, #0
 8012788:	d001      	beq.n	801278e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801278a:	f000 fdcb 	bl	8013324 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801278e:	7bfb      	ldrb	r3, [r7, #15]
 8012790:	3b01      	subs	r3, #1
 8012792:	b2db      	uxtb	r3, r3
 8012794:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801279a:	2b00      	cmp	r3, #0
 801279c:	dce9      	bgt.n	8012772 <prvUnlockQueue+0x16>
 801279e:	e000      	b.n	80127a2 <prvUnlockQueue+0x46>
					break;
 80127a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	22ff      	movs	r2, #255	@ 0xff
 80127a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80127aa:	f001 f8f5 	bl	8013998 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80127ae:	f001 f8bd 	bl	801392c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80127b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80127ba:	e011      	b.n	80127e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	691b      	ldr	r3, [r3, #16]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d012      	beq.n	80127ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	3310      	adds	r3, #16
 80127c8:	4618      	mov	r0, r3
 80127ca:	f000 fcc7 	bl	801315c <xTaskRemoveFromEventList>
 80127ce:	4603      	mov	r3, r0
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d001      	beq.n	80127d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80127d4:	f000 fda6 	bl	8013324 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80127d8:	7bbb      	ldrb	r3, [r7, #14]
 80127da:	3b01      	subs	r3, #1
 80127dc:	b2db      	uxtb	r3, r3
 80127de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80127e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	dce9      	bgt.n	80127bc <prvUnlockQueue+0x60>
 80127e8:	e000      	b.n	80127ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80127ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	22ff      	movs	r2, #255	@ 0xff
 80127f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80127f4:	f001 f8d0 	bl	8013998 <vPortExitCritical>
}
 80127f8:	bf00      	nop
 80127fa:	3710      	adds	r7, #16
 80127fc:	46bd      	mov	sp, r7
 80127fe:	bd80      	pop	{r7, pc}

08012800 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012800:	b580      	push	{r7, lr}
 8012802:	b084      	sub	sp, #16
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012808:	f001 f890 	bl	801392c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012810:	2b00      	cmp	r3, #0
 8012812:	d102      	bne.n	801281a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012814:	2301      	movs	r3, #1
 8012816:	60fb      	str	r3, [r7, #12]
 8012818:	e001      	b.n	801281e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801281a:	2300      	movs	r3, #0
 801281c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801281e:	f001 f8bb 	bl	8013998 <vPortExitCritical>

	return xReturn;
 8012822:	68fb      	ldr	r3, [r7, #12]
}
 8012824:	4618      	mov	r0, r3
 8012826:	3710      	adds	r7, #16
 8012828:	46bd      	mov	sp, r7
 801282a:	bd80      	pop	{r7, pc}

0801282c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801282c:	b580      	push	{r7, lr}
 801282e:	b084      	sub	sp, #16
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012834:	f001 f87a 	bl	801392c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012840:	429a      	cmp	r2, r3
 8012842:	d102      	bne.n	801284a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012844:	2301      	movs	r3, #1
 8012846:	60fb      	str	r3, [r7, #12]
 8012848:	e001      	b.n	801284e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801284a:	2300      	movs	r3, #0
 801284c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801284e:	f001 f8a3 	bl	8013998 <vPortExitCritical>

	return xReturn;
 8012852:	68fb      	ldr	r3, [r7, #12]
}
 8012854:	4618      	mov	r0, r3
 8012856:	3710      	adds	r7, #16
 8012858:	46bd      	mov	sp, r7
 801285a:	bd80      	pop	{r7, pc}

0801285c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801285c:	b580      	push	{r7, lr}
 801285e:	b08e      	sub	sp, #56	@ 0x38
 8012860:	af04      	add	r7, sp, #16
 8012862:	60f8      	str	r0, [r7, #12]
 8012864:	60b9      	str	r1, [r7, #8]
 8012866:	607a      	str	r2, [r7, #4]
 8012868:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801286a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801286c:	2b00      	cmp	r3, #0
 801286e:	d10d      	bne.n	801288c <xTaskCreateStatic+0x30>
	__asm volatile
 8012870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012874:	b672      	cpsid	i
 8012876:	f383 8811 	msr	BASEPRI, r3
 801287a:	f3bf 8f6f 	isb	sy
 801287e:	f3bf 8f4f 	dsb	sy
 8012882:	b662      	cpsie	i
 8012884:	623b      	str	r3, [r7, #32]
}
 8012886:	bf00      	nop
 8012888:	bf00      	nop
 801288a:	e7fd      	b.n	8012888 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801288c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801288e:	2b00      	cmp	r3, #0
 8012890:	d10d      	bne.n	80128ae <xTaskCreateStatic+0x52>
	__asm volatile
 8012892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012896:	b672      	cpsid	i
 8012898:	f383 8811 	msr	BASEPRI, r3
 801289c:	f3bf 8f6f 	isb	sy
 80128a0:	f3bf 8f4f 	dsb	sy
 80128a4:	b662      	cpsie	i
 80128a6:	61fb      	str	r3, [r7, #28]
}
 80128a8:	bf00      	nop
 80128aa:	bf00      	nop
 80128ac:	e7fd      	b.n	80128aa <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80128ae:	2358      	movs	r3, #88	@ 0x58
 80128b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80128b2:	693b      	ldr	r3, [r7, #16]
 80128b4:	2b58      	cmp	r3, #88	@ 0x58
 80128b6:	d00d      	beq.n	80128d4 <xTaskCreateStatic+0x78>
	__asm volatile
 80128b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128bc:	b672      	cpsid	i
 80128be:	f383 8811 	msr	BASEPRI, r3
 80128c2:	f3bf 8f6f 	isb	sy
 80128c6:	f3bf 8f4f 	dsb	sy
 80128ca:	b662      	cpsie	i
 80128cc:	61bb      	str	r3, [r7, #24]
}
 80128ce:	bf00      	nop
 80128d0:	bf00      	nop
 80128d2:	e7fd      	b.n	80128d0 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80128d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80128d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d01e      	beq.n	801291a <xTaskCreateStatic+0xbe>
 80128dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d01b      	beq.n	801291a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80128e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128e4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80128e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80128ea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80128ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128ee:	2202      	movs	r2, #2
 80128f0:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80128f4:	2300      	movs	r3, #0
 80128f6:	9303      	str	r3, [sp, #12]
 80128f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128fa:	9302      	str	r3, [sp, #8]
 80128fc:	f107 0314 	add.w	r3, r7, #20
 8012900:	9301      	str	r3, [sp, #4]
 8012902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012904:	9300      	str	r3, [sp, #0]
 8012906:	683b      	ldr	r3, [r7, #0]
 8012908:	687a      	ldr	r2, [r7, #4]
 801290a:	68b9      	ldr	r1, [r7, #8]
 801290c:	68f8      	ldr	r0, [r7, #12]
 801290e:	f000 f850 	bl	80129b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012912:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012914:	f000 f8e2 	bl	8012adc <prvAddNewTaskToReadyList>
 8012918:	e001      	b.n	801291e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 801291a:	2300      	movs	r3, #0
 801291c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801291e:	697b      	ldr	r3, [r7, #20]
	}
 8012920:	4618      	mov	r0, r3
 8012922:	3728      	adds	r7, #40	@ 0x28
 8012924:	46bd      	mov	sp, r7
 8012926:	bd80      	pop	{r7, pc}

08012928 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012928:	b580      	push	{r7, lr}
 801292a:	b08c      	sub	sp, #48	@ 0x30
 801292c:	af04      	add	r7, sp, #16
 801292e:	60f8      	str	r0, [r7, #12]
 8012930:	60b9      	str	r1, [r7, #8]
 8012932:	603b      	str	r3, [r7, #0]
 8012934:	4613      	mov	r3, r2
 8012936:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012938:	88fb      	ldrh	r3, [r7, #6]
 801293a:	009b      	lsls	r3, r3, #2
 801293c:	4618      	mov	r0, r3
 801293e:	f001 f923 	bl	8013b88 <pvPortMalloc>
 8012942:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012944:	697b      	ldr	r3, [r7, #20]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d00e      	beq.n	8012968 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801294a:	2058      	movs	r0, #88	@ 0x58
 801294c:	f001 f91c 	bl	8013b88 <pvPortMalloc>
 8012950:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012952:	69fb      	ldr	r3, [r7, #28]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d003      	beq.n	8012960 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012958:	69fb      	ldr	r3, [r7, #28]
 801295a:	697a      	ldr	r2, [r7, #20]
 801295c:	631a      	str	r2, [r3, #48]	@ 0x30
 801295e:	e005      	b.n	801296c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012960:	6978      	ldr	r0, [r7, #20]
 8012962:	f001 f9e3 	bl	8013d2c <vPortFree>
 8012966:	e001      	b.n	801296c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012968:	2300      	movs	r3, #0
 801296a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801296c:	69fb      	ldr	r3, [r7, #28]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d017      	beq.n	80129a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012972:	69fb      	ldr	r3, [r7, #28]
 8012974:	2200      	movs	r2, #0
 8012976:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801297a:	88fa      	ldrh	r2, [r7, #6]
 801297c:	2300      	movs	r3, #0
 801297e:	9303      	str	r3, [sp, #12]
 8012980:	69fb      	ldr	r3, [r7, #28]
 8012982:	9302      	str	r3, [sp, #8]
 8012984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012986:	9301      	str	r3, [sp, #4]
 8012988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801298a:	9300      	str	r3, [sp, #0]
 801298c:	683b      	ldr	r3, [r7, #0]
 801298e:	68b9      	ldr	r1, [r7, #8]
 8012990:	68f8      	ldr	r0, [r7, #12]
 8012992:	f000 f80e 	bl	80129b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012996:	69f8      	ldr	r0, [r7, #28]
 8012998:	f000 f8a0 	bl	8012adc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801299c:	2301      	movs	r3, #1
 801299e:	61bb      	str	r3, [r7, #24]
 80129a0:	e002      	b.n	80129a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80129a2:	f04f 33ff 	mov.w	r3, #4294967295
 80129a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80129a8:	69bb      	ldr	r3, [r7, #24]
	}
 80129aa:	4618      	mov	r0, r3
 80129ac:	3720      	adds	r7, #32
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd80      	pop	{r7, pc}

080129b2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80129b2:	b580      	push	{r7, lr}
 80129b4:	b088      	sub	sp, #32
 80129b6:	af00      	add	r7, sp, #0
 80129b8:	60f8      	str	r0, [r7, #12]
 80129ba:	60b9      	str	r1, [r7, #8]
 80129bc:	607a      	str	r2, [r7, #4]
 80129be:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80129c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129c2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	009b      	lsls	r3, r3, #2
 80129c8:	461a      	mov	r2, r3
 80129ca:	21a5      	movs	r1, #165	@ 0xa5
 80129cc:	f001 fef2 	bl	80147b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80129d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80129d4:	6879      	ldr	r1, [r7, #4]
 80129d6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80129da:	440b      	add	r3, r1
 80129dc:	009b      	lsls	r3, r3, #2
 80129de:	4413      	add	r3, r2
 80129e0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80129e2:	69bb      	ldr	r3, [r7, #24]
 80129e4:	f023 0307 	bic.w	r3, r3, #7
 80129e8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80129ea:	69bb      	ldr	r3, [r7, #24]
 80129ec:	f003 0307 	and.w	r3, r3, #7
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d00d      	beq.n	8012a10 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80129f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129f8:	b672      	cpsid	i
 80129fa:	f383 8811 	msr	BASEPRI, r3
 80129fe:	f3bf 8f6f 	isb	sy
 8012a02:	f3bf 8f4f 	dsb	sy
 8012a06:	b662      	cpsie	i
 8012a08:	617b      	str	r3, [r7, #20]
}
 8012a0a:	bf00      	nop
 8012a0c:	bf00      	nop
 8012a0e:	e7fd      	b.n	8012a0c <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012a10:	68bb      	ldr	r3, [r7, #8]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d01f      	beq.n	8012a56 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012a16:	2300      	movs	r3, #0
 8012a18:	61fb      	str	r3, [r7, #28]
 8012a1a:	e012      	b.n	8012a42 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012a1c:	68ba      	ldr	r2, [r7, #8]
 8012a1e:	69fb      	ldr	r3, [r7, #28]
 8012a20:	4413      	add	r3, r2
 8012a22:	7819      	ldrb	r1, [r3, #0]
 8012a24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012a26:	69fb      	ldr	r3, [r7, #28]
 8012a28:	4413      	add	r3, r2
 8012a2a:	3334      	adds	r3, #52	@ 0x34
 8012a2c:	460a      	mov	r2, r1
 8012a2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012a30:	68ba      	ldr	r2, [r7, #8]
 8012a32:	69fb      	ldr	r3, [r7, #28]
 8012a34:	4413      	add	r3, r2
 8012a36:	781b      	ldrb	r3, [r3, #0]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d006      	beq.n	8012a4a <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012a3c:	69fb      	ldr	r3, [r7, #28]
 8012a3e:	3301      	adds	r3, #1
 8012a40:	61fb      	str	r3, [r7, #28]
 8012a42:	69fb      	ldr	r3, [r7, #28]
 8012a44:	2b0f      	cmp	r3, #15
 8012a46:	d9e9      	bls.n	8012a1c <prvInitialiseNewTask+0x6a>
 8012a48:	e000      	b.n	8012a4c <prvInitialiseNewTask+0x9a>
			{
				break;
 8012a4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a4e:	2200      	movs	r2, #0
 8012a50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012a54:	e003      	b.n	8012a5e <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a58:	2200      	movs	r2, #0
 8012a5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a60:	2b06      	cmp	r3, #6
 8012a62:	d901      	bls.n	8012a68 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012a64:	2306      	movs	r3, #6
 8012a66:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012a6c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012a72:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a76:	2200      	movs	r2, #0
 8012a78:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a7c:	3304      	adds	r3, #4
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f7ff f892 	bl	8011ba8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a86:	3318      	adds	r3, #24
 8012a88:	4618      	mov	r0, r3
 8012a8a:	f7ff f88d 	bl	8011ba8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012a92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a96:	f1c3 0207 	rsb	r2, r3, #7
 8012a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012aa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012aa2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8012aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012aac:	2200      	movs	r2, #0
 8012aae:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012ab8:	683a      	ldr	r2, [r7, #0]
 8012aba:	68f9      	ldr	r1, [r7, #12]
 8012abc:	69b8      	ldr	r0, [r7, #24]
 8012abe:	f000 fe27 	bl	8013710 <pxPortInitialiseStack>
 8012ac2:	4602      	mov	r2, r0
 8012ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ac6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d002      	beq.n	8012ad4 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ad0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012ad2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012ad4:	bf00      	nop
 8012ad6:	3720      	adds	r7, #32
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	bd80      	pop	{r7, pc}

08012adc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b082      	sub	sp, #8
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012ae4:	f000 ff22 	bl	801392c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8012b94 <prvAddNewTaskToReadyList+0xb8>)
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	3301      	adds	r3, #1
 8012aee:	4a29      	ldr	r2, [pc, #164]	@ (8012b94 <prvAddNewTaskToReadyList+0xb8>)
 8012af0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012af2:	4b29      	ldr	r3, [pc, #164]	@ (8012b98 <prvAddNewTaskToReadyList+0xbc>)
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d109      	bne.n	8012b0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012afa:	4a27      	ldr	r2, [pc, #156]	@ (8012b98 <prvAddNewTaskToReadyList+0xbc>)
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012b00:	4b24      	ldr	r3, [pc, #144]	@ (8012b94 <prvAddNewTaskToReadyList+0xb8>)
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	2b01      	cmp	r3, #1
 8012b06:	d110      	bne.n	8012b2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012b08:	f000 fc32 	bl	8013370 <prvInitialiseTaskLists>
 8012b0c:	e00d      	b.n	8012b2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012b0e:	4b23      	ldr	r3, [pc, #140]	@ (8012b9c <prvAddNewTaskToReadyList+0xc0>)
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d109      	bne.n	8012b2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012b16:	4b20      	ldr	r3, [pc, #128]	@ (8012b98 <prvAddNewTaskToReadyList+0xbc>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b20:	429a      	cmp	r2, r3
 8012b22:	d802      	bhi.n	8012b2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012b24:	4a1c      	ldr	r2, [pc, #112]	@ (8012b98 <prvAddNewTaskToReadyList+0xbc>)
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8012ba0 <prvAddNewTaskToReadyList+0xc4>)
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	3301      	adds	r3, #1
 8012b30:	4a1b      	ldr	r2, [pc, #108]	@ (8012ba0 <prvAddNewTaskToReadyList+0xc4>)
 8012b32:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b38:	2201      	movs	r2, #1
 8012b3a:	409a      	lsls	r2, r3
 8012b3c:	4b19      	ldr	r3, [pc, #100]	@ (8012ba4 <prvAddNewTaskToReadyList+0xc8>)
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	4313      	orrs	r3, r2
 8012b42:	4a18      	ldr	r2, [pc, #96]	@ (8012ba4 <prvAddNewTaskToReadyList+0xc8>)
 8012b44:	6013      	str	r3, [r2, #0]
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012b4a:	4613      	mov	r3, r2
 8012b4c:	009b      	lsls	r3, r3, #2
 8012b4e:	4413      	add	r3, r2
 8012b50:	009b      	lsls	r3, r3, #2
 8012b52:	4a15      	ldr	r2, [pc, #84]	@ (8012ba8 <prvAddNewTaskToReadyList+0xcc>)
 8012b54:	441a      	add	r2, r3
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	3304      	adds	r3, #4
 8012b5a:	4619      	mov	r1, r3
 8012b5c:	4610      	mov	r0, r2
 8012b5e:	f7ff f830 	bl	8011bc2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012b62:	f000 ff19 	bl	8013998 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012b66:	4b0d      	ldr	r3, [pc, #52]	@ (8012b9c <prvAddNewTaskToReadyList+0xc0>)
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d00e      	beq.n	8012b8c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8012b98 <prvAddNewTaskToReadyList+0xbc>)
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b78:	429a      	cmp	r2, r3
 8012b7a:	d207      	bcs.n	8012b8c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8012bac <prvAddNewTaskToReadyList+0xd0>)
 8012b7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012b82:	601a      	str	r2, [r3, #0]
 8012b84:	f3bf 8f4f 	dsb	sy
 8012b88:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012b8c:	bf00      	nop
 8012b8e:	3708      	adds	r7, #8
 8012b90:	46bd      	mov	sp, r7
 8012b92:	bd80      	pop	{r7, pc}
 8012b94:	20000ff0 	.word	0x20000ff0
 8012b98:	20000ef0 	.word	0x20000ef0
 8012b9c:	20000ffc 	.word	0x20000ffc
 8012ba0:	2000100c 	.word	0x2000100c
 8012ba4:	20000ff8 	.word	0x20000ff8
 8012ba8:	20000ef4 	.word	0x20000ef4
 8012bac:	e000ed04 	.word	0xe000ed04

08012bb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b084      	sub	sp, #16
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012bb8:	2300      	movs	r3, #0
 8012bba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d01a      	beq.n	8012bf8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012bc2:	4b15      	ldr	r3, [pc, #84]	@ (8012c18 <vTaskDelay+0x68>)
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d00d      	beq.n	8012be6 <vTaskDelay+0x36>
	__asm volatile
 8012bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bce:	b672      	cpsid	i
 8012bd0:	f383 8811 	msr	BASEPRI, r3
 8012bd4:	f3bf 8f6f 	isb	sy
 8012bd8:	f3bf 8f4f 	dsb	sy
 8012bdc:	b662      	cpsie	i
 8012bde:	60bb      	str	r3, [r7, #8]
}
 8012be0:	bf00      	nop
 8012be2:	bf00      	nop
 8012be4:	e7fd      	b.n	8012be2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8012be6:	f000 f881 	bl	8012cec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012bea:	2100      	movs	r1, #0
 8012bec:	6878      	ldr	r0, [r7, #4]
 8012bee:	f000 fd29 	bl	8013644 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012bf2:	f000 f889 	bl	8012d08 <xTaskResumeAll>
 8012bf6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d107      	bne.n	8012c0e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8012bfe:	4b07      	ldr	r3, [pc, #28]	@ (8012c1c <vTaskDelay+0x6c>)
 8012c00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012c04:	601a      	str	r2, [r3, #0]
 8012c06:	f3bf 8f4f 	dsb	sy
 8012c0a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012c0e:	bf00      	nop
 8012c10:	3710      	adds	r7, #16
 8012c12:	46bd      	mov	sp, r7
 8012c14:	bd80      	pop	{r7, pc}
 8012c16:	bf00      	nop
 8012c18:	20001018 	.word	0x20001018
 8012c1c:	e000ed04 	.word	0xe000ed04

08012c20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b08a      	sub	sp, #40	@ 0x28
 8012c24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012c26:	2300      	movs	r3, #0
 8012c28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012c2e:	463a      	mov	r2, r7
 8012c30:	1d39      	adds	r1, r7, #4
 8012c32:	f107 0308 	add.w	r3, r7, #8
 8012c36:	4618      	mov	r0, r3
 8012c38:	f7ed fcf2 	bl	8000620 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012c3c:	6839      	ldr	r1, [r7, #0]
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	68ba      	ldr	r2, [r7, #8]
 8012c42:	9202      	str	r2, [sp, #8]
 8012c44:	9301      	str	r3, [sp, #4]
 8012c46:	2300      	movs	r3, #0
 8012c48:	9300      	str	r3, [sp, #0]
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	460a      	mov	r2, r1
 8012c4e:	4921      	ldr	r1, [pc, #132]	@ (8012cd4 <vTaskStartScheduler+0xb4>)
 8012c50:	4821      	ldr	r0, [pc, #132]	@ (8012cd8 <vTaskStartScheduler+0xb8>)
 8012c52:	f7ff fe03 	bl	801285c <xTaskCreateStatic>
 8012c56:	4603      	mov	r3, r0
 8012c58:	4a20      	ldr	r2, [pc, #128]	@ (8012cdc <vTaskStartScheduler+0xbc>)
 8012c5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8012cdc <vTaskStartScheduler+0xbc>)
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d002      	beq.n	8012c6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012c64:	2301      	movs	r3, #1
 8012c66:	617b      	str	r3, [r7, #20]
 8012c68:	e001      	b.n	8012c6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012c6e:	697b      	ldr	r3, [r7, #20]
 8012c70:	2b01      	cmp	r3, #1
 8012c72:	d118      	bne.n	8012ca6 <vTaskStartScheduler+0x86>
	__asm volatile
 8012c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c78:	b672      	cpsid	i
 8012c7a:	f383 8811 	msr	BASEPRI, r3
 8012c7e:	f3bf 8f6f 	isb	sy
 8012c82:	f3bf 8f4f 	dsb	sy
 8012c86:	b662      	cpsie	i
 8012c88:	613b      	str	r3, [r7, #16]
}
 8012c8a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012c8c:	4b14      	ldr	r3, [pc, #80]	@ (8012ce0 <vTaskStartScheduler+0xc0>)
 8012c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8012c92:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012c94:	4b13      	ldr	r3, [pc, #76]	@ (8012ce4 <vTaskStartScheduler+0xc4>)
 8012c96:	2201      	movs	r2, #1
 8012c98:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012c9a:	4b13      	ldr	r3, [pc, #76]	@ (8012ce8 <vTaskStartScheduler+0xc8>)
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012ca0:	f000 fdc6 	bl	8013830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012ca4:	e011      	b.n	8012cca <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012ca6:	697b      	ldr	r3, [r7, #20]
 8012ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cac:	d10d      	bne.n	8012cca <vTaskStartScheduler+0xaa>
	__asm volatile
 8012cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cb2:	b672      	cpsid	i
 8012cb4:	f383 8811 	msr	BASEPRI, r3
 8012cb8:	f3bf 8f6f 	isb	sy
 8012cbc:	f3bf 8f4f 	dsb	sy
 8012cc0:	b662      	cpsie	i
 8012cc2:	60fb      	str	r3, [r7, #12]
}
 8012cc4:	bf00      	nop
 8012cc6:	bf00      	nop
 8012cc8:	e7fd      	b.n	8012cc6 <vTaskStartScheduler+0xa6>
}
 8012cca:	bf00      	nop
 8012ccc:	3718      	adds	r7, #24
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	bd80      	pop	{r7, pc}
 8012cd2:	bf00      	nop
 8012cd4:	080155a4 	.word	0x080155a4
 8012cd8:	0801333d 	.word	0x0801333d
 8012cdc:	20001014 	.word	0x20001014
 8012ce0:	20001010 	.word	0x20001010
 8012ce4:	20000ffc 	.word	0x20000ffc
 8012ce8:	20000ff4 	.word	0x20000ff4

08012cec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012cec:	b480      	push	{r7}
 8012cee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012cf0:	4b04      	ldr	r3, [pc, #16]	@ (8012d04 <vTaskSuspendAll+0x18>)
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	3301      	adds	r3, #1
 8012cf6:	4a03      	ldr	r2, [pc, #12]	@ (8012d04 <vTaskSuspendAll+0x18>)
 8012cf8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8012cfa:	bf00      	nop
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d02:	4770      	bx	lr
 8012d04:	20001018 	.word	0x20001018

08012d08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b084      	sub	sp, #16
 8012d0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012d0e:	2300      	movs	r3, #0
 8012d10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012d12:	2300      	movs	r3, #0
 8012d14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012d16:	4b43      	ldr	r3, [pc, #268]	@ (8012e24 <xTaskResumeAll+0x11c>)
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d10d      	bne.n	8012d3a <xTaskResumeAll+0x32>
	__asm volatile
 8012d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d22:	b672      	cpsid	i
 8012d24:	f383 8811 	msr	BASEPRI, r3
 8012d28:	f3bf 8f6f 	isb	sy
 8012d2c:	f3bf 8f4f 	dsb	sy
 8012d30:	b662      	cpsie	i
 8012d32:	603b      	str	r3, [r7, #0]
}
 8012d34:	bf00      	nop
 8012d36:	bf00      	nop
 8012d38:	e7fd      	b.n	8012d36 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012d3a:	f000 fdf7 	bl	801392c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012d3e:	4b39      	ldr	r3, [pc, #228]	@ (8012e24 <xTaskResumeAll+0x11c>)
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	3b01      	subs	r3, #1
 8012d44:	4a37      	ldr	r2, [pc, #220]	@ (8012e24 <xTaskResumeAll+0x11c>)
 8012d46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012d48:	4b36      	ldr	r3, [pc, #216]	@ (8012e24 <xTaskResumeAll+0x11c>)
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d161      	bne.n	8012e14 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012d50:	4b35      	ldr	r3, [pc, #212]	@ (8012e28 <xTaskResumeAll+0x120>)
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d05d      	beq.n	8012e14 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012d58:	e02e      	b.n	8012db8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d5a:	4b34      	ldr	r3, [pc, #208]	@ (8012e2c <xTaskResumeAll+0x124>)
 8012d5c:	68db      	ldr	r3, [r3, #12]
 8012d5e:	68db      	ldr	r3, [r3, #12]
 8012d60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	3318      	adds	r3, #24
 8012d66:	4618      	mov	r0, r3
 8012d68:	f7fe ff88 	bl	8011c7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	3304      	adds	r3, #4
 8012d70:	4618      	mov	r0, r3
 8012d72:	f7fe ff83 	bl	8011c7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d7a:	2201      	movs	r2, #1
 8012d7c:	409a      	lsls	r2, r3
 8012d7e:	4b2c      	ldr	r3, [pc, #176]	@ (8012e30 <xTaskResumeAll+0x128>)
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	4313      	orrs	r3, r2
 8012d84:	4a2a      	ldr	r2, [pc, #168]	@ (8012e30 <xTaskResumeAll+0x128>)
 8012d86:	6013      	str	r3, [r2, #0]
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012d8c:	4613      	mov	r3, r2
 8012d8e:	009b      	lsls	r3, r3, #2
 8012d90:	4413      	add	r3, r2
 8012d92:	009b      	lsls	r3, r3, #2
 8012d94:	4a27      	ldr	r2, [pc, #156]	@ (8012e34 <xTaskResumeAll+0x12c>)
 8012d96:	441a      	add	r2, r3
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	3304      	adds	r3, #4
 8012d9c:	4619      	mov	r1, r3
 8012d9e:	4610      	mov	r0, r2
 8012da0:	f7fe ff0f 	bl	8011bc2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012da8:	4b23      	ldr	r3, [pc, #140]	@ (8012e38 <xTaskResumeAll+0x130>)
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012dae:	429a      	cmp	r2, r3
 8012db0:	d302      	bcc.n	8012db8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8012db2:	4b22      	ldr	r3, [pc, #136]	@ (8012e3c <xTaskResumeAll+0x134>)
 8012db4:	2201      	movs	r2, #1
 8012db6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012db8:	4b1c      	ldr	r3, [pc, #112]	@ (8012e2c <xTaskResumeAll+0x124>)
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d1cc      	bne.n	8012d5a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d001      	beq.n	8012dca <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012dc6:	f000 fb73 	bl	80134b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012dca:	4b1d      	ldr	r3, [pc, #116]	@ (8012e40 <xTaskResumeAll+0x138>)
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d010      	beq.n	8012df8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012dd6:	f000 f859 	bl	8012e8c <xTaskIncrementTick>
 8012dda:	4603      	mov	r3, r0
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d002      	beq.n	8012de6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8012de0:	4b16      	ldr	r3, [pc, #88]	@ (8012e3c <xTaskResumeAll+0x134>)
 8012de2:	2201      	movs	r2, #1
 8012de4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	3b01      	subs	r3, #1
 8012dea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d1f1      	bne.n	8012dd6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8012df2:	4b13      	ldr	r3, [pc, #76]	@ (8012e40 <xTaskResumeAll+0x138>)
 8012df4:	2200      	movs	r2, #0
 8012df6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012df8:	4b10      	ldr	r3, [pc, #64]	@ (8012e3c <xTaskResumeAll+0x134>)
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d009      	beq.n	8012e14 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012e00:	2301      	movs	r3, #1
 8012e02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012e04:	4b0f      	ldr	r3, [pc, #60]	@ (8012e44 <xTaskResumeAll+0x13c>)
 8012e06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012e0a:	601a      	str	r2, [r3, #0]
 8012e0c:	f3bf 8f4f 	dsb	sy
 8012e10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012e14:	f000 fdc0 	bl	8013998 <vPortExitCritical>

	return xAlreadyYielded;
 8012e18:	68bb      	ldr	r3, [r7, #8]
}
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	3710      	adds	r7, #16
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	bd80      	pop	{r7, pc}
 8012e22:	bf00      	nop
 8012e24:	20001018 	.word	0x20001018
 8012e28:	20000ff0 	.word	0x20000ff0
 8012e2c:	20000fb0 	.word	0x20000fb0
 8012e30:	20000ff8 	.word	0x20000ff8
 8012e34:	20000ef4 	.word	0x20000ef4
 8012e38:	20000ef0 	.word	0x20000ef0
 8012e3c:	20001004 	.word	0x20001004
 8012e40:	20001000 	.word	0x20001000
 8012e44:	e000ed04 	.word	0xe000ed04

08012e48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012e48:	b480      	push	{r7}
 8012e4a:	b083      	sub	sp, #12
 8012e4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012e4e:	4b05      	ldr	r3, [pc, #20]	@ (8012e64 <xTaskGetTickCount+0x1c>)
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012e54:	687b      	ldr	r3, [r7, #4]
}
 8012e56:	4618      	mov	r0, r3
 8012e58:	370c      	adds	r7, #12
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e60:	4770      	bx	lr
 8012e62:	bf00      	nop
 8012e64:	20000ff4 	.word	0x20000ff4

08012e68 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b082      	sub	sp, #8
 8012e6c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012e6e:	f000 fe45 	bl	8013afc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8012e72:	2300      	movs	r3, #0
 8012e74:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8012e76:	4b04      	ldr	r3, [pc, #16]	@ (8012e88 <xTaskGetTickCountFromISR+0x20>)
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012e7c:	683b      	ldr	r3, [r7, #0]
}
 8012e7e:	4618      	mov	r0, r3
 8012e80:	3708      	adds	r7, #8
 8012e82:	46bd      	mov	sp, r7
 8012e84:	bd80      	pop	{r7, pc}
 8012e86:	bf00      	nop
 8012e88:	20000ff4 	.word	0x20000ff4

08012e8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b086      	sub	sp, #24
 8012e90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012e92:	2300      	movs	r3, #0
 8012e94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012e96:	4b50      	ldr	r3, [pc, #320]	@ (8012fd8 <xTaskIncrementTick+0x14c>)
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	f040 808b 	bne.w	8012fb6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012ea0:	4b4e      	ldr	r3, [pc, #312]	@ (8012fdc <xTaskIncrementTick+0x150>)
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	3301      	adds	r3, #1
 8012ea6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012ea8:	4a4c      	ldr	r2, [pc, #304]	@ (8012fdc <xTaskIncrementTick+0x150>)
 8012eaa:	693b      	ldr	r3, [r7, #16]
 8012eac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012eae:	693b      	ldr	r3, [r7, #16]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d123      	bne.n	8012efc <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8012eb4:	4b4a      	ldr	r3, [pc, #296]	@ (8012fe0 <xTaskIncrementTick+0x154>)
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d00d      	beq.n	8012eda <xTaskIncrementTick+0x4e>
	__asm volatile
 8012ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ec2:	b672      	cpsid	i
 8012ec4:	f383 8811 	msr	BASEPRI, r3
 8012ec8:	f3bf 8f6f 	isb	sy
 8012ecc:	f3bf 8f4f 	dsb	sy
 8012ed0:	b662      	cpsie	i
 8012ed2:	603b      	str	r3, [r7, #0]
}
 8012ed4:	bf00      	nop
 8012ed6:	bf00      	nop
 8012ed8:	e7fd      	b.n	8012ed6 <xTaskIncrementTick+0x4a>
 8012eda:	4b41      	ldr	r3, [pc, #260]	@ (8012fe0 <xTaskIncrementTick+0x154>)
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	60fb      	str	r3, [r7, #12]
 8012ee0:	4b40      	ldr	r3, [pc, #256]	@ (8012fe4 <xTaskIncrementTick+0x158>)
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	4a3e      	ldr	r2, [pc, #248]	@ (8012fe0 <xTaskIncrementTick+0x154>)
 8012ee6:	6013      	str	r3, [r2, #0]
 8012ee8:	4a3e      	ldr	r2, [pc, #248]	@ (8012fe4 <xTaskIncrementTick+0x158>)
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	6013      	str	r3, [r2, #0]
 8012eee:	4b3e      	ldr	r3, [pc, #248]	@ (8012fe8 <xTaskIncrementTick+0x15c>)
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	3301      	adds	r3, #1
 8012ef4:	4a3c      	ldr	r2, [pc, #240]	@ (8012fe8 <xTaskIncrementTick+0x15c>)
 8012ef6:	6013      	str	r3, [r2, #0]
 8012ef8:	f000 fada 	bl	80134b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012efc:	4b3b      	ldr	r3, [pc, #236]	@ (8012fec <xTaskIncrementTick+0x160>)
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	693a      	ldr	r2, [r7, #16]
 8012f02:	429a      	cmp	r2, r3
 8012f04:	d348      	bcc.n	8012f98 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012f06:	4b36      	ldr	r3, [pc, #216]	@ (8012fe0 <xTaskIncrementTick+0x154>)
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d104      	bne.n	8012f1a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f10:	4b36      	ldr	r3, [pc, #216]	@ (8012fec <xTaskIncrementTick+0x160>)
 8012f12:	f04f 32ff 	mov.w	r2, #4294967295
 8012f16:	601a      	str	r2, [r3, #0]
					break;
 8012f18:	e03e      	b.n	8012f98 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012f1a:	4b31      	ldr	r3, [pc, #196]	@ (8012fe0 <xTaskIncrementTick+0x154>)
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	68db      	ldr	r3, [r3, #12]
 8012f20:	68db      	ldr	r3, [r3, #12]
 8012f22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012f24:	68bb      	ldr	r3, [r7, #8]
 8012f26:	685b      	ldr	r3, [r3, #4]
 8012f28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012f2a:	693a      	ldr	r2, [r7, #16]
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	429a      	cmp	r2, r3
 8012f30:	d203      	bcs.n	8012f3a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012f32:	4a2e      	ldr	r2, [pc, #184]	@ (8012fec <xTaskIncrementTick+0x160>)
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012f38:	e02e      	b.n	8012f98 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012f3a:	68bb      	ldr	r3, [r7, #8]
 8012f3c:	3304      	adds	r3, #4
 8012f3e:	4618      	mov	r0, r3
 8012f40:	f7fe fe9c 	bl	8011c7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012f44:	68bb      	ldr	r3, [r7, #8]
 8012f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d004      	beq.n	8012f56 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012f4c:	68bb      	ldr	r3, [r7, #8]
 8012f4e:	3318      	adds	r3, #24
 8012f50:	4618      	mov	r0, r3
 8012f52:	f7fe fe93 	bl	8011c7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012f56:	68bb      	ldr	r3, [r7, #8]
 8012f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f5a:	2201      	movs	r2, #1
 8012f5c:	409a      	lsls	r2, r3
 8012f5e:	4b24      	ldr	r3, [pc, #144]	@ (8012ff0 <xTaskIncrementTick+0x164>)
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	4313      	orrs	r3, r2
 8012f64:	4a22      	ldr	r2, [pc, #136]	@ (8012ff0 <xTaskIncrementTick+0x164>)
 8012f66:	6013      	str	r3, [r2, #0]
 8012f68:	68bb      	ldr	r3, [r7, #8]
 8012f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f6c:	4613      	mov	r3, r2
 8012f6e:	009b      	lsls	r3, r3, #2
 8012f70:	4413      	add	r3, r2
 8012f72:	009b      	lsls	r3, r3, #2
 8012f74:	4a1f      	ldr	r2, [pc, #124]	@ (8012ff4 <xTaskIncrementTick+0x168>)
 8012f76:	441a      	add	r2, r3
 8012f78:	68bb      	ldr	r3, [r7, #8]
 8012f7a:	3304      	adds	r3, #4
 8012f7c:	4619      	mov	r1, r3
 8012f7e:	4610      	mov	r0, r2
 8012f80:	f7fe fe1f 	bl	8011bc2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012f84:	68bb      	ldr	r3, [r7, #8]
 8012f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f88:	4b1b      	ldr	r3, [pc, #108]	@ (8012ff8 <xTaskIncrementTick+0x16c>)
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f8e:	429a      	cmp	r2, r3
 8012f90:	d3b9      	bcc.n	8012f06 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8012f92:	2301      	movs	r3, #1
 8012f94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012f96:	e7b6      	b.n	8012f06 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012f98:	4b17      	ldr	r3, [pc, #92]	@ (8012ff8 <xTaskIncrementTick+0x16c>)
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f9e:	4915      	ldr	r1, [pc, #84]	@ (8012ff4 <xTaskIncrementTick+0x168>)
 8012fa0:	4613      	mov	r3, r2
 8012fa2:	009b      	lsls	r3, r3, #2
 8012fa4:	4413      	add	r3, r2
 8012fa6:	009b      	lsls	r3, r3, #2
 8012fa8:	440b      	add	r3, r1
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	2b01      	cmp	r3, #1
 8012fae:	d907      	bls.n	8012fc0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8012fb0:	2301      	movs	r3, #1
 8012fb2:	617b      	str	r3, [r7, #20]
 8012fb4:	e004      	b.n	8012fc0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012fb6:	4b11      	ldr	r3, [pc, #68]	@ (8012ffc <xTaskIncrementTick+0x170>)
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	3301      	adds	r3, #1
 8012fbc:	4a0f      	ldr	r2, [pc, #60]	@ (8012ffc <xTaskIncrementTick+0x170>)
 8012fbe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8013000 <xTaskIncrementTick+0x174>)
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d001      	beq.n	8012fcc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8012fc8:	2301      	movs	r3, #1
 8012fca:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012fcc:	697b      	ldr	r3, [r7, #20]
}
 8012fce:	4618      	mov	r0, r3
 8012fd0:	3718      	adds	r7, #24
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}
 8012fd6:	bf00      	nop
 8012fd8:	20001018 	.word	0x20001018
 8012fdc:	20000ff4 	.word	0x20000ff4
 8012fe0:	20000fa8 	.word	0x20000fa8
 8012fe4:	20000fac 	.word	0x20000fac
 8012fe8:	20001008 	.word	0x20001008
 8012fec:	20001010 	.word	0x20001010
 8012ff0:	20000ff8 	.word	0x20000ff8
 8012ff4:	20000ef4 	.word	0x20000ef4
 8012ff8:	20000ef0 	.word	0x20000ef0
 8012ffc:	20001000 	.word	0x20001000
 8013000:	20001004 	.word	0x20001004

08013004 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013004:	b580      	push	{r7, lr}
 8013006:	b088      	sub	sp, #32
 8013008:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801300a:	4b3b      	ldr	r3, [pc, #236]	@ (80130f8 <vTaskSwitchContext+0xf4>)
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d003      	beq.n	801301a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013012:	4b3a      	ldr	r3, [pc, #232]	@ (80130fc <vTaskSwitchContext+0xf8>)
 8013014:	2201      	movs	r2, #1
 8013016:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013018:	e069      	b.n	80130ee <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 801301a:	4b38      	ldr	r3, [pc, #224]	@ (80130fc <vTaskSwitchContext+0xf8>)
 801301c:	2200      	movs	r2, #0
 801301e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8013020:	4b37      	ldr	r3, [pc, #220]	@ (8013100 <vTaskSwitchContext+0xfc>)
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013026:	61fb      	str	r3, [r7, #28]
 8013028:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 801302c:	61bb      	str	r3, [r7, #24]
 801302e:	69fb      	ldr	r3, [r7, #28]
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	69ba      	ldr	r2, [r7, #24]
 8013034:	429a      	cmp	r2, r3
 8013036:	d111      	bne.n	801305c <vTaskSwitchContext+0x58>
 8013038:	69fb      	ldr	r3, [r7, #28]
 801303a:	3304      	adds	r3, #4
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	69ba      	ldr	r2, [r7, #24]
 8013040:	429a      	cmp	r2, r3
 8013042:	d10b      	bne.n	801305c <vTaskSwitchContext+0x58>
 8013044:	69fb      	ldr	r3, [r7, #28]
 8013046:	3308      	adds	r3, #8
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	69ba      	ldr	r2, [r7, #24]
 801304c:	429a      	cmp	r2, r3
 801304e:	d105      	bne.n	801305c <vTaskSwitchContext+0x58>
 8013050:	69fb      	ldr	r3, [r7, #28]
 8013052:	330c      	adds	r3, #12
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	69ba      	ldr	r2, [r7, #24]
 8013058:	429a      	cmp	r2, r3
 801305a:	d008      	beq.n	801306e <vTaskSwitchContext+0x6a>
 801305c:	4b28      	ldr	r3, [pc, #160]	@ (8013100 <vTaskSwitchContext+0xfc>)
 801305e:	681a      	ldr	r2, [r3, #0]
 8013060:	4b27      	ldr	r3, [pc, #156]	@ (8013100 <vTaskSwitchContext+0xfc>)
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	3334      	adds	r3, #52	@ 0x34
 8013066:	4619      	mov	r1, r3
 8013068:	4610      	mov	r0, r2
 801306a:	f7ed fac6 	bl	80005fa <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801306e:	4b25      	ldr	r3, [pc, #148]	@ (8013104 <vTaskSwitchContext+0x100>)
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	fab3 f383 	clz	r3, r3
 801307a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801307c:	7afb      	ldrb	r3, [r7, #11]
 801307e:	f1c3 031f 	rsb	r3, r3, #31
 8013082:	617b      	str	r3, [r7, #20]
 8013084:	4920      	ldr	r1, [pc, #128]	@ (8013108 <vTaskSwitchContext+0x104>)
 8013086:	697a      	ldr	r2, [r7, #20]
 8013088:	4613      	mov	r3, r2
 801308a:	009b      	lsls	r3, r3, #2
 801308c:	4413      	add	r3, r2
 801308e:	009b      	lsls	r3, r3, #2
 8013090:	440b      	add	r3, r1
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d10d      	bne.n	80130b4 <vTaskSwitchContext+0xb0>
	__asm volatile
 8013098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801309c:	b672      	cpsid	i
 801309e:	f383 8811 	msr	BASEPRI, r3
 80130a2:	f3bf 8f6f 	isb	sy
 80130a6:	f3bf 8f4f 	dsb	sy
 80130aa:	b662      	cpsie	i
 80130ac:	607b      	str	r3, [r7, #4]
}
 80130ae:	bf00      	nop
 80130b0:	bf00      	nop
 80130b2:	e7fd      	b.n	80130b0 <vTaskSwitchContext+0xac>
 80130b4:	697a      	ldr	r2, [r7, #20]
 80130b6:	4613      	mov	r3, r2
 80130b8:	009b      	lsls	r3, r3, #2
 80130ba:	4413      	add	r3, r2
 80130bc:	009b      	lsls	r3, r3, #2
 80130be:	4a12      	ldr	r2, [pc, #72]	@ (8013108 <vTaskSwitchContext+0x104>)
 80130c0:	4413      	add	r3, r2
 80130c2:	613b      	str	r3, [r7, #16]
 80130c4:	693b      	ldr	r3, [r7, #16]
 80130c6:	685b      	ldr	r3, [r3, #4]
 80130c8:	685a      	ldr	r2, [r3, #4]
 80130ca:	693b      	ldr	r3, [r7, #16]
 80130cc:	605a      	str	r2, [r3, #4]
 80130ce:	693b      	ldr	r3, [r7, #16]
 80130d0:	685a      	ldr	r2, [r3, #4]
 80130d2:	693b      	ldr	r3, [r7, #16]
 80130d4:	3308      	adds	r3, #8
 80130d6:	429a      	cmp	r2, r3
 80130d8:	d104      	bne.n	80130e4 <vTaskSwitchContext+0xe0>
 80130da:	693b      	ldr	r3, [r7, #16]
 80130dc:	685b      	ldr	r3, [r3, #4]
 80130de:	685a      	ldr	r2, [r3, #4]
 80130e0:	693b      	ldr	r3, [r7, #16]
 80130e2:	605a      	str	r2, [r3, #4]
 80130e4:	693b      	ldr	r3, [r7, #16]
 80130e6:	685b      	ldr	r3, [r3, #4]
 80130e8:	68db      	ldr	r3, [r3, #12]
 80130ea:	4a05      	ldr	r2, [pc, #20]	@ (8013100 <vTaskSwitchContext+0xfc>)
 80130ec:	6013      	str	r3, [r2, #0]
}
 80130ee:	bf00      	nop
 80130f0:	3720      	adds	r7, #32
 80130f2:	46bd      	mov	sp, r7
 80130f4:	bd80      	pop	{r7, pc}
 80130f6:	bf00      	nop
 80130f8:	20001018 	.word	0x20001018
 80130fc:	20001004 	.word	0x20001004
 8013100:	20000ef0 	.word	0x20000ef0
 8013104:	20000ff8 	.word	0x20000ff8
 8013108:	20000ef4 	.word	0x20000ef4

0801310c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801310c:	b580      	push	{r7, lr}
 801310e:	b084      	sub	sp, #16
 8013110:	af00      	add	r7, sp, #0
 8013112:	6078      	str	r0, [r7, #4]
 8013114:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d10d      	bne.n	8013138 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 801311c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013120:	b672      	cpsid	i
 8013122:	f383 8811 	msr	BASEPRI, r3
 8013126:	f3bf 8f6f 	isb	sy
 801312a:	f3bf 8f4f 	dsb	sy
 801312e:	b662      	cpsie	i
 8013130:	60fb      	str	r3, [r7, #12]
}
 8013132:	bf00      	nop
 8013134:	bf00      	nop
 8013136:	e7fd      	b.n	8013134 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013138:	4b07      	ldr	r3, [pc, #28]	@ (8013158 <vTaskPlaceOnEventList+0x4c>)
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	3318      	adds	r3, #24
 801313e:	4619      	mov	r1, r3
 8013140:	6878      	ldr	r0, [r7, #4]
 8013142:	f7fe fd62 	bl	8011c0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013146:	2101      	movs	r1, #1
 8013148:	6838      	ldr	r0, [r7, #0]
 801314a:	f000 fa7b 	bl	8013644 <prvAddCurrentTaskToDelayedList>
}
 801314e:	bf00      	nop
 8013150:	3710      	adds	r7, #16
 8013152:	46bd      	mov	sp, r7
 8013154:	bd80      	pop	{r7, pc}
 8013156:	bf00      	nop
 8013158:	20000ef0 	.word	0x20000ef0

0801315c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b086      	sub	sp, #24
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	68db      	ldr	r3, [r3, #12]
 8013168:	68db      	ldr	r3, [r3, #12]
 801316a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801316c:	693b      	ldr	r3, [r7, #16]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d10d      	bne.n	801318e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8013172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013176:	b672      	cpsid	i
 8013178:	f383 8811 	msr	BASEPRI, r3
 801317c:	f3bf 8f6f 	isb	sy
 8013180:	f3bf 8f4f 	dsb	sy
 8013184:	b662      	cpsie	i
 8013186:	60fb      	str	r3, [r7, #12]
}
 8013188:	bf00      	nop
 801318a:	bf00      	nop
 801318c:	e7fd      	b.n	801318a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801318e:	693b      	ldr	r3, [r7, #16]
 8013190:	3318      	adds	r3, #24
 8013192:	4618      	mov	r0, r3
 8013194:	f7fe fd72 	bl	8011c7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013198:	4b1d      	ldr	r3, [pc, #116]	@ (8013210 <xTaskRemoveFromEventList+0xb4>)
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d11c      	bne.n	80131da <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80131a0:	693b      	ldr	r3, [r7, #16]
 80131a2:	3304      	adds	r3, #4
 80131a4:	4618      	mov	r0, r3
 80131a6:	f7fe fd69 	bl	8011c7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80131aa:	693b      	ldr	r3, [r7, #16]
 80131ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131ae:	2201      	movs	r2, #1
 80131b0:	409a      	lsls	r2, r3
 80131b2:	4b18      	ldr	r3, [pc, #96]	@ (8013214 <xTaskRemoveFromEventList+0xb8>)
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	4313      	orrs	r3, r2
 80131b8:	4a16      	ldr	r2, [pc, #88]	@ (8013214 <xTaskRemoveFromEventList+0xb8>)
 80131ba:	6013      	str	r3, [r2, #0]
 80131bc:	693b      	ldr	r3, [r7, #16]
 80131be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80131c0:	4613      	mov	r3, r2
 80131c2:	009b      	lsls	r3, r3, #2
 80131c4:	4413      	add	r3, r2
 80131c6:	009b      	lsls	r3, r3, #2
 80131c8:	4a13      	ldr	r2, [pc, #76]	@ (8013218 <xTaskRemoveFromEventList+0xbc>)
 80131ca:	441a      	add	r2, r3
 80131cc:	693b      	ldr	r3, [r7, #16]
 80131ce:	3304      	adds	r3, #4
 80131d0:	4619      	mov	r1, r3
 80131d2:	4610      	mov	r0, r2
 80131d4:	f7fe fcf5 	bl	8011bc2 <vListInsertEnd>
 80131d8:	e005      	b.n	80131e6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80131da:	693b      	ldr	r3, [r7, #16]
 80131dc:	3318      	adds	r3, #24
 80131de:	4619      	mov	r1, r3
 80131e0:	480e      	ldr	r0, [pc, #56]	@ (801321c <xTaskRemoveFromEventList+0xc0>)
 80131e2:	f7fe fcee 	bl	8011bc2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80131e6:	693b      	ldr	r3, [r7, #16]
 80131e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80131ea:	4b0d      	ldr	r3, [pc, #52]	@ (8013220 <xTaskRemoveFromEventList+0xc4>)
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131f0:	429a      	cmp	r2, r3
 80131f2:	d905      	bls.n	8013200 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80131f4:	2301      	movs	r3, #1
 80131f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80131f8:	4b0a      	ldr	r3, [pc, #40]	@ (8013224 <xTaskRemoveFromEventList+0xc8>)
 80131fa:	2201      	movs	r2, #1
 80131fc:	601a      	str	r2, [r3, #0]
 80131fe:	e001      	b.n	8013204 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8013200:	2300      	movs	r3, #0
 8013202:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013204:	697b      	ldr	r3, [r7, #20]
}
 8013206:	4618      	mov	r0, r3
 8013208:	3718      	adds	r7, #24
 801320a:	46bd      	mov	sp, r7
 801320c:	bd80      	pop	{r7, pc}
 801320e:	bf00      	nop
 8013210:	20001018 	.word	0x20001018
 8013214:	20000ff8 	.word	0x20000ff8
 8013218:	20000ef4 	.word	0x20000ef4
 801321c:	20000fb0 	.word	0x20000fb0
 8013220:	20000ef0 	.word	0x20000ef0
 8013224:	20001004 	.word	0x20001004

08013228 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013228:	b480      	push	{r7}
 801322a:	b083      	sub	sp, #12
 801322c:	af00      	add	r7, sp, #0
 801322e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013230:	4b06      	ldr	r3, [pc, #24]	@ (801324c <vTaskInternalSetTimeOutState+0x24>)
 8013232:	681a      	ldr	r2, [r3, #0]
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013238:	4b05      	ldr	r3, [pc, #20]	@ (8013250 <vTaskInternalSetTimeOutState+0x28>)
 801323a:	681a      	ldr	r2, [r3, #0]
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	605a      	str	r2, [r3, #4]
}
 8013240:	bf00      	nop
 8013242:	370c      	adds	r7, #12
 8013244:	46bd      	mov	sp, r7
 8013246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801324a:	4770      	bx	lr
 801324c:	20001008 	.word	0x20001008
 8013250:	20000ff4 	.word	0x20000ff4

08013254 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013254:	b580      	push	{r7, lr}
 8013256:	b088      	sub	sp, #32
 8013258:	af00      	add	r7, sp, #0
 801325a:	6078      	str	r0, [r7, #4]
 801325c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d10d      	bne.n	8013280 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8013264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013268:	b672      	cpsid	i
 801326a:	f383 8811 	msr	BASEPRI, r3
 801326e:	f3bf 8f6f 	isb	sy
 8013272:	f3bf 8f4f 	dsb	sy
 8013276:	b662      	cpsie	i
 8013278:	613b      	str	r3, [r7, #16]
}
 801327a:	bf00      	nop
 801327c:	bf00      	nop
 801327e:	e7fd      	b.n	801327c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8013280:	683b      	ldr	r3, [r7, #0]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d10d      	bne.n	80132a2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8013286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801328a:	b672      	cpsid	i
 801328c:	f383 8811 	msr	BASEPRI, r3
 8013290:	f3bf 8f6f 	isb	sy
 8013294:	f3bf 8f4f 	dsb	sy
 8013298:	b662      	cpsie	i
 801329a:	60fb      	str	r3, [r7, #12]
}
 801329c:	bf00      	nop
 801329e:	bf00      	nop
 80132a0:	e7fd      	b.n	801329e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80132a2:	f000 fb43 	bl	801392c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80132a6:	4b1d      	ldr	r3, [pc, #116]	@ (801331c <xTaskCheckForTimeOut+0xc8>)
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	685b      	ldr	r3, [r3, #4]
 80132b0:	69ba      	ldr	r2, [r7, #24]
 80132b2:	1ad3      	subs	r3, r2, r3
 80132b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80132b6:	683b      	ldr	r3, [r7, #0]
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132be:	d102      	bne.n	80132c6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80132c0:	2300      	movs	r3, #0
 80132c2:	61fb      	str	r3, [r7, #28]
 80132c4:	e023      	b.n	801330e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	681a      	ldr	r2, [r3, #0]
 80132ca:	4b15      	ldr	r3, [pc, #84]	@ (8013320 <xTaskCheckForTimeOut+0xcc>)
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	429a      	cmp	r2, r3
 80132d0:	d007      	beq.n	80132e2 <xTaskCheckForTimeOut+0x8e>
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	685b      	ldr	r3, [r3, #4]
 80132d6:	69ba      	ldr	r2, [r7, #24]
 80132d8:	429a      	cmp	r2, r3
 80132da:	d302      	bcc.n	80132e2 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80132dc:	2301      	movs	r3, #1
 80132de:	61fb      	str	r3, [r7, #28]
 80132e0:	e015      	b.n	801330e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80132e2:	683b      	ldr	r3, [r7, #0]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	697a      	ldr	r2, [r7, #20]
 80132e8:	429a      	cmp	r2, r3
 80132ea:	d20b      	bcs.n	8013304 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80132ec:	683b      	ldr	r3, [r7, #0]
 80132ee:	681a      	ldr	r2, [r3, #0]
 80132f0:	697b      	ldr	r3, [r7, #20]
 80132f2:	1ad2      	subs	r2, r2, r3
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80132f8:	6878      	ldr	r0, [r7, #4]
 80132fa:	f7ff ff95 	bl	8013228 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80132fe:	2300      	movs	r3, #0
 8013300:	61fb      	str	r3, [r7, #28]
 8013302:	e004      	b.n	801330e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8013304:	683b      	ldr	r3, [r7, #0]
 8013306:	2200      	movs	r2, #0
 8013308:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801330a:	2301      	movs	r3, #1
 801330c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801330e:	f000 fb43 	bl	8013998 <vPortExitCritical>

	return xReturn;
 8013312:	69fb      	ldr	r3, [r7, #28]
}
 8013314:	4618      	mov	r0, r3
 8013316:	3720      	adds	r7, #32
 8013318:	46bd      	mov	sp, r7
 801331a:	bd80      	pop	{r7, pc}
 801331c:	20000ff4 	.word	0x20000ff4
 8013320:	20001008 	.word	0x20001008

08013324 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013324:	b480      	push	{r7}
 8013326:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013328:	4b03      	ldr	r3, [pc, #12]	@ (8013338 <vTaskMissedYield+0x14>)
 801332a:	2201      	movs	r2, #1
 801332c:	601a      	str	r2, [r3, #0]
}
 801332e:	bf00      	nop
 8013330:	46bd      	mov	sp, r7
 8013332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013336:	4770      	bx	lr
 8013338:	20001004 	.word	0x20001004

0801333c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b082      	sub	sp, #8
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013344:	f000 f854 	bl	80133f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013348:	4b07      	ldr	r3, [pc, #28]	@ (8013368 <prvIdleTask+0x2c>)
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	2b01      	cmp	r3, #1
 801334e:	d907      	bls.n	8013360 <prvIdleTask+0x24>
			{
				taskYIELD();
 8013350:	4b06      	ldr	r3, [pc, #24]	@ (801336c <prvIdleTask+0x30>)
 8013352:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013356:	601a      	str	r2, [r3, #0]
 8013358:	f3bf 8f4f 	dsb	sy
 801335c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8013360:	f7ed f944 	bl	80005ec <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8013364:	e7ee      	b.n	8013344 <prvIdleTask+0x8>
 8013366:	bf00      	nop
 8013368:	20000ef4 	.word	0x20000ef4
 801336c:	e000ed04 	.word	0xe000ed04

08013370 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b082      	sub	sp, #8
 8013374:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013376:	2300      	movs	r3, #0
 8013378:	607b      	str	r3, [r7, #4]
 801337a:	e00c      	b.n	8013396 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801337c:	687a      	ldr	r2, [r7, #4]
 801337e:	4613      	mov	r3, r2
 8013380:	009b      	lsls	r3, r3, #2
 8013382:	4413      	add	r3, r2
 8013384:	009b      	lsls	r3, r3, #2
 8013386:	4a12      	ldr	r2, [pc, #72]	@ (80133d0 <prvInitialiseTaskLists+0x60>)
 8013388:	4413      	add	r3, r2
 801338a:	4618      	mov	r0, r3
 801338c:	f7fe fbec 	bl	8011b68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	3301      	adds	r3, #1
 8013394:	607b      	str	r3, [r7, #4]
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	2b06      	cmp	r3, #6
 801339a:	d9ef      	bls.n	801337c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801339c:	480d      	ldr	r0, [pc, #52]	@ (80133d4 <prvInitialiseTaskLists+0x64>)
 801339e:	f7fe fbe3 	bl	8011b68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80133a2:	480d      	ldr	r0, [pc, #52]	@ (80133d8 <prvInitialiseTaskLists+0x68>)
 80133a4:	f7fe fbe0 	bl	8011b68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80133a8:	480c      	ldr	r0, [pc, #48]	@ (80133dc <prvInitialiseTaskLists+0x6c>)
 80133aa:	f7fe fbdd 	bl	8011b68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80133ae:	480c      	ldr	r0, [pc, #48]	@ (80133e0 <prvInitialiseTaskLists+0x70>)
 80133b0:	f7fe fbda 	bl	8011b68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80133b4:	480b      	ldr	r0, [pc, #44]	@ (80133e4 <prvInitialiseTaskLists+0x74>)
 80133b6:	f7fe fbd7 	bl	8011b68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80133ba:	4b0b      	ldr	r3, [pc, #44]	@ (80133e8 <prvInitialiseTaskLists+0x78>)
 80133bc:	4a05      	ldr	r2, [pc, #20]	@ (80133d4 <prvInitialiseTaskLists+0x64>)
 80133be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80133c0:	4b0a      	ldr	r3, [pc, #40]	@ (80133ec <prvInitialiseTaskLists+0x7c>)
 80133c2:	4a05      	ldr	r2, [pc, #20]	@ (80133d8 <prvInitialiseTaskLists+0x68>)
 80133c4:	601a      	str	r2, [r3, #0]
}
 80133c6:	bf00      	nop
 80133c8:	3708      	adds	r7, #8
 80133ca:	46bd      	mov	sp, r7
 80133cc:	bd80      	pop	{r7, pc}
 80133ce:	bf00      	nop
 80133d0:	20000ef4 	.word	0x20000ef4
 80133d4:	20000f80 	.word	0x20000f80
 80133d8:	20000f94 	.word	0x20000f94
 80133dc:	20000fb0 	.word	0x20000fb0
 80133e0:	20000fc4 	.word	0x20000fc4
 80133e4:	20000fdc 	.word	0x20000fdc
 80133e8:	20000fa8 	.word	0x20000fa8
 80133ec:	20000fac 	.word	0x20000fac

080133f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b082      	sub	sp, #8
 80133f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80133f6:	e019      	b.n	801342c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80133f8:	f000 fa98 	bl	801392c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80133fc:	4b10      	ldr	r3, [pc, #64]	@ (8013440 <prvCheckTasksWaitingTermination+0x50>)
 80133fe:	68db      	ldr	r3, [r3, #12]
 8013400:	68db      	ldr	r3, [r3, #12]
 8013402:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	3304      	adds	r3, #4
 8013408:	4618      	mov	r0, r3
 801340a:	f7fe fc37 	bl	8011c7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801340e:	4b0d      	ldr	r3, [pc, #52]	@ (8013444 <prvCheckTasksWaitingTermination+0x54>)
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	3b01      	subs	r3, #1
 8013414:	4a0b      	ldr	r2, [pc, #44]	@ (8013444 <prvCheckTasksWaitingTermination+0x54>)
 8013416:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013418:	4b0b      	ldr	r3, [pc, #44]	@ (8013448 <prvCheckTasksWaitingTermination+0x58>)
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	3b01      	subs	r3, #1
 801341e:	4a0a      	ldr	r2, [pc, #40]	@ (8013448 <prvCheckTasksWaitingTermination+0x58>)
 8013420:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013422:	f000 fab9 	bl	8013998 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013426:	6878      	ldr	r0, [r7, #4]
 8013428:	f000 f810 	bl	801344c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801342c:	4b06      	ldr	r3, [pc, #24]	@ (8013448 <prvCheckTasksWaitingTermination+0x58>)
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d1e1      	bne.n	80133f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013434:	bf00      	nop
 8013436:	bf00      	nop
 8013438:	3708      	adds	r7, #8
 801343a:	46bd      	mov	sp, r7
 801343c:	bd80      	pop	{r7, pc}
 801343e:	bf00      	nop
 8013440:	20000fc4 	.word	0x20000fc4
 8013444:	20000ff0 	.word	0x20000ff0
 8013448:	20000fd8 	.word	0x20000fd8

0801344c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801344c:	b580      	push	{r7, lr}
 801344e:	b084      	sub	sp, #16
 8013450:	af00      	add	r7, sp, #0
 8013452:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 801345a:	2b00      	cmp	r3, #0
 801345c:	d108      	bne.n	8013470 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013462:	4618      	mov	r0, r3
 8013464:	f000 fc62 	bl	8013d2c <vPortFree>
				vPortFree( pxTCB );
 8013468:	6878      	ldr	r0, [r7, #4]
 801346a:	f000 fc5f 	bl	8013d2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801346e:	e01b      	b.n	80134a8 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8013476:	2b01      	cmp	r3, #1
 8013478:	d103      	bne.n	8013482 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801347a:	6878      	ldr	r0, [r7, #4]
 801347c:	f000 fc56 	bl	8013d2c <vPortFree>
	}
 8013480:	e012      	b.n	80134a8 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8013488:	2b02      	cmp	r3, #2
 801348a:	d00d      	beq.n	80134a8 <prvDeleteTCB+0x5c>
	__asm volatile
 801348c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013490:	b672      	cpsid	i
 8013492:	f383 8811 	msr	BASEPRI, r3
 8013496:	f3bf 8f6f 	isb	sy
 801349a:	f3bf 8f4f 	dsb	sy
 801349e:	b662      	cpsie	i
 80134a0:	60fb      	str	r3, [r7, #12]
}
 80134a2:	bf00      	nop
 80134a4:	bf00      	nop
 80134a6:	e7fd      	b.n	80134a4 <prvDeleteTCB+0x58>
	}
 80134a8:	bf00      	nop
 80134aa:	3710      	adds	r7, #16
 80134ac:	46bd      	mov	sp, r7
 80134ae:	bd80      	pop	{r7, pc}

080134b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80134b0:	b480      	push	{r7}
 80134b2:	b083      	sub	sp, #12
 80134b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80134b6:	4b0c      	ldr	r3, [pc, #48]	@ (80134e8 <prvResetNextTaskUnblockTime+0x38>)
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d104      	bne.n	80134ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80134c0:	4b0a      	ldr	r3, [pc, #40]	@ (80134ec <prvResetNextTaskUnblockTime+0x3c>)
 80134c2:	f04f 32ff 	mov.w	r2, #4294967295
 80134c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80134c8:	e008      	b.n	80134dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80134ca:	4b07      	ldr	r3, [pc, #28]	@ (80134e8 <prvResetNextTaskUnblockTime+0x38>)
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	68db      	ldr	r3, [r3, #12]
 80134d0:	68db      	ldr	r3, [r3, #12]
 80134d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	685b      	ldr	r3, [r3, #4]
 80134d8:	4a04      	ldr	r2, [pc, #16]	@ (80134ec <prvResetNextTaskUnblockTime+0x3c>)
 80134da:	6013      	str	r3, [r2, #0]
}
 80134dc:	bf00      	nop
 80134de:	370c      	adds	r7, #12
 80134e0:	46bd      	mov	sp, r7
 80134e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e6:	4770      	bx	lr
 80134e8:	20000fa8 	.word	0x20000fa8
 80134ec:	20001010 	.word	0x20001010

080134f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80134f0:	b480      	push	{r7}
 80134f2:	b083      	sub	sp, #12
 80134f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80134f6:	4b0b      	ldr	r3, [pc, #44]	@ (8013524 <xTaskGetSchedulerState+0x34>)
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d102      	bne.n	8013504 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80134fe:	2301      	movs	r3, #1
 8013500:	607b      	str	r3, [r7, #4]
 8013502:	e008      	b.n	8013516 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013504:	4b08      	ldr	r3, [pc, #32]	@ (8013528 <xTaskGetSchedulerState+0x38>)
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d102      	bne.n	8013512 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801350c:	2302      	movs	r3, #2
 801350e:	607b      	str	r3, [r7, #4]
 8013510:	e001      	b.n	8013516 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013512:	2300      	movs	r3, #0
 8013514:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013516:	687b      	ldr	r3, [r7, #4]
	}
 8013518:	4618      	mov	r0, r3
 801351a:	370c      	adds	r7, #12
 801351c:	46bd      	mov	sp, r7
 801351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013522:	4770      	bx	lr
 8013524:	20000ffc 	.word	0x20000ffc
 8013528:	20001018 	.word	0x20001018

0801352c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801352c:	b580      	push	{r7, lr}
 801352e:	b086      	sub	sp, #24
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013538:	2300      	movs	r3, #0
 801353a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d074      	beq.n	801362c <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013542:	4b3d      	ldr	r3, [pc, #244]	@ (8013638 <xTaskPriorityDisinherit+0x10c>)
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	693a      	ldr	r2, [r7, #16]
 8013548:	429a      	cmp	r2, r3
 801354a:	d00d      	beq.n	8013568 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 801354c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013550:	b672      	cpsid	i
 8013552:	f383 8811 	msr	BASEPRI, r3
 8013556:	f3bf 8f6f 	isb	sy
 801355a:	f3bf 8f4f 	dsb	sy
 801355e:	b662      	cpsie	i
 8013560:	60fb      	str	r3, [r7, #12]
}
 8013562:	bf00      	nop
 8013564:	bf00      	nop
 8013566:	e7fd      	b.n	8013564 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8013568:	693b      	ldr	r3, [r7, #16]
 801356a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801356c:	2b00      	cmp	r3, #0
 801356e:	d10d      	bne.n	801358c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8013570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013574:	b672      	cpsid	i
 8013576:	f383 8811 	msr	BASEPRI, r3
 801357a:	f3bf 8f6f 	isb	sy
 801357e:	f3bf 8f4f 	dsb	sy
 8013582:	b662      	cpsie	i
 8013584:	60bb      	str	r3, [r7, #8]
}
 8013586:	bf00      	nop
 8013588:	bf00      	nop
 801358a:	e7fd      	b.n	8013588 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 801358c:	693b      	ldr	r3, [r7, #16]
 801358e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013590:	1e5a      	subs	r2, r3, #1
 8013592:	693b      	ldr	r3, [r7, #16]
 8013594:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013596:	693b      	ldr	r3, [r7, #16]
 8013598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801359a:	693b      	ldr	r3, [r7, #16]
 801359c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801359e:	429a      	cmp	r2, r3
 80135a0:	d044      	beq.n	801362c <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80135a2:	693b      	ldr	r3, [r7, #16]
 80135a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d140      	bne.n	801362c <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80135aa:	693b      	ldr	r3, [r7, #16]
 80135ac:	3304      	adds	r3, #4
 80135ae:	4618      	mov	r0, r3
 80135b0:	f7fe fb64 	bl	8011c7c <uxListRemove>
 80135b4:	4603      	mov	r3, r0
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d115      	bne.n	80135e6 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80135ba:	693b      	ldr	r3, [r7, #16]
 80135bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80135be:	491f      	ldr	r1, [pc, #124]	@ (801363c <xTaskPriorityDisinherit+0x110>)
 80135c0:	4613      	mov	r3, r2
 80135c2:	009b      	lsls	r3, r3, #2
 80135c4:	4413      	add	r3, r2
 80135c6:	009b      	lsls	r3, r3, #2
 80135c8:	440b      	add	r3, r1
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d10a      	bne.n	80135e6 <xTaskPriorityDisinherit+0xba>
 80135d0:	693b      	ldr	r3, [r7, #16]
 80135d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135d4:	2201      	movs	r2, #1
 80135d6:	fa02 f303 	lsl.w	r3, r2, r3
 80135da:	43da      	mvns	r2, r3
 80135dc:	4b18      	ldr	r3, [pc, #96]	@ (8013640 <xTaskPriorityDisinherit+0x114>)
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	4013      	ands	r3, r2
 80135e2:	4a17      	ldr	r2, [pc, #92]	@ (8013640 <xTaskPriorityDisinherit+0x114>)
 80135e4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80135e6:	693b      	ldr	r3, [r7, #16]
 80135e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80135ea:	693b      	ldr	r3, [r7, #16]
 80135ec:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80135ee:	693b      	ldr	r3, [r7, #16]
 80135f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135f2:	f1c3 0207 	rsb	r2, r3, #7
 80135f6:	693b      	ldr	r3, [r7, #16]
 80135f8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80135fa:	693b      	ldr	r3, [r7, #16]
 80135fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135fe:	2201      	movs	r2, #1
 8013600:	409a      	lsls	r2, r3
 8013602:	4b0f      	ldr	r3, [pc, #60]	@ (8013640 <xTaskPriorityDisinherit+0x114>)
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	4313      	orrs	r3, r2
 8013608:	4a0d      	ldr	r2, [pc, #52]	@ (8013640 <xTaskPriorityDisinherit+0x114>)
 801360a:	6013      	str	r3, [r2, #0]
 801360c:	693b      	ldr	r3, [r7, #16]
 801360e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013610:	4613      	mov	r3, r2
 8013612:	009b      	lsls	r3, r3, #2
 8013614:	4413      	add	r3, r2
 8013616:	009b      	lsls	r3, r3, #2
 8013618:	4a08      	ldr	r2, [pc, #32]	@ (801363c <xTaskPriorityDisinherit+0x110>)
 801361a:	441a      	add	r2, r3
 801361c:	693b      	ldr	r3, [r7, #16]
 801361e:	3304      	adds	r3, #4
 8013620:	4619      	mov	r1, r3
 8013622:	4610      	mov	r0, r2
 8013624:	f7fe facd 	bl	8011bc2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013628:	2301      	movs	r3, #1
 801362a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801362c:	697b      	ldr	r3, [r7, #20]
	}
 801362e:	4618      	mov	r0, r3
 8013630:	3718      	adds	r7, #24
 8013632:	46bd      	mov	sp, r7
 8013634:	bd80      	pop	{r7, pc}
 8013636:	bf00      	nop
 8013638:	20000ef0 	.word	0x20000ef0
 801363c:	20000ef4 	.word	0x20000ef4
 8013640:	20000ff8 	.word	0x20000ff8

08013644 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b084      	sub	sp, #16
 8013648:	af00      	add	r7, sp, #0
 801364a:	6078      	str	r0, [r7, #4]
 801364c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801364e:	4b29      	ldr	r3, [pc, #164]	@ (80136f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013654:	4b28      	ldr	r3, [pc, #160]	@ (80136f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	3304      	adds	r3, #4
 801365a:	4618      	mov	r0, r3
 801365c:	f7fe fb0e 	bl	8011c7c <uxListRemove>
 8013660:	4603      	mov	r3, r0
 8013662:	2b00      	cmp	r3, #0
 8013664:	d10b      	bne.n	801367e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8013666:	4b24      	ldr	r3, [pc, #144]	@ (80136f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801366c:	2201      	movs	r2, #1
 801366e:	fa02 f303 	lsl.w	r3, r2, r3
 8013672:	43da      	mvns	r2, r3
 8013674:	4b21      	ldr	r3, [pc, #132]	@ (80136fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	4013      	ands	r3, r2
 801367a:	4a20      	ldr	r2, [pc, #128]	@ (80136fc <prvAddCurrentTaskToDelayedList+0xb8>)
 801367c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013684:	d10a      	bne.n	801369c <prvAddCurrentTaskToDelayedList+0x58>
 8013686:	683b      	ldr	r3, [r7, #0]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d007      	beq.n	801369c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801368c:	4b1a      	ldr	r3, [pc, #104]	@ (80136f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	3304      	adds	r3, #4
 8013692:	4619      	mov	r1, r3
 8013694:	481a      	ldr	r0, [pc, #104]	@ (8013700 <prvAddCurrentTaskToDelayedList+0xbc>)
 8013696:	f7fe fa94 	bl	8011bc2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801369a:	e026      	b.n	80136ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801369c:	68fa      	ldr	r2, [r7, #12]
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	4413      	add	r3, r2
 80136a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80136a4:	4b14      	ldr	r3, [pc, #80]	@ (80136f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	68ba      	ldr	r2, [r7, #8]
 80136aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80136ac:	68ba      	ldr	r2, [r7, #8]
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	429a      	cmp	r2, r3
 80136b2:	d209      	bcs.n	80136c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80136b4:	4b13      	ldr	r3, [pc, #76]	@ (8013704 <prvAddCurrentTaskToDelayedList+0xc0>)
 80136b6:	681a      	ldr	r2, [r3, #0]
 80136b8:	4b0f      	ldr	r3, [pc, #60]	@ (80136f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	3304      	adds	r3, #4
 80136be:	4619      	mov	r1, r3
 80136c0:	4610      	mov	r0, r2
 80136c2:	f7fe faa2 	bl	8011c0a <vListInsert>
}
 80136c6:	e010      	b.n	80136ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80136c8:	4b0f      	ldr	r3, [pc, #60]	@ (8013708 <prvAddCurrentTaskToDelayedList+0xc4>)
 80136ca:	681a      	ldr	r2, [r3, #0]
 80136cc:	4b0a      	ldr	r3, [pc, #40]	@ (80136f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	3304      	adds	r3, #4
 80136d2:	4619      	mov	r1, r3
 80136d4:	4610      	mov	r0, r2
 80136d6:	f7fe fa98 	bl	8011c0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80136da:	4b0c      	ldr	r3, [pc, #48]	@ (801370c <prvAddCurrentTaskToDelayedList+0xc8>)
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	68ba      	ldr	r2, [r7, #8]
 80136e0:	429a      	cmp	r2, r3
 80136e2:	d202      	bcs.n	80136ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80136e4:	4a09      	ldr	r2, [pc, #36]	@ (801370c <prvAddCurrentTaskToDelayedList+0xc8>)
 80136e6:	68bb      	ldr	r3, [r7, #8]
 80136e8:	6013      	str	r3, [r2, #0]
}
 80136ea:	bf00      	nop
 80136ec:	3710      	adds	r7, #16
 80136ee:	46bd      	mov	sp, r7
 80136f0:	bd80      	pop	{r7, pc}
 80136f2:	bf00      	nop
 80136f4:	20000ff4 	.word	0x20000ff4
 80136f8:	20000ef0 	.word	0x20000ef0
 80136fc:	20000ff8 	.word	0x20000ff8
 8013700:	20000fdc 	.word	0x20000fdc
 8013704:	20000fac 	.word	0x20000fac
 8013708:	20000fa8 	.word	0x20000fa8
 801370c:	20001010 	.word	0x20001010

08013710 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013710:	b480      	push	{r7}
 8013712:	b085      	sub	sp, #20
 8013714:	af00      	add	r7, sp, #0
 8013716:	60f8      	str	r0, [r7, #12]
 8013718:	60b9      	str	r1, [r7, #8]
 801371a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	3b04      	subs	r3, #4
 8013720:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8013728:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	3b04      	subs	r3, #4
 801372e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013730:	68bb      	ldr	r3, [r7, #8]
 8013732:	f023 0201 	bic.w	r2, r3, #1
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	3b04      	subs	r3, #4
 801373e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013740:	4a0c      	ldr	r2, [pc, #48]	@ (8013774 <pxPortInitialiseStack+0x64>)
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	3b14      	subs	r3, #20
 801374a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801374c:	687a      	ldr	r2, [r7, #4]
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	3b04      	subs	r3, #4
 8013756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	f06f 0202 	mvn.w	r2, #2
 801375e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	3b20      	subs	r3, #32
 8013764:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013766:	68fb      	ldr	r3, [r7, #12]
}
 8013768:	4618      	mov	r0, r3
 801376a:	3714      	adds	r7, #20
 801376c:	46bd      	mov	sp, r7
 801376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013772:	4770      	bx	lr
 8013774:	08013779 	.word	0x08013779

08013778 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013778:	b480      	push	{r7}
 801377a:	b085      	sub	sp, #20
 801377c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801377e:	2300      	movs	r3, #0
 8013780:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013782:	4b15      	ldr	r3, [pc, #84]	@ (80137d8 <prvTaskExitError+0x60>)
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	f1b3 3fff 	cmp.w	r3, #4294967295
 801378a:	d00d      	beq.n	80137a8 <prvTaskExitError+0x30>
	__asm volatile
 801378c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013790:	b672      	cpsid	i
 8013792:	f383 8811 	msr	BASEPRI, r3
 8013796:	f3bf 8f6f 	isb	sy
 801379a:	f3bf 8f4f 	dsb	sy
 801379e:	b662      	cpsie	i
 80137a0:	60fb      	str	r3, [r7, #12]
}
 80137a2:	bf00      	nop
 80137a4:	bf00      	nop
 80137a6:	e7fd      	b.n	80137a4 <prvTaskExitError+0x2c>
	__asm volatile
 80137a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137ac:	b672      	cpsid	i
 80137ae:	f383 8811 	msr	BASEPRI, r3
 80137b2:	f3bf 8f6f 	isb	sy
 80137b6:	f3bf 8f4f 	dsb	sy
 80137ba:	b662      	cpsie	i
 80137bc:	60bb      	str	r3, [r7, #8]
}
 80137be:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80137c0:	bf00      	nop
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d0fc      	beq.n	80137c2 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80137c8:	bf00      	nop
 80137ca:	bf00      	nop
 80137cc:	3714      	adds	r7, #20
 80137ce:	46bd      	mov	sp, r7
 80137d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d4:	4770      	bx	lr
 80137d6:	bf00      	nop
 80137d8:	20000074 	.word	0x20000074
 80137dc:	00000000 	.word	0x00000000

080137e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80137e0:	4b07      	ldr	r3, [pc, #28]	@ (8013800 <pxCurrentTCBConst2>)
 80137e2:	6819      	ldr	r1, [r3, #0]
 80137e4:	6808      	ldr	r0, [r1, #0]
 80137e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137ea:	f380 8809 	msr	PSP, r0
 80137ee:	f3bf 8f6f 	isb	sy
 80137f2:	f04f 0000 	mov.w	r0, #0
 80137f6:	f380 8811 	msr	BASEPRI, r0
 80137fa:	4770      	bx	lr
 80137fc:	f3af 8000 	nop.w

08013800 <pxCurrentTCBConst2>:
 8013800:	20000ef0 	.word	0x20000ef0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013804:	bf00      	nop
 8013806:	bf00      	nop

08013808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013808:	4808      	ldr	r0, [pc, #32]	@ (801382c <prvPortStartFirstTask+0x24>)
 801380a:	6800      	ldr	r0, [r0, #0]
 801380c:	6800      	ldr	r0, [r0, #0]
 801380e:	f380 8808 	msr	MSP, r0
 8013812:	f04f 0000 	mov.w	r0, #0
 8013816:	f380 8814 	msr	CONTROL, r0
 801381a:	b662      	cpsie	i
 801381c:	b661      	cpsie	f
 801381e:	f3bf 8f4f 	dsb	sy
 8013822:	f3bf 8f6f 	isb	sy
 8013826:	df00      	svc	0
 8013828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801382a:	bf00      	nop
 801382c:	e000ed08 	.word	0xe000ed08

08013830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013830:	b580      	push	{r7, lr}
 8013832:	b084      	sub	sp, #16
 8013834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013836:	4b37      	ldr	r3, [pc, #220]	@ (8013914 <xPortStartScheduler+0xe4>)
 8013838:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	781b      	ldrb	r3, [r3, #0]
 801383e:	b2db      	uxtb	r3, r3
 8013840:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	22ff      	movs	r2, #255	@ 0xff
 8013846:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	781b      	ldrb	r3, [r3, #0]
 801384c:	b2db      	uxtb	r3, r3
 801384e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013850:	78fb      	ldrb	r3, [r7, #3]
 8013852:	b2db      	uxtb	r3, r3
 8013854:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8013858:	b2da      	uxtb	r2, r3
 801385a:	4b2f      	ldr	r3, [pc, #188]	@ (8013918 <xPortStartScheduler+0xe8>)
 801385c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801385e:	4b2f      	ldr	r3, [pc, #188]	@ (801391c <xPortStartScheduler+0xec>)
 8013860:	2207      	movs	r2, #7
 8013862:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013864:	e009      	b.n	801387a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8013866:	4b2d      	ldr	r3, [pc, #180]	@ (801391c <xPortStartScheduler+0xec>)
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	3b01      	subs	r3, #1
 801386c:	4a2b      	ldr	r2, [pc, #172]	@ (801391c <xPortStartScheduler+0xec>)
 801386e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013870:	78fb      	ldrb	r3, [r7, #3]
 8013872:	b2db      	uxtb	r3, r3
 8013874:	005b      	lsls	r3, r3, #1
 8013876:	b2db      	uxtb	r3, r3
 8013878:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801387a:	78fb      	ldrb	r3, [r7, #3]
 801387c:	b2db      	uxtb	r3, r3
 801387e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013882:	2b80      	cmp	r3, #128	@ 0x80
 8013884:	d0ef      	beq.n	8013866 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013886:	4b25      	ldr	r3, [pc, #148]	@ (801391c <xPortStartScheduler+0xec>)
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	f1c3 0307 	rsb	r3, r3, #7
 801388e:	2b04      	cmp	r3, #4
 8013890:	d00d      	beq.n	80138ae <xPortStartScheduler+0x7e>
	__asm volatile
 8013892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013896:	b672      	cpsid	i
 8013898:	f383 8811 	msr	BASEPRI, r3
 801389c:	f3bf 8f6f 	isb	sy
 80138a0:	f3bf 8f4f 	dsb	sy
 80138a4:	b662      	cpsie	i
 80138a6:	60bb      	str	r3, [r7, #8]
}
 80138a8:	bf00      	nop
 80138aa:	bf00      	nop
 80138ac:	e7fd      	b.n	80138aa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80138ae:	4b1b      	ldr	r3, [pc, #108]	@ (801391c <xPortStartScheduler+0xec>)
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	021b      	lsls	r3, r3, #8
 80138b4:	4a19      	ldr	r2, [pc, #100]	@ (801391c <xPortStartScheduler+0xec>)
 80138b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80138b8:	4b18      	ldr	r3, [pc, #96]	@ (801391c <xPortStartScheduler+0xec>)
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80138c0:	4a16      	ldr	r2, [pc, #88]	@ (801391c <xPortStartScheduler+0xec>)
 80138c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	b2da      	uxtb	r2, r3
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80138cc:	4b14      	ldr	r3, [pc, #80]	@ (8013920 <xPortStartScheduler+0xf0>)
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	4a13      	ldr	r2, [pc, #76]	@ (8013920 <xPortStartScheduler+0xf0>)
 80138d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80138d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80138d8:	4b11      	ldr	r3, [pc, #68]	@ (8013920 <xPortStartScheduler+0xf0>)
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	4a10      	ldr	r2, [pc, #64]	@ (8013920 <xPortStartScheduler+0xf0>)
 80138de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80138e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80138e4:	f000 f8dc 	bl	8013aa0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80138e8:	4b0e      	ldr	r3, [pc, #56]	@ (8013924 <xPortStartScheduler+0xf4>)
 80138ea:	2200      	movs	r2, #0
 80138ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80138ee:	f000 f8fb 	bl	8013ae8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80138f2:	4b0d      	ldr	r3, [pc, #52]	@ (8013928 <xPortStartScheduler+0xf8>)
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	4a0c      	ldr	r2, [pc, #48]	@ (8013928 <xPortStartScheduler+0xf8>)
 80138f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80138fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80138fe:	f7ff ff83 	bl	8013808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013902:	f7ff fb7f 	bl	8013004 <vTaskSwitchContext>
	prvTaskExitError();
 8013906:	f7ff ff37 	bl	8013778 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801390a:	2300      	movs	r3, #0
}
 801390c:	4618      	mov	r0, r3
 801390e:	3710      	adds	r7, #16
 8013910:	46bd      	mov	sp, r7
 8013912:	bd80      	pop	{r7, pc}
 8013914:	e000e400 	.word	0xe000e400
 8013918:	2000101c 	.word	0x2000101c
 801391c:	20001020 	.word	0x20001020
 8013920:	e000ed20 	.word	0xe000ed20
 8013924:	20000074 	.word	0x20000074
 8013928:	e000ef34 	.word	0xe000ef34

0801392c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801392c:	b480      	push	{r7}
 801392e:	b083      	sub	sp, #12
 8013930:	af00      	add	r7, sp, #0
	__asm volatile
 8013932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013936:	b672      	cpsid	i
 8013938:	f383 8811 	msr	BASEPRI, r3
 801393c:	f3bf 8f6f 	isb	sy
 8013940:	f3bf 8f4f 	dsb	sy
 8013944:	b662      	cpsie	i
 8013946:	607b      	str	r3, [r7, #4]
}
 8013948:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801394a:	4b11      	ldr	r3, [pc, #68]	@ (8013990 <vPortEnterCritical+0x64>)
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	3301      	adds	r3, #1
 8013950:	4a0f      	ldr	r2, [pc, #60]	@ (8013990 <vPortEnterCritical+0x64>)
 8013952:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013954:	4b0e      	ldr	r3, [pc, #56]	@ (8013990 <vPortEnterCritical+0x64>)
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	2b01      	cmp	r3, #1
 801395a:	d112      	bne.n	8013982 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801395c:	4b0d      	ldr	r3, [pc, #52]	@ (8013994 <vPortEnterCritical+0x68>)
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	b2db      	uxtb	r3, r3
 8013962:	2b00      	cmp	r3, #0
 8013964:	d00d      	beq.n	8013982 <vPortEnterCritical+0x56>
	__asm volatile
 8013966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801396a:	b672      	cpsid	i
 801396c:	f383 8811 	msr	BASEPRI, r3
 8013970:	f3bf 8f6f 	isb	sy
 8013974:	f3bf 8f4f 	dsb	sy
 8013978:	b662      	cpsie	i
 801397a:	603b      	str	r3, [r7, #0]
}
 801397c:	bf00      	nop
 801397e:	bf00      	nop
 8013980:	e7fd      	b.n	801397e <vPortEnterCritical+0x52>
	}
}
 8013982:	bf00      	nop
 8013984:	370c      	adds	r7, #12
 8013986:	46bd      	mov	sp, r7
 8013988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398c:	4770      	bx	lr
 801398e:	bf00      	nop
 8013990:	20000074 	.word	0x20000074
 8013994:	e000ed04 	.word	0xe000ed04

08013998 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013998:	b480      	push	{r7}
 801399a:	b083      	sub	sp, #12
 801399c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801399e:	4b13      	ldr	r3, [pc, #76]	@ (80139ec <vPortExitCritical+0x54>)
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d10d      	bne.n	80139c2 <vPortExitCritical+0x2a>
	__asm volatile
 80139a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139aa:	b672      	cpsid	i
 80139ac:	f383 8811 	msr	BASEPRI, r3
 80139b0:	f3bf 8f6f 	isb	sy
 80139b4:	f3bf 8f4f 	dsb	sy
 80139b8:	b662      	cpsie	i
 80139ba:	607b      	str	r3, [r7, #4]
}
 80139bc:	bf00      	nop
 80139be:	bf00      	nop
 80139c0:	e7fd      	b.n	80139be <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80139c2:	4b0a      	ldr	r3, [pc, #40]	@ (80139ec <vPortExitCritical+0x54>)
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	3b01      	subs	r3, #1
 80139c8:	4a08      	ldr	r2, [pc, #32]	@ (80139ec <vPortExitCritical+0x54>)
 80139ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80139cc:	4b07      	ldr	r3, [pc, #28]	@ (80139ec <vPortExitCritical+0x54>)
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d105      	bne.n	80139e0 <vPortExitCritical+0x48>
 80139d4:	2300      	movs	r3, #0
 80139d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80139d8:	683b      	ldr	r3, [r7, #0]
 80139da:	f383 8811 	msr	BASEPRI, r3
}
 80139de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80139e0:	bf00      	nop
 80139e2:	370c      	adds	r7, #12
 80139e4:	46bd      	mov	sp, r7
 80139e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ea:	4770      	bx	lr
 80139ec:	20000074 	.word	0x20000074

080139f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80139f0:	f3ef 8009 	mrs	r0, PSP
 80139f4:	f3bf 8f6f 	isb	sy
 80139f8:	4b15      	ldr	r3, [pc, #84]	@ (8013a50 <pxCurrentTCBConst>)
 80139fa:	681a      	ldr	r2, [r3, #0]
 80139fc:	f01e 0f10 	tst.w	lr, #16
 8013a00:	bf08      	it	eq
 8013a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a0a:	6010      	str	r0, [r2, #0]
 8013a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013a10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8013a14:	b672      	cpsid	i
 8013a16:	f380 8811 	msr	BASEPRI, r0
 8013a1a:	f3bf 8f4f 	dsb	sy
 8013a1e:	f3bf 8f6f 	isb	sy
 8013a22:	b662      	cpsie	i
 8013a24:	f7ff faee 	bl	8013004 <vTaskSwitchContext>
 8013a28:	f04f 0000 	mov.w	r0, #0
 8013a2c:	f380 8811 	msr	BASEPRI, r0
 8013a30:	bc09      	pop	{r0, r3}
 8013a32:	6819      	ldr	r1, [r3, #0]
 8013a34:	6808      	ldr	r0, [r1, #0]
 8013a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a3a:	f01e 0f10 	tst.w	lr, #16
 8013a3e:	bf08      	it	eq
 8013a40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013a44:	f380 8809 	msr	PSP, r0
 8013a48:	f3bf 8f6f 	isb	sy
 8013a4c:	4770      	bx	lr
 8013a4e:	bf00      	nop

08013a50 <pxCurrentTCBConst>:
 8013a50:	20000ef0 	.word	0x20000ef0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013a54:	bf00      	nop
 8013a56:	bf00      	nop

08013a58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b082      	sub	sp, #8
 8013a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8013a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a62:	b672      	cpsid	i
 8013a64:	f383 8811 	msr	BASEPRI, r3
 8013a68:	f3bf 8f6f 	isb	sy
 8013a6c:	f3bf 8f4f 	dsb	sy
 8013a70:	b662      	cpsie	i
 8013a72:	607b      	str	r3, [r7, #4]
}
 8013a74:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013a76:	f7ff fa09 	bl	8012e8c <xTaskIncrementTick>
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d003      	beq.n	8013a88 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013a80:	4b06      	ldr	r3, [pc, #24]	@ (8013a9c <SysTick_Handler+0x44>)
 8013a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013a86:	601a      	str	r2, [r3, #0]
 8013a88:	2300      	movs	r3, #0
 8013a8a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013a8c:	683b      	ldr	r3, [r7, #0]
 8013a8e:	f383 8811 	msr	BASEPRI, r3
}
 8013a92:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013a94:	bf00      	nop
 8013a96:	3708      	adds	r7, #8
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	bd80      	pop	{r7, pc}
 8013a9c:	e000ed04 	.word	0xe000ed04

08013aa0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013aa0:	b480      	push	{r7}
 8013aa2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8013ad4 <vPortSetupTimerInterrupt+0x34>)
 8013aa6:	2200      	movs	r2, #0
 8013aa8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8013ad8 <vPortSetupTimerInterrupt+0x38>)
 8013aac:	2200      	movs	r2, #0
 8013aae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8013adc <vPortSetupTimerInterrupt+0x3c>)
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8013ae0 <vPortSetupTimerInterrupt+0x40>)
 8013ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8013aba:	099b      	lsrs	r3, r3, #6
 8013abc:	4a09      	ldr	r2, [pc, #36]	@ (8013ae4 <vPortSetupTimerInterrupt+0x44>)
 8013abe:	3b01      	subs	r3, #1
 8013ac0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013ac2:	4b04      	ldr	r3, [pc, #16]	@ (8013ad4 <vPortSetupTimerInterrupt+0x34>)
 8013ac4:	2207      	movs	r2, #7
 8013ac6:	601a      	str	r2, [r3, #0]
}
 8013ac8:	bf00      	nop
 8013aca:	46bd      	mov	sp, r7
 8013acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad0:	4770      	bx	lr
 8013ad2:	bf00      	nop
 8013ad4:	e000e010 	.word	0xe000e010
 8013ad8:	e000e018 	.word	0xe000e018
 8013adc:	20000000 	.word	0x20000000
 8013ae0:	10624dd3 	.word	0x10624dd3
 8013ae4:	e000e014 	.word	0xe000e014

08013ae8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013ae8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8013af8 <vPortEnableVFP+0x10>
 8013aec:	6801      	ldr	r1, [r0, #0]
 8013aee:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8013af2:	6001      	str	r1, [r0, #0]
 8013af4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013af6:	bf00      	nop
 8013af8:	e000ed88 	.word	0xe000ed88

08013afc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013afc:	b480      	push	{r7}
 8013afe:	b085      	sub	sp, #20
 8013b00:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013b02:	f3ef 8305 	mrs	r3, IPSR
 8013b06:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	2b0f      	cmp	r3, #15
 8013b0c:	d917      	bls.n	8013b3e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013b0e:	4a1a      	ldr	r2, [pc, #104]	@ (8013b78 <vPortValidateInterruptPriority+0x7c>)
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	4413      	add	r3, r2
 8013b14:	781b      	ldrb	r3, [r3, #0]
 8013b16:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013b18:	4b18      	ldr	r3, [pc, #96]	@ (8013b7c <vPortValidateInterruptPriority+0x80>)
 8013b1a:	781b      	ldrb	r3, [r3, #0]
 8013b1c:	7afa      	ldrb	r2, [r7, #11]
 8013b1e:	429a      	cmp	r2, r3
 8013b20:	d20d      	bcs.n	8013b3e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8013b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b26:	b672      	cpsid	i
 8013b28:	f383 8811 	msr	BASEPRI, r3
 8013b2c:	f3bf 8f6f 	isb	sy
 8013b30:	f3bf 8f4f 	dsb	sy
 8013b34:	b662      	cpsie	i
 8013b36:	607b      	str	r3, [r7, #4]
}
 8013b38:	bf00      	nop
 8013b3a:	bf00      	nop
 8013b3c:	e7fd      	b.n	8013b3a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013b3e:	4b10      	ldr	r3, [pc, #64]	@ (8013b80 <vPortValidateInterruptPriority+0x84>)
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8013b46:	4b0f      	ldr	r3, [pc, #60]	@ (8013b84 <vPortValidateInterruptPriority+0x88>)
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	429a      	cmp	r2, r3
 8013b4c:	d90d      	bls.n	8013b6a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8013b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b52:	b672      	cpsid	i
 8013b54:	f383 8811 	msr	BASEPRI, r3
 8013b58:	f3bf 8f6f 	isb	sy
 8013b5c:	f3bf 8f4f 	dsb	sy
 8013b60:	b662      	cpsie	i
 8013b62:	603b      	str	r3, [r7, #0]
}
 8013b64:	bf00      	nop
 8013b66:	bf00      	nop
 8013b68:	e7fd      	b.n	8013b66 <vPortValidateInterruptPriority+0x6a>
	}
 8013b6a:	bf00      	nop
 8013b6c:	3714      	adds	r7, #20
 8013b6e:	46bd      	mov	sp, r7
 8013b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b74:	4770      	bx	lr
 8013b76:	bf00      	nop
 8013b78:	e000e3f0 	.word	0xe000e3f0
 8013b7c:	2000101c 	.word	0x2000101c
 8013b80:	e000ed0c 	.word	0xe000ed0c
 8013b84:	20001020 	.word	0x20001020

08013b88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b08a      	sub	sp, #40	@ 0x28
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013b90:	2300      	movs	r3, #0
 8013b92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013b94:	f7ff f8aa 	bl	8012cec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013b98:	4b5f      	ldr	r3, [pc, #380]	@ (8013d18 <pvPortMalloc+0x190>)
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d101      	bne.n	8013ba4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013ba0:	f000 f924 	bl	8013dec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013ba4:	4b5d      	ldr	r3, [pc, #372]	@ (8013d1c <pvPortMalloc+0x194>)
 8013ba6:	681a      	ldr	r2, [r3, #0]
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	4013      	ands	r3, r2
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	f040 8094 	bne.w	8013cda <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d020      	beq.n	8013bfa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8013bb8:	2208      	movs	r2, #8
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	4413      	add	r3, r2
 8013bbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	f003 0307 	and.w	r3, r3, #7
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d017      	beq.n	8013bfa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	f023 0307 	bic.w	r3, r3, #7
 8013bd0:	3308      	adds	r3, #8
 8013bd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	f003 0307 	and.w	r3, r3, #7
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d00d      	beq.n	8013bfa <pvPortMalloc+0x72>
	__asm volatile
 8013bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013be2:	b672      	cpsid	i
 8013be4:	f383 8811 	msr	BASEPRI, r3
 8013be8:	f3bf 8f6f 	isb	sy
 8013bec:	f3bf 8f4f 	dsb	sy
 8013bf0:	b662      	cpsie	i
 8013bf2:	617b      	str	r3, [r7, #20]
}
 8013bf4:	bf00      	nop
 8013bf6:	bf00      	nop
 8013bf8:	e7fd      	b.n	8013bf6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d06c      	beq.n	8013cda <pvPortMalloc+0x152>
 8013c00:	4b47      	ldr	r3, [pc, #284]	@ (8013d20 <pvPortMalloc+0x198>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	687a      	ldr	r2, [r7, #4]
 8013c06:	429a      	cmp	r2, r3
 8013c08:	d867      	bhi.n	8013cda <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013c0a:	4b46      	ldr	r3, [pc, #280]	@ (8013d24 <pvPortMalloc+0x19c>)
 8013c0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013c0e:	4b45      	ldr	r3, [pc, #276]	@ (8013d24 <pvPortMalloc+0x19c>)
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013c14:	e004      	b.n	8013c20 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8013c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c22:	685b      	ldr	r3, [r3, #4]
 8013c24:	687a      	ldr	r2, [r7, #4]
 8013c26:	429a      	cmp	r2, r3
 8013c28:	d903      	bls.n	8013c32 <pvPortMalloc+0xaa>
 8013c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d1f1      	bne.n	8013c16 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013c32:	4b39      	ldr	r3, [pc, #228]	@ (8013d18 <pvPortMalloc+0x190>)
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013c38:	429a      	cmp	r2, r3
 8013c3a:	d04e      	beq.n	8013cda <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013c3c:	6a3b      	ldr	r3, [r7, #32]
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	2208      	movs	r2, #8
 8013c42:	4413      	add	r3, r2
 8013c44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c48:	681a      	ldr	r2, [r3, #0]
 8013c4a:	6a3b      	ldr	r3, [r7, #32]
 8013c4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c50:	685a      	ldr	r2, [r3, #4]
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	1ad2      	subs	r2, r2, r3
 8013c56:	2308      	movs	r3, #8
 8013c58:	005b      	lsls	r3, r3, #1
 8013c5a:	429a      	cmp	r2, r3
 8013c5c:	d922      	bls.n	8013ca4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013c5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	4413      	add	r3, r2
 8013c64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013c66:	69bb      	ldr	r3, [r7, #24]
 8013c68:	f003 0307 	and.w	r3, r3, #7
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d00d      	beq.n	8013c8c <pvPortMalloc+0x104>
	__asm volatile
 8013c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c74:	b672      	cpsid	i
 8013c76:	f383 8811 	msr	BASEPRI, r3
 8013c7a:	f3bf 8f6f 	isb	sy
 8013c7e:	f3bf 8f4f 	dsb	sy
 8013c82:	b662      	cpsie	i
 8013c84:	613b      	str	r3, [r7, #16]
}
 8013c86:	bf00      	nop
 8013c88:	bf00      	nop
 8013c8a:	e7fd      	b.n	8013c88 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c8e:	685a      	ldr	r2, [r3, #4]
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	1ad2      	subs	r2, r2, r3
 8013c94:	69bb      	ldr	r3, [r7, #24]
 8013c96:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c9a:	687a      	ldr	r2, [r7, #4]
 8013c9c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013c9e:	69b8      	ldr	r0, [r7, #24]
 8013ca0:	f000 f906 	bl	8013eb0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8013d20 <pvPortMalloc+0x198>)
 8013ca6:	681a      	ldr	r2, [r3, #0]
 8013ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013caa:	685b      	ldr	r3, [r3, #4]
 8013cac:	1ad3      	subs	r3, r2, r3
 8013cae:	4a1c      	ldr	r2, [pc, #112]	@ (8013d20 <pvPortMalloc+0x198>)
 8013cb0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8013d20 <pvPortMalloc+0x198>)
 8013cb4:	681a      	ldr	r2, [r3, #0]
 8013cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8013d28 <pvPortMalloc+0x1a0>)
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	429a      	cmp	r2, r3
 8013cbc:	d203      	bcs.n	8013cc6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013cbe:	4b18      	ldr	r3, [pc, #96]	@ (8013d20 <pvPortMalloc+0x198>)
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	4a19      	ldr	r2, [pc, #100]	@ (8013d28 <pvPortMalloc+0x1a0>)
 8013cc4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cc8:	685a      	ldr	r2, [r3, #4]
 8013cca:	4b14      	ldr	r3, [pc, #80]	@ (8013d1c <pvPortMalloc+0x194>)
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	431a      	orrs	r2, r3
 8013cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cd2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013cda:	f7ff f815 	bl	8012d08 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8013cde:	69fb      	ldr	r3, [r7, #28]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d101      	bne.n	8013ce8 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8013ce4:	f7ec fc94 	bl	8000610 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013ce8:	69fb      	ldr	r3, [r7, #28]
 8013cea:	f003 0307 	and.w	r3, r3, #7
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d00d      	beq.n	8013d0e <pvPortMalloc+0x186>
	__asm volatile
 8013cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013cf6:	b672      	cpsid	i
 8013cf8:	f383 8811 	msr	BASEPRI, r3
 8013cfc:	f3bf 8f6f 	isb	sy
 8013d00:	f3bf 8f4f 	dsb	sy
 8013d04:	b662      	cpsie	i
 8013d06:	60fb      	str	r3, [r7, #12]
}
 8013d08:	bf00      	nop
 8013d0a:	bf00      	nop
 8013d0c:	e7fd      	b.n	8013d0a <pvPortMalloc+0x182>
	return pvReturn;
 8013d0e:	69fb      	ldr	r3, [r7, #28]
}
 8013d10:	4618      	mov	r0, r3
 8013d12:	3728      	adds	r7, #40	@ 0x28
 8013d14:	46bd      	mov	sp, r7
 8013d16:	bd80      	pop	{r7, pc}
 8013d18:	2000902c 	.word	0x2000902c
 8013d1c:	20009038 	.word	0x20009038
 8013d20:	20009030 	.word	0x20009030
 8013d24:	20009024 	.word	0x20009024
 8013d28:	20009034 	.word	0x20009034

08013d2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	b086      	sub	sp, #24
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d04e      	beq.n	8013ddc <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013d3e:	2308      	movs	r3, #8
 8013d40:	425b      	negs	r3, r3
 8013d42:	697a      	ldr	r2, [r7, #20]
 8013d44:	4413      	add	r3, r2
 8013d46:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013d48:	697b      	ldr	r3, [r7, #20]
 8013d4a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013d4c:	693b      	ldr	r3, [r7, #16]
 8013d4e:	685a      	ldr	r2, [r3, #4]
 8013d50:	4b24      	ldr	r3, [pc, #144]	@ (8013de4 <vPortFree+0xb8>)
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	4013      	ands	r3, r2
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d10d      	bne.n	8013d76 <vPortFree+0x4a>
	__asm volatile
 8013d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d5e:	b672      	cpsid	i
 8013d60:	f383 8811 	msr	BASEPRI, r3
 8013d64:	f3bf 8f6f 	isb	sy
 8013d68:	f3bf 8f4f 	dsb	sy
 8013d6c:	b662      	cpsie	i
 8013d6e:	60fb      	str	r3, [r7, #12]
}
 8013d70:	bf00      	nop
 8013d72:	bf00      	nop
 8013d74:	e7fd      	b.n	8013d72 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013d76:	693b      	ldr	r3, [r7, #16]
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d00d      	beq.n	8013d9a <vPortFree+0x6e>
	__asm volatile
 8013d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d82:	b672      	cpsid	i
 8013d84:	f383 8811 	msr	BASEPRI, r3
 8013d88:	f3bf 8f6f 	isb	sy
 8013d8c:	f3bf 8f4f 	dsb	sy
 8013d90:	b662      	cpsie	i
 8013d92:	60bb      	str	r3, [r7, #8]
}
 8013d94:	bf00      	nop
 8013d96:	bf00      	nop
 8013d98:	e7fd      	b.n	8013d96 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013d9a:	693b      	ldr	r3, [r7, #16]
 8013d9c:	685a      	ldr	r2, [r3, #4]
 8013d9e:	4b11      	ldr	r3, [pc, #68]	@ (8013de4 <vPortFree+0xb8>)
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	4013      	ands	r3, r2
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d019      	beq.n	8013ddc <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013da8:	693b      	ldr	r3, [r7, #16]
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d115      	bne.n	8013ddc <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013db0:	693b      	ldr	r3, [r7, #16]
 8013db2:	685a      	ldr	r2, [r3, #4]
 8013db4:	4b0b      	ldr	r3, [pc, #44]	@ (8013de4 <vPortFree+0xb8>)
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	43db      	mvns	r3, r3
 8013dba:	401a      	ands	r2, r3
 8013dbc:	693b      	ldr	r3, [r7, #16]
 8013dbe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013dc0:	f7fe ff94 	bl	8012cec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013dc4:	693b      	ldr	r3, [r7, #16]
 8013dc6:	685a      	ldr	r2, [r3, #4]
 8013dc8:	4b07      	ldr	r3, [pc, #28]	@ (8013de8 <vPortFree+0xbc>)
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	4413      	add	r3, r2
 8013dce:	4a06      	ldr	r2, [pc, #24]	@ (8013de8 <vPortFree+0xbc>)
 8013dd0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013dd2:	6938      	ldr	r0, [r7, #16]
 8013dd4:	f000 f86c 	bl	8013eb0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013dd8:	f7fe ff96 	bl	8012d08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013ddc:	bf00      	nop
 8013dde:	3718      	adds	r7, #24
 8013de0:	46bd      	mov	sp, r7
 8013de2:	bd80      	pop	{r7, pc}
 8013de4:	20009038 	.word	0x20009038
 8013de8:	20009030 	.word	0x20009030

08013dec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013dec:	b480      	push	{r7}
 8013dee:	b085      	sub	sp, #20
 8013df0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013df2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013df6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013df8:	4b27      	ldr	r3, [pc, #156]	@ (8013e98 <prvHeapInit+0xac>)
 8013dfa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	f003 0307 	and.w	r3, r3, #7
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d00c      	beq.n	8013e20 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	3307      	adds	r3, #7
 8013e0a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	f023 0307 	bic.w	r3, r3, #7
 8013e12:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013e14:	68ba      	ldr	r2, [r7, #8]
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	1ad3      	subs	r3, r2, r3
 8013e1a:	4a1f      	ldr	r2, [pc, #124]	@ (8013e98 <prvHeapInit+0xac>)
 8013e1c:	4413      	add	r3, r2
 8013e1e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013e24:	4a1d      	ldr	r2, [pc, #116]	@ (8013e9c <prvHeapInit+0xb0>)
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8013e9c <prvHeapInit+0xb0>)
 8013e2c:	2200      	movs	r2, #0
 8013e2e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	68ba      	ldr	r2, [r7, #8]
 8013e34:	4413      	add	r3, r2
 8013e36:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013e38:	2208      	movs	r2, #8
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	1a9b      	subs	r3, r3, r2
 8013e3e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	f023 0307 	bic.w	r3, r3, #7
 8013e46:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	4a15      	ldr	r2, [pc, #84]	@ (8013ea0 <prvHeapInit+0xb4>)
 8013e4c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013e4e:	4b14      	ldr	r3, [pc, #80]	@ (8013ea0 <prvHeapInit+0xb4>)
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	2200      	movs	r2, #0
 8013e54:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013e56:	4b12      	ldr	r3, [pc, #72]	@ (8013ea0 <prvHeapInit+0xb4>)
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	2200      	movs	r2, #0
 8013e5c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013e62:	683b      	ldr	r3, [r7, #0]
 8013e64:	68fa      	ldr	r2, [r7, #12]
 8013e66:	1ad2      	subs	r2, r2, r3
 8013e68:	683b      	ldr	r3, [r7, #0]
 8013e6a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8013ea0 <prvHeapInit+0xb4>)
 8013e6e:	681a      	ldr	r2, [r3, #0]
 8013e70:	683b      	ldr	r3, [r7, #0]
 8013e72:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013e74:	683b      	ldr	r3, [r7, #0]
 8013e76:	685b      	ldr	r3, [r3, #4]
 8013e78:	4a0a      	ldr	r2, [pc, #40]	@ (8013ea4 <prvHeapInit+0xb8>)
 8013e7a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013e7c:	683b      	ldr	r3, [r7, #0]
 8013e7e:	685b      	ldr	r3, [r3, #4]
 8013e80:	4a09      	ldr	r2, [pc, #36]	@ (8013ea8 <prvHeapInit+0xbc>)
 8013e82:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013e84:	4b09      	ldr	r3, [pc, #36]	@ (8013eac <prvHeapInit+0xc0>)
 8013e86:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8013e8a:	601a      	str	r2, [r3, #0]
}
 8013e8c:	bf00      	nop
 8013e8e:	3714      	adds	r7, #20
 8013e90:	46bd      	mov	sp, r7
 8013e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e96:	4770      	bx	lr
 8013e98:	20001024 	.word	0x20001024
 8013e9c:	20009024 	.word	0x20009024
 8013ea0:	2000902c 	.word	0x2000902c
 8013ea4:	20009034 	.word	0x20009034
 8013ea8:	20009030 	.word	0x20009030
 8013eac:	20009038 	.word	0x20009038

08013eb0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013eb0:	b480      	push	{r7}
 8013eb2:	b085      	sub	sp, #20
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013eb8:	4b28      	ldr	r3, [pc, #160]	@ (8013f5c <prvInsertBlockIntoFreeList+0xac>)
 8013eba:	60fb      	str	r3, [r7, #12]
 8013ebc:	e002      	b.n	8013ec4 <prvInsertBlockIntoFreeList+0x14>
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	60fb      	str	r3, [r7, #12]
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	687a      	ldr	r2, [r7, #4]
 8013eca:	429a      	cmp	r2, r3
 8013ecc:	d8f7      	bhi.n	8013ebe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	685b      	ldr	r3, [r3, #4]
 8013ed6:	68ba      	ldr	r2, [r7, #8]
 8013ed8:	4413      	add	r3, r2
 8013eda:	687a      	ldr	r2, [r7, #4]
 8013edc:	429a      	cmp	r2, r3
 8013ede:	d108      	bne.n	8013ef2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	685a      	ldr	r2, [r3, #4]
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	685b      	ldr	r3, [r3, #4]
 8013ee8:	441a      	add	r2, r3
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	685b      	ldr	r3, [r3, #4]
 8013efa:	68ba      	ldr	r2, [r7, #8]
 8013efc:	441a      	add	r2, r3
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	429a      	cmp	r2, r3
 8013f04:	d118      	bne.n	8013f38 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	681a      	ldr	r2, [r3, #0]
 8013f0a:	4b15      	ldr	r3, [pc, #84]	@ (8013f60 <prvInsertBlockIntoFreeList+0xb0>)
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	429a      	cmp	r2, r3
 8013f10:	d00d      	beq.n	8013f2e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	685a      	ldr	r2, [r3, #4]
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	685b      	ldr	r3, [r3, #4]
 8013f1c:	441a      	add	r2, r3
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	681a      	ldr	r2, [r3, #0]
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	601a      	str	r2, [r3, #0]
 8013f2c:	e008      	b.n	8013f40 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8013f60 <prvInsertBlockIntoFreeList+0xb0>)
 8013f30:	681a      	ldr	r2, [r3, #0]
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	601a      	str	r2, [r3, #0]
 8013f36:	e003      	b.n	8013f40 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	681a      	ldr	r2, [r3, #0]
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013f40:	68fa      	ldr	r2, [r7, #12]
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	429a      	cmp	r2, r3
 8013f46:	d002      	beq.n	8013f4e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	687a      	ldr	r2, [r7, #4]
 8013f4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013f4e:	bf00      	nop
 8013f50:	3714      	adds	r7, #20
 8013f52:	46bd      	mov	sp, r7
 8013f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f58:	4770      	bx	lr
 8013f5a:	bf00      	nop
 8013f5c:	20009024 	.word	0x20009024
 8013f60:	2000902c 	.word	0x2000902c

08013f64 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8013f64:	b580      	push	{r7, lr}
 8013f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8013f68:	2201      	movs	r2, #1
 8013f6a:	490e      	ldr	r1, [pc, #56]	@ (8013fa4 <MX_USB_HOST_Init+0x40>)
 8013f6c:	480e      	ldr	r0, [pc, #56]	@ (8013fa8 <MX_USB_HOST_Init+0x44>)
 8013f6e:	f7fb fde1 	bl	800fb34 <USBH_Init>
 8013f72:	4603      	mov	r3, r0
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d001      	beq.n	8013f7c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8013f78:	f7ed fe5e 	bl	8001c38 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8013f7c:	490b      	ldr	r1, [pc, #44]	@ (8013fac <MX_USB_HOST_Init+0x48>)
 8013f7e:	480a      	ldr	r0, [pc, #40]	@ (8013fa8 <MX_USB_HOST_Init+0x44>)
 8013f80:	f7fb feab 	bl	800fcda <USBH_RegisterClass>
 8013f84:	4603      	mov	r3, r0
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d001      	beq.n	8013f8e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8013f8a:	f7ed fe55 	bl	8001c38 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8013f8e:	4806      	ldr	r0, [pc, #24]	@ (8013fa8 <MX_USB_HOST_Init+0x44>)
 8013f90:	f7fb ff2f 	bl	800fdf2 <USBH_Start>
 8013f94:	4603      	mov	r3, r0
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d001      	beq.n	8013f9e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8013f9a:	f7ed fe4d 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8013f9e:	bf00      	nop
 8013fa0:	bd80      	pop	{r7, pc}
 8013fa2:	bf00      	nop
 8013fa4:	08013fb1 	.word	0x08013fb1
 8013fa8:	2000903c 	.word	0x2000903c
 8013fac:	20000054 	.word	0x20000054

08013fb0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8013fb0:	b480      	push	{r7}
 8013fb2:	b083      	sub	sp, #12
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	6078      	str	r0, [r7, #4]
 8013fb8:	460b      	mov	r3, r1
 8013fba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8013fbc:	78fb      	ldrb	r3, [r7, #3]
 8013fbe:	3b01      	subs	r3, #1
 8013fc0:	2b04      	cmp	r3, #4
 8013fc2:	d819      	bhi.n	8013ff8 <USBH_UserProcess+0x48>
 8013fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8013fcc <USBH_UserProcess+0x1c>)
 8013fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fca:	bf00      	nop
 8013fcc:	08013ff9 	.word	0x08013ff9
 8013fd0:	08013fe9 	.word	0x08013fe9
 8013fd4:	08013ff9 	.word	0x08013ff9
 8013fd8:	08013ff1 	.word	0x08013ff1
 8013fdc:	08013fe1 	.word	0x08013fe1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8013fe0:	4b09      	ldr	r3, [pc, #36]	@ (8014008 <USBH_UserProcess+0x58>)
 8013fe2:	2203      	movs	r2, #3
 8013fe4:	701a      	strb	r2, [r3, #0]
  break;
 8013fe6:	e008      	b.n	8013ffa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8013fe8:	4b07      	ldr	r3, [pc, #28]	@ (8014008 <USBH_UserProcess+0x58>)
 8013fea:	2202      	movs	r2, #2
 8013fec:	701a      	strb	r2, [r3, #0]
  break;
 8013fee:	e004      	b.n	8013ffa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8013ff0:	4b05      	ldr	r3, [pc, #20]	@ (8014008 <USBH_UserProcess+0x58>)
 8013ff2:	2201      	movs	r2, #1
 8013ff4:	701a      	strb	r2, [r3, #0]
  break;
 8013ff6:	e000      	b.n	8013ffa <USBH_UserProcess+0x4a>

  default:
  break;
 8013ff8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8013ffa:	bf00      	nop
 8013ffc:	370c      	adds	r7, #12
 8013ffe:	46bd      	mov	sp, r7
 8014000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014004:	4770      	bx	lr
 8014006:	bf00      	nop
 8014008:	20009420 	.word	0x20009420

0801400c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801400c:	b580      	push	{r7, lr}
 801400e:	b08a      	sub	sp, #40	@ 0x28
 8014010:	af00      	add	r7, sp, #0
 8014012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014014:	f107 0314 	add.w	r3, r7, #20
 8014018:	2200      	movs	r2, #0
 801401a:	601a      	str	r2, [r3, #0]
 801401c:	605a      	str	r2, [r3, #4]
 801401e:	609a      	str	r2, [r3, #8]
 8014020:	60da      	str	r2, [r3, #12]
 8014022:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801402c:	d13c      	bne.n	80140a8 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801402e:	4b20      	ldr	r3, [pc, #128]	@ (80140b0 <HAL_HCD_MspInit+0xa4>)
 8014030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014032:	4a1f      	ldr	r2, [pc, #124]	@ (80140b0 <HAL_HCD_MspInit+0xa4>)
 8014034:	f043 0301 	orr.w	r3, r3, #1
 8014038:	6313      	str	r3, [r2, #48]	@ 0x30
 801403a:	4b1d      	ldr	r3, [pc, #116]	@ (80140b0 <HAL_HCD_MspInit+0xa4>)
 801403c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801403e:	f003 0301 	and.w	r3, r3, #1
 8014042:	613b      	str	r3, [r7, #16]
 8014044:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8014046:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 801404a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801404c:	2302      	movs	r3, #2
 801404e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014050:	2300      	movs	r3, #0
 8014052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014054:	2303      	movs	r3, #3
 8014056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8014058:	230a      	movs	r3, #10
 801405a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801405c:	f107 0314 	add.w	r3, r7, #20
 8014060:	4619      	mov	r1, r3
 8014062:	4814      	ldr	r0, [pc, #80]	@ (80140b4 <HAL_HCD_MspInit+0xa8>)
 8014064:	f7f0 fd5c 	bl	8004b20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014068:	4b11      	ldr	r3, [pc, #68]	@ (80140b0 <HAL_HCD_MspInit+0xa4>)
 801406a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801406c:	4a10      	ldr	r2, [pc, #64]	@ (80140b0 <HAL_HCD_MspInit+0xa4>)
 801406e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014072:	6353      	str	r3, [r2, #52]	@ 0x34
 8014074:	4b0e      	ldr	r3, [pc, #56]	@ (80140b0 <HAL_HCD_MspInit+0xa4>)
 8014076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801407c:	60fb      	str	r3, [r7, #12]
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	4b0b      	ldr	r3, [pc, #44]	@ (80140b0 <HAL_HCD_MspInit+0xa4>)
 8014082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014084:	4a0a      	ldr	r2, [pc, #40]	@ (80140b0 <HAL_HCD_MspInit+0xa4>)
 8014086:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801408a:	6453      	str	r3, [r2, #68]	@ 0x44
 801408c:	4b08      	ldr	r3, [pc, #32]	@ (80140b0 <HAL_HCD_MspInit+0xa4>)
 801408e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014090:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8014094:	60bb      	str	r3, [r7, #8]
 8014096:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8014098:	2200      	movs	r2, #0
 801409a:	2105      	movs	r1, #5
 801409c:	2043      	movs	r0, #67	@ 0x43
 801409e:	f7ef fdd5 	bl	8003c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80140a2:	2043      	movs	r0, #67	@ 0x43
 80140a4:	f7ef fdee 	bl	8003c84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80140a8:	bf00      	nop
 80140aa:	3728      	adds	r7, #40	@ 0x28
 80140ac:	46bd      	mov	sp, r7
 80140ae:	bd80      	pop	{r7, pc}
 80140b0:	40023800 	.word	0x40023800
 80140b4:	40020000 	.word	0x40020000

080140b8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80140b8:	b580      	push	{r7, lr}
 80140ba:	b082      	sub	sp, #8
 80140bc:	af00      	add	r7, sp, #0
 80140be:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80140c6:	4618      	mov	r0, r3
 80140c8:	f7fc facb 	bl	8010662 <USBH_LL_IncTimer>
}
 80140cc:	bf00      	nop
 80140ce:	3708      	adds	r7, #8
 80140d0:	46bd      	mov	sp, r7
 80140d2:	bd80      	pop	{r7, pc}

080140d4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80140d4:	b580      	push	{r7, lr}
 80140d6:	b082      	sub	sp, #8
 80140d8:	af00      	add	r7, sp, #0
 80140da:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80140e2:	4618      	mov	r0, r3
 80140e4:	f7fc fb0b 	bl	80106fe <USBH_LL_Connect>
}
 80140e8:	bf00      	nop
 80140ea:	3708      	adds	r7, #8
 80140ec:	46bd      	mov	sp, r7
 80140ee:	bd80      	pop	{r7, pc}

080140f0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80140f0:	b580      	push	{r7, lr}
 80140f2:	b082      	sub	sp, #8
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80140fe:	4618      	mov	r0, r3
 8014100:	f7fc fb18 	bl	8010734 <USBH_LL_Disconnect>
}
 8014104:	bf00      	nop
 8014106:	3708      	adds	r7, #8
 8014108:	46bd      	mov	sp, r7
 801410a:	bd80      	pop	{r7, pc}

0801410c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801410c:	b580      	push	{r7, lr}
 801410e:	b082      	sub	sp, #8
 8014110:	af00      	add	r7, sp, #0
 8014112:	6078      	str	r0, [r7, #4]
 8014114:	460b      	mov	r3, r1
 8014116:	70fb      	strb	r3, [r7, #3]
 8014118:	4613      	mov	r3, r2
 801411a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8014122:	4618      	mov	r0, r3
 8014124:	f7fc fb6c 	bl	8010800 <USBH_LL_NotifyURBChange>
#endif
}
 8014128:	bf00      	nop
 801412a:	3708      	adds	r7, #8
 801412c:	46bd      	mov	sp, r7
 801412e:	bd80      	pop	{r7, pc}

08014130 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8014130:	b580      	push	{r7, lr}
 8014132:	b082      	sub	sp, #8
 8014134:	af00      	add	r7, sp, #0
 8014136:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801413e:	4618      	mov	r0, r3
 8014140:	f7fc fab9 	bl	80106b6 <USBH_LL_PortEnabled>
}
 8014144:	bf00      	nop
 8014146:	3708      	adds	r7, #8
 8014148:	46bd      	mov	sp, r7
 801414a:	bd80      	pop	{r7, pc}

0801414c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801414c:	b580      	push	{r7, lr}
 801414e:	b082      	sub	sp, #8
 8014150:	af00      	add	r7, sp, #0
 8014152:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801415a:	4618      	mov	r0, r3
 801415c:	f7fc fabd 	bl	80106da <USBH_LL_PortDisabled>
}
 8014160:	bf00      	nop
 8014162:	3708      	adds	r7, #8
 8014164:	46bd      	mov	sp, r7
 8014166:	bd80      	pop	{r7, pc}

08014168 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8014168:	b580      	push	{r7, lr}
 801416a:	b082      	sub	sp, #8
 801416c:	af00      	add	r7, sp, #0
 801416e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8014176:	2b01      	cmp	r3, #1
 8014178:	d12a      	bne.n	80141d0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801417a:	4a18      	ldr	r2, [pc, #96]	@ (80141dc <USBH_LL_Init+0x74>)
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	4a15      	ldr	r2, [pc, #84]	@ (80141dc <USBH_LL_Init+0x74>)
 8014186:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801418a:	4b14      	ldr	r3, [pc, #80]	@ (80141dc <USBH_LL_Init+0x74>)
 801418c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8014190:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8014192:	4b12      	ldr	r3, [pc, #72]	@ (80141dc <USBH_LL_Init+0x74>)
 8014194:	2208      	movs	r2, #8
 8014196:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8014198:	4b10      	ldr	r3, [pc, #64]	@ (80141dc <USBH_LL_Init+0x74>)
 801419a:	2201      	movs	r2, #1
 801419c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801419e:	4b0f      	ldr	r3, [pc, #60]	@ (80141dc <USBH_LL_Init+0x74>)
 80141a0:	2200      	movs	r2, #0
 80141a2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80141a4:	4b0d      	ldr	r3, [pc, #52]	@ (80141dc <USBH_LL_Init+0x74>)
 80141a6:	2202      	movs	r2, #2
 80141a8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80141aa:	4b0c      	ldr	r3, [pc, #48]	@ (80141dc <USBH_LL_Init+0x74>)
 80141ac:	2200      	movs	r2, #0
 80141ae:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80141b0:	480a      	ldr	r0, [pc, #40]	@ (80141dc <USBH_LL_Init+0x74>)
 80141b2:	f7f0 fe92 	bl	8004eda <HAL_HCD_Init>
 80141b6:	4603      	mov	r3, r0
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d001      	beq.n	80141c0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80141bc:	f7ed fd3c 	bl	8001c38 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80141c0:	4806      	ldr	r0, [pc, #24]	@ (80141dc <USBH_LL_Init+0x74>)
 80141c2:	f7f1 faf3 	bl	80057ac <HAL_HCD_GetCurrentFrame>
 80141c6:	4603      	mov	r3, r0
 80141c8:	4619      	mov	r1, r3
 80141ca:	6878      	ldr	r0, [r7, #4]
 80141cc:	f7fc fa3a 	bl	8010644 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80141d0:	2300      	movs	r3, #0
}
 80141d2:	4618      	mov	r0, r3
 80141d4:	3708      	adds	r7, #8
 80141d6:	46bd      	mov	sp, r7
 80141d8:	bd80      	pop	{r7, pc}
 80141da:	bf00      	nop
 80141dc:	20009424 	.word	0x20009424

080141e0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80141e0:	b580      	push	{r7, lr}
 80141e2:	b084      	sub	sp, #16
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80141e8:	2300      	movs	r3, #0
 80141ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80141ec:	2300      	movs	r3, #0
 80141ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80141f6:	4618      	mov	r0, r3
 80141f8:	f7f1 fa60 	bl	80056bc <HAL_HCD_Start>
 80141fc:	4603      	mov	r3, r0
 80141fe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014200:	7bfb      	ldrb	r3, [r7, #15]
 8014202:	4618      	mov	r0, r3
 8014204:	f000 f95e 	bl	80144c4 <USBH_Get_USB_Status>
 8014208:	4603      	mov	r3, r0
 801420a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801420c:	7bbb      	ldrb	r3, [r7, #14]
}
 801420e:	4618      	mov	r0, r3
 8014210:	3710      	adds	r7, #16
 8014212:	46bd      	mov	sp, r7
 8014214:	bd80      	pop	{r7, pc}

08014216 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8014216:	b580      	push	{r7, lr}
 8014218:	b084      	sub	sp, #16
 801421a:	af00      	add	r7, sp, #0
 801421c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801421e:	2300      	movs	r3, #0
 8014220:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014222:	2300      	movs	r3, #0
 8014224:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801422c:	4618      	mov	r0, r3
 801422e:	f7f1 fa68 	bl	8005702 <HAL_HCD_Stop>
 8014232:	4603      	mov	r3, r0
 8014234:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014236:	7bfb      	ldrb	r3, [r7, #15]
 8014238:	4618      	mov	r0, r3
 801423a:	f000 f943 	bl	80144c4 <USBH_Get_USB_Status>
 801423e:	4603      	mov	r3, r0
 8014240:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014242:	7bbb      	ldrb	r3, [r7, #14]
}
 8014244:	4618      	mov	r0, r3
 8014246:	3710      	adds	r7, #16
 8014248:	46bd      	mov	sp, r7
 801424a:	bd80      	pop	{r7, pc}

0801424c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801424c:	b580      	push	{r7, lr}
 801424e:	b084      	sub	sp, #16
 8014250:	af00      	add	r7, sp, #0
 8014252:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8014254:	2301      	movs	r3, #1
 8014256:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801425e:	4618      	mov	r0, r3
 8014260:	f7f1 fab2 	bl	80057c8 <HAL_HCD_GetCurrentSpeed>
 8014264:	4603      	mov	r3, r0
 8014266:	2b02      	cmp	r3, #2
 8014268:	d00c      	beq.n	8014284 <USBH_LL_GetSpeed+0x38>
 801426a:	2b02      	cmp	r3, #2
 801426c:	d80d      	bhi.n	801428a <USBH_LL_GetSpeed+0x3e>
 801426e:	2b00      	cmp	r3, #0
 8014270:	d002      	beq.n	8014278 <USBH_LL_GetSpeed+0x2c>
 8014272:	2b01      	cmp	r3, #1
 8014274:	d003      	beq.n	801427e <USBH_LL_GetSpeed+0x32>
 8014276:	e008      	b.n	801428a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8014278:	2300      	movs	r3, #0
 801427a:	73fb      	strb	r3, [r7, #15]
    break;
 801427c:	e008      	b.n	8014290 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801427e:	2301      	movs	r3, #1
 8014280:	73fb      	strb	r3, [r7, #15]
    break;
 8014282:	e005      	b.n	8014290 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8014284:	2302      	movs	r3, #2
 8014286:	73fb      	strb	r3, [r7, #15]
    break;
 8014288:	e002      	b.n	8014290 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801428a:	2301      	movs	r3, #1
 801428c:	73fb      	strb	r3, [r7, #15]
    break;
 801428e:	bf00      	nop
  }
  return  speed;
 8014290:	7bfb      	ldrb	r3, [r7, #15]
}
 8014292:	4618      	mov	r0, r3
 8014294:	3710      	adds	r7, #16
 8014296:	46bd      	mov	sp, r7
 8014298:	bd80      	pop	{r7, pc}

0801429a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801429a:	b580      	push	{r7, lr}
 801429c:	b084      	sub	sp, #16
 801429e:	af00      	add	r7, sp, #0
 80142a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80142a2:	2300      	movs	r3, #0
 80142a4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80142a6:	2300      	movs	r3, #0
 80142a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80142b0:	4618      	mov	r0, r3
 80142b2:	f7f1 fa43 	bl	800573c <HAL_HCD_ResetPort>
 80142b6:	4603      	mov	r3, r0
 80142b8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80142ba:	7bfb      	ldrb	r3, [r7, #15]
 80142bc:	4618      	mov	r0, r3
 80142be:	f000 f901 	bl	80144c4 <USBH_Get_USB_Status>
 80142c2:	4603      	mov	r3, r0
 80142c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80142c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80142c8:	4618      	mov	r0, r3
 80142ca:	3710      	adds	r7, #16
 80142cc:	46bd      	mov	sp, r7
 80142ce:	bd80      	pop	{r7, pc}

080142d0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b082      	sub	sp, #8
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
 80142d8:	460b      	mov	r3, r1
 80142da:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80142e2:	78fa      	ldrb	r2, [r7, #3]
 80142e4:	4611      	mov	r1, r2
 80142e6:	4618      	mov	r0, r3
 80142e8:	f7f1 fa4b 	bl	8005782 <HAL_HCD_HC_GetXferCount>
 80142ec:	4603      	mov	r3, r0
}
 80142ee:	4618      	mov	r0, r3
 80142f0:	3708      	adds	r7, #8
 80142f2:	46bd      	mov	sp, r7
 80142f4:	bd80      	pop	{r7, pc}

080142f6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80142f6:	b590      	push	{r4, r7, lr}
 80142f8:	b089      	sub	sp, #36	@ 0x24
 80142fa:	af04      	add	r7, sp, #16
 80142fc:	6078      	str	r0, [r7, #4]
 80142fe:	4608      	mov	r0, r1
 8014300:	4611      	mov	r1, r2
 8014302:	461a      	mov	r2, r3
 8014304:	4603      	mov	r3, r0
 8014306:	70fb      	strb	r3, [r7, #3]
 8014308:	460b      	mov	r3, r1
 801430a:	70bb      	strb	r3, [r7, #2]
 801430c:	4613      	mov	r3, r2
 801430e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014310:	2300      	movs	r3, #0
 8014312:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014314:	2300      	movs	r3, #0
 8014316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801431e:	787c      	ldrb	r4, [r7, #1]
 8014320:	78ba      	ldrb	r2, [r7, #2]
 8014322:	78f9      	ldrb	r1, [r7, #3]
 8014324:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014326:	9302      	str	r3, [sp, #8]
 8014328:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801432c:	9301      	str	r3, [sp, #4]
 801432e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014332:	9300      	str	r3, [sp, #0]
 8014334:	4623      	mov	r3, r4
 8014336:	f7f0 fe37 	bl	8004fa8 <HAL_HCD_HC_Init>
 801433a:	4603      	mov	r3, r0
 801433c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801433e:	7bfb      	ldrb	r3, [r7, #15]
 8014340:	4618      	mov	r0, r3
 8014342:	f000 f8bf 	bl	80144c4 <USBH_Get_USB_Status>
 8014346:	4603      	mov	r3, r0
 8014348:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801434a:	7bbb      	ldrb	r3, [r7, #14]
}
 801434c:	4618      	mov	r0, r3
 801434e:	3714      	adds	r7, #20
 8014350:	46bd      	mov	sp, r7
 8014352:	bd90      	pop	{r4, r7, pc}

08014354 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8014354:	b580      	push	{r7, lr}
 8014356:	b084      	sub	sp, #16
 8014358:	af00      	add	r7, sp, #0
 801435a:	6078      	str	r0, [r7, #4]
 801435c:	460b      	mov	r3, r1
 801435e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014360:	2300      	movs	r3, #0
 8014362:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014364:	2300      	movs	r3, #0
 8014366:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801436e:	78fa      	ldrb	r2, [r7, #3]
 8014370:	4611      	mov	r1, r2
 8014372:	4618      	mov	r0, r3
 8014374:	f7f0 fed0 	bl	8005118 <HAL_HCD_HC_Halt>
 8014378:	4603      	mov	r3, r0
 801437a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801437c:	7bfb      	ldrb	r3, [r7, #15]
 801437e:	4618      	mov	r0, r3
 8014380:	f000 f8a0 	bl	80144c4 <USBH_Get_USB_Status>
 8014384:	4603      	mov	r3, r0
 8014386:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014388:	7bbb      	ldrb	r3, [r7, #14]
}
 801438a:	4618      	mov	r0, r3
 801438c:	3710      	adds	r7, #16
 801438e:	46bd      	mov	sp, r7
 8014390:	bd80      	pop	{r7, pc}

08014392 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8014392:	b590      	push	{r4, r7, lr}
 8014394:	b089      	sub	sp, #36	@ 0x24
 8014396:	af04      	add	r7, sp, #16
 8014398:	6078      	str	r0, [r7, #4]
 801439a:	4608      	mov	r0, r1
 801439c:	4611      	mov	r1, r2
 801439e:	461a      	mov	r2, r3
 80143a0:	4603      	mov	r3, r0
 80143a2:	70fb      	strb	r3, [r7, #3]
 80143a4:	460b      	mov	r3, r1
 80143a6:	70bb      	strb	r3, [r7, #2]
 80143a8:	4613      	mov	r3, r2
 80143aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80143ac:	2300      	movs	r3, #0
 80143ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80143b0:	2300      	movs	r3, #0
 80143b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80143ba:	787c      	ldrb	r4, [r7, #1]
 80143bc:	78ba      	ldrb	r2, [r7, #2]
 80143be:	78f9      	ldrb	r1, [r7, #3]
 80143c0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80143c4:	9303      	str	r3, [sp, #12]
 80143c6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80143c8:	9302      	str	r3, [sp, #8]
 80143ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143cc:	9301      	str	r3, [sp, #4]
 80143ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80143d2:	9300      	str	r3, [sp, #0]
 80143d4:	4623      	mov	r3, r4
 80143d6:	f7f0 fec3 	bl	8005160 <HAL_HCD_HC_SubmitRequest>
 80143da:	4603      	mov	r3, r0
 80143dc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80143de:	7bfb      	ldrb	r3, [r7, #15]
 80143e0:	4618      	mov	r0, r3
 80143e2:	f000 f86f 	bl	80144c4 <USBH_Get_USB_Status>
 80143e6:	4603      	mov	r3, r0
 80143e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80143ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80143ec:	4618      	mov	r0, r3
 80143ee:	3714      	adds	r7, #20
 80143f0:	46bd      	mov	sp, r7
 80143f2:	bd90      	pop	{r4, r7, pc}

080143f4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b082      	sub	sp, #8
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	6078      	str	r0, [r7, #4]
 80143fc:	460b      	mov	r3, r1
 80143fe:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8014406:	78fa      	ldrb	r2, [r7, #3]
 8014408:	4611      	mov	r1, r2
 801440a:	4618      	mov	r0, r3
 801440c:	f7f1 f9a4 	bl	8005758 <HAL_HCD_HC_GetURBState>
 8014410:	4603      	mov	r3, r0
}
 8014412:	4618      	mov	r0, r3
 8014414:	3708      	adds	r7, #8
 8014416:	46bd      	mov	sp, r7
 8014418:	bd80      	pop	{r7, pc}

0801441a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801441a:	b580      	push	{r7, lr}
 801441c:	b082      	sub	sp, #8
 801441e:	af00      	add	r7, sp, #0
 8014420:	6078      	str	r0, [r7, #4]
 8014422:	460b      	mov	r3, r1
 8014424:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 801442c:	2b01      	cmp	r3, #1
 801442e:	d103      	bne.n	8014438 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8014430:	78fb      	ldrb	r3, [r7, #3]
 8014432:	4618      	mov	r0, r3
 8014434:	f000 f872 	bl	801451c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8014438:	20c8      	movs	r0, #200	@ 0xc8
 801443a:	f7ef f893 	bl	8003564 <HAL_Delay>
  return USBH_OK;
 801443e:	2300      	movs	r3, #0
}
 8014440:	4618      	mov	r0, r3
 8014442:	3708      	adds	r7, #8
 8014444:	46bd      	mov	sp, r7
 8014446:	bd80      	pop	{r7, pc}

08014448 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8014448:	b480      	push	{r7}
 801444a:	b085      	sub	sp, #20
 801444c:	af00      	add	r7, sp, #0
 801444e:	6078      	str	r0, [r7, #4]
 8014450:	460b      	mov	r3, r1
 8014452:	70fb      	strb	r3, [r7, #3]
 8014454:	4613      	mov	r3, r2
 8014456:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801445e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8014460:	78fa      	ldrb	r2, [r7, #3]
 8014462:	68f9      	ldr	r1, [r7, #12]
 8014464:	4613      	mov	r3, r2
 8014466:	011b      	lsls	r3, r3, #4
 8014468:	1a9b      	subs	r3, r3, r2
 801446a:	009b      	lsls	r3, r3, #2
 801446c:	440b      	add	r3, r1
 801446e:	3317      	adds	r3, #23
 8014470:	781b      	ldrb	r3, [r3, #0]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d00a      	beq.n	801448c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8014476:	78fa      	ldrb	r2, [r7, #3]
 8014478:	68f9      	ldr	r1, [r7, #12]
 801447a:	4613      	mov	r3, r2
 801447c:	011b      	lsls	r3, r3, #4
 801447e:	1a9b      	subs	r3, r3, r2
 8014480:	009b      	lsls	r3, r3, #2
 8014482:	440b      	add	r3, r1
 8014484:	333c      	adds	r3, #60	@ 0x3c
 8014486:	78ba      	ldrb	r2, [r7, #2]
 8014488:	701a      	strb	r2, [r3, #0]
 801448a:	e009      	b.n	80144a0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801448c:	78fa      	ldrb	r2, [r7, #3]
 801448e:	68f9      	ldr	r1, [r7, #12]
 8014490:	4613      	mov	r3, r2
 8014492:	011b      	lsls	r3, r3, #4
 8014494:	1a9b      	subs	r3, r3, r2
 8014496:	009b      	lsls	r3, r3, #2
 8014498:	440b      	add	r3, r1
 801449a:	333d      	adds	r3, #61	@ 0x3d
 801449c:	78ba      	ldrb	r2, [r7, #2]
 801449e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80144a0:	2300      	movs	r3, #0
}
 80144a2:	4618      	mov	r0, r3
 80144a4:	3714      	adds	r7, #20
 80144a6:	46bd      	mov	sp, r7
 80144a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ac:	4770      	bx	lr

080144ae <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80144ae:	b580      	push	{r7, lr}
 80144b0:	b082      	sub	sp, #8
 80144b2:	af00      	add	r7, sp, #0
 80144b4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80144b6:	6878      	ldr	r0, [r7, #4]
 80144b8:	f7ef f854 	bl	8003564 <HAL_Delay>
}
 80144bc:	bf00      	nop
 80144be:	3708      	adds	r7, #8
 80144c0:	46bd      	mov	sp, r7
 80144c2:	bd80      	pop	{r7, pc}

080144c4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80144c4:	b480      	push	{r7}
 80144c6:	b085      	sub	sp, #20
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	4603      	mov	r3, r0
 80144cc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80144ce:	2300      	movs	r3, #0
 80144d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80144d2:	79fb      	ldrb	r3, [r7, #7]
 80144d4:	2b03      	cmp	r3, #3
 80144d6:	d817      	bhi.n	8014508 <USBH_Get_USB_Status+0x44>
 80144d8:	a201      	add	r2, pc, #4	@ (adr r2, 80144e0 <USBH_Get_USB_Status+0x1c>)
 80144da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144de:	bf00      	nop
 80144e0:	080144f1 	.word	0x080144f1
 80144e4:	080144f7 	.word	0x080144f7
 80144e8:	080144fd 	.word	0x080144fd
 80144ec:	08014503 	.word	0x08014503
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80144f0:	2300      	movs	r3, #0
 80144f2:	73fb      	strb	r3, [r7, #15]
    break;
 80144f4:	e00b      	b.n	801450e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80144f6:	2302      	movs	r3, #2
 80144f8:	73fb      	strb	r3, [r7, #15]
    break;
 80144fa:	e008      	b.n	801450e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80144fc:	2301      	movs	r3, #1
 80144fe:	73fb      	strb	r3, [r7, #15]
    break;
 8014500:	e005      	b.n	801450e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8014502:	2302      	movs	r3, #2
 8014504:	73fb      	strb	r3, [r7, #15]
    break;
 8014506:	e002      	b.n	801450e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8014508:	2302      	movs	r3, #2
 801450a:	73fb      	strb	r3, [r7, #15]
    break;
 801450c:	bf00      	nop
  }
  return usb_status;
 801450e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014510:	4618      	mov	r0, r3
 8014512:	3714      	adds	r7, #20
 8014514:	46bd      	mov	sp, r7
 8014516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801451a:	4770      	bx	lr

0801451c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801451c:	b580      	push	{r7, lr}
 801451e:	b084      	sub	sp, #16
 8014520:	af00      	add	r7, sp, #0
 8014522:	4603      	mov	r3, r0
 8014524:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8014526:	79fb      	ldrb	r3, [r7, #7]
 8014528:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801452a:	79fb      	ldrb	r3, [r7, #7]
 801452c:	2b00      	cmp	r3, #0
 801452e:	d102      	bne.n	8014536 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8014530:	2300      	movs	r3, #0
 8014532:	73fb      	strb	r3, [r7, #15]
 8014534:	e001      	b.n	801453a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8014536:	2301      	movs	r3, #1
 8014538:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801453a:	7bfb      	ldrb	r3, [r7, #15]
 801453c:	461a      	mov	r2, r3
 801453e:	2120      	movs	r1, #32
 8014540:	4803      	ldr	r0, [pc, #12]	@ (8014550 <MX_DriverVbusFS+0x34>)
 8014542:	f7f0 fcb1 	bl	8004ea8 <HAL_GPIO_WritePin>
}
 8014546:	bf00      	nop
 8014548:	3710      	adds	r7, #16
 801454a:	46bd      	mov	sp, r7
 801454c:	bd80      	pop	{r7, pc}
 801454e:	bf00      	nop
 8014550:	40020c00 	.word	0x40020c00

08014554 <malloc>:
 8014554:	4b02      	ldr	r3, [pc, #8]	@ (8014560 <malloc+0xc>)
 8014556:	4601      	mov	r1, r0
 8014558:	6818      	ldr	r0, [r3, #0]
 801455a:	f000 b82d 	b.w	80145b8 <_malloc_r>
 801455e:	bf00      	nop
 8014560:	20000078 	.word	0x20000078

08014564 <free>:
 8014564:	4b02      	ldr	r3, [pc, #8]	@ (8014570 <free+0xc>)
 8014566:	4601      	mov	r1, r0
 8014568:	6818      	ldr	r0, [r3, #0]
 801456a:	f000 b99f 	b.w	80148ac <_free_r>
 801456e:	bf00      	nop
 8014570:	20000078 	.word	0x20000078

08014574 <sbrk_aligned>:
 8014574:	b570      	push	{r4, r5, r6, lr}
 8014576:	4e0f      	ldr	r6, [pc, #60]	@ (80145b4 <sbrk_aligned+0x40>)
 8014578:	460c      	mov	r4, r1
 801457a:	6831      	ldr	r1, [r6, #0]
 801457c:	4605      	mov	r5, r0
 801457e:	b911      	cbnz	r1, 8014586 <sbrk_aligned+0x12>
 8014580:	f000 f94a 	bl	8014818 <_sbrk_r>
 8014584:	6030      	str	r0, [r6, #0]
 8014586:	4621      	mov	r1, r4
 8014588:	4628      	mov	r0, r5
 801458a:	f000 f945 	bl	8014818 <_sbrk_r>
 801458e:	1c43      	adds	r3, r0, #1
 8014590:	d103      	bne.n	801459a <sbrk_aligned+0x26>
 8014592:	f04f 34ff 	mov.w	r4, #4294967295
 8014596:	4620      	mov	r0, r4
 8014598:	bd70      	pop	{r4, r5, r6, pc}
 801459a:	1cc4      	adds	r4, r0, #3
 801459c:	f024 0403 	bic.w	r4, r4, #3
 80145a0:	42a0      	cmp	r0, r4
 80145a2:	d0f8      	beq.n	8014596 <sbrk_aligned+0x22>
 80145a4:	1a21      	subs	r1, r4, r0
 80145a6:	4628      	mov	r0, r5
 80145a8:	f000 f936 	bl	8014818 <_sbrk_r>
 80145ac:	3001      	adds	r0, #1
 80145ae:	d1f2      	bne.n	8014596 <sbrk_aligned+0x22>
 80145b0:	e7ef      	b.n	8014592 <sbrk_aligned+0x1e>
 80145b2:	bf00      	nop
 80145b4:	20009804 	.word	0x20009804

080145b8 <_malloc_r>:
 80145b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80145bc:	1ccd      	adds	r5, r1, #3
 80145be:	f025 0503 	bic.w	r5, r5, #3
 80145c2:	3508      	adds	r5, #8
 80145c4:	2d0c      	cmp	r5, #12
 80145c6:	bf38      	it	cc
 80145c8:	250c      	movcc	r5, #12
 80145ca:	2d00      	cmp	r5, #0
 80145cc:	4606      	mov	r6, r0
 80145ce:	db01      	blt.n	80145d4 <_malloc_r+0x1c>
 80145d0:	42a9      	cmp	r1, r5
 80145d2:	d904      	bls.n	80145de <_malloc_r+0x26>
 80145d4:	230c      	movs	r3, #12
 80145d6:	6033      	str	r3, [r6, #0]
 80145d8:	2000      	movs	r0, #0
 80145da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80145de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80146b4 <_malloc_r+0xfc>
 80145e2:	f000 f869 	bl	80146b8 <__malloc_lock>
 80145e6:	f8d8 3000 	ldr.w	r3, [r8]
 80145ea:	461c      	mov	r4, r3
 80145ec:	bb44      	cbnz	r4, 8014640 <_malloc_r+0x88>
 80145ee:	4629      	mov	r1, r5
 80145f0:	4630      	mov	r0, r6
 80145f2:	f7ff ffbf 	bl	8014574 <sbrk_aligned>
 80145f6:	1c43      	adds	r3, r0, #1
 80145f8:	4604      	mov	r4, r0
 80145fa:	d158      	bne.n	80146ae <_malloc_r+0xf6>
 80145fc:	f8d8 4000 	ldr.w	r4, [r8]
 8014600:	4627      	mov	r7, r4
 8014602:	2f00      	cmp	r7, #0
 8014604:	d143      	bne.n	801468e <_malloc_r+0xd6>
 8014606:	2c00      	cmp	r4, #0
 8014608:	d04b      	beq.n	80146a2 <_malloc_r+0xea>
 801460a:	6823      	ldr	r3, [r4, #0]
 801460c:	4639      	mov	r1, r7
 801460e:	4630      	mov	r0, r6
 8014610:	eb04 0903 	add.w	r9, r4, r3
 8014614:	f000 f900 	bl	8014818 <_sbrk_r>
 8014618:	4581      	cmp	r9, r0
 801461a:	d142      	bne.n	80146a2 <_malloc_r+0xea>
 801461c:	6821      	ldr	r1, [r4, #0]
 801461e:	1a6d      	subs	r5, r5, r1
 8014620:	4629      	mov	r1, r5
 8014622:	4630      	mov	r0, r6
 8014624:	f7ff ffa6 	bl	8014574 <sbrk_aligned>
 8014628:	3001      	adds	r0, #1
 801462a:	d03a      	beq.n	80146a2 <_malloc_r+0xea>
 801462c:	6823      	ldr	r3, [r4, #0]
 801462e:	442b      	add	r3, r5
 8014630:	6023      	str	r3, [r4, #0]
 8014632:	f8d8 3000 	ldr.w	r3, [r8]
 8014636:	685a      	ldr	r2, [r3, #4]
 8014638:	bb62      	cbnz	r2, 8014694 <_malloc_r+0xdc>
 801463a:	f8c8 7000 	str.w	r7, [r8]
 801463e:	e00f      	b.n	8014660 <_malloc_r+0xa8>
 8014640:	6822      	ldr	r2, [r4, #0]
 8014642:	1b52      	subs	r2, r2, r5
 8014644:	d420      	bmi.n	8014688 <_malloc_r+0xd0>
 8014646:	2a0b      	cmp	r2, #11
 8014648:	d917      	bls.n	801467a <_malloc_r+0xc2>
 801464a:	1961      	adds	r1, r4, r5
 801464c:	42a3      	cmp	r3, r4
 801464e:	6025      	str	r5, [r4, #0]
 8014650:	bf18      	it	ne
 8014652:	6059      	strne	r1, [r3, #4]
 8014654:	6863      	ldr	r3, [r4, #4]
 8014656:	bf08      	it	eq
 8014658:	f8c8 1000 	streq.w	r1, [r8]
 801465c:	5162      	str	r2, [r4, r5]
 801465e:	604b      	str	r3, [r1, #4]
 8014660:	4630      	mov	r0, r6
 8014662:	f000 f82f 	bl	80146c4 <__malloc_unlock>
 8014666:	f104 000b 	add.w	r0, r4, #11
 801466a:	1d23      	adds	r3, r4, #4
 801466c:	f020 0007 	bic.w	r0, r0, #7
 8014670:	1ac2      	subs	r2, r0, r3
 8014672:	bf1c      	itt	ne
 8014674:	1a1b      	subne	r3, r3, r0
 8014676:	50a3      	strne	r3, [r4, r2]
 8014678:	e7af      	b.n	80145da <_malloc_r+0x22>
 801467a:	6862      	ldr	r2, [r4, #4]
 801467c:	42a3      	cmp	r3, r4
 801467e:	bf0c      	ite	eq
 8014680:	f8c8 2000 	streq.w	r2, [r8]
 8014684:	605a      	strne	r2, [r3, #4]
 8014686:	e7eb      	b.n	8014660 <_malloc_r+0xa8>
 8014688:	4623      	mov	r3, r4
 801468a:	6864      	ldr	r4, [r4, #4]
 801468c:	e7ae      	b.n	80145ec <_malloc_r+0x34>
 801468e:	463c      	mov	r4, r7
 8014690:	687f      	ldr	r7, [r7, #4]
 8014692:	e7b6      	b.n	8014602 <_malloc_r+0x4a>
 8014694:	461a      	mov	r2, r3
 8014696:	685b      	ldr	r3, [r3, #4]
 8014698:	42a3      	cmp	r3, r4
 801469a:	d1fb      	bne.n	8014694 <_malloc_r+0xdc>
 801469c:	2300      	movs	r3, #0
 801469e:	6053      	str	r3, [r2, #4]
 80146a0:	e7de      	b.n	8014660 <_malloc_r+0xa8>
 80146a2:	230c      	movs	r3, #12
 80146a4:	6033      	str	r3, [r6, #0]
 80146a6:	4630      	mov	r0, r6
 80146a8:	f000 f80c 	bl	80146c4 <__malloc_unlock>
 80146ac:	e794      	b.n	80145d8 <_malloc_r+0x20>
 80146ae:	6005      	str	r5, [r0, #0]
 80146b0:	e7d6      	b.n	8014660 <_malloc_r+0xa8>
 80146b2:	bf00      	nop
 80146b4:	20009808 	.word	0x20009808

080146b8 <__malloc_lock>:
 80146b8:	4801      	ldr	r0, [pc, #4]	@ (80146c0 <__malloc_lock+0x8>)
 80146ba:	f000 b8e7 	b.w	801488c <__retarget_lock_acquire_recursive>
 80146be:	bf00      	nop
 80146c0:	20009948 	.word	0x20009948

080146c4 <__malloc_unlock>:
 80146c4:	4801      	ldr	r0, [pc, #4]	@ (80146cc <__malloc_unlock+0x8>)
 80146c6:	f000 b8e2 	b.w	801488e <__retarget_lock_release_recursive>
 80146ca:	bf00      	nop
 80146cc:	20009948 	.word	0x20009948

080146d0 <sniprintf>:
 80146d0:	b40c      	push	{r2, r3}
 80146d2:	b530      	push	{r4, r5, lr}
 80146d4:	4b18      	ldr	r3, [pc, #96]	@ (8014738 <sniprintf+0x68>)
 80146d6:	1e0c      	subs	r4, r1, #0
 80146d8:	681d      	ldr	r5, [r3, #0]
 80146da:	b09d      	sub	sp, #116	@ 0x74
 80146dc:	da08      	bge.n	80146f0 <sniprintf+0x20>
 80146de:	238b      	movs	r3, #139	@ 0x8b
 80146e0:	602b      	str	r3, [r5, #0]
 80146e2:	f04f 30ff 	mov.w	r0, #4294967295
 80146e6:	b01d      	add	sp, #116	@ 0x74
 80146e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80146ec:	b002      	add	sp, #8
 80146ee:	4770      	bx	lr
 80146f0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80146f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80146f8:	f04f 0300 	mov.w	r3, #0
 80146fc:	931b      	str	r3, [sp, #108]	@ 0x6c
 80146fe:	bf14      	ite	ne
 8014700:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014704:	4623      	moveq	r3, r4
 8014706:	9304      	str	r3, [sp, #16]
 8014708:	9307      	str	r3, [sp, #28]
 801470a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801470e:	9002      	str	r0, [sp, #8]
 8014710:	9006      	str	r0, [sp, #24]
 8014712:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014716:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014718:	ab21      	add	r3, sp, #132	@ 0x84
 801471a:	a902      	add	r1, sp, #8
 801471c:	4628      	mov	r0, r5
 801471e:	9301      	str	r3, [sp, #4]
 8014720:	f000 f96a 	bl	80149f8 <_svfiprintf_r>
 8014724:	1c43      	adds	r3, r0, #1
 8014726:	bfbc      	itt	lt
 8014728:	238b      	movlt	r3, #139	@ 0x8b
 801472a:	602b      	strlt	r3, [r5, #0]
 801472c:	2c00      	cmp	r4, #0
 801472e:	d0da      	beq.n	80146e6 <sniprintf+0x16>
 8014730:	9b02      	ldr	r3, [sp, #8]
 8014732:	2200      	movs	r2, #0
 8014734:	701a      	strb	r2, [r3, #0]
 8014736:	e7d6      	b.n	80146e6 <sniprintf+0x16>
 8014738:	20000078 	.word	0x20000078

0801473c <_vsniprintf_r>:
 801473c:	b530      	push	{r4, r5, lr}
 801473e:	4614      	mov	r4, r2
 8014740:	2c00      	cmp	r4, #0
 8014742:	b09b      	sub	sp, #108	@ 0x6c
 8014744:	4605      	mov	r5, r0
 8014746:	461a      	mov	r2, r3
 8014748:	da05      	bge.n	8014756 <_vsniprintf_r+0x1a>
 801474a:	238b      	movs	r3, #139	@ 0x8b
 801474c:	6003      	str	r3, [r0, #0]
 801474e:	f04f 30ff 	mov.w	r0, #4294967295
 8014752:	b01b      	add	sp, #108	@ 0x6c
 8014754:	bd30      	pop	{r4, r5, pc}
 8014756:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801475a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801475e:	f04f 0300 	mov.w	r3, #0
 8014762:	9319      	str	r3, [sp, #100]	@ 0x64
 8014764:	bf14      	ite	ne
 8014766:	f104 33ff 	addne.w	r3, r4, #4294967295
 801476a:	4623      	moveq	r3, r4
 801476c:	9302      	str	r3, [sp, #8]
 801476e:	9305      	str	r3, [sp, #20]
 8014770:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014774:	9100      	str	r1, [sp, #0]
 8014776:	9104      	str	r1, [sp, #16]
 8014778:	f8ad 300e 	strh.w	r3, [sp, #14]
 801477c:	4669      	mov	r1, sp
 801477e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8014780:	f000 f93a 	bl	80149f8 <_svfiprintf_r>
 8014784:	1c43      	adds	r3, r0, #1
 8014786:	bfbc      	itt	lt
 8014788:	238b      	movlt	r3, #139	@ 0x8b
 801478a:	602b      	strlt	r3, [r5, #0]
 801478c:	2c00      	cmp	r4, #0
 801478e:	d0e0      	beq.n	8014752 <_vsniprintf_r+0x16>
 8014790:	9b00      	ldr	r3, [sp, #0]
 8014792:	2200      	movs	r2, #0
 8014794:	701a      	strb	r2, [r3, #0]
 8014796:	e7dc      	b.n	8014752 <_vsniprintf_r+0x16>

08014798 <vsniprintf>:
 8014798:	b507      	push	{r0, r1, r2, lr}
 801479a:	9300      	str	r3, [sp, #0]
 801479c:	4613      	mov	r3, r2
 801479e:	460a      	mov	r2, r1
 80147a0:	4601      	mov	r1, r0
 80147a2:	4803      	ldr	r0, [pc, #12]	@ (80147b0 <vsniprintf+0x18>)
 80147a4:	6800      	ldr	r0, [r0, #0]
 80147a6:	f7ff ffc9 	bl	801473c <_vsniprintf_r>
 80147aa:	b003      	add	sp, #12
 80147ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80147b0:	20000078 	.word	0x20000078

080147b4 <memset>:
 80147b4:	4402      	add	r2, r0
 80147b6:	4603      	mov	r3, r0
 80147b8:	4293      	cmp	r3, r2
 80147ba:	d100      	bne.n	80147be <memset+0xa>
 80147bc:	4770      	bx	lr
 80147be:	f803 1b01 	strb.w	r1, [r3], #1
 80147c2:	e7f9      	b.n	80147b8 <memset+0x4>

080147c4 <strncpy>:
 80147c4:	b510      	push	{r4, lr}
 80147c6:	3901      	subs	r1, #1
 80147c8:	4603      	mov	r3, r0
 80147ca:	b132      	cbz	r2, 80147da <strncpy+0x16>
 80147cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80147d0:	f803 4b01 	strb.w	r4, [r3], #1
 80147d4:	3a01      	subs	r2, #1
 80147d6:	2c00      	cmp	r4, #0
 80147d8:	d1f7      	bne.n	80147ca <strncpy+0x6>
 80147da:	441a      	add	r2, r3
 80147dc:	2100      	movs	r1, #0
 80147de:	4293      	cmp	r3, r2
 80147e0:	d100      	bne.n	80147e4 <strncpy+0x20>
 80147e2:	bd10      	pop	{r4, pc}
 80147e4:	f803 1b01 	strb.w	r1, [r3], #1
 80147e8:	e7f9      	b.n	80147de <strncpy+0x1a>

080147ea <strstr>:
 80147ea:	780a      	ldrb	r2, [r1, #0]
 80147ec:	b570      	push	{r4, r5, r6, lr}
 80147ee:	b96a      	cbnz	r2, 801480c <strstr+0x22>
 80147f0:	bd70      	pop	{r4, r5, r6, pc}
 80147f2:	429a      	cmp	r2, r3
 80147f4:	d109      	bne.n	801480a <strstr+0x20>
 80147f6:	460c      	mov	r4, r1
 80147f8:	4605      	mov	r5, r0
 80147fa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d0f6      	beq.n	80147f0 <strstr+0x6>
 8014802:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8014806:	429e      	cmp	r6, r3
 8014808:	d0f7      	beq.n	80147fa <strstr+0x10>
 801480a:	3001      	adds	r0, #1
 801480c:	7803      	ldrb	r3, [r0, #0]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d1ef      	bne.n	80147f2 <strstr+0x8>
 8014812:	4618      	mov	r0, r3
 8014814:	e7ec      	b.n	80147f0 <strstr+0x6>
	...

08014818 <_sbrk_r>:
 8014818:	b538      	push	{r3, r4, r5, lr}
 801481a:	4d06      	ldr	r5, [pc, #24]	@ (8014834 <_sbrk_r+0x1c>)
 801481c:	2300      	movs	r3, #0
 801481e:	4604      	mov	r4, r0
 8014820:	4608      	mov	r0, r1
 8014822:	602b      	str	r3, [r5, #0]
 8014824:	f7ee fb68 	bl	8002ef8 <_sbrk>
 8014828:	1c43      	adds	r3, r0, #1
 801482a:	d102      	bne.n	8014832 <_sbrk_r+0x1a>
 801482c:	682b      	ldr	r3, [r5, #0]
 801482e:	b103      	cbz	r3, 8014832 <_sbrk_r+0x1a>
 8014830:	6023      	str	r3, [r4, #0]
 8014832:	bd38      	pop	{r3, r4, r5, pc}
 8014834:	20009944 	.word	0x20009944

08014838 <__errno>:
 8014838:	4b01      	ldr	r3, [pc, #4]	@ (8014840 <__errno+0x8>)
 801483a:	6818      	ldr	r0, [r3, #0]
 801483c:	4770      	bx	lr
 801483e:	bf00      	nop
 8014840:	20000078 	.word	0x20000078

08014844 <__libc_init_array>:
 8014844:	b570      	push	{r4, r5, r6, lr}
 8014846:	4d0d      	ldr	r5, [pc, #52]	@ (801487c <__libc_init_array+0x38>)
 8014848:	4c0d      	ldr	r4, [pc, #52]	@ (8014880 <__libc_init_array+0x3c>)
 801484a:	1b64      	subs	r4, r4, r5
 801484c:	10a4      	asrs	r4, r4, #2
 801484e:	2600      	movs	r6, #0
 8014850:	42a6      	cmp	r6, r4
 8014852:	d109      	bne.n	8014868 <__libc_init_array+0x24>
 8014854:	4d0b      	ldr	r5, [pc, #44]	@ (8014884 <__libc_init_array+0x40>)
 8014856:	4c0c      	ldr	r4, [pc, #48]	@ (8014888 <__libc_init_array+0x44>)
 8014858:	f000 fba6 	bl	8014fa8 <_init>
 801485c:	1b64      	subs	r4, r4, r5
 801485e:	10a4      	asrs	r4, r4, #2
 8014860:	2600      	movs	r6, #0
 8014862:	42a6      	cmp	r6, r4
 8014864:	d105      	bne.n	8014872 <__libc_init_array+0x2e>
 8014866:	bd70      	pop	{r4, r5, r6, pc}
 8014868:	f855 3b04 	ldr.w	r3, [r5], #4
 801486c:	4798      	blx	r3
 801486e:	3601      	adds	r6, #1
 8014870:	e7ee      	b.n	8014850 <__libc_init_array+0xc>
 8014872:	f855 3b04 	ldr.w	r3, [r5], #4
 8014876:	4798      	blx	r3
 8014878:	3601      	adds	r6, #1
 801487a:	e7f2      	b.n	8014862 <__libc_init_array+0x1e>
 801487c:	08015614 	.word	0x08015614
 8014880:	08015614 	.word	0x08015614
 8014884:	08015614 	.word	0x08015614
 8014888:	08015618 	.word	0x08015618

0801488c <__retarget_lock_acquire_recursive>:
 801488c:	4770      	bx	lr

0801488e <__retarget_lock_release_recursive>:
 801488e:	4770      	bx	lr

08014890 <memcpy>:
 8014890:	440a      	add	r2, r1
 8014892:	4291      	cmp	r1, r2
 8014894:	f100 33ff 	add.w	r3, r0, #4294967295
 8014898:	d100      	bne.n	801489c <memcpy+0xc>
 801489a:	4770      	bx	lr
 801489c:	b510      	push	{r4, lr}
 801489e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80148a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80148a6:	4291      	cmp	r1, r2
 80148a8:	d1f9      	bne.n	801489e <memcpy+0xe>
 80148aa:	bd10      	pop	{r4, pc}

080148ac <_free_r>:
 80148ac:	b538      	push	{r3, r4, r5, lr}
 80148ae:	4605      	mov	r5, r0
 80148b0:	2900      	cmp	r1, #0
 80148b2:	d041      	beq.n	8014938 <_free_r+0x8c>
 80148b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80148b8:	1f0c      	subs	r4, r1, #4
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	bfb8      	it	lt
 80148be:	18e4      	addlt	r4, r4, r3
 80148c0:	f7ff fefa 	bl	80146b8 <__malloc_lock>
 80148c4:	4a1d      	ldr	r2, [pc, #116]	@ (801493c <_free_r+0x90>)
 80148c6:	6813      	ldr	r3, [r2, #0]
 80148c8:	b933      	cbnz	r3, 80148d8 <_free_r+0x2c>
 80148ca:	6063      	str	r3, [r4, #4]
 80148cc:	6014      	str	r4, [r2, #0]
 80148ce:	4628      	mov	r0, r5
 80148d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80148d4:	f7ff bef6 	b.w	80146c4 <__malloc_unlock>
 80148d8:	42a3      	cmp	r3, r4
 80148da:	d908      	bls.n	80148ee <_free_r+0x42>
 80148dc:	6820      	ldr	r0, [r4, #0]
 80148de:	1821      	adds	r1, r4, r0
 80148e0:	428b      	cmp	r3, r1
 80148e2:	bf01      	itttt	eq
 80148e4:	6819      	ldreq	r1, [r3, #0]
 80148e6:	685b      	ldreq	r3, [r3, #4]
 80148e8:	1809      	addeq	r1, r1, r0
 80148ea:	6021      	streq	r1, [r4, #0]
 80148ec:	e7ed      	b.n	80148ca <_free_r+0x1e>
 80148ee:	461a      	mov	r2, r3
 80148f0:	685b      	ldr	r3, [r3, #4]
 80148f2:	b10b      	cbz	r3, 80148f8 <_free_r+0x4c>
 80148f4:	42a3      	cmp	r3, r4
 80148f6:	d9fa      	bls.n	80148ee <_free_r+0x42>
 80148f8:	6811      	ldr	r1, [r2, #0]
 80148fa:	1850      	adds	r0, r2, r1
 80148fc:	42a0      	cmp	r0, r4
 80148fe:	d10b      	bne.n	8014918 <_free_r+0x6c>
 8014900:	6820      	ldr	r0, [r4, #0]
 8014902:	4401      	add	r1, r0
 8014904:	1850      	adds	r0, r2, r1
 8014906:	4283      	cmp	r3, r0
 8014908:	6011      	str	r1, [r2, #0]
 801490a:	d1e0      	bne.n	80148ce <_free_r+0x22>
 801490c:	6818      	ldr	r0, [r3, #0]
 801490e:	685b      	ldr	r3, [r3, #4]
 8014910:	6053      	str	r3, [r2, #4]
 8014912:	4408      	add	r0, r1
 8014914:	6010      	str	r0, [r2, #0]
 8014916:	e7da      	b.n	80148ce <_free_r+0x22>
 8014918:	d902      	bls.n	8014920 <_free_r+0x74>
 801491a:	230c      	movs	r3, #12
 801491c:	602b      	str	r3, [r5, #0]
 801491e:	e7d6      	b.n	80148ce <_free_r+0x22>
 8014920:	6820      	ldr	r0, [r4, #0]
 8014922:	1821      	adds	r1, r4, r0
 8014924:	428b      	cmp	r3, r1
 8014926:	bf04      	itt	eq
 8014928:	6819      	ldreq	r1, [r3, #0]
 801492a:	685b      	ldreq	r3, [r3, #4]
 801492c:	6063      	str	r3, [r4, #4]
 801492e:	bf04      	itt	eq
 8014930:	1809      	addeq	r1, r1, r0
 8014932:	6021      	streq	r1, [r4, #0]
 8014934:	6054      	str	r4, [r2, #4]
 8014936:	e7ca      	b.n	80148ce <_free_r+0x22>
 8014938:	bd38      	pop	{r3, r4, r5, pc}
 801493a:	bf00      	nop
 801493c:	20009808 	.word	0x20009808

08014940 <__ssputs_r>:
 8014940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014944:	688e      	ldr	r6, [r1, #8]
 8014946:	461f      	mov	r7, r3
 8014948:	42be      	cmp	r6, r7
 801494a:	680b      	ldr	r3, [r1, #0]
 801494c:	4682      	mov	sl, r0
 801494e:	460c      	mov	r4, r1
 8014950:	4690      	mov	r8, r2
 8014952:	d82d      	bhi.n	80149b0 <__ssputs_r+0x70>
 8014954:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014958:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801495c:	d026      	beq.n	80149ac <__ssputs_r+0x6c>
 801495e:	6965      	ldr	r5, [r4, #20]
 8014960:	6909      	ldr	r1, [r1, #16]
 8014962:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014966:	eba3 0901 	sub.w	r9, r3, r1
 801496a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801496e:	1c7b      	adds	r3, r7, #1
 8014970:	444b      	add	r3, r9
 8014972:	106d      	asrs	r5, r5, #1
 8014974:	429d      	cmp	r5, r3
 8014976:	bf38      	it	cc
 8014978:	461d      	movcc	r5, r3
 801497a:	0553      	lsls	r3, r2, #21
 801497c:	d527      	bpl.n	80149ce <__ssputs_r+0x8e>
 801497e:	4629      	mov	r1, r5
 8014980:	f7ff fe1a 	bl	80145b8 <_malloc_r>
 8014984:	4606      	mov	r6, r0
 8014986:	b360      	cbz	r0, 80149e2 <__ssputs_r+0xa2>
 8014988:	6921      	ldr	r1, [r4, #16]
 801498a:	464a      	mov	r2, r9
 801498c:	f7ff ff80 	bl	8014890 <memcpy>
 8014990:	89a3      	ldrh	r3, [r4, #12]
 8014992:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014996:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801499a:	81a3      	strh	r3, [r4, #12]
 801499c:	6126      	str	r6, [r4, #16]
 801499e:	6165      	str	r5, [r4, #20]
 80149a0:	444e      	add	r6, r9
 80149a2:	eba5 0509 	sub.w	r5, r5, r9
 80149a6:	6026      	str	r6, [r4, #0]
 80149a8:	60a5      	str	r5, [r4, #8]
 80149aa:	463e      	mov	r6, r7
 80149ac:	42be      	cmp	r6, r7
 80149ae:	d900      	bls.n	80149b2 <__ssputs_r+0x72>
 80149b0:	463e      	mov	r6, r7
 80149b2:	6820      	ldr	r0, [r4, #0]
 80149b4:	4632      	mov	r2, r6
 80149b6:	4641      	mov	r1, r8
 80149b8:	f000 faa6 	bl	8014f08 <memmove>
 80149bc:	68a3      	ldr	r3, [r4, #8]
 80149be:	1b9b      	subs	r3, r3, r6
 80149c0:	60a3      	str	r3, [r4, #8]
 80149c2:	6823      	ldr	r3, [r4, #0]
 80149c4:	4433      	add	r3, r6
 80149c6:	6023      	str	r3, [r4, #0]
 80149c8:	2000      	movs	r0, #0
 80149ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149ce:	462a      	mov	r2, r5
 80149d0:	f000 fab4 	bl	8014f3c <_realloc_r>
 80149d4:	4606      	mov	r6, r0
 80149d6:	2800      	cmp	r0, #0
 80149d8:	d1e0      	bne.n	801499c <__ssputs_r+0x5c>
 80149da:	6921      	ldr	r1, [r4, #16]
 80149dc:	4650      	mov	r0, sl
 80149de:	f7ff ff65 	bl	80148ac <_free_r>
 80149e2:	230c      	movs	r3, #12
 80149e4:	f8ca 3000 	str.w	r3, [sl]
 80149e8:	89a3      	ldrh	r3, [r4, #12]
 80149ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80149ee:	81a3      	strh	r3, [r4, #12]
 80149f0:	f04f 30ff 	mov.w	r0, #4294967295
 80149f4:	e7e9      	b.n	80149ca <__ssputs_r+0x8a>
	...

080149f8 <_svfiprintf_r>:
 80149f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149fc:	4698      	mov	r8, r3
 80149fe:	898b      	ldrh	r3, [r1, #12]
 8014a00:	061b      	lsls	r3, r3, #24
 8014a02:	b09d      	sub	sp, #116	@ 0x74
 8014a04:	4607      	mov	r7, r0
 8014a06:	460d      	mov	r5, r1
 8014a08:	4614      	mov	r4, r2
 8014a0a:	d510      	bpl.n	8014a2e <_svfiprintf_r+0x36>
 8014a0c:	690b      	ldr	r3, [r1, #16]
 8014a0e:	b973      	cbnz	r3, 8014a2e <_svfiprintf_r+0x36>
 8014a10:	2140      	movs	r1, #64	@ 0x40
 8014a12:	f7ff fdd1 	bl	80145b8 <_malloc_r>
 8014a16:	6028      	str	r0, [r5, #0]
 8014a18:	6128      	str	r0, [r5, #16]
 8014a1a:	b930      	cbnz	r0, 8014a2a <_svfiprintf_r+0x32>
 8014a1c:	230c      	movs	r3, #12
 8014a1e:	603b      	str	r3, [r7, #0]
 8014a20:	f04f 30ff 	mov.w	r0, #4294967295
 8014a24:	b01d      	add	sp, #116	@ 0x74
 8014a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a2a:	2340      	movs	r3, #64	@ 0x40
 8014a2c:	616b      	str	r3, [r5, #20]
 8014a2e:	2300      	movs	r3, #0
 8014a30:	9309      	str	r3, [sp, #36]	@ 0x24
 8014a32:	2320      	movs	r3, #32
 8014a34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014a38:	f8cd 800c 	str.w	r8, [sp, #12]
 8014a3c:	2330      	movs	r3, #48	@ 0x30
 8014a3e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014bdc <_svfiprintf_r+0x1e4>
 8014a42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014a46:	f04f 0901 	mov.w	r9, #1
 8014a4a:	4623      	mov	r3, r4
 8014a4c:	469a      	mov	sl, r3
 8014a4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a52:	b10a      	cbz	r2, 8014a58 <_svfiprintf_r+0x60>
 8014a54:	2a25      	cmp	r2, #37	@ 0x25
 8014a56:	d1f9      	bne.n	8014a4c <_svfiprintf_r+0x54>
 8014a58:	ebba 0b04 	subs.w	fp, sl, r4
 8014a5c:	d00b      	beq.n	8014a76 <_svfiprintf_r+0x7e>
 8014a5e:	465b      	mov	r3, fp
 8014a60:	4622      	mov	r2, r4
 8014a62:	4629      	mov	r1, r5
 8014a64:	4638      	mov	r0, r7
 8014a66:	f7ff ff6b 	bl	8014940 <__ssputs_r>
 8014a6a:	3001      	adds	r0, #1
 8014a6c:	f000 80a7 	beq.w	8014bbe <_svfiprintf_r+0x1c6>
 8014a70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014a72:	445a      	add	r2, fp
 8014a74:	9209      	str	r2, [sp, #36]	@ 0x24
 8014a76:	f89a 3000 	ldrb.w	r3, [sl]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	f000 809f 	beq.w	8014bbe <_svfiprintf_r+0x1c6>
 8014a80:	2300      	movs	r3, #0
 8014a82:	f04f 32ff 	mov.w	r2, #4294967295
 8014a86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014a8a:	f10a 0a01 	add.w	sl, sl, #1
 8014a8e:	9304      	str	r3, [sp, #16]
 8014a90:	9307      	str	r3, [sp, #28]
 8014a92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014a96:	931a      	str	r3, [sp, #104]	@ 0x68
 8014a98:	4654      	mov	r4, sl
 8014a9a:	2205      	movs	r2, #5
 8014a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014aa0:	484e      	ldr	r0, [pc, #312]	@ (8014bdc <_svfiprintf_r+0x1e4>)
 8014aa2:	f7eb fbbd 	bl	8000220 <memchr>
 8014aa6:	9a04      	ldr	r2, [sp, #16]
 8014aa8:	b9d8      	cbnz	r0, 8014ae2 <_svfiprintf_r+0xea>
 8014aaa:	06d0      	lsls	r0, r2, #27
 8014aac:	bf44      	itt	mi
 8014aae:	2320      	movmi	r3, #32
 8014ab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014ab4:	0711      	lsls	r1, r2, #28
 8014ab6:	bf44      	itt	mi
 8014ab8:	232b      	movmi	r3, #43	@ 0x2b
 8014aba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014abe:	f89a 3000 	ldrb.w	r3, [sl]
 8014ac2:	2b2a      	cmp	r3, #42	@ 0x2a
 8014ac4:	d015      	beq.n	8014af2 <_svfiprintf_r+0xfa>
 8014ac6:	9a07      	ldr	r2, [sp, #28]
 8014ac8:	4654      	mov	r4, sl
 8014aca:	2000      	movs	r0, #0
 8014acc:	f04f 0c0a 	mov.w	ip, #10
 8014ad0:	4621      	mov	r1, r4
 8014ad2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014ad6:	3b30      	subs	r3, #48	@ 0x30
 8014ad8:	2b09      	cmp	r3, #9
 8014ada:	d94b      	bls.n	8014b74 <_svfiprintf_r+0x17c>
 8014adc:	b1b0      	cbz	r0, 8014b0c <_svfiprintf_r+0x114>
 8014ade:	9207      	str	r2, [sp, #28]
 8014ae0:	e014      	b.n	8014b0c <_svfiprintf_r+0x114>
 8014ae2:	eba0 0308 	sub.w	r3, r0, r8
 8014ae6:	fa09 f303 	lsl.w	r3, r9, r3
 8014aea:	4313      	orrs	r3, r2
 8014aec:	9304      	str	r3, [sp, #16]
 8014aee:	46a2      	mov	sl, r4
 8014af0:	e7d2      	b.n	8014a98 <_svfiprintf_r+0xa0>
 8014af2:	9b03      	ldr	r3, [sp, #12]
 8014af4:	1d19      	adds	r1, r3, #4
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	9103      	str	r1, [sp, #12]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	bfbb      	ittet	lt
 8014afe:	425b      	neglt	r3, r3
 8014b00:	f042 0202 	orrlt.w	r2, r2, #2
 8014b04:	9307      	strge	r3, [sp, #28]
 8014b06:	9307      	strlt	r3, [sp, #28]
 8014b08:	bfb8      	it	lt
 8014b0a:	9204      	strlt	r2, [sp, #16]
 8014b0c:	7823      	ldrb	r3, [r4, #0]
 8014b0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8014b10:	d10a      	bne.n	8014b28 <_svfiprintf_r+0x130>
 8014b12:	7863      	ldrb	r3, [r4, #1]
 8014b14:	2b2a      	cmp	r3, #42	@ 0x2a
 8014b16:	d132      	bne.n	8014b7e <_svfiprintf_r+0x186>
 8014b18:	9b03      	ldr	r3, [sp, #12]
 8014b1a:	1d1a      	adds	r2, r3, #4
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	9203      	str	r2, [sp, #12]
 8014b20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014b24:	3402      	adds	r4, #2
 8014b26:	9305      	str	r3, [sp, #20]
 8014b28:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014bec <_svfiprintf_r+0x1f4>
 8014b2c:	7821      	ldrb	r1, [r4, #0]
 8014b2e:	2203      	movs	r2, #3
 8014b30:	4650      	mov	r0, sl
 8014b32:	f7eb fb75 	bl	8000220 <memchr>
 8014b36:	b138      	cbz	r0, 8014b48 <_svfiprintf_r+0x150>
 8014b38:	9b04      	ldr	r3, [sp, #16]
 8014b3a:	eba0 000a 	sub.w	r0, r0, sl
 8014b3e:	2240      	movs	r2, #64	@ 0x40
 8014b40:	4082      	lsls	r2, r0
 8014b42:	4313      	orrs	r3, r2
 8014b44:	3401      	adds	r4, #1
 8014b46:	9304      	str	r3, [sp, #16]
 8014b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b4c:	4824      	ldr	r0, [pc, #144]	@ (8014be0 <_svfiprintf_r+0x1e8>)
 8014b4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014b52:	2206      	movs	r2, #6
 8014b54:	f7eb fb64 	bl	8000220 <memchr>
 8014b58:	2800      	cmp	r0, #0
 8014b5a:	d036      	beq.n	8014bca <_svfiprintf_r+0x1d2>
 8014b5c:	4b21      	ldr	r3, [pc, #132]	@ (8014be4 <_svfiprintf_r+0x1ec>)
 8014b5e:	bb1b      	cbnz	r3, 8014ba8 <_svfiprintf_r+0x1b0>
 8014b60:	9b03      	ldr	r3, [sp, #12]
 8014b62:	3307      	adds	r3, #7
 8014b64:	f023 0307 	bic.w	r3, r3, #7
 8014b68:	3308      	adds	r3, #8
 8014b6a:	9303      	str	r3, [sp, #12]
 8014b6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b6e:	4433      	add	r3, r6
 8014b70:	9309      	str	r3, [sp, #36]	@ 0x24
 8014b72:	e76a      	b.n	8014a4a <_svfiprintf_r+0x52>
 8014b74:	fb0c 3202 	mla	r2, ip, r2, r3
 8014b78:	460c      	mov	r4, r1
 8014b7a:	2001      	movs	r0, #1
 8014b7c:	e7a8      	b.n	8014ad0 <_svfiprintf_r+0xd8>
 8014b7e:	2300      	movs	r3, #0
 8014b80:	3401      	adds	r4, #1
 8014b82:	9305      	str	r3, [sp, #20]
 8014b84:	4619      	mov	r1, r3
 8014b86:	f04f 0c0a 	mov.w	ip, #10
 8014b8a:	4620      	mov	r0, r4
 8014b8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014b90:	3a30      	subs	r2, #48	@ 0x30
 8014b92:	2a09      	cmp	r2, #9
 8014b94:	d903      	bls.n	8014b9e <_svfiprintf_r+0x1a6>
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d0c6      	beq.n	8014b28 <_svfiprintf_r+0x130>
 8014b9a:	9105      	str	r1, [sp, #20]
 8014b9c:	e7c4      	b.n	8014b28 <_svfiprintf_r+0x130>
 8014b9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014ba2:	4604      	mov	r4, r0
 8014ba4:	2301      	movs	r3, #1
 8014ba6:	e7f0      	b.n	8014b8a <_svfiprintf_r+0x192>
 8014ba8:	ab03      	add	r3, sp, #12
 8014baa:	9300      	str	r3, [sp, #0]
 8014bac:	462a      	mov	r2, r5
 8014bae:	4b0e      	ldr	r3, [pc, #56]	@ (8014be8 <_svfiprintf_r+0x1f0>)
 8014bb0:	a904      	add	r1, sp, #16
 8014bb2:	4638      	mov	r0, r7
 8014bb4:	f3af 8000 	nop.w
 8014bb8:	1c42      	adds	r2, r0, #1
 8014bba:	4606      	mov	r6, r0
 8014bbc:	d1d6      	bne.n	8014b6c <_svfiprintf_r+0x174>
 8014bbe:	89ab      	ldrh	r3, [r5, #12]
 8014bc0:	065b      	lsls	r3, r3, #25
 8014bc2:	f53f af2d 	bmi.w	8014a20 <_svfiprintf_r+0x28>
 8014bc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014bc8:	e72c      	b.n	8014a24 <_svfiprintf_r+0x2c>
 8014bca:	ab03      	add	r3, sp, #12
 8014bcc:	9300      	str	r3, [sp, #0]
 8014bce:	462a      	mov	r2, r5
 8014bd0:	4b05      	ldr	r3, [pc, #20]	@ (8014be8 <_svfiprintf_r+0x1f0>)
 8014bd2:	a904      	add	r1, sp, #16
 8014bd4:	4638      	mov	r0, r7
 8014bd6:	f000 f879 	bl	8014ccc <_printf_i>
 8014bda:	e7ed      	b.n	8014bb8 <_svfiprintf_r+0x1c0>
 8014bdc:	080155d8 	.word	0x080155d8
 8014be0:	080155e2 	.word	0x080155e2
 8014be4:	00000000 	.word	0x00000000
 8014be8:	08014941 	.word	0x08014941
 8014bec:	080155de 	.word	0x080155de

08014bf0 <_printf_common>:
 8014bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014bf4:	4616      	mov	r6, r2
 8014bf6:	4698      	mov	r8, r3
 8014bf8:	688a      	ldr	r2, [r1, #8]
 8014bfa:	690b      	ldr	r3, [r1, #16]
 8014bfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014c00:	4293      	cmp	r3, r2
 8014c02:	bfb8      	it	lt
 8014c04:	4613      	movlt	r3, r2
 8014c06:	6033      	str	r3, [r6, #0]
 8014c08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014c0c:	4607      	mov	r7, r0
 8014c0e:	460c      	mov	r4, r1
 8014c10:	b10a      	cbz	r2, 8014c16 <_printf_common+0x26>
 8014c12:	3301      	adds	r3, #1
 8014c14:	6033      	str	r3, [r6, #0]
 8014c16:	6823      	ldr	r3, [r4, #0]
 8014c18:	0699      	lsls	r1, r3, #26
 8014c1a:	bf42      	ittt	mi
 8014c1c:	6833      	ldrmi	r3, [r6, #0]
 8014c1e:	3302      	addmi	r3, #2
 8014c20:	6033      	strmi	r3, [r6, #0]
 8014c22:	6825      	ldr	r5, [r4, #0]
 8014c24:	f015 0506 	ands.w	r5, r5, #6
 8014c28:	d106      	bne.n	8014c38 <_printf_common+0x48>
 8014c2a:	f104 0a19 	add.w	sl, r4, #25
 8014c2e:	68e3      	ldr	r3, [r4, #12]
 8014c30:	6832      	ldr	r2, [r6, #0]
 8014c32:	1a9b      	subs	r3, r3, r2
 8014c34:	42ab      	cmp	r3, r5
 8014c36:	dc26      	bgt.n	8014c86 <_printf_common+0x96>
 8014c38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014c3c:	6822      	ldr	r2, [r4, #0]
 8014c3e:	3b00      	subs	r3, #0
 8014c40:	bf18      	it	ne
 8014c42:	2301      	movne	r3, #1
 8014c44:	0692      	lsls	r2, r2, #26
 8014c46:	d42b      	bmi.n	8014ca0 <_printf_common+0xb0>
 8014c48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014c4c:	4641      	mov	r1, r8
 8014c4e:	4638      	mov	r0, r7
 8014c50:	47c8      	blx	r9
 8014c52:	3001      	adds	r0, #1
 8014c54:	d01e      	beq.n	8014c94 <_printf_common+0xa4>
 8014c56:	6823      	ldr	r3, [r4, #0]
 8014c58:	6922      	ldr	r2, [r4, #16]
 8014c5a:	f003 0306 	and.w	r3, r3, #6
 8014c5e:	2b04      	cmp	r3, #4
 8014c60:	bf02      	ittt	eq
 8014c62:	68e5      	ldreq	r5, [r4, #12]
 8014c64:	6833      	ldreq	r3, [r6, #0]
 8014c66:	1aed      	subeq	r5, r5, r3
 8014c68:	68a3      	ldr	r3, [r4, #8]
 8014c6a:	bf0c      	ite	eq
 8014c6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014c70:	2500      	movne	r5, #0
 8014c72:	4293      	cmp	r3, r2
 8014c74:	bfc4      	itt	gt
 8014c76:	1a9b      	subgt	r3, r3, r2
 8014c78:	18ed      	addgt	r5, r5, r3
 8014c7a:	2600      	movs	r6, #0
 8014c7c:	341a      	adds	r4, #26
 8014c7e:	42b5      	cmp	r5, r6
 8014c80:	d11a      	bne.n	8014cb8 <_printf_common+0xc8>
 8014c82:	2000      	movs	r0, #0
 8014c84:	e008      	b.n	8014c98 <_printf_common+0xa8>
 8014c86:	2301      	movs	r3, #1
 8014c88:	4652      	mov	r2, sl
 8014c8a:	4641      	mov	r1, r8
 8014c8c:	4638      	mov	r0, r7
 8014c8e:	47c8      	blx	r9
 8014c90:	3001      	adds	r0, #1
 8014c92:	d103      	bne.n	8014c9c <_printf_common+0xac>
 8014c94:	f04f 30ff 	mov.w	r0, #4294967295
 8014c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c9c:	3501      	adds	r5, #1
 8014c9e:	e7c6      	b.n	8014c2e <_printf_common+0x3e>
 8014ca0:	18e1      	adds	r1, r4, r3
 8014ca2:	1c5a      	adds	r2, r3, #1
 8014ca4:	2030      	movs	r0, #48	@ 0x30
 8014ca6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014caa:	4422      	add	r2, r4
 8014cac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014cb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014cb4:	3302      	adds	r3, #2
 8014cb6:	e7c7      	b.n	8014c48 <_printf_common+0x58>
 8014cb8:	2301      	movs	r3, #1
 8014cba:	4622      	mov	r2, r4
 8014cbc:	4641      	mov	r1, r8
 8014cbe:	4638      	mov	r0, r7
 8014cc0:	47c8      	blx	r9
 8014cc2:	3001      	adds	r0, #1
 8014cc4:	d0e6      	beq.n	8014c94 <_printf_common+0xa4>
 8014cc6:	3601      	adds	r6, #1
 8014cc8:	e7d9      	b.n	8014c7e <_printf_common+0x8e>
	...

08014ccc <_printf_i>:
 8014ccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014cd0:	7e0f      	ldrb	r7, [r1, #24]
 8014cd2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014cd4:	2f78      	cmp	r7, #120	@ 0x78
 8014cd6:	4691      	mov	r9, r2
 8014cd8:	4680      	mov	r8, r0
 8014cda:	460c      	mov	r4, r1
 8014cdc:	469a      	mov	sl, r3
 8014cde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014ce2:	d807      	bhi.n	8014cf4 <_printf_i+0x28>
 8014ce4:	2f62      	cmp	r7, #98	@ 0x62
 8014ce6:	d80a      	bhi.n	8014cfe <_printf_i+0x32>
 8014ce8:	2f00      	cmp	r7, #0
 8014cea:	f000 80d1 	beq.w	8014e90 <_printf_i+0x1c4>
 8014cee:	2f58      	cmp	r7, #88	@ 0x58
 8014cf0:	f000 80b8 	beq.w	8014e64 <_printf_i+0x198>
 8014cf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014cf8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014cfc:	e03a      	b.n	8014d74 <_printf_i+0xa8>
 8014cfe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014d02:	2b15      	cmp	r3, #21
 8014d04:	d8f6      	bhi.n	8014cf4 <_printf_i+0x28>
 8014d06:	a101      	add	r1, pc, #4	@ (adr r1, 8014d0c <_printf_i+0x40>)
 8014d08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014d0c:	08014d65 	.word	0x08014d65
 8014d10:	08014d79 	.word	0x08014d79
 8014d14:	08014cf5 	.word	0x08014cf5
 8014d18:	08014cf5 	.word	0x08014cf5
 8014d1c:	08014cf5 	.word	0x08014cf5
 8014d20:	08014cf5 	.word	0x08014cf5
 8014d24:	08014d79 	.word	0x08014d79
 8014d28:	08014cf5 	.word	0x08014cf5
 8014d2c:	08014cf5 	.word	0x08014cf5
 8014d30:	08014cf5 	.word	0x08014cf5
 8014d34:	08014cf5 	.word	0x08014cf5
 8014d38:	08014e77 	.word	0x08014e77
 8014d3c:	08014da3 	.word	0x08014da3
 8014d40:	08014e31 	.word	0x08014e31
 8014d44:	08014cf5 	.word	0x08014cf5
 8014d48:	08014cf5 	.word	0x08014cf5
 8014d4c:	08014e99 	.word	0x08014e99
 8014d50:	08014cf5 	.word	0x08014cf5
 8014d54:	08014da3 	.word	0x08014da3
 8014d58:	08014cf5 	.word	0x08014cf5
 8014d5c:	08014cf5 	.word	0x08014cf5
 8014d60:	08014e39 	.word	0x08014e39
 8014d64:	6833      	ldr	r3, [r6, #0]
 8014d66:	1d1a      	adds	r2, r3, #4
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	6032      	str	r2, [r6, #0]
 8014d6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014d70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014d74:	2301      	movs	r3, #1
 8014d76:	e09c      	b.n	8014eb2 <_printf_i+0x1e6>
 8014d78:	6833      	ldr	r3, [r6, #0]
 8014d7a:	6820      	ldr	r0, [r4, #0]
 8014d7c:	1d19      	adds	r1, r3, #4
 8014d7e:	6031      	str	r1, [r6, #0]
 8014d80:	0606      	lsls	r6, r0, #24
 8014d82:	d501      	bpl.n	8014d88 <_printf_i+0xbc>
 8014d84:	681d      	ldr	r5, [r3, #0]
 8014d86:	e003      	b.n	8014d90 <_printf_i+0xc4>
 8014d88:	0645      	lsls	r5, r0, #25
 8014d8a:	d5fb      	bpl.n	8014d84 <_printf_i+0xb8>
 8014d8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014d90:	2d00      	cmp	r5, #0
 8014d92:	da03      	bge.n	8014d9c <_printf_i+0xd0>
 8014d94:	232d      	movs	r3, #45	@ 0x2d
 8014d96:	426d      	negs	r5, r5
 8014d98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014d9c:	4858      	ldr	r0, [pc, #352]	@ (8014f00 <_printf_i+0x234>)
 8014d9e:	230a      	movs	r3, #10
 8014da0:	e011      	b.n	8014dc6 <_printf_i+0xfa>
 8014da2:	6821      	ldr	r1, [r4, #0]
 8014da4:	6833      	ldr	r3, [r6, #0]
 8014da6:	0608      	lsls	r0, r1, #24
 8014da8:	f853 5b04 	ldr.w	r5, [r3], #4
 8014dac:	d402      	bmi.n	8014db4 <_printf_i+0xe8>
 8014dae:	0649      	lsls	r1, r1, #25
 8014db0:	bf48      	it	mi
 8014db2:	b2ad      	uxthmi	r5, r5
 8014db4:	2f6f      	cmp	r7, #111	@ 0x6f
 8014db6:	4852      	ldr	r0, [pc, #328]	@ (8014f00 <_printf_i+0x234>)
 8014db8:	6033      	str	r3, [r6, #0]
 8014dba:	bf14      	ite	ne
 8014dbc:	230a      	movne	r3, #10
 8014dbe:	2308      	moveq	r3, #8
 8014dc0:	2100      	movs	r1, #0
 8014dc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014dc6:	6866      	ldr	r6, [r4, #4]
 8014dc8:	60a6      	str	r6, [r4, #8]
 8014dca:	2e00      	cmp	r6, #0
 8014dcc:	db05      	blt.n	8014dda <_printf_i+0x10e>
 8014dce:	6821      	ldr	r1, [r4, #0]
 8014dd0:	432e      	orrs	r6, r5
 8014dd2:	f021 0104 	bic.w	r1, r1, #4
 8014dd6:	6021      	str	r1, [r4, #0]
 8014dd8:	d04b      	beq.n	8014e72 <_printf_i+0x1a6>
 8014dda:	4616      	mov	r6, r2
 8014ddc:	fbb5 f1f3 	udiv	r1, r5, r3
 8014de0:	fb03 5711 	mls	r7, r3, r1, r5
 8014de4:	5dc7      	ldrb	r7, [r0, r7]
 8014de6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014dea:	462f      	mov	r7, r5
 8014dec:	42bb      	cmp	r3, r7
 8014dee:	460d      	mov	r5, r1
 8014df0:	d9f4      	bls.n	8014ddc <_printf_i+0x110>
 8014df2:	2b08      	cmp	r3, #8
 8014df4:	d10b      	bne.n	8014e0e <_printf_i+0x142>
 8014df6:	6823      	ldr	r3, [r4, #0]
 8014df8:	07df      	lsls	r7, r3, #31
 8014dfa:	d508      	bpl.n	8014e0e <_printf_i+0x142>
 8014dfc:	6923      	ldr	r3, [r4, #16]
 8014dfe:	6861      	ldr	r1, [r4, #4]
 8014e00:	4299      	cmp	r1, r3
 8014e02:	bfde      	ittt	le
 8014e04:	2330      	movle	r3, #48	@ 0x30
 8014e06:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014e0a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014e0e:	1b92      	subs	r2, r2, r6
 8014e10:	6122      	str	r2, [r4, #16]
 8014e12:	f8cd a000 	str.w	sl, [sp]
 8014e16:	464b      	mov	r3, r9
 8014e18:	aa03      	add	r2, sp, #12
 8014e1a:	4621      	mov	r1, r4
 8014e1c:	4640      	mov	r0, r8
 8014e1e:	f7ff fee7 	bl	8014bf0 <_printf_common>
 8014e22:	3001      	adds	r0, #1
 8014e24:	d14a      	bne.n	8014ebc <_printf_i+0x1f0>
 8014e26:	f04f 30ff 	mov.w	r0, #4294967295
 8014e2a:	b004      	add	sp, #16
 8014e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e30:	6823      	ldr	r3, [r4, #0]
 8014e32:	f043 0320 	orr.w	r3, r3, #32
 8014e36:	6023      	str	r3, [r4, #0]
 8014e38:	4832      	ldr	r0, [pc, #200]	@ (8014f04 <_printf_i+0x238>)
 8014e3a:	2778      	movs	r7, #120	@ 0x78
 8014e3c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014e40:	6823      	ldr	r3, [r4, #0]
 8014e42:	6831      	ldr	r1, [r6, #0]
 8014e44:	061f      	lsls	r7, r3, #24
 8014e46:	f851 5b04 	ldr.w	r5, [r1], #4
 8014e4a:	d402      	bmi.n	8014e52 <_printf_i+0x186>
 8014e4c:	065f      	lsls	r7, r3, #25
 8014e4e:	bf48      	it	mi
 8014e50:	b2ad      	uxthmi	r5, r5
 8014e52:	6031      	str	r1, [r6, #0]
 8014e54:	07d9      	lsls	r1, r3, #31
 8014e56:	bf44      	itt	mi
 8014e58:	f043 0320 	orrmi.w	r3, r3, #32
 8014e5c:	6023      	strmi	r3, [r4, #0]
 8014e5e:	b11d      	cbz	r5, 8014e68 <_printf_i+0x19c>
 8014e60:	2310      	movs	r3, #16
 8014e62:	e7ad      	b.n	8014dc0 <_printf_i+0xf4>
 8014e64:	4826      	ldr	r0, [pc, #152]	@ (8014f00 <_printf_i+0x234>)
 8014e66:	e7e9      	b.n	8014e3c <_printf_i+0x170>
 8014e68:	6823      	ldr	r3, [r4, #0]
 8014e6a:	f023 0320 	bic.w	r3, r3, #32
 8014e6e:	6023      	str	r3, [r4, #0]
 8014e70:	e7f6      	b.n	8014e60 <_printf_i+0x194>
 8014e72:	4616      	mov	r6, r2
 8014e74:	e7bd      	b.n	8014df2 <_printf_i+0x126>
 8014e76:	6833      	ldr	r3, [r6, #0]
 8014e78:	6825      	ldr	r5, [r4, #0]
 8014e7a:	6961      	ldr	r1, [r4, #20]
 8014e7c:	1d18      	adds	r0, r3, #4
 8014e7e:	6030      	str	r0, [r6, #0]
 8014e80:	062e      	lsls	r6, r5, #24
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	d501      	bpl.n	8014e8a <_printf_i+0x1be>
 8014e86:	6019      	str	r1, [r3, #0]
 8014e88:	e002      	b.n	8014e90 <_printf_i+0x1c4>
 8014e8a:	0668      	lsls	r0, r5, #25
 8014e8c:	d5fb      	bpl.n	8014e86 <_printf_i+0x1ba>
 8014e8e:	8019      	strh	r1, [r3, #0]
 8014e90:	2300      	movs	r3, #0
 8014e92:	6123      	str	r3, [r4, #16]
 8014e94:	4616      	mov	r6, r2
 8014e96:	e7bc      	b.n	8014e12 <_printf_i+0x146>
 8014e98:	6833      	ldr	r3, [r6, #0]
 8014e9a:	1d1a      	adds	r2, r3, #4
 8014e9c:	6032      	str	r2, [r6, #0]
 8014e9e:	681e      	ldr	r6, [r3, #0]
 8014ea0:	6862      	ldr	r2, [r4, #4]
 8014ea2:	2100      	movs	r1, #0
 8014ea4:	4630      	mov	r0, r6
 8014ea6:	f7eb f9bb 	bl	8000220 <memchr>
 8014eaa:	b108      	cbz	r0, 8014eb0 <_printf_i+0x1e4>
 8014eac:	1b80      	subs	r0, r0, r6
 8014eae:	6060      	str	r0, [r4, #4]
 8014eb0:	6863      	ldr	r3, [r4, #4]
 8014eb2:	6123      	str	r3, [r4, #16]
 8014eb4:	2300      	movs	r3, #0
 8014eb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014eba:	e7aa      	b.n	8014e12 <_printf_i+0x146>
 8014ebc:	6923      	ldr	r3, [r4, #16]
 8014ebe:	4632      	mov	r2, r6
 8014ec0:	4649      	mov	r1, r9
 8014ec2:	4640      	mov	r0, r8
 8014ec4:	47d0      	blx	sl
 8014ec6:	3001      	adds	r0, #1
 8014ec8:	d0ad      	beq.n	8014e26 <_printf_i+0x15a>
 8014eca:	6823      	ldr	r3, [r4, #0]
 8014ecc:	079b      	lsls	r3, r3, #30
 8014ece:	d413      	bmi.n	8014ef8 <_printf_i+0x22c>
 8014ed0:	68e0      	ldr	r0, [r4, #12]
 8014ed2:	9b03      	ldr	r3, [sp, #12]
 8014ed4:	4298      	cmp	r0, r3
 8014ed6:	bfb8      	it	lt
 8014ed8:	4618      	movlt	r0, r3
 8014eda:	e7a6      	b.n	8014e2a <_printf_i+0x15e>
 8014edc:	2301      	movs	r3, #1
 8014ede:	4632      	mov	r2, r6
 8014ee0:	4649      	mov	r1, r9
 8014ee2:	4640      	mov	r0, r8
 8014ee4:	47d0      	blx	sl
 8014ee6:	3001      	adds	r0, #1
 8014ee8:	d09d      	beq.n	8014e26 <_printf_i+0x15a>
 8014eea:	3501      	adds	r5, #1
 8014eec:	68e3      	ldr	r3, [r4, #12]
 8014eee:	9903      	ldr	r1, [sp, #12]
 8014ef0:	1a5b      	subs	r3, r3, r1
 8014ef2:	42ab      	cmp	r3, r5
 8014ef4:	dcf2      	bgt.n	8014edc <_printf_i+0x210>
 8014ef6:	e7eb      	b.n	8014ed0 <_printf_i+0x204>
 8014ef8:	2500      	movs	r5, #0
 8014efa:	f104 0619 	add.w	r6, r4, #25
 8014efe:	e7f5      	b.n	8014eec <_printf_i+0x220>
 8014f00:	080155e9 	.word	0x080155e9
 8014f04:	080155fa 	.word	0x080155fa

08014f08 <memmove>:
 8014f08:	4288      	cmp	r0, r1
 8014f0a:	b510      	push	{r4, lr}
 8014f0c:	eb01 0402 	add.w	r4, r1, r2
 8014f10:	d902      	bls.n	8014f18 <memmove+0x10>
 8014f12:	4284      	cmp	r4, r0
 8014f14:	4623      	mov	r3, r4
 8014f16:	d807      	bhi.n	8014f28 <memmove+0x20>
 8014f18:	1e43      	subs	r3, r0, #1
 8014f1a:	42a1      	cmp	r1, r4
 8014f1c:	d008      	beq.n	8014f30 <memmove+0x28>
 8014f1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014f22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014f26:	e7f8      	b.n	8014f1a <memmove+0x12>
 8014f28:	4402      	add	r2, r0
 8014f2a:	4601      	mov	r1, r0
 8014f2c:	428a      	cmp	r2, r1
 8014f2e:	d100      	bne.n	8014f32 <memmove+0x2a>
 8014f30:	bd10      	pop	{r4, pc}
 8014f32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014f36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014f3a:	e7f7      	b.n	8014f2c <memmove+0x24>

08014f3c <_realloc_r>:
 8014f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f40:	4607      	mov	r7, r0
 8014f42:	4614      	mov	r4, r2
 8014f44:	460d      	mov	r5, r1
 8014f46:	b921      	cbnz	r1, 8014f52 <_realloc_r+0x16>
 8014f48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f4c:	4611      	mov	r1, r2
 8014f4e:	f7ff bb33 	b.w	80145b8 <_malloc_r>
 8014f52:	b92a      	cbnz	r2, 8014f60 <_realloc_r+0x24>
 8014f54:	f7ff fcaa 	bl	80148ac <_free_r>
 8014f58:	4625      	mov	r5, r4
 8014f5a:	4628      	mov	r0, r5
 8014f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f60:	f000 f81a 	bl	8014f98 <_malloc_usable_size_r>
 8014f64:	4284      	cmp	r4, r0
 8014f66:	4606      	mov	r6, r0
 8014f68:	d802      	bhi.n	8014f70 <_realloc_r+0x34>
 8014f6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014f6e:	d8f4      	bhi.n	8014f5a <_realloc_r+0x1e>
 8014f70:	4621      	mov	r1, r4
 8014f72:	4638      	mov	r0, r7
 8014f74:	f7ff fb20 	bl	80145b8 <_malloc_r>
 8014f78:	4680      	mov	r8, r0
 8014f7a:	b908      	cbnz	r0, 8014f80 <_realloc_r+0x44>
 8014f7c:	4645      	mov	r5, r8
 8014f7e:	e7ec      	b.n	8014f5a <_realloc_r+0x1e>
 8014f80:	42b4      	cmp	r4, r6
 8014f82:	4622      	mov	r2, r4
 8014f84:	4629      	mov	r1, r5
 8014f86:	bf28      	it	cs
 8014f88:	4632      	movcs	r2, r6
 8014f8a:	f7ff fc81 	bl	8014890 <memcpy>
 8014f8e:	4629      	mov	r1, r5
 8014f90:	4638      	mov	r0, r7
 8014f92:	f7ff fc8b 	bl	80148ac <_free_r>
 8014f96:	e7f1      	b.n	8014f7c <_realloc_r+0x40>

08014f98 <_malloc_usable_size_r>:
 8014f98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014f9c:	1f18      	subs	r0, r3, #4
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	bfbc      	itt	lt
 8014fa2:	580b      	ldrlt	r3, [r1, r0]
 8014fa4:	18c0      	addlt	r0, r0, r3
 8014fa6:	4770      	bx	lr

08014fa8 <_init>:
 8014fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014faa:	bf00      	nop
 8014fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014fae:	bc08      	pop	{r3}
 8014fb0:	469e      	mov	lr, r3
 8014fb2:	4770      	bx	lr

08014fb4 <_fini>:
 8014fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fb6:	bf00      	nop
 8014fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014fba:	bc08      	pop	{r3}
 8014fbc:	469e      	mov	lr, r3
 8014fbe:	4770      	bx	lr
